
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012eb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013ac  08013058  08013058  00014058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014404  08014404  00016250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014404  08014404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801440c  0801440c  00016250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801440c  0801440c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014410  08014410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08014414  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d38  20000250  08014664  00016250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006f88  08014664  00016f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016250  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244fa  00000000  00000000  00016280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cba  00000000  00000000  0003a77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  00040438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000197d  00000000  00000000  000424d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec6f  00000000  00000000  00043e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ab6a  00000000  00000000  00062abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66c0  00000000  00000000  0008d626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133ce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a544  00000000  00000000  00133d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801303c 	.word	0x0801303c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0801303c 	.word	0x0801303c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 ba09 	b.w	80010ec <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9be 	b.w	80010ec <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <Aiot_Task>:
int esp_is_wifi_ready(void);
void AiotClient_Init(void);   // 기존 초기화 함수 extern 선언

// Aiot_Task.c
void Aiot_Task(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 80010f8:	f002 fc22 	bl	8003940 <AiotClient_Init>

    for(;;) {
        int wifi_ok = esp_is_wifi_ready();
 80010fc:	f002 fdc4 	bl	8003c88 <esp_is_wifi_ready>
 8001100:	6178      	str	r0, [r7, #20]
        int tcp_ok  = esp_get_status();
 8001102:	f002 fa47 	bl	8003594 <esp_get_status>
 8001106:	6138      	str	r0, [r7, #16]

        if (!wifi_ok) {
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <Aiot_Task+0x28>
            vTaskDelay(pdMS_TO_TICKS(2000));
 800110e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001112:	f00a fa21 	bl	800b558 <vTaskDelay>
            continue;
 8001116:	e01f      	b.n	8001158 <Aiot_Task+0x68>
        }

        if (tcp_ok != 0) {  // 연결 안 되었을 때만 접속
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d018      	beq.n	8001150 <Aiot_Task+0x60>
            printf("server connecting ...\r\n");
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <Aiot_Task+0x6c>)
 8001120:	f00d fc60 	bl	800e9e4 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever)==osOK) {
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <Aiot_Task+0x70>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	4618      	mov	r0, r3
 800112e:	f008 ff67 	bl	800a000 <osMutexAcquire>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <Aiot_Task+0x60>
                int rc = esp_client_conn();
 8001138:	f002 f956 	bl	80033e8 <esp_client_conn>
 800113c:	60f8      	str	r0, [r7, #12]
                osMutexRelease(ESP_MutexHandle);
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <Aiot_Task+0x70>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f008 ffa7 	bl	800a096 <osMutexRelease>
                printf("[AIOT] conn rc=%d\r\n", rc);
 8001148:	68f9      	ldr	r1, [r7, #12]
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <Aiot_Task+0x74>)
 800114c:	f00d fbda 	bl	800e904 <iprintf>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(10000));
 8001150:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001154:	f00a fa00 	bl	800b558 <vTaskDelay>
    for(;;) {
 8001158:	e7d0      	b.n	80010fc <Aiot_Task+0xc>
 800115a:	bf00      	nop
 800115c:	08013058 	.word	0x08013058
 8001160:	200024b0 	.word	0x200024b0
 8001164:	08013070 	.word	0x08013070

08001168 <LED1_ON>:
#define LED2_Pin         GPIO_PIN_8

#define FAN_GPIO_Port   GPIOB
#define FAN_Pin         GPIO_PIN_4

static inline void LED1_ON(void){  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); }
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <LED1_ON+0x14>)
 8001172:	f004 fbf9 	bl	8005968 <HAL_GPIO_WritePin>
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <LED1_OFF>:
static inline void LED1_OFF(void){ HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); }
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <LED1_OFF+0x14>)
 800118a:	f004 fbed 	bl	8005968 <HAL_GPIO_WritePin>
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020800 	.word	0x40020800

08001198 <LED2_ON>:
static inline void LED2_ON(void){  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); }
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a2:	4802      	ldr	r0, [pc, #8]	@ (80011ac <LED2_ON+0x14>)
 80011a4:	f004 fbe0 	bl	8005968 <HAL_GPIO_WritePin>
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40020800 	.word	0x40020800

080011b0 <LED2_OFF>:
static inline void LED2_OFF(void){ HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ba:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <LED2_OFF+0x14>)
 80011bc:	f004 fbd4 	bl	8005968 <HAL_GPIO_WritePin>
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020800 	.word	0x40020800

080011c8 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	2201      	movs	r2, #1
 80011ce:	2110      	movs	r1, #16
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <FAN_ON+0x14>)
 80011d2:	f004 fbc9 	bl	8005968 <HAL_GPIO_WritePin>
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020400 	.word	0x40020400

080011e0 <FAN_OFF>:
static inline void FAN_OFF(void){ HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET); }
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <FAN_OFF+0x14>)
 80011ea:	f004 fbbd 	bl	8005968 <HAL_GPIO_WritePin>
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400

080011f8 <_is_digits_4>:
#include "Servo.h"
#include "LED_FAN.h"
#include "FanHold.h"
#include "Schedule.h"   // ★ 예약 제어

static int _is_digits_4(const char *s){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    return (s && strlen(s)==4 &&
            s[0]>='0'&&s[0]<='9' &&
            s[1]>='0'&&s[1]<='9' &&
            s[2]>='0'&&s[2]<='9' &&
            s[3]>='0'&&s[3]<='9');
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d02d      	beq.n	8001262 <_is_digits_4+0x6a>
    return (s && strlen(s)==4 &&
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff f84a 	bl	80002a0 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	2b04      	cmp	r3, #4
 8001210:	d127      	bne.n	8001262 <_is_digits_4+0x6a>
            s[0]>='0'&&s[0]<='9' &&
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
    return (s && strlen(s)==4 &&
 8001216:	2b2f      	cmp	r3, #47	@ 0x2f
 8001218:	d923      	bls.n	8001262 <_is_digits_4+0x6a>
            s[0]>='0'&&s[0]<='9' &&
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b39      	cmp	r3, #57	@ 0x39
 8001220:	d81f      	bhi.n	8001262 <_is_digits_4+0x6a>
            s[1]>='0'&&s[1]<='9' &&
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	781b      	ldrb	r3, [r3, #0]
            s[0]>='0'&&s[0]<='9' &&
 8001228:	2b2f      	cmp	r3, #47	@ 0x2f
 800122a:	d91a      	bls.n	8001262 <_is_digits_4+0x6a>
            s[1]>='0'&&s[1]<='9' &&
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b39      	cmp	r3, #57	@ 0x39
 8001234:	d815      	bhi.n	8001262 <_is_digits_4+0x6a>
            s[2]>='0'&&s[2]<='9' &&
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3302      	adds	r3, #2
 800123a:	781b      	ldrb	r3, [r3, #0]
            s[1]>='0'&&s[1]<='9' &&
 800123c:	2b2f      	cmp	r3, #47	@ 0x2f
 800123e:	d910      	bls.n	8001262 <_is_digits_4+0x6a>
            s[2]>='0'&&s[2]<='9' &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3302      	adds	r3, #2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b39      	cmp	r3, #57	@ 0x39
 8001248:	d80b      	bhi.n	8001262 <_is_digits_4+0x6a>
            s[3]>='0'&&s[3]<='9');
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
            s[2]>='0'&&s[2]<='9' &&
 8001250:	2b2f      	cmp	r3, #47	@ 0x2f
 8001252:	d906      	bls.n	8001262 <_is_digits_4+0x6a>
            s[3]>='0'&&s[3]<='9');
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3303      	adds	r3, #3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b39      	cmp	r3, #57	@ 0x39
 800125c:	d801      	bhi.n	8001262 <_is_digits_4+0x6a>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <_is_digits_4+0x6c>
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <esp_event>:
extern osMutexId_t ESP_MutexHandle;
extern cb_data_t cb_data;
void esp_event(const char *recvBuf);

void esp_event(const char *recvBuf)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ac      	sub	sp, #176	@ 0xb0
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	227f      	movs	r2, #127	@ 0x7f
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4618      	mov	r0, r3
 800128c:	f00d fd72 	bl	800ed74 <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	210a      	movs	r1, #10
 800129c:	4618      	mov	r0, r3
 800129e:	f00d fd39 	bl	800ed14 <strchr>
 80012a2:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    if (newline) *newline = '\0';
 80012a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <esp_event+0x4a>
 80012ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	210d      	movs	r1, #13
 80012bc:	4618      	mov	r0, r3
 80012be:	f00d fd29 	bl	800ed14 <strchr>
 80012c2:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    if (newline) *newline = '\0';
 80012c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <esp_event+0x6a>
 80012ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    char *token = strtok(strBuff, "[]@ ");
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	49b1      	ldr	r1, [pc, #708]	@ (80015a8 <esp_event+0x33c>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00d fd5a 	bl	800ed9c <strtok>
 80012e8:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    while (token != NULL && idx < 4)
 80012ec:	e011      	b.n	8001312 <esp_event+0xa6>
    {
        pArray[idx++] = token;
 80012ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	33b0      	adds	r3, #176	@ 0xb0
 80012fc:	443b      	add	r3, r7
 80012fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001302:	f843 2ca8 	str.w	r2, [r3, #-168]
        token = strtok(NULL, "[]@ ");
 8001306:	49a8      	ldr	r1, [pc, #672]	@ (80015a8 <esp_event+0x33c>)
 8001308:	2000      	movs	r0, #0
 800130a:	f00d fd47 	bl	800ed9c <strtok>
 800130e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    while (token != NULL && idx < 4)
 8001312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <esp_event+0xb6>
 800131a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800131e:	2b03      	cmp	r3, #3
 8001320:	dde5      	ble.n	80012ee <esp_event+0x82>
    }

    // 형태1: SETON@HHMM
    if ( (pArray[0] && strcmp(pArray[0], "SETOFF") == 0) ||
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <esp_event+0xcc>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	49a0      	ldr	r1, [pc, #640]	@ (80015ac <esp_event+0x340>)
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff57 	bl	80001e0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00a      	beq.n	800134e <esp_event+0xe2>
         (pArray[1] && strcmp(pArray[1], "SETOFF") == 0) )
 8001338:	68fb      	ldr	r3, [r7, #12]
    if ( (pArray[0] && strcmp(pArray[0], "SETOFF") == 0) ||
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <esp_event+0xe8>
         (pArray[1] && strcmp(pArray[1], "SETOFF") == 0) )
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	499a      	ldr	r1, [pc, #616]	@ (80015ac <esp_event+0x340>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff4c 	bl	80001e0 <strcmp>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <esp_event+0xe8>
    {
        Schedule_Clear();
 800134e:	f000 feb7 	bl	80020c0 <Schedule_Clear>
        return;  // 기존 장치 처리로 내려가지 않음
 8001352:	e19d      	b.n	8001690 <esp_event+0x424>
    }

    if ( (pArray[0] && strcmp(pArray[0], "SETON") == 0 && pArray[1] && _is_digits_4(pArray[1])) ||
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d011      	beq.n	800137e <esp_event+0x112>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4994      	ldr	r1, [pc, #592]	@ (80015b0 <esp_event+0x344>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff3e 	bl	80001e0 <strcmp>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <esp_event+0x112>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <esp_event+0x112>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff40 	bl	80011f8 <_is_digits_4>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d114      	bne.n	80013a8 <esp_event+0x13c>
         (pArray[1] && strcmp(pArray[1], "SETON") == 0 && pArray[2] && _is_digits_4(pArray[2])) )
 800137e:	68fb      	ldr	r3, [r7, #12]
    if ( (pArray[0] && strcmp(pArray[0], "SETON") == 0 && pArray[1] && _is_digits_4(pArray[1])) ||
 8001380:	2b00      	cmp	r3, #0
 8001382:	d06b      	beq.n	800145c <esp_event+0x1f0>
         (pArray[1] && strcmp(pArray[1], "SETON") == 0 && pArray[2] && _is_digits_4(pArray[2])) )
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	498a      	ldr	r1, [pc, #552]	@ (80015b0 <esp_event+0x344>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff29 	bl	80001e0 <strcmp>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d163      	bne.n	800145c <esp_event+0x1f0>
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d060      	beq.n	800145c <esp_event+0x1f0>
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff2b 	bl	80011f8 <_is_digits_4>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <esp_event+0x1f0>
    {
        const char *hhmm = (strcmp(pArray[0], "SETON")==0) ? pArray[1] : pArray[2];
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4981      	ldr	r1, [pc, #516]	@ (80015b0 <esp_event+0x344>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff17 	bl	80001e0 <strcmp>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <esp_event+0x150>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e000      	b.n	80013be <esp_event+0x152>
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        int hh = (hhmm[0]-'0')*10 + (hhmm[1]-'0');
 80013c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	461a      	mov	r2, r3
 80013d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013da:	3301      	adds	r3, #1
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3b30      	subs	r3, #48	@ 0x30
 80013e0:	4413      	add	r3, r2
 80013e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        int mm = (hhmm[2]-'0')*10 + (hhmm[3]-'0');
 80013e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013ea:	3302      	adds	r3, #2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001400:	3303      	adds	r3, #3
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3b30      	subs	r3, #48	@ 0x30
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        if (0 <= hh && hh <= 23 && 0 <= mm && mm <= 59){
 800140c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001410:	2b00      	cmp	r3, #0
 8001412:	db1d      	blt.n	8001450 <esp_event+0x1e4>
 8001414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001418:	2b17      	cmp	r3, #23
 800141a:	dc19      	bgt.n	8001450 <esp_event+0x1e4>
 800141c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001420:	2b00      	cmp	r3, #0
 8001422:	db15      	blt.n	8001450 <esp_event+0x1e4>
 8001424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001428:	2b3b      	cmp	r3, #59	@ 0x3b
 800142a:	dc11      	bgt.n	8001450 <esp_event+0x1e4>
            Schedule_Set((uint8_t)hh, (uint8_t)mm);
 800142c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fe20 	bl	8002080 <Schedule_Set>
            printf("[CMD] 예약 등록: 오늘 %02d:%02d (LED1/LED2/FAN ON)\r\n", hh, mm);
 8001440:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001444:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001448:	485a      	ldr	r0, [pc, #360]	@ (80015b4 <esp_event+0x348>)
 800144a:	f00d fa5b 	bl	800e904 <iprintf>
        } else {
            printf("[CMD] SETON 시간 범위 오류: %s\r\n", hhmm);
        }
        return;  // 기존 장치 처리로 내려가지 않음
 800144e:	e11f      	b.n	8001690 <esp_event+0x424>
            printf("[CMD] SETON 시간 범위 오류: %s\r\n", hhmm);
 8001450:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001454:	4858      	ldr	r0, [pc, #352]	@ (80015b8 <esp_event+0x34c>)
 8001456:	f00d fa55 	bl	800e904 <iprintf>
        return;  // 기존 장치 처리로 내려가지 않음
 800145a:	e119      	b.n	8001690 <esp_event+0x424>
    }

    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8110 	beq.w	8001684 <esp_event+0x418>
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 810c 	beq.w	8001684 <esp_event+0x418>
    {
        if (strcmp(pArray[1], "LEDA") == 0)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4953      	ldr	r1, [pc, #332]	@ (80015bc <esp_event+0x350>)
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe feb5 	bl	80001e0 <strcmp>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d120      	bne.n	80014be <esp_event+0x252>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4950      	ldr	r1, [pc, #320]	@ (80015c0 <esp_event+0x354>)
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fead 	bl	80001e0 <strcmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <esp_event+0x230>
                LED1_ON();
 800148c:	f7ff fe6c 	bl	8001168 <LED1_ON>
                LED2_ON();
 8001490:	f7ff fe82 	bl	8001198 <LED2_ON>
                printf("LED1&2 turned ON\r\n");
 8001494:	484b      	ldr	r0, [pc, #300]	@ (80015c4 <esp_event+0x358>)
 8001496:	f00d faa5 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 800149a:	e0f8      	b.n	800168e <esp_event+0x422>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	494a      	ldr	r1, [pc, #296]	@ (80015c8 <esp_event+0x35c>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fe9d 	bl	80001e0 <strcmp>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 80f0 	bne.w	800168e <esp_event+0x422>
                LED1_OFF();
 80014ae:	f7ff fe67 	bl	8001180 <LED1_OFF>
                LED2_OFF();
 80014b2:	f7ff fe7d 	bl	80011b0 <LED2_OFF>
                printf("LED1&2 turned OFF\r\n");
 80014b6:	4845      	ldr	r0, [pc, #276]	@ (80015cc <esp_event+0x360>)
 80014b8:	f00d fa94 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 80014bc:	e0e7      	b.n	800168e <esp_event+0x422>
            }
        }
        else if (strcmp(pArray[1], "LED1") == 0)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4943      	ldr	r1, [pc, #268]	@ (80015d0 <esp_event+0x364>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe8c 	bl	80001e0 <strcmp>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11c      	bne.n	8001508 <esp_event+0x29c>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	493b      	ldr	r1, [pc, #236]	@ (80015c0 <esp_event+0x354>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe84 	bl	80001e0 <strcmp>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <esp_event+0x27e>
                LED1_ON();
 80014de:	f7ff fe43 	bl	8001168 <LED1_ON>
                printf("LED1 turned ON\r\n");
 80014e2:	483c      	ldr	r0, [pc, #240]	@ (80015d4 <esp_event+0x368>)
 80014e4:	f00d fa7e 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 80014e8:	e0d1      	b.n	800168e <esp_event+0x422>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4936      	ldr	r1, [pc, #216]	@ (80015c8 <esp_event+0x35c>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe76 	bl	80001e0 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 80c9 	bne.w	800168e <esp_event+0x422>
                LED1_OFF();
 80014fc:	f7ff fe40 	bl	8001180 <LED1_OFF>
                printf("LED1 turned OFF\r\n");
 8001500:	4835      	ldr	r0, [pc, #212]	@ (80015d8 <esp_event+0x36c>)
 8001502:	f00d fa6f 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001506:	e0c2      	b.n	800168e <esp_event+0x422>
            }
        }
        else if (strcmp(pArray[1], "LED2") == 0)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4934      	ldr	r1, [pc, #208]	@ (80015dc <esp_event+0x370>)
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe67 	bl	80001e0 <strcmp>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d11c      	bne.n	8001552 <esp_event+0x2e6>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4929      	ldr	r1, [pc, #164]	@ (80015c0 <esp_event+0x354>)
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fe5f 	bl	80001e0 <strcmp>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <esp_event+0x2c8>
                LED2_ON();
 8001528:	f7ff fe36 	bl	8001198 <LED2_ON>
                printf("LED2 turned ON\r\n");
 800152c:	482c      	ldr	r0, [pc, #176]	@ (80015e0 <esp_event+0x374>)
 800152e:	f00d fa59 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001532:	e0ac      	b.n	800168e <esp_event+0x422>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4924      	ldr	r1, [pc, #144]	@ (80015c8 <esp_event+0x35c>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe51 	bl	80001e0 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 80a4 	bne.w	800168e <esp_event+0x422>
                LED2_OFF();
 8001546:	f7ff fe33 	bl	80011b0 <LED2_OFF>
                printf("LED2 turned OFF\r\n");
 800154a:	4826      	ldr	r0, [pc, #152]	@ (80015e4 <esp_event+0x378>)
 800154c:	f00d fa4a 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001550:	e09d      	b.n	800168e <esp_event+0x422>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4924      	ldr	r1, [pc, #144]	@ (80015e8 <esp_event+0x37c>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fe42 	bl	80001e0 <strcmp>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d14a      	bne.n	80015f8 <esp_event+0x38c>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4916      	ldr	r1, [pc, #88]	@ (80015c0 <esp_event+0x354>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe3a 	bl	80001e0 <strcmp>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d108      	bne.n	8001584 <esp_event+0x318>
            	fan_hold = 1;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <esp_event+0x380>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
                FAN_ON();
 8001578:	f7ff fe26 	bl	80011c8 <FAN_ON>
                printf("FAN turned ON\r\n");
 800157c:	481c      	ldr	r0, [pc, #112]	@ (80015f0 <esp_event+0x384>)
 800157e:	f00d fa31 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001582:	e084      	b.n	800168e <esp_event+0x422>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4910      	ldr	r1, [pc, #64]	@ (80015c8 <esp_event+0x35c>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe29 	bl	80001e0 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d17c      	bne.n	800168e <esp_event+0x422>
            	fan_hold = 0;
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <esp_event+0x380>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
                FAN_OFF();
 800159a:	f7ff fe21 	bl	80011e0 <FAN_OFF>
                printf("FAN turned OFF\r\n");
 800159e:	4815      	ldr	r0, [pc, #84]	@ (80015f4 <esp_event+0x388>)
 80015a0:	f00d fa20 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 80015a4:	e073      	b.n	800168e <esp_event+0x422>
 80015a6:	bf00      	nop
 80015a8:	08013084 	.word	0x08013084
 80015ac:	0801308c 	.word	0x0801308c
 80015b0:	08013094 	.word	0x08013094
 80015b4:	0801309c 	.word	0x0801309c
 80015b8:	080130d8 	.word	0x080130d8
 80015bc:	08013100 	.word	0x08013100
 80015c0:	08013108 	.word	0x08013108
 80015c4:	0801310c 	.word	0x0801310c
 80015c8:	08013120 	.word	0x08013120
 80015cc:	08013124 	.word	0x08013124
 80015d0:	08013138 	.word	0x08013138
 80015d4:	08013140 	.word	0x08013140
 80015d8:	08013150 	.word	0x08013150
 80015dc:	08013164 	.word	0x08013164
 80015e0:	0801316c 	.word	0x0801316c
 80015e4:	0801317c 	.word	0x0801317c
 80015e8:	08013190 	.word	0x08013190
 80015ec:	200022d8 	.word	0x200022d8
 80015f0:	08013194 	.word	0x08013194
 80015f4:	080131a4 	.word	0x080131a4
            }
        }
        else if (strcmp(pArray[1], "ALL") == 0)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4927      	ldr	r1, [pc, #156]	@ (8001698 <esp_event+0x42c>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fdef 	bl	80001e0 <strcmp>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d111      	bne.n	800162c <esp_event+0x3c0>
        {
            if (strcmp(pArray[2], "OFF") == 0) {
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4924      	ldr	r1, [pc, #144]	@ (800169c <esp_event+0x430>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fde7 	bl	80001e0 <strcmp>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d13a      	bne.n	800168e <esp_event+0x422>
            	LED1_OFF();
 8001618:	f7ff fdb2 	bl	8001180 <LED1_OFF>
            	LED2_OFF();
 800161c:	f7ff fdc8 	bl	80011b0 <LED2_OFF>
                FAN_OFF();
 8001620:	f7ff fdde 	bl	80011e0 <FAN_OFF>
                printf("Turned OFF ALL\r\n");
 8001624:	481e      	ldr	r0, [pc, #120]	@ (80016a0 <esp_event+0x434>)
 8001626:	f00d f9dd 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 800162a:	e030      	b.n	800168e <esp_event+0x422>
            }
        }
        else if (strcmp(pArray[1], "SERVO") == 0)   // ★ 추가
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	491d      	ldr	r1, [pc, #116]	@ (80016a4 <esp_event+0x438>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdd5 	bl	80001e0 <strcmp>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11d      	bne.n	8001678 <esp_event+0x40c>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	491a      	ldr	r1, [pc, #104]	@ (80016a8 <esp_event+0x43c>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fdcd 	bl	80001e0 <strcmp>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <esp_event+0x3ee>
                Servo_SetAngle(90);  // 90도
 800164c:	205a      	movs	r0, #90	@ 0x5a
 800164e:	f000 fda3 	bl	8002198 <Servo_SetAngle>
                printf("SERVO -> 90 deg\r\n");
 8001652:	4816      	ldr	r0, [pc, #88]	@ (80016ac <esp_event+0x440>)
 8001654:	f00d f9c6 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001658:	e019      	b.n	800168e <esp_event+0x422>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	490f      	ldr	r1, [pc, #60]	@ (800169c <esp_event+0x430>)
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fdbe 	bl	80001e0 <strcmp>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d111      	bne.n	800168e <esp_event+0x422>
                Servo_SetAngle(0);   // 0도
 800166a:	2000      	movs	r0, #0
 800166c:	f000 fd94 	bl	8002198 <Servo_SetAngle>
                printf("SERVO -> 0 deg\r\n");
 8001670:	480f      	ldr	r0, [pc, #60]	@ (80016b0 <esp_event+0x444>)
 8001672:	f00d f9b7 	bl	800e9e4 <puts>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001676:	e00a      	b.n	800168e <esp_event+0x422>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4619      	mov	r1, r3
 800167c:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <esp_event+0x448>)
 800167e:	f00d f941 	bl	800e904 <iprintf>
        if (strcmp(pArray[1], "LEDA") == 0)
 8001682:	e004      	b.n	800168e <esp_event+0x422>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <esp_event+0x44c>)
 8001688:	f00d f93c 	bl	800e904 <iprintf>
 800168c:	e000      	b.n	8001690 <esp_event+0x424>
        if (strcmp(pArray[1], "LEDA") == 0)
 800168e:	bf00      	nop
    }
}
 8001690:	37b0      	adds	r7, #176	@ 0xb0
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	080131b4 	.word	0x080131b4
 800169c:	08013120 	.word	0x08013120
 80016a0:	080131b8 	.word	0x080131b8
 80016a4:	080131c8 	.word	0x080131c8
 80016a8:	08013108 	.word	0x08013108
 80016ac:	080131d0 	.word	0x080131d0
 80016b0:	080131e4 	.word	0x080131e4
 80016b4:	080131f4 	.word	0x080131f4
 80016b8:	0801320c 	.word	0x0801320c

080016bc <try_extract_ipd_payload>:

// +IPD,<len>:...   (CIPMUX=0)
// +IPD,<id>,<len>:...  (CIPMUX=1)
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b092      	sub	sp, #72	@ 0x48
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    int copied = 0, consumed = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ca:	2300      	movs	r3, #0
 80016cc:	643b      	str	r3, [r7, #64]	@ 0x40

    taskENTER_CRITICAL();
 80016ce:	f00b fa53 	bl	800cb78 <vPortEnterCritical>
    int n = cb_data.length;
 80016d2:	4b70      	ldr	r3, [pc, #448]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 80016d4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80016d8:	623b      	str	r3, [r7, #32]
    if (n > 0) {
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f340 80d2 	ble.w	8001886 <try_extract_ipd_payload+0x1ca>
        int start = -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i + 4 < n; ++i) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ec:	e023      	b.n	8001736 <try_extract_ipd_payload+0x7a>
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 80016ee:	4a69      	ldr	r2, [pc, #420]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 80016f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80016f8:	d11a      	bne.n	8001730 <try_extract_ipd_payload+0x74>
 80016fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a65      	ldr	r2, [pc, #404]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	2b49      	cmp	r3, #73	@ 0x49
 8001704:	d114      	bne.n	8001730 <try_extract_ipd_payload+0x74>
 8001706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001708:	3302      	adds	r3, #2
 800170a:	4a62      	ldr	r2, [pc, #392]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	2b50      	cmp	r3, #80	@ 0x50
 8001710:	d10e      	bne.n	8001730 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 8001712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001714:	3303      	adds	r3, #3
 8001716:	4a5f      	ldr	r2, [pc, #380]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 800171a:	2b44      	cmp	r3, #68	@ 0x44
 800171c:	d108      	bne.n	8001730 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 800171e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001720:	3304      	adds	r3, #4
 8001722:	4a5c      	ldr	r2, [pc, #368]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	2b2c      	cmp	r3, #44	@ 0x2c
 8001728:	d102      	bne.n	8001730 <try_extract_ipd_payload+0x74>
 800172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800172e:	e007      	b.n	8001740 <try_extract_ipd_payload+0x84>
        for (int i = 0; i + 4 < n; ++i) {
 8001730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001732:	3301      	adds	r3, #1
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001738:	3304      	adds	r3, #4
 800173a:	6a3a      	ldr	r2, [r7, #32]
 800173c:	429a      	cmp	r2, r3
 800173e:	dcd6      	bgt.n	80016ee <try_extract_ipd_payload+0x32>
        }
        if (start >= 0) {
 8001740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001742:	2b00      	cmp	r3, #0
 8001744:	f2c0 8088 	blt.w	8001858 <try_extract_ipd_payload+0x19c>
            int p = start + 5;
 8001748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800174a:	3305      	adds	r3, #5
 800174c:	637b      	str	r3, [r7, #52]	@ 0x34

            // (1) optional link id
            int q = p;
 800174e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
            while (q < n && cb_data.buf[q]>='0' && cb_data.buf[q]<='9') q++;
 8001752:	e002      	b.n	800175a <try_extract_ipd_payload+0x9e>
 8001754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001756:	3301      	adds	r3, #1
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
 800175a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	429a      	cmp	r2, r3
 8001760:	da0b      	bge.n	800177a <try_extract_ipd_payload+0xbe>
 8001762:	4a4c      	ldr	r2, [pc, #304]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b2f      	cmp	r3, #47	@ 0x2f
 800176c:	d905      	bls.n	800177a <try_extract_ipd_payload+0xbe>
 800176e:	4a49      	ldr	r2, [pc, #292]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b39      	cmp	r3, #57	@ 0x39
 8001778:	d9ec      	bls.n	8001754 <try_extract_ipd_payload+0x98>
            if (q < n && cb_data.buf[q] == ',') {
 800177a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	429a      	cmp	r2, r3
 8001780:	da08      	bge.n	8001794 <try_extract_ipd_payload+0xd8>
 8001782:	4a44      	ldr	r2, [pc, #272]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b2c      	cmp	r3, #44	@ 0x2c
 800178c:	d102      	bne.n	8001794 <try_extract_ipd_payload+0xd8>
                p = q + 1; // had link id -> p now at len
 800178e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001790:	3301      	adds	r3, #1
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
            } // else: single mode, p already at len

            // (2) parse length until ':'
            int len_start = p, colon = -1;
 8001794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 800179e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a2:	e01b      	b.n	80017dc <try_extract_ipd_payload+0x120>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 80017a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80017ae:	d102      	bne.n	80017b6 <try_extract_ipd_payload+0xfa>
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b4:	e01b      	b.n	80017ee <try_extract_ipd_payload+0x132>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { len_start = -1; break; }
 80017b6:	4a37      	ldr	r2, [pc, #220]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b2f      	cmp	r3, #47	@ 0x2f
 80017c0:	d905      	bls.n	80017ce <try_extract_ipd_payload+0x112>
 80017c2:	4a34      	ldr	r2, [pc, #208]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b39      	cmp	r3, #57	@ 0x39
 80017cc:	d903      	bls.n	80017d6 <try_extract_ipd_payload+0x11a>
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017d4:	e00b      	b.n	80017ee <try_extract_ipd_payload+0x132>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
 80017dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	da04      	bge.n	80017ee <try_extract_ipd_payload+0x132>
 80017e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e6:	3309      	adds	r3, #9
 80017e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ea:	429a      	cmp	r2, r3
 80017ec:	ddda      	ble.n	80017a4 <try_extract_ipd_payload+0xe8>
            }
            if (len_start >= 0 && colon > 0) {
 80017ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db31      	blt.n	8001858 <try_extract_ipd_payload+0x19c>
 80017f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dd2e      	ble.n	8001858 <try_extract_ipd_payload+0x19c>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 80017fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fc:	4a25      	ldr	r2, [pc, #148]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 80017fe:	4413      	add	r3, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f00b fccc 	bl	800d19e <atoi>
 8001806:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	3301      	adds	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd1d      	ble.n	8001858 <try_extract_ipd_payload+0x19c>
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	429a      	cmp	r2, r3
 8001822:	db19      	blt.n	8001858 <try_extract_ipd_payload+0x19c>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	4293      	cmp	r3, r2
 800182c:	bfa8      	it	ge
 800182e:	4613      	movge	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001836:	4413      	add	r3, r2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f00e fa58 	bl	800fcf2 <memcpy>
                    dst[cpy] = 0;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
                    consumed = payload_start + ipd_len;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }
        }
        if (consumed > 0) {
 8001858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	dd13      	ble.n	8001886 <try_extract_ipd_payload+0x1ca>
            int left = n - consumed;
 800185e:	6a3a      	ldr	r2, [r7, #32]
 8001860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove(cb_data.buf, &cb_data.buf[consumed], left);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd07      	ble.n	800187c <try_extract_ipd_payload+0x1c0>
 800186c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001870:	4413      	add	r3, r2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4619      	mov	r1, r3
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001878:	f00d fa2a 	bl	800ecd0 <memmove>
            cb_data.length = left;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <try_extract_ipd_payload+0x1d8>)
 8001882:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
        }
    }
    taskEXIT_CRITICAL();
 8001886:	f00b f9a9 	bl	800cbdc <vPortExitCritical>
    return copied;
 800188a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800188c:	4618      	mov	r0, r3
 800188e:	3748      	adds	r7, #72	@ 0x48
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20001ad0 	.word	0x20001ad0

08001898 <Command_Task>:

void Command_Task(void *argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0c4      	sub	sp, #272	@ 0x110
 800189c:	af00      	add	r7, sp, #0
 800189e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018a6:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <Command_Task+0x74>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f008 fba6 	bl	800a000 <osMutexAcquire>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d123      	bne.n	8001902 <Command_Task+0x6a>
			int got = try_extract_ipd_payload(payload, sizeof(payload));
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fefa 	bl	80016bc <try_extract_ipd_payload>
 80018c8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
			osMutexRelease(ESP_MutexHandle);
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <Command_Task+0x74>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f008 fbe0 	bl	800a096 <osMutexRelease>
			if (got > 0) {
 80018d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dd11      	ble.n	8001902 <Command_Task+0x6a>
				// strip CR/LF
				payload[strcspn(payload, "\r\n")] = '\0';
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	490b      	ldr	r1, [pc, #44]	@ (8001910 <Command_Task+0x78>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f00d fa22 	bl	800ed2e <strcspn>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]
				esp_event(payload);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fcb5 	bl	800126c <esp_event>
			}
		}
        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 8001902:	200a      	movs	r0, #10
 8001904:	f009 fe28 	bl	800b558 <vTaskDelay>
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 8001908:	e7ce      	b.n	80018a8 <Command_Task+0x10>
 800190a:	bf00      	nop
 800190c:	200024b0 	.word	0x200024b0
 8001910:	0801322c 	.word	0x0801322c

08001914 <pty_text>:
extern volatile float g_t1h;  // °C
extern volatile int   g_reh;  // %
extern volatile int   g_pty;  // PTY 코드

// 강수 텍스트
static const char* pty_text(int code) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    switch (code) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b07      	cmp	r3, #7
 8001920:	d822      	bhi.n	8001968 <pty_text+0x54>
 8001922:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <pty_text+0x14>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001949 	.word	0x08001949
 800192c:	0800194d 	.word	0x0800194d
 8001930:	08001951 	.word	0x08001951
 8001934:	08001955 	.word	0x08001955
 8001938:	08001959 	.word	0x08001959
 800193c:	0800195d 	.word	0x0800195d
 8001940:	08001961 	.word	0x08001961
 8001944:	08001965 	.word	0x08001965
        case 0: return "SUN";
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <pty_text+0x64>)
 800194a:	e00e      	b.n	800196a <pty_text+0x56>
        case 1: return "RAIN";
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <pty_text+0x68>)
 800194e:	e00c      	b.n	800196a <pty_text+0x56>
        case 2: return "R/S";
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <pty_text+0x6c>)
 8001952:	e00a      	b.n	800196a <pty_text+0x56>
        case 3: return "SNOW";
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <pty_text+0x70>)
 8001956:	e008      	b.n	800196a <pty_text+0x56>
        case 4: return "SHWR";
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <pty_text+0x74>)
 800195a:	e006      	b.n	800196a <pty_text+0x56>
        case 5: return "DROP";
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <pty_text+0x78>)
 800195e:	e004      	b.n	800196a <pty_text+0x56>
        case 6: return "D/S";
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <pty_text+0x7c>)
 8001962:	e002      	b.n	800196a <pty_text+0x56>
        case 7: return "SFLT";
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <pty_text+0x80>)
 8001966:	e000      	b.n	800196a <pty_text+0x56>
        default: return "?";
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <pty_text+0x84>)
    }
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	08013230 	.word	0x08013230
 800197c:	08013234 	.word	0x08013234
 8001980:	0801323c 	.word	0x0801323c
 8001984:	08013240 	.word	0x08013240
 8001988:	08013248 	.word	0x08013248
 800198c:	08013250 	.word	0x08013250
 8001990:	08013258 	.word	0x08013258
 8001994:	0801325c 	.word	0x0801325c
 8001998:	08013264 	.word	0x08013264

0800199c <LCD_Task>:

void LCD_Task(void *argument)
{
 800199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a0:	b09d      	sub	sp, #116	@ 0x74
 80019a2:	af04      	add	r7, sp, #16
 80019a4:	6078      	str	r0, [r7, #4]
    LCD_Init();
 80019a6:	f002 f9bb 	bl	8003d20 <LCD_Init>
    LCD_Clear();
 80019aa:	f002 f9e3 	bl	8003d74 <LCD_Clear>

    time_t base_epoch = 0;
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    uint32_t tick = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t last_sync_sec = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	653b      	str	r3, [r7, #80]	@ 0x50

    // 최초 동기화
    if (osMutexAcquire(NTP_MutexHandle, pdMS_TO_TICKS(200)) == osOK) {
 80019c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b74 <LCD_Task+0x1d8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	21c8      	movs	r1, #200	@ 0xc8
 80019c8:	4618      	mov	r0, r3
 80019ca:	f008 fb19 	bl	800a000 <osMutexAcquire>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10a      	bne.n	80019ea <LCD_Task+0x4e>
        base_epoch = ntp_time;
 80019d4:	4b68      	ldr	r3, [pc, #416]	@ (8001b78 <LCD_Task+0x1dc>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        osMutexRelease(NTP_MutexHandle);
 80019de:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <LCD_Task+0x1d8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f008 fb57 	bl	800a096 <osMutexRelease>
 80019e8:	e004      	b.n	80019f4 <LCD_Task+0x58>
    } else {
        base_epoch = time(NULL);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f00d fdea 	bl	800f5c4 <time>
 80019f0:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    }
    last_sync_sec = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	653b      	str	r3, [r7, #80]	@ 0x50
    tick = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	657b      	str	r3, [r7, #84]	@ 0x54

    TickType_t last = xTaskGetTickCount();
 80019fc:	f009 fef6 	bl	800b7ec <xTaskGetTickCount>
 8001a00:	4603      	mov	r3, r0
 8001a02:	63bb      	str	r3, [r7, #56]	@ 0x38
    const TickType_t period = pdMS_TO_TICKS(1000);
 8001a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a08:	643b      	str	r3, [r7, #64]	@ 0x40

    for (;;)
    {
        // 30초마다 NTP 재동기화
        if ((tick - last_sync_sec) >= 30) {
 8001a0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b1d      	cmp	r3, #29
 8001a12:	d91a      	bls.n	8001a4a <LCD_Task+0xae>
            if (osMutexAcquire(NTP_MutexHandle, pdMS_TO_TICKS(50)) == osOK) {
 8001a14:	4b57      	ldr	r3, [pc, #348]	@ (8001b74 <LCD_Task+0x1d8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2132      	movs	r1, #50	@ 0x32
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f008 faf0 	bl	800a000 <osMutexAcquire>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <LCD_Task+0xa0>
                base_epoch = ntp_time;
 8001a26:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <LCD_Task+0x1dc>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
                osMutexRelease(NTP_MutexHandle);
 8001a30:	4b50      	ldr	r3, [pc, #320]	@ (8001b74 <LCD_Task+0x1d8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f008 fb2e 	bl	800a096 <osMutexRelease>
 8001a3a:	e004      	b.n	8001a46 <LCD_Task+0xaa>
            } else {
                base_epoch = time(NULL);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f00d fdc1 	bl	800f5c4 <time>
 8001a42:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
            }
            last_sync_sec = tick;
 8001a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a48:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        // 현재 시각 계산
        time_t now = base_epoch + (time_t)(tick - last_sync_sec);
 8001a4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2200      	movs	r2, #0
 8001a52:	461c      	mov	r4, r3
 8001a54:	4615      	mov	r5, r2
 8001a56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a5a:	eb14 0802 	adds.w	r8, r4, r2
 8001a5e:	eb45 0903 	adc.w	r9, r5, r3
 8001a62:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
        struct tm *k = localtime(&now);
 8001a66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00d fa10 	bl	800ee90 <localtime>
 8001a70:	63f8      	str	r0, [r7, #60]	@ 0x3c

        // ★ 추가: 표시하는 시:분을 공유 변수에 기록
        g_lcd_hh = (uint8_t)k->tm_hour;
 8001a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b40      	ldr	r3, [pc, #256]	@ (8001b7c <LCD_Task+0x1e0>)
 8001a7a:	701a      	strb	r2, [r3, #0]
        g_lcd_mm = (uint8_t)k->tm_min;
 8001a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b3f      	ldr	r3, [pc, #252]	@ (8001b80 <LCD_Task+0x1e4>)
 8001a84:	701a      	strb	r2, [r3, #0]

        // 1행: 시간 고정 위치 출력
        char line1[17];
        snprintf(line1, sizeof(line1), "%02d-%02d %02d:%02d:%02d",
                 (k->tm_mon + 1), k->tm_mday, k->tm_hour, k->tm_min, k->tm_sec);
 8001a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a88:	691b      	ldr	r3, [r3, #16]
        snprintf(line1, sizeof(line1), "%02d-%02d %02d:%02d:%02d",
 8001a8a:	f103 0c01 	add.w	ip, r3, #1
 8001a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a94:	6892      	ldr	r2, [r2, #8]
 8001a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a98:	6849      	ldr	r1, [r1, #4]
 8001a9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a9c:	6800      	ldr	r0, [r0, #0]
 8001a9e:	f107 061c 	add.w	r6, r7, #28
 8001aa2:	9003      	str	r0, [sp, #12]
 8001aa4:	9102      	str	r1, [sp, #8]
 8001aa6:	9201      	str	r2, [sp, #4]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	4663      	mov	r3, ip
 8001aac:	4a35      	ldr	r2, [pc, #212]	@ (8001b84 <LCD_Task+0x1e8>)
 8001aae:	2111      	movs	r1, #17
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	f00c ff9f 	bl	800e9f4 <sniprintf>
        LCD_SetCursor(0, 0);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f002 f965 	bl	8003d88 <LCD_SetCursor>
        LCD_Print(line1);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 f982 	bl	8003dcc <LCD_Print>

        // 2행: 날씨 표시
        float t_c = 0.0f; int rh = -1; int pty = -1;
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	647b      	str	r3, [r7, #68]	@ 0x44
        if (osMutexAcquire(Weather_MutexHandle, pdMS_TO_TICKS(10)) == osOK) {
 8001ada:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <LCD_Task+0x1ec>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	210a      	movs	r1, #10
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f008 fa8d 	bl	800a000 <osMutexAcquire>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <LCD_Task+0x16c>
            t_c = g_t1h;
 8001aec:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <LCD_Task+0x1f0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            rh = g_reh;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <LCD_Task+0x1f4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	64bb      	str	r3, [r7, #72]	@ 0x48
            pty = g_pty;
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <LCD_Task+0x1f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	647b      	str	r3, [r7, #68]	@ 0x44
            osMutexRelease(Weather_MutexHandle);
 8001afe:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <LCD_Task+0x1ec>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f008 fac7 	bl	800a096 <osMutexRelease>
        }

        char line2[17];
        if (rh >= 0 && pty >= 0) {
 8001b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db17      	blt.n	8001b3e <LCD_Task+0x1a2>
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db14      	blt.n	8001b3e <LCD_Task+0x1a2>
            snprintf(line2, sizeof(line2), "T=%2.1f H=%d %s", t_c, rh, pty_text(pty));
 8001b14:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b16:	f7fe fd2f 	bl	8000578 <__aeabi_f2d>
 8001b1a:	4682      	mov	sl, r0
 8001b1c:	468b      	mov	fp, r1
 8001b1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b20:	f7ff fef8 	bl	8001914 <pty_text>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f107 0008 	add.w	r0, r7, #8
 8001b2a:	9303      	str	r3, [sp, #12]
 8001b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	e9cd ab00 	strd	sl, fp, [sp]
 8001b34:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <LCD_Task+0x1fc>)
 8001b36:	2111      	movs	r1, #17
 8001b38:	f00c ff5c 	bl	800e9f4 <sniprintf>
 8001b3c:	e006      	b.n	8001b4c <LCD_Task+0x1b0>
        } else {
            snprintf(line2, sizeof(line2), "Weather: --");
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4a16      	ldr	r2, [pc, #88]	@ (8001b9c <LCD_Task+0x200>)
 8001b44:	2111      	movs	r1, #17
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00c ff54 	bl	800e9f4 <sniprintf>
        }
        LCD_SetCursor(1, 0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f002 f91a 	bl	8003d88 <LCD_SetCursor>
        LCD_Print(line2);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 f937 	bl	8003dcc <LCD_Print>

        tick++;
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b60:	3301      	adds	r3, #1
 8001b62:	657b      	str	r3, [r7, #84]	@ 0x54
        vTaskDelayUntil(&last, period); // 정확히 1Hz 주기
 8001b64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f009 fc74 	bl	800b458 <vTaskDelayUntil>
    {
 8001b70:	e74b      	b.n	8001a0a <LCD_Task+0x6e>
 8001b72:	bf00      	nop
 8001b74:	200024b4 	.word	0x200024b4
 8001b78:	200022e0 	.word	0x200022e0
 8001b7c:	200022d9 	.word	0x200022d9
 8001b80:	200022da 	.word	0x200022da
 8001b84:	08013268 	.word	0x08013268
 8001b88:	200024b8 	.word	0x200024b8
 8001b8c:	20000280 	.word	0x20000280
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004
 8001b98:	08013284 	.word	0x08013284
 8001b9c:	08013294 	.word	0x08013294

08001ba0 <NTP_Task>:
#define NTPTIME_TASK_PERIOD_MS 30000

int esp_is_wifi_ready(void);

void NTP_Task(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	81fb      	strh	r3, [r7, #14]
    TickType_t last = xTaskGetTickCount();
 8001bac:	f009 fe1e 	bl	800b7ec <xTaskGetTickCount>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60bb      	str	r3, [r7, #8]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 8001bb4:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001bb8:	613b      	str	r3, [r7, #16]
    static int s_ntp_cfg_ok = 0;
    //int toggle = 0;

    for(;;)
    {
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 8001bba:	f002 f865 	bl	8003c88 <esp_is_wifi_ready>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <NTP_Task+0x2e>
 8001bc4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bc8:	f009 fcc6 	bl	800b558 <vTaskDelay>
 8001bcc:	e060      	b.n	8001c90 <NTP_Task+0xf0>
		if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <NTP_Task+0xf4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f008 fa12 	bl	800a000 <osMutexAcquire>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d150      	bne.n	8001c84 <NTP_Task+0xe4>
			if (!s_ntp_cfg_ok) {
 8001be2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <NTP_Task+0xf8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <NTP_Task+0x5a>
				if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 8001bea:	f002 f823 	bl	8003c34 <esp_ntp_config>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <NTP_Task+0x5a>
 8001bf4:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <NTP_Task+0xf8>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
				}
			if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 8001bfa:	f107 020e 	add.w	r2, r7, #14
 8001bfe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c02:	4926      	ldr	r1, [pc, #152]	@ (8001c9c <NTP_Task+0xfc>)
 8001c04:	4826      	ldr	r0, [pc, #152]	@ (8001ca0 <NTP_Task+0x100>)
 8001c06:	f001 fa7d 	bl	8003104 <esp_at_command>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d134      	bne.n	8001c7a <NTP_Task+0xda>
				char *p = strtok(response, "\r\n");
 8001c10:	4924      	ldr	r1, [pc, #144]	@ (8001ca4 <NTP_Task+0x104>)
 8001c12:	4822      	ldr	r0, [pc, #136]	@ (8001c9c <NTP_Task+0xfc>)
 8001c14:	f00d f8c2 	bl	800ed9c <strtok>
 8001c18:	6178      	str	r0, [r7, #20]
				//printf("NTP connected!\r\n");
				while (p) {
 8001c1a:	e029      	b.n	8001c70 <NTP_Task+0xd0>
					if (parse_cipsntptime_line(p, &epoch) == 0) {
 8001c1c:	4922      	ldr	r1, [pc, #136]	@ (8001ca8 <NTP_Task+0x108>)
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f001 ff0c 	bl	8003a3c <parse_cipsntptime_line>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11d      	bne.n	8001c66 <NTP_Task+0xc6>
						printf("NTP Time (KST): %s\r", ctime(&epoch));
 8001c2a:	481f      	ldr	r0, [pc, #124]	@ (8001ca8 <NTP_Task+0x108>)
 8001c2c:	f00d f928 	bl	800ee80 <ctime>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4619      	mov	r1, r3
 8001c34:	481d      	ldr	r0, [pc, #116]	@ (8001cac <NTP_Task+0x10c>)
 8001c36:	f00c fe65 	bl	800e904 <iprintf>
						} else {
							Servo_SetAngle(0);
							printf("[SERVO TEST] -> 0 deg\r\n");
						}
						*/
						if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <NTP_Task+0x110>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c42:	4618      	mov	r0, r3
 8001c44:	f008 f9dc 	bl	800a000 <osMutexAcquire>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <NTP_Task+0xd8>
							ntp_time = epoch;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <NTP_Task+0x108>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	4917      	ldr	r1, [pc, #92]	@ (8001cb4 <NTP_Task+0x114>)
 8001c56:	e9c1 2300 	strd	r2, r3, [r1]
							osMutexRelease(NTP_MutexHandle);
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <NTP_Task+0x110>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f008 fa19 	bl	800a096 <osMutexRelease>
						}
						break;
 8001c64:	e008      	b.n	8001c78 <NTP_Task+0xd8>
					}
					p = strtok(NULL, "\r\n");
 8001c66:	490f      	ldr	r1, [pc, #60]	@ (8001ca4 <NTP_Task+0x104>)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f00d f897 	bl	800ed9c <strtok>
 8001c6e:	6178      	str	r0, [r7, #20]
				while (p) {
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1d2      	bne.n	8001c1c <NTP_Task+0x7c>
 8001c76:	e000      	b.n	8001c7a <NTP_Task+0xda>
						break;
 8001c78:	bf00      	nop
				}
		}
			osMutexRelease(ESP_MutexHandle);
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <NTP_Task+0xf4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f008 fa09 	bl	800a096 <osMutexRelease>
		}

        vTaskDelayUntil(&last, period);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f009 fbe4 	bl	800b458 <vTaskDelayUntil>
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 8001c90:	e793      	b.n	8001bba <NTP_Task+0x1a>
 8001c92:	bf00      	nop
 8001c94:	200024b0 	.word	0x200024b0
 8001c98:	2000026c 	.word	0x2000026c
 8001c9c:	20001298 	.word	0x20001298
 8001ca0:	080132a0 	.word	0x080132a0
 8001ca4:	080132b4 	.word	0x080132b4
 8001ca8:	20000270 	.word	0x20000270
 8001cac:	080132b8 	.word	0x080132b8
 8001cb0:	200024b4 	.word	0x200024b4
 8001cb4:	200022e0 	.word	0x200022e0

08001cb8 <LED1_ON>:
static inline void LED1_ON(void){  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); }
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <LED1_ON+0x14>)
 8001cc2:	f003 fe51 	bl	8005968 <HAL_GPIO_WritePin>
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020800 	.word	0x40020800

08001cd0 <LED1_OFF>:
static inline void LED1_OFF(void){ HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); }
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <LED1_OFF+0x14>)
 8001cda:	f003 fe45 	bl	8005968 <HAL_GPIO_WritePin>
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40020800 	.word	0x40020800

08001ce8 <LED2_ON>:
static inline void LED2_ON(void){  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); }
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf2:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <LED2_ON+0x14>)
 8001cf4:	f003 fe38 	bl	8005968 <HAL_GPIO_WritePin>
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020800 	.word	0x40020800

08001d00 <LED2_OFF>:
static inline void LED2_OFF(void){ HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); }
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d0a:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <LED2_OFF+0x14>)
 8001d0c:	f003 fe2c 	bl	8005968 <HAL_GPIO_WritePin>
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40020800 	.word	0x40020800

08001d18 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2110      	movs	r1, #16
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <FAN_ON+0x14>)
 8001d22:	f003 fe21 	bl	8005968 <HAL_GPIO_WritePin>
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40020400 	.word	0x40020400

08001d30 <FAN_OFF>:
static inline void FAN_OFF(void){ HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET); }
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	2200      	movs	r2, #0
 8001d36:	2110      	movs	r1, #16
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <FAN_OFF+0x14>)
 8001d3a:	f003 fe15 	bl	8005968 <HAL_GPIO_WritePin>
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020400 	.word	0x40020400

08001d48 <MS2T>:
#include <stdint.h>
#include <stdio.h>


// ── 보조: ms→tick (CMSIS v2) ──
static inline uint32_t MS2T(uint32_t ms){
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
    return (uint32_t)((((uint64_t)ms) * osKernelGetTickFreq()) / 1000U);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	469a      	mov	sl, r3
 8001d58:	4693      	mov	fp, r2
 8001d5a:	f007 ffe8 	bl	8009d2e <osKernelGetTickFreq>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2200      	movs	r2, #0
 8001d62:	4698      	mov	r8, r3
 8001d64:	4691      	mov	r9, r2
 8001d66:	fb08 f20b 	mul.w	r2, r8, fp
 8001d6a:	fb0a f309 	mul.w	r3, sl, r9
 8001d6e:	4413      	add	r3, r2
 8001d70:	fbaa 4508 	umull	r4, r5, sl, r8
 8001d74:	442b      	add	r3, r5
 8001d76:	461d      	mov	r5, r3
 8001d78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe ffe8 	bl	8000d58 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4613      	mov	r3, r2
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d98 <PIR_ArmIdleTimer>:

// ── 무감지 타이머 공유 상태 ──
static volatile uint32_t s_last_motion = 0;  // 마지막 감지/ARM 시각

// 외부에서 RFID로 켠 직후 타이머 ARM하고 싶을 때 호출
void PIR_ArmIdleTimer(void){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    s_last_motion = osKernelGetTickCount();
 8001d9c:	f007 ffb2 	bl	8009d04 <osKernelGetTickCount>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a02      	ldr	r2, [pc, #8]	@ (8001dac <PIR_ArmIdleTimer+0x14>)
 8001da4:	6013      	str	r3, [r2, #0]
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000278 	.word	0x20000278

08001db0 <PIR_Task>:

// 보조 함수/변수들은 그대로 (MS2T, s_last_motion, PIR_ArmIdleTimer 등)

void PIR_Task(void *argument)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    osDelay(30000);  // 워밍업
 8001db8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001dbc:	f008 f852 	bl	8009e64 <osDelay>

    const uint32_t period     = MS2T(50);
 8001dc0:	2032      	movs	r0, #50	@ 0x32
 8001dc2:	f7ff ffc1 	bl	8001d48 <MS2T>
 8001dc6:	61f8      	str	r0, [r7, #28]
    const uint32_t OFF_WINDOW = MS2T(10000);
 8001dc8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001dcc:	f7ff ffbc 	bl	8001d48 <MS2T>
 8001dd0:	61b8      	str	r0, [r7, #24]
    uint32_t next_wake = osKernelGetTickCount() + period;
 8001dd2:	f007 ff97 	bl	8009d04 <osKernelGetTickCount>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4413      	add	r3, r2
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24

    uint8_t  hi_cnt = 0, lo_cnt = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    // 디바운스/재무장 임계
    const uint8_t HI_THR      = 8;   // 6 * 50ms = 300ms 이상 High면 감지로 인정
 8001dea:	2308      	movs	r3, #8
 8001dec:	75fb      	strb	r3, [r7, #23]
    const uint8_t LO_THR      = 2;   // 100ms (즉시 Lo 판정용)
 8001dee:	2302      	movs	r3, #2
 8001df0:	75bb      	strb	r3, [r7, #22]
    const uint8_t ARM_LO_THR  = 30;  // 20 * 50ms = 1s 이상 Low일 때만 "다음 감지 허용"
 8001df2:	231e      	movs	r3, #30
 8001df4:	757b      	strb	r3, [r7, #21]
    bool high_blocked = false;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bool ready = false;  // 다음 감지를 받을 준비가 되었는지
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3020 	strb.w	r3, [r7, #32]

    for (;;)
    {
        uint32_t now = osKernelGetTickCount();
 8001e02:	f007 ff7f 	bl	8009d04 <osKernelGetTickCount>
 8001e06:	6138      	str	r0, [r7, #16]
        GPIO_PinState s = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 8001e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e0c:	4840      	ldr	r0, [pc, #256]	@ (8001f10 <PIR_Task+0x160>)
 8001e0e:	f003 fd93 	bl	8005938 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]

        if (s == GPIO_PIN_SET) {
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d131      	bne.n	8001e80 <PIR_Task+0xd0>
            if (hi_cnt < 255) hi_cnt++;
 8001e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e20:	2bff      	cmp	r3, #255	@ 0xff
 8001e22:	d004      	beq.n	8001e2e <PIR_Task+0x7e>
 8001e24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lo_cnt = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            // ★ 상승 에지 1회 처리: 'ready'일 때만
            if (ready && !high_blocked && hi_cnt >= HI_THR) {
 8001e34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d041      	beq.n	8001ec0 <PIR_Task+0x110>
 8001e3c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03a      	beq.n	8001ec0 <PIR_Task+0x110>
 8001e4a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d335      	bcc.n	8001ec0 <PIR_Task+0x110>
                s_last_motion = now;
 8001e54:	4a2f      	ldr	r2, [pc, #188]	@ (8001f14 <PIR_Task+0x164>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6013      	str	r3, [r2, #0]
                printf("Sensing Something\r\n");
 8001e5a:	482f      	ldr	r0, [pc, #188]	@ (8001f18 <PIR_Task+0x168>)
 8001e5c:	f00c fdc2 	bl	800e9e4 <puts>
                fan_hold = 1;
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <PIR_Task+0x16c>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
                FAN_ON();
 8001e66:	f7ff ff57 	bl	8001d18 <FAN_ON>
                LED1_ON();
 8001e6a:	f7ff ff25 	bl	8001cb8 <LED1_ON>
                LED2_ON();
 8001e6e:	f7ff ff3b 	bl	8001ce8 <LED2_ON>
                high_blocked = true;   // 현재 High 구간은 한 번만 처리
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                ready = false;         // 다음 감지를 받기 전엔 재무장 필요
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3020 	strb.w	r3, [r7, #32]
 8001e7e:	e01f      	b.n	8001ec0 <PIR_Task+0x110>
            }
        } else { // LOW
            if (lo_cnt < 255) lo_cnt++;
 8001e80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e84:	2bff      	cmp	r3, #255	@ 0xff
 8001e86:	d004      	beq.n	8001e92 <PIR_Task+0xe2>
 8001e88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            hi_cnt = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            // High 구간 끝났다고 표시
            if (high_blocked && lo_cnt >= LO_THR) {
 8001e98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <PIR_Task+0x100>
 8001ea0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001ea4:	7dbb      	ldrb	r3, [r7, #22]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d302      	bcc.n	8001eb0 <PIR_Task+0x100>
                high_blocked = false;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            }
            // ★ 충분히 LOW가 지속되면(1s) 다음 감지 '재무장'
            if (lo_cnt >= ARM_LO_THR) {
 8001eb0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001eb4:	7d7b      	ldrb	r3, [r7, #21]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <PIR_Task+0x110>
                ready = true;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3020 	strb.w	r3, [r7, #32]
            }
        }

        // 타임아웃: 마지막 감지 후 10초 & 현재 LOW가 안정적일 때 OFF
        if (s_last_motion != 0 &&
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <PIR_Task+0x164>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01a      	beq.n	8001efe <PIR_Task+0x14e>
            (now - s_last_motion) >= OFF_WINDOW &&
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <PIR_Task+0x164>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
        if (s_last_motion != 0 &&
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d813      	bhi.n	8001efe <PIR_Task+0x14e>
            (now - s_last_motion) >= OFF_WINDOW &&
 8001ed6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001eda:	7dbb      	ldrb	r3, [r7, #22]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d30e      	bcc.n	8001efe <PIR_Task+0x14e>
            lo_cnt >= LO_THR) {
            printf("Sensing Nothing\r\n");
 8001ee0:	480f      	ldr	r0, [pc, #60]	@ (8001f20 <PIR_Task+0x170>)
 8001ee2:	f00c fd7f 	bl	800e9e4 <puts>
            fan_hold = 0;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <PIR_Task+0x16c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
            FAN_OFF();
 8001eec:	f7ff ff20 	bl	8001d30 <FAN_OFF>
            LED1_OFF();
 8001ef0:	f7ff feee 	bl	8001cd0 <LED1_OFF>
            LED2_OFF();
 8001ef4:	f7ff ff04 	bl	8001d00 <LED2_OFF>
            s_last_motion = 0;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <PIR_Task+0x164>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
        }

        osDelayUntil(next_wake);
 8001efe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f00:	f007 ffcb 	bl	8009e9a <osDelayUntil>
        next_wake += period;
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001f0c:	e779      	b.n	8001e02 <PIR_Task+0x52>
 8001f0e:	bf00      	nop
 8001f10:	40020000 	.word	0x40020000
 8001f14:	20000278 	.word	0x20000278
 8001f18:	080132cc 	.word	0x080132cc
 8001f1c:	200022d8 	.word	0x200022d8
 8001f20:	080132e0 	.word	0x080132e0

08001f24 <LED1_ON>:
static inline void LED1_ON(void){  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); }
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <LED1_ON+0x14>)
 8001f2e:	f003 fd1b 	bl	8005968 <HAL_GPIO_WritePin>
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40020800 	.word	0x40020800

08001f3c <LED2_ON>:
static inline void LED2_ON(void){  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); }
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f46:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <LED2_ON+0x14>)
 8001f48:	f003 fd0e 	bl	8005968 <HAL_GPIO_WritePin>
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020800 	.word	0x40020800

08001f54 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	4802      	ldr	r0, [pc, #8]	@ (8001f68 <FAN_ON+0x14>)
 8001f5e:	f003 fd03 	bl	8005968 <HAL_GPIO_WritePin>
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020400 	.word	0x40020400

08001f6c <is_allowed>:
// 허용 UID (예: 5바이트, BCC 포함) — UART로 찍어본 뒤 그대로 넣으세요
static const uint8_t allowed[][5] = {
	{0x3D,0xD6,0xBA,0x01,0x50},
};

static int is_allowed(const uint8_t *uid5) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  for (size_t i=0;i<sizeof(allowed)/sizeof(allowed[0]);++i)
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e012      	b.n	8001fa0 <is_allowed+0x34>
    if (memcmp(uid5, allowed[i], 5)==0) return 1;
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <is_allowed+0x44>)
 8001f84:	4413      	add	r3, r2
 8001f86:	2205      	movs	r2, #5
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f00c fe90 	bl	800ecb0 <memcmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <is_allowed+0x2e>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e006      	b.n	8001fa8 <is_allowed+0x3c>
  for (size_t i=0;i<sizeof(allowed)/sizeof(allowed[0]);++i)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0e9      	beq.n	8001f7a <is_allowed+0xe>
  return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08013bc0 	.word	0x08013bc0

08001fb4 <RFID_Task>:

void RFID_Task(void *argument)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  MFRC522_Init();
 8001fbc:	f002 fc12 	bl	80047e4 <MFRC522_Init>
  //int toggle = 0;
  for(;;){
    uint8_t atqa[2];
    if (MFRC522_Request(PICC_REQIDL, atqa) == MI_OK) {
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2026      	movs	r0, #38	@ 0x26
 8001fc8:	f002 fd5c 	bl	8004a84 <MFRC522_Request>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11a      	bne.n	8002008 <RFID_Task+0x54>
      uint8_t uid[5];
      if (MFRC522_Anticoll(uid) == MI_OK) {
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 fd7b 	bl	8004ad2 <MFRC522_Anticoll>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d112      	bne.n	8002008 <RFID_Task+0x54>
       // printf("[RFID] UID=%02X %02X %02X %02X %02X\r\n", uid[0],uid[1],uid[2],uid[3],uid[4]);

        if (is_allowed(uid)) {
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ffc0 	bl	8001f6c <is_allowed>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <RFID_Task+0x54>
          printf("RFID Sensored!\r\n");
 8001ff2:	4807      	ldr	r0, [pc, #28]	@ (8002010 <RFID_Task+0x5c>)
 8001ff4:	f00c fcf6 	bl	800e9e4 <puts>
          // 인증 성공 → PC4 LED, FAN ON (예: 5초)
          LED1_ON();
 8001ff8:	f7ff ff94 	bl	8001f24 <LED1_ON>
          LED2_ON();
 8001ffc:	f7ff ff9e 	bl	8001f3c <LED2_ON>
          //fan_hold = 1;
          FAN_ON();
 8002000:	f7ff ffa8 	bl	8001f54 <FAN_ON>
          PIR_ArmIdleTimer();
 8002004:	f7ff fec8 	bl	8001d98 <PIR_ArmIdleTimer>
          //LED_OFF();
          //FAN_OFF();
        }
      }
    }
    osDelay(100); // 폴링 주기
 8002008:	2064      	movs	r0, #100	@ 0x64
 800200a:	f007 ff2b 	bl	8009e64 <osDelay>
  for(;;){
 800200e:	e7d7      	b.n	8001fc0 <RFID_Task+0xc>
 8002010:	080132f4 	.word	0x080132f4

08002014 <LED1_ON>:
static inline void LED1_ON(void){  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); }
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
 8002018:	2201      	movs	r2, #1
 800201a:	2120      	movs	r1, #32
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <LED1_ON+0x14>)
 800201e:	f003 fca3 	bl	8005968 <HAL_GPIO_WritePin>
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020800 	.word	0x40020800

0800202c <LED2_ON>:
static inline void LED2_ON(void){  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); }
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002036:	4802      	ldr	r0, [pc, #8]	@ (8002040 <LED2_ON+0x14>)
 8002038:	f003 fc96 	bl	8005968 <HAL_GPIO_WritePin>
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40020800 	.word	0x40020800

08002044 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
 8002048:	2201      	movs	r2, #1
 800204a:	2110      	movs	r1, #16
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <FAN_ON+0x14>)
 800204e:	f003 fc8b 	bl	8005968 <HAL_GPIO_WritePin>
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020400 	.word	0x40020400

0800205c <Schedule_Init>:

static schedule_t g_sched;
extern osMutexId_t NTP_MutexHandle;
extern time_t ntp_time;

void Schedule_Init(void){
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    g_sched.enabled = 0;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <Schedule_Init+0x20>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    g_sched.hh = 0;
 8002066:	4b05      	ldr	r3, [pc, #20]	@ (800207c <Schedule_Init+0x20>)
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
    g_sched.mm = 0;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <Schedule_Init+0x20>)
 800206e:	2200      	movs	r2, #0
 8002070:	709a      	strb	r2, [r3, #2]
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	2000027c 	.word	0x2000027c

08002080 <Schedule_Set>:

void Schedule_Set(uint8_t hh, uint8_t mm){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
    g_sched.hh = hh;
 8002090:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <Schedule_Set+0x38>)
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	7053      	strb	r3, [r2, #1]
    g_sched.mm = mm;
 8002096:	4a08      	ldr	r2, [pc, #32]	@ (80020b8 <Schedule_Set+0x38>)
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	7093      	strb	r3, [r2, #2]
    g_sched.enabled = 1;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <Schedule_Set+0x38>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    printf("[SCHED] today %02u:%02u 예약 등록\r\n", hh, mm);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	79ba      	ldrb	r2, [r7, #6]
 80020a6:	4619      	mov	r1, r3
 80020a8:	4804      	ldr	r0, [pc, #16]	@ (80020bc <Schedule_Set+0x3c>)
 80020aa:	f00c fc2b 	bl	800e904 <iprintf>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000027c 	.word	0x2000027c
 80020bc:	08013304 	.word	0x08013304

080020c0 <Schedule_Clear>:

void Schedule_Clear(void){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    g_sched.enabled = 0;
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <Schedule_Clear+0x14>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    printf("[SCHED] 예약 해제\r\n");
 80020ca:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <Schedule_Clear+0x18>)
 80020cc:	f00c fc8a 	bl	800e9e4 <puts>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000027c 	.word	0x2000027c
 80020d8:	0801332c 	.word	0x0801332c

080020dc <Schedule_Task>:

void Schedule_Task(void *argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
    for(;;){
        if (g_sched.enabled) {
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <Schedule_Task+0x74>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02c      	beq.n	8002146 <Schedule_Task+0x6a>
            uint8_t hh = g_lcd_hh;
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <Schedule_Task+0x78>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	73fb      	strb	r3, [r7, #15]
            uint8_t mm = g_lcd_mm;
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <Schedule_Task+0x7c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	73bb      	strb	r3, [r7, #14]

            if (hh == g_sched.hh && mm == g_sched.mm) {
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <Schedule_Task+0x74>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d121      	bne.n	8002146 <Schedule_Task+0x6a>
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <Schedule_Task+0x74>)
 8002104:	789b      	ldrb	r3, [r3, #2]
 8002106:	7bba      	ldrb	r2, [r7, #14]
 8002108:	429a      	cmp	r2, r3
 800210a:	d11c      	bne.n	8002146 <Schedule_Task+0x6a>
                printf("[SCHED] 예약 실행 %02u:%02u (LCD=%02u:%02u)\r\n",
                       g_sched.hh, g_sched.mm, hh, mm);
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <Schedule_Task+0x74>)
 800210e:	785b      	ldrb	r3, [r3, #1]
                printf("[SCHED] 예약 실행 %02u:%02u (LCD=%02u:%02u)\r\n",
 8002110:	4619      	mov	r1, r3
                       g_sched.hh, g_sched.mm, hh, mm);
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <Schedule_Task+0x74>)
 8002114:	789b      	ldrb	r3, [r3, #2]
                printf("[SCHED] 예약 실행 %02u:%02u (LCD=%02u:%02u)\r\n",
 8002116:	4618      	mov	r0, r3
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	4602      	mov	r2, r0
 8002122:	480e      	ldr	r0, [pc, #56]	@ (800215c <Schedule_Task+0x80>)
 8002124:	f00c fbee 	bl	800e904 <iprintf>

                fan_hold = 1;           // FAN이 바로 꺼지지 않도록
 8002128:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <Schedule_Task+0x84>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
                LED1_ON();
 800212e:	f7ff ff71 	bl	8002014 <LED1_ON>
                LED2_ON();
 8002132:	f7ff ff7b 	bl	800202c <LED2_ON>
                FAN_ON();
 8002136:	f7ff ff85 	bl	8002044 <FAN_ON>
                printf("[SCHED] LED1, LED2, FAN ON 완료\r\n");
 800213a:	480a      	ldr	r0, [pc, #40]	@ (8002164 <Schedule_Task+0x88>)
 800213c:	f00c fc52 	bl	800e9e4 <puts>

                g_sched.enabled = 0;    // 1회 실행 후 자동 해제
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <Schedule_Task+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
            }
        }
        osDelay(5000); // 0.5~1초 정도면 충분
 8002146:	f241 3088 	movw	r0, #5000	@ 0x1388
 800214a:	f007 fe8b 	bl	8009e64 <osDelay>
        if (g_sched.enabled) {
 800214e:	e7c9      	b.n	80020e4 <Schedule_Task+0x8>
 8002150:	2000027c 	.word	0x2000027c
 8002154:	200022d9 	.word	0x200022d9
 8002158:	200022da 	.word	0x200022da
 800215c:	08013344 	.word	0x08013344
 8002160:	200022d8 	.word	0x200022d8
 8002164:	08013378 	.word	0x08013378

08002168 <Servo_Init>:
#define SERVO_MIN_US   500    // 0°
#define SERVO_MID_US   1500   // 90°
#define SERVO_MAX_US   2500   // 180°

void Servo_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800216c:	2100      	movs	r1, #0
 800216e:	4809      	ldr	r0, [pc, #36]	@ (8002194 <Servo_Init+0x2c>)
 8002170:	f005 ff12 	bl	8007f98 <HAL_TIM_PWM_Start>

    // 고급 타이머(TIM1/8)에서 출력이 안 나오면 MOE를 켜야 할 수 있음
    // (대부분 HAL_TIM_PWM_Start로 충분하지만, 안 나오면 아래 한 줄 추가)
    __HAL_TIM_MOE_ENABLE(&htim1);
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <Servo_Init+0x2c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <Servo_Init+0x2c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002182:	645a      	str	r2, [r3, #68]	@ 0x44

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_MIN_US); // 초기 0°
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <Servo_Init+0x2c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200023b4 	.word	0x200023b4

08002198 <Servo_SetAngle>:

void Servo_SetAngle(int angle)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    if (angle < 0) angle = 0;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da01      	bge.n	80021aa <Servo_SetAngle+0x12>
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
    if (angle > 180) angle = 180;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2bb4      	cmp	r3, #180	@ 0xb4
 80021ae:	dd01      	ble.n	80021b4 <Servo_SetAngle+0x1c>
 80021b0:	23b4      	movs	r3, #180	@ 0xb4
 80021b2:	607b      	str	r3, [r7, #4]

    uint32_t pulse = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US) / 180);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <Servo_SetAngle+0x50>)
 80021c0:	fb82 1203 	smull	r1, r2, r2, r3
 80021c4:	441a      	add	r2, r3
 80021c6:	11d2      	asrs	r2, r2, #7
 80021c8:	17db      	asrs	r3, r3, #31
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80021d0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <Servo_SetAngle+0x54>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	b60b60b7 	.word	0xb60b60b7
 80021ec:	200023b4 	.word	0x200023b4

080021f0 <FAN_ON>:
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	2201      	movs	r2, #1
 80021f6:	2110      	movs	r1, #16
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <FAN_ON+0x14>)
 80021fa:	f003 fbb5 	bl	8005968 <HAL_GPIO_WritePin>
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40020400 	.word	0x40020400

08002208 <FAN_OFF>:
static inline void FAN_OFF(void){ HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET); }
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
 800220c:	2200      	movs	r2, #0
 800220e:	2110      	movs	r1, #16
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <FAN_OFF+0x14>)
 8002212:	f003 fba9 	bl	8005968 <HAL_GPIO_WritePin>
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40020400 	.word	0x40020400

08002220 <TH_Task>:
#include "esp.h"

extern UART_HandleTypeDef huart6;

void TH_Task(void *argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b092      	sub	sp, #72	@ 0x48
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
    // 초기 지연(전원 안정화)
    osDelay(2000);
 8002228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800222c:	f007 fe1a 	bl	8009e64 <osDelay>

    for(;;){
        uint8_t t=0, h=0;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002236:	2300      	movs	r3, #0
 8002238:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        char sendBuf[50];
        int rc = DHT11_Read(&t, &h);
 800223c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8002240:	f107 033b 	add.w	r3, r7, #59	@ 0x3b
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fe94 	bl	8002f74 <DHT11_Read>
 800224c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        if (rc == 0) {
 800224e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d142      	bne.n	80022da <TH_Task+0xba>
            printf("[DHT11] T=%uC H=%u%%\r\n", t, h);
 8002254:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002258:	4619      	mov	r1, r3
 800225a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800225e:	461a      	mov	r2, r3
 8002260:	4822      	ldr	r0, [pc, #136]	@ (80022ec <TH_Task+0xcc>)
 8002262:	f00c fb4f 	bl	800e904 <iprintf>
            //내부 온습도게 DB 저장용 //
            sprintf(sendBuf, "[%s]%s@%u@%u\n", "KSH_SQL", "SENSOR", t, h);
 8002266:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800226a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800226e:	f107 0008 	add.w	r0, r7, #8
 8002272:	9201      	str	r2, [sp, #4]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <TH_Task+0xd0>)
 8002278:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <TH_Task+0xd4>)
 800227a:	491f      	ldr	r1, [pc, #124]	@ (80022f8 <TH_Task+0xd8>)
 800227c:	f00c fbf0 	bl	800ea60 <siprintf>
            esp_send_data(sendBuf);
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4618      	mov	r0, r3
 8002286:	f001 fb7f 	bl	8003988 <esp_send_data>
            memset(sendBuf, 0, sizeof(sendBuf));
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2232      	movs	r2, #50	@ 0x32
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f00c fd36 	bl	800ed04 <memset>
    		sprintf(sendBuf, "[%s]SETDB@%s@%u,%u\n", "SQL", "sensor", t, h);
 8002298:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800229c:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80022a0:	f107 0008 	add.w	r0, r7, #8
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <TH_Task+0xdc>)
 80022aa:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <TH_Task+0xe0>)
 80022ac:	4915      	ldr	r1, [pc, #84]	@ (8002304 <TH_Task+0xe4>)
 80022ae:	f00c fbd7 	bl	800ea60 <siprintf>
    		esp_send_data(sendBuf);
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fb66 	bl	8003988 <esp_send_data>
    		//////////////////////////
            if (t >= 30) {
 80022bc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80022c0:	2b1d      	cmp	r3, #29
 80022c2:	d902      	bls.n	80022ca <TH_Task+0xaa>
                FAN_ON();
 80022c4:	f7ff ff94 	bl	80021f0 <FAN_ON>
 80022c8:	e00b      	b.n	80022e2 <TH_Task+0xc2>
            } else {
            	if(fan_hold == 0)
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <TH_Task+0xe8>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <TH_Task+0xc2>
            		FAN_OFF();
 80022d4:	f7ff ff98 	bl	8002208 <FAN_OFF>
 80022d8:	e003      	b.n	80022e2 <TH_Task+0xc2>
            }
            // LED도 상태표시 원하면:
            // (t>=28) ? LED_ON() : LED_OFF();
        } else {
            printf("[DHT11] Read Fail rc=%d\r\n", rc);
 80022da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022dc:	480b      	ldr	r0, [pc, #44]	@ (800230c <TH_Task+0xec>)
 80022de:	f00c fb11 	bl	800e904 <iprintf>
            // 실패 시 팬 유지/정지 정책 선택:
            // FAN_OFF();
        }

        osDelay(10000); // 2초 주기 (DHT11은 1~2s 주기 권장)
 80022e2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80022e6:	f007 fdbd 	bl	8009e64 <osDelay>
    for(;;){
 80022ea:	e7a1      	b.n	8002230 <TH_Task+0x10>
 80022ec:	0801339c 	.word	0x0801339c
 80022f0:	080133b4 	.word	0x080133b4
 80022f4:	080133bc 	.word	0x080133bc
 80022f8:	080133c4 	.word	0x080133c4
 80022fc:	080133d4 	.word	0x080133d4
 8002300:	080133dc 	.word	0x080133dc
 8002304:	080133e0 	.word	0x080133e0
 8002308:	200022d8 	.word	0x200022d8
 800230c:	080133f4 	.word	0x080133f4

08002310 <set_ryg>:
extern char response[MAX_ESP_RX_BUFFER];

int esp_is_wifi_ready(void);

static void set_ryg(int r, int y, int g)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, r ? GPIO_PIN_SET : GPIO_PIN_RESET); // RED
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800232e:	480f      	ldr	r0, [pc, #60]	@ (800236c <set_ryg+0x5c>)
 8002330:	f003 fb1a 	bl	8005968 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, y ? GPIO_PIN_SET : GPIO_PIN_RESET); // YELLOW
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002346:	4809      	ldr	r0, [pc, #36]	@ (800236c <set_ryg+0x5c>)
 8002348:	f003 fb0e 	bl	8005968 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, g ? GPIO_PIN_SET : GPIO_PIN_RESET); // GREEN
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800235e:	4803      	ldr	r0, [pc, #12]	@ (800236c <set_ryg+0x5c>)
 8002360:	f003 fb02 	bl	8005968 <HAL_GPIO_WritePin>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40020400 	.word	0x40020400

08002370 <json_pick_value>:
// ★ esp.c에 추가한 프로브 함수 원형
int esp_link1_tcp_probe(const char *ip_or_host, int port);

// 간단 JSON 파서: "category":"T1H" ... "obsrValue": 27  또는 "obsrValue":"27"
static int json_pick_value(const char *json, const char *cat, char *out, int out_sz)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b098      	sub	sp, #96	@ 0x60
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
    char key[64];
    snprintf(key, sizeof(key), "\"category\":\"%s\"", cat);
 800237e:	f107 0010 	add.w	r0, r7, #16
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4a3a      	ldr	r2, [pc, #232]	@ (8002470 <json_pick_value+0x100>)
 8002386:	2140      	movs	r1, #64	@ 0x40
 8002388:	f00c fb34 	bl	800e9f4 <sniprintf>
    const char *p = strstr(json, key);
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4619      	mov	r1, r3
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f00c fd5e 	bl	800ee54 <strstr>
 8002398:	6538      	str	r0, [r7, #80]	@ 0x50
    if (!p) return -1;
 800239a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <json_pick_value+0x36>
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	e05f      	b.n	8002466 <json_pick_value+0xf6>

    const char *v = strstr(p, "\"obsrValue\"");
 80023a6:	4933      	ldr	r1, [pc, #204]	@ (8002474 <json_pick_value+0x104>)
 80023a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80023aa:	f00c fd53 	bl	800ee54 <strstr>
 80023ae:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 80023b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <json_pick_value+0x4c>
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e054      	b.n	8002466 <json_pick_value+0xf6>
    v = strchr(v, ':');
 80023bc:	213a      	movs	r1, #58	@ 0x3a
 80023be:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80023c0:	f00c fca8 	bl	800ed14 <strchr>
 80023c4:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 80023c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <json_pick_value+0x62>
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	e049      	b.n	8002466 <json_pick_value+0xf6>
    v++; // skip ':'
 80023d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d4:	3301      	adds	r3, #1
 80023d6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // 공백/따옴표 스킵
    while (*v==' ' || *v=='\"') v++;
 80023d8:	e002      	b.n	80023e0 <json_pick_value+0x70>
 80023da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023dc:	3301      	adds	r3, #1
 80023de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d0f8      	beq.n	80023da <json_pick_value+0x6a>
 80023e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b22      	cmp	r3, #34	@ 0x22
 80023ee:	d0f4      	beq.n	80023da <json_pick_value+0x6a>

    // 숫자/텍스트 토큰 끝까지
    const char *e = v;
 80023f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*e && *e!='\"' && *e!='\r' && *e!='\n' && *e!=',' && *e!='}') e++;
 80023f4:	e002      	b.n	80023fc <json_pick_value+0x8c>
 80023f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023f8:	3301      	adds	r3, #1
 80023fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d013      	beq.n	800242c <json_pick_value+0xbc>
 8002404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b22      	cmp	r3, #34	@ 0x22
 800240a:	d00f      	beq.n	800242c <json_pick_value+0xbc>
 800240c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b0d      	cmp	r3, #13
 8002412:	d00b      	beq.n	800242c <json_pick_value+0xbc>
 8002414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b0a      	cmp	r3, #10
 800241a:	d007      	beq.n	800242c <json_pick_value+0xbc>
 800241c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b2c      	cmp	r3, #44	@ 0x2c
 8002422:	d003      	beq.n	800242c <json_pick_value+0xbc>
 8002424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b7d      	cmp	r3, #125	@ 0x7d
 800242a:	d1e4      	bne.n	80023f6 <json_pick_value+0x86>

    int len = (int)(e - v);
 800242c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800242e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	657b      	str	r3, [r7, #84]	@ 0x54
    if (len <= 0) return -1;
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	2b00      	cmp	r3, #0
 8002438:	dc02      	bgt.n	8002440 <json_pick_value+0xd0>
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e012      	b.n	8002466 <json_pick_value+0xf6>
    if (len >= out_sz) len = out_sz - 1;
 8002440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	db02      	blt.n	800244e <json_pick_value+0xde>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	657b      	str	r3, [r7, #84]	@ 0x54
    memcpy(out, v, len);
 800244e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002450:	461a      	mov	r2, r3
 8002452:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f00d fc4c 	bl	800fcf2 <memcpy>
    out[len] = 0;
 800245a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3760      	adds	r7, #96	@ 0x60
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	08013410 	.word	0x08013410
 8002474:	08013420 	.word	0x08013420

08002478 <strip_ipd_markers>:

// ESP01 "+IPD,<link>,<len>:" 마커 제거 → 순수 HTTP/JSON만 남김
static int strip_ipd_markers(const char *in, char *out, int out_sz)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
    int w = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *p = in;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 800248c:	e077      	b.n	800257e <strip_ipd_markers+0x106>
        const char *tag = strstr(p, "+IPD,");
 800248e:	4946      	ldr	r1, [pc, #280]	@ (80025a8 <strip_ipd_markers+0x130>)
 8002490:	6a38      	ldr	r0, [r7, #32]
 8002492:	f00c fcdf 	bl	800ee54 <strstr>
 8002496:	6138      	str	r0, [r7, #16]
        if (!tag) {
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11d      	bne.n	80024da <strip_ipd_markers+0x62>
            int remain = (int)strlen(p);
 800249e:	6a38      	ldr	r0, [r7, #32]
 80024a0:	f7fd fefe 	bl	80002a0 <strlen>
 80024a4:	4603      	mov	r3, r0
 80024a6:	61fb      	str	r3, [r7, #28]
            if (remain > out_sz - 1 - w) remain = out_sz - 1 - w;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	dd04      	ble.n	80024c0 <strip_ipd_markers+0x48>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	1e5a      	subs	r2, r3, #1
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	61fb      	str	r3, [r7, #28]
            memcpy(out + w, p, remain);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	4413      	add	r3, r2
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00d fc11 	bl	800fcf2 <memcpy>
            w += remain;
 80024d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024d8:	e05b      	b.n	8002592 <strip_ipd_markers+0x11a>
        }
        int seg = (int)(tag - p);
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	61bb      	str	r3, [r7, #24]
        if (seg > 0) {
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	dd17      	ble.n	8002518 <strip_ipd_markers+0xa0>
            if (seg > out_sz - 1 - w) seg = out_sz - 1 - w;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	dd04      	ble.n	8002500 <strip_ipd_markers+0x88>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	61bb      	str	r3, [r7, #24]
            memcpy(out + w, p, seg);
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4413      	add	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	4618      	mov	r0, r3
 800250c:	f00d fbf1 	bl	800fcf2 <memcpy>
            w += seg;
 8002510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        const char *q = tag + 5; // after "+IPD,"
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	3305      	adds	r3, #5
 800251c:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // link
 800251e:	e002      	b.n	8002526 <strip_ipd_markers+0xae>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <strip_ipd_markers+0xc6>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b2f      	cmp	r3, #47	@ 0x2f
 8002534:	d903      	bls.n	800253e <strip_ipd_markers+0xc6>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b39      	cmp	r3, #57	@ 0x39
 800253c:	d9f0      	bls.n	8002520 <strip_ipd_markers+0xa8>
        if (*q==',') q++;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b2c      	cmp	r3, #44	@ 0x2c
 8002544:	d106      	bne.n	8002554 <strip_ipd_markers+0xdc>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3301      	adds	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // len
 800254c:	e002      	b.n	8002554 <strip_ipd_markers+0xdc>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <strip_ipd_markers+0xf4>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b2f      	cmp	r3, #47	@ 0x2f
 8002562:	d903      	bls.n	800256c <strip_ipd_markers+0xf4>
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b39      	cmp	r3, #57	@ 0x39
 800256a:	d9f0      	bls.n	800254e <strip_ipd_markers+0xd6>
        if (*q==':') q++;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b3a      	cmp	r3, #58	@ 0x3a
 8002572:	d102      	bne.n	800257a <strip_ipd_markers+0x102>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
        p = q;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <strip_ipd_markers+0x11a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3b01      	subs	r3, #1
 800258a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258c:	429a      	cmp	r2, r3
 800258e:	f6ff af7e 	blt.w	800248e <strip_ipd_markers+0x16>
    }
    out[w] = 0;
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	4413      	add	r3, r2
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
    return w;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3728      	adds	r7, #40	@ 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	0801342c 	.word	0x0801342c

080025ac <dechunk_simple>:

// Transfer-Encoding: chunked 간단 디청크
static int dechunk_simple(const char *in, char *out, int out_sz)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
    int w = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    const char *p = in;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	61bb      	str	r3, [r7, #24]
    while (*p) {
 80025c0:	e044      	b.n	800264c <dechunk_simple+0xa0>
        int sz = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
        if (sscanf(p, "%x", &sz) != 1) break;
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	461a      	mov	r2, r3
 80025cc:	492a      	ldr	r1, [pc, #168]	@ (8002678 <dechunk_simple+0xcc>)
 80025ce:	69b8      	ldr	r0, [r7, #24]
 80025d0:	f00c fa68 	bl	800eaa4 <siscanf>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d13d      	bne.n	8002656 <dechunk_simple+0xaa>
        const char *nl = strstr(p, "\r\n");
 80025da:	4928      	ldr	r1, [pc, #160]	@ (800267c <dechunk_simple+0xd0>)
 80025dc:	69b8      	ldr	r0, [r7, #24]
 80025de:	f00c fc39 	bl	800ee54 <strstr>
 80025e2:	6178      	str	r0, [r7, #20]
        if (!nl) break;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d037      	beq.n	800265a <dechunk_simple+0xae>
        p = nl + 2;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3302      	adds	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
        if (sz == 0) break;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d033      	beq.n	800265e <dechunk_simple+0xb2>
        if (w + sz > out_sz - 1) sz = out_sz - 1 - w;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dc04      	bgt.n	800260c <dechunk_simple+0x60>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	613b      	str	r3, [r7, #16]
        if (sz <= 0) break;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	dd27      	ble.n	8002662 <dechunk_simple+0xb6>
        memcpy(out + w, p, sz);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	4413      	add	r3, r2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	4618      	mov	r0, r3
 800261e:	f00d fb68 	bl	800fcf2 <memcpy>
        w += sz;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	61fb      	str	r3, [r7, #28]
        p += sz;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	461a      	mov	r2, r3
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if (p[0]=='\r' && p[1]=='\n') p += 2;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b0d      	cmp	r3, #13
 800263a:	d107      	bne.n	800264c <dechunk_simple+0xa0>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	3301      	adds	r3, #1
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b0a      	cmp	r3, #10
 8002644:	d102      	bne.n	800264c <dechunk_simple+0xa0>
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	3302      	adds	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
    while (*p) {
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1b6      	bne.n	80025c2 <dechunk_simple+0x16>
 8002654:	e006      	b.n	8002664 <dechunk_simple+0xb8>
        if (sscanf(p, "%x", &sz) != 1) break;
 8002656:	bf00      	nop
 8002658:	e004      	b.n	8002664 <dechunk_simple+0xb8>
        if (!nl) break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <dechunk_simple+0xb8>
        if (sz == 0) break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <dechunk_simple+0xb8>
        if (sz <= 0) break;
 8002662:	bf00      	nop
    }
    out[w] = 0;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
    return w;
 800266e:	69fb      	ldr	r3, [r7, #28]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	08013434 	.word	0x08013434
 800267c:	08013438 	.word	0x08013438

08002680 <kma_ultra_fcst_base>:

static int kma_ultra_fcst_base(char *date8, char *time4)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	@ 0x30
 8002684:	af02      	add	r7, sp, #8
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    time_t t;
    // NTP에서 얻은 epoch 사용
    if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 800268a:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <kma_ultra_fcst_base+0xb0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f04f 31ff 	mov.w	r1, #4294967295
 8002692:	4618      	mov	r0, r3
 8002694:	f007 fcb4 	bl	800a000 <osMutexAcquire>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <kma_ultra_fcst_base+0x34>
        t = ntp_time;
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <kma_ultra_fcst_base+0xb4>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
        osMutexRelease(NTP_MutexHandle);
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <kma_ultra_fcst_base+0xb0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f007 fcf2 	bl	800a096 <osMutexRelease>
 80026b2:	e006      	b.n	80026c2 <kma_ultra_fcst_base+0x42>
    } else {
        t = time(NULL); // fallback
 80026b4:	2000      	movs	r0, #0
 80026b6:	f00c ff85 	bl	800f5c4 <time>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    struct tm *k = localtime(&t);
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	4618      	mov	r0, r3
 80026c8:	f00c fbe2 	bl	800ee90 <localtime>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24
    int yyyy = k->tm_year + 1900;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80026d6:	623b      	str	r3, [r7, #32]
    int mm   = k->tm_mon + 1;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
    int dd   = k->tm_mday;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
    int hh   = k->tm_hour;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	617b      	str	r3, [r7, #20]
    int mi   = k->tm_min;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]

    mi = (mi / 10) * 10; //10분단위로 내림
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <kma_ultra_fcst_base+0xb8>)
 80026f6:	fb82 1203 	smull	r1, r2, r2, r3
 80026fa:	1092      	asrs	r2, r2, #2
 80026fc:	17db      	asrs	r3, r3, #31
 80026fe:	1ad2      	subs	r2, r2, r3
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	613b      	str	r3, [r7, #16]

    // 1시간 단위라서 분은 무시
    sprintf(date8, "%04d%02d%02d", yyyy, mm, dd);
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	490a      	ldr	r1, [pc, #40]	@ (800273c <kma_ultra_fcst_base+0xbc>)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f00c f9a3 	bl	800ea60 <siprintf>
    sprintf(time4, "%02d%02d", hh, mi);   // hh시 정각
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4908      	ldr	r1, [pc, #32]	@ (8002740 <kma_ultra_fcst_base+0xc0>)
 8002720:	6838      	ldr	r0, [r7, #0]
 8002722:	f00c f99d 	bl	800ea60 <siprintf>
    //printf("%02d:%02d:00->", hh, mi);
    return 1;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3728      	adds	r7, #40	@ 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200024b4 	.word	0x200024b4
 8002734:	200022e0 	.word	0x200022e0
 8002738:	66666667 	.word	0x66666667
 800273c:	0801343c 	.word	0x0801343c
 8002740:	0801344c 	.word	0x0801344c

08002744 <pty_text>:

static const char* pty_text(int code)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    switch (code) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d822      	bhi.n	8002798 <pty_text+0x54>
 8002752:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <pty_text+0x14>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002779 	.word	0x08002779
 800275c:	0800277d 	.word	0x0800277d
 8002760:	08002781 	.word	0x08002781
 8002764:	08002785 	.word	0x08002785
 8002768:	08002789 	.word	0x08002789
 800276c:	0800278d 	.word	0x0800278d
 8002770:	08002791 	.word	0x08002791
 8002774:	08002795 	.word	0x08002795
        case 0: return "Sun";
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <pty_text+0x64>)
 800277a:	e00e      	b.n	800279a <pty_text+0x56>
        case 1: return "Rain";
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <pty_text+0x68>)
 800277e:	e00c      	b.n	800279a <pty_text+0x56>
        case 2: return "Rain/Snow";
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <pty_text+0x6c>)
 8002782:	e00a      	b.n	800279a <pty_text+0x56>
        case 3: return "Snow";
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <pty_text+0x70>)
 8002786:	e008      	b.n	800279a <pty_text+0x56>
        case 4: return "Shower";
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <pty_text+0x74>)
 800278a:	e006      	b.n	800279a <pty_text+0x56>
        case 5: return "RainDrop";
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <pty_text+0x78>)
 800278e:	e004      	b.n	800279a <pty_text+0x56>
        case 6: return "RainDrop/SnowFlying";
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <pty_text+0x7c>)
 8002792:	e002      	b.n	800279a <pty_text+0x56>
        case 7: return "SnowFlying";
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <pty_text+0x80>)
 8002796:	e000      	b.n	800279a <pty_text+0x56>
        default: return "?";
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <pty_text+0x84>)
    }
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	08013458 	.word	0x08013458
 80027ac:	0801345c 	.word	0x0801345c
 80027b0:	08013464 	.word	0x08013464
 80027b4:	08013470 	.word	0x08013470
 80027b8:	08013478 	.word	0x08013478
 80027bc:	08013480 	.word	0x08013480
 80027c0:	0801348c 	.word	0x0801348c
 80027c4:	080134a0 	.word	0x080134a0
 80027c8:	080134ac 	.word	0x080134ac

080027cc <Weather_Task>:


void Weather_Task(void *argument)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	f6ad 3db8 	subw	sp, sp, #3000	@ 0xbb8
 80027d2:	af04      	add	r7, sp, #16
 80027d4:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 80027d8:	f6a3 33a4 	subw	r3, r3, #2980	@ 0xba4
 80027dc:	6018      	str	r0, [r3, #0]
    const char *KMA_HOST = "apihub.kma.go.kr";
 80027de:	4b7c      	ldr	r3, [pc, #496]	@ (80029d0 <Weather_Task+0x204>)
 80027e0:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
    const char *KMA_IP   = "203.247.96.25";   // nslookup 결과
 80027e4:	4b7b      	ldr	r3, [pc, #492]	@ (80029d4 <Weather_Task+0x208>)
 80027e6:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
    const int NX = 55, NY = 126;              // 격자 좌표(원하면 변경)
 80027ea:	2337      	movs	r3, #55	@ 0x37
 80027ec:	f8c7 3b80 	str.w	r3, [r7, #2944]	@ 0xb80
 80027f0:	237e      	movs	r3, #126	@ 0x7e
 80027f2:	f8c7 3b7c 	str.w	r3, [r7, #2940]	@ 0xb7c
    int prev = -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	f8c7 3ba4 	str.w	r3, [r7, #2980]	@ 0xba4
    uint16_t length;

    for (;;)
    {
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80027fe:	f001 fa43 	bl	8003c88 <esp_is_wifi_ready>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <Weather_Task+0x46>
 8002808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800280c:	f008 fea4 	bl	800b558 <vTaskDelay>
 8002810:	e2ec      	b.n	8002dec <Weather_Task+0x620>
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8002812:	4b71      	ldr	r3, [pc, #452]	@ (80029d8 <Weather_Task+0x20c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f04f 31ff 	mov.w	r1, #4294967295
 800281a:	4618      	mov	r0, r3
 800281c:	f007 fbf0 	bl	800a000 <osMutexAcquire>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 82de 	bne.w	8002de4 <Weather_Task+0x618>
            // 1) 링크1 열기
            char cmd[128];
            sprintf(cmd, "AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", KMA_IP);
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	f8d7 2b84 	ldr.w	r2, [r7, #2948]	@ 0xb84
 8002830:	496a      	ldr	r1, [pc, #424]	@ (80029dc <Weather_Task+0x210>)
 8002832:	4618      	mov	r0, r3
 8002834:	f00c f914 	bl	800ea60 <siprintf>
            if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) == 0) {
 8002838:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 800283c:	f107 0008 	add.w	r0, r7, #8
 8002840:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002844:	4966      	ldr	r1, [pc, #408]	@ (80029e0 <Weather_Task+0x214>)
 8002846:	f000 fc5d 	bl	8003104 <esp_at_command>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 82c1 	bne.w	8002dd4 <Weather_Task+0x608>
                //printf("[WEATHER] Link1 TCP connect OK\r\n");

                // 2) HTTP GET 문자열 준비
                char http_req[640];
                char base_date[9], base_time[5];
                kma_ultra_fcst_base(base_date, base_time);
 8002852:	f607 3248 	addw	r2, r7, #2888	@ 0xb48
 8002856:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff0f 	bl	8002680 <kma_ultra_fcst_base>

                sprintf(http_req,
 8002862:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8002866:	f507 6235 	add.w	r2, r7, #2896	@ 0xb50
 800286a:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800286e:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	f8d7 3b80 	ldr.w	r3, [r7, #2944]	@ 0xb80
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	4958      	ldr	r1, [pc, #352]	@ (80029e4 <Weather_Task+0x218>)
 8002884:	f00c f8ec 	bl	800ea60 <siprintf>
                    "Connection: close\r\n\r\n",
                    base_date, base_time, NX, NY, KMA_HOST);


                // 3) AT+CIPSEND=1,<len>
                sprintf(cmd, "AT+CIPSEND=1,%d\r\n", (int)strlen(http_req));
 8002888:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fd07 	bl	80002a0 <strlen>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	4953      	ldr	r1, [pc, #332]	@ (80029e8 <Weather_Task+0x21c>)
 800289c:	4618      	mov	r0, r3
 800289e:	f00c f8df 	bl	800ea60 <siprintf>
                if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 2000) == 0) {
 80028a2:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 80028a6:	f107 0008 	add.w	r0, r7, #8
 80028aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80028ae:	494c      	ldr	r1, [pc, #304]	@ (80029e0 <Weather_Task+0x214>)
 80028b0:	f000 fc28 	bl	8003104 <esp_at_command>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8283 	bne.w	8002dc2 <Weather_Task+0x5f6>
                    // (권장) 프롬프트 안정화
                    vTaskDelay(pdMS_TO_TICKS(50));
 80028bc:	2032      	movs	r0, #50	@ 0x32
 80028be:	f008 fe4b 	bl	800b558 <vTaskDelay>

                    // 4) payload 송신 (단순 송신)
                    HAL_UART_Transmit(&huart6, (uint8_t*)http_req, strlen(http_req), 500);
 80028c2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fcea 	bl	80002a0 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80028d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028d8:	4844      	ldr	r0, [pc, #272]	@ (80029ec <Weather_Task+0x220>)
 80028da:	f006 f979 	bl	8008bd0 <HAL_UART_Transmit>

                    // 5) 응답 수신: cb_data에서 rx로 누적 수집 (최대 8초, CLOSED 감지 시 조기 종료)
                    char rx[MAX_ESP_RX_BUFFER];
                    int  copied = 0, elapsed = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 3ba0 	str.w	r3, [r7, #2976]	@ 0xba0
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
                    memset(rx, 0, sizeof(rx));
 80028ea:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80028ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00c fa05 	bl	800ed04 <memset>

                    for (;;) {
                        // CLOSED 들어오면 서버가 응답 끝내고 소켓 닫았다는 의미
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 80028fa:	493d      	ldr	r1, [pc, #244]	@ (80029f0 <Weather_Task+0x224>)
 80028fc:	483d      	ldr	r0, [pc, #244]	@ (80029f4 <Weather_Task+0x228>)
 80028fe:	f00c faa9 	bl	800ee54 <strstr>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d142      	bne.n	800298e <Weather_Task+0x1c2>

                        if (cb_data.length > 0) {
 8002908:	4b3a      	ldr	r3, [pc, #232]	@ (80029f4 <Weather_Task+0x228>)
 800290a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800290e:	2b00      	cmp	r3, #0
 8002910:	d02f      	beq.n	8002972 <Weather_Task+0x1a6>
                            taskENTER_CRITICAL();
 8002912:	f00a f931 	bl	800cb78 <vPortEnterCritical>
                            int n = cb_data.length;
 8002916:	4b37      	ldr	r3, [pc, #220]	@ (80029f4 <Weather_Task+0x228>)
 8002918:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800291c:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
                            if (n > (int)sizeof(rx) - 1 - copied) n = sizeof(rx) - 1 - copied;
 8002920:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 8002924:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8002928:	3307      	adds	r3, #7
 800292a:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	@ 0xb98
 800292e:	429a      	cmp	r2, r3
 8002930:	dd06      	ble.n	8002940 <Weather_Task+0x174>
 8002932:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 8002936:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 800293a:	3307      	adds	r3, #7
 800293c:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
                            memcpy(rx + copied, cb_data.buf, n);
 8002940:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 8002944:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8002948:	4413      	add	r3, r2
 800294a:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	@ 0xb98
 800294e:	4929      	ldr	r1, [pc, #164]	@ (80029f4 <Weather_Task+0x228>)
 8002950:	4618      	mov	r0, r3
 8002952:	f00d f9ce 	bl	800fcf2 <memcpy>
                            cb_data.length = 0;   // 소비
 8002956:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <Weather_Task+0x228>)
 8002958:	2200      	movs	r2, #0
 800295a:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
                            taskEXIT_CRITICAL();
 800295e:	f00a f93d 	bl	800cbdc <vPortExitCritical>
                            copied += n;
 8002962:	f8d7 2ba0 	ldr.w	r2, [r7, #2976]	@ 0xba0
 8002966:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 800296a:	4413      	add	r3, r2
 800296c:	f8c7 3ba0 	str.w	r3, [r7, #2976]	@ 0xba0
 8002970:	e7c3      	b.n	80028fa <Weather_Task+0x12e>
                        } else {
                            vTaskDelay(pdMS_TO_TICKS(20));
 8002972:	2014      	movs	r0, #20
 8002974:	f008 fdf0 	bl	800b558 <vTaskDelay>
                            elapsed += 20;
 8002978:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 800297c:	3314      	adds	r3, #20
 800297e:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8002982:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 8002986:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800298a:	da02      	bge.n	8002992 <Weather_Task+0x1c6>
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 800298c:	e7b5      	b.n	80028fa <Weather_Task+0x12e>
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <Weather_Task+0x1c8>
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8002992:	bf00      	nop
                    // 디버그: 원본 앞머리
                   // { char head[200]={0}; snprintf(head,sizeof(head)-1,"%.*s",180,rx);
                   //   printf("[WEATHER] RAW head: %s\r\n", head); }

					// ---- HTTP 헤더/본문 분리 ----
					char *http = strstr(rx, "HTTP/1.1 ");
 8002994:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002998:	4917      	ldr	r1, [pc, #92]	@ (80029f8 <Weather_Task+0x22c>)
 800299a:	4618      	mov	r0, r3
 800299c:	f00c fa5a 	bl	800ee54 <strstr>
 80029a0:	f8c7 0b78 	str.w	r0, [r7, #2936]	@ 0xb78
					char *hdr_end = http ? strstr(http, "\r\n\r\n") : NULL;
 80029a4:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <Weather_Task+0x1ee>
 80029ac:	4913      	ldr	r1, [pc, #76]	@ (80029fc <Weather_Task+0x230>)
 80029ae:	f8d7 0b78 	ldr.w	r0, [r7, #2936]	@ 0xb78
 80029b2:	f00c fa4f 	bl	800ee54 <strstr>
 80029b6:	4603      	mov	r3, r0
 80029b8:	e000      	b.n	80029bc <Weather_Task+0x1f0>
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 3b74 	str.w	r3, [r7, #2932]	@ 0xb74
					char *body = hdr_end ? (hdr_end + 4) : rx;
 80029c0:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <Weather_Task+0x234>
 80029c8:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80029cc:	3304      	adds	r3, #4
 80029ce:	e019      	b.n	8002a04 <Weather_Task+0x238>
 80029d0:	080134b0 	.word	0x080134b0
 80029d4:	080134c4 	.word	0x080134c4
 80029d8:	200024b0 	.word	0x200024b0
 80029dc:	080134d4 	.word	0x080134d4
 80029e0:	20001298 	.word	0x20001298
 80029e4:	080134f4 	.word	0x080134f4
 80029e8:	080135c8 	.word	0x080135c8
 80029ec:	20002444 	.word	0x20002444
 80029f0:	080135dc 	.word	0x080135dc
 80029f4:	20001ad0 	.word	0x20001ad0
 80029f8:	080135e4 	.word	0x080135e4
 80029fc:	080135f0 	.word	0x080135f0
 8002a00:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002a04:	f8c7 3b70 	str.w	r3, [r7, #2928]	@ 0xb70

					// 헤더에서 chunked 여부 확인
					int is_chunked = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
					if (http && hdr_end) {
 8002a0e:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01e      	beq.n	8002a54 <Weather_Task+0x288>
 8002a16:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01a      	beq.n	8002a54 <Weather_Task+0x288>
						char save = *hdr_end; *hdr_end = 0;
 8002a1e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f887 3b6f 	strb.w	r3, [r7, #2927]	@ 0xb6f
 8002a28:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
						is_chunked = (strstr(http, "Transfer-Encoding: chunked") != NULL);
 8002a30:	49c6      	ldr	r1, [pc, #792]	@ (8002d4c <Weather_Task+0x580>)
 8002a32:	f8d7 0b78 	ldr.w	r0, [r7, #2936]	@ 0xb78
 8002a36:	f00c fa0d 	bl	800ee54 <strstr>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
						*hdr_end = save;
 8002a4a:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8002a4e:	f897 2b6f 	ldrb.w	r2, [r7, #2927]	@ 0xb6f
 8002a52:	701a      	strb	r2, [r3, #0]
					}

					// 1) +IPD 마커 제거
					static char no_ipd[MAX_ESP_RX_BUFFER];
					strip_ipd_markers(body, no_ipd, sizeof(no_ipd));
 8002a54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a58:	49bd      	ldr	r1, [pc, #756]	@ (8002d50 <Weather_Task+0x584>)
 8002a5a:	f8d7 0b70 	ldr.w	r0, [r7, #2928]	@ 0xb70
 8002a5e:	f7ff fd0b 	bl	8002478 <strip_ipd_markers>

					// 2) (필요시) 디청크
					static char json_buf[MAX_ESP_RX_BUFFER];
					const char *json_src = no_ipd;
 8002a62:	4bbb      	ldr	r3, [pc, #748]	@ (8002d50 <Weather_Task+0x584>)
 8002a64:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
					if (is_chunked) {
 8002a68:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <Weather_Task+0x2b6>
						dechunk_simple(no_ipd, json_buf, sizeof(json_buf));
 8002a70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a74:	49b7      	ldr	r1, [pc, #732]	@ (8002d54 <Weather_Task+0x588>)
 8002a76:	48b6      	ldr	r0, [pc, #728]	@ (8002d50 <Weather_Task+0x584>)
 8002a78:	f7ff fd98 	bl	80025ac <dechunk_simple>
						json_src = json_buf;
 8002a7c:	4bb5      	ldr	r3, [pc, #724]	@ (8002d54 <Weather_Task+0x588>)
 8002a7e:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
					}

                    if (strstr(rx, "HTTP/1.1 200")) {
 8002a82:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002a86:	49b4      	ldr	r1, [pc, #720]	@ (8002d58 <Weather_Task+0x58c>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00c f9e3 	bl	800ee54 <strstr>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8191 	beq.w	8002db8 <Weather_Task+0x5ec>
                        char t1h[16] = "?", reh[16] = "?", pty[16] = "?", rn1[16] = "?";
 8002a96:	233f      	movs	r3, #63	@ 0x3f
 8002a98:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
 8002a9c:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	233f      	movs	r3, #63	@ 0x3f
 8002aaa:	f8c7 3b28 	str.w	r3, [r7, #2856]	@ 0xb28
 8002aae:	f607 332c 	addw	r3, r7, #2860	@ 0xb2c
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	233f      	movs	r3, #63	@ 0x3f
 8002abc:	f8c7 3b18 	str.w	r3, [r7, #2840]	@ 0xb18
 8002ac0:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	233f      	movs	r3, #63	@ 0x3f
 8002ace:	f8c7 3b08 	str.w	r3, [r7, #2824]	@ 0xb08
 8002ad2:	f607 330c 	addw	r3, r7, #2828	@ 0xb0c
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
                        json_pick_value(json_src, "T1H", t1h, sizeof(t1h));
 8002ade:	f607 3238 	addw	r2, r7, #2872	@ 0xb38
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	499d      	ldr	r1, [pc, #628]	@ (8002d5c <Weather_Task+0x590>)
 8002ae6:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 8002aea:	f7ff fc41 	bl	8002370 <json_pick_value>
                        json_pick_value(json_src, "REH", reh, sizeof(reh));
 8002aee:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8002af2:	2310      	movs	r3, #16
 8002af4:	499a      	ldr	r1, [pc, #616]	@ (8002d60 <Weather_Task+0x594>)
 8002af6:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 8002afa:	f7ff fc39 	bl	8002370 <json_pick_value>
                        json_pick_value(json_src, "PTY", pty, sizeof(pty));
 8002afe:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 8002b02:	2310      	movs	r3, #16
 8002b04:	4997      	ldr	r1, [pc, #604]	@ (8002d64 <Weather_Task+0x598>)
 8002b06:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 8002b0a:	f7ff fc31 	bl	8002370 <json_pick_value>
                        json_pick_value(json_src, "RN1", rn1, sizeof(rn1));
 8002b0e:	f607 3208 	addw	r2, r7, #2824	@ 0xb08
 8002b12:	2310      	movs	r3, #16
 8002b14:	4994      	ldr	r1, [pc, #592]	@ (8002d68 <Weather_Task+0x59c>)
 8002b16:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 8002b1a:	f7ff fc29 	bl	8002370 <json_pick_value>

                        int pty_code = atoi(pty);
 8002b1e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00a fb3b 	bl	800d19e <atoi>
 8002b28:	f8c7 0b68 	str.w	r0, [r7, #2920]	@ 0xb68
                        float temp_c = atof(t1h);  // 현재기온
 8002b2c:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8002b30:	4618      	mov	r0, r3
 8002b32:	f00a fb31 	bl	800d198 <atof>
 8002b36:	ec53 2b10 	vmov	r2, r3, d0
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe f86b 	bl	8000c18 <__aeabi_d2f>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f607 3264 	addw	r2, r7, #2916	@ 0xb64
 8002b48:	6013      	str	r3, [r2, #0]
                        float hum = atoi(reh);     // 현재습도
 8002b4a:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f00a fb25 	bl	800d19e <atoi>
 8002b54:	ee07 0a90 	vmov	s15, r0
 8002b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002b60:	edc3 7a00 	vstr	s15, [r3]

                        printf("[WEATHER][Gangseo-gu] T=%s°C, H=%s%%, RAIN=%s, RN1=%smm\r\n",
 8002b64:	f8d7 0b68 	ldr.w	r0, [r7, #2920]	@ 0xb68
 8002b68:	f7ff fdec 	bl	8002744 <pty_text>
 8002b6c:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8002b70:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8002b74:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	487b      	ldr	r0, [pc, #492]	@ (8002d6c <Weather_Task+0x5a0>)
 8002b7e:	f00b fec1 	bl	800e904 <iprintf>
                               t1h, reh, pty_text(pty_code), rn1);

                        int ok = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
                        if (!(temp_c > -50.0f && temp_c < 70.0f)) ok = 0;  // 말이 되는 기온 범위
 8002b88:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8002d70 <Weather_Task+0x5a4>
 8002b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	bfcc      	ite	gt
 8002b9e:	2301      	movgt	r3, #1
 8002ba0:	2300      	movle	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d112      	bne.n	8002bd4 <Weather_Task+0x408>
 8002bae:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002d74 <Weather_Task+0x5a8>
 8002bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc2:	bf4c      	ite	mi
 8002bc4:	2301      	movmi	r3, #1
 8002bc6:	2300      	movpl	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <Weather_Task+0x40e>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
                        if (!(hum > 0 && hum <= 100))       	  ok = 0;  // 습도 0~100%
 8002bda:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	bfcc      	ite	gt
 8002bec:	2301      	movgt	r3, #1
 8002bee:	2300      	movle	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d112      	bne.n	8002c22 <Weather_Task+0x456>
 8002bfc:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002d78 <Weather_Task+0x5ac>
 8002c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	bf94      	ite	ls
 8002c12:	2301      	movls	r3, #1
 8002c14:	2300      	movhi	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <Weather_Task+0x45c>
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
                        if (!(pty_code >= 0 && pty_code <= 7))    ok = 0;  // PTY 0..7
 8002c28:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db03      	blt.n	8002c38 <Weather_Task+0x46c>
 8002c30:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002c34:	2b07      	cmp	r3, #7
 8002c36:	dd02      	ble.n	8002c3e <Weather_Task+0x472>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c

                        if (ok) {
 8002c3e:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80bd 	beq.w	8002dc2 <Weather_Task+0x5f6>
							if (prev != pty_code) {						// default:0, 비가오면 0, 비가안오면 90
 8002c48:	f8d7 2ba4 	ldr.w	r2, [r7, #2980]	@ 0xba4
 8002c4c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d00d      	beq.n	8002c70 <Weather_Task+0x4a4>
								   prev = pty_code;
 8002c54:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002c58:	f8c7 3ba4 	str.w	r3, [r7, #2980]	@ 0xba4
								   Servo_SetAngle(pty_code ? 0 : 90);
 8002c5c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <Weather_Task+0x49c>
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <Weather_Task+0x49e>
 8002c68:	235a      	movs	r3, #90	@ 0x5a
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fa94 	bl	8002198 <Servo_SetAngle>
							}

                        // ★ LCD용 공유 값 업데이트
							if (osMutexAcquire(Weather_MutexHandle, osWaitForever) == osOK) {
 8002c70:	4b42      	ldr	r3, [pc, #264]	@ (8002d7c <Weather_Task+0x5b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f007 f9c1 	bl	800a000 <osMutexAcquire>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d11e      	bne.n	8002cc2 <Weather_Task+0x4f6>
								g_t1h = (float)atof(t1h);
 8002c84:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00a fa85 	bl	800d198 <atof>
 8002c8e:	ec53 2b10 	vmov	r2, r3, d0
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7fd ffbf 	bl	8000c18 <__aeabi_d2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a38      	ldr	r2, [pc, #224]	@ (8002d80 <Weather_Task+0x5b4>)
 8002c9e:	6013      	str	r3, [r2, #0]
								g_reh = atoi(reh);
 8002ca0:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f00a fa7a 	bl	800d19e <atoi>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <Weather_Task+0x5b8>)
 8002cae:	6013      	str	r3, [r2, #0]
								g_pty = pty_code;
 8002cb0:	4a35      	ldr	r2, [pc, #212]	@ (8002d88 <Weather_Task+0x5bc>)
 8002cb2:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002cb6:	6013      	str	r3, [r2, #0]
								osMutexRelease(Weather_MutexHandle);
 8002cb8:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <Weather_Task+0x5b0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f007 f9ea 	bl	800a096 <osMutexRelease>
							}

							int is_precip = (pty_code != 0);
 8002cc2:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf14      	ite	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	2300      	moveq	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c
							if (is_precip || temp_c >= 35.0f) {
 8002cd4:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <Weather_Task+0x526>
 8002cdc:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002d8c <Weather_Task+0x5c0>
 8002ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	db11      	blt.n	8002d16 <Weather_Task+0x54a>
								set_ryg(1, 0, 0);  // RED
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	f7ff fb0a 	bl	8002310 <set_ryg>
								printf("[RYG] RED ON (precip=%d, T=%.1f)\r\n", is_precip, temp_c);
 8002cfc:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	f7fd fc39 	bl	8000578 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	f8d7 1b5c 	ldr.w	r1, [r7, #2908]	@ 0xb5c
 8002d0e:	4820      	ldr	r0, [pc, #128]	@ (8002d90 <Weather_Task+0x5c4>)
 8002d10:	f00b fdf8 	bl	800e904 <iprintf>
 8002d14:	e055      	b.n	8002dc2 <Weather_Task+0x5f6>
							} else if (temp_c >= 30.0f) {
 8002d16:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002d1a:	edd3 7a00 	vldr	s15, [r3]
 8002d1e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	db35      	blt.n	8002d98 <Weather_Task+0x5cc>
								set_ryg(0, 1, 0);  // YELLOW
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7ff faed 	bl	8002310 <set_ryg>
								printf("[RYG] YELLOW ON (T=%.1f)\r\n", temp_c);
 8002d36:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	f7fd fc1c 	bl	8000578 <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4813      	ldr	r0, [pc, #76]	@ (8002d94 <Weather_Task+0x5c8>)
 8002d46:	f00b fddd 	bl	800e904 <iprintf>
 8002d4a:	e03a      	b.n	8002dc2 <Weather_Task+0x5f6>
 8002d4c:	080135f8 	.word	0x080135f8
 8002d50:	20000284 	.word	0x20000284
 8002d54:	20000a84 	.word	0x20000a84
 8002d58:	08013614 	.word	0x08013614
 8002d5c:	08013624 	.word	0x08013624
 8002d60:	08013628 	.word	0x08013628
 8002d64:	0801362c 	.word	0x0801362c
 8002d68:	08013630 	.word	0x08013630
 8002d6c:	08013634 	.word	0x08013634
 8002d70:	c2480000 	.word	0xc2480000
 8002d74:	428c0000 	.word	0x428c0000
 8002d78:	42c80000 	.word	0x42c80000
 8002d7c:	200024b8 	.word	0x200024b8
 8002d80:	20000280 	.word	0x20000280
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	420c0000 	.word	0x420c0000
 8002d90:	08013670 	.word	0x08013670
 8002d94:	08013694 	.word	0x08013694
							} else {
								set_ryg(0, 0, 1);  // GREEN
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff fab7 	bl	8002310 <set_ryg>
								printf("[RYG] GREEN ON (T=%.1f)\r\n", temp_c);
 8002da2:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	f7fd fbe6 	bl	8000578 <__aeabi_f2d>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	480f      	ldr	r0, [pc, #60]	@ (8002df0 <Weather_Task+0x624>)
 8002db2:	f00b fda7 	bl	800e904 <iprintf>
 8002db6:	e004      	b.n	8002dc2 <Weather_Task+0x5f6>
							}
                        }
                    } else {
                        printf("[WEATHER] HTTP not 200 (len=%d)\r\n", copied);
 8002db8:	f8d7 1ba0 	ldr.w	r1, [r7, #2976]	@ 0xba0
 8002dbc:	480d      	ldr	r0, [pc, #52]	@ (8002df4 <Weather_Task+0x628>)
 8002dbe:	f00b fda1 	bl	800e904 <iprintf>
                    }
                }
                // 6) 링크1 닫기
                esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
 8002dc2:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8002dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dca:	490b      	ldr	r1, [pc, #44]	@ (8002df8 <Weather_Task+0x62c>)
 8002dcc:	480b      	ldr	r0, [pc, #44]	@ (8002dfc <Weather_Task+0x630>)
 8002dce:	f000 f999 	bl	8003104 <esp_at_command>
 8002dd2:	e002      	b.n	8002dda <Weather_Task+0x60e>
            } else {
                printf("[WEATHER] Link1 TCP connect FAIL\r\n");
 8002dd4:	480a      	ldr	r0, [pc, #40]	@ (8002e00 <Weather_Task+0x634>)
 8002dd6:	f00b fe05 	bl	800e9e4 <puts>
            }

            osMutexRelease(ESP_MutexHandle);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <Weather_Task+0x638>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f007 f959 	bl	800a096 <osMutexRelease>
        }

        vTaskDelay(pdMS_TO_TICKS(60000));  // 60초 주기
 8002de4:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8002de8:	f008 fbb6 	bl	800b558 <vTaskDelay>
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 8002dec:	e507      	b.n	80027fe <Weather_Task+0x32>
 8002dee:	bf00      	nop
 8002df0:	080136b0 	.word	0x080136b0
 8002df4:	080136cc 	.word	0x080136cc
 8002df8:	20001298 	.word	0x20001298
 8002dfc:	080136f0 	.word	0x080136f0
 8002e00:	08013700 	.word	0x08013700
 8002e04:	200024b0 	.word	0x200024b0

08002e08 <DWT_Delay_Init>:

// ─────────── DWT 기반 us 지연 ───────────
static uint8_t dwt_inited = 0;

void DWT_Delay_Init(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
    if (!dwt_inited) {
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <DWT_Delay_Init+0x34>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10e      	bne.n	8002e32 <DWT_Delay_Init+0x2a>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <DWT_Delay_Init+0x38>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a09      	ldr	r2, [pc, #36]	@ (8002e40 <DWT_Delay_Init+0x38>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // cycle counter enable
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <DWT_Delay_Init+0x3c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a07      	ldr	r2, [pc, #28]	@ (8002e44 <DWT_Delay_Init+0x3c>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
        dwt_inited = 1;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <DWT_Delay_Init+0x34>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
    }
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	20001284 	.word	0x20001284
 8002e40:	e000edf0 	.word	0xe000edf0
 8002e44:	e0001000 	.word	0xe0001000

08002e48 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    uint32_t clk = HAL_RCC_GetHCLKFreq();   // F411: 보통 84MHz
 8002e50:	f003 fea6 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8002e54:	6178      	str	r0, [r7, #20]
    uint32_t cycles = (clk / 1000000) * us;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <DWT_Delay_us+0x44>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9a      	lsrs	r2, r3, #18
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	613b      	str	r3, [r7, #16]
    uint32_t start = DWT->CYCCNT;
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <DWT_Delay_us+0x48>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
    while ((DWT->CYCCNT - start) < cycles) { __NOP(); }
 8002e6e:	e000      	b.n	8002e72 <DWT_Delay_us+0x2a>
 8002e70:	bf00      	nop
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <DWT_Delay_us+0x48>)
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d8f7      	bhi.n	8002e70 <DWT_Delay_us+0x28>
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	431bde83 	.word	0x431bde83
 8002e90:	e0001000 	.word	0xe0001000

08002e94 <DHT_SetOutput>:

// ─────────── GPIO 모드 전환 ───────────
static void DHT_SetOutput(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef g = {0};
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
    g.Pin = DHT_Pin;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	607b      	str	r3, [r7, #4]
    g.Mode = GPIO_MODE_OUTPUT_PP;  // PP로 충분 (보드에 풀업 존재: KY-015 모듈)
 8002eac:	2301      	movs	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
    g.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT_GPIO_Port, &g);
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4803      	ldr	r0, [pc, #12]	@ (8002ecc <DHT_SetOutput+0x38>)
 8002ebe:	f002 fbb7 	bl	8005630 <HAL_GPIO_Init>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <DHT_SetInput>:

static void DHT_SetInput(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef g = {0};
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
    g.Pin = DHT_Pin;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	607b      	str	r3, [r7, #4]
    g.Mode = GPIO_MODE_INPUT;      // 풀업은 모듈에 있음. 없으면 PULLUP으로
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
    g.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT_GPIO_Port, &g);
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4803      	ldr	r0, [pc, #12]	@ (8002f08 <DHT_SetInput+0x38>)
 8002efa:	f002 fb99 	bl	8005630 <HAL_GPIO_Init>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40020000 	.word	0x40020000

08002f0c <wait_level_with_timeout>:

static int wait_level_with_timeout(GPIO_PinState level, uint32_t timeout_us)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = HAL_RCC_GetHCLKFreq();
 8002f18:	f003 fe42 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8002f1c:	6178      	str	r0, [r7, #20]
    uint32_t cycles_to = (clk/1000000)*timeout_us;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <wait_level_with_timeout+0x5c>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9a      	lsrs	r2, r3, #18
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	613b      	str	r3, [r7, #16]
    uint32_t start = DWT->CYCCNT;
 8002f30:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <wait_level_with_timeout+0x60>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) != level) {
 8002f36:	e009      	b.n	8002f4c <wait_level_with_timeout+0x40>
        if ((DWT->CYCCNT - start) > cycles_to) return -1;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <wait_level_with_timeout+0x60>)
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d202      	bcs.n	8002f4c <wait_level_with_timeout+0x40>
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e009      	b.n	8002f60 <wait_level_with_timeout+0x54>
    while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) != level) {
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4808      	ldr	r0, [pc, #32]	@ (8002f70 <wait_level_with_timeout+0x64>)
 8002f50:	f002 fcf2 	bl	8005938 <HAL_GPIO_ReadPin>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d1ec      	bne.n	8002f38 <wait_level_with_timeout+0x2c>
    }
    return 0;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	e0001000 	.word	0xe0001000
 8002f70:	40020000 	.word	0x40020000

08002f74 <DHT11_Read>:

// 반환 0 = OK, <0 = 에러
int DHT11_Read(uint8_t *temp_c, uint8_t *rh)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
    uint8_t data[5] = {0};
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	711a      	strb	r2, [r3, #4]

    DWT_Delay_Init();
 8002f88:	f7ff ff3e 	bl	8002e08 <DWT_Delay_Init>

    // 1) 스타트 신호 (MCU -> 센서)
    DHT_SetOutput();
 8002f8c:	f7ff ff82 	bl	8002e94 <DHT_SetOutput>
    HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2102      	movs	r1, #2
 8002f94:	4858      	ldr	r0, [pc, #352]	@ (80030f8 <DHT11_Read+0x184>)
 8002f96:	f002 fce7 	bl	8005968 <HAL_GPIO_WritePin>
    HAL_Delay(18);                     // >=18ms
 8002f9a:	2012      	movs	r0, #18
 8002f9c:	f002 f980 	bl	80052a0 <HAL_Delay>
    HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_SET);
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4854      	ldr	r0, [pc, #336]	@ (80030f8 <DHT11_Read+0x184>)
 8002fa6:	f002 fcdf 	bl	8005968 <HAL_GPIO_WritePin>
    DWT_Delay_us(30);                  // 20~40us
 8002faa:	201e      	movs	r0, #30
 8002fac:	f7ff ff4c 	bl	8002e48 <DWT_Delay_us>
    DHT_SetInput();
 8002fb0:	f7ff ff8e 	bl	8002ed0 <DHT_SetInput>

    // 2) 센서 응답: LOW 80us + HIGH 80us
    if (wait_level_with_timeout(GPIO_PIN_RESET, 100) < 0) return -1;
 8002fb4:	2164      	movs	r1, #100	@ 0x64
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7ff ffa8 	bl	8002f0c <wait_level_with_timeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da02      	bge.n	8002fc8 <DHT11_Read+0x54>
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e092      	b.n	80030ee <DHT11_Read+0x17a>
    if (wait_level_with_timeout(GPIO_PIN_SET,   120) < 0) return -2;
 8002fc8:	2178      	movs	r1, #120	@ 0x78
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7ff ff9e 	bl	8002f0c <wait_level_with_timeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da02      	bge.n	8002fdc <DHT11_Read+0x68>
 8002fd6:	f06f 0301 	mvn.w	r3, #1
 8002fda:	e088      	b.n	80030ee <DHT11_Read+0x17a>
    if (wait_level_with_timeout(GPIO_PIN_RESET, 120) < 0) return -3; // 데이터 시작 전 LOW 50us 진입
 8002fdc:	2178      	movs	r1, #120	@ 0x78
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7ff ff94 	bl	8002f0c <wait_level_with_timeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da02      	bge.n	8002ff0 <DHT11_Read+0x7c>
 8002fea:	f06f 0302 	mvn.w	r3, #2
 8002fee:	e07e      	b.n	80030ee <DHT11_Read+0x17a>

    // 3) 40비트 수신
    taskENTER_CRITICAL();
 8002ff0:	f009 fdc2 	bl	800cb78 <vPortEnterCritical>
    for (int i=0; i<40; i++) {
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff8:	e054      	b.n	80030a4 <DHT11_Read+0x130>
        // LOW(≈50us) 종료 대기
        if (wait_level_with_timeout(GPIO_PIN_SET, 150) < 0) return -4;
 8002ffa:	2196      	movs	r1, #150	@ 0x96
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7ff ff85 	bl	8002f0c <wait_level_with_timeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	da02      	bge.n	800300e <DHT11_Read+0x9a>
 8003008:	f06f 0303 	mvn.w	r3, #3
 800300c:	e06f      	b.n	80030ee <DHT11_Read+0x17a>

        // HIGH 길이 측정
        uint32_t start = DWT->CYCCNT;
 800300e:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <DHT11_Read+0x188>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61fb      	str	r3, [r7, #28]
        if (wait_level_with_timeout(GPIO_PIN_RESET, 150) < 0) return -5;
 8003014:	2196      	movs	r1, #150	@ 0x96
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff ff78 	bl	8002f0c <wait_level_with_timeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	da02      	bge.n	8003028 <DHT11_Read+0xb4>
 8003022:	f06f 0304 	mvn.w	r3, #4
 8003026:	e062      	b.n	80030ee <DHT11_Read+0x17a>
        uint32_t width_cycles = DWT->CYCCNT - start;
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <DHT11_Read+0x188>)
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	61bb      	str	r3, [r7, #24]

        // 약 26~28us = 0, 약 70us = 1
        // 임계 50us로 분기
        uint32_t cycles_50us = (HAL_RCC_GetHCLKFreq()/1000000)*45;
 8003032:	f003 fdb5 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8003036:	4603      	mov	r3, r0
 8003038:	4a31      	ldr	r2, [pc, #196]	@ (8003100 <DHT11_Read+0x18c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0c9a      	lsrs	r2, r3, #18
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	011a      	lsls	r2, r3, #4
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	617b      	str	r3, [r7, #20]
        uint8_t bit = (width_cycles > cycles_50us) ? 1 : 0;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf8c      	ite	hi
 8003054:	2301      	movhi	r3, #1
 8003056:	2300      	movls	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	74fb      	strb	r3, [r7, #19]

        data[i/8] <<= 1;
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	da00      	bge.n	8003064 <DHT11_Read+0xf0>
 8003062:	3307      	adds	r3, #7
 8003064:	10db      	asrs	r3, r3, #3
 8003066:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800306a:	443a      	add	r2, r7
 800306c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003070:	0052      	lsls	r2, r2, #1
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	3328      	adds	r3, #40	@ 0x28
 8003076:	443b      	add	r3, r7
 8003078:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[i/8] |= bit;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	da00      	bge.n	8003084 <DHT11_Read+0x110>
 8003082:	3307      	adds	r3, #7
 8003084:	10db      	asrs	r3, r3, #3
 8003086:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800308a:	443a      	add	r2, r7
 800308c:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8003090:	7cfa      	ldrb	r2, [r7, #19]
 8003092:	430a      	orrs	r2, r1
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	3328      	adds	r3, #40	@ 0x28
 8003098:	443b      	add	r3, r7
 800309a:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i=0; i<40; i++) {
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	3301      	adds	r3, #1
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	2b27      	cmp	r3, #39	@ 0x27
 80030a8:	dda7      	ble.n	8002ffa <DHT11_Read+0x86>
    }
    taskEXIT_CRITICAL();
 80030aa:	f009 fd97 	bl	800cbdc <vPortExitCritical>

    // 4) 체크섬
    uint8_t sum = (uint8_t)(data[0] + data[1] + data[2] + data[3]);
 80030ae:	7b3a      	ldrb	r2, [r7, #12]
 80030b0:	7b7b      	ldrb	r3, [r7, #13]
 80030b2:	4413      	add	r3, r2
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	4413      	add	r3, r2
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	4413      	add	r3, r2
 80030c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (sum != data[4]) return -6;
 80030c4:	7c3b      	ldrb	r3, [r7, #16]
 80030c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d002      	beq.n	80030d4 <DHT11_Read+0x160>
 80030ce:	f06f 0305 	mvn.w	r3, #5
 80030d2:	e00c      	b.n	80030ee <DHT11_Read+0x17a>

    // DHT11 포맷: RH int, RH dec, T int, T dec, checksum
    if (rh)   *rh   = data[0];    // 정수부
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <DHT11_Read+0x16c>
 80030da:	7b3a      	ldrb	r2, [r7, #12]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	701a      	strb	r2, [r3, #0]
    if (temp_c) *temp_c = data[2];
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <DHT11_Read+0x178>
 80030e6:	7bba      	ldrb	r2, [r7, #14]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	701a      	strb	r2, [r3, #0]

    return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	@ 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40020000 	.word	0x40020000
 80030fc:	e0001000 	.word	0xe0001000
 8003100:	431bde83 	.word	0x431bde83

08003104 <esp_at_command>:
//==================uart6=========================
static uint8_t data;
cb_data_t cb_data;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	807b      	strh	r3, [r7, #2]
	*length = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8003118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311c:	2100      	movs	r1, #0
 800311e:	68b8      	ldr	r0, [r7, #8]
 8003120:	f00b fdf0 	bl	800ed04 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 8003124:	f640 0204 	movw	r2, #2052	@ 0x804
 8003128:	2100      	movs	r1, #0
 800312a:	482f      	ldr	r0, [pc, #188]	@ (80031e8 <esp_at_command+0xe4>)
 800312c:	f00b fdea 	bl	800ed04 <memset>

    cb_data.length = 0;
 8003130:	4b2d      	ldr	r3, [pc, #180]	@ (80031e8 <esp_at_command+0xe4>)
 8003132:	2200      	movs	r2, #0
 8003134:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7fd f8b1 	bl	80002a0 <strlen>
 800313e:	4603      	mov	r3, r0
 8003140:	b29a      	uxth	r2, r3
 8003142:	2364      	movs	r3, #100	@ 0x64
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	4829      	ldr	r0, [pc, #164]	@ (80031ec <esp_at_command+0xe8>)
 8003148:	f005 fd42 	bl	8008bd0 <HAL_UART_Transmit>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d03f      	beq.n	80031d2 <esp_at_command+0xce>
		return -1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e042      	b.n	80031de <esp_at_command+0xda>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER) return -2;
 8003158:	4b23      	ldr	r3, [pc, #140]	@ (80031e8 <esp_at_command+0xe4>)
 800315a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800315e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003162:	d302      	bcc.n	800316a <esp_at_command+0x66>
 8003164:	f06f 0301 	mvn.w	r3, #1
 8003168:	e039      	b.n	80031de <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL) return -3;
 800316a:	4921      	ldr	r1, [pc, #132]	@ (80031f0 <esp_at_command+0xec>)
 800316c:	481e      	ldr	r0, [pc, #120]	@ (80031e8 <esp_at_command+0xe4>)
 800316e:	f00b fe71 	bl	800ee54 <strstr>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <esp_at_command+0x7a>
 8003178:	f06f 0302 	mvn.w	r3, #2
 800317c:	e02f      	b.n	80031de <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 800317e:	491d      	ldr	r1, [pc, #116]	@ (80031f4 <esp_at_command+0xf0>)
 8003180:	4819      	ldr	r0, [pc, #100]	@ (80031e8 <esp_at_command+0xe4>)
 8003182:	f00b fe67 	bl	800ee54 <strstr>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <esp_at_command+0x94>
		{
			printf("ESP: TCP connection closed.\r\n");
 800318c:	481a      	ldr	r0, [pc, #104]	@ (80031f8 <esp_at_command+0xf4>)
 800318e:	f00b fc29 	bl	800e9e4 <puts>
			//esp_client_conn();   // 자동 재연결
			return -5;
 8003192:	f06f 0304 	mvn.w	r3, #4
 8003196:	e022      	b.n	80031de <esp_at_command+0xda>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 8003198:	4918      	ldr	r1, [pc, #96]	@ (80031fc <esp_at_command+0xf8>)
 800319a:	4813      	ldr	r0, [pc, #76]	@ (80031e8 <esp_at_command+0xe4>)
 800319c:	f00b fe5a 	bl	800ee54 <strstr>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <esp_at_command+0xc0>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <esp_at_command+0xe4>)
 80031a8:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80031ac:	461a      	mov	r2, r3
 80031ae:	490e      	ldr	r1, [pc, #56]	@ (80031e8 <esp_at_command+0xe4>)
 80031b0:	68b8      	ldr	r0, [r7, #8]
 80031b2:	f00c fd9e 	bl	800fcf2 <memcpy>
			*length = cb_data.length;
 80031b6:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <esp_at_command+0xe4>)
 80031b8:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	@ 0x800
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	801a      	strh	r2, [r3, #0]
			return 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e00c      	b.n	80031de <esp_at_command+0xda>
		}

		time_out -= 10;
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	3b0a      	subs	r3, #10
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 80031cc:	200a      	movs	r0, #10
 80031ce:	f002 f867 	bl	80052a0 <HAL_Delay>
	while (time_out > 0)
 80031d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dcbe      	bgt.n	8003158 <esp_at_command+0x54>
	}
	return -4; // Timeout
 80031da:	f06f 0303 	mvn.w	r3, #3
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20001ad0 	.word	0x20001ad0
 80031ec:	20002444 	.word	0x20002444
 80031f0:	08013724 	.word	0x08013724
 80031f4:	0801372c 	.word	0x0801372c
 80031f8:	08013734 	.word	0x08013734
 80031fc:	08013754 	.word	0x08013754

08003200 <esp_read_line>:

// 한 줄씩 ESP 응답 읽기

int esp_read_line(char *buf, int buf_size, int timeout_ms)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	61fb      	str	r3, [r7, #28]
    int elapsed = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]

    memset(buf, 0, buf_size);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	461a      	mov	r2, r3
 8003218:	2100      	movs	r1, #0
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f00b fd72 	bl	800ed04 <memset>

    while (elapsed < timeout_ms)
 8003220:	e03e      	b.n	80032a0 <esp_read_line+0xa0>
    {
        if (cb_data.length > 0)
 8003222:	4b24      	ldr	r3, [pc, #144]	@ (80032b4 <esp_read_line+0xb4>)
 8003224:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8003228:	2b00      	cmp	r3, #0
 800322a:	d031      	beq.n	8003290 <esp_read_line+0x90>
        {
            char c = cb_data.buf[0];
 800322c:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <esp_read_line+0xb4>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	75fb      	strb	r3, [r7, #23]

            // 버퍼 앞으로 이동
            memmove(cb_data.buf, cb_data.buf + 1, cb_data.length - 1);
 8003232:	4921      	ldr	r1, [pc, #132]	@ (80032b8 <esp_read_line+0xb8>)
 8003234:	4b1f      	ldr	r3, [pc, #124]	@ (80032b4 <esp_read_line+0xb4>)
 8003236:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800323a:	3b01      	subs	r3, #1
 800323c:	461a      	mov	r2, r3
 800323e:	481d      	ldr	r0, [pc, #116]	@ (80032b4 <esp_read_line+0xb4>)
 8003240:	f00b fd46 	bl	800ecd0 <memmove>
            cb_data.length--;
 8003244:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <esp_read_line+0xb4>)
 8003246:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <esp_read_line+0xb4>)
 8003250:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

            if (c == '\n' || c == '\r')
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b0a      	cmp	r3, #10
 8003258:	d002      	beq.n	8003260 <esp_read_line+0x60>
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b0d      	cmp	r3, #13
 800325e:	d109      	bne.n	8003274 <esp_read_line+0x74>
            {
                if (i == 0) // 빈 줄 무시
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01b      	beq.n	800329e <esp_read_line+0x9e>
                    continue;
                buf[i] = 0;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
                return i; // 읽은 길이 반환
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	e01a      	b.n	80032aa <esp_read_line+0xaa>
            }

            if (i < buf_size - 1)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3b01      	subs	r3, #1
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	429a      	cmp	r2, r3
 800327c:	da10      	bge.n	80032a0 <esp_read_line+0xa0>
                buf[i++] = c;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	61fa      	str	r2, [r7, #28]
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	7dfa      	ldrb	r2, [r7, #23]
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <esp_read_line+0xa0>
        }
        else
        {
            HAL_Delay(1);
 8003290:	2001      	movs	r0, #1
 8003292:	f002 f805 	bl	80052a0 <HAL_Delay>
            elapsed += 1;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3301      	adds	r3, #1
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e000      	b.n	80032a0 <esp_read_line+0xa0>
                    continue;
 800329e:	bf00      	nop
    while (elapsed < timeout_ms)
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dbbc      	blt.n	8003222 <esp_read_line+0x22>
        }
    }
    return 0; // 타임아웃
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20001ad0 	.word	0x20001ad0
 80032b8:	20001ad1 	.word	0x20001ad1

080032bc <esp_reset>:


static int esp_reset(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80032c6:	1dba      	adds	r2, r7, #6
 80032c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032cc:	4909      	ldr	r1, [pc, #36]	@ (80032f4 <esp_reset+0x38>)
 80032ce:	480a      	ldr	r0, [pc, #40]	@ (80032f8 <esp_reset+0x3c>)
 80032d0:	f7ff ff18 	bl	8003104 <esp_at_command>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <esp_reset+0x24>
    {
    	return -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	e004      	b.n	80032ea <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80032e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032e4:	f001 ffdc 	bl	80052a0 <HAL_Delay>
    return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20001298 	.word	0x20001298
 80032f8:	08013758 	.word	0x08013758

080032fc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 800330a:	f107 020a 	add.w	r2, r7, #10
 800330e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003312:	492d      	ldr	r1, [pc, #180]	@ (80033c8 <request_ip_addr+0xcc>)
 8003314:	482d      	ldr	r0, [pc, #180]	@ (80033cc <request_ip_addr+0xd0>)
 8003316:	f7ff fef5 	bl	8003104 <esp_at_command>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8003320:	482b      	ldr	r0, [pc, #172]	@ (80033d0 <request_ip_addr+0xd4>)
 8003322:	f00b fb5f 	bl	800e9e4 <puts>
 8003326:	e049      	b.n	80033bc <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8003328:	492a      	ldr	r1, [pc, #168]	@ (80033d4 <request_ip_addr+0xd8>)
 800332a:	4827      	ldr	r0, [pc, #156]	@ (80033c8 <request_ip_addr+0xcc>)
 800332c:	f00b fd36 	bl	800ed9c <strtok>
 8003330:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03e      	beq.n	80033b6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	e009      	b.n	8003352 <request_ip_addr+0x56>
                printf("%c", response[i]);
 800333e:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <request_ip_addr+0xcc>)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f00b faee 	bl	800e928 <putchar>
            for(int i = 0 ; i < length ; i++)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	3301      	adds	r3, #1
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	461a      	mov	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4293      	cmp	r3, r2
 800335a:	dbf0      	blt.n	800333e <request_ip_addr+0x42>
        }

        while(line != NULL)
 800335c:	e02b      	b.n	80033b6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800335e:	491e      	ldr	r1, [pc, #120]	@ (80033d8 <request_ip_addr+0xdc>)
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f00b fd77 	bl	800ee54 <strstr>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01f      	beq.n	80033ac <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800336c:	491b      	ldr	r1, [pc, #108]	@ (80033dc <request_ip_addr+0xe0>)
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f00b fd14 	bl	800ed9c <strtok>
                ip = strtok(NULL, "\"");
 8003374:	4919      	ldr	r1, [pc, #100]	@ (80033dc <request_ip_addr+0xe0>)
 8003376:	2000      	movs	r0, #0
 8003378:	f00b fd10 	bl	800ed9c <strtok>
 800337c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800337e:	4918      	ldr	r1, [pc, #96]	@ (80033e0 <request_ip_addr+0xe4>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7fc ff2d 	bl	80001e0 <strcmp>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00f      	beq.n	80033ac <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800338c:	2210      	movs	r2, #16
 800338e:	2100      	movs	r1, #0
 8003390:	4814      	ldr	r0, [pc, #80]	@ (80033e4 <request_ip_addr+0xe8>)
 8003392:	f00b fcb7 	bl	800ed04 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7fc ff82 	bl	80002a0 <strlen>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	68f9      	ldr	r1, [r7, #12]
 80033a2:	4810      	ldr	r0, [pc, #64]	@ (80033e4 <request_ip_addr+0xe8>)
 80033a4:	f00c fca5 	bl	800fcf2 <memcpy>
                    return 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e009      	b.n	80033c0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 80033ac:	4909      	ldr	r1, [pc, #36]	@ (80033d4 <request_ip_addr+0xd8>)
 80033ae:	2000      	movs	r0, #0
 80033b0:	f00b fcf4 	bl	800ed9c <strtok>
 80033b4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1d0      	bne.n	800335e <request_ip_addr+0x62>
        }
    }
    return -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20001298 	.word	0x20001298
 80033cc:	080137a0 	.word	0x080137a0
 80033d0:	080137ac 	.word	0x080137ac
 80033d4:	08013794 	.word	0x08013794
 80033d8:	080137cc 	.word	0x080137cc
 80033dc:	0801379c 	.word	0x0801379c
 80033e0:	08013764 	.word	0x08013764
 80033e4:	20001288 	.word	0x20001288

080033e8 <esp_client_conn>:

int esp_client_conn(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0ce      	sub	sp, #312	@ 0x138
 80033ec:	af02      	add	r7, sp, #8
    char at_cmd[96]; uint16_t length=0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    char line[128]; int n;

    // 1) TCP connect
    sprintf(at_cmd, "AT+CIPSTART=0,\"TCP\",\"%s\",%d\r\n", DST_IP, DST_PORT);
 80033f4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80033f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033fc:	4a58      	ldr	r2, [pc, #352]	@ (8003560 <esp_client_conn+0x178>)
 80033fe:	4959      	ldr	r1, [pc, #356]	@ (8003564 <esp_client_conn+0x17c>)
 8003400:	f00b fb2e 	bl	800ea60 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,8000)!=0) return -1;
 8003404:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 8003408:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 800340c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003410:	4955      	ldr	r1, [pc, #340]	@ (8003568 <esp_client_conn+0x180>)
 8003412:	f7ff fe77 	bl	8003104 <esp_at_command>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <esp_client_conn+0x3a>
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
 8003420:	e098      	b.n	8003554 <esp_client_conn+0x16c>

    // 2) "CONNECT" or "ALREADY" 대기 (최대 5초)
    TickType_t deadline = xTaskGetTickCount() + pdMS_TO_TICKS(5000);
 8003422:	f008 f9e3 	bl	800b7ec <xTaskGetTickCount>
 8003426:	4603      	mov	r3, r0
 8003428:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800342c:	3308      	adds	r3, #8
 800342e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int connected = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    while (xTaskGetTickCount() < deadline) {
 8003438:	e03a      	b.n	80034b0 <esp_client_conn+0xc8>
        n = esp_read_line(line, sizeof(line), 200);    // cb_data에서 한 줄씩 뽑기
 800343a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800343e:	22c8      	movs	r2, #200	@ 0xc8
 8003440:	2180      	movs	r1, #128	@ 0x80
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fedc 	bl	8003200 <esp_read_line>
 8003448:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        if (n > 0) {
 800344c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003450:	2b00      	cmp	r3, #0
 8003452:	dd2a      	ble.n	80034aa <esp_client_conn+0xc2>
            if (strstr(line, "CONNECT") || strstr(line, "ALREADY")) { connected = 1; break; }
 8003454:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003458:	4944      	ldr	r1, [pc, #272]	@ (800356c <esp_client_conn+0x184>)
 800345a:	4618      	mov	r0, r3
 800345c:	f00b fcfa 	bl	800ee54 <strstr>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <esp_client_conn+0x90>
 8003466:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800346a:	4941      	ldr	r1, [pc, #260]	@ (8003570 <esp_client_conn+0x188>)
 800346c:	4618      	mov	r0, r3
 800346e:	f00b fcf1 	bl	800ee54 <strstr>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <esp_client_conn+0x98>
 8003478:	2301      	movs	r3, #1
 800347a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800347e:	e01e      	b.n	80034be <esp_client_conn+0xd6>
            if (strstr(line, "ERROR") || strstr(line, "FAIL")) return -2; // 즉시 실패
 8003480:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003484:	493b      	ldr	r1, [pc, #236]	@ (8003574 <esp_client_conn+0x18c>)
 8003486:	4618      	mov	r0, r3
 8003488:	f00b fce4 	bl	800ee54 <strstr>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <esp_client_conn+0xbc>
 8003492:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003496:	4938      	ldr	r1, [pc, #224]	@ (8003578 <esp_client_conn+0x190>)
 8003498:	4618      	mov	r0, r3
 800349a:	f00b fcdb 	bl	800ee54 <strstr>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <esp_client_conn+0xc8>
 80034a4:	f06f 0301 	mvn.w	r3, #1
 80034a8:	e054      	b.n	8003554 <esp_client_conn+0x16c>
        } else {
            // 짧게 쉬고 다시 시도
            vTaskDelay(pdMS_TO_TICKS(50));
 80034aa:	2032      	movs	r0, #50	@ 0x32
 80034ac:	f008 f854 	bl	800b558 <vTaskDelay>
    while (xTaskGetTickCount() < deadline) {
 80034b0:	f008 f99c 	bl	800b7ec <xTaskGetTickCount>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d8bd      	bhi.n	800343a <esp_client_conn+0x52>
        }
    }
    if (!connected) {
 80034be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d114      	bne.n	80034f0 <esp_client_conn+0x108>
        // 최후 수단: 상태 폴링으로 연결 확인
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n",(uint8_t*)response,&length,700)!=0 ||
 80034c6:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 80034ca:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80034ce:	4926      	ldr	r1, [pc, #152]	@ (8003568 <esp_client_conn+0x180>)
 80034d0:	482a      	ldr	r0, [pc, #168]	@ (800357c <esp_client_conn+0x194>)
 80034d2:	f7ff fe17 	bl	8003104 <esp_at_command>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <esp_client_conn+0x102>
            !strstr((char*)response,"STATUS:3")) {
 80034dc:	4928      	ldr	r1, [pc, #160]	@ (8003580 <esp_client_conn+0x198>)
 80034de:	4822      	ldr	r0, [pc, #136]	@ (8003568 <esp_client_conn+0x180>)
 80034e0:	f00b fcb8 	bl	800ee54 <strstr>
 80034e4:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n",(uint8_t*)response,&length,700)!=0 ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <esp_client_conn+0x108>
            return -3; // 연결 안됨
 80034ea:	f06f 0302 	mvn.w	r3, #2
 80034ee:	e031      	b.n	8003554 <esp_client_conn+0x16c>
        }
    }

    // 3) 로그인 payload 전송
    char payload[64];
    snprintf(payload,sizeof(payload),"[%s:%s]", LOGID, PASSWD);
 80034f0:	4638      	mov	r0, r7
 80034f2:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <esp_client_conn+0x19c>)
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <esp_client_conn+0x1a0>)
 80034f8:	4a24      	ldr	r2, [pc, #144]	@ (800358c <esp_client_conn+0x1a4>)
 80034fa:	2140      	movs	r1, #64	@ 0x40
 80034fc:	f00b fa7a 	bl	800e9f4 <sniprintf>

    sprintf(at_cmd,"AT+CIPSEND=0,%d\r\n",(int)strlen(payload));
 8003500:	463b      	mov	r3, r7
 8003502:	4618      	mov	r0, r3
 8003504:	f7fc fecc 	bl	80002a0 <strlen>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003510:	491f      	ldr	r1, [pc, #124]	@ (8003590 <esp_client_conn+0x1a8>)
 8003512:	4618      	mov	r0, r3
 8003514:	f00b faa4 	bl	800ea60 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,3000)!=0) return -4;
 8003518:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 800351c:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8003520:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003524:	4910      	ldr	r1, [pc, #64]	@ (8003568 <esp_client_conn+0x180>)
 8003526:	f7ff fded 	bl	8003104 <esp_at_command>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <esp_client_conn+0x14e>
 8003530:	f06f 0303 	mvn.w	r3, #3
 8003534:	e00e      	b.n	8003554 <esp_client_conn+0x16c>
    if (esp_at_command((uint8_t*)payload,(uint8_t*)response,&length,3000)!=0) return -5;
 8003536:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 800353a:	4638      	mov	r0, r7
 800353c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003540:	4909      	ldr	r1, [pc, #36]	@ (8003568 <esp_client_conn+0x180>)
 8003542:	f7ff fddf 	bl	8003104 <esp_at_command>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <esp_client_conn+0x16a>
 800354c:	f06f 0304 	mvn.w	r3, #4
 8003550:	e000      	b.n	8003554 <esp_client_conn+0x16c>

    return 0;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	080137d8 	.word	0x080137d8
 8003564:	080137e4 	.word	0x080137e4
 8003568:	20001298 	.word	0x20001298
 800356c:	08013804 	.word	0x08013804
 8003570:	0801380c 	.word	0x0801380c
 8003574:	08013724 	.word	0x08013724
 8003578:	08013814 	.word	0x08013814
 800357c:	0801381c 	.word	0x0801381c
 8003580:	0801382c 	.word	0x0801382c
 8003584:	08013848 	.word	0x08013848
 8003588:	08013838 	.word	0x08013838
 800358c:	08013840 	.word	0x08013840
 8003590:	08013850 	.word	0x08013850

08003594 <esp_get_status>:


int esp_get_status(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
    // 0 : Link0 connected
    // -1: Link0 not connected
    uint16_t length = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	807b      	strh	r3, [r7, #2]
    int ret = -1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	607b      	str	r3, [r7, #4]

    if (osMutexAcquire(ESP_MutexHandle, 1000) == osOK) {
 80035a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003618 <esp_get_status+0x84>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80035ac:	4618      	mov	r0, r3
 80035ae:	f006 fd27 	bl	800a000 <osMutexAcquire>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d129      	bne.n	800360c <esp_get_status+0x78>
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n", (uint8_t*)response, &length, 1500) == 0) {
 80035b8:	1cba      	adds	r2, r7, #2
 80035ba:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80035be:	4917      	ldr	r1, [pc, #92]	@ (800361c <esp_get_status+0x88>)
 80035c0:	4817      	ldr	r0, [pc, #92]	@ (8003620 <esp_get_status+0x8c>)
 80035c2:	f7ff fd9f 	bl	8003104 <esp_at_command>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11a      	bne.n	8003602 <esp_get_status+0x6e>
            // MUX=1 응답에서 "+CIPSTATUS:0,..." 라인이 있으면 Link0가 실제 연결 상태
            if (strstr((char*)response, "+CIPSTATUS:0") &&
 80035cc:	4915      	ldr	r1, [pc, #84]	@ (8003624 <esp_get_status+0x90>)
 80035ce:	4813      	ldr	r0, [pc, #76]	@ (800361c <esp_get_status+0x88>)
 80035d0:	f00b fc40 	bl	800ee54 <strstr>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <esp_get_status+0x68>
                (strstr((char*)response, "\"TCP\"") || strstr((char*)response, "\"UDP\""))) {
 80035da:	4913      	ldr	r1, [pc, #76]	@ (8003628 <esp_get_status+0x94>)
 80035dc:	480f      	ldr	r0, [pc, #60]	@ (800361c <esp_get_status+0x88>)
 80035de:	f00b fc39 	bl	800ee54 <strstr>
 80035e2:	4603      	mov	r3, r0
            if (strstr((char*)response, "+CIPSTATUS:0") &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <esp_get_status+0x62>
                (strstr((char*)response, "\"TCP\"") || strstr((char*)response, "\"UDP\""))) {
 80035e8:	4910      	ldr	r1, [pc, #64]	@ (800362c <esp_get_status+0x98>)
 80035ea:	480c      	ldr	r0, [pc, #48]	@ (800361c <esp_get_status+0x88>)
 80035ec:	f00b fc32 	bl	800ee54 <strstr>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <esp_get_status+0x68>
                ret = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	e002      	b.n	8003602 <esp_get_status+0x6e>
            } else {
                ret = -1;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	607b      	str	r3, [r7, #4]
            }
        }
        osMutexRelease(ESP_MutexHandle);
 8003602:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <esp_get_status+0x84>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f006 fd45 	bl	800a096 <osMutexRelease>
    }
    return ret;
 800360c:	687b      	ldr	r3, [r7, #4]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200024b0 	.word	0x200024b0
 800361c:	20001298 	.word	0x20001298
 8003620:	0801381c 	.word	0x0801381c
 8003624:	08013864 	.word	0x08013864
 8003628:	08013874 	.word	0x08013874
 800362c:	0801387c 	.word	0x0801387c

08003630 <drv_esp_init>:

 int drv_esp_init(void)
 {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 8003636:	2210      	movs	r2, #16
 8003638:	2100      	movs	r1, #0
 800363a:	4817      	ldr	r0, [pc, #92]	@ (8003698 <drv_esp_init+0x68>)
 800363c:	f00b fb62 	bl	800ed04 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 8003640:	f640 0204 	movw	r2, #2052	@ 0x804
 8003644:	2100      	movs	r1, #0
 8003646:	4815      	ldr	r0, [pc, #84]	@ (800369c <drv_esp_init+0x6c>)
 8003648:	f00b fb5c 	bl	800ed04 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 800364c:	2201      	movs	r2, #1
 800364e:	4914      	ldr	r1, [pc, #80]	@ (80036a0 <drv_esp_init+0x70>)
 8003650:	4814      	ldr	r0, [pc, #80]	@ (80036a4 <drv_esp_init+0x74>)
 8003652:	f005 fb48 	bl	8008ce6 <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	e011      	b.n	8003680 <drv_esp_init+0x50>
         uint16_t len=0;
 800365c:	2300      	movs	r3, #0
 800365e:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8003660:	1cba      	adds	r2, r7, #2
 8003662:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003666:	4910      	ldr	r1, [pc, #64]	@ (80036a8 <drv_esp_init+0x78>)
 8003668:	4810      	ldr	r0, [pc, #64]	@ (80036ac <drv_esp_init+0x7c>)
 800366a:	f7ff fd4b 	bl	8003104 <esp_at_command>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <drv_esp_init+0x58>
         HAL_Delay(100);
 8003674:	2064      	movs	r0, #100	@ 0x64
 8003676:	f001 fe13 	bl	80052a0 <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3301      	adds	r3, #1
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	ddea      	ble.n	800365c <drv_esp_init+0x2c>
 8003686:	e000      	b.n	800368a <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8003688:	bf00      	nop
     }
     return esp_reset();
 800368a:	f7ff fe17 	bl	80032bc <esp_reset>
 800368e:	4603      	mov	r3, r0
 }
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20001288 	.word	0x20001288
 800369c:	20001ad0 	.word	0x20001ad0
 80036a0:	20001acf 	.word	0x20001acf
 80036a4:	20002444 	.word	0x20002444
 80036a8:	20001298 	.word	0x20001298
 80036ac:	08013884 	.word	0x08013884

080036b0 <reset_func>:

void reset_func()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 80036b4:	4808      	ldr	r0, [pc, #32]	@ (80036d8 <reset_func+0x28>)
 80036b6:	f00b f925 	bl	800e904 <iprintf>
	if(esp_reset() == 0)
 80036ba:	f7ff fdff 	bl	80032bc <esp_reset>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <reset_func+0x1c>
			printf("OK\r\n");
 80036c4:	4805      	ldr	r0, [pc, #20]	@ (80036dc <reset_func+0x2c>)
 80036c6:	f00b f98d 	bl	800e9e4 <puts>
	else
			printf("fail\r\n");
}
 80036ca:	e002      	b.n	80036d2 <reset_func+0x22>
			printf("fail\r\n");
 80036cc:	4804      	ldr	r0, [pc, #16]	@ (80036e0 <reset_func+0x30>)
 80036ce:	f00b f989 	bl	800e9e4 <puts>
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	0801388c 	.word	0x0801388c
 80036dc:	0801389c 	.word	0x0801389c
 80036e0:	080138a0 	.word	0x080138a0

080036e4 <version_func>:

void version_func()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 80036ee:	4813      	ldr	r0, [pc, #76]	@ (800373c <version_func+0x58>)
 80036f0:	f00b f978 	bl	800e9e4 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80036f4:	1cba      	adds	r2, r7, #2
 80036f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036fa:	4911      	ldr	r1, [pc, #68]	@ (8003740 <version_func+0x5c>)
 80036fc:	4811      	ldr	r0, [pc, #68]	@ (8003744 <version_func+0x60>)
 80036fe:	f7ff fd01 	bl	8003104 <esp_at_command>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <version_func+0x2c>
      printf("ap scan command fail\r\n");
 8003708:	480f      	ldr	r0, [pc, #60]	@ (8003748 <version_func+0x64>)
 800370a:	f00b f96b 	bl	800e9e4 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 800370e:	e011      	b.n	8003734 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 8003710:	2300      	movs	r3, #0
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	e009      	b.n	800372a <version_func+0x46>
          printf("%c", response[i]);
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <version_func+0x5c>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f00b f902 	bl	800e928 <putchar>
      for(int i = 0 ; i < length ; i++)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	887b      	ldrh	r3, [r7, #2]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4293      	cmp	r3, r2
 8003732:	dbf0      	blt.n	8003716 <version_func+0x32>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	080138a8 	.word	0x080138a8
 8003740:	20001298 	.word	0x20001298
 8003744:	080138c0 	.word	0x080138c0
 8003748:	080138cc 	.word	0x080138cc

0800374c <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b096      	sub	sp, #88	@ 0x58
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint16_t length=0; char at_cmd[MAX_ESP_COMMAND_LEN]={0};
 8003756:	2300      	movs	r3, #0
 8003758:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800375c:	f107 0308 	add.w	r3, r7, #8
 8003760:	2240      	movs	r2, #64	@ 0x40
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f00b facd 	bl	800ed04 <memset>
  if(!ssid || !passwd){ printf("invalid command : ap_conn <ssid> <passwd>\r\n"); return; }
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <ap_conn_func+0x2a>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <ap_conn_func+0x32>
 8003776:	4838      	ldr	r0, [pc, #224]	@ (8003858 <ap_conn_func+0x10c>)
 8003778:	f00b f934 	bl	800e9e4 <puts>
 800377c:	e069      	b.n	8003852 <ap_conn_func+0x106>

  esp_at_command((uint8_t*)"AT+CWMODE=1\r\n",(uint8_t*)response,&length,1500);
 800377e:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8003782:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003786:	4935      	ldr	r1, [pc, #212]	@ (800385c <ap_conn_func+0x110>)
 8003788:	4835      	ldr	r0, [pc, #212]	@ (8003860 <ap_conn_func+0x114>)
 800378a:	f7ff fcbb 	bl	8003104 <esp_at_command>
  esp_at_command((uint8_t*)"AT+CWQAP\r\n",(uint8_t*)response,&length,1500); HAL_Delay(200);
 800378e:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8003792:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003796:	4931      	ldr	r1, [pc, #196]	@ (800385c <ap_conn_func+0x110>)
 8003798:	4832      	ldr	r0, [pc, #200]	@ (8003864 <ap_conn_func+0x118>)
 800379a:	f7ff fcb3 	bl	8003104 <esp_at_command>
 800379e:	20c8      	movs	r0, #200	@ 0xc8
 80037a0:	f001 fd7e 	bl	80052a0 <HAL_Delay>

  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, passwd);
 80037a4:	f107 0008 	add.w	r0, r7, #8
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	492e      	ldr	r1, [pc, #184]	@ (8003868 <ap_conn_func+0x11c>)
 80037ae:	f00b f957 	bl	800ea60 <siprintf>
  int rc = esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,30000);
 80037b2:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80037b6:	f107 0008 	add.w	r0, r7, #8
 80037ba:	f247 5330 	movw	r3, #30000	@ 0x7530
 80037be:	4927      	ldr	r1, [pc, #156]	@ (800385c <ap_conn_func+0x110>)
 80037c0:	f7ff fca0 	bl	8003104 <esp_at_command>
 80037c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (rc!=0) {
 80037c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03f      	beq.n	800384c <ap_conn_func+0x100>
    int ok=0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	657b      	str	r3, [r7, #84]	@ 0x54
    for (int i=0;i<10 && !ok;i++){
 80037d0:	2300      	movs	r3, #0
 80037d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037d4:	e02d      	b.n	8003832 <ap_conn_func+0xe6>
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80037d6:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80037da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037de:	491f      	ldr	r1, [pc, #124]	@ (800385c <ap_conn_func+0x110>)
 80037e0:	4822      	ldr	r0, [pc, #136]	@ (800386c <ap_conn_func+0x120>)
 80037e2:	f7ff fc8f 	bl	8003104 <esp_at_command>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11b      	bne.n	8003824 <ap_conn_func+0xd8>
          strstr(response, "+CWJAP:")) {
 80037ec:	4920      	ldr	r1, [pc, #128]	@ (8003870 <ap_conn_func+0x124>)
 80037ee:	481b      	ldr	r0, [pc, #108]	@ (800385c <ap_conn_func+0x110>)
 80037f0:	f00b fb30 	bl	800ee54 <strstr>
 80037f4:	4603      	mov	r3, r0
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <ap_conn_func+0xd8>
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80037fa:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80037fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003802:	4916      	ldr	r1, [pc, #88]	@ (800385c <ap_conn_func+0x110>)
 8003804:	481b      	ldr	r0, [pc, #108]	@ (8003874 <ap_conn_func+0x128>)
 8003806:	f7ff fc7d 	bl	8003104 <esp_at_command>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 8003810:	4919      	ldr	r1, [pc, #100]	@ (8003878 <ap_conn_func+0x12c>)
 8003812:	4812      	ldr	r0, [pc, #72]	@ (800385c <ap_conn_func+0x110>)
 8003814:	f00b fb1e 	bl	800ee54 <strstr>
 8003818:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 800381e:	2301      	movs	r3, #1
 8003820:	657b      	str	r3, [r7, #84]	@ 0x54
 8003822:	e00c      	b.n	800383e <ap_conn_func+0xf2>
      }
      HAL_Delay(1000);
 8003824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003828:	f001 fd3a 	bl	80052a0 <HAL_Delay>
    for (int i=0;i<10 && !ok;i++){
 800382c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800382e:	3301      	adds	r3, #1
 8003830:	653b      	str	r3, [r7, #80]	@ 0x50
 8003832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003834:	2b09      	cmp	r3, #9
 8003836:	dc02      	bgt.n	800383e <ap_conn_func+0xf2>
 8003838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0cb      	beq.n	80037d6 <ap_conn_func+0x8a>
    }
    if (!ok){ printf("ap join failed (no SSID/IP)\r\n"); return; }
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <ap_conn_func+0x100>
 8003844:	480d      	ldr	r0, [pc, #52]	@ (800387c <ap_conn_func+0x130>)
 8003846:	f00b f8cd 	bl	800e9e4 <puts>
 800384a:	e002      	b.n	8003852 <ap_conn_func+0x106>
  }
  printf("WIFI GOT IP\r\n");
 800384c:	480c      	ldr	r0, [pc, #48]	@ (8003880 <ap_conn_func+0x134>)
 800384e:	f00b f8c9 	bl	800e9e4 <puts>
}
 8003852:	3758      	adds	r7, #88	@ 0x58
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	080138e4 	.word	0x080138e4
 800385c:	20001298 	.word	0x20001298
 8003860:	08013910 	.word	0x08013910
 8003864:	08013920 	.word	0x08013920
 8003868:	0801392c 	.word	0x0801392c
 800386c:	08013944 	.word	0x08013944
 8003870:	08013950 	.word	0x08013950
 8003874:	0801376c 	.word	0x0801376c
 8003878:	08013958 	.word	0x08013958
 800387c:	08013968 	.word	0x08013968
 8003880:	08013988 	.word	0x08013988

08003884 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a23      	ldr	r2, [pc, #140]	@ (8003920 <HAL_UART_RxCpltCallback+0x9c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d117      	bne.n	80038c6 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8003896:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_UART_RxCpltCallback+0xa0>)
 8003898:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800389c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a0:	d20c      	bcs.n	80038bc <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_UART_RxCpltCallback+0xa0>)
 80038a4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	b291      	uxth	r1, r2
 80038ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <HAL_UART_RxCpltCallback+0xa0>)
 80038ae:	f8a2 1800 	strh.w	r1, [r2, #2048]	@ 0x800
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003928 <HAL_UART_RxCpltCallback+0xa4>)
 80038b6:	7819      	ldrb	r1, [r3, #0]
 80038b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <HAL_UART_RxCpltCallback+0xa0>)
 80038ba:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 80038bc:	2201      	movs	r2, #1
 80038be:	491a      	ldr	r1, [pc, #104]	@ (8003928 <HAL_UART_RxCpltCallback+0xa4>)
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f005 fa10 	bl	8008ce6 <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	@ (800392c <HAL_UART_RxCpltCallback+0xa8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d122      	bne.n	8003916 <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 80038d0:	4b17      	ldr	r3, [pc, #92]	@ (8003930 <HAL_UART_RxCpltCallback+0xac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <HAL_UART_RxCpltCallback+0xb0>)
 80038d6:	7811      	ldrb	r1, [r2, #0]
 80038d8:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <HAL_UART_RxCpltCallback+0xb4>)
 80038da:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 80038dc:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_UART_RxCpltCallback+0xac>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a15      	ldr	r2, [pc, #84]	@ (8003938 <HAL_UART_RxCpltCallback+0xb4>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b0d      	cmp	r3, #13
 80038e8:	d10b      	bne.n	8003902 <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_UART_RxCpltCallback+0xac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <HAL_UART_RxCpltCallback+0xb4>)
 80038f0:	2100      	movs	r1, #0
 80038f2:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_UART_RxCpltCallback+0xb8>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
            i = 0;
 80038fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <HAL_UART_RxCpltCallback+0xac>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e004      	b.n	800390c <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_UART_RxCpltCallback+0xac>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	4a09      	ldr	r2, [pc, #36]	@ (8003930 <HAL_UART_RxCpltCallback+0xac>)
 800390a:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 800390c:	2201      	movs	r2, #1
 800390e:	4909      	ldr	r1, [pc, #36]	@ (8003934 <HAL_UART_RxCpltCallback+0xb0>)
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f005 f9e8 	bl	8008ce6 <HAL_UART_Receive_IT>
    }
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40011400 	.word	0x40011400
 8003924:	20001ad0 	.word	0x20001ad0
 8003928:	20001acf 	.word	0x20001acf
 800392c:	40004400 	.word	0x40004400
 8003930:	200022d4 	.word	0x200022d4
 8003934:	20001ace 	.word	0x20001ace
 8003938:	20001a9c 	.word	0x20001a9c
 800393c:	20001a98 	.word	0x20001a98

08003940 <AiotClient_Init>:



void AiotClient_Init()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
	reset_func();
 8003946:	f7ff feb3 	bl	80036b0 <reset_func>
	version_func();
 800394a:	f7ff fecb 	bl	80036e4 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 800394e:	490a      	ldr	r1, [pc, #40]	@ (8003978 <AiotClient_Init+0x38>)
 8003950:	480a      	ldr	r0, [pc, #40]	@ (800397c <AiotClient_Init+0x3c>)
 8003952:	f7ff fefb 	bl	800374c <ap_conn_func>
	request_ip_addr(1);
 8003956:	2001      	movs	r0, #1
 8003958:	f7ff fcd0 	bl	80032fc <request_ip_addr>

    // ★ 멀티커넥션 ON
	uint16_t length = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t*)"AT+CIPMUX=1\r\n", (uint8_t*)response, &length, 1000);
 8003960:	1dba      	adds	r2, r7, #6
 8003962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003966:	4906      	ldr	r1, [pc, #24]	@ (8003980 <AiotClient_Init+0x40>)
 8003968:	4806      	ldr	r0, [pc, #24]	@ (8003984 <AiotClient_Init+0x44>)
 800396a:	f7ff fbcb 	bl	8003104 <esp_at_command>

	//esp_client_conn();
	//esp_get_status();
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	080139d0 	.word	0x080139d0
 800397c:	080139dc 	.word	0x080139dc
 8003980:	20001298 	.word	0x20001298
 8003984:	080139e4 	.word	0x080139e4

08003988 <esp_send_data>:


void esp_send_data(char *data)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b094      	sub	sp, #80	@ 0x50
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	2240      	movs	r2, #64	@ 0x40
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f00b f9b3 	bl	800ed04 <memset>
    uint16_t length = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	81fb      	strh	r3, [r7, #14]

    sprintf(at_cmd,"AT+CIPSEND=0,%d\r\n",(int)strlen(data));
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fc fc7c 	bl	80002a0 <strlen>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	490d      	ldr	r1, [pc, #52]	@ (80039e8 <esp_send_data+0x60>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f00b f854 	bl	800ea60 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response, &length, 1000) == 0) {
 80039b8:	f107 020e 	add.w	r2, r7, #14
 80039bc:	f107 0010 	add.w	r0, r7, #16
 80039c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039c4:	4909      	ldr	r1, [pc, #36]	@ (80039ec <esp_send_data+0x64>)
 80039c6:	f7ff fb9d 	bl	8003104 <esp_at_command>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <esp_send_data+0x58>
        esp_at_command((uint8_t*)data,(uint8_t*)response,&length,1000);
 80039d0:	f107 020e 	add.w	r2, r7, #14
 80039d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039d8:	4904      	ldr	r1, [pc, #16]	@ (80039ec <esp_send_data+0x64>)
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fb92 	bl	8003104 <esp_at_command>
    }
}
 80039e0:	bf00      	nop
 80039e2:	3750      	adds	r7, #80	@ 0x50
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	08013850 	.word	0x08013850
 80039ec:	20001298 	.word	0x20001298

080039f0 <drv_uart_init>:


//==================uart2=========================
int drv_uart_init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80039f4:	2201      	movs	r2, #1
 80039f6:	4903      	ldr	r1, [pc, #12]	@ (8003a04 <drv_uart_init+0x14>)
 80039f8:	4803      	ldr	r0, [pc, #12]	@ (8003a08 <drv_uart_init+0x18>)
 80039fa:	f005 f974 	bl	8008ce6 <HAL_UART_Receive_IT>
    return 0;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20001ace 	.word	0x20001ace
 8003a08:	200023fc 	.word	0x200023fc

08003a0c <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8003a14:	1d39      	adds	r1, r7, #4
 8003a16:	230a      	movs	r3, #10
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4807      	ldr	r0, [pc, #28]	@ (8003a38 <__io_putchar+0x2c>)
 8003a1c:	f005 f8d8 	bl	8008bd0 <HAL_UART_Transmit>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <__io_putchar+0x1e>
        return ch;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	e001      	b.n	8003a2e <__io_putchar+0x22>
    return -1;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200023fc 	.word	0x200023fc

08003a3c <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b09a      	sub	sp, #104	@ 0x68
 8003a40:	af06      	add	r7, sp, #24
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 8003a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a4a:	2224      	movs	r2, #36	@ 0x24
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00b f958 	bl	800ed04 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 8003a54:	4969      	ldr	r1, [pc, #420]	@ (8003bfc <parse_cipsntptime_line+0x1c0>)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f00b f9fc 	bl	800ee54 <strstr>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <parse_cipsntptime_line+0x2c>
        return -1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e0c5      	b.n	8003bf4 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8003a68:	f107 0120 	add.w	r1, r7, #32
 8003a6c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003a70:	f107 0318 	add.w	r3, r7, #24
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	f107 0310 	add.w	r3, r7, #16
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	495b      	ldr	r1, [pc, #364]	@ (8003c00 <parse_cipsntptime_line+0x1c4>)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f00b f806 	bl	800eaa4 <siscanf>
 8003a98:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9c:	2b07      	cmp	r3, #7
 8003a9e:	f040 80a7 	bne.w	8003bf0 <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 8003aa2:	f107 0320 	add.w	r3, r7, #32
 8003aa6:	4957      	ldr	r1, [pc, #348]	@ (8003c04 <parse_cipsntptime_line+0x1c8>)
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fc fb99 	bl	80001e0 <strcmp>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <parse_cipsntptime_line+0x7e>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ab8:	e082      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 8003aba:	f107 0320 	add.w	r3, r7, #32
 8003abe:	4952      	ldr	r1, [pc, #328]	@ (8003c08 <parse_cipsntptime_line+0x1cc>)
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fb8d 	bl	80001e0 <strcmp>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <parse_cipsntptime_line+0x96>
 8003acc:	2301      	movs	r3, #1
 8003ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ad0:	e076      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 8003ad2:	f107 0320 	add.w	r3, r7, #32
 8003ad6:	494d      	ldr	r1, [pc, #308]	@ (8003c0c <parse_cipsntptime_line+0x1d0>)
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fb81 	bl	80001e0 <strcmp>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <parse_cipsntptime_line+0xae>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae8:	e06a      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 8003aea:	f107 0320 	add.w	r3, r7, #32
 8003aee:	4948      	ldr	r1, [pc, #288]	@ (8003c10 <parse_cipsntptime_line+0x1d4>)
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fb75 	bl	80001e0 <strcmp>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <parse_cipsntptime_line+0xc6>
 8003afc:	2303      	movs	r3, #3
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b00:	e05e      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 8003b02:	f107 0320 	add.w	r3, r7, #32
 8003b06:	4943      	ldr	r1, [pc, #268]	@ (8003c14 <parse_cipsntptime_line+0x1d8>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fc fb69 	bl	80001e0 <strcmp>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <parse_cipsntptime_line+0xde>
 8003b14:	2304      	movs	r3, #4
 8003b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b18:	e052      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 8003b1a:	f107 0320 	add.w	r3, r7, #32
 8003b1e:	493e      	ldr	r1, [pc, #248]	@ (8003c18 <parse_cipsntptime_line+0x1dc>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fc fb5d 	bl	80001e0 <strcmp>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <parse_cipsntptime_line+0xf6>
 8003b2c:	2305      	movs	r3, #5
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b30:	e046      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 8003b32:	f107 0320 	add.w	r3, r7, #32
 8003b36:	4939      	ldr	r1, [pc, #228]	@ (8003c1c <parse_cipsntptime_line+0x1e0>)
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fb51 	bl	80001e0 <strcmp>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <parse_cipsntptime_line+0x10e>
 8003b44:	2306      	movs	r3, #6
 8003b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b48:	e03a      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 8003b4a:	f107 0320 	add.w	r3, r7, #32
 8003b4e:	4934      	ldr	r1, [pc, #208]	@ (8003c20 <parse_cipsntptime_line+0x1e4>)
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fb45 	bl	80001e0 <strcmp>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <parse_cipsntptime_line+0x126>
 8003b5c:	2307      	movs	r3, #7
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b60:	e02e      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 8003b62:	f107 0320 	add.w	r3, r7, #32
 8003b66:	492f      	ldr	r1, [pc, #188]	@ (8003c24 <parse_cipsntptime_line+0x1e8>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fc fb39 	bl	80001e0 <strcmp>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <parse_cipsntptime_line+0x13e>
 8003b74:	2308      	movs	r3, #8
 8003b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b78:	e022      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 8003b7a:	f107 0320 	add.w	r3, r7, #32
 8003b7e:	492a      	ldr	r1, [pc, #168]	@ (8003c28 <parse_cipsntptime_line+0x1ec>)
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fb2d 	bl	80001e0 <strcmp>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <parse_cipsntptime_line+0x156>
 8003b8c:	2309      	movs	r3, #9
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b90:	e016      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 8003b92:	f107 0320 	add.w	r3, r7, #32
 8003b96:	4925      	ldr	r1, [pc, #148]	@ (8003c2c <parse_cipsntptime_line+0x1f0>)
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fb21 	bl	80001e0 <strcmp>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <parse_cipsntptime_line+0x16e>
 8003ba4:	230a      	movs	r3, #10
 8003ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba8:	e00a      	b.n	8003bc0 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 8003baa:	f107 0320 	add.w	r3, r7, #32
 8003bae:	4920      	ldr	r1, [pc, #128]	@ (8003c30 <parse_cipsntptime_line+0x1f4>)
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fc fb15 	bl	80001e0 <strcmp>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <parse_cipsntptime_line+0x184>
 8003bbc:	230b      	movs	r3, #11
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 8003bd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00b fb39 	bl	800f254 <mktime>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e001      	b.n	8003bf4 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3750      	adds	r7, #80	@ 0x50
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	080139f4 	.word	0x080139f4
 8003c00:	08013a04 	.word	0x08013a04
 8003c04:	08013a28 	.word	0x08013a28
 8003c08:	08013a2c 	.word	0x08013a2c
 8003c0c:	08013a30 	.word	0x08013a30
 8003c10:	08013a34 	.word	0x08013a34
 8003c14:	08013a38 	.word	0x08013a38
 8003c18:	08013a3c 	.word	0x08013a3c
 8003c1c:	08013a40 	.word	0x08013a40
 8003c20:	08013a44 	.word	0x08013a44
 8003c24:	08013a48 	.word	0x08013a48
 8003c28:	08013a4c 	.word	0x08013a4c
 8003c2c:	08013a50 	.word	0x08013a50
 8003c30:	08013a54 	.word	0x08013a54

08003c34 <esp_ntp_config>:

int esp_ntp_config(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b0a0      	sub	sp, #128	@ 0x80
 8003c38:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c7c <esp_ntp_config+0x48>)
 8003c3e:	4910      	ldr	r1, [pc, #64]	@ (8003c80 <esp_ntp_config+0x4c>)
 8003c40:	4618      	mov	r0, r3
 8003c42:	f00a ff0d 	bl	800ea60 <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 8003c46:	463b      	mov	r3, r7
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fb29 	bl	80002a0 <strlen>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	4639      	mov	r1, r7
 8003c54:	2364      	movs	r3, #100	@ 0x64
 8003c56:	480b      	ldr	r0, [pc, #44]	@ (8003c84 <esp_ntp_config+0x50>)
 8003c58:	f004 ffba 	bl	8008bd0 <HAL_UART_Transmit>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <esp_ntp_config+0x34>
        return -1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	e004      	b.n	8003c72 <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 8003c68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003c6c:	f007 fc74 	bl	800b558 <vTaskDelay>
    return 0;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3780      	adds	r7, #128	@ 0x80
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08013a58 	.word	0x08013a58
 8003c80:	08013a6c 	.word	0x08013a6c
 8003c84:	20002444 	.word	0x20002444

08003c88 <esp_is_wifi_ready>:
    return 0;
}

// esp.c
int esp_is_wifi_ready(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	807b      	strh	r3, [r7, #2]
    int ok = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]

    if (osMutexAcquire(ESP_MutexHandle, 1000) == osOK) {
 8003c96:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <esp_is_wifi_ready+0x80>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f006 f9ae 	bl	800a000 <osMutexAcquire>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d128      	bne.n	8003cfc <esp_is_wifi_ready+0x74>
        if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8003caa:	1cba      	adds	r2, r7, #2
 8003cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cb0:	4916      	ldr	r1, [pc, #88]	@ (8003d0c <esp_is_wifi_ready+0x84>)
 8003cb2:	4817      	ldr	r0, [pc, #92]	@ (8003d10 <esp_is_wifi_ready+0x88>)
 8003cb4:	f7ff fa26 	bl	8003104 <esp_at_command>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d119      	bne.n	8003cf2 <esp_is_wifi_ready+0x6a>
            strstr((char*)response, "+CWJAP:")) {
 8003cbe:	4915      	ldr	r1, [pc, #84]	@ (8003d14 <esp_is_wifi_ready+0x8c>)
 8003cc0:	4812      	ldr	r0, [pc, #72]	@ (8003d0c <esp_is_wifi_ready+0x84>)
 8003cc2:	f00b f8c7 	bl	800ee54 <strstr>
 8003cc6:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <esp_is_wifi_ready+0x6a>
            if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8003ccc:	1cba      	adds	r2, r7, #2
 8003cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cd2:	490e      	ldr	r1, [pc, #56]	@ (8003d0c <esp_is_wifi_ready+0x84>)
 8003cd4:	4810      	ldr	r0, [pc, #64]	@ (8003d18 <esp_is_wifi_ready+0x90>)
 8003cd6:	f7ff fa15 	bl	8003104 <esp_at_command>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <esp_is_wifi_ready+0x6a>
                !strstr((char*)response, "ip:\"0.0.0.0\"")) {
 8003ce0:	490e      	ldr	r1, [pc, #56]	@ (8003d1c <esp_is_wifi_ready+0x94>)
 8003ce2:	480a      	ldr	r0, [pc, #40]	@ (8003d0c <esp_is_wifi_ready+0x84>)
 8003ce4:	f00b f8b6 	bl	800ee54 <strstr>
 8003ce8:	4603      	mov	r3, r0
            if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <esp_is_wifi_ready+0x6a>
                ok = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
            }
        }
        osMutexRelease(ESP_MutexHandle);
 8003cf2:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <esp_is_wifi_ready+0x80>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f006 f9cd 	bl	800a096 <osMutexRelease>
    }
    return ok;
 8003cfc:	687b      	ldr	r3, [r7, #4]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200024b0 	.word	0x200024b0
 8003d0c:	20001298 	.word	0x20001298
 8003d10:	08013944 	.word	0x08013944
 8003d14:	08013950 	.word	0x08013950
 8003d18:	0801376c 	.word	0x0801376c
 8003d1c:	08013958 	.word	0x08013958

08003d20 <LCD_Init>:
// 전역 상태
static uint8_t backlight = 0x08; // 기본 백라이트 ON

// 초기화
void LCD_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // 전원 안정화 대기
 8003d24:	2032      	movs	r0, #50	@ 0x32
 8003d26:	f001 fabb 	bl	80052a0 <HAL_Delay>

    // 4비트 모드 진입 시퀀스
    LCD_Write4Bits(0x30);
 8003d2a:	2030      	movs	r0, #48	@ 0x30
 8003d2c:	f000 f8b1 	bl	8003e92 <LCD_Write4Bits>
    HAL_Delay(5);
 8003d30:	2005      	movs	r0, #5
 8003d32:	f001 fab5 	bl	80052a0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 8003d36:	2030      	movs	r0, #48	@ 0x30
 8003d38:	f000 f8ab 	bl	8003e92 <LCD_Write4Bits>
    HAL_Delay(5);
 8003d3c:	2005      	movs	r0, #5
 8003d3e:	f001 faaf 	bl	80052a0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 8003d42:	2030      	movs	r0, #48	@ 0x30
 8003d44:	f000 f8a5 	bl	8003e92 <LCD_Write4Bits>
    HAL_Delay(5);
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f001 faa9 	bl	80052a0 <HAL_Delay>
    LCD_Write4Bits(0x20);  // 4bit 모드
 8003d4e:	2020      	movs	r0, #32
 8003d50:	f000 f89f 	bl	8003e92 <LCD_Write4Bits>

    // 기능 설정
    LCD_SendCmd(LCD_CMD_FUNCTION_SET | LCD_FUNCTION_2LINE | LCD_FUNCTION_5x8);
 8003d54:	2028      	movs	r0, #40	@ 0x28
 8003d56:	f000 f84f 	bl	8003df8 <LCD_SendCmd>
    // 표시 켜기
    LCD_SendCmd(LCD_CMD_DISPLAY_CTRL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8003d5a:	200c      	movs	r0, #12
 8003d5c:	f000 f84c 	bl	8003df8 <LCD_SendCmd>
    // 화면 지우기
    LCD_Clear();
 8003d60:	f000 f808 	bl	8003d74 <LCD_Clear>
    // 엔트리 모드 설정
    LCD_SendCmd(LCD_CMD_ENTRY_MODE | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DEC);
 8003d64:	2006      	movs	r0, #6
 8003d66:	f000 f847 	bl	8003df8 <LCD_SendCmd>

    HAL_Delay(100);
 8003d6a:	2064      	movs	r0, #100	@ 0x64
 8003d6c:	f001 fa98 	bl	80052a0 <HAL_Delay>
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <LCD_Clear>:

void LCD_Clear(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
    LCD_SendCmd(LCD_CMD_CLEAR);
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f000 f83d 	bl	8003df8 <LCD_SendCmd>
    HAL_Delay(2);
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f001 fa8e 	bl	80052a0 <HAL_Delay>
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460a      	mov	r2, r1
 8003d92:	71fb      	strb	r3, [r7, #7]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71bb      	strb	r3, [r7, #6]
    static uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 1) row = 1; // 1602는 2라인
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d901      	bls.n	8003da2 <LCD_SetCursor+0x1a>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(LCD_CMD_SET_DDRAM | (col + row_offsets[row]));
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	4a08      	ldr	r2, [pc, #32]	@ (8003dc8 <LCD_SetCursor+0x40>)
 8003da6:	5cd2      	ldrb	r2, [r2, r3]
 8003da8:	79bb      	ldrb	r3, [r7, #6]
 8003daa:	4413      	add	r3, r2
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	b25b      	sxtb	r3, r3
 8003db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f81d 	bl	8003df8 <LCD_SendCmd>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2000000c 	.word	0x2000000c

08003dcc <LCD_Print>:

void LCD_Print(const char *str)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    while (*str) {
 8003dd4:	e007      	b.n	8003de6 <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f81a 	bl	8003e14 <LCD_SendData>
        str++;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3301      	adds	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
    while (*str) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f3      	bne.n	8003dd6 <LCD_Print+0xa>
    }
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <LCD_SendCmd>:
    LCD_Print(buf);
}

// 내부 함수 ===========================
static void LCD_SendCmd(uint8_t cmd)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f812 	bl	8003e30 <LCD_Send>
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f804 	bl	8003e30 <LCD_Send>
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t mode)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	460a      	mov	r2, r1
 8003e3a:	71fb      	strb	r3, [r7, #7]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71bb      	strb	r3, [r7, #6]
    uint8_t highNib = data & 0xF0;
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	f023 030f 	bic.w	r3, r3, #15
 8003e46:	73fb      	strb	r3, [r7, #15]
    uint8_t lowNib  = (data << 4) & 0xF0;
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	73bb      	strb	r3, [r7, #14]

    LCD_Write4Bits(highNib | (mode ? 0x01 : 0x00));
 8003e4e:	79bb      	ldrb	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	b25a      	sxtb	r2, r3
 8003e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f813 	bl	8003e92 <LCD_Write4Bits>
    LCD_Write4Bits(lowNib  | (mode ? 0x01 : 0x00));
 8003e6c:	79bb      	ldrb	r3, [r7, #6]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf14      	ite	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	2300      	moveq	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	b25a      	sxtb	r2, r3
 8003e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f804 	bl	8003e92 <LCD_Write4Bits>
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <LCD_Write4Bits>:

static void LCD_Write4Bits(uint8_t data)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data);
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f808 	bl	8003eb4 <LCD_ExpanderWrite>
    LCD_PulseEnable(data);
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f820 	bl	8003eec <LCD_PulseEnable>
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <LCD_ExpanderWrite>:

static void LCD_ExpanderWrite(uint8_t data)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
    uint8_t val = data | backlight;
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <LCD_ExpanderWrite+0x30>)
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &val, 1, 10);
 8003eca:	f107 020f 	add.w	r2, r7, #15
 8003ece:	230a      	movs	r3, #10
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	214e      	movs	r1, #78	@ 0x4e
 8003ed6:	4804      	ldr	r0, [pc, #16]	@ (8003ee8 <LCD_ExpanderWrite+0x34>)
 8003ed8:	f001 fea4 	bl	8005c24 <HAL_I2C_Master_Transmit>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000008 	.word	0x20000008
 8003ee8:	200022e8 	.word	0x200022e8

08003eec <LCD_PulseEnable>:

static void LCD_PulseEnable(uint8_t data)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data | 0x04); // EN=1
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ffd8 	bl	8003eb4 <LCD_ExpanderWrite>
    HAL_Delay(1);
 8003f04:	2001      	movs	r0, #1
 8003f06:	f001 f9cb 	bl	80052a0 <HAL_Delay>
    LCD_ExpanderWrite(data & ~0x04); // EN=0
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ffce 	bl	8003eb4 <LCD_ExpanderWrite>
    HAL_Delay(1);
 8003f18:	2001      	movs	r0, #1
 8003f1a:	f001 f9c1 	bl	80052a0 <HAL_Delay>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f32:	f001 f943 	bl	80051bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f36:	f000 f8d9 	bl	80040ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f3a:	f000 fb29 	bl	8004590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f3e:	f000 fad3 	bl	80044e8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003f42:	f000 fafb 	bl	800453c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8003f46:	f000 f96b 	bl	8004220 <MX_RTC_Init>
  MX_I2C1_Init();
 8003f4a:	f000 f93b 	bl	80041c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003f4e:	f000 fa29 	bl	80043a4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8003f52:	f000 f9f1 	bl	8004338 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Schedule_Init();
 8003f56:	f7fe f881 	bl	800205c <Schedule_Init>
  Servo_Init();
 8003f5a:	f7fe f905 	bl	8002168 <Servo_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	483e      	ldr	r0, [pc, #248]	@ (800405c <main+0x134>)
 8003f62:	f004 f819 	bl	8007f98 <HAL_TIM_PWM_Start>
  printf("Start main() - wifi\r\n");
 8003f66:	483e      	ldr	r0, [pc, #248]	@ (8004060 <main+0x138>)
 8003f68:	f00a fd3c 	bl	800e9e4 <puts>
  ret |= drv_uart_init();
 8003f6c:	f7ff fd40 	bl	80039f0 <drv_uart_init>
 8003f70:	4602      	mov	r2, r0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8003f78:	f7ff fb5a 	bl	8003630 <drv_esp_init>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <main+0x6c>
  {
	  printf("Esp response error\r\n");
 8003f8a:	4836      	ldr	r0, [pc, #216]	@ (8004064 <main+0x13c>)
 8003f8c:	f00a fd2a 	bl	800e9e4 <puts>
	  Error_Handler();
 8003f90:	f000 fba6 	bl	80046e0 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003f94:	f005 fe6c 	bl	8009c70 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 8003f98:	4833      	ldr	r0, [pc, #204]	@ (8004068 <main+0x140>)
 8003f9a:	f005 ffab 	bl	8009ef4 <osMutexNew>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a32      	ldr	r2, [pc, #200]	@ (800406c <main+0x144>)
 8003fa2:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 8003fa4:	4832      	ldr	r0, [pc, #200]	@ (8004070 <main+0x148>)
 8003fa6:	f005 ffa5 	bl	8009ef4 <osMutexNew>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a31      	ldr	r2, [pc, #196]	@ (8004074 <main+0x14c>)
 8003fae:	6013      	str	r3, [r2, #0]

  /* creation of Weather_Mutex */
  Weather_MutexHandle = osMutexNew(&Weather_Mutex_attributes);
 8003fb0:	4831      	ldr	r0, [pc, #196]	@ (8004078 <main+0x150>)
 8003fb2:	f005 ff9f 	bl	8009ef4 <osMutexNew>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a30      	ldr	r2, [pc, #192]	@ (800407c <main+0x154>)
 8003fba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 8003fbc:	4a30      	ldr	r2, [pc, #192]	@ (8004080 <main+0x158>)
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4830      	ldr	r0, [pc, #192]	@ (8004084 <main+0x15c>)
 8003fc2:	f005 febd 	bl	8009d40 <osThreadNew>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8004088 <main+0x160>)
 8003fca:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 8003fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800408c <main+0x164>)
 8003fce:	2100      	movs	r1, #0
 8003fd0:	482f      	ldr	r0, [pc, #188]	@ (8004090 <main+0x168>)
 8003fd2:	f005 feb5 	bl	8009d40 <osThreadNew>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004094 <main+0x16c>)
 8003fda:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 8003fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004098 <main+0x170>)
 8003fde:	2100      	movs	r1, #0
 8003fe0:	482e      	ldr	r0, [pc, #184]	@ (800409c <main+0x174>)
 8003fe2:	f005 fead 	bl	8009d40 <osThreadNew>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <main+0x178>)
 8003fea:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 8003fec:	4a2d      	ldr	r2, [pc, #180]	@ (80040a4 <main+0x17c>)
 8003fee:	2100      	movs	r1, #0
 8003ff0:	482d      	ldr	r0, [pc, #180]	@ (80040a8 <main+0x180>)
 8003ff2:	f005 fea5 	bl	8009d40 <osThreadNew>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <main+0x184>)
 8003ffa:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(LCD_Task, NULL, &LCDTask_attributes);
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <main+0x188>)
 8003ffe:	2100      	movs	r1, #0
 8004000:	482c      	ldr	r0, [pc, #176]	@ (80040b4 <main+0x18c>)
 8004002:	f005 fe9d 	bl	8009d40 <osThreadNew>
 8004006:	4603      	mov	r3, r0
 8004008:	4a2b      	ldr	r2, [pc, #172]	@ (80040b8 <main+0x190>)
 800400a:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID_Task, NULL, &RFIDTask_attributes);
 800400c:	4a2b      	ldr	r2, [pc, #172]	@ (80040bc <main+0x194>)
 800400e:	2100      	movs	r1, #0
 8004010:	482b      	ldr	r0, [pc, #172]	@ (80040c0 <main+0x198>)
 8004012:	f005 fe95 	bl	8009d40 <osThreadNew>
 8004016:	4603      	mov	r3, r0
 8004018:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <main+0x19c>)
 800401a:	6013      	str	r3, [r2, #0]

  /* creation of THTask */
  THTaskHandle = osThreadNew(TH_Task, NULL, &THTask_attributes);
 800401c:	4a2a      	ldr	r2, [pc, #168]	@ (80040c8 <main+0x1a0>)
 800401e:	2100      	movs	r1, #0
 8004020:	482a      	ldr	r0, [pc, #168]	@ (80040cc <main+0x1a4>)
 8004022:	f005 fe8d 	bl	8009d40 <osThreadNew>
 8004026:	4603      	mov	r3, r0
 8004028:	4a29      	ldr	r2, [pc, #164]	@ (80040d0 <main+0x1a8>)
 800402a:	6013      	str	r3, [r2, #0]

  /* creation of PIRTask */
  PIRTaskHandle = osThreadNew(PIR_Task, NULL, &PIRTask_attributes);
 800402c:	4a29      	ldr	r2, [pc, #164]	@ (80040d4 <main+0x1ac>)
 800402e:	2100      	movs	r1, #0
 8004030:	4829      	ldr	r0, [pc, #164]	@ (80040d8 <main+0x1b0>)
 8004032:	f005 fe85 	bl	8009d40 <osThreadNew>
 8004036:	4603      	mov	r3, r0
 8004038:	4a28      	ldr	r2, [pc, #160]	@ (80040dc <main+0x1b4>)
 800403a:	6013      	str	r3, [r2, #0]

  /* creation of ScheduleTask */
  ScheduleTaskHandle = osThreadNew(Schedule_Task, NULL, &ScheduleTask_attributes);
 800403c:	4a28      	ldr	r2, [pc, #160]	@ (80040e0 <main+0x1b8>)
 800403e:	2100      	movs	r1, #0
 8004040:	4828      	ldr	r0, [pc, #160]	@ (80040e4 <main+0x1bc>)
 8004042:	f005 fe7d 	bl	8009d40 <osThreadNew>
 8004046:	4603      	mov	r3, r0
 8004048:	4a27      	ldr	r2, [pc, #156]	@ (80040e8 <main+0x1c0>)
 800404a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800404c:	f005 fe34 	bl	8009cb8 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8004050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004054:	f005 ff06 	bl	8009e64 <osDelay>
 8004058:	e7fa      	b.n	8004050 <main+0x128>
 800405a:	bf00      	nop
 800405c:	200023b4 	.word	0x200023b4
 8004060:	08013b70 	.word	0x08013b70
 8004064:	08013b88 	.word	0x08013b88
 8004068:	08013d0c 	.word	0x08013d0c
 800406c:	200024b0 	.word	0x200024b0
 8004070:	08013d1c 	.word	0x08013d1c
 8004074:	200024b4 	.word	0x200024b4
 8004078:	08013d2c 	.word	0x08013d2c
 800407c:	200024b8 	.word	0x200024b8
 8004080:	08013bc8 	.word	0x08013bc8
 8004084:	080010f1 	.word	0x080010f1
 8004088:	2000248c 	.word	0x2000248c
 800408c:	08013bec 	.word	0x08013bec
 8004090:	08001ba1 	.word	0x08001ba1
 8004094:	20002490 	.word	0x20002490
 8004098:	08013c10 	.word	0x08013c10
 800409c:	080027cd 	.word	0x080027cd
 80040a0:	20002494 	.word	0x20002494
 80040a4:	08013c34 	.word	0x08013c34
 80040a8:	08001899 	.word	0x08001899
 80040ac:	20002498 	.word	0x20002498
 80040b0:	08013c58 	.word	0x08013c58
 80040b4:	0800199d 	.word	0x0800199d
 80040b8:	2000249c 	.word	0x2000249c
 80040bc:	08013c7c 	.word	0x08013c7c
 80040c0:	08001fb5 	.word	0x08001fb5
 80040c4:	200024a0 	.word	0x200024a0
 80040c8:	08013ca0 	.word	0x08013ca0
 80040cc:	08002221 	.word	0x08002221
 80040d0:	200024a4 	.word	0x200024a4
 80040d4:	08013cc4 	.word	0x08013cc4
 80040d8:	08001db1 	.word	0x08001db1
 80040dc:	200024a8 	.word	0x200024a8
 80040e0:	08013ce8 	.word	0x08013ce8
 80040e4:	080020dd 	.word	0x080020dd
 80040e8:	200024ac 	.word	0x200024ac

080040ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b094      	sub	sp, #80	@ 0x50
 80040f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040f2:	f107 0320 	add.w	r3, r7, #32
 80040f6:	2230      	movs	r2, #48	@ 0x30
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f00a fe02 	bl	800ed04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	4b29      	ldr	r3, [pc, #164]	@ (80041bc <SystemClock_Config+0xd0>)
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	4a28      	ldr	r2, [pc, #160]	@ (80041bc <SystemClock_Config+0xd0>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004120:	4b26      	ldr	r3, [pc, #152]	@ (80041bc <SystemClock_Config+0xd0>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800412c:	2300      	movs	r3, #0
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <SystemClock_Config+0xd4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a22      	ldr	r2, [pc, #136]	@ (80041c0 <SystemClock_Config+0xd4>)
 8004136:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <SystemClock_Config+0xd4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004148:	2309      	movs	r3, #9
 800414a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800414c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004152:	2301      	movs	r3, #1
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004156:	2302      	movs	r3, #2
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800415a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800415e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004160:	2308      	movs	r3, #8
 8004162:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004164:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004168:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800416a:	2304      	movs	r3, #4
 800416c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800416e:	2304      	movs	r3, #4
 8004170:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004172:	f107 0320 	add.w	r3, r7, #32
 8004176:	4618      	mov	r0, r3
 8004178:	f002 f8ae 	bl	80062d8 <HAL_RCC_OscConfig>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004182:	f000 faad 	bl	80046e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004186:	230f      	movs	r3, #15
 8004188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800418a:	2302      	movs	r3, #2
 800418c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800419c:	f107 030c 	add.w	r3, r7, #12
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f002 fb10 	bl	80067c8 <HAL_RCC_ClockConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80041ae:	f000 fa97 	bl	80046e0 <Error_Handler>
  }
}
 80041b2:	bf00      	nop
 80041b4:	3750      	adds	r7, #80	@ 0x50
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40007000 	.word	0x40007000

080041c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041c8:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041ca:	4a13      	ldr	r2, [pc, #76]	@ (8004218 <MX_I2C1_Init+0x54>)
 80041cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80041ce:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041d0:	4a12      	ldr	r2, [pc, #72]	@ (800421c <MX_I2C1_Init+0x58>)
 80041d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80041da:	4b0e      	ldr	r3, [pc, #56]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041dc:	2200      	movs	r2, #0
 80041de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80041ee:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041f4:	4b07      	ldr	r3, [pc, #28]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041fa:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <MX_I2C1_Init+0x50>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004200:	4804      	ldr	r0, [pc, #16]	@ (8004214 <MX_I2C1_Init+0x50>)
 8004202:	f001 fbcb 	bl	800599c <HAL_I2C_Init>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800420c:	f000 fa68 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200022e8 	.word	0x200022e8
 8004218:	40005400 	.word	0x40005400
 800421c:	000186a0 	.word	0x000186a0

08004220 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b090      	sub	sp, #64	@ 0x40
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	60da      	str	r2, [r3, #12]
 8004234:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004236:	2300      	movs	r3, #0
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800423a:	463b      	mov	r3, r7
 800423c:	2228      	movs	r2, #40	@ 0x28
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f00a fd5f 	bl	800ed04 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004246:	4b3a      	ldr	r3, [pc, #232]	@ (8004330 <MX_RTC_Init+0x110>)
 8004248:	4a3a      	ldr	r2, [pc, #232]	@ (8004334 <MX_RTC_Init+0x114>)
 800424a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800424c:	4b38      	ldr	r3, [pc, #224]	@ (8004330 <MX_RTC_Init+0x110>)
 800424e:	2200      	movs	r2, #0
 8004250:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004252:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <MX_RTC_Init+0x110>)
 8004254:	227f      	movs	r2, #127	@ 0x7f
 8004256:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004258:	4b35      	ldr	r3, [pc, #212]	@ (8004330 <MX_RTC_Init+0x110>)
 800425a:	22ff      	movs	r2, #255	@ 0xff
 800425c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800425e:	4b34      	ldr	r3, [pc, #208]	@ (8004330 <MX_RTC_Init+0x110>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004264:	4b32      	ldr	r3, [pc, #200]	@ (8004330 <MX_RTC_Init+0x110>)
 8004266:	2200      	movs	r2, #0
 8004268:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800426a:	4b31      	ldr	r3, [pc, #196]	@ (8004330 <MX_RTC_Init+0x110>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004270:	482f      	ldr	r0, [pc, #188]	@ (8004330 <MX_RTC_Init+0x110>)
 8004272:	f002 fdb9 	bl	8006de8 <HAL_RTC_Init>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800427c:	f000 fa30 	bl	80046e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8004286:	2300      	movs	r3, #0
 8004288:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004292:	2300      	movs	r3, #0
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800429a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800429e:	2201      	movs	r2, #1
 80042a0:	4619      	mov	r1, r3
 80042a2:	4823      	ldr	r0, [pc, #140]	@ (8004330 <MX_RTC_Init+0x110>)
 80042a4:	f002 fe21 	bl	8006eea <HAL_RTC_SetTime>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80042ae:	f000 fa17 	bl	80046e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80042ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042ce:	2201      	movs	r2, #1
 80042d0:	4619      	mov	r1, r3
 80042d2:	4817      	ldr	r0, [pc, #92]	@ (8004330 <MX_RTC_Init+0x110>)
 80042d4:	f002 fea3 	bl	800701e <HAL_RTC_SetDate>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80042de:	f000 f9ff 	bl	80046e0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800430c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004312:	463b      	mov	r3, r7
 8004314:	2201      	movs	r2, #1
 8004316:	4619      	mov	r1, r3
 8004318:	4805      	ldr	r0, [pc, #20]	@ (8004330 <MX_RTC_Init+0x110>)
 800431a:	f002 ff05 	bl	8007128 <HAL_RTC_SetAlarm_IT>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004324:	f000 f9dc 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004328:	bf00      	nop
 800432a:	3740      	adds	r7, #64	@ 0x40
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	2000233c 	.word	0x2000233c
 8004334:	40002800 	.word	0x40002800

08004338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800433c:	4b17      	ldr	r3, [pc, #92]	@ (800439c <MX_SPI1_Init+0x64>)
 800433e:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <MX_SPI1_Init+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004342:	4b16      	ldr	r3, [pc, #88]	@ (800439c <MX_SPI1_Init+0x64>)
 8004344:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800434a:	4b14      	ldr	r3, [pc, #80]	@ (800439c <MX_SPI1_Init+0x64>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <MX_SPI1_Init+0x64>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <MX_SPI1_Init+0x64>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800435c:	4b0f      	ldr	r3, [pc, #60]	@ (800439c <MX_SPI1_Init+0x64>)
 800435e:	2200      	movs	r2, #0
 8004360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <MX_SPI1_Init+0x64>)
 8004364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800436a:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <MX_SPI1_Init+0x64>)
 800436c:	2218      	movs	r2, #24
 800436e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <MX_SPI1_Init+0x64>)
 8004372:	2200      	movs	r2, #0
 8004374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004376:	4b09      	ldr	r3, [pc, #36]	@ (800439c <MX_SPI1_Init+0x64>)
 8004378:	2200      	movs	r2, #0
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437c:	4b07      	ldr	r3, [pc, #28]	@ (800439c <MX_SPI1_Init+0x64>)
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <MX_SPI1_Init+0x64>)
 8004384:	220a      	movs	r2, #10
 8004386:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004388:	4804      	ldr	r0, [pc, #16]	@ (800439c <MX_SPI1_Init+0x64>)
 800438a:	f003 f90b 	bl	80075a4 <HAL_SPI_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004394:	f000 f9a4 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000235c 	.word	0x2000235c
 80043a0:	40013000 	.word	0x40013000

080043a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b096      	sub	sp, #88	@ 0x58
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	615a      	str	r2, [r3, #20]
 80043d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	2220      	movs	r2, #32
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f00a fc91 	bl	800ed04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043e2:	4b3f      	ldr	r3, [pc, #252]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80043e4:	4a3f      	ldr	r2, [pc, #252]	@ (80044e4 <MX_TIM1_Init+0x140>)
 80043e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80043e8:	4b3d      	ldr	r3, [pc, #244]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80043ea:	2253      	movs	r2, #83	@ 0x53
 80043ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ee:	4b3c      	ldr	r3, [pc, #240]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80043f4:	4b3a      	ldr	r3, [pc, #232]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80043f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80043fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043fc:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004402:	4b37      	ldr	r3, [pc, #220]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004408:	4b35      	ldr	r3, [pc, #212]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800440e:	4834      	ldr	r0, [pc, #208]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 8004410:	f003 fd1a 	bl	8007e48 <HAL_TIM_Base_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800441a:	f000 f961 	bl	80046e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800441e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004422:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004424:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004428:	4619      	mov	r1, r3
 800442a:	482d      	ldr	r0, [pc, #180]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 800442c:	f003 ff26 	bl	800827c <HAL_TIM_ConfigClockSource>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004436:	f000 f953 	bl	80046e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800443a:	4829      	ldr	r0, [pc, #164]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 800443c:	f003 fd53 	bl	8007ee6 <HAL_TIM_PWM_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004446:	f000 f94b 	bl	80046e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800444e:	2300      	movs	r3, #0
 8004450:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004452:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004456:	4619      	mov	r1, r3
 8004458:	4821      	ldr	r0, [pc, #132]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 800445a:	f004 faa9 	bl	80089b0 <HAL_TIMEx_MasterConfigSynchronization>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004464:	f000 f93c 	bl	80046e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004468:	2360      	movs	r3, #96	@ 0x60
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 800446c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004472:	2300      	movs	r3, #0
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004476:	2300      	movs	r3, #0
 8004478:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800448a:	2200      	movs	r2, #0
 800448c:	4619      	mov	r1, r3
 800448e:	4814      	ldr	r0, [pc, #80]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 8004490:	f003 fe32 	bl	80080f8 <HAL_TIM_PWM_ConfigChannel>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800449a:	f000 f921 	bl	80046e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80044b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	4619      	mov	r1, r3
 80044c0:	4807      	ldr	r0, [pc, #28]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80044c2:	f004 fae3 	bl	8008a8c <HAL_TIMEx_ConfigBreakDeadTime>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80044cc:	f000 f908 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044d0:	4803      	ldr	r0, [pc, #12]	@ (80044e0 <MX_TIM1_Init+0x13c>)
 80044d2:	f000 fc4d 	bl	8004d70 <HAL_TIM_MspPostInit>

}
 80044d6:	bf00      	nop
 80044d8:	3758      	adds	r7, #88	@ 0x58
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200023b4 	.word	0x200023b4
 80044e4:	40010000 	.word	0x40010000

080044e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80044ec:	4b11      	ldr	r3, [pc, #68]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 80044ee:	4a12      	ldr	r2, [pc, #72]	@ (8004538 <MX_USART2_UART_Init+0x50>)
 80044f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80044f2:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 80044f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 8004502:	2200      	movs	r2, #0
 8004504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004506:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800450c:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 800450e:	220c      	movs	r2, #12
 8004510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 8004514:	2200      	movs	r2, #0
 8004516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800451e:	4805      	ldr	r0, [pc, #20]	@ (8004534 <MX_USART2_UART_Init+0x4c>)
 8004520:	f004 fb06 	bl	8008b30 <HAL_UART_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800452a:	f000 f8d9 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	200023fc 	.word	0x200023fc
 8004538:	40004400 	.word	0x40004400

0800453c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004540:	4b11      	ldr	r3, [pc, #68]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004542:	4a12      	ldr	r2, [pc, #72]	@ (800458c <MX_USART6_UART_Init+0x50>)
 8004544:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004548:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800454c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800454e:	4b0e      	ldr	r3, [pc, #56]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004550:	2200      	movs	r2, #0
 8004552:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004556:	2200      	movs	r2, #0
 8004558:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800455a:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 800455c:	2200      	movs	r2, #0
 800455e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004562:	220c      	movs	r2, #12
 8004564:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004566:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004568:	2200      	movs	r2, #0
 800456a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 800456e:	2200      	movs	r2, #0
 8004570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004572:	4805      	ldr	r0, [pc, #20]	@ (8004588 <MX_USART6_UART_Init+0x4c>)
 8004574:	f004 fadc 	bl	8008b30 <HAL_UART_Init>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800457e:	f000 f8af 	bl	80046e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20002444 	.word	0x20002444
 800458c:	40011400 	.word	0x40011400

08004590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004596:	f107 0314 	add.w	r3, r7, #20
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	4b49      	ldr	r3, [pc, #292]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	4a48      	ldr	r2, [pc, #288]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b6:	4b46      	ldr	r3, [pc, #280]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	4b42      	ldr	r3, [pc, #264]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ca:	4a41      	ldr	r2, [pc, #260]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d2:	4b3f      	ldr	r3, [pc, #252]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	4b3b      	ldr	r3, [pc, #236]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	4a3a      	ldr	r2, [pc, #232]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ee:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <MX_GPIO_Init+0x140>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	4b34      	ldr	r3, [pc, #208]	@ (80046d0 <MX_GPIO_Init+0x140>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <MX_GPIO_Init+0x140>)
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	6313      	str	r3, [r2, #48]	@ 0x30
 800460a:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <MX_GPIO_Init+0x140>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TH_Sensor_Pin|RFID_SDA_Pin, GPIO_PIN_RESET);
 8004616:	2200      	movs	r2, #0
 8004618:	2112      	movs	r1, #18
 800461a:	482e      	ldr	r0, [pc, #184]	@ (80046d4 <MX_GPIO_Init+0x144>)
 800461c:	f001 f9a4 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RFID_RST_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004626:	482c      	ldr	r0, [pc, #176]	@ (80046d8 <MX_GPIO_Init+0x148>)
 8004628:	f001 f99e 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin, GPIO_PIN_RESET);
 800462c:	2200      	movs	r2, #0
 800462e:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8004632:	482a      	ldr	r0, [pc, #168]	@ (80046dc <MX_GPIO_Init+0x14c>)
 8004634:	f001 f998 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800463c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800463e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004648:	f107 0314 	add.w	r3, r7, #20
 800464c:	4619      	mov	r1, r3
 800464e:	4822      	ldr	r0, [pc, #136]	@ (80046d8 <MX_GPIO_Init+0x148>)
 8004650:	f000 ffee 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pins : TH_Sensor_Pin RFID_SDA_Pin */
  GPIO_InitStruct.Pin = TH_Sensor_Pin|RFID_SDA_Pin;
 8004654:	2312      	movs	r3, #18
 8004656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004658:	2301      	movs	r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004660:	2300      	movs	r3, #0
 8004662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004664:	f107 0314 	add.w	r3, r7, #20
 8004668:	4619      	mov	r1, r3
 800466a:	481a      	ldr	r0, [pc, #104]	@ (80046d4 <MX_GPIO_Init+0x144>)
 800466c:	f000 ffe0 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|LED1_Pin|LED2_Pin;
 8004670:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004676:	2301      	movs	r3, #1
 8004678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467e:	2300      	movs	r3, #0
 8004680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004682:	f107 0314 	add.w	r3, r7, #20
 8004686:	4619      	mov	r1, r3
 8004688:	4813      	ldr	r0, [pc, #76]	@ (80046d8 <MX_GPIO_Init+0x148>)
 800468a:	f000 ffd1 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 FAN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin;
 800468e:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8004692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004694:	2301      	movs	r3, #1
 8004696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4619      	mov	r1, r3
 80046a6:	480d      	ldr	r0, [pc, #52]	@ (80046dc <MX_GPIO_Init+0x14c>)
 80046a8:	f000 ffc2 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Sensor_Pin */
  GPIO_InitStruct.Pin = PIR_Sensor_Pin;
 80046ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046b6:	2302      	movs	r3, #2
 80046b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_Sensor_GPIO_Port, &GPIO_InitStruct);
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4619      	mov	r1, r3
 80046c0:	4804      	ldr	r0, [pc, #16]	@ (80046d4 <MX_GPIO_Init+0x144>)
 80046c2:	f000 ffb5 	bl	8005630 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80046c6:	bf00      	nop
 80046c8:	3728      	adds	r7, #40	@ 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40020800 	.word	0x40020800
 80046dc:	40020400 	.word	0x40020400

080046e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046e4:	b672      	cpsid	i
}
 80046e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <Error_Handler+0x8>

080046ec <CS_LOW>:
#include "mfrc522.h"
#include <string.h>

// ===== 로컬 유틸 =====
static inline void CS_LOW(void)  { HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port,  MFRC522_CS_Pin,  GPIO_PIN_RESET); }
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	2200      	movs	r2, #0
 80046f2:	2110      	movs	r1, #16
 80046f4:	4802      	ldr	r0, [pc, #8]	@ (8004700 <CS_LOW+0x14>)
 80046f6:	f001 f937 	bl	8005968 <HAL_GPIO_WritePin>
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40020000 	.word	0x40020000

08004704 <CS_HIGH>:
static inline void CS_HIGH(void) { HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port,  MFRC522_CS_Pin,  GPIO_PIN_SET);   }
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
 8004708:	2201      	movs	r2, #1
 800470a:	2110      	movs	r1, #16
 800470c:	4802      	ldr	r0, [pc, #8]	@ (8004718 <CS_HIGH+0x14>)
 800470e:	f001 f92b 	bl	8005968 <HAL_GPIO_WritePin>
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40020000 	.word	0x40020000

0800471c <RST_HIGH>:
static inline void RST_LOW(void) { HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, GPIO_PIN_RESET); }
static inline void RST_HIGH(void){ HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, GPIO_PIN_SET);   }
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
 8004720:	2201      	movs	r2, #1
 8004722:	2110      	movs	r1, #16
 8004724:	4802      	ldr	r0, [pc, #8]	@ (8004730 <RST_HIGH+0x14>)
 8004726:	f001 f91f 	bl	8005968 <HAL_GPIO_WritePin>
 800472a:	bf00      	nop
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40020800 	.word	0x40020800

08004734 <MFRC522_ReadReg>:
static void     MFRC522_CalcCRC(uint8_t *data, uint8_t len, uint8_t *out);


// ===== 레지스터 R/W =====
uint8_t MFRC522_ReadReg(uint8_t reg)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af02      	add	r7, sp, #8
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    uint8_t addr = ((reg << 1) & 0x7E) | 0x80; // read bit=1
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	b25b      	sxtb	r3, r3
 8004746:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800474a:	b25b      	sxtb	r3, r3
 800474c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004750:	b25b      	sxtb	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	73fb      	strb	r3, [r7, #15]
    uint8_t rx=0, dummy=0;
 8004756:	2300      	movs	r3, #0
 8004758:	73bb      	strb	r3, [r7, #14]
 800475a:	2300      	movs	r3, #0
 800475c:	737b      	strb	r3, [r7, #13]
    CS_LOW();
 800475e:	f7ff ffc5 	bl	80046ec <CS_LOW>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 10);
 8004762:	f107 010f 	add.w	r1, r7, #15
 8004766:	230a      	movs	r3, #10
 8004768:	2201      	movs	r2, #1
 800476a:	480a      	ldr	r0, [pc, #40]	@ (8004794 <MFRC522_ReadReg+0x60>)
 800476c:	f002 ffa3 	bl	80076b6 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive(&hspi1, &dummy, &rx, 1, 10);
 8004770:	f107 020e 	add.w	r2, r7, #14
 8004774:	f107 010d 	add.w	r1, r7, #13
 8004778:	230a      	movs	r3, #10
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	4805      	ldr	r0, [pc, #20]	@ (8004794 <MFRC522_ReadReg+0x60>)
 8004780:	f003 f8dd 	bl	800793e <HAL_SPI_TransmitReceive>
    CS_HIGH();
 8004784:	f7ff ffbe 	bl	8004704 <CS_HIGH>
    return rx;
 8004788:	7bbb      	ldrb	r3, [r7, #14]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	2000235c 	.word	0x2000235c

08004798 <MFRC522_WriteReg>:

void MFRC522_WriteReg(uint8_t reg, uint8_t val)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	460a      	mov	r2, r1
 80047a2:	71fb      	strb	r3, [r7, #7]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = ((reg << 1) & 0x7E); // write bit=0
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	73fb      	strb	r3, [r7, #15]
    CS_LOW();
 80047b6:	f7ff ff99 	bl	80046ec <CS_LOW>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 10);
 80047ba:	f107 010f 	add.w	r1, r7, #15
 80047be:	230a      	movs	r3, #10
 80047c0:	2201      	movs	r2, #1
 80047c2:	4807      	ldr	r0, [pc, #28]	@ (80047e0 <MFRC522_WriteReg+0x48>)
 80047c4:	f002 ff77 	bl	80076b6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &val, 1, 10);
 80047c8:	1db9      	adds	r1, r7, #6
 80047ca:	230a      	movs	r3, #10
 80047cc:	2201      	movs	r2, #1
 80047ce:	4804      	ldr	r0, [pc, #16]	@ (80047e0 <MFRC522_WriteReg+0x48>)
 80047d0:	f002 ff71 	bl	80076b6 <HAL_SPI_Transmit>
    CS_HIGH();
 80047d4:	f7ff ff96 	bl	8004704 <CS_HIGH>
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	2000235c 	.word	0x2000235c

080047e4 <MFRC522_Init>:

// ===== 초기화 =====
void MFRC522_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
    // 핀 기본 상태
    CS_HIGH();
 80047e8:	f7ff ff8c 	bl	8004704 <CS_HIGH>
    RST_HIGH();
 80047ec:	f7ff ff96 	bl	800471c <RST_HIGH>
    HAL_Delay(50);
 80047f0:	2032      	movs	r0, #50	@ 0x32
 80047f2:	f000 fd55 	bl	80052a0 <HAL_Delay>

    PCD_Reset();
 80047f6:	f000 f81c 	bl	8004832 <PCD_Reset>

    // Timer: TModeReg, TPrescalerReg, TReloadReg 설정 (표준)
    MFRC522_WriteReg(TModeReg,      0x8D);   // TAuto=1, TAutoRestart
 80047fa:	218d      	movs	r1, #141	@ 0x8d
 80047fc:	202a      	movs	r0, #42	@ 0x2a
 80047fe:	f7ff ffcb 	bl	8004798 <MFRC522_WriteReg>
    MFRC522_WriteReg(TPrescalerReg, 0x3E);
 8004802:	213e      	movs	r1, #62	@ 0x3e
 8004804:	202b      	movs	r0, #43	@ 0x2b
 8004806:	f7ff ffc7 	bl	8004798 <MFRC522_WriteReg>
    MFRC522_WriteReg(TReloadRegL,   30);
 800480a:	211e      	movs	r1, #30
 800480c:	202d      	movs	r0, #45	@ 0x2d
 800480e:	f7ff ffc3 	bl	8004798 <MFRC522_WriteReg>
    MFRC522_WriteReg(TReloadRegH,   0);
 8004812:	2100      	movs	r1, #0
 8004814:	202c      	movs	r0, #44	@ 0x2c
 8004816:	f7ff ffbf 	bl	8004798 <MFRC522_WriteReg>

    MFRC522_WriteReg(TxASKReg,      0x40);   // 强制100%ASK
 800481a:	2140      	movs	r1, #64	@ 0x40
 800481c:	2015      	movs	r0, #21
 800481e:	f7ff ffbb 	bl	8004798 <MFRC522_WriteReg>
    MFRC522_WriteReg(ModeReg,       0x3D);   // CRC 초기값 0x6363
 8004822:	213d      	movs	r1, #61	@ 0x3d
 8004824:	2011      	movs	r0, #17
 8004826:	f7ff ffb7 	bl	8004798 <MFRC522_WriteReg>

    MFRC522_AntennaOn();
 800482a:	f000 f80d 	bl	8004848 <MFRC522_AntennaOn>
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}

08004832 <PCD_Reset>:

static void PCD_Reset(void)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	af00      	add	r7, sp, #0
    MFRC522_WriteReg(CommandReg, PCD_SoftReset);
 8004836:	210f      	movs	r1, #15
 8004838:	2001      	movs	r0, #1
 800483a:	f7ff ffad 	bl	8004798 <MFRC522_WriteReg>
    HAL_Delay(50);
 800483e:	2032      	movs	r0, #50	@ 0x32
 8004840:	f000 fd2e 	bl	80052a0 <HAL_Delay>
    // 일부 보드에서 RST 핀을 실제로 Low/High 토글해야 할 수 있음
    // RST_LOW(); HAL_Delay(2); RST_HIGH(); HAL_Delay(50);
}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}

08004848 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
    uint8_t v = MFRC522_ReadReg(TxControlReg);
 800484e:	2014      	movs	r0, #20
 8004850:	f7ff ff70 	bl	8004734 <MFRC522_ReadReg>
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
    if (!(v & 0x03)) {
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <MFRC522_AntennaOn+0x2a>
        MFRC522_WriteReg(TxControlReg, v | 0x03);
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f043 0303 	orr.w	r3, r3, #3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	2014      	movs	r0, #20
 800486e:	f7ff ff93 	bl	8004798 <MFRC522_WriteReg>
    }
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <SetBitMask>:
    ClearBitMask(TxControlReg, 0x03);
}

// ===== 비트 마스크 =====
static void SetBitMask(uint8_t reg, uint8_t mask)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	4603      	mov	r3, r0
 8004882:	460a      	mov	r2, r1
 8004884:	71fb      	strb	r3, [r7, #7]
 8004886:	4613      	mov	r3, r2
 8004888:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadReg(reg);
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff51 	bl	8004734 <MFRC522_ReadReg>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteReg(reg, tmp | mask);
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	79bb      	ldrb	r3, [r7, #6]
 800489a:	4313      	orrs	r3, r2
 800489c:	b2da      	uxtb	r2, r3
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	4611      	mov	r1, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ff78 	bl	8004798 <MFRC522_WriteReg>
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <ClearBitMask>:

static void ClearBitMask(uint8_t reg, uint8_t mask)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	460a      	mov	r2, r1
 80048ba:	71fb      	strb	r3, [r7, #7]
 80048bc:	4613      	mov	r3, r2
 80048be:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadReg(reg);
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff36 	bl	8004734 <MFRC522_ReadReg>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteReg(reg, tmp & (~mask));
 80048cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	b25a      	sxtb	r2, r3
 80048d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d8:	4013      	ands	r3, r2
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff58 	bl	8004798 <MFRC522_WriteReg>
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <PCD_ToCard>:
}

// ===== 카드와 통신 =====
static uint8_t PCD_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
                          uint8_t *backData, uint16_t *backLen)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b089      	sub	sp, #36	@ 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
 80048fe:	4613      	mov	r3, r2
 8004900:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8004902:	2302      	movs	r3, #2
 8004904:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8004906:	2300      	movs	r3, #0
 8004908:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 800490a:	2300      	movs	r3, #0
 800490c:	777b      	strb	r3, [r7, #29]

    if (command == PCD_MFAuthent) {
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b0e      	cmp	r3, #14
 8004912:	d104      	bne.n	800491e <PCD_ToCard+0x2e>
        irqEn   = 0x12;
 8004914:	2312      	movs	r3, #18
 8004916:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8004918:	2310      	movs	r3, #16
 800491a:	777b      	strb	r3, [r7, #29]
 800491c:	e006      	b.n	800492c <PCD_ToCard+0x3c>
    } else if (command == PCD_Transceive) {
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d103      	bne.n	800492c <PCD_ToCard+0x3c>
        irqEn   = 0x77;
 8004924:	2377      	movs	r3, #119	@ 0x77
 8004926:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8004928:	2330      	movs	r3, #48	@ 0x30
 800492a:	777b      	strb	r3, [r7, #29]
    }

    MFRC522_WriteReg(ComIEnReg, irqEn | 0x80);
 800492c:	7fbb      	ldrb	r3, [r7, #30]
 800492e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004932:	b2db      	uxtb	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	2002      	movs	r0, #2
 8004938:	f7ff ff2e 	bl	8004798 <MFRC522_WriteReg>
    ClearBitMask(ComIrqReg, 0x80);      // Clear all IRQ
 800493c:	2180      	movs	r1, #128	@ 0x80
 800493e:	2004      	movs	r0, #4
 8004940:	f7ff ffb6 	bl	80048b0 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);     // Flush FIFO
 8004944:	2180      	movs	r1, #128	@ 0x80
 8004946:	200a      	movs	r0, #10
 8004948:	f7ff ff97 	bl	800487a <SetBitMask>
    MFRC522_WriteReg(CommandReg, PCD_Idle);
 800494c:	2100      	movs	r1, #0
 800494e:	2001      	movs	r0, #1
 8004950:	f7ff ff22 	bl	8004798 <MFRC522_WriteReg>

    for (uint8_t i=0;i<sendLen;i++) MFRC522_WriteReg(FIFODataReg, sendData[i]);
 8004954:	2300      	movs	r3, #0
 8004956:	773b      	strb	r3, [r7, #28]
 8004958:	e00a      	b.n	8004970 <PCD_ToCard+0x80>
 800495a:	7f3b      	ldrb	r3, [r7, #28]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	2009      	movs	r0, #9
 8004966:	f7ff ff17 	bl	8004798 <MFRC522_WriteReg>
 800496a:	7f3b      	ldrb	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	773b      	strb	r3, [r7, #28]
 8004970:	7f3a      	ldrb	r2, [r7, #28]
 8004972:	7bbb      	ldrb	r3, [r7, #14]
 8004974:	429a      	cmp	r2, r3
 8004976:	d3f0      	bcc.n	800495a <PCD_ToCard+0x6a>
    MFRC522_WriteReg(CommandReg, command);
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	4619      	mov	r1, r3
 800497c:	2001      	movs	r0, #1
 800497e:	f7ff ff0b 	bl	8004798 <MFRC522_WriteReg>
    if (command == PCD_Transceive) SetBitMask(BitFramingReg, 0x80); // StartSend
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b0c      	cmp	r3, #12
 8004986:	d103      	bne.n	8004990 <PCD_ToCard+0xa0>
 8004988:	2180      	movs	r1, #128	@ 0x80
 800498a:	200d      	movs	r0, #13
 800498c:	f7ff ff75 	bl	800487a <SetBitMask>

    // 대기
    uint16_t i = 2000;
 8004990:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004994:	837b      	strh	r3, [r7, #26]
    do {
        uint8_t n = MFRC522_ReadReg(ComIrqReg);
 8004996:	2004      	movs	r0, #4
 8004998:	f7ff fecc 	bl	8004734 <MFRC522_ReadReg>
 800499c:	4603      	mov	r3, r0
 800499e:	763b      	strb	r3, [r7, #24]
        if (n & waitIRq) break;
 80049a0:	7e3a      	ldrb	r2, [r7, #24]
 80049a2:	7f7b      	ldrb	r3, [r7, #29]
 80049a4:	4013      	ands	r3, r2
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <PCD_ToCard+0xd4>
        if (n & 0x01)    break; // Timer
 80049ac:	7e3b      	ldrb	r3, [r7, #24]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d108      	bne.n	80049c8 <PCD_ToCard+0xd8>
    } while (--i);
 80049b6:	8b7b      	ldrh	r3, [r7, #26]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	837b      	strh	r3, [r7, #26]
 80049bc:	8b7b      	ldrh	r3, [r7, #26]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e9      	bne.n	8004996 <PCD_ToCard+0xa6>
 80049c2:	e002      	b.n	80049ca <PCD_ToCard+0xda>
        if (n & waitIRq) break;
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <PCD_ToCard+0xda>
        if (n & 0x01)    break; // Timer
 80049c8:	bf00      	nop

    ClearBitMask(BitFramingReg, 0x80);
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	200d      	movs	r0, #13
 80049ce:	f7ff ff6f 	bl	80048b0 <ClearBitMask>

    if (i) {
 80049d2:	8b7b      	ldrh	r3, [r7, #26]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d04e      	beq.n	8004a76 <PCD_ToCard+0x186>
        if (!(MFRC522_ReadReg(ErrorReg) & 0x1B)) {
 80049d8:	2006      	movs	r0, #6
 80049da:	f7ff feab 	bl	8004734 <MFRC522_ReadReg>
 80049de:	4603      	mov	r3, r0
 80049e0:	f003 031b 	and.w	r3, r3, #27
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d143      	bne.n	8004a70 <PCD_ToCard+0x180>
            status = MI_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	77fb      	strb	r3, [r7, #31]
            if (backData && backLen) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d043      	beq.n	8004a7a <PCD_ToCard+0x18a>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d040      	beq.n	8004a7a <PCD_ToCard+0x18a>
                uint8_t n = MFRC522_ReadReg(FIFOLevelReg);
 80049f8:	200a      	movs	r0, #10
 80049fa:	f7ff fe9b 	bl	8004734 <MFRC522_ReadReg>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]
                uint8_t lastBits = MFRC522_ReadReg(ControlReg) & 0x07;
 8004a02:	200c      	movs	r0, #12
 8004a04:	f7ff fe96 	bl	8004734 <MFRC522_ReadReg>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	75bb      	strb	r3, [r7, #22]
                if (lastBits) *backLen = (n-1)*8 + lastBits;
 8004a10:	7dbb      	ldrb	r3, [r7, #22]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <PCD_ToCard+0x13e>
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	7dbb      	ldrb	r3, [r7, #22]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e005      	b.n	8004a3a <PCD_ToCard+0x14a>
                else          *backLen =  n   *8;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	801a      	strh	r2, [r3, #0]

                // 바이트 단위로 복사
                uint8_t bytes = (*backLen + 7) / 8;
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	3307      	adds	r3, #7
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da00      	bge.n	8004a46 <PCD_ToCard+0x156>
 8004a44:	3307      	adds	r3, #7
 8004a46:	10db      	asrs	r3, r3, #3
 8004a48:	757b      	strb	r3, [r7, #21]
                for (uint8_t j=0;j<bytes;j++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	767b      	strb	r3, [r7, #25]
 8004a4e:	e00a      	b.n	8004a66 <PCD_ToCard+0x176>
                    backData[j] = MFRC522_ReadReg(FIFODataReg);
 8004a50:	7e7b      	ldrb	r3, [r7, #25]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	18d4      	adds	r4, r2, r3
 8004a56:	2009      	movs	r0, #9
 8004a58:	f7ff fe6c 	bl	8004734 <MFRC522_ReadReg>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	7023      	strb	r3, [r4, #0]
                for (uint8_t j=0;j<bytes;j++)
 8004a60:	7e7b      	ldrb	r3, [r7, #25]
 8004a62:	3301      	adds	r3, #1
 8004a64:	767b      	strb	r3, [r7, #25]
 8004a66:	7e7a      	ldrb	r2, [r7, #25]
 8004a68:	7d7b      	ldrb	r3, [r7, #21]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d3f0      	bcc.n	8004a50 <PCD_ToCard+0x160>
 8004a6e:	e004      	b.n	8004a7a <PCD_ToCard+0x18a>
            }
        } else status = MI_ERR;
 8004a70:	2302      	movs	r3, #2
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e001      	b.n	8004a7a <PCD_ToCard+0x18a>
    } else {
        status = MI_ERR;
 8004a76:	2302      	movs	r3, #2
 8004a78:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8004a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3724      	adds	r7, #36	@ 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}

08004a84 <MFRC522_Request>:

// ===== 카드 탐지 (REQA/ALL) =====
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *ATQA)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
    MFRC522_WriteReg(BitFramingReg, 0x07); // 7bits send
 8004a90:	2107      	movs	r1, #7
 8004a92:	200d      	movs	r0, #13
 8004a94:	f7ff fe80 	bl	8004798 <MFRC522_WriteReg>
    uint8_t buf[1] = { reqMode };
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	733b      	strb	r3, [r7, #12]
    uint16_t backBits = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	817b      	strh	r3, [r7, #10]

    uint8_t status = PCD_ToCard(PCD_Transceive, buf, 1, ATQA, &backBits);
 8004aa0:	f107 010c 	add.w	r1, r7, #12
 8004aa4:	f107 030a 	add.w	r3, r7, #10
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	200c      	movs	r0, #12
 8004ab0:	f7ff ff1e 	bl	80048f0 <PCD_ToCard>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK || backBits != 0x10) return MI_ERR;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <MFRC522_Request+0x40>
 8004abe:	897b      	ldrh	r3, [r7, #10]
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d001      	beq.n	8004ac8 <MFRC522_Request+0x44>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e000      	b.n	8004aca <MFRC522_Request+0x46>
    return MI_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <MFRC522_Anticoll>:

// ===== 충돌 방지 & UID 읽기 =====
uint8_t MFRC522_Anticoll(uint8_t *uid)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08a      	sub	sp, #40	@ 0x28
 8004ad6:	af02      	add	r7, sp, #8
 8004ad8:	6078      	str	r0, [r7, #4]
    MFRC522_WriteReg(BitFramingReg, 0x00); // 8bits
 8004ada:	2100      	movs	r1, #0
 8004adc:	200d      	movs	r0, #13
 8004ade:	f7ff fe5b 	bl	8004798 <MFRC522_WriteReg>

    uint8_t serBuf[2] = { PICC_ANTICOLL, 0x20 };
 8004ae2:	f242 0393 	movw	r3, #8339	@ 0x2093
 8004ae6:	833b      	strh	r3, [r7, #24]
    uint8_t backData[10] = {0};
 8004ae8:	f107 030c 	add.w	r3, r7, #12
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	811a      	strh	r2, [r3, #8]
    uint16_t backBits = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	817b      	strh	r3, [r7, #10]

    uint8_t status = PCD_ToCard(PCD_Transceive, serBuf, 2, backData, &backBits);
 8004af8:	f107 020c 	add.w	r2, r7, #12
 8004afc:	f107 0118 	add.w	r1, r7, #24
 8004b00:	f107 030a 	add.w	r3, r7, #10
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	2202      	movs	r2, #2
 8004b0a:	200c      	movs	r0, #12
 8004b0c:	f7ff fef0 	bl	80048f0 <PCD_ToCard>
 8004b10:	4603      	mov	r3, r0
 8004b12:	76fb      	strb	r3, [r7, #27]
    if (status != MI_OK) return MI_ERR;
 8004b14:	7efb      	ldrb	r3, [r7, #27]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MFRC522_Anticoll+0x4c>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e012      	b.n	8004b44 <MFRC522_Anticoll+0x72>

    // backData[0..4] (4바이트 UID + BCC)
    // 간단히 UID만 복사 (앞 5바이트)
    for (int i=0;i<5;i++) uid[i] = backData[i];
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e00b      	b.n	8004b3c <MFRC522_Anticoll+0x6a>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f107 010c 	add.w	r1, r7, #12
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	ddf0      	ble.n	8004b24 <MFRC522_Anticoll+0x52>
    return MI_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	4b12      	ldr	r3, [pc, #72]	@ (8004ba0 <HAL_MspInit+0x54>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ba0 <HAL_MspInit+0x54>)
 8004b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b62:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba0 <HAL_MspInit+0x54>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <HAL_MspInit+0x54>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba0 <HAL_MspInit+0x54>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ba0 <HAL_MspInit+0x54>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	210f      	movs	r1, #15
 8004b8e:	f06f 0001 	mvn.w	r0, #1
 8004b92:	f000 fc84 	bl	800549e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bac:	f107 0314 	add.w	r3, r7, #20
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <HAL_I2C_MspInit+0x84>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d12c      	bne.n	8004c20 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <HAL_I2C_MspInit+0x88>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <HAL_I2C_MspInit+0x88>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <HAL_I2C_MspInit+0x88>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004be2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004be8:	2312      	movs	r3, #18
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	480c      	ldr	r0, [pc, #48]	@ (8004c30 <HAL_I2C_MspInit+0x8c>)
 8004c00:	f000 fd16 	bl	8005630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <HAL_I2C_MspInit+0x88>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <HAL_I2C_MspInit+0x88>)
 8004c0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c14:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_I2C_MspInit+0x88>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004c20:	bf00      	nop
 8004c22:	3728      	adds	r7, #40	@ 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40005400 	.word	0x40005400
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020400 	.word	0x40020400

08004c34 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c3c:	f107 0308 	add.w	r3, r7, #8
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
 8004c4c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a10      	ldr	r2, [pc, #64]	@ (8004c94 <HAL_RTC_MspInit+0x60>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d119      	bne.n	8004c8c <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c60:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 ffce 	bl	8006c08 <HAL_RCCEx_PeriphCLKConfig>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004c72:	f7ff fd35 	bl	80046e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <HAL_RTC_MspInit+0x64>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2105      	movs	r1, #5
 8004c80:	2029      	movs	r0, #41	@ 0x29
 8004c82:	f000 fc0c 	bl	800549e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004c86:	2029      	movs	r0, #41	@ 0x29
 8004c88:	f000 fc25 	bl	80054d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004c8c:	bf00      	nop
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40002800 	.word	0x40002800
 8004c98:	42470e3c 	.word	0x42470e3c

08004c9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_SPI_MspInit+0x84>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d12b      	bne.n	8004d16 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <HAL_SPI_MspInit+0x88>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc6:	4a17      	ldr	r2, [pc, #92]	@ (8004d24 <HAL_SPI_MspInit+0x88>)
 8004cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <HAL_SPI_MspInit+0x88>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <HAL_SPI_MspInit+0x88>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce2:	4a10      	ldr	r2, [pc, #64]	@ (8004d24 <HAL_SPI_MspInit+0x88>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cea:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <HAL_SPI_MspInit+0x88>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004cf6:	23e0      	movs	r3, #224	@ 0xe0
 8004cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d02:	2303      	movs	r3, #3
 8004d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d06:	2305      	movs	r3, #5
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4805      	ldr	r0, [pc, #20]	@ (8004d28 <HAL_SPI_MspInit+0x8c>)
 8004d12:	f000 fc8d 	bl	8005630 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004d16:	bf00      	nop
 8004d18:	3728      	adds	r7, #40	@ 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40013000 	.word	0x40013000
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40020000 	.word	0x40020000

08004d2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a0b      	ldr	r2, [pc, #44]	@ (8004d68 <HAL_TIM_Base_MspInit+0x3c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10d      	bne.n	8004d5a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <HAL_TIM_Base_MspInit+0x40>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <HAL_TIM_Base_MspInit+0x40>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d4e:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <HAL_TIM_Base_MspInit+0x40>)
 8004d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d78:	f107 030c 	add.w	r3, r7, #12
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	60da      	str	r2, [r3, #12]
 8004d86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <HAL_TIM_MspPostInit+0x68>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d11e      	bne.n	8004dd0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <HAL_TIM_MspPostInit+0x6c>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	4a10      	ldr	r2, [pc, #64]	@ (8004ddc <HAL_TIM_MspPostInit+0x6c>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004da2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <HAL_TIM_MspPostInit+0x6c>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004db2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db4:	2302      	movs	r3, #2
 8004db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc4:	f107 030c 	add.w	r3, r7, #12
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4805      	ldr	r0, [pc, #20]	@ (8004de0 <HAL_TIM_MspPostInit+0x70>)
 8004dcc:	f000 fc30 	bl	8005630 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004dd0:	bf00      	nop
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40020000 	.word	0x40020000

08004de4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08c      	sub	sp, #48	@ 0x30
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 031c 	add.w	r3, r7, #28
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3a      	ldr	r2, [pc, #232]	@ (8004eec <HAL_UART_MspInit+0x108>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d134      	bne.n	8004e70 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	4b39      	ldr	r3, [pc, #228]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	4a38      	ldr	r2, [pc, #224]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e16:	4b36      	ldr	r3, [pc, #216]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	4b32      	ldr	r3, [pc, #200]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2a:	4a31      	ldr	r2, [pc, #196]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e32:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004e3e:	230c      	movs	r3, #12
 8004e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e42:	2302      	movs	r3, #2
 8004e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e4e:	2307      	movs	r3, #7
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4826      	ldr	r0, [pc, #152]	@ (8004ef4 <HAL_UART_MspInit+0x110>)
 8004e5a:	f000 fbe9 	bl	8005630 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2105      	movs	r1, #5
 8004e62:	2026      	movs	r0, #38	@ 0x26
 8004e64:	f000 fb1b 	bl	800549e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e68:	2026      	movs	r0, #38	@ 0x26
 8004e6a:	f000 fb34 	bl	80054d6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004e6e:	e038      	b.n	8004ee2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a20      	ldr	r2, [pc, #128]	@ (8004ef8 <HAL_UART_MspInit+0x114>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d133      	bne.n	8004ee2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e8a:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <HAL_UART_MspInit+0x10c>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004eb2:	23c0      	movs	r3, #192	@ 0xc0
 8004eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec6:	f107 031c 	add.w	r3, r7, #28
 8004eca:	4619      	mov	r1, r3
 8004ecc:	480b      	ldr	r0, [pc, #44]	@ (8004efc <HAL_UART_MspInit+0x118>)
 8004ece:	f000 fbaf 	bl	8005630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2105      	movs	r1, #5
 8004ed6:	2047      	movs	r0, #71	@ 0x47
 8004ed8:	f000 fae1 	bl	800549e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004edc:	2047      	movs	r0, #71	@ 0x47
 8004ede:	f000 fafa 	bl	80054d6 <HAL_NVIC_EnableIRQ>
}
 8004ee2:	bf00      	nop
 8004ee4:	3730      	adds	r7, #48	@ 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40011400 	.word	0x40011400
 8004efc:	40020800 	.word	0x40020800

08004f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f04:	bf00      	nop
 8004f06:	e7fd      	b.n	8004f04 <NMI_Handler+0x4>

08004f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <HardFault_Handler+0x4>

08004f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <MemManage_Handler+0x4>

08004f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <BusFault_Handler+0x4>

08004f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <UsageFault_Handler+0x4>

08004f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f3a:	f000 f991 	bl	8005260 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f3e:	f006 ffb1 	bl	800bea4 <xTaskGetSchedulerState>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f48:	f007 fea6 	bl	800cc98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f4c:	bf00      	nop
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f54:	4802      	ldr	r0, [pc, #8]	@ (8004f60 <USART2_IRQHandler+0x10>)
 8004f56:	f003 feeb 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	200023fc 	.word	0x200023fc

08004f64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004f68:	4802      	ldr	r0, [pc, #8]	@ (8004f74 <RTC_Alarm_IRQHandler+0x10>)
 8004f6a:	f002 fa21 	bl	80073b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	2000233c 	.word	0x2000233c

08004f78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004f7c:	4802      	ldr	r0, [pc, #8]	@ (8004f88 <USART6_IRQHandler+0x10>)
 8004f7e:	f003 fed7 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20002444 	.word	0x20002444

08004f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return 1;
 8004f90:	2301      	movs	r3, #1
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <_kill>:

int _kill(int pid, int sig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fa6:	f00a fe6d 	bl	800fc84 <__errno>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2216      	movs	r2, #22
 8004fae:	601a      	str	r2, [r3, #0]
  return -1;
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_exit>:

void _exit (int status)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ffe7 	bl	8004f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <_exit+0x12>

08004fd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e00a      	b.n	8004ffa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	4601      	mov	r1, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	60ba      	str	r2, [r7, #8]
 8004ff0:	b2ca      	uxtb	r2, r1
 8004ff2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	dbf0      	blt.n	8004fe4 <_read+0x12>
  }

  return len;
 8005002:	687b      	ldr	r3, [r7, #4]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e009      	b.n	8005032 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	60ba      	str	r2, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fcf0 	bl	8003a0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	3301      	adds	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	dbf1      	blt.n	800501e <_write+0x12>
  }
  return len;
 800503a:	687b      	ldr	r3, [r7, #4]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <_close>:

int _close(int file)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800504c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800506c:	605a      	str	r2, [r3, #4]
  return 0;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <_isatty>:

int _isatty(int file)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005084:	2301      	movs	r3, #1
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <_gettimeofday>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int _gettimeofday(struct timeval *tv, void *tzvp) {
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
    tv->tv_sec = 0;
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9c1 2300 	strd	r2, r3, [r1]
    tv->tv_usec = 0;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    return 0;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050e0:	4a14      	ldr	r2, [pc, #80]	@ (8005134 <_sbrk+0x5c>)
 80050e2:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <_sbrk+0x60>)
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050ec:	4b13      	ldr	r3, [pc, #76]	@ (800513c <_sbrk+0x64>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050f4:	4b11      	ldr	r3, [pc, #68]	@ (800513c <_sbrk+0x64>)
 80050f6:	4a12      	ldr	r2, [pc, #72]	@ (8005140 <_sbrk+0x68>)
 80050f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050fa:	4b10      	ldr	r3, [pc, #64]	@ (800513c <_sbrk+0x64>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d207      	bcs.n	8005118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005108:	f00a fdbc 	bl	800fc84 <__errno>
 800510c:	4603      	mov	r3, r0
 800510e:	220c      	movs	r2, #12
 8005110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	e009      	b.n	800512c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005118:	4b08      	ldr	r3, [pc, #32]	@ (800513c <_sbrk+0x64>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800511e:	4b07      	ldr	r3, [pc, #28]	@ (800513c <_sbrk+0x64>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	4a05      	ldr	r2, [pc, #20]	@ (800513c <_sbrk+0x64>)
 8005128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20020000 	.word	0x20020000
 8005138:	00000400 	.word	0x00000400
 800513c:	200024c0 	.word	0x200024c0
 8005140:	20006f88 	.word	0x20006f88

08005144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <SystemInit+0x20>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514e:	4a05      	ldr	r2, [pc, #20]	@ (8005164 <SystemInit+0x20>)
 8005150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80051a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800516c:	f7ff ffea 	bl	8005144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005170:	480c      	ldr	r0, [pc, #48]	@ (80051a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005172:	490d      	ldr	r1, [pc, #52]	@ (80051a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005174:	4a0d      	ldr	r2, [pc, #52]	@ (80051ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005178:	e002      	b.n	8005180 <LoopCopyDataInit>

0800517a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800517a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800517c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800517e:	3304      	adds	r3, #4

08005180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005184:	d3f9      	bcc.n	800517a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005186:	4a0a      	ldr	r2, [pc, #40]	@ (80051b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005188:	4c0a      	ldr	r4, [pc, #40]	@ (80051b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800518a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800518c:	e001      	b.n	8005192 <LoopFillZerobss>

0800518e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800518e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005190:	3204      	adds	r2, #4

08005192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005194:	d3fb      	bcc.n	800518e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005196:	f00a fd7b 	bl	800fc90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800519a:	f7fe fec5 	bl	8003f28 <main>
  bx  lr    
 800519e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80051a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051a8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80051ac:	08014414 	.word	0x08014414
  ldr r2, =_sbss
 80051b0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80051b4:	20006f88 	.word	0x20006f88

080051b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051b8:	e7fe      	b.n	80051b8 <ADC_IRQHandler>
	...

080051bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051c0:	4b0e      	ldr	r3, [pc, #56]	@ (80051fc <HAL_Init+0x40>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0d      	ldr	r2, [pc, #52]	@ (80051fc <HAL_Init+0x40>)
 80051c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051cc:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <HAL_Init+0x40>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0a      	ldr	r2, [pc, #40]	@ (80051fc <HAL_Init+0x40>)
 80051d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051d8:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <HAL_Init+0x40>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a07      	ldr	r2, [pc, #28]	@ (80051fc <HAL_Init+0x40>)
 80051de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051e4:	2003      	movs	r0, #3
 80051e6:	f000 f94f 	bl	8005488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ea:	200f      	movs	r0, #15
 80051ec:	f000 f808 	bl	8005200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051f0:	f7ff fcac 	bl	8004b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40023c00 	.word	0x40023c00

08005200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005208:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <HAL_InitTick+0x54>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	4b12      	ldr	r3, [pc, #72]	@ (8005258 <HAL_InitTick+0x58>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005216:	fbb3 f3f1 	udiv	r3, r3, r1
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f967 	bl	80054f2 <HAL_SYSTICK_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e00e      	b.n	800524c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d80a      	bhi.n	800524a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005234:	2200      	movs	r2, #0
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	f000 f92f 	bl	800549e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005240:	4a06      	ldr	r2, [pc, #24]	@ (800525c <HAL_InitTick+0x5c>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000014 	.word	0x20000014
 8005258:	2000001c 	.word	0x2000001c
 800525c:	20000018 	.word	0x20000018

08005260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005264:	4b06      	ldr	r3, [pc, #24]	@ (8005280 <HAL_IncTick+0x20>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <HAL_IncTick+0x24>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4413      	add	r3, r2
 8005270:	4a04      	ldr	r2, [pc, #16]	@ (8005284 <HAL_IncTick+0x24>)
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000001c 	.word	0x2000001c
 8005284:	200024c4 	.word	0x200024c4

08005288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return uwTick;
 800528c:	4b03      	ldr	r3, [pc, #12]	@ (800529c <HAL_GetTick+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	200024c4 	.word	0x200024c4

080052a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052a8:	f7ff ffee 	bl	8005288 <HAL_GetTick>
 80052ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d005      	beq.n	80052c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ba:	4b0a      	ldr	r3, [pc, #40]	@ (80052e4 <HAL_Delay+0x44>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052c6:	bf00      	nop
 80052c8:	f7ff ffde 	bl	8005288 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d8f7      	bhi.n	80052c8 <HAL_Delay+0x28>
  {
  }
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	2000001c 	.word	0x2000001c

080052e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052f8:	4b0c      	ldr	r3, [pc, #48]	@ (800532c <__NVIC_SetPriorityGrouping+0x44>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005304:	4013      	ands	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800531a:	4a04      	ldr	r2, [pc, #16]	@ (800532c <__NVIC_SetPriorityGrouping+0x44>)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	60d3      	str	r3, [r2, #12]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	e000ed00 	.word	0xe000ed00

08005330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005334:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <__NVIC_GetPriorityGrouping+0x18>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	f003 0307 	and.w	r3, r3, #7
}
 800533e:	4618      	mov	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	e000ed00 	.word	0xe000ed00

0800534c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535a:	2b00      	cmp	r3, #0
 800535c:	db0b      	blt.n	8005376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	4907      	ldr	r1, [pc, #28]	@ (8005384 <__NVIC_EnableIRQ+0x38>)
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2001      	movs	r0, #1
 800536e:	fa00 f202 	lsl.w	r2, r0, r2
 8005372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	e000e100 	.word	0xe000e100

08005388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	6039      	str	r1, [r7, #0]
 8005392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005398:	2b00      	cmp	r3, #0
 800539a:	db0a      	blt.n	80053b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	490c      	ldr	r1, [pc, #48]	@ (80053d4 <__NVIC_SetPriority+0x4c>)
 80053a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a6:	0112      	lsls	r2, r2, #4
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	440b      	add	r3, r1
 80053ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053b0:	e00a      	b.n	80053c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4908      	ldr	r1, [pc, #32]	@ (80053d8 <__NVIC_SetPriority+0x50>)
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	3b04      	subs	r3, #4
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	440b      	add	r3, r1
 80053c6:	761a      	strb	r2, [r3, #24]
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	e000e100 	.word	0xe000e100
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	@ 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f1c3 0307 	rsb	r3, r3, #7
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	bf28      	it	cs
 80053fa:	2304      	movcs	r3, #4
 80053fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3304      	adds	r3, #4
 8005402:	2b06      	cmp	r3, #6
 8005404:	d902      	bls.n	800540c <NVIC_EncodePriority+0x30>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3b03      	subs	r3, #3
 800540a:	e000      	b.n	800540e <NVIC_EncodePriority+0x32>
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	401a      	ands	r2, r3
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005424:	f04f 31ff 	mov.w	r1, #4294967295
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa01 f303 	lsl.w	r3, r1, r3
 800542e:	43d9      	mvns	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005434:	4313      	orrs	r3, r2
         );
}
 8005436:	4618      	mov	r0, r3
 8005438:	3724      	adds	r7, #36	@ 0x24
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3b01      	subs	r3, #1
 8005450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005454:	d301      	bcc.n	800545a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005456:	2301      	movs	r3, #1
 8005458:	e00f      	b.n	800547a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800545a:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <SysTick_Config+0x40>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3b01      	subs	r3, #1
 8005460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005462:	210f      	movs	r1, #15
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	f7ff ff8e 	bl	8005388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <SysTick_Config+0x40>)
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005472:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <SysTick_Config+0x40>)
 8005474:	2207      	movs	r2, #7
 8005476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	e000e010 	.word	0xe000e010

08005488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ff29 	bl	80052e8 <__NVIC_SetPriorityGrouping>
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	4603      	mov	r3, r0
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054b0:	f7ff ff3e 	bl	8005330 <__NVIC_GetPriorityGrouping>
 80054b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f7ff ff8e 	bl	80053dc <NVIC_EncodePriority>
 80054c0:	4602      	mov	r2, r0
 80054c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff5d 	bl	8005388 <__NVIC_SetPriority>
}
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	4603      	mov	r3, r0
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ff31 	bl	800534c <__NVIC_EnableIRQ>
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ffa2 	bl	8005444 <SysTick_Config>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005518:	f7ff feb6 	bl	8005288 <HAL_GetTick>
 800551c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d008      	beq.n	800553c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2280      	movs	r2, #128	@ 0x80
 800552e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e052      	b.n	80055e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0216 	bic.w	r2, r2, #22
 800554a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800555a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <HAL_DMA_Abort+0x62>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0208 	bic.w	r2, r2, #8
 800557a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800558c:	e013      	b.n	80055b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800558e:	f7ff fe7b 	bl	8005288 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b05      	cmp	r3, #5
 800559a:	d90c      	bls.n	80055b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2203      	movs	r2, #3
 80055a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e015      	b.n	80055e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e4      	bne.n	800558e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	223f      	movs	r2, #63	@ 0x3f
 80055ca:	409a      	lsls	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d004      	beq.n	8005608 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e00c      	b.n	8005622 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2205      	movs	r2, #5
 800560c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	@ 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	e159      	b.n	8005900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800564c:	2201      	movs	r2, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	f040 8148 	bne.w	80058fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d005      	beq.n	8005682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800567e:	2b02      	cmp	r3, #2
 8005680:	d130      	bne.n	80056e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	2203      	movs	r2, #3
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056b8:	2201      	movs	r2, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 0201 	and.w	r2, r3, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d017      	beq.n	8005720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	2203      	movs	r2, #3
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d123      	bne.n	8005774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	08da      	lsrs	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3208      	adds	r2, #8
 8005734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	220f      	movs	r2, #15
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	08da      	lsrs	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3208      	adds	r2, #8
 800576e:	69b9      	ldr	r1, [r7, #24]
 8005770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	2203      	movs	r2, #3
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0203 	and.w	r2, r3, #3
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80a2 	beq.w	80058fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	4b57      	ldr	r3, [pc, #348]	@ (8005918 <HAL_GPIO_Init+0x2e8>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	4a56      	ldr	r2, [pc, #344]	@ (8005918 <HAL_GPIO_Init+0x2e8>)
 80057c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057c6:	4b54      	ldr	r3, [pc, #336]	@ (8005918 <HAL_GPIO_Init+0x2e8>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d2:	4a52      	ldr	r2, [pc, #328]	@ (800591c <HAL_GPIO_Init+0x2ec>)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	3302      	adds	r3, #2
 80057da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	220f      	movs	r2, #15
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a49      	ldr	r2, [pc, #292]	@ (8005920 <HAL_GPIO_Init+0x2f0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d019      	beq.n	8005832 <HAL_GPIO_Init+0x202>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a48      	ldr	r2, [pc, #288]	@ (8005924 <HAL_GPIO_Init+0x2f4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <HAL_GPIO_Init+0x1fe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a47      	ldr	r2, [pc, #284]	@ (8005928 <HAL_GPIO_Init+0x2f8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00d      	beq.n	800582a <HAL_GPIO_Init+0x1fa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a46      	ldr	r2, [pc, #280]	@ (800592c <HAL_GPIO_Init+0x2fc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <HAL_GPIO_Init+0x1f6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a45      	ldr	r2, [pc, #276]	@ (8005930 <HAL_GPIO_Init+0x300>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_GPIO_Init+0x1f2>
 800581e:	2304      	movs	r3, #4
 8005820:	e008      	b.n	8005834 <HAL_GPIO_Init+0x204>
 8005822:	2307      	movs	r3, #7
 8005824:	e006      	b.n	8005834 <HAL_GPIO_Init+0x204>
 8005826:	2303      	movs	r3, #3
 8005828:	e004      	b.n	8005834 <HAL_GPIO_Init+0x204>
 800582a:	2302      	movs	r3, #2
 800582c:	e002      	b.n	8005834 <HAL_GPIO_Init+0x204>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_GPIO_Init+0x204>
 8005832:	2300      	movs	r3, #0
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	f002 0203 	and.w	r2, r2, #3
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	4093      	lsls	r3, r2
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005844:	4935      	ldr	r1, [pc, #212]	@ (800591c <HAL_GPIO_Init+0x2ec>)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	089b      	lsrs	r3, r3, #2
 800584a:	3302      	adds	r3, #2
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005852:	4b38      	ldr	r3, [pc, #224]	@ (8005934 <HAL_GPIO_Init+0x304>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005876:	4a2f      	ldr	r2, [pc, #188]	@ (8005934 <HAL_GPIO_Init+0x304>)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800587c:	4b2d      	ldr	r3, [pc, #180]	@ (8005934 <HAL_GPIO_Init+0x304>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058a0:	4a24      	ldr	r2, [pc, #144]	@ (8005934 <HAL_GPIO_Init+0x304>)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058a6:	4b23      	ldr	r3, [pc, #140]	@ (8005934 <HAL_GPIO_Init+0x304>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005934 <HAL_GPIO_Init+0x304>)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d0:	4b18      	ldr	r3, [pc, #96]	@ (8005934 <HAL_GPIO_Init+0x304>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005934 <HAL_GPIO_Init+0x304>)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3301      	adds	r3, #1
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	f67f aea2 	bls.w	800564c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	3724      	adds	r7, #36	@ 0x24
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800
 800591c:	40013800 	.word	0x40013800
 8005920:	40020000 	.word	0x40020000
 8005924:	40020400 	.word	0x40020400
 8005928:	40020800 	.word	0x40020800
 800592c:	40020c00 	.word	0x40020c00
 8005930:	40021000 	.word	0x40021000
 8005934:	40013c00 	.word	0x40013c00

08005938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	e001      	b.n	800595a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
 8005974:	4613      	mov	r3, r2
 8005976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005978:	787b      	ldrb	r3, [r7, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005984:	e003      	b.n	800598e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	041a      	lsls	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	619a      	str	r2, [r3, #24]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e12b      	b.n	8005c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff f8ee 	bl	8004ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	@ 0x24
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a00:	f001 f8da 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 8005a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4a81      	ldr	r2, [pc, #516]	@ (8005c10 <HAL_I2C_Init+0x274>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d807      	bhi.n	8005a20 <HAL_I2C_Init+0x84>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4a80      	ldr	r2, [pc, #512]	@ (8005c14 <HAL_I2C_Init+0x278>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	bf94      	ite	ls
 8005a18:	2301      	movls	r3, #1
 8005a1a:	2300      	movhi	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e006      	b.n	8005a2e <HAL_I2C_Init+0x92>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a7d      	ldr	r2, [pc, #500]	@ (8005c18 <HAL_I2C_Init+0x27c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	bf94      	ite	ls
 8005a28:	2301      	movls	r3, #1
 8005a2a:	2300      	movhi	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0e7      	b.n	8005c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a78      	ldr	r2, [pc, #480]	@ (8005c1c <HAL_I2C_Init+0x280>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0c9b      	lsrs	r3, r3, #18
 8005a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a6a      	ldr	r2, [pc, #424]	@ (8005c10 <HAL_I2C_Init+0x274>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d802      	bhi.n	8005a70 <HAL_I2C_Init+0xd4>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	e009      	b.n	8005a84 <HAL_I2C_Init+0xe8>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	4a69      	ldr	r2, [pc, #420]	@ (8005c20 <HAL_I2C_Init+0x284>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	099b      	lsrs	r3, r3, #6
 8005a82:	3301      	adds	r3, #1
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	495c      	ldr	r1, [pc, #368]	@ (8005c10 <HAL_I2C_Init+0x274>)
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	d819      	bhi.n	8005ad8 <HAL_I2C_Init+0x13c>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1e59      	subs	r1, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ab2:	1c59      	adds	r1, r3, #1
 8005ab4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ab8:	400b      	ands	r3, r1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_I2C_Init+0x138>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1e59      	subs	r1, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005acc:	3301      	adds	r3, #1
 8005ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad2:	e051      	b.n	8005b78 <HAL_I2C_Init+0x1dc>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	e04f      	b.n	8005b78 <HAL_I2C_Init+0x1dc>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d111      	bne.n	8005b04 <HAL_I2C_Init+0x168>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1e58      	subs	r0, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	440b      	add	r3, r1
 8005aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005af2:	3301      	adds	r3, #1
 8005af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e012      	b.n	8005b2a <HAL_I2C_Init+0x18e>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1e58      	subs	r0, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6859      	ldr	r1, [r3, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	0099      	lsls	r1, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_I2C_Init+0x196>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e022      	b.n	8005b78 <HAL_I2C_Init+0x1dc>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10e      	bne.n	8005b58 <HAL_I2C_Init+0x1bc>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1e58      	subs	r0, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6859      	ldr	r1, [r3, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	440b      	add	r3, r1
 8005b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b56:	e00f      	b.n	8005b78 <HAL_I2C_Init+0x1dc>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	1e58      	subs	r0, r3, #1
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6859      	ldr	r1, [r3, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	0099      	lsls	r1, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	6809      	ldr	r1, [r1, #0]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6911      	ldr	r1, [r2, #16]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68d2      	ldr	r2, [r2, #12]
 8005bb2:	4311      	orrs	r1, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	000186a0 	.word	0x000186a0
 8005c14:	001e847f 	.word	0x001e847f
 8005c18:	003d08ff 	.word	0x003d08ff
 8005c1c:	431bde83 	.word	0x431bde83
 8005c20:	10624dd3 	.word	0x10624dd3

08005c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	460b      	mov	r3, r1
 8005c32:	817b      	strh	r3, [r7, #10]
 8005c34:	4613      	mov	r3, r2
 8005c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7ff fb26 	bl	8005288 <HAL_GetTick>
 8005c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	f040 80e0 	bne.w	8005e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	2319      	movs	r3, #25
 8005c52:	2201      	movs	r2, #1
 8005c54:	4970      	ldr	r1, [pc, #448]	@ (8005e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f964 	bl	8005f24 <I2C_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
 8005c64:	e0d3      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_I2C_Master_Transmit+0x50>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0cc      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d007      	beq.n	8005c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2221      	movs	r2, #33	@ 0x21
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	893a      	ldrh	r2, [r7, #8]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a50      	ldr	r2, [pc, #320]	@ (8005e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8005cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cdc:	8979      	ldrh	r1, [r7, #10]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f89c 	bl	8005e20 <I2C_MasterRequestWrite>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e08d      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d08:	e066      	b.n	8005dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	6a39      	ldr	r1, [r7, #32]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fa22 	bl	8006158 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d107      	bne.n	8005d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e06b      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	781a      	ldrb	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d11b      	bne.n	8005dac <HAL_I2C_Master_Transmit+0x188>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d017      	beq.n	8005dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	6a39      	ldr	r1, [r7, #32]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fa19 	bl	80061e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d107      	bne.n	8005dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e01a      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d194      	bne.n	8005d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	00100002 	.word	0x00100002
 8005e1c:	ffff0000 	.word	0xffff0000

08005e20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d006      	beq.n	8005e4a <I2C_MasterRequestWrite+0x2a>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d003      	beq.n	8005e4a <I2C_MasterRequestWrite+0x2a>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e48:	d108      	bne.n	8005e5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e00b      	b.n	8005e74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e60:	2b12      	cmp	r3, #18
 8005e62:	d107      	bne.n	8005e74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f84f 	bl	8005f24 <I2C_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9a:	d103      	bne.n	8005ea4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e035      	b.n	8005f14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb0:	d108      	bne.n	8005ec4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eb2:	897b      	ldrh	r3, [r7, #10]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ec0:	611a      	str	r2, [r3, #16]
 8005ec2:	e01b      	b.n	8005efc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ec4:	897b      	ldrh	r3, [r7, #10]
 8005ec6:	11db      	asrs	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f063 030f 	orn	r3, r3, #15
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	490e      	ldr	r1, [pc, #56]	@ (8005f1c <I2C_MasterRequestWrite+0xfc>)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f898 	bl	8006018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e010      	b.n	8005f14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4907      	ldr	r1, [pc, #28]	@ (8005f20 <I2C_MasterRequestWrite+0x100>)
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f888 	bl	8006018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	00010008 	.word	0x00010008
 8005f20:	00010002 	.word	0x00010002

08005f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f34:	e048      	b.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d044      	beq.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7ff f9a3 	bl	8005288 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d139      	bne.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10d      	bne.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	43da      	mvns	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	e00c      	b.n	8005f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	43da      	mvns	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d116      	bne.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e023      	b.n	8006010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d10d      	bne.n	8005fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	43da      	mvns	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	e00c      	b.n	8006008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	43da      	mvns	r2, r3
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	429a      	cmp	r2, r3
 800600c:	d093      	beq.n	8005f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006026:	e071      	b.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006036:	d123      	bne.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	f043 0204 	orr.w	r2, r3, #4
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e067      	b.n	8006150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d041      	beq.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006088:	f7ff f8fe 	bl	8005288 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d136      	bne.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10c      	bne.n	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	43da      	mvns	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4013      	ands	r3, r2
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	2300      	moveq	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	e00b      	b.n	80060da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	43da      	mvns	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4013      	ands	r3, r2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	f043 0220 	orr.w	r2, r3, #32
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e021      	b.n	8006150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	0c1b      	lsrs	r3, r3, #16
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b01      	cmp	r3, #1
 8006114:	d10c      	bne.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	43da      	mvns	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e00b      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	43da      	mvns	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	bf14      	ite	ne
 8006142:	2301      	movne	r3, #1
 8006144:	2300      	moveq	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	f47f af6d 	bne.w	8006028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006164:	e034      	b.n	80061d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f886 	bl	8006278 <I2C_IsAcknowledgeFailed>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e034      	b.n	80061e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d028      	beq.n	80061d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617e:	f7ff f883 	bl	8005288 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d302      	bcc.n	8006194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11d      	bne.n	80061d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619e:	2b80      	cmp	r3, #128	@ 0x80
 80061a0:	d016      	beq.n	80061d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e007      	b.n	80061e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061da:	2b80      	cmp	r3, #128	@ 0x80
 80061dc:	d1c3      	bne.n	8006166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f4:	e034      	b.n	8006260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f83e 	bl	8006278 <I2C_IsAcknowledgeFailed>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e034      	b.n	8006270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620c:	d028      	beq.n	8006260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800620e:	f7ff f83b 	bl	8005288 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	d302      	bcc.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11d      	bne.n	8006260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d016      	beq.n	8006260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	f043 0220 	orr.w	r2, r3, #32
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e007      	b.n	8006270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b04      	cmp	r3, #4
 800626c:	d1c3      	bne.n	80061f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800628e:	d11b      	bne.n	80062c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006298:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	f043 0204 	orr.w	r2, r3, #4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e267      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d075      	beq.n	80063e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80062f6:	4b88      	ldr	r3, [pc, #544]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d00c      	beq.n	800631c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006302:	4b85      	ldr	r3, [pc, #532]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800630a:	2b08      	cmp	r3, #8
 800630c:	d112      	bne.n	8006334 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800630e:	4b82      	ldr	r3, [pc, #520]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800631a:	d10b      	bne.n	8006334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631c:	4b7e      	ldr	r3, [pc, #504]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d05b      	beq.n	80063e0 <HAL_RCC_OscConfig+0x108>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d157      	bne.n	80063e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e242      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800633c:	d106      	bne.n	800634c <HAL_RCC_OscConfig+0x74>
 800633e:	4b76      	ldr	r3, [pc, #472]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a75      	ldr	r2, [pc, #468]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	e01d      	b.n	8006388 <HAL_RCC_OscConfig+0xb0>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006354:	d10c      	bne.n	8006370 <HAL_RCC_OscConfig+0x98>
 8006356:	4b70      	ldr	r3, [pc, #448]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a6f      	ldr	r2, [pc, #444]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 800635c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	4b6d      	ldr	r3, [pc, #436]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a6c      	ldr	r2, [pc, #432]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e00b      	b.n	8006388 <HAL_RCC_OscConfig+0xb0>
 8006370:	4b69      	ldr	r3, [pc, #420]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a68      	ldr	r2, [pc, #416]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	4b66      	ldr	r3, [pc, #408]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a65      	ldr	r2, [pc, #404]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d013      	beq.n	80063b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006390:	f7fe ff7a 	bl	8005288 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006398:	f7fe ff76 	bl	8005288 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b64      	cmp	r3, #100	@ 0x64
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e207      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCC_OscConfig+0xc0>
 80063b6:	e014      	b.n	80063e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b8:	f7fe ff66 	bl	8005288 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c0:	f7fe ff62 	bl	8005288 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b64      	cmp	r3, #100	@ 0x64
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e1f3      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d2:	4b51      	ldr	r3, [pc, #324]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0xe8>
 80063de:	e000      	b.n	80063e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d063      	beq.n	80064b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063fa:	4b47      	ldr	r3, [pc, #284]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006402:	2b08      	cmp	r3, #8
 8006404:	d11c      	bne.n	8006440 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006406:	4b44      	ldr	r3, [pc, #272]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d116      	bne.n	8006440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006412:	4b41      	ldr	r3, [pc, #260]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCC_OscConfig+0x152>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d001      	beq.n	800642a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e1c7      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642a:	4b3b      	ldr	r3, [pc, #236]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4937      	ldr	r1, [pc, #220]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 800643a:	4313      	orrs	r3, r2
 800643c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800643e:	e03a      	b.n	80064b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d020      	beq.n	800648a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006448:	4b34      	ldr	r3, [pc, #208]	@ (800651c <HAL_RCC_OscConfig+0x244>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644e:	f7fe ff1b 	bl	8005288 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006456:	f7fe ff17 	bl	8005288 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e1a8      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006468:	4b2b      	ldr	r3, [pc, #172]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006474:	4b28      	ldr	r3, [pc, #160]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4925      	ldr	r1, [pc, #148]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 8006484:	4313      	orrs	r3, r2
 8006486:	600b      	str	r3, [r1, #0]
 8006488:	e015      	b.n	80064b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800648a:	4b24      	ldr	r3, [pc, #144]	@ (800651c <HAL_RCC_OscConfig+0x244>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fe fefa 	bl	8005288 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006498:	f7fe fef6 	bl	8005288 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e187      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d016      	beq.n	80064f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ca:	4b15      	ldr	r3, [pc, #84]	@ (8006520 <HAL_RCC_OscConfig+0x248>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d0:	f7fe feda 	bl	8005288 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d8:	f7fe fed6 	bl	8005288 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e167      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <HAL_RCC_OscConfig+0x240>)
 80064ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x200>
 80064f6:	e01b      	b.n	8006530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064f8:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <HAL_RCC_OscConfig+0x248>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064fe:	f7fe fec3 	bl	8005288 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006504:	e00e      	b.n	8006524 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006506:	f7fe febf 	bl	8005288 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d907      	bls.n	8006524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e150      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
 8006518:	40023800 	.word	0x40023800
 800651c:	42470000 	.word	0x42470000
 8006520:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006524:	4b88      	ldr	r3, [pc, #544]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1ea      	bne.n	8006506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8097 	beq.w	800666c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800653e:	2300      	movs	r3, #0
 8006540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006542:	4b81      	ldr	r3, [pc, #516]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10f      	bne.n	800656e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	4b7d      	ldr	r3, [pc, #500]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	4a7c      	ldr	r2, [pc, #496]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655c:	6413      	str	r3, [r2, #64]	@ 0x40
 800655e:	4b7a      	ldr	r3, [pc, #488]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656e:	4b77      	ldr	r3, [pc, #476]	@ (800674c <HAL_RCC_OscConfig+0x474>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d118      	bne.n	80065ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800657a:	4b74      	ldr	r3, [pc, #464]	@ (800674c <HAL_RCC_OscConfig+0x474>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a73      	ldr	r2, [pc, #460]	@ (800674c <HAL_RCC_OscConfig+0x474>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006586:	f7fe fe7f 	bl	8005288 <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658e:	f7fe fe7b 	bl	8005288 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e10c      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a0:	4b6a      	ldr	r3, [pc, #424]	@ (800674c <HAL_RCC_OscConfig+0x474>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0f0      	beq.n	800658e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d106      	bne.n	80065c2 <HAL_RCC_OscConfig+0x2ea>
 80065b4:	4b64      	ldr	r3, [pc, #400]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b8:	4a63      	ldr	r2, [pc, #396]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c0:	e01c      	b.n	80065fc <HAL_RCC_OscConfig+0x324>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b05      	cmp	r3, #5
 80065c8:	d10c      	bne.n	80065e4 <HAL_RCC_OscConfig+0x30c>
 80065ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065d0:	f043 0304 	orr.w	r3, r3, #4
 80065d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065da:	4a5b      	ldr	r2, [pc, #364]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065e2:	e00b      	b.n	80065fc <HAL_RCC_OscConfig+0x324>
 80065e4:	4b58      	ldr	r3, [pc, #352]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e8:	4a57      	ldr	r2, [pc, #348]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f0:	4b55      	ldr	r3, [pc, #340]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f4:	4a54      	ldr	r2, [pc, #336]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80065f6:	f023 0304 	bic.w	r3, r3, #4
 80065fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006604:	f7fe fe40 	bl	8005288 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660a:	e00a      	b.n	8006622 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660c:	f7fe fe3c 	bl	8005288 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800661a:	4293      	cmp	r3, r2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e0cb      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006622:	4b49      	ldr	r3, [pc, #292]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ee      	beq.n	800660c <HAL_RCC_OscConfig+0x334>
 800662e:	e014      	b.n	800665a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006630:	f7fe fe2a 	bl	8005288 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006636:	e00a      	b.n	800664e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006638:	f7fe fe26 	bl	8005288 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006646:	4293      	cmp	r3, r2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e0b5      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664e:	4b3e      	ldr	r3, [pc, #248]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1ee      	bne.n	8006638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d105      	bne.n	800666c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006660:	4b39      	ldr	r3, [pc, #228]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006664:	4a38      	ldr	r2, [pc, #224]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800666a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80a1 	beq.w	80067b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006676:	4b34      	ldr	r3, [pc, #208]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	2b08      	cmp	r3, #8
 8006680:	d05c      	beq.n	800673c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d141      	bne.n	800670e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668a:	4b31      	ldr	r3, [pc, #196]	@ (8006750 <HAL_RCC_OscConfig+0x478>)
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006690:	f7fe fdfa 	bl	8005288 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fe fdf6 	bl	8005288 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e087      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066aa:	4b27      	ldr	r3, [pc, #156]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	019b      	lsls	r3, r3, #6
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	3b01      	subs	r3, #1
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	491b      	ldr	r1, [pc, #108]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <HAL_RCC_OscConfig+0x478>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e6:	f7fe fdcf 	bl	8005288 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ee:	f7fe fdcb 	bl	8005288 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e05c      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006700:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCC_OscConfig+0x416>
 800670c:	e054      	b.n	80067b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670e:	4b10      	ldr	r3, [pc, #64]	@ (8006750 <HAL_RCC_OscConfig+0x478>)
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7fe fdb8 	bl	8005288 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800671c:	f7fe fdb4 	bl	8005288 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e045      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672e:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <HAL_RCC_OscConfig+0x470>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f0      	bne.n	800671c <HAL_RCC_OscConfig+0x444>
 800673a:	e03d      	b.n	80067b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d107      	bne.n	8006754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e038      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
 8006748:	40023800 	.word	0x40023800
 800674c:	40007000 	.word	0x40007000
 8006750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006754:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <HAL_RCC_OscConfig+0x4ec>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d028      	beq.n	80067b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676c:	429a      	cmp	r2, r3
 800676e:	d121      	bne.n	80067b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677a:	429a      	cmp	r2, r3
 800677c:	d11a      	bne.n	80067b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006784:	4013      	ands	r3, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800678a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800678c:	4293      	cmp	r3, r2
 800678e:	d111      	bne.n	80067b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	3b01      	subs	r3, #1
 800679e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d107      	bne.n	80067b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800

080067c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0cc      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067dc:	4b68      	ldr	r3, [pc, #416]	@ (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d90c      	bls.n	8006804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b65      	ldr	r3, [pc, #404]	@ (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f2:	4b63      	ldr	r3, [pc, #396]	@ (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0b8      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800681c:	4b59      	ldr	r3, [pc, #356]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a58      	ldr	r2, [pc, #352]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006834:	4b53      	ldr	r3, [pc, #332]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	4a52      	ldr	r2, [pc, #328]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800683e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006840:	4b50      	ldr	r3, [pc, #320]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	494d      	ldr	r1, [pc, #308]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d044      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006866:	4b47      	ldr	r3, [pc, #284]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d119      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e07f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d003      	beq.n	8006886 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006882:	2b03      	cmp	r3, #3
 8006884:	d107      	bne.n	8006896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006886:	4b3f      	ldr	r3, [pc, #252]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e06f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006896:	4b3b      	ldr	r3, [pc, #236]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e067      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068a6:	4b37      	ldr	r3, [pc, #220]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 0203 	bic.w	r2, r3, #3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	4934      	ldr	r1, [pc, #208]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068b8:	f7fe fce6 	bl	8005288 <HAL_GetTick>
 80068bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c0:	f7fe fce2 	bl	8005288 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e04f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 020c 	and.w	r2, r3, #12
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d1eb      	bne.n	80068c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b25      	ldr	r3, [pc, #148]	@ (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d20c      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b22      	ldr	r3, [pc, #136]	@ (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e032      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800691c:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4916      	ldr	r1, [pc, #88]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800693a:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	490e      	ldr	r1, [pc, #56]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	4313      	orrs	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800694e:	f000 f821 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 8006952:	4602      	mov	r2, r0
 8006954:	4b0b      	ldr	r3, [pc, #44]	@ (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	490a      	ldr	r1, [pc, #40]	@ (8006988 <HAL_RCC_ClockConfig+0x1c0>)
 8006960:	5ccb      	ldrb	r3, [r1, r3]
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	4a09      	ldr	r2, [pc, #36]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 8006968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fc46 	bl	8005200 <HAL_InitTick>

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40023c00 	.word	0x40023c00
 8006984:	40023800 	.word	0x40023800
 8006988:	08013d3c 	.word	0x08013d3c
 800698c:	20000014 	.word	0x20000014
 8006990:	20000018 	.word	0x20000018

08006994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006998:	b094      	sub	sp, #80	@ 0x50
 800699a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ac:	4b79      	ldr	r3, [pc, #484]	@ (8006b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 030c 	and.w	r3, r3, #12
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d00d      	beq.n	80069d4 <HAL_RCC_GetSysClockFreq+0x40>
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	f200 80e1 	bhi.w	8006b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_RCC_GetSysClockFreq+0x34>
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d003      	beq.n	80069ce <HAL_RCC_GetSysClockFreq+0x3a>
 80069c6:	e0db      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069c8:	4b73      	ldr	r3, [pc, #460]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80069ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069cc:	e0db      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ce:	4b73      	ldr	r3, [pc, #460]	@ (8006b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069d2:	e0d8      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069de:	4b6d      	ldr	r3, [pc, #436]	@ (8006b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d063      	beq.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	2200      	movs	r2, #0
 80069f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80069fe:	2300      	movs	r3, #0
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a06:	4622      	mov	r2, r4
 8006a08:	462b      	mov	r3, r5
 8006a0a:	f04f 0000 	mov.w	r0, #0
 8006a0e:	f04f 0100 	mov.w	r1, #0
 8006a12:	0159      	lsls	r1, r3, #5
 8006a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a18:	0150      	lsls	r0, r2, #5
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4621      	mov	r1, r4
 8006a20:	1a51      	subs	r1, r2, r1
 8006a22:	6139      	str	r1, [r7, #16]
 8006a24:	4629      	mov	r1, r5
 8006a26:	eb63 0301 	sbc.w	r3, r3, r1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a38:	4659      	mov	r1, fp
 8006a3a:	018b      	lsls	r3, r1, #6
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a42:	4651      	mov	r1, sl
 8006a44:	018a      	lsls	r2, r1, #6
 8006a46:	4651      	mov	r1, sl
 8006a48:	ebb2 0801 	subs.w	r8, r2, r1
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a66:	4690      	mov	r8, r2
 8006a68:	4699      	mov	r9, r3
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	eb18 0303 	adds.w	r3, r8, r3
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	462b      	mov	r3, r5
 8006a74:	eb49 0303 	adc.w	r3, r9, r3
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a86:	4629      	mov	r1, r5
 8006a88:	024b      	lsls	r3, r1, #9
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a90:	4621      	mov	r1, r4
 8006a92:	024a      	lsls	r2, r1, #9
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006aa4:	f7fa f958 	bl	8000d58 <__aeabi_uldivmod>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4613      	mov	r3, r2
 8006aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ab0:	e058      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ab2:	4b38      	ldr	r3, [pc, #224]	@ (8006b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	4611      	mov	r1, r2
 8006abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006acc:	4642      	mov	r2, r8
 8006ace:	464b      	mov	r3, r9
 8006ad0:	f04f 0000 	mov.w	r0, #0
 8006ad4:	f04f 0100 	mov.w	r1, #0
 8006ad8:	0159      	lsls	r1, r3, #5
 8006ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ade:	0150      	lsls	r0, r2, #5
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006aea:	4649      	mov	r1, r9
 8006aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b04:	ebb2 040a 	subs.w	r4, r2, sl
 8006b08:	eb63 050b 	sbc.w	r5, r3, fp
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	00eb      	lsls	r3, r5, #3
 8006b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1a:	00e2      	lsls	r2, r4, #3
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	4643      	mov	r3, r8
 8006b22:	18e3      	adds	r3, r4, r3
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	464b      	mov	r3, r9
 8006b28:	eb45 0303 	adc.w	r3, r5, r3
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	028b      	lsls	r3, r1, #10
 8006b3e:	4621      	mov	r1, r4
 8006b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b44:	4621      	mov	r1, r4
 8006b46:	028a      	lsls	r2, r1, #10
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b4e:	2200      	movs	r2, #0
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	61fa      	str	r2, [r7, #28]
 8006b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b58:	f7fa f8fe 	bl	8000d58 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4613      	mov	r3, r2
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b64:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b7e:	e002      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b80:	4b05      	ldr	r3, [pc, #20]	@ (8006b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3750      	adds	r7, #80	@ 0x50
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800
 8006b98:	00f42400 	.word	0x00f42400
 8006b9c:	007a1200 	.word	0x007a1200

08006ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	@ (8006bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000014 	.word	0x20000014

08006bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bbc:	f7ff fff0 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	0a9b      	lsrs	r3, r3, #10
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4903      	ldr	r1, [pc, #12]	@ (8006bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	08013d4c 	.word	0x08013d4c

08006be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006be4:	f7ff ffdc 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	0b5b      	lsrs	r3, r3, #13
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	4903      	ldr	r1, [pc, #12]	@ (8006c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf6:	5ccb      	ldrb	r3, [r1, r3]
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40023800 	.word	0x40023800
 8006c04:	08013d4c 	.word	0x08013d4c

08006c08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d038      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c30:	4b68      	ldr	r3, [pc, #416]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c36:	f7fe fb27 	bl	8005288 <HAL_GetTick>
 8006c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c3c:	e008      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c3e:	f7fe fb23 	bl	8005288 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e0bd      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c50:	4b61      	ldr	r3, [pc, #388]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1f0      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	019b      	lsls	r3, r3, #6
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	071b      	lsls	r3, r3, #28
 8006c6e:	495a      	ldr	r1, [pc, #360]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c76:	4b57      	ldr	r3, [pc, #348]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c7c:	f7fe fb04 	bl	8005288 <HAL_GetTick>
 8006c80:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c84:	f7fe fb00 	bl	8005288 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e09a      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c96:	4b50      	ldr	r3, [pc, #320]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8083 	beq.w	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	4b48      	ldr	r3, [pc, #288]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb8:	4a47      	ldr	r2, [pc, #284]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cc0:	4b45      	ldr	r3, [pc, #276]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ccc:	4b43      	ldr	r3, [pc, #268]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a42      	ldr	r2, [pc, #264]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd8:	f7fe fad6 	bl	8005288 <HAL_GetTick>
 8006cdc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce0:	f7fe fad2 	bl	8005288 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e06c      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cfe:	4b36      	ldr	r3, [pc, #216]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d06:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d02f      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d028      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d24:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d26:	4b2e      	ldr	r3, [pc, #184]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d28:	2201      	movs	r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d32:	4a29      	ldr	r2, [pc, #164]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d38:	4b27      	ldr	r3, [pc, #156]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d114      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d44:	f7fe faa0 	bl	8005288 <HAL_GetTick>
 8006d48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4c:	f7fe fa9c 	bl	8005288 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e034      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d62:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0ee      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006d7c:	4b16      	ldr	r3, [pc, #88]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d90:	4911      	ldr	r1, [pc, #68]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
 8006d96:	e005      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006da2:	6093      	str	r3, [r2, #8]
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db0:	4909      	ldr	r1, [pc, #36]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7d1a      	ldrb	r2, [r3, #20]
 8006dc6:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006dc8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	42470068 	.word	0x42470068
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	40007000 	.word	0x40007000
 8006de0:	42470e40 	.word	0x42470e40
 8006de4:	424711e0 	.word	0x424711e0

08006de8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e073      	b.n	8006ee2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7f5b      	ldrb	r3, [r3, #29]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fd ff12 	bl	8004c34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d055      	beq.n	8006ed0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	22ca      	movs	r2, #202	@ 0xca
 8006e2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2253      	movs	r2, #83	@ 0x53
 8006e32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fb31 	bl	800749c <RTC_EnterInitMode>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d12c      	bne.n	8006e9e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e56:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6899      	ldr	r1, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	68d2      	ldr	r2, [r2, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6919      	ldr	r1, [r3, #16]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	041a      	lsls	r2, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb38 	bl	800750a <RTC_ExitInitMode>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006eb2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	22ff      	movs	r2, #255	@ 0xff
 8006ecc:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ece:	e001      	b.n	8006ed4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006eea:	b590      	push	{r4, r7, lr}
 8006eec:	b087      	sub	sp, #28
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	7f1b      	ldrb	r3, [r3, #28]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_RTC_SetTime+0x1c>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e087      	b.n	8007016 <HAL_RTC_SetTime+0x12c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d126      	bne.n	8006f66 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fb0f 	bl	8007554 <RTC_ByteToBcd2>
 8006f36:	4603      	mov	r3, r0
 8006f38:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fb08 	bl	8007554 <RTC_ByteToBcd2>
 8006f44:	4603      	mov	r3, r0
 8006f46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f48:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	789b      	ldrb	r3, [r3, #2]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fb00 	bl	8007554 <RTC_ByteToBcd2>
 8006f54:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f60:	4313      	orrs	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	e018      	b.n	8006f98 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f86:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	22ca      	movs	r2, #202	@ 0xca
 8006f9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2253      	movs	r2, #83	@ 0x53
 8006fa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fa77 	bl	800749c <RTC_EnterInitMode>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006fb2:	7cfb      	ldrb	r3, [r7, #19]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d120      	bne.n	8006ffa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006fc2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006fc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006fd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6899      	ldr	r1, [r3, #8]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fa8a 	bl	800750a <RTC_ExitInitMode>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ffa:	7cfb      	ldrb	r3, [r7, #19]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	22ff      	movs	r2, #255	@ 0xff
 800700c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]

  return status;
 8007014:	7cfb      	ldrb	r3, [r7, #19]
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd90      	pop	{r4, r7, pc}

0800701e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800701e:	b590      	push	{r4, r7, lr}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	7f1b      	ldrb	r3, [r3, #28]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_RTC_SetDate+0x1c>
 8007036:	2302      	movs	r3, #2
 8007038:	e071      	b.n	800711e <HAL_RTC_SetDate+0x100>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2202      	movs	r2, #2
 8007044:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10e      	bne.n	800706a <HAL_RTC_SetDate+0x4c>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	f023 0310 	bic.w	r3, r3, #16
 8007060:	b2db      	uxtb	r3, r3
 8007062:	330a      	adds	r3, #10
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11c      	bne.n	80070aa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	78db      	ldrb	r3, [r3, #3]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fa6d 	bl	8007554 <RTC_ByteToBcd2>
 800707a:	4603      	mov	r3, r0
 800707c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fa66 	bl	8007554 <RTC_ByteToBcd2>
 8007088:	4603      	mov	r3, r0
 800708a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800708c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	789b      	ldrb	r3, [r3, #2]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fa5e 	bl	8007554 <RTC_ByteToBcd2>
 8007098:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800709a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e00e      	b.n	80070c8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	78db      	ldrb	r3, [r3, #3]
 80070ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070b6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	22ca      	movs	r2, #202	@ 0xca
 80070ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2253      	movs	r2, #83	@ 0x53
 80070d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f9df 	bl	800749c <RTC_EnterInitMode>
 80070de:	4603      	mov	r3, r0
 80070e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80070e2:	7cfb      	ldrb	r3, [r7, #19]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10c      	bne.n	8007102 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80070f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80070f6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fa06 	bl	800750a <RTC_ExitInitMode>
 80070fe:	4603      	mov	r3, r0
 8007100:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007102:	7cfb      	ldrb	r3, [r7, #19]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	22ff      	movs	r2, #255	@ 0xff
 8007114:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	771a      	strb	r2, [r3, #28]

  return status;
 800711c:	7cfb      	ldrb	r3, [r7, #19]
}
 800711e:	4618      	mov	r0, r3
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd90      	pop	{r4, r7, pc}
	...

08007128 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b089      	sub	sp, #36	@ 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007134:	4b9b      	ldr	r3, [pc, #620]	@ (80073a4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a9b      	ldr	r2, [pc, #620]	@ (80073a8 <HAL_RTC_SetAlarm_IT+0x280>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	0adb      	lsrs	r3, r3, #11
 8007140:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007144:	fb02 f303 	mul.w	r3, r2, r3
 8007148:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7f1b      	ldrb	r3, [r3, #28]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_RTC_SetAlarm_IT+0x36>
 800715a:	2302      	movs	r3, #2
 800715c:	e11e      	b.n	800739c <HAL_RTC_SetAlarm_IT+0x274>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2202      	movs	r2, #2
 8007168:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d137      	bne.n	80071e0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f9e3 	bl	8007554 <RTC_ByteToBcd2>
 800718e:	4603      	mov	r3, r0
 8007190:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f9dc 	bl	8007554 <RTC_ByteToBcd2>
 800719c:	4603      	mov	r3, r0
 800719e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80071a0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	789b      	ldrb	r3, [r3, #2]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f9d4 	bl	8007554 <RTC_ByteToBcd2>
 80071ac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80071ae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	78db      	ldrb	r3, [r3, #3]
 80071b6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80071b8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f9c6 	bl	8007554 <RTC_ByteToBcd2>
 80071c8:	4603      	mov	r3, r0
 80071ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80071cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80071d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80071da:	4313      	orrs	r3, r2
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	e023      	b.n	8007228 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007200:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007206:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	78db      	ldrb	r3, [r3, #3]
 800720c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800720e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007216:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8007218:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800721e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007224:	4313      	orrs	r3, r2
 8007226:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007230:	4313      	orrs	r3, r2
 8007232:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	22ca      	movs	r2, #202	@ 0xca
 800723a:	625a      	str	r2, [r3, #36]	@ 0x24
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2253      	movs	r2, #83	@ 0x53
 8007242:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724c:	d142      	bne.n	80072d4 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800725c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800726e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	3b01      	subs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	22ff      	movs	r2, #255	@ 0xff
 8007282:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2203      	movs	r2, #3
 8007288:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e083      	b.n	800739c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0e6      	beq.n	8007270 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072c0:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072d0:	609a      	str	r2, [r3, #8]
 80072d2:	e04c      	b.n	800736e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80072e2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80072f4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80072f6:	4b2b      	ldr	r3, [pc, #172]	@ (80073a4 <HAL_RTC_SetAlarm_IT+0x27c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2b      	ldr	r2, [pc, #172]	@ (80073a8 <HAL_RTC_SetAlarm_IT+0x280>)
 80072fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007300:	0adb      	lsrs	r3, r3, #11
 8007302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007306:	fb02 f303 	mul.w	r3, r2, r3
 800730a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3b01      	subs	r3, #1
 8007310:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	22ff      	movs	r2, #255	@ 0xff
 800731e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2203      	movs	r2, #3
 8007324:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e035      	b.n	800739c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0e6      	beq.n	800730c <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800735c:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800736c:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800736e:	4b0f      	ldr	r3, [pc, #60]	@ (80073ac <HAL_RTC_SetAlarm_IT+0x284>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a0e      	ldr	r2, [pc, #56]	@ (80073ac <HAL_RTC_SetAlarm_IT+0x284>)
 8007374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007378:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800737a:	4b0c      	ldr	r3, [pc, #48]	@ (80073ac <HAL_RTC_SetAlarm_IT+0x284>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	4a0b      	ldr	r2, [pc, #44]	@ (80073ac <HAL_RTC_SetAlarm_IT+0x284>)
 8007380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007384:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	22ff      	movs	r2, #255	@ 0xff
 800738c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3724      	adds	r7, #36	@ 0x24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}
 80073a4:	20000014 	.word	0x20000014
 80073a8:	10624dd3 	.word	0x10624dd3
 80073ac:	40013c00 	.word	0x40013c00

080073b0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80073b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007438 <HAL_RTC_AlarmIRQHandler+0x88>)
 80073ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80073be:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d012      	beq.n	80073f4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80073ec:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f824 	bl	800743c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d012      	beq.n	8007428 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	b2da      	uxtb	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007420:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8b4 	bl	8007590 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	775a      	strb	r2, [r3, #29]
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40013c00 	.word	0x40013c00

0800743c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a0d      	ldr	r2, [pc, #52]	@ (8007498 <HAL_RTC_WaitForSynchro+0x48>)
 8007462:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007464:	f7fd ff10 	bl	8005288 <HAL_GetTick>
 8007468:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800746a:	e009      	b.n	8007480 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800746c:	f7fd ff0c 	bl	8005288 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800747a:	d901      	bls.n	8007480 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e007      	b.n	8007490 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0ee      	beq.n	800746c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	00013f5f 	.word	0x00013f5f

0800749c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d122      	bne.n	8007500 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80074c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074ca:	f7fd fedd 	bl	8005288 <HAL_GetTick>
 80074ce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80074d0:	e00c      	b.n	80074ec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074d2:	f7fd fed9 	bl	8005288 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074e0:	d904      	bls.n	80074ec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <RTC_EnterInitMode+0x64>
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d1e8      	bne.n	80074d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007524:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff8b 	bl	8007450 <HAL_RTC_WaitForSynchro>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2204      	movs	r2, #4
 8007544:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007562:	e005      	b.n	8007570 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3301      	adds	r3, #1
 8007568:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	3b0a      	subs	r3, #10
 800756e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b09      	cmp	r3, #9
 8007574:	d8f6      	bhi.n	8007564 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	b2da      	uxtb	r2, r3
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	4313      	orrs	r3, r2
 8007582:	b2db      	uxtb	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e07b      	b.n	80076ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c6:	d009      	beq.n	80075dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	61da      	str	r2, [r3, #28]
 80075ce:	e005      	b.n	80075dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fd fb50 	bl	8004c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007660:	ea42 0103 	orr.w	r1, r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 0104 	and.w	r1, r3, #4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	f003 0210 	and.w	r2, r3, #16
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800769c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b088      	sub	sp, #32
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076c6:	f7fd fddf 	bl	8005288 <HAL_GetTick>
 80076ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
 80076de:	e12a      	b.n	8007936 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <HAL_SPI_Transmit+0x36>
 80076e6:	88fb      	ldrh	r3, [r7, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e122      	b.n	8007936 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_SPI_Transmit+0x48>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e11b      	b.n	8007936 <HAL_SPI_Transmit+0x280>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2203      	movs	r2, #3
 800770a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774c:	d10f      	bne.n	800776e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800775c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800776c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007778:	2b40      	cmp	r3, #64	@ 0x40
 800777a:	d007      	beq.n	800778c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800778a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007794:	d152      	bne.n	800783c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_SPI_Transmit+0xee>
 800779e:	8b7b      	ldrh	r3, [r7, #26]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d145      	bne.n	8007830 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077c8:	e032      	b.n	8007830 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d112      	bne.n	80077fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	881a      	ldrh	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077fc:	e018      	b.n	8007830 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fe:	f7fd fd43 	bl	8005288 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d803      	bhi.n	8007816 <HAL_SPI_Transmit+0x160>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d102      	bne.n	800781c <HAL_SPI_Transmit+0x166>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e082      	b.n	8007936 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1c7      	bne.n	80077ca <HAL_SPI_Transmit+0x114>
 800783a:	e053      	b.n	80078e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_SPI_Transmit+0x194>
 8007844:	8b7b      	ldrh	r3, [r7, #26]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d147      	bne.n	80078da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007870:	e033      	b.n	80078da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b02      	cmp	r3, #2
 800787e:	d113      	bne.n	80078a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	7812      	ldrb	r2, [r2, #0]
 800788c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078a6:	e018      	b.n	80078da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078a8:	f7fd fcee 	bl	8005288 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d803      	bhi.n	80078c0 <HAL_SPI_Transmit+0x20a>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d102      	bne.n	80078c6 <HAL_SPI_Transmit+0x210>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d109      	bne.n	80078da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e02d      	b.n	8007936 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1c6      	bne.n	8007872 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fa59 	bl	8007da0 <SPI_EndRxTxTransaction>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08a      	sub	sp, #40	@ 0x28
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800794c:	2301      	movs	r3, #1
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007950:	f7fd fc9a 	bl	8005288 <HAL_GetTick>
 8007954:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800795c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007964:	887b      	ldrh	r3, [r7, #2]
 8007966:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007968:	7ffb      	ldrb	r3, [r7, #31]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d00c      	beq.n	8007988 <HAL_SPI_TransmitReceive+0x4a>
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007974:	d106      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x46>
 800797e:	7ffb      	ldrb	r3, [r7, #31]
 8007980:	2b04      	cmp	r3, #4
 8007982:	d001      	beq.n	8007988 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
 8007986:	e17f      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <HAL_SPI_TransmitReceive+0x5c>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_SPI_TransmitReceive+0x5c>
 8007994:	887b      	ldrh	r3, [r7, #2]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e174      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x6e>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e16d      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d003      	beq.n	80079c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2205      	movs	r2, #5
 80079c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	887a      	ldrh	r2, [r7, #2]
 80079d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	887a      	ldrh	r2, [r7, #2]
 80079de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	887a      	ldrh	r2, [r7, #2]
 80079ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a08:	2b40      	cmp	r3, #64	@ 0x40
 8007a0a:	d007      	beq.n	8007a1c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a24:	d17e      	bne.n	8007b24 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0xf6>
 8007a2e:	8afb      	ldrh	r3, [r7, #22]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d16c      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	1c9a      	adds	r2, r3, #2
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a58:	e059      	b.n	8007b0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d11b      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x162>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d016      	beq.n	8007aa0 <HAL_SPI_TransmitReceive+0x162>
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d113      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7c:	881a      	ldrh	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d119      	bne.n	8007ae2 <HAL_SPI_TransmitReceive+0x1a4>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d014      	beq.n	8007ae2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ae2:	f7fd fbd1 	bl	8005288 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d80d      	bhi.n	8007b0e <HAL_SPI_TransmitReceive+0x1d0>
 8007af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d009      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e0bc      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1a0      	bne.n	8007a5a <HAL_SPI_TransmitReceive+0x11c>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d19b      	bne.n	8007a5a <HAL_SPI_TransmitReceive+0x11c>
 8007b22:	e082      	b.n	8007c2a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x1f4>
 8007b2c:	8afb      	ldrh	r3, [r7, #22]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d171      	bne.n	8007c16 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b58:	e05d      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d11c      	bne.n	8007ba2 <HAL_SPI_TransmitReceive+0x264>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d017      	beq.n	8007ba2 <HAL_SPI_TransmitReceive+0x264>
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d114      	bne.n	8007ba2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	7812      	ldrb	r2, [r2, #0]
 8007b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d119      	bne.n	8007be4 <HAL_SPI_TransmitReceive+0x2a6>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d014      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007be0:	2301      	movs	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007be4:	f7fd fb50 	bl	8005288 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d803      	bhi.n	8007bfc <HAL_SPI_TransmitReceive+0x2be>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d102      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x2c4>
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e038      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d19c      	bne.n	8007b5a <HAL_SPI_TransmitReceive+0x21c>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d197      	bne.n	8007b5a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 f8b6 	bl	8007da0 <SPI_EndRxTxTransaction>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e01d      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007c86:	2300      	movs	r3, #0
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3728      	adds	r7, #40	@ 0x28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ca0:	f7fd faf2 	bl	8005288 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	1a9b      	subs	r3, r3, r2
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cb0:	f7fd faea 	bl	8005288 <HAL_GetTick>
 8007cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cb6:	4b39      	ldr	r3, [pc, #228]	@ (8007d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	015b      	lsls	r3, r3, #5
 8007cbc:	0d1b      	lsrs	r3, r3, #20
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cc6:	e055      	b.n	8007d74 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cce:	d051      	beq.n	8007d74 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cd0:	f7fd fada 	bl	8005288 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d902      	bls.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d13d      	bne.n	8007d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cfe:	d111      	bne.n	8007d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d08:	d004      	beq.n	8007d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d12:	d107      	bne.n	8007d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d2c:	d10f      	bne.n	8007d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e018      	b.n	8007d94 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	e002      	b.n	8007d74 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	bf0c      	ite	eq
 8007d84:	2301      	moveq	r3, #1
 8007d86:	2300      	movne	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d19a      	bne.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3720      	adds	r7, #32
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000014 	.word	0x20000014

08007da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2201      	movs	r2, #1
 8007db4:	2102      	movs	r1, #2
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff ff6a 	bl	8007c90 <SPI_WaitFlagStateUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc6:	f043 0220 	orr.w	r2, r3, #32
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e032      	b.n	8007e38 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e40 <SPI_EndRxTxTransaction+0xa0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e44 <SPI_EndRxTxTransaction+0xa4>)
 8007dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ddc:	0d5b      	lsrs	r3, r3, #21
 8007dde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007de2:	fb02 f303 	mul.w	r3, r2, r3
 8007de6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007df0:	d112      	bne.n	8007e18 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2180      	movs	r1, #128	@ 0x80
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7ff ff47 	bl	8007c90 <SPI_WaitFlagStateUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d016      	beq.n	8007e36 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0c:	f043 0220 	orr.w	r2, r3, #32
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e00f      	b.n	8007e38 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2e:	2b80      	cmp	r3, #128	@ 0x80
 8007e30:	d0f2      	beq.n	8007e18 <SPI_EndRxTxTransaction+0x78>
 8007e32:	e000      	b.n	8007e36 <SPI_EndRxTxTransaction+0x96>
        break;
 8007e34:	bf00      	nop
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000014 	.word	0x20000014
 8007e44:	165e9f81 	.word	0x165e9f81

08007e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e041      	b.n	8007ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fc ff5c 	bl	8004d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f000 fac0 	bl	800840c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e041      	b.n	8007f7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d106      	bne.n	8007f12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f839 	bl	8007f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f000 fa71 	bl	800840c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <HAL_TIM_PWM_Start+0x24>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e022      	b.n	8008002 <HAL_TIM_PWM_Start+0x6a>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d109      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0x3e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	bf14      	ite	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	2300      	moveq	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	e015      	b.n	8008002 <HAL_TIM_PWM_Start+0x6a>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d109      	bne.n	8007ff0 <HAL_TIM_PWM_Start+0x58>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	e008      	b.n	8008002 <HAL_TIM_PWM_Start+0x6a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e068      	b.n	80080dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <HAL_TIM_PWM_Start+0x82>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008018:	e013      	b.n	8008042 <HAL_TIM_PWM_Start+0xaa>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b04      	cmp	r3, #4
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start+0x92>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008028:	e00b      	b.n	8008042 <HAL_TIM_PWM_Start+0xaa>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d104      	bne.n	800803a <HAL_TIM_PWM_Start+0xa2>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008038:	e003      	b.n	8008042 <HAL_TIM_PWM_Start+0xaa>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2201      	movs	r2, #1
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fc8a 	bl	8008964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a23      	ldr	r2, [pc, #140]	@ (80080e4 <HAL_TIM_PWM_Start+0x14c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d107      	bne.n	800806a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1d      	ldr	r2, [pc, #116]	@ (80080e4 <HAL_TIM_PWM_Start+0x14c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d013      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a19      	ldr	r2, [pc, #100]	@ (80080e8 <HAL_TIM_PWM_Start+0x150>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <HAL_TIM_PWM_Start+0x154>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a16      	ldr	r2, [pc, #88]	@ (80080f0 <HAL_TIM_PWM_Start+0x158>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a14      	ldr	r2, [pc, #80]	@ (80080f4 <HAL_TIM_PWM_Start+0x15c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d111      	bne.n	80080ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b06      	cmp	r3, #6
 80080b6:	d010      	beq.n	80080da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c8:	e007      	b.n	80080da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0201 	orr.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40010000 	.word	0x40010000
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800
 80080f0:	40000c00 	.word	0x40000c00
 80080f4:	40014000 	.word	0x40014000

080080f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008112:	2302      	movs	r3, #2
 8008114:	e0ae      	b.n	8008274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b0c      	cmp	r3, #12
 8008122:	f200 809f 	bhi.w	8008264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008126:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008161 	.word	0x08008161
 8008130:	08008265 	.word	0x08008265
 8008134:	08008265 	.word	0x08008265
 8008138:	08008265 	.word	0x08008265
 800813c:	080081a1 	.word	0x080081a1
 8008140:	08008265 	.word	0x08008265
 8008144:	08008265 	.word	0x08008265
 8008148:	08008265 	.word	0x08008265
 800814c:	080081e3 	.word	0x080081e3
 8008150:	08008265 	.word	0x08008265
 8008154:	08008265 	.word	0x08008265
 8008158:	08008265 	.word	0x08008265
 800815c:	08008223 	.word	0x08008223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	4618      	mov	r0, r3
 8008168:	f000 f9d6 	bl	8008518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0208 	orr.w	r2, r2, #8
 800817a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0204 	bic.w	r2, r2, #4
 800818a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6999      	ldr	r1, [r3, #24]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	619a      	str	r2, [r3, #24]
      break;
 800819e:	e064      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fa1c 	bl	80085e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6999      	ldr	r1, [r3, #24]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	021a      	lsls	r2, r3, #8
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	619a      	str	r2, [r3, #24]
      break;
 80081e0:	e043      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fa67 	bl	80086bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69da      	ldr	r2, [r3, #28]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0208 	orr.w	r2, r2, #8
 80081fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0204 	bic.w	r2, r2, #4
 800820c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69d9      	ldr	r1, [r3, #28]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	61da      	str	r2, [r3, #28]
      break;
 8008220:	e023      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 fab1 	bl	8008790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800823c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800824c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69d9      	ldr	r1, [r3, #28]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	021a      	lsls	r2, r3, #8
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	61da      	str	r2, [r3, #28]
      break;
 8008262:	e002      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	75fb      	strb	r3, [r7, #23]
      break;
 8008268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_TIM_ConfigClockSource+0x1c>
 8008294:	2302      	movs	r3, #2
 8008296:	e0b4      	b.n	8008402 <HAL_TIM_ConfigClockSource+0x186>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d0:	d03e      	beq.n	8008350 <HAL_TIM_ConfigClockSource+0xd4>
 80082d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d6:	f200 8087 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 80082da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082de:	f000 8086 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x172>
 80082e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e6:	d87f      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 80082e8:	2b70      	cmp	r3, #112	@ 0x70
 80082ea:	d01a      	beq.n	8008322 <HAL_TIM_ConfigClockSource+0xa6>
 80082ec:	2b70      	cmp	r3, #112	@ 0x70
 80082ee:	d87b      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 80082f0:	2b60      	cmp	r3, #96	@ 0x60
 80082f2:	d050      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0x11a>
 80082f4:	2b60      	cmp	r3, #96	@ 0x60
 80082f6:	d877      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 80082f8:	2b50      	cmp	r3, #80	@ 0x50
 80082fa:	d03c      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0xfa>
 80082fc:	2b50      	cmp	r3, #80	@ 0x50
 80082fe:	d873      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008300:	2b40      	cmp	r3, #64	@ 0x40
 8008302:	d058      	beq.n	80083b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008304:	2b40      	cmp	r3, #64	@ 0x40
 8008306:	d86f      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008308:	2b30      	cmp	r3, #48	@ 0x30
 800830a:	d064      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x15a>
 800830c:	2b30      	cmp	r3, #48	@ 0x30
 800830e:	d86b      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008310:	2b20      	cmp	r3, #32
 8008312:	d060      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008314:	2b20      	cmp	r3, #32
 8008316:	d867      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d05c      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x15a>
 800831c:	2b10      	cmp	r3, #16
 800831e:	d05a      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008320:	e062      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008332:	f000 faf7 	bl	8008924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	609a      	str	r2, [r3, #8]
      break;
 800834e:	e04f      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008360:	f000 fae0 	bl	8008924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008372:	609a      	str	r2, [r3, #8]
      break;
 8008374:	e03c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008382:	461a      	mov	r2, r3
 8008384:	f000 fa54 	bl	8008830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2150      	movs	r1, #80	@ 0x50
 800838e:	4618      	mov	r0, r3
 8008390:	f000 faad 	bl	80088ee <TIM_ITRx_SetConfig>
      break;
 8008394:	e02c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083a2:	461a      	mov	r2, r3
 80083a4:	f000 fa73 	bl	800888e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2160      	movs	r1, #96	@ 0x60
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fa9d 	bl	80088ee <TIM_ITRx_SetConfig>
      break;
 80083b4:	e01c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c2:	461a      	mov	r2, r3
 80083c4:	f000 fa34 	bl	8008830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2140      	movs	r1, #64	@ 0x40
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fa8d 	bl	80088ee <TIM_ITRx_SetConfig>
      break;
 80083d4:	e00c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f000 fa84 	bl	80088ee <TIM_ITRx_SetConfig>
      break;
 80083e6:	e003      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
      break;
 80083ec:	e000      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a37      	ldr	r2, [pc, #220]	@ (80084fc <TIM_Base_SetConfig+0xf0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00f      	beq.n	8008444 <TIM_Base_SetConfig+0x38>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842a:	d00b      	beq.n	8008444 <TIM_Base_SetConfig+0x38>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a34      	ldr	r2, [pc, #208]	@ (8008500 <TIM_Base_SetConfig+0xf4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d007      	beq.n	8008444 <TIM_Base_SetConfig+0x38>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a33      	ldr	r2, [pc, #204]	@ (8008504 <TIM_Base_SetConfig+0xf8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d003      	beq.n	8008444 <TIM_Base_SetConfig+0x38>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a32      	ldr	r2, [pc, #200]	@ (8008508 <TIM_Base_SetConfig+0xfc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d108      	bne.n	8008456 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800844a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a28      	ldr	r2, [pc, #160]	@ (80084fc <TIM_Base_SetConfig+0xf0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d01b      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008464:	d017      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a25      	ldr	r2, [pc, #148]	@ (8008500 <TIM_Base_SetConfig+0xf4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d013      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a24      	ldr	r2, [pc, #144]	@ (8008504 <TIM_Base_SetConfig+0xf8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d00f      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a23      	ldr	r2, [pc, #140]	@ (8008508 <TIM_Base_SetConfig+0xfc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d00b      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a22      	ldr	r2, [pc, #136]	@ (800850c <TIM_Base_SetConfig+0x100>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d007      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a21      	ldr	r2, [pc, #132]	@ (8008510 <TIM_Base_SetConfig+0x104>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_Base_SetConfig+0x8a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a20      	ldr	r2, [pc, #128]	@ (8008514 <TIM_Base_SetConfig+0x108>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d108      	bne.n	80084a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800849c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a0c      	ldr	r2, [pc, #48]	@ (80084fc <TIM_Base_SetConfig+0xf0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d103      	bne.n	80084d6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	691a      	ldr	r2, [r3, #16]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f043 0204 	orr.w	r2, r3, #4
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	601a      	str	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800
 8008508:	40000c00 	.word	0x40000c00
 800850c:	40014000 	.word	0x40014000
 8008510:	40014400 	.word	0x40014400
 8008514:	40014800 	.word	0x40014800

08008518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	f023 0201 	bic.w	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0302 	bic.w	r3, r3, #2
 8008560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a1c      	ldr	r2, [pc, #112]	@ (80085e0 <TIM_OC1_SetConfig+0xc8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d10c      	bne.n	800858e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0308 	bic.w	r3, r3, #8
 800857a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f023 0304 	bic.w	r3, r3, #4
 800858c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a13      	ldr	r2, [pc, #76]	@ (80085e0 <TIM_OC1_SetConfig+0xc8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d111      	bne.n	80085ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800859c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	621a      	str	r2, [r3, #32]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40010000 	.word	0x40010000

080085e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f023 0210 	bic.w	r2, r3, #16
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800861a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0320 	bic.w	r3, r3, #32
 800862e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a1e      	ldr	r2, [pc, #120]	@ (80086b8 <TIM_OC2_SetConfig+0xd4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d10d      	bne.n	8008660 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800864a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	4313      	orrs	r3, r2
 8008656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800865e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <TIM_OC2_SetConfig+0xd4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d113      	bne.n	8008690 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800866e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	621a      	str	r2, [r3, #32]
}
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000

080086bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0303 	bic.w	r3, r3, #3
 80086f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	021b      	lsls	r3, r3, #8
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a1d      	ldr	r2, [pc, #116]	@ (800878c <TIM_OC3_SetConfig+0xd0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d10d      	bne.n	8008736 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a14      	ldr	r2, [pc, #80]	@ (800878c <TIM_OC3_SetConfig+0xd0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d113      	bne.n	8008766 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800874c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	621a      	str	r2, [r3, #32]
}
 8008780:	bf00      	nop
 8008782:	371c      	adds	r7, #28
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40010000 	.word	0x40010000

08008790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	031b      	lsls	r3, r3, #12
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a10      	ldr	r2, [pc, #64]	@ (800882c <TIM_OC4_SetConfig+0x9c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d109      	bne.n	8008804 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	019b      	lsls	r3, r3, #6
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	40010000 	.word	0x40010000

08008830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f023 0201 	bic.w	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800885a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f023 030a 	bic.w	r3, r3, #10
 800886c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800888e:	b480      	push	{r7}
 8008890:	b087      	sub	sp, #28
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	f023 0210 	bic.w	r2, r3, #16
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	031b      	lsls	r3, r3, #12
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	011b      	lsls	r3, r3, #4
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	621a      	str	r2, [r3, #32]
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b085      	sub	sp, #20
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	f043 0307 	orr.w	r3, r3, #7
 8008910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	609a      	str	r2, [r3, #8]
}
 8008918:	bf00      	nop
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800893e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	021a      	lsls	r2, r3, #8
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	431a      	orrs	r2, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4313      	orrs	r3, r2
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	609a      	str	r2, [r3, #8]
}
 8008958:	bf00      	nop
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 031f 	and.w	r3, r3, #31
 8008976:	2201      	movs	r2, #1
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	43db      	mvns	r3, r3
 8008986:	401a      	ands	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1a      	ldr	r2, [r3, #32]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f003 031f 	and.w	r3, r3, #31
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	fa01 f303 	lsl.w	r3, r1, r3
 800899c:	431a      	orrs	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	621a      	str	r2, [r3, #32]
}
 80089a2:	bf00      	nop
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e050      	b.n	8008a6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a1c      	ldr	r2, [pc, #112]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d018      	beq.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a14:	d013      	beq.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a18      	ldr	r2, [pc, #96]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00e      	beq.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a16      	ldr	r2, [pc, #88]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d009      	beq.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a15      	ldr	r2, [pc, #84]	@ (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d004      	beq.n	8008a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a13      	ldr	r2, [pc, #76]	@ (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d10c      	bne.n	8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40010000 	.word	0x40010000
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40000c00 	.word	0x40000c00
 8008a88:	40014000 	.word	0x40014000

08008a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e03d      	b.n	8008b24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e042      	b.n	8008bc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7fc f944 	bl	8004de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2224      	movs	r2, #36	@ 0x24
 8008b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fdd3 	bl	8009720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	@ 0x28
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b20      	cmp	r3, #32
 8008bee:	d175      	bne.n	8008cdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d002      	beq.n	8008bfc <HAL_UART_Transmit+0x2c>
 8008bf6:	88fb      	ldrh	r3, [r7, #6]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e06e      	b.n	8008cde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2221      	movs	r2, #33	@ 0x21
 8008c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c0e:	f7fc fb3b 	bl	8005288 <HAL_GetTick>
 8008c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	88fa      	ldrh	r2, [r7, #6]
 8008c18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	88fa      	ldrh	r2, [r7, #6]
 8008c1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c28:	d108      	bne.n	8008c3c <HAL_UART_Transmit+0x6c>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	e003      	b.n	8008c44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c44:	e02e      	b.n	8008ca4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2180      	movs	r1, #128	@ 0x80
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fb37 	bl	80092c4 <UART_WaitOnFlagUntilTimeout>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e03a      	b.n	8008cde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10b      	bne.n	8008c86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	3302      	adds	r3, #2
 8008c82:	61bb      	str	r3, [r7, #24]
 8008c84:	e007      	b.n	8008c96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	781a      	ldrb	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	3301      	adds	r3, #1
 8008c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1cb      	bne.n	8008c46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2140      	movs	r1, #64	@ 0x40
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fb03 	bl	80092c4 <UART_WaitOnFlagUntilTimeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e006      	b.n	8008cde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e000      	b.n	8008cde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008cdc:	2302      	movs	r3, #2
  }
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	d112      	bne.n	8008d26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <HAL_UART_Receive_IT+0x26>
 8008d06:	88fb      	ldrh	r3, [r7, #6]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e00b      	b.n	8008d28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d16:	88fb      	ldrh	r3, [r7, #6]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fb2a 	bl	8009376 <UART_Start_Receive_IT>
 8008d22:	4603      	mov	r3, r0
 8008d24:	e000      	b.n	8008d28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008d26:	2302      	movs	r3, #2
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0ba      	sub	sp, #232	@ 0xe8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10f      	bne.n	8008d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <HAL_UART_IRQHandler+0x66>
 8008d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc07 	bl	80095a2 <UART_Receive_IT>
      return;
 8008d94:	e273      	b.n	800927e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80de 	beq.w	8008f5c <HAL_UART_IRQHandler+0x22c>
 8008da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80d1 	beq.w	8008f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00b      	beq.n	8008dde <HAL_UART_IRQHandler+0xae>
 8008dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd6:	f043 0201 	orr.w	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00b      	beq.n	8008e02 <HAL_UART_IRQHandler+0xd2>
 8008dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dfa:	f043 0202 	orr.w	r2, r3, #2
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <HAL_UART_IRQHandler+0xf6>
 8008e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1e:	f043 0204 	orr.w	r2, r3, #4
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d011      	beq.n	8008e56 <HAL_UART_IRQHandler+0x126>
 8008e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4e:	f043 0208 	orr.w	r2, r3, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 820a 	beq.w	8009274 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d008      	beq.n	8008e7e <HAL_UART_IRQHandler+0x14e>
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fb92 	bl	80095a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e88:	2b40      	cmp	r3, #64	@ 0x40
 8008e8a:	bf0c      	ite	eq
 8008e8c:	2301      	moveq	r3, #1
 8008e8e:	2300      	movne	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d103      	bne.n	8008eaa <HAL_UART_IRQHandler+0x17a>
 8008ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d04f      	beq.n	8008f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa9d 	bl	80093ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eba:	2b40      	cmp	r3, #64	@ 0x40
 8008ebc:	d141      	bne.n	8008f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3314      	adds	r3, #20
 8008ec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008eea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1d9      	bne.n	8008ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d013      	beq.n	8008f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f16:	4a8a      	ldr	r2, [pc, #552]	@ (8009140 <HAL_UART_IRQHandler+0x410>)
 8008f18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fc fb63 	bl	80055ea <HAL_DMA_Abort_IT>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d016      	beq.n	8008f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f38:	e00e      	b.n	8008f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f9ac 	bl	8009298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	e00a      	b.n	8008f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9a8 	bl	8009298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f48:	e006      	b.n	8008f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9a4 	bl	8009298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008f56:	e18d      	b.n	8009274 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f58:	bf00      	nop
    return;
 8008f5a:	e18b      	b.n	8009274 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	f040 8167 	bne.w	8009234 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 8160 	beq.w	8009234 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f78:	f003 0310 	and.w	r3, r3, #16
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8159 	beq.w	8009234 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa2:	2b40      	cmp	r3, #64	@ 0x40
 8008fa4:	f040 80ce 	bne.w	8009144 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80a9 	beq.w	8009110 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	f080 80a2 	bcs.w	8009110 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fde:	f000 8088 	beq.w	80090f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	330c      	adds	r3, #12
 800900a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800900e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800901a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1d9      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3314      	adds	r3, #20
 8009034:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800903e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009040:	f023 0301 	bic.w	r3, r3, #1
 8009044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3314      	adds	r3, #20
 800904e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009052:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009056:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800905a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e1      	bne.n	800902e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3314      	adds	r3, #20
 8009070:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800907a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800907c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3314      	adds	r3, #20
 800908a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800908e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800909c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e3      	bne.n	800906a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	330c      	adds	r3, #12
 80090b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	330c      	adds	r3, #12
 80090d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80090d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e3      	bne.n	80090b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fc fa0c 	bl	800550a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2202      	movs	r2, #2
 80090f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009100:	b29b      	uxth	r3, r3
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	b29b      	uxth	r3, r3
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f8cf 	bl	80092ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800910e:	e0b3      	b.n	8009278 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009118:	429a      	cmp	r2, r3
 800911a:	f040 80ad 	bne.w	8009278 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009128:	f040 80a6 	bne.w	8009278 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f8b7 	bl	80092ac <HAL_UARTEx_RxEventCallback>
      return;
 800913e:	e09b      	b.n	8009278 <HAL_UART_IRQHandler+0x548>
 8009140:	080094b1 	.word	0x080094b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800914c:	b29b      	uxth	r3, r3
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009158:	b29b      	uxth	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 808e 	beq.w	800927c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8089 	beq.w	800927c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	330c      	adds	r3, #12
 8009170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800917a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	330c      	adds	r3, #12
 800918a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800918e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800919c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e3      	bne.n	800916a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3314      	adds	r3, #20
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	623b      	str	r3, [r7, #32]
   return(result);
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f023 0301 	bic.w	r3, r3, #1
 80091b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3314      	adds	r3, #20
 80091c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80091c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e3      	bne.n	80091a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 0310 	bic.w	r3, r3, #16
 80091fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	330c      	adds	r3, #12
 8009208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800920c:	61fa      	str	r2, [r7, #28]
 800920e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	617b      	str	r3, [r7, #20]
   return(result);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e3      	bne.n	80091e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f83d 	bl	80092ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009232:	e023      	b.n	800927c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800923c:	2b00      	cmp	r3, #0
 800923e:	d009      	beq.n	8009254 <HAL_UART_IRQHandler+0x524>
 8009240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f940 	bl	80094d2 <UART_Transmit_IT>
    return;
 8009252:	e014      	b.n	800927e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00e      	beq.n	800927e <HAL_UART_IRQHandler+0x54e>
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f980 	bl	8009572 <UART_EndTransmit_IT>
    return;
 8009272:	e004      	b.n	800927e <HAL_UART_IRQHandler+0x54e>
    return;
 8009274:	bf00      	nop
 8009276:	e002      	b.n	800927e <HAL_UART_IRQHandler+0x54e>
      return;
 8009278:	bf00      	nop
 800927a:	e000      	b.n	800927e <HAL_UART_IRQHandler+0x54e>
      return;
 800927c:	bf00      	nop
  }
}
 800927e:	37e8      	adds	r7, #232	@ 0xe8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d4:	e03b      	b.n	800934e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d037      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092de:	f7fb ffd3 	bl	8005288 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	6a3a      	ldr	r2, [r7, #32]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d302      	bcc.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e03a      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d023      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b80      	cmp	r3, #128	@ 0x80
 800930a:	d020      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0x8a>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b40      	cmp	r3, #64	@ 0x40
 8009310:	d01d      	beq.n	800934e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b08      	cmp	r3, #8
 800931e:	d116      	bne.n	800934e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f857 	bl	80093ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2208      	movs	r2, #8
 8009340:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e00f      	b.n	800936e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	bf0c      	ite	eq
 800935e:	2301      	moveq	r3, #1
 8009360:	2300      	movne	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	429a      	cmp	r2, r3
 800936a:	d0b4      	beq.n	80092d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	4613      	mov	r3, r2
 8009382:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	88fa      	ldrh	r2, [r7, #6]
 800938e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	88fa      	ldrh	r2, [r7, #6]
 8009394:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2222      	movs	r2, #34	@ 0x22
 80093a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	695a      	ldr	r2, [r3, #20]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0220 	orr.w	r2, r2, #32
 80093da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b095      	sub	sp, #84	@ 0x54
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	330c      	adds	r3, #12
 8009410:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009412:	643a      	str	r2, [r7, #64]	@ 0x40
 8009414:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800941a:	e841 2300 	strex	r3, r2, [r1]
 800941e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1e5      	bne.n	80093f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3314      	adds	r3, #20
 800942c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	61fb      	str	r3, [r7, #28]
   return(result);
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3314      	adds	r3, #20
 8009444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009448:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800944c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e5      	bne.n	8009426 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945e:	2b01      	cmp	r3, #1
 8009460:	d119      	bne.n	8009496 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	60bb      	str	r3, [r7, #8]
   return(result);
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f023 0310 	bic.w	r3, r3, #16
 8009478:	647b      	str	r3, [r7, #68]	@ 0x44
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009482:	61ba      	str	r2, [r7, #24]
 8009484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6979      	ldr	r1, [r7, #20]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	613b      	str	r3, [r7, #16]
   return(result);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e5      	bne.n	8009462 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094a4:	bf00      	nop
 80094a6:	3754      	adds	r7, #84	@ 0x54
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fee7 	bl	8009298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b21      	cmp	r3, #33	@ 0x21
 80094e4:	d13e      	bne.n	8009564 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ee:	d114      	bne.n	800951a <UART_Transmit_IT+0x48>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d110      	bne.n	800951a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800950c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	1c9a      	adds	r2, r3, #2
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	621a      	str	r2, [r3, #32]
 8009518:	e008      	b.n	800952c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	1c59      	adds	r1, r3, #1
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6211      	str	r1, [r2, #32]
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	b29b      	uxth	r3, r3
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	4619      	mov	r1, r3
 800953a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10f      	bne.n	8009560 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800954e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68da      	ldr	r2, [r3, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800955e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e000      	b.n	8009566 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009564:	2302      	movs	r3, #2
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff fe76 	bl	8009284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b08c      	sub	sp, #48	@ 0x30
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b22      	cmp	r3, #34	@ 0x22
 80095bc:	f040 80aa 	bne.w	8009714 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c8:	d115      	bne.n	80095f6 <UART_Receive_IT+0x54>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d111      	bne.n	80095f6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	1c9a      	adds	r2, r3, #2
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80095f4:	e024      	b.n	8009640 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009604:	d007      	beq.n	8009616 <UART_Receive_IT+0x74>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10a      	bne.n	8009624 <UART_Receive_IT+0x82>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b2da      	uxtb	r2, r3
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e008      	b.n	8009636 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009630:	b2da      	uxtb	r2, r3
 8009632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009634:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29b      	uxth	r3, r3
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4619      	mov	r1, r3
 800964e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009650:	2b00      	cmp	r3, #0
 8009652:	d15d      	bne.n	8009710 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 0220 	bic.w	r2, r2, #32
 8009662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695a      	ldr	r2, [r3, #20]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0201 	bic.w	r2, r2, #1
 8009682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009696:	2b01      	cmp	r3, #1
 8009698:	d135      	bne.n	8009706 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	330c      	adds	r3, #12
 80096a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	613b      	str	r3, [r7, #16]
   return(result);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f023 0310 	bic.w	r3, r3, #16
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	330c      	adds	r3, #12
 80096be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096c0:	623a      	str	r2, [r7, #32]
 80096c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	69f9      	ldr	r1, [r7, #28]
 80096c6:	6a3a      	ldr	r2, [r7, #32]
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e5      	bne.n	80096a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0310 	and.w	r3, r3, #16
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d10a      	bne.n	80096f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff fdd4 	bl	80092ac <HAL_UARTEx_RxEventCallback>
 8009704:	e002      	b.n	800970c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fa f8bc 	bl	8003884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	e002      	b.n	8009716 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	e000      	b.n	8009716 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009714:	2302      	movs	r3, #2
  }
}
 8009716:	4618      	mov	r0, r3
 8009718:	3730      	adds	r7, #48	@ 0x30
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009724:	b0c0      	sub	sp, #256	@ 0x100
 8009726:	af00      	add	r7, sp, #0
 8009728:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800973c:	68d9      	ldr	r1, [r3, #12]
 800973e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	ea40 0301 	orr.w	r3, r0, r1
 8009748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800974a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	431a      	orrs	r2, r3
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	431a      	orrs	r2, r3
 8009760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009778:	f021 010c 	bic.w	r1, r1, #12
 800977c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009786:	430b      	orrs	r3, r1
 8009788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800978a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979a:	6999      	ldr	r1, [r3, #24]
 800979c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	ea40 0301 	orr.w	r3, r0, r1
 80097a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	4b8f      	ldr	r3, [pc, #572]	@ (80099ec <UART_SetConfig+0x2cc>)
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d005      	beq.n	80097c0 <UART_SetConfig+0xa0>
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	4b8d      	ldr	r3, [pc, #564]	@ (80099f0 <UART_SetConfig+0x2d0>)
 80097bc:	429a      	cmp	r2, r3
 80097be:	d104      	bne.n	80097ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097c0:	f7fd fa0e 	bl	8006be0 <HAL_RCC_GetPCLK2Freq>
 80097c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80097c8:	e003      	b.n	80097d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097ca:	f7fd f9f5 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 80097ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097dc:	f040 810c 	bne.w	80099f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80097ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80097f2:	4622      	mov	r2, r4
 80097f4:	462b      	mov	r3, r5
 80097f6:	1891      	adds	r1, r2, r2
 80097f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80097fa:	415b      	adcs	r3, r3
 80097fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009802:	4621      	mov	r1, r4
 8009804:	eb12 0801 	adds.w	r8, r2, r1
 8009808:	4629      	mov	r1, r5
 800980a:	eb43 0901 	adc.w	r9, r3, r1
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800981a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800981e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009822:	4690      	mov	r8, r2
 8009824:	4699      	mov	r9, r3
 8009826:	4623      	mov	r3, r4
 8009828:	eb18 0303 	adds.w	r3, r8, r3
 800982c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009830:	462b      	mov	r3, r5
 8009832:	eb49 0303 	adc.w	r3, r9, r3
 8009836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800983a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009846:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800984a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800984e:	460b      	mov	r3, r1
 8009850:	18db      	adds	r3, r3, r3
 8009852:	653b      	str	r3, [r7, #80]	@ 0x50
 8009854:	4613      	mov	r3, r2
 8009856:	eb42 0303 	adc.w	r3, r2, r3
 800985a:	657b      	str	r3, [r7, #84]	@ 0x54
 800985c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009864:	f7f7 fa78 	bl	8000d58 <__aeabi_uldivmod>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4b61      	ldr	r3, [pc, #388]	@ (80099f4 <UART_SetConfig+0x2d4>)
 800986e:	fba3 2302 	umull	r2, r3, r3, r2
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	011c      	lsls	r4, r3, #4
 8009876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800987a:	2200      	movs	r2, #0
 800987c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009880:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009888:	4642      	mov	r2, r8
 800988a:	464b      	mov	r3, r9
 800988c:	1891      	adds	r1, r2, r2
 800988e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009890:	415b      	adcs	r3, r3
 8009892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009898:	4641      	mov	r1, r8
 800989a:	eb12 0a01 	adds.w	sl, r2, r1
 800989e:	4649      	mov	r1, r9
 80098a0:	eb43 0b01 	adc.w	fp, r3, r1
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098b8:	4692      	mov	sl, r2
 80098ba:	469b      	mov	fp, r3
 80098bc:	4643      	mov	r3, r8
 80098be:	eb1a 0303 	adds.w	r3, sl, r3
 80098c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098c6:	464b      	mov	r3, r9
 80098c8:	eb4b 0303 	adc.w	r3, fp, r3
 80098cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80098e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098e4:	460b      	mov	r3, r1
 80098e6:	18db      	adds	r3, r3, r3
 80098e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80098ea:	4613      	mov	r3, r2
 80098ec:	eb42 0303 	adc.w	r3, r2, r3
 80098f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80098f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80098fa:	f7f7 fa2d 	bl	8000d58 <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4611      	mov	r1, r2
 8009904:	4b3b      	ldr	r3, [pc, #236]	@ (80099f4 <UART_SetConfig+0x2d4>)
 8009906:	fba3 2301 	umull	r2, r3, r3, r1
 800990a:	095b      	lsrs	r3, r3, #5
 800990c:	2264      	movs	r2, #100	@ 0x64
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	1acb      	subs	r3, r1, r3
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800991a:	4b36      	ldr	r3, [pc, #216]	@ (80099f4 <UART_SetConfig+0x2d4>)
 800991c:	fba3 2302 	umull	r2, r3, r3, r2
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009928:	441c      	add	r4, r3
 800992a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800992e:	2200      	movs	r2, #0
 8009930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009934:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800993c:	4642      	mov	r2, r8
 800993e:	464b      	mov	r3, r9
 8009940:	1891      	adds	r1, r2, r2
 8009942:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009944:	415b      	adcs	r3, r3
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800994c:	4641      	mov	r1, r8
 800994e:	1851      	adds	r1, r2, r1
 8009950:	6339      	str	r1, [r7, #48]	@ 0x30
 8009952:	4649      	mov	r1, r9
 8009954:	414b      	adcs	r3, r1
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	f04f 0300 	mov.w	r3, #0
 8009960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009964:	4659      	mov	r1, fp
 8009966:	00cb      	lsls	r3, r1, #3
 8009968:	4651      	mov	r1, sl
 800996a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800996e:	4651      	mov	r1, sl
 8009970:	00ca      	lsls	r2, r1, #3
 8009972:	4610      	mov	r0, r2
 8009974:	4619      	mov	r1, r3
 8009976:	4603      	mov	r3, r0
 8009978:	4642      	mov	r2, r8
 800997a:	189b      	adds	r3, r3, r2
 800997c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009980:	464b      	mov	r3, r9
 8009982:	460a      	mov	r2, r1
 8009984:	eb42 0303 	adc.w	r3, r2, r3
 8009988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800998c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009998:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800999c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099a0:	460b      	mov	r3, r1
 80099a2:	18db      	adds	r3, r3, r3
 80099a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099a6:	4613      	mov	r3, r2
 80099a8:	eb42 0303 	adc.w	r3, r2, r3
 80099ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099b6:	f7f7 f9cf 	bl	8000d58 <__aeabi_uldivmod>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4b0d      	ldr	r3, [pc, #52]	@ (80099f4 <UART_SetConfig+0x2d4>)
 80099c0:	fba3 1302 	umull	r1, r3, r3, r2
 80099c4:	095b      	lsrs	r3, r3, #5
 80099c6:	2164      	movs	r1, #100	@ 0x64
 80099c8:	fb01 f303 	mul.w	r3, r1, r3
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	3332      	adds	r3, #50	@ 0x32
 80099d2:	4a08      	ldr	r2, [pc, #32]	@ (80099f4 <UART_SetConfig+0x2d4>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	f003 0207 	and.w	r2, r3, #7
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4422      	add	r2, r4
 80099e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099e8:	e106      	b.n	8009bf8 <UART_SetConfig+0x4d8>
 80099ea:	bf00      	nop
 80099ec:	40011000 	.word	0x40011000
 80099f0:	40011400 	.word	0x40011400
 80099f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a0a:	4642      	mov	r2, r8
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	1891      	adds	r1, r2, r2
 8009a10:	6239      	str	r1, [r7, #32]
 8009a12:	415b      	adcs	r3, r3
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a1a:	4641      	mov	r1, r8
 8009a1c:	1854      	adds	r4, r2, r1
 8009a1e:	4649      	mov	r1, r9
 8009a20:	eb43 0501 	adc.w	r5, r3, r1
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	00eb      	lsls	r3, r5, #3
 8009a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a32:	00e2      	lsls	r2, r4, #3
 8009a34:	4614      	mov	r4, r2
 8009a36:	461d      	mov	r5, r3
 8009a38:	4643      	mov	r3, r8
 8009a3a:	18e3      	adds	r3, r4, r3
 8009a3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a40:	464b      	mov	r3, r9
 8009a42:	eb45 0303 	adc.w	r3, r5, r3
 8009a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	f04f 0300 	mov.w	r3, #0
 8009a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a66:	4629      	mov	r1, r5
 8009a68:	008b      	lsls	r3, r1, #2
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a70:	4621      	mov	r1, r4
 8009a72:	008a      	lsls	r2, r1, #2
 8009a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a78:	f7f7 f96e 	bl	8000d58 <__aeabi_uldivmod>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4b60      	ldr	r3, [pc, #384]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009a82:	fba3 2302 	umull	r2, r3, r3, r2
 8009a86:	095b      	lsrs	r3, r3, #5
 8009a88:	011c      	lsls	r4, r3, #4
 8009a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	1891      	adds	r1, r2, r2
 8009aa2:	61b9      	str	r1, [r7, #24]
 8009aa4:	415b      	adcs	r3, r3
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009aac:	4641      	mov	r1, r8
 8009aae:	1851      	adds	r1, r2, r1
 8009ab0:	6139      	str	r1, [r7, #16]
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	414b      	adcs	r3, r1
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	f04f 0300 	mov.w	r3, #0
 8009ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ac4:	4659      	mov	r1, fp
 8009ac6:	00cb      	lsls	r3, r1, #3
 8009ac8:	4651      	mov	r1, sl
 8009aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ace:	4651      	mov	r1, sl
 8009ad0:	00ca      	lsls	r2, r1, #3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4642      	mov	r2, r8
 8009ada:	189b      	adds	r3, r3, r2
 8009adc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	460a      	mov	r2, r1
 8009ae4:	eb42 0303 	adc.w	r3, r2, r3
 8009ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009af6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	f04f 0300 	mov.w	r3, #0
 8009b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b04:	4649      	mov	r1, r9
 8009b06:	008b      	lsls	r3, r1, #2
 8009b08:	4641      	mov	r1, r8
 8009b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b0e:	4641      	mov	r1, r8
 8009b10:	008a      	lsls	r2, r1, #2
 8009b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b16:	f7f7 f91f 	bl	8000d58 <__aeabi_uldivmod>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4b38      	ldr	r3, [pc, #224]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009b22:	fba3 2301 	umull	r2, r3, r3, r1
 8009b26:	095b      	lsrs	r3, r3, #5
 8009b28:	2264      	movs	r2, #100	@ 0x64
 8009b2a:	fb02 f303 	mul.w	r3, r2, r3
 8009b2e:	1acb      	subs	r3, r1, r3
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	3332      	adds	r3, #50	@ 0x32
 8009b34:	4a33      	ldr	r2, [pc, #204]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009b36:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3a:	095b      	lsrs	r3, r3, #5
 8009b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b40:	441c      	add	r4, r3
 8009b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b46:	2200      	movs	r2, #0
 8009b48:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b50:	4642      	mov	r2, r8
 8009b52:	464b      	mov	r3, r9
 8009b54:	1891      	adds	r1, r2, r2
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	415b      	adcs	r3, r3
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b60:	4641      	mov	r1, r8
 8009b62:	1851      	adds	r1, r2, r1
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	4649      	mov	r1, r9
 8009b68:	414b      	adcs	r3, r1
 8009b6a:	607b      	str	r3, [r7, #4]
 8009b6c:	f04f 0200 	mov.w	r2, #0
 8009b70:	f04f 0300 	mov.w	r3, #0
 8009b74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b78:	4659      	mov	r1, fp
 8009b7a:	00cb      	lsls	r3, r1, #3
 8009b7c:	4651      	mov	r1, sl
 8009b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b82:	4651      	mov	r1, sl
 8009b84:	00ca      	lsls	r2, r1, #3
 8009b86:	4610      	mov	r0, r2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4642      	mov	r2, r8
 8009b8e:	189b      	adds	r3, r3, r2
 8009b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b92:	464b      	mov	r3, r9
 8009b94:	460a      	mov	r2, r1
 8009b96:	eb42 0303 	adc.w	r3, r2, r3
 8009b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ba6:	667a      	str	r2, [r7, #100]	@ 0x64
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	008b      	lsls	r3, r1, #2
 8009bb8:	4641      	mov	r1, r8
 8009bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	008a      	lsls	r2, r1, #2
 8009bc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009bc6:	f7f7 f8c7 	bl	8000d58 <__aeabi_uldivmod>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4b0d      	ldr	r3, [pc, #52]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bd4:	095b      	lsrs	r3, r3, #5
 8009bd6:	2164      	movs	r1, #100	@ 0x64
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	3332      	adds	r3, #50	@ 0x32
 8009be2:	4a08      	ldr	r2, [pc, #32]	@ (8009c04 <UART_SetConfig+0x4e4>)
 8009be4:	fba2 2303 	umull	r2, r3, r2, r3
 8009be8:	095b      	lsrs	r3, r3, #5
 8009bea:	f003 020f 	and.w	r2, r3, #15
 8009bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4422      	add	r2, r4
 8009bf6:	609a      	str	r2, [r3, #8]
}
 8009bf8:	bf00      	nop
 8009bfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c04:	51eb851f 	.word	0x51eb851f

08009c08 <__NVIC_SetPriority>:
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	6039      	str	r1, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	db0a      	blt.n	8009c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	490c      	ldr	r1, [pc, #48]	@ (8009c54 <__NVIC_SetPriority+0x4c>)
 8009c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c26:	0112      	lsls	r2, r2, #4
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009c30:	e00a      	b.n	8009c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	4908      	ldr	r1, [pc, #32]	@ (8009c58 <__NVIC_SetPriority+0x50>)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	3b04      	subs	r3, #4
 8009c40:	0112      	lsls	r2, r2, #4
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	440b      	add	r3, r1
 8009c46:	761a      	strb	r2, [r3, #24]
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	e000e100 	.word	0xe000e100
 8009c58:	e000ed00 	.word	0xe000ed00

08009c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009c60:	2100      	movs	r1, #0
 8009c62:	f06f 0004 	mvn.w	r0, #4
 8009c66:	f7ff ffcf 	bl	8009c08 <__NVIC_SetPriority>
#endif
}
 8009c6a:	bf00      	nop
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c76:	f3ef 8305 	mrs	r3, IPSR
 8009c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c82:	f06f 0305 	mvn.w	r3, #5
 8009c86:	607b      	str	r3, [r7, #4]
 8009c88:	e00c      	b.n	8009ca4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb4 <osKernelInitialize+0x44>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d105      	bne.n	8009c9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c92:	4b08      	ldr	r3, [pc, #32]	@ (8009cb4 <osKernelInitialize+0x44>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	607b      	str	r3, [r7, #4]
 8009c9c:	e002      	b.n	8009ca4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ca4:	687b      	ldr	r3, [r7, #4]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	200024c8 	.word	0x200024c8

08009cb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8009cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009cca:	f06f 0305 	mvn.w	r3, #5
 8009cce:	607b      	str	r3, [r7, #4]
 8009cd0:	e010      	b.n	8009cf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d00 <osKernelStart+0x48>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d109      	bne.n	8009cee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009cda:	f7ff ffbf 	bl	8009c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cde:	4b08      	ldr	r3, [pc, #32]	@ (8009d00 <osKernelStart+0x48>)
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ce4:	f001 fc6e 	bl	800b5c4 <vTaskStartScheduler>
      stat = osOK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	607b      	str	r3, [r7, #4]
 8009cec:	e002      	b.n	8009cf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009cf4:	687b      	ldr	r3, [r7, #4]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	200024c8 	.word	0x200024c8

08009d04 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d0a:	f3ef 8305 	mrs	r3, IPSR
 8009d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d10:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009d16:	f001 fd79 	bl	800b80c <xTaskGetTickCountFromISR>
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	e002      	b.n	8009d24 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009d1e:	f001 fd65 	bl	800b7ec <xTaskGetTickCount>
 8009d22:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009d24:	687b      	ldr	r3, [r7, #4]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009d2e:	b480      	push	{r7}
 8009d30:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	@ 0x38
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d50:	f3ef 8305 	mrs	r3, IPSR
 8009d54:	617b      	str	r3, [r7, #20]
  return(result);
 8009d56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d17e      	bne.n	8009e5a <osThreadNew+0x11a>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d07b      	beq.n	8009e5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d62:	2380      	movs	r3, #128	@ 0x80
 8009d64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d66:	2318      	movs	r3, #24
 8009d68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d045      	beq.n	8009e06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <osThreadNew+0x48>
        name = attr->name;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d008      	beq.n	8009dae <osThreadNew+0x6e>
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	2b38      	cmp	r3, #56	@ 0x38
 8009da0:	d805      	bhi.n	8009dae <osThreadNew+0x6e>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <osThreadNew+0x72>
        return (NULL);
 8009dae:	2300      	movs	r3, #0
 8009db0:	e054      	b.n	8009e5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	089b      	lsrs	r3, r3, #2
 8009dc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00e      	beq.n	8009de8 <osThreadNew+0xa8>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	2b5b      	cmp	r3, #91	@ 0x5b
 8009dd0:	d90a      	bls.n	8009de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d006      	beq.n	8009de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <osThreadNew+0xa8>
        mem = 1;
 8009de2:	2301      	movs	r3, #1
 8009de4:	61bb      	str	r3, [r7, #24]
 8009de6:	e010      	b.n	8009e0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10c      	bne.n	8009e0a <osThreadNew+0xca>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d108      	bne.n	8009e0a <osThreadNew+0xca>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d104      	bne.n	8009e0a <osThreadNew+0xca>
          mem = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	61bb      	str	r3, [r7, #24]
 8009e04:	e001      	b.n	8009e0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d110      	bne.n	8009e32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e18:	9202      	str	r2, [sp, #8]
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6a3a      	ldr	r2, [r7, #32]
 8009e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f001 f970 	bl	800b10c <xTaskCreateStatic>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	613b      	str	r3, [r7, #16]
 8009e30:	e013      	b.n	8009e5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d110      	bne.n	8009e5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	f107 0310 	add.w	r3, r7, #16
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f001 f9be 	bl	800b1cc <xTaskCreate>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d001      	beq.n	8009e5a <osThreadNew+0x11a>
            hTask = NULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e5a:	693b      	ldr	r3, [r7, #16]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3728      	adds	r7, #40	@ 0x28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e6c:	f3ef 8305 	mrs	r3, IPSR
 8009e70:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <osDelay+0x1c>
    stat = osErrorISR;
 8009e78:	f06f 0305 	mvn.w	r3, #5
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	e007      	b.n	8009e90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 fb64 	bl	800b558 <vTaskDelay>
    }
  }

  return (stat);
 8009e90:	68fb      	ldr	r3, [r7, #12]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ea2:	f3ef 8305 	mrs	r3, IPSR
 8009ea6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009eae:	f06f 0305 	mvn.w	r3, #5
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e019      	b.n	8009eea <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009eba:	f001 fc97 	bl	800b7ec <xTaskGetTickCount>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d009      	beq.n	8009ee4 <osDelayUntil+0x4a>
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db06      	blt.n	8009ee4 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009ed6:	f107 0308 	add.w	r3, r7, #8
 8009eda:	6939      	ldr	r1, [r7, #16]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fabb 	bl	800b458 <vTaskDelayUntil>
 8009ee2:	e002      	b.n	8009eea <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009ee4:	f06f 0303 	mvn.w	r3, #3
 8009ee8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009eea:	697b      	ldr	r3, [r7, #20]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009efc:	2300      	movs	r3, #0
 8009efe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f00:	f3ef 8305 	mrs	r3, IPSR
 8009f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f06:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d174      	bne.n	8009ff6 <osMutexNew+0x102>
    if (attr != NULL) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <osMutexNew+0x26>
      type = attr->attr_bits;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	e001      	b.n	8009f1e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <osMutexNew+0x3a>
      rmtx = 1U;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	e001      	b.n	8009f32 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	f003 0308 	and.w	r3, r3, #8
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d15c      	bne.n	8009ff6 <osMutexNew+0x102>
      mem = -1;
 8009f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f40:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d015      	beq.n	8009f74 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d006      	beq.n	8009f5e <osMutexNew+0x6a>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f56:	d902      	bls.n	8009f5e <osMutexNew+0x6a>
          mem = 1;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	613b      	str	r3, [r7, #16]
 8009f5c:	e00c      	b.n	8009f78 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d108      	bne.n	8009f78 <osMutexNew+0x84>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d104      	bne.n	8009f78 <osMutexNew+0x84>
            mem = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	613b      	str	r3, [r7, #16]
 8009f72:	e001      	b.n	8009f78 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d112      	bne.n	8009fa4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	2004      	movs	r0, #4
 8009f8c:	f000 fb1f 	bl	800a5ce <xQueueCreateMutexStatic>
 8009f90:	61f8      	str	r0, [r7, #28]
 8009f92:	e016      	b.n	8009fc2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	f000 fb17 	bl	800a5ce <xQueueCreateMutexStatic>
 8009fa0:	61f8      	str	r0, [r7, #28]
 8009fa2:	e00e      	b.n	8009fc2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10b      	bne.n	8009fc2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009fb0:	2004      	movs	r0, #4
 8009fb2:	f000 faf4 	bl	800a59e <xQueueCreateMutex>
 8009fb6:	61f8      	str	r0, [r7, #28]
 8009fb8:	e003      	b.n	8009fc2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009fba:	2001      	movs	r0, #1
 8009fbc:	f000 faef 	bl	800a59e <xQueueCreateMutex>
 8009fc0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00c      	beq.n	8009fe2 <osMutexNew+0xee>
        if (attr != NULL) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <osMutexNew+0xe2>
          name = attr->name;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e001      	b.n	8009fda <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	69f8      	ldr	r0, [r7, #28]
 8009fde:	f001 f837 	bl	800b050 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d006      	beq.n	8009ff6 <osMutexNew+0x102>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	f043 0301 	orr.w	r3, r3, #1
 8009ff4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009ff6:	69fb      	ldr	r3, [r7, #28]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3720      	adds	r7, #32
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f023 0301 	bic.w	r3, r3, #1
 800a010:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a01e:	f3ef 8305 	mrs	r3, IPSR
 800a022:	60bb      	str	r3, [r7, #8]
  return(result);
 800a024:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a02a:	f06f 0305 	mvn.w	r3, #5
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e02c      	b.n	800a08c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d103      	bne.n	800a040 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a038:	f06f 0303 	mvn.w	r3, #3
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	e025      	b.n	800a08c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d011      	beq.n	800a06a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6938      	ldr	r0, [r7, #16]
 800a04a:	f000 fb10 	bl	800a66e <xQueueTakeMutexRecursive>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b01      	cmp	r3, #1
 800a052:	d01b      	beq.n	800a08c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a05a:	f06f 0301 	mvn.w	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	e014      	b.n	800a08c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a062:	f06f 0302 	mvn.w	r3, #2
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e010      	b.n	800a08c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6938      	ldr	r0, [r7, #16]
 800a06e:	f000 fdb7 	bl	800abe0 <xQueueSemaphoreTake>
 800a072:	4603      	mov	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d009      	beq.n	800a08c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a07e:	f06f 0301 	mvn.w	r3, #1
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	e002      	b.n	800a08c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a086:	f06f 0302 	mvn.w	r3, #2
 800a08a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a08c:	697b      	ldr	r3, [r7, #20]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a096:	b580      	push	{r7, lr}
 800a098:	b086      	sub	sp, #24
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b2:	f3ef 8305 	mrs	r3, IPSR
 800a0b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0b8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a0be:	f06f 0305 	mvn.w	r3, #5
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	e01f      	b.n	800a106 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d103      	bne.n	800a0d4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a0cc:	f06f 0303 	mvn.w	r3, #3
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	e018      	b.n	800a106 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a0da:	6938      	ldr	r0, [r7, #16]
 800a0dc:	f000 fa92 	bl	800a604 <xQueueGiveMutexRecursive>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d00f      	beq.n	800a106 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a0e6:	f06f 0302 	mvn.w	r3, #2
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	e00b      	b.n	800a106 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	6938      	ldr	r0, [r7, #16]
 800a0f6:	f000 faf1 	bl	800a6dc <xQueueGenericSend>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d002      	beq.n	800a106 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a100:	f06f 0302 	mvn.w	r3, #2
 800a104:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a106:	697b      	ldr	r3, [r7, #20]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4a07      	ldr	r2, [pc, #28]	@ (800a13c <vApplicationGetIdleTaskMemory+0x2c>)
 800a120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	4a06      	ldr	r2, [pc, #24]	@ (800a140 <vApplicationGetIdleTaskMemory+0x30>)
 800a126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2280      	movs	r2, #128	@ 0x80
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	200024cc 	.word	0x200024cc
 800a140:	20002528 	.word	0x20002528

0800a144 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a07      	ldr	r2, [pc, #28]	@ (800a170 <vApplicationGetTimerTaskMemory+0x2c>)
 800a154:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4a06      	ldr	r2, [pc, #24]	@ (800a174 <vApplicationGetTimerTaskMemory+0x30>)
 800a15a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a162:	601a      	str	r2, [r3, #0]
}
 800a164:	bf00      	nop
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20002728 	.word	0x20002728
 800a174:	20002784 	.word	0x20002784

0800a178 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f103 0208 	add.w	r2, r3, #8
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f04f 32ff 	mov.w	r2, #4294967295
 800a190:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f103 0208 	add.w	r2, r3, #8
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f103 0208 	add.w	r2, r3, #8
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	689a      	ldr	r2, [r3, #8]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	601a      	str	r2, [r3, #0]
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a230:	d103      	bne.n	800a23a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e00c      	b.n	800a254 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3308      	adds	r3, #8
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	e002      	b.n	800a248 <vListInsert+0x2e>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	429a      	cmp	r2, r3
 800a252:	d2f6      	bcs.n	800a242 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	601a      	str	r2, [r3, #0]
}
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	6892      	ldr	r2, [r2, #8]
 800a2a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6852      	ldr	r2, [r2, #4]
 800a2ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d103      	bne.n	800a2c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	1e5a      	subs	r2, r3, #1
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a306:	bf00      	nop
 800a308:	bf00      	nop
 800a30a:	e7fd      	b.n	800a308 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a30c:	f002 fc34 	bl	800cb78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a318:	68f9      	ldr	r1, [r7, #12]
 800a31a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	441a      	add	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a33c:	3b01      	subs	r3, #1
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	441a      	add	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	22ff      	movs	r2, #255	@ 0xff
 800a350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	22ff      	movs	r2, #255	@ 0xff
 800a358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d114      	bne.n	800a38c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d01a      	beq.n	800a3a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3310      	adds	r3, #16
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 fbc8 	bl	800bb04 <xTaskRemoveFromEventList>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d012      	beq.n	800a3a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a37a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b0 <xQueueGenericReset+0xd0>)
 800a37c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	e009      	b.n	800a3a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3310      	adds	r3, #16
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fef1 	bl	800a178 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3324      	adds	r3, #36	@ 0x24
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff feec 	bl	800a178 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3a0:	f002 fc1c 	bl	800cbdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3a4:	2301      	movs	r3, #1
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	e000ed04 	.word	0xe000ed04

0800a3b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08e      	sub	sp, #56	@ 0x38
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10b      	bne.n	800a3fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3f8:	bf00      	nop
 800a3fa:	bf00      	nop
 800a3fc:	e7fd      	b.n	800a3fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <xQueueGenericCreateStatic+0x56>
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <xQueueGenericCreateStatic+0x5a>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <xQueueGenericCreateStatic+0x5c>
 800a40e:	2300      	movs	r3, #0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	623b      	str	r3, [r7, #32]
}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	e7fd      	b.n	800a428 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d102      	bne.n	800a438 <xQueueGenericCreateStatic+0x84>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <xQueueGenericCreateStatic+0x88>
 800a438:	2301      	movs	r3, #1
 800a43a:	e000      	b.n	800a43e <xQueueGenericCreateStatic+0x8a>
 800a43c:	2300      	movs	r3, #0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10b      	bne.n	800a45a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	61fb      	str	r3, [r7, #28]
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop
 800a458:	e7fd      	b.n	800a456 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a45a:	2350      	movs	r3, #80	@ 0x50
 800a45c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b50      	cmp	r3, #80	@ 0x50
 800a462:	d00b      	beq.n	800a47c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	61bb      	str	r3, [r7, #24]
}
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	e7fd      	b.n	800a478 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a47c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00d      	beq.n	800a4a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a490:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	4613      	mov	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 f840 	bl	800a524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3730      	adds	r7, #48	@ 0x30
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b08a      	sub	sp, #40	@ 0x28
 800a4b2:	af02      	add	r7, sp, #8
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10b      	bne.n	800a4da <xQueueGenericCreate+0x2c>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	613b      	str	r3, [r7, #16]
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop
 800a4d8:	e7fd      	b.n	800a4d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
 800a4e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	3350      	adds	r3, #80	@ 0x50
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f002 fc67 	bl	800cdbc <pvPortMalloc>
 800a4ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d011      	beq.n	800a51a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	3350      	adds	r3, #80	@ 0x50
 800a4fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a508:	79fa      	ldrb	r2, [r7, #7]
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	4613      	mov	r3, r2
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 f805 	bl	800a524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a51a:	69bb      	ldr	r3, [r7, #24]
	}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3720      	adds	r7, #32
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	e002      	b.n	800a546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a552:	2101      	movs	r1, #1
 800a554:	69b8      	ldr	r0, [r7, #24]
 800a556:	f7ff fec3 	bl	800a2e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	78fa      	ldrb	r2, [r7, #3]
 800a55e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00e      	beq.n	800a596 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a58a:	2300      	movs	r3, #0
 800a58c:	2200      	movs	r2, #0
 800a58e:	2100      	movs	r1, #0
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f8a3 	bl	800a6dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b086      	sub	sp, #24
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6939      	ldr	r1, [r7, #16]
 800a5b6:	6978      	ldr	r0, [r7, #20]
 800a5b8:	f7ff ff79 	bl	800a4ae <xQueueGenericCreate>
 800a5bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff ffd3 	bl	800a56a <prvInitialiseMutex>

		return xNewQueue;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b088      	sub	sp, #32
 800a5d2:	af02      	add	r7, sp, #8
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	6039      	str	r1, [r7, #0]
 800a5d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	6939      	ldr	r1, [r7, #16]
 800a5ec:	6978      	ldr	r0, [r7, #20]
 800a5ee:	f7ff fee1 	bl	800a3b4 <xQueueGenericCreateStatic>
 800a5f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff ffb8 	bl	800a56a <prvInitialiseMutex>

		return xNewQueue;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
	}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a604:	b590      	push	{r4, r7, lr}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60fb      	str	r3, [r7, #12]
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	e7fd      	b.n	800a62a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	689c      	ldr	r4, [r3, #8]
 800a632:	f001 fc27 	bl	800be84 <xTaskGetCurrentTaskHandle>
 800a636:	4603      	mov	r3, r0
 800a638:	429c      	cmp	r4, r3
 800a63a:	d111      	bne.n	800a660 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d105      	bne.n	800a65a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a64e:	2300      	movs	r3, #0
 800a650:	2200      	movs	r2, #0
 800a652:	2100      	movs	r1, #0
 800a654:	6938      	ldr	r0, [r7, #16]
 800a656:	f000 f841 	bl	800a6dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a65a:	2301      	movs	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
 800a65e:	e001      	b.n	800a664 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a664:	697b      	ldr	r3, [r7, #20]
	}
 800a666:	4618      	mov	r0, r3
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd90      	pop	{r4, r7, pc}

0800a66e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a66e:	b590      	push	{r4, r7, lr}
 800a670:	b087      	sub	sp, #28
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10b      	bne.n	800a69a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	60fb      	str	r3, [r7, #12]
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop
 800a698:	e7fd      	b.n	800a696 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	689c      	ldr	r4, [r3, #8]
 800a69e:	f001 fbf1 	bl	800be84 <xTaskGetCurrentTaskHandle>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	429c      	cmp	r4, r3
 800a6a6:	d107      	bne.n	800a6b8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e00c      	b.n	800a6d2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6938      	ldr	r0, [r7, #16]
 800a6bc:	f000 fa90 	bl	800abe0 <xQueueSemaphoreTake>
 800a6c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a6d2:	697b      	ldr	r3, [r7, #20]
	}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	371c      	adds	r7, #28
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd90      	pop	{r4, r7, pc}

0800a6dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08e      	sub	sp, #56	@ 0x38
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10b      	bne.n	800a710 <xQueueGenericSend+0x34>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	e7fd      	b.n	800a70c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d103      	bne.n	800a71e <xQueueGenericSend+0x42>
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <xQueueGenericSend+0x46>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueGenericSend+0x48>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xQueueGenericSend+0x64>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b02      	cmp	r3, #2
 800a744:	d103      	bne.n	800a74e <xQueueGenericSend+0x72>
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <xQueueGenericSend+0x76>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <xQueueGenericSend+0x78>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <xQueueGenericSend+0x94>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	623b      	str	r3, [r7, #32]
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a770:	f001 fb98 	bl	800bea4 <xTaskGetSchedulerState>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <xQueueGenericSend+0xa4>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <xQueueGenericSend+0xa8>
 800a780:	2301      	movs	r3, #1
 800a782:	e000      	b.n	800a786 <xQueueGenericSend+0xaa>
 800a784:	2300      	movs	r3, #0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	61fb      	str	r3, [r7, #28]
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	e7fd      	b.n	800a79e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7a2:	f002 f9e9 	bl	800cb78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d302      	bcc.n	800a7b8 <xQueueGenericSend+0xdc>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d129      	bne.n	800a80c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7be:	f000 fb37 	bl	800ae30 <prvCopyDataToQueue>
 800a7c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d010      	beq.n	800a7ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	3324      	adds	r3, #36	@ 0x24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 f997 	bl	800bb04 <xTaskRemoveFromEventList>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d013      	beq.n	800a804 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7dc:	4b3f      	ldr	r3, [pc, #252]	@ (800a8dc <xQueueGenericSend+0x200>)
 800a7de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	e00a      	b.n	800a804 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d007      	beq.n	800a804 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7f4:	4b39      	ldr	r3, [pc, #228]	@ (800a8dc <xQueueGenericSend+0x200>)
 800a7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a804:	f002 f9ea 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800a808:	2301      	movs	r3, #1
 800a80a:	e063      	b.n	800a8d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d103      	bne.n	800a81a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a812:	f002 f9e3 	bl	800cbdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a816:	2300      	movs	r3, #0
 800a818:	e05c      	b.n	800a8d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a820:	f107 0314 	add.w	r3, r7, #20
 800a824:	4618      	mov	r0, r3
 800a826:	f001 f9d1 	bl	800bbcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a82a:	2301      	movs	r3, #1
 800a82c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a82e:	f002 f9d5 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a832:	f000 ff2f 	bl	800b694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a836:	f002 f99f 	bl	800cb78 <vPortEnterCritical>
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a840:	b25b      	sxtb	r3, r3
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d103      	bne.n	800a850 <xQueueGenericSend+0x174>
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a856:	b25b      	sxtb	r3, r3
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d103      	bne.n	800a866 <xQueueGenericSend+0x18a>
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a866:	f002 f9b9 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a86a:	1d3a      	adds	r2, r7, #4
 800a86c:	f107 0314 	add.w	r3, r7, #20
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f001 f9c0 	bl	800bbf8 <xTaskCheckForTimeOut>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d124      	bne.n	800a8c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a87e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a880:	f000 fbce 	bl	800b020 <prvIsQueueFull>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d018      	beq.n	800a8bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88c:	3310      	adds	r3, #16
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	4611      	mov	r1, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f001 f8e4 	bl	800ba60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a89a:	f000 fb59 	bl	800af50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a89e:	f000 ff07 	bl	800b6b0 <xTaskResumeAll>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f47f af7c 	bne.w	800a7a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a8dc <xQueueGenericSend+0x200>)
 800a8ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8b0:	601a      	str	r2, [r3, #0]
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	e772      	b.n	800a7a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8be:	f000 fb47 	bl	800af50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8c2:	f000 fef5 	bl	800b6b0 <xTaskResumeAll>
 800a8c6:	e76c      	b.n	800a7a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8ca:	f000 fb41 	bl	800af50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8ce:	f000 feef 	bl	800b6b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3738      	adds	r7, #56	@ 0x38
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	e000ed04 	.word	0xe000ed04

0800a8e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b090      	sub	sp, #64	@ 0x40
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <xQueueGenericSendFromISR+0x3e>
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <xQueueGenericSendFromISR+0x42>
 800a91e:	2301      	movs	r3, #1
 800a920:	e000      	b.n	800a924 <xQueueGenericSendFromISR+0x44>
 800a922:	2300      	movs	r3, #0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d103      	bne.n	800a94e <xQueueGenericSendFromISR+0x6e>
 800a946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d101      	bne.n	800a952 <xQueueGenericSendFromISR+0x72>
 800a94e:	2301      	movs	r3, #1
 800a950:	e000      	b.n	800a954 <xQueueGenericSendFromISR+0x74>
 800a952:	2300      	movs	r3, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	623b      	str	r3, [r7, #32]
}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	e7fd      	b.n	800a96c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a970:	f002 f9e2 	bl	800cd38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a974:	f3ef 8211 	mrs	r2, BASEPRI
 800a978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	61fa      	str	r2, [r7, #28]
 800a98a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a98c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a98e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a998:	429a      	cmp	r2, r3
 800a99a:	d302      	bcc.n	800a9a2 <xQueueGenericSendFromISR+0xc2>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d12f      	bne.n	800aa02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a9b8:	f000 fa3a 	bl	800ae30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c4:	d112      	bne.n	800a9ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d016      	beq.n	800a9fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d0:	3324      	adds	r3, #36	@ 0x24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f001 f896 	bl	800bb04 <xTaskRemoveFromEventList>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00e      	beq.n	800a9fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	e007      	b.n	800a9fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	b25a      	sxtb	r2, r3
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa00:	e001      	b.n	800aa06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3740      	adds	r7, #64	@ 0x40
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08c      	sub	sp, #48	@ 0x30
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <xQueueReceive+0x32>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	623b      	str	r3, [r7, #32]
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <xQueueReceive+0x40>
 800aa54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <xQueueReceive+0x44>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <xQueueReceive+0x46>
 800aa60:	2300      	movs	r3, #0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10b      	bne.n	800aa7e <xQueueReceive+0x62>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	61fb      	str	r3, [r7, #28]
}
 800aa78:	bf00      	nop
 800aa7a:	bf00      	nop
 800aa7c:	e7fd      	b.n	800aa7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa7e:	f001 fa11 	bl	800bea4 <xTaskGetSchedulerState>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <xQueueReceive+0x72>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <xQueueReceive+0x76>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <xQueueReceive+0x78>
 800aa92:	2300      	movs	r3, #0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10b      	bne.n	800aab0 <xQueueReceive+0x94>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	61bb      	str	r3, [r7, #24]
}
 800aaaa:	bf00      	nop
 800aaac:	bf00      	nop
 800aaae:	e7fd      	b.n	800aaac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aab0:	f002 f862 	bl	800cb78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01f      	beq.n	800ab00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aac0:	68b9      	ldr	r1, [r7, #8]
 800aac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aac4:	f000 fa1e 	bl	800af04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaca:	1e5a      	subs	r2, r3, #1
 800aacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aace:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00f      	beq.n	800aaf8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	3310      	adds	r3, #16
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 f811 	bl	800bb04 <xTaskRemoveFromEventList>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aae8:	4b3c      	ldr	r3, [pc, #240]	@ (800abdc <xQueueReceive+0x1c0>)
 800aaea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aaf8:	f002 f870 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e069      	b.n	800abd4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab06:	f002 f869 	bl	800cbdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e062      	b.n	800abd4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d106      	bne.n	800ab22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab14:	f107 0310 	add.w	r3, r7, #16
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f001 f857 	bl	800bbcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab22:	f002 f85b 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab26:	f000 fdb5 	bl	800b694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab2a:	f002 f825 	bl	800cb78 <vPortEnterCritical>
 800ab2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab34:	b25b      	sxtb	r3, r3
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d103      	bne.n	800ab44 <xQueueReceive+0x128>
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab4a:	b25b      	sxtb	r3, r3
 800ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab50:	d103      	bne.n	800ab5a <xQueueReceive+0x13e>
 800ab52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab5a:	f002 f83f 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab5e:	1d3a      	adds	r2, r7, #4
 800ab60:	f107 0310 	add.w	r3, r7, #16
 800ab64:	4611      	mov	r1, r2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 f846 	bl	800bbf8 <xTaskCheckForTimeOut>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d123      	bne.n	800abba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab74:	f000 fa3e 	bl	800aff4 <prvIsQueueEmpty>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d017      	beq.n	800abae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab80:	3324      	adds	r3, #36	@ 0x24
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	4611      	mov	r1, r2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 ff6a 	bl	800ba60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab8e:	f000 f9df 	bl	800af50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab92:	f000 fd8d 	bl	800b6b0 <xTaskResumeAll>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d189      	bne.n	800aab0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	@ (800abdc <xQueueReceive+0x1c0>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	e780      	b.n	800aab0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abb0:	f000 f9ce 	bl	800af50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abb4:	f000 fd7c 	bl	800b6b0 <xTaskResumeAll>
 800abb8:	e77a      	b.n	800aab0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abbc:	f000 f9c8 	bl	800af50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abc0:	f000 fd76 	bl	800b6b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abc6:	f000 fa15 	bl	800aff4 <prvIsQueueEmpty>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f43f af6f 	beq.w	800aab0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3730      	adds	r7, #48	@ 0x30
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08e      	sub	sp, #56	@ 0x38
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800abea:	2300      	movs	r3, #0
 800abec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10b      	bne.n	800ac14 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	623b      	str	r3, [r7, #32]
}
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	e7fd      	b.n	800ac10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	61fb      	str	r3, [r7, #28]
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	e7fd      	b.n	800ac30 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac34:	f001 f936 	bl	800bea4 <xTaskGetSchedulerState>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <xQueueSemaphoreTake+0x64>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <xQueueSemaphoreTake+0x68>
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <xQueueSemaphoreTake+0x6a>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10b      	bne.n	800ac66 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	61bb      	str	r3, [r7, #24]
}
 800ac60:	bf00      	nop
 800ac62:	bf00      	nop
 800ac64:	e7fd      	b.n	800ac62 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac66:	f001 ff87 	bl	800cb78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac6e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d024      	beq.n	800acc0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac78:	1e5a      	subs	r2, r3, #1
 800ac7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d104      	bne.n	800ac90 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac86:	f001 fa87 	bl	800c198 <pvTaskIncrementMutexHeldCount>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00f      	beq.n	800acb8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9a:	3310      	adds	r3, #16
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 ff31 	bl	800bb04 <xTaskRemoveFromEventList>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d007      	beq.n	800acb8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aca8:	4b54      	ldr	r3, [pc, #336]	@ (800adfc <xQueueSemaphoreTake+0x21c>)
 800acaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acb8:	f001 ff90 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e098      	b.n	800adf2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d112      	bne.n	800acec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00b      	beq.n	800ace4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	617b      	str	r3, [r7, #20]
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	e7fd      	b.n	800ace0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ace4:	f001 ff7a 	bl	800cbdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ace8:	2300      	movs	r3, #0
 800acea:	e082      	b.n	800adf2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 ff68 	bl	800bbcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad00:	f001 ff6c 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad04:	f000 fcc6 	bl	800b694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad08:	f001 ff36 	bl	800cb78 <vPortEnterCritical>
 800ad0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad18:	d103      	bne.n	800ad22 <xQueueSemaphoreTake+0x142>
 800ad1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad28:	b25b      	sxtb	r3, r3
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d103      	bne.n	800ad38 <xQueueSemaphoreTake+0x158>
 800ad30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad38:	f001 ff50 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	f107 030c 	add.w	r3, r7, #12
 800ad42:	4611      	mov	r1, r2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 ff57 	bl	800bbf8 <xTaskCheckForTimeOut>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d132      	bne.n	800adb6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad52:	f000 f94f 	bl	800aff4 <prvIsQueueEmpty>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d026      	beq.n	800adaa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d109      	bne.n	800ad78 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ad64:	f001 ff08 	bl	800cb78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f001 f8b7 	bl	800bee0 <xTaskPriorityInherit>
 800ad72:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ad74:	f001 ff32 	bl	800cbdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7a:	3324      	adds	r3, #36	@ 0x24
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fe6d 	bl	800ba60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad88:	f000 f8e2 	bl	800af50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad8c:	f000 fc90 	bl	800b6b0 <xTaskResumeAll>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f47f af67 	bne.w	800ac66 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ad98:	4b18      	ldr	r3, [pc, #96]	@ (800adfc <xQueueSemaphoreTake+0x21c>)
 800ad9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	e75d      	b.n	800ac66 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800adaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adac:	f000 f8d0 	bl	800af50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adb0:	f000 fc7e 	bl	800b6b0 <xTaskResumeAll>
 800adb4:	e757      	b.n	800ac66 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adb8:	f000 f8ca 	bl	800af50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adbc:	f000 fc78 	bl	800b6b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adc2:	f000 f917 	bl	800aff4 <prvIsQueueEmpty>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f43f af4c 	beq.w	800ac66 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00d      	beq.n	800adf0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800add4:	f001 fed0 	bl	800cb78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800add8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adda:	f000 f811 	bl	800ae00 <prvGetDisinheritPriorityAfterTimeout>
 800adde:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ade0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ade6:	4618      	mov	r0, r3
 800ade8:	f001 f952 	bl	800c090 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800adec:	f001 fef6 	bl	800cbdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3738      	adds	r7, #56	@ 0x38
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	e000ed04 	.word	0xe000ed04

0800ae00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d006      	beq.n	800ae1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e001      	b.n	800ae22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae22:	68fb      	ldr	r3, [r7, #12]
	}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10d      	bne.n	800ae6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d14d      	bne.n	800aef2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f001 f8a8 	bl	800bfb0 <xTaskPriorityDisinherit>
 800ae60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	609a      	str	r2, [r3, #8]
 800ae68:	e043      	b.n	800aef2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d119      	bne.n	800aea4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6858      	ldr	r0, [r3, #4]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae78:	461a      	mov	r2, r3
 800ae7a:	68b9      	ldr	r1, [r7, #8]
 800ae7c:	f004 ff39 	bl	800fcf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae88:	441a      	add	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d32b      	bcc.n	800aef2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	605a      	str	r2, [r3, #4]
 800aea2:	e026      	b.n	800aef2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	68d8      	ldr	r0, [r3, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeac:	461a      	mov	r2, r3
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	f004 ff1f 	bl	800fcf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebc:	425b      	negs	r3, r3
 800aebe:	441a      	add	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d207      	bcs.n	800aee0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed8:	425b      	negs	r3, r3
 800aeda:	441a      	add	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d105      	bne.n	800aef2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aefa:	697b      	ldr	r3, [r7, #20]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d018      	beq.n	800af48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	441a      	add	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d303      	bcc.n	800af38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68d9      	ldr	r1, [r3, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af40:	461a      	mov	r2, r3
 800af42:	6838      	ldr	r0, [r7, #0]
 800af44:	f004 fed5 	bl	800fcf2 <memcpy>
	}
}
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af58:	f001 fe0e 	bl	800cb78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af64:	e011      	b.n	800af8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d012      	beq.n	800af94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	3324      	adds	r3, #36	@ 0x24
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fdc6 	bl	800bb04 <xTaskRemoveFromEventList>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af7e:	f000 fe9f 	bl	800bcc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	3b01      	subs	r3, #1
 800af86:	b2db      	uxtb	r3, r3
 800af88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dce9      	bgt.n	800af66 <prvUnlockQueue+0x16>
 800af92:	e000      	b.n	800af96 <prvUnlockQueue+0x46>
					break;
 800af94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	22ff      	movs	r2, #255	@ 0xff
 800af9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800af9e:	f001 fe1d 	bl	800cbdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afa2:	f001 fde9 	bl	800cb78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afae:	e011      	b.n	800afd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d012      	beq.n	800afde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3310      	adds	r3, #16
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fda1 	bl	800bb04 <xTaskRemoveFromEventList>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afc8:	f000 fe7a 	bl	800bcc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	3b01      	subs	r3, #1
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dce9      	bgt.n	800afb0 <prvUnlockQueue+0x60>
 800afdc:	e000      	b.n	800afe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	22ff      	movs	r2, #255	@ 0xff
 800afe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800afe8:	f001 fdf8 	bl	800cbdc <vPortExitCritical>
}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800affc:	f001 fdbc 	bl	800cb78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b008:	2301      	movs	r3, #1
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e001      	b.n	800b012 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b012:	f001 fde3 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800b016:	68fb      	ldr	r3, [r7, #12]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b028:	f001 fda6 	bl	800cb78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b034:	429a      	cmp	r2, r3
 800b036:	d102      	bne.n	800b03e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b038:	2301      	movs	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	e001      	b.n	800b042 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b042:	f001 fdcb 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800b046:	68fb      	ldr	r3, [r7, #12]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
 800b05e:	e014      	b.n	800b08a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b060:	4a0f      	ldr	r2, [pc, #60]	@ (800b0a0 <vQueueAddToRegistry+0x50>)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10b      	bne.n	800b084 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b06c:	490c      	ldr	r1, [pc, #48]	@ (800b0a0 <vQueueAddToRegistry+0x50>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b076:	4a0a      	ldr	r2, [pc, #40]	@ (800b0a0 <vQueueAddToRegistry+0x50>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	4413      	add	r3, r2
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b082:	e006      	b.n	800b092 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3301      	adds	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b07      	cmp	r3, #7
 800b08e:	d9e7      	bls.n	800b060 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	20002b84 	.word	0x20002b84

0800b0a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0b4:	f001 fd60 	bl	800cb78 <vPortEnterCritical>
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0be:	b25b      	sxtb	r3, r3
 800b0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c4:	d103      	bne.n	800b0ce <vQueueWaitForMessageRestricted+0x2a>
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0d4:	b25b      	sxtb	r3, r3
 800b0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0da:	d103      	bne.n	800b0e4 <vQueueWaitForMessageRestricted+0x40>
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0e4:	f001 fd7a 	bl	800cbdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d106      	bne.n	800b0fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	3324      	adds	r3, #36	@ 0x24
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fcd7 	bl	800baac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0fe:	6978      	ldr	r0, [r7, #20]
 800b100:	f7ff ff26 	bl	800af50 <prvUnlockQueue>
	}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08e      	sub	sp, #56	@ 0x38
 800b110:	af04      	add	r7, sp, #16
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	623b      	str	r3, [r7, #32]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d10b      	bne.n	800b156 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	61fb      	str	r3, [r7, #28]
}
 800b150:	bf00      	nop
 800b152:	bf00      	nop
 800b154:	e7fd      	b.n	800b152 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b156:	235c      	movs	r3, #92	@ 0x5c
 800b158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b15e:	d00b      	beq.n	800b178 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	61bb      	str	r3, [r7, #24]
}
 800b172:	bf00      	nop
 800b174:	bf00      	nop
 800b176:	e7fd      	b.n	800b174 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b178:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d01e      	beq.n	800b1be <xTaskCreateStatic+0xb2>
 800b180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b182:	2b00      	cmp	r3, #0
 800b184:	d01b      	beq.n	800b1be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b18e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b198:	2300      	movs	r3, #0
 800b19a:	9303      	str	r3, [sp, #12]
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	9302      	str	r3, [sp, #8]
 800b1a0:	f107 0314 	add.w	r3, r7, #20
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f850 	bl	800b256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1b8:	f000 f8de 	bl	800b378 <prvAddNewTaskToReadyList>
 800b1bc:	e001      	b.n	800b1c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1c2:	697b      	ldr	r3, [r7, #20]
	}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3728      	adds	r7, #40	@ 0x28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08c      	sub	sp, #48	@ 0x30
 800b1d0:	af04      	add	r7, sp, #16
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 fdeb 	bl	800cdbc <pvPortMalloc>
 800b1e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00e      	beq.n	800b20c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1ee:	205c      	movs	r0, #92	@ 0x5c
 800b1f0:	f001 fde4 	bl	800cdbc <pvPortMalloc>
 800b1f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	631a      	str	r2, [r3, #48]	@ 0x30
 800b202:	e005      	b.n	800b210 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b204:	6978      	ldr	r0, [r7, #20]
 800b206:	f001 fea7 	bl	800cf58 <vPortFree>
 800b20a:	e001      	b.n	800b210 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d017      	beq.n	800b246 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b21e:	88fa      	ldrh	r2, [r7, #6]
 800b220:	2300      	movs	r3, #0
 800b222:	9303      	str	r3, [sp, #12]
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	9302      	str	r3, [sp, #8]
 800b228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 f80e 	bl	800b256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b23a:	69f8      	ldr	r0, [r7, #28]
 800b23c:	f000 f89c 	bl	800b378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b240:	2301      	movs	r3, #1
 800b242:	61bb      	str	r3, [r7, #24]
 800b244:	e002      	b.n	800b24c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b246:	f04f 33ff 	mov.w	r3, #4294967295
 800b24a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b24c:	69bb      	ldr	r3, [r7, #24]
	}
 800b24e:	4618      	mov	r0, r3
 800b250:	3720      	adds	r7, #32
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b088      	sub	sp, #32
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b266:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	461a      	mov	r2, r3
 800b26e:	21a5      	movs	r1, #165	@ 0xa5
 800b270:	f003 fd48 	bl	800ed04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b27e:	3b01      	subs	r3, #1
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f023 0307 	bic.w	r3, r3, #7
 800b28c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	f003 0307 	and.w	r3, r3, #7
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	617b      	str	r3, [r7, #20]
}
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	e7fd      	b.n	800b2ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01f      	beq.n	800b2f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61fb      	str	r3, [r7, #28]
 800b2ba:	e012      	b.n	800b2e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	7819      	ldrb	r1, [r3, #0]
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	3334      	adds	r3, #52	@ 0x34
 800b2cc:	460a      	mov	r2, r1
 800b2ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d006      	beq.n	800b2ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	61fb      	str	r3, [r7, #28]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	2b0f      	cmp	r3, #15
 800b2e6:	d9e9      	bls.n	800b2bc <prvInitialiseNewTask+0x66>
 800b2e8:	e000      	b.n	800b2ec <prvInitialiseNewTask+0x96>
			{
				break;
 800b2ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b2f4:	e003      	b.n	800b2fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b300:	2b37      	cmp	r3, #55	@ 0x37
 800b302:	d901      	bls.n	800b308 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b304:	2337      	movs	r3, #55	@ 0x37
 800b306:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b30c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b312:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b316:	2200      	movs	r2, #0
 800b318:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	3304      	adds	r3, #4
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe ff4a 	bl	800a1b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b326:	3318      	adds	r3, #24
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe ff45 	bl	800a1b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b336:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b342:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b346:	2200      	movs	r2, #0
 800b348:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	68f9      	ldr	r1, [r7, #12]
 800b356:	69b8      	ldr	r0, [r7, #24]
 800b358:	f001 fae0 	bl	800c91c <pxPortInitialiseStack>
 800b35c:	4602      	mov	r2, r0
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b36c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b36e:	bf00      	nop
 800b370:	3720      	adds	r7, #32
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b380:	f001 fbfa 	bl	800cb78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b384:	4b2d      	ldr	r3, [pc, #180]	@ (800b43c <prvAddNewTaskToReadyList+0xc4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3301      	adds	r3, #1
 800b38a:	4a2c      	ldr	r2, [pc, #176]	@ (800b43c <prvAddNewTaskToReadyList+0xc4>)
 800b38c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b38e:	4b2c      	ldr	r3, [pc, #176]	@ (800b440 <prvAddNewTaskToReadyList+0xc8>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b396:	4a2a      	ldr	r2, [pc, #168]	@ (800b440 <prvAddNewTaskToReadyList+0xc8>)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b39c:	4b27      	ldr	r3, [pc, #156]	@ (800b43c <prvAddNewTaskToReadyList+0xc4>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d110      	bne.n	800b3c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3a4:	f000 fcb0 	bl	800bd08 <prvInitialiseTaskLists>
 800b3a8:	e00d      	b.n	800b3c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3aa:	4b26      	ldr	r3, [pc, #152]	@ (800b444 <prvAddNewTaskToReadyList+0xcc>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3b2:	4b23      	ldr	r3, [pc, #140]	@ (800b440 <prvAddNewTaskToReadyList+0xc8>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d802      	bhi.n	800b3c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3c0:	4a1f      	ldr	r2, [pc, #124]	@ (800b440 <prvAddNewTaskToReadyList+0xc8>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3c6:	4b20      	ldr	r3, [pc, #128]	@ (800b448 <prvAddNewTaskToReadyList+0xd0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b448 <prvAddNewTaskToReadyList+0xd0>)
 800b3ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b448 <prvAddNewTaskToReadyList+0xd0>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b44c <prvAddNewTaskToReadyList+0xd4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d903      	bls.n	800b3ec <prvAddNewTaskToReadyList+0x74>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e8:	4a18      	ldr	r2, [pc, #96]	@ (800b44c <prvAddNewTaskToReadyList+0xd4>)
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4a15      	ldr	r2, [pc, #84]	@ (800b450 <prvAddNewTaskToReadyList+0xd8>)
 800b3fa:	441a      	add	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4610      	mov	r0, r2
 800b404:	f7fe fee5 	bl	800a1d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b408:	f001 fbe8 	bl	800cbdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b40c:	4b0d      	ldr	r3, [pc, #52]	@ (800b444 <prvAddNewTaskToReadyList+0xcc>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00e      	beq.n	800b432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b414:	4b0a      	ldr	r3, [pc, #40]	@ (800b440 <prvAddNewTaskToReadyList+0xc8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	429a      	cmp	r2, r3
 800b420:	d207      	bcs.n	800b432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b422:	4b0c      	ldr	r3, [pc, #48]	@ (800b454 <prvAddNewTaskToReadyList+0xdc>)
 800b424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20003098 	.word	0x20003098
 800b440:	20002bc4 	.word	0x20002bc4
 800b444:	200030a4 	.word	0x200030a4
 800b448:	200030b4 	.word	0x200030b4
 800b44c:	200030a0 	.word	0x200030a0
 800b450:	20002bc8 	.word	0x20002bc8
 800b454:	e000ed04 	.word	0xe000ed04

0800b458 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	@ 0x28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b462:	2300      	movs	r3, #0
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10b      	bne.n	800b484 <vTaskDelayUntil+0x2c>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	617b      	str	r3, [r7, #20]
}
 800b47e:	bf00      	nop
 800b480:	bf00      	nop
 800b482:	e7fd      	b.n	800b480 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <vTaskDelayUntil+0x4a>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	613b      	str	r3, [r7, #16]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800b4a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b54c <vTaskDelayUntil+0xf4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00b      	beq.n	800b4c2 <vTaskDelayUntil+0x6a>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60fb      	str	r3, [r7, #12]
}
 800b4bc:	bf00      	nop
 800b4be:	bf00      	nop
 800b4c0:	e7fd      	b.n	800b4be <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800b4c2:	f000 f8e7 	bl	800b694 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b4c6:	4b22      	ldr	r3, [pc, #136]	@ (800b550 <vTaskDelayUntil+0xf8>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6a3a      	ldr	r2, [r7, #32]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d20b      	bcs.n	800b4f8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	69fa      	ldr	r2, [r7, #28]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d211      	bcs.n	800b50e <vTaskDelayUntil+0xb6>
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d90d      	bls.n	800b50e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4f6:	e00a      	b.n	800b50e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d303      	bcc.n	800b50a <vTaskDelayUntil+0xb2>
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	429a      	cmp	r2, r3
 800b508:	d901      	bls.n	800b50e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b50a:	2301      	movs	r3, #1
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b516:	2b00      	cmp	r3, #0
 800b518:	d006      	beq.n	800b528 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b51a:	69fa      	ldr	r2, [r7, #28]
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2100      	movs	r1, #0
 800b522:	4618      	mov	r0, r3
 800b524:	f000 fe4c 	bl	800c1c0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b528:	f000 f8c2 	bl	800b6b0 <xTaskResumeAll>
 800b52c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d107      	bne.n	800b544 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800b534:	4b07      	ldr	r3, [pc, #28]	@ (800b554 <vTaskDelayUntil+0xfc>)
 800b536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b53a:	601a      	str	r2, [r3, #0]
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b544:	bf00      	nop
 800b546:	3728      	adds	r7, #40	@ 0x28
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	200030c0 	.word	0x200030c0
 800b550:	2000309c 	.word	0x2000309c
 800b554:	e000ed04 	.word	0xe000ed04

0800b558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b560:	2300      	movs	r3, #0
 800b562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d018      	beq.n	800b59c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b56a:	4b14      	ldr	r3, [pc, #80]	@ (800b5bc <vTaskDelay+0x64>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00b      	beq.n	800b58a <vTaskDelay+0x32>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	60bb      	str	r3, [r7, #8]
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	e7fd      	b.n	800b586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b58a:	f000 f883 	bl	800b694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b58e:	2100      	movs	r1, #0
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fe15 	bl	800c1c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b596:	f000 f88b 	bl	800b6b0 <xTaskResumeAll>
 800b59a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d107      	bne.n	800b5b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b5a2:	4b07      	ldr	r3, [pc, #28]	@ (800b5c0 <vTaskDelay+0x68>)
 800b5a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200030c0 	.word	0x200030c0
 800b5c0:	e000ed04 	.word	0xe000ed04

0800b5c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08a      	sub	sp, #40	@ 0x28
 800b5c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5d2:	463a      	mov	r2, r7
 800b5d4:	1d39      	adds	r1, r7, #4
 800b5d6:	f107 0308 	add.w	r3, r7, #8
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fd98 	bl	800a110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	9202      	str	r2, [sp, #8]
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	4922      	ldr	r1, [pc, #136]	@ (800b67c <vTaskStartScheduler+0xb8>)
 800b5f4:	4822      	ldr	r0, [pc, #136]	@ (800b680 <vTaskStartScheduler+0xbc>)
 800b5f6:	f7ff fd89 	bl	800b10c <xTaskCreateStatic>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	4a21      	ldr	r2, [pc, #132]	@ (800b684 <vTaskStartScheduler+0xc0>)
 800b5fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b600:	4b20      	ldr	r3, [pc, #128]	@ (800b684 <vTaskStartScheduler+0xc0>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b608:	2301      	movs	r3, #1
 800b60a:	617b      	str	r3, [r7, #20]
 800b60c:	e001      	b.n	800b612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b60e:	2300      	movs	r3, #0
 800b610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d102      	bne.n	800b61e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b618:	f000 fe26 	bl	800c268 <xTimerCreateTimerTask>
 800b61c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d116      	bne.n	800b652 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	613b      	str	r3, [r7, #16]
}
 800b636:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b638:	4b13      	ldr	r3, [pc, #76]	@ (800b688 <vTaskStartScheduler+0xc4>)
 800b63a:	f04f 32ff 	mov.w	r2, #4294967295
 800b63e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b640:	4b12      	ldr	r3, [pc, #72]	@ (800b68c <vTaskStartScheduler+0xc8>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b646:	4b12      	ldr	r3, [pc, #72]	@ (800b690 <vTaskStartScheduler+0xcc>)
 800b648:	2200      	movs	r2, #0
 800b64a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b64c:	f001 f9f0 	bl	800ca30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b650:	e00f      	b.n	800b672 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b658:	d10b      	bne.n	800b672 <vTaskStartScheduler+0xae>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	60fb      	str	r3, [r7, #12]
}
 800b66c:	bf00      	nop
 800b66e:	bf00      	nop
 800b670:	e7fd      	b.n	800b66e <vTaskStartScheduler+0xaa>
}
 800b672:	bf00      	nop
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	08013b9c 	.word	0x08013b9c
 800b680:	0800bcd9 	.word	0x0800bcd9
 800b684:	200030bc 	.word	0x200030bc
 800b688:	200030b8 	.word	0x200030b8
 800b68c:	200030a4 	.word	0x200030a4
 800b690:	2000309c 	.word	0x2000309c

0800b694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b698:	4b04      	ldr	r3, [pc, #16]	@ (800b6ac <vTaskSuspendAll+0x18>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3301      	adds	r3, #1
 800b69e:	4a03      	ldr	r2, [pc, #12]	@ (800b6ac <vTaskSuspendAll+0x18>)
 800b6a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6a2:	bf00      	nop
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	200030c0 	.word	0x200030c0

0800b6b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6be:	4b42      	ldr	r3, [pc, #264]	@ (800b7c8 <xTaskResumeAll+0x118>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10b      	bne.n	800b6de <xTaskResumeAll+0x2e>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	603b      	str	r3, [r7, #0]
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	e7fd      	b.n	800b6da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6de:	f001 fa4b 	bl	800cb78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b6e2:	4b39      	ldr	r3, [pc, #228]	@ (800b7c8 <xTaskResumeAll+0x118>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	4a37      	ldr	r2, [pc, #220]	@ (800b7c8 <xTaskResumeAll+0x118>)
 800b6ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ec:	4b36      	ldr	r3, [pc, #216]	@ (800b7c8 <xTaskResumeAll+0x118>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d162      	bne.n	800b7ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6f4:	4b35      	ldr	r3, [pc, #212]	@ (800b7cc <xTaskResumeAll+0x11c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d05e      	beq.n	800b7ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6fc:	e02f      	b.n	800b75e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6fe:	4b34      	ldr	r3, [pc, #208]	@ (800b7d0 <xTaskResumeAll+0x120>)
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	3318      	adds	r3, #24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fdbe 	bl	800a28c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3304      	adds	r3, #4
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe fdb9 	bl	800a28c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71e:	4b2d      	ldr	r3, [pc, #180]	@ (800b7d4 <xTaskResumeAll+0x124>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d903      	bls.n	800b72e <xTaskResumeAll+0x7e>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72a:	4a2a      	ldr	r2, [pc, #168]	@ (800b7d4 <xTaskResumeAll+0x124>)
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b732:	4613      	mov	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4a27      	ldr	r2, [pc, #156]	@ (800b7d8 <xTaskResumeAll+0x128>)
 800b73c:	441a      	add	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3304      	adds	r3, #4
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f7fe fd44 	bl	800a1d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74e:	4b23      	ldr	r3, [pc, #140]	@ (800b7dc <xTaskResumeAll+0x12c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b754:	429a      	cmp	r2, r3
 800b756:	d302      	bcc.n	800b75e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b758:	4b21      	ldr	r3, [pc, #132]	@ (800b7e0 <xTaskResumeAll+0x130>)
 800b75a:	2201      	movs	r2, #1
 800b75c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b75e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7d0 <xTaskResumeAll+0x120>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1cb      	bne.n	800b6fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b76c:	f000 fb6a 	bl	800be44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b770:	4b1c      	ldr	r3, [pc, #112]	@ (800b7e4 <xTaskResumeAll+0x134>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d010      	beq.n	800b79e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b77c:	f000 f858 	bl	800b830 <xTaskIncrementTick>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b786:	4b16      	ldr	r3, [pc, #88]	@ (800b7e0 <xTaskResumeAll+0x130>)
 800b788:	2201      	movs	r2, #1
 800b78a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3b01      	subs	r3, #1
 800b790:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1f1      	bne.n	800b77c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b798:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <xTaskResumeAll+0x134>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b79e:	4b10      	ldr	r3, [pc, #64]	@ (800b7e0 <xTaskResumeAll+0x130>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d009      	beq.n	800b7ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e8 <xTaskResumeAll+0x138>)
 800b7ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7ba:	f001 fa0f 	bl	800cbdc <vPortExitCritical>

	return xAlreadyYielded;
 800b7be:	68bb      	ldr	r3, [r7, #8]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	200030c0 	.word	0x200030c0
 800b7cc:	20003098 	.word	0x20003098
 800b7d0:	20003058 	.word	0x20003058
 800b7d4:	200030a0 	.word	0x200030a0
 800b7d8:	20002bc8 	.word	0x20002bc8
 800b7dc:	20002bc4 	.word	0x20002bc4
 800b7e0:	200030ac 	.word	0x200030ac
 800b7e4:	200030a8 	.word	0x200030a8
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b7f2:	4b05      	ldr	r3, [pc, #20]	@ (800b808 <xTaskGetTickCount+0x1c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b7f8:	687b      	ldr	r3, [r7, #4]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	2000309c 	.word	0x2000309c

0800b80c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b812:	f001 fa91 	bl	800cd38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b816:	2300      	movs	r3, #0
 800b818:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b81a:	4b04      	ldr	r3, [pc, #16]	@ (800b82c <xTaskGetTickCountFromISR+0x20>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b820:	683b      	ldr	r3, [r7, #0]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	2000309c 	.word	0x2000309c

0800b830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b83a:	4b4f      	ldr	r3, [pc, #316]	@ (800b978 <xTaskIncrementTick+0x148>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 8090 	bne.w	800b964 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b844:	4b4d      	ldr	r3, [pc, #308]	@ (800b97c <xTaskIncrementTick+0x14c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3301      	adds	r3, #1
 800b84a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b84c:	4a4b      	ldr	r2, [pc, #300]	@ (800b97c <xTaskIncrementTick+0x14c>)
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d121      	bne.n	800b89c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b858:	4b49      	ldr	r3, [pc, #292]	@ (800b980 <xTaskIncrementTick+0x150>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	603b      	str	r3, [r7, #0]
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop
 800b878:	e7fd      	b.n	800b876 <xTaskIncrementTick+0x46>
 800b87a:	4b41      	ldr	r3, [pc, #260]	@ (800b980 <xTaskIncrementTick+0x150>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	4b40      	ldr	r3, [pc, #256]	@ (800b984 <xTaskIncrementTick+0x154>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a3e      	ldr	r2, [pc, #248]	@ (800b980 <xTaskIncrementTick+0x150>)
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	4a3e      	ldr	r2, [pc, #248]	@ (800b984 <xTaskIncrementTick+0x154>)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	4b3e      	ldr	r3, [pc, #248]	@ (800b988 <xTaskIncrementTick+0x158>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3301      	adds	r3, #1
 800b894:	4a3c      	ldr	r2, [pc, #240]	@ (800b988 <xTaskIncrementTick+0x158>)
 800b896:	6013      	str	r3, [r2, #0]
 800b898:	f000 fad4 	bl	800be44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b89c:	4b3b      	ldr	r3, [pc, #236]	@ (800b98c <xTaskIncrementTick+0x15c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d349      	bcc.n	800b93a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8a6:	4b36      	ldr	r3, [pc, #216]	@ (800b980 <xTaskIncrementTick+0x150>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d104      	bne.n	800b8ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8b0:	4b36      	ldr	r3, [pc, #216]	@ (800b98c <xTaskIncrementTick+0x15c>)
 800b8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b6:	601a      	str	r2, [r3, #0]
					break;
 800b8b8:	e03f      	b.n	800b93a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ba:	4b31      	ldr	r3, [pc, #196]	@ (800b980 <xTaskIncrementTick+0x150>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d203      	bcs.n	800b8da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8d2:	4a2e      	ldr	r2, [pc, #184]	@ (800b98c <xTaskIncrementTick+0x15c>)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8d8:	e02f      	b.n	800b93a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fe fcd4 	bl	800a28c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d004      	beq.n	800b8f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	3318      	adds	r3, #24
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fe fccb 	bl	800a28c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8fa:	4b25      	ldr	r3, [pc, #148]	@ (800b990 <xTaskIncrementTick+0x160>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d903      	bls.n	800b90a <xTaskIncrementTick+0xda>
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b906:	4a22      	ldr	r2, [pc, #136]	@ (800b990 <xTaskIncrementTick+0x160>)
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4a1f      	ldr	r2, [pc, #124]	@ (800b994 <xTaskIncrementTick+0x164>)
 800b918:	441a      	add	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4619      	mov	r1, r3
 800b920:	4610      	mov	r0, r2
 800b922:	f7fe fc56 	bl	800a1d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4b1b      	ldr	r3, [pc, #108]	@ (800b998 <xTaskIncrementTick+0x168>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b930:	429a      	cmp	r2, r3
 800b932:	d3b8      	bcc.n	800b8a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b938:	e7b5      	b.n	800b8a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b93a:	4b17      	ldr	r3, [pc, #92]	@ (800b998 <xTaskIncrementTick+0x168>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b940:	4914      	ldr	r1, [pc, #80]	@ (800b994 <xTaskIncrementTick+0x164>)
 800b942:	4613      	mov	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	440b      	add	r3, r1
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d901      	bls.n	800b956 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b952:	2301      	movs	r3, #1
 800b954:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b956:	4b11      	ldr	r3, [pc, #68]	@ (800b99c <xTaskIncrementTick+0x16c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d007      	beq.n	800b96e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b95e:	2301      	movs	r3, #1
 800b960:	617b      	str	r3, [r7, #20]
 800b962:	e004      	b.n	800b96e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b964:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a0 <xTaskIncrementTick+0x170>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	4a0d      	ldr	r2, [pc, #52]	@ (800b9a0 <xTaskIncrementTick+0x170>)
 800b96c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b96e:	697b      	ldr	r3, [r7, #20]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	200030c0 	.word	0x200030c0
 800b97c:	2000309c 	.word	0x2000309c
 800b980:	20003050 	.word	0x20003050
 800b984:	20003054 	.word	0x20003054
 800b988:	200030b0 	.word	0x200030b0
 800b98c:	200030b8 	.word	0x200030b8
 800b990:	200030a0 	.word	0x200030a0
 800b994:	20002bc8 	.word	0x20002bc8
 800b998:	20002bc4 	.word	0x20002bc4
 800b99c:	200030ac 	.word	0x200030ac
 800b9a0:	200030a8 	.word	0x200030a8

0800b9a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9aa:	4b28      	ldr	r3, [pc, #160]	@ (800ba4c <vTaskSwitchContext+0xa8>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9b2:	4b27      	ldr	r3, [pc, #156]	@ (800ba50 <vTaskSwitchContext+0xac>)
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9b8:	e042      	b.n	800ba40 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b9ba:	4b25      	ldr	r3, [pc, #148]	@ (800ba50 <vTaskSwitchContext+0xac>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c0:	4b24      	ldr	r3, [pc, #144]	@ (800ba54 <vTaskSwitchContext+0xb0>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	e011      	b.n	800b9ec <vTaskSwitchContext+0x48>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10b      	bne.n	800b9e6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	607b      	str	r3, [r7, #4]
}
 800b9e0:	bf00      	nop
 800b9e2:	bf00      	nop
 800b9e4:	e7fd      	b.n	800b9e2 <vTaskSwitchContext+0x3e>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	491a      	ldr	r1, [pc, #104]	@ (800ba58 <vTaskSwitchContext+0xb4>)
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0e3      	beq.n	800b9c8 <vTaskSwitchContext+0x24>
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	4613      	mov	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4a13      	ldr	r2, [pc, #76]	@ (800ba58 <vTaskSwitchContext+0xb4>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60bb      	str	r3, [r7, #8]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	3308      	adds	r3, #8
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d104      	bne.n	800ba30 <vTaskSwitchContext+0x8c>
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	605a      	str	r2, [r3, #4]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	4a09      	ldr	r2, [pc, #36]	@ (800ba5c <vTaskSwitchContext+0xb8>)
 800ba38:	6013      	str	r3, [r2, #0]
 800ba3a:	4a06      	ldr	r2, [pc, #24]	@ (800ba54 <vTaskSwitchContext+0xb0>)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6013      	str	r3, [r2, #0]
}
 800ba40:	bf00      	nop
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	200030c0 	.word	0x200030c0
 800ba50:	200030ac 	.word	0x200030ac
 800ba54:	200030a0 	.word	0x200030a0
 800ba58:	20002bc8 	.word	0x20002bc8
 800ba5c:	20002bc4 	.word	0x20002bc4

0800ba60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10b      	bne.n	800ba88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	60fb      	str	r3, [r7, #12]
}
 800ba82:	bf00      	nop
 800ba84:	bf00      	nop
 800ba86:	e7fd      	b.n	800ba84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba88:	4b07      	ldr	r3, [pc, #28]	@ (800baa8 <vTaskPlaceOnEventList+0x48>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3318      	adds	r3, #24
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7fe fbc2 	bl	800a21a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba96:	2101      	movs	r1, #1
 800ba98:	6838      	ldr	r0, [r7, #0]
 800ba9a:	f000 fb91 	bl	800c1c0 <prvAddCurrentTaskToDelayedList>
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20002bc4 	.word	0x20002bc4

0800baac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10b      	bne.n	800bad6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	617b      	str	r3, [r7, #20]
}
 800bad0:	bf00      	nop
 800bad2:	bf00      	nop
 800bad4:	e7fd      	b.n	800bad2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bad6:	4b0a      	ldr	r3, [pc, #40]	@ (800bb00 <vTaskPlaceOnEventListRestricted+0x54>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3318      	adds	r3, #24
 800badc:	4619      	mov	r1, r3
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7fe fb77 	bl	800a1d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800baea:	f04f 33ff 	mov.w	r3, #4294967295
 800baee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	68b8      	ldr	r0, [r7, #8]
 800baf4:	f000 fb64 	bl	800c1c0 <prvAddCurrentTaskToDelayedList>
	}
 800baf8:	bf00      	nop
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20002bc4 	.word	0x20002bc4

0800bb04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10b      	bne.n	800bb32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	60fb      	str	r3, [r7, #12]
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	e7fd      	b.n	800bb2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	3318      	adds	r3, #24
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fba8 	bl	800a28c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb4 <xTaskRemoveFromEventList+0xb0>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11d      	bne.n	800bb80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fb9f 	bl	800a28c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb52:	4b19      	ldr	r3, [pc, #100]	@ (800bbb8 <xTaskRemoveFromEventList+0xb4>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d903      	bls.n	800bb62 <xTaskRemoveFromEventList+0x5e>
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5e:	4a16      	ldr	r2, [pc, #88]	@ (800bbb8 <xTaskRemoveFromEventList+0xb4>)
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb66:	4613      	mov	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4a13      	ldr	r2, [pc, #76]	@ (800bbbc <xTaskRemoveFromEventList+0xb8>)
 800bb70:	441a      	add	r2, r3
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	3304      	adds	r3, #4
 800bb76:	4619      	mov	r1, r3
 800bb78:	4610      	mov	r0, r2
 800bb7a:	f7fe fb2a 	bl	800a1d2 <vListInsertEnd>
 800bb7e:	e005      	b.n	800bb8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3318      	adds	r3, #24
 800bb84:	4619      	mov	r1, r3
 800bb86:	480e      	ldr	r0, [pc, #56]	@ (800bbc0 <xTaskRemoveFromEventList+0xbc>)
 800bb88:	f7fe fb23 	bl	800a1d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb90:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <xTaskRemoveFromEventList+0xc0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d905      	bls.n	800bba6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc8 <xTaskRemoveFromEventList+0xc4>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	e001      	b.n	800bbaa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbaa:	697b      	ldr	r3, [r7, #20]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3718      	adds	r7, #24
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	200030c0 	.word	0x200030c0
 800bbb8:	200030a0 	.word	0x200030a0
 800bbbc:	20002bc8 	.word	0x20002bc8
 800bbc0:	20003058 	.word	0x20003058
 800bbc4:	20002bc4 	.word	0x20002bc4
 800bbc8:	200030ac 	.word	0x200030ac

0800bbcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbd4:	4b06      	ldr	r3, [pc, #24]	@ (800bbf0 <vTaskInternalSetTimeOutState+0x24>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbdc:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <vTaskInternalSetTimeOutState+0x28>)
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	605a      	str	r2, [r3, #4]
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	200030b0 	.word	0x200030b0
 800bbf4:	2000309c 	.word	0x2000309c

0800bbf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	613b      	str	r3, [r7, #16]
}
 800bc1a:	bf00      	nop
 800bc1c:	bf00      	nop
 800bc1e:	e7fd      	b.n	800bc1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10b      	bne.n	800bc3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60fb      	str	r3, [r7, #12]
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bc3e:	f000 ff9b 	bl	800cb78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc42:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <xTaskCheckForTimeOut+0xc0>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5a:	d102      	bne.n	800bc62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61fb      	str	r3, [r7, #28]
 800bc60:	e023      	b.n	800bcaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4b15      	ldr	r3, [pc, #84]	@ (800bcbc <xTaskCheckForTimeOut+0xc4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d007      	beq.n	800bc7e <xTaskCheckForTimeOut+0x86>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d302      	bcc.n	800bc7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	61fb      	str	r3, [r7, #28]
 800bc7c:	e015      	b.n	800bcaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d20b      	bcs.n	800bca0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ff99 	bl	800bbcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	61fb      	str	r3, [r7, #28]
 800bc9e:	e004      	b.n	800bcaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bca6:	2301      	movs	r3, #1
 800bca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcaa:	f000 ff97 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800bcae:	69fb      	ldr	r3, [r7, #28]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3720      	adds	r7, #32
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	2000309c 	.word	0x2000309c
 800bcbc:	200030b0 	.word	0x200030b0

0800bcc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcc4:	4b03      	ldr	r3, [pc, #12]	@ (800bcd4 <vTaskMissedYield+0x14>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]
}
 800bcca:	bf00      	nop
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	200030ac 	.word	0x200030ac

0800bcd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bce0:	f000 f852 	bl	800bd88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bce4:	4b06      	ldr	r3, [pc, #24]	@ (800bd00 <prvIdleTask+0x28>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d9f9      	bls.n	800bce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcec:	4b05      	ldr	r3, [pc, #20]	@ (800bd04 <prvIdleTask+0x2c>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcfc:	e7f0      	b.n	800bce0 <prvIdleTask+0x8>
 800bcfe:	bf00      	nop
 800bd00:	20002bc8 	.word	0x20002bc8
 800bd04:	e000ed04 	.word	0xe000ed04

0800bd08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd0e:	2300      	movs	r3, #0
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	e00c      	b.n	800bd2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4a12      	ldr	r2, [pc, #72]	@ (800bd68 <prvInitialiseTaskLists+0x60>)
 800bd20:	4413      	add	r3, r2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe fa28 	bl	800a178 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	607b      	str	r3, [r7, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b37      	cmp	r3, #55	@ 0x37
 800bd32:	d9ef      	bls.n	800bd14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd34:	480d      	ldr	r0, [pc, #52]	@ (800bd6c <prvInitialiseTaskLists+0x64>)
 800bd36:	f7fe fa1f 	bl	800a178 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd3a:	480d      	ldr	r0, [pc, #52]	@ (800bd70 <prvInitialiseTaskLists+0x68>)
 800bd3c:	f7fe fa1c 	bl	800a178 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd40:	480c      	ldr	r0, [pc, #48]	@ (800bd74 <prvInitialiseTaskLists+0x6c>)
 800bd42:	f7fe fa19 	bl	800a178 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd46:	480c      	ldr	r0, [pc, #48]	@ (800bd78 <prvInitialiseTaskLists+0x70>)
 800bd48:	f7fe fa16 	bl	800a178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd4c:	480b      	ldr	r0, [pc, #44]	@ (800bd7c <prvInitialiseTaskLists+0x74>)
 800bd4e:	f7fe fa13 	bl	800a178 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd52:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <prvInitialiseTaskLists+0x78>)
 800bd54:	4a05      	ldr	r2, [pc, #20]	@ (800bd6c <prvInitialiseTaskLists+0x64>)
 800bd56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd58:	4b0a      	ldr	r3, [pc, #40]	@ (800bd84 <prvInitialiseTaskLists+0x7c>)
 800bd5a:	4a05      	ldr	r2, [pc, #20]	@ (800bd70 <prvInitialiseTaskLists+0x68>)
 800bd5c:	601a      	str	r2, [r3, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20002bc8 	.word	0x20002bc8
 800bd6c:	20003028 	.word	0x20003028
 800bd70:	2000303c 	.word	0x2000303c
 800bd74:	20003058 	.word	0x20003058
 800bd78:	2000306c 	.word	0x2000306c
 800bd7c:	20003084 	.word	0x20003084
 800bd80:	20003050 	.word	0x20003050
 800bd84:	20003054 	.word	0x20003054

0800bd88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd8e:	e019      	b.n	800bdc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd90:	f000 fef2 	bl	800cb78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd94:	4b10      	ldr	r3, [pc, #64]	@ (800bdd8 <prvCheckTasksWaitingTermination+0x50>)
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fa73 	bl	800a28c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bda6:	4b0d      	ldr	r3, [pc, #52]	@ (800bddc <prvCheckTasksWaitingTermination+0x54>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	4a0b      	ldr	r2, [pc, #44]	@ (800bddc <prvCheckTasksWaitingTermination+0x54>)
 800bdae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bde0 <prvCheckTasksWaitingTermination+0x58>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	4a0a      	ldr	r2, [pc, #40]	@ (800bde0 <prvCheckTasksWaitingTermination+0x58>)
 800bdb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdba:	f000 ff0f 	bl	800cbdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f810 	bl	800bde4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdc4:	4b06      	ldr	r3, [pc, #24]	@ (800bde0 <prvCheckTasksWaitingTermination+0x58>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e1      	bne.n	800bd90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	2000306c 	.word	0x2000306c
 800bddc:	20003098 	.word	0x20003098
 800bde0:	20003080 	.word	0x20003080

0800bde4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d108      	bne.n	800be08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f001 f8ac 	bl	800cf58 <vPortFree>
				vPortFree( pxTCB );
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f001 f8a9 	bl	800cf58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be06:	e019      	b.n	800be3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d103      	bne.n	800be1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 f8a0 	bl	800cf58 <vPortFree>
	}
 800be18:	e010      	b.n	800be3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be20:	2b02      	cmp	r3, #2
 800be22:	d00b      	beq.n	800be3c <prvDeleteTCB+0x58>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	60fb      	str	r3, [r7, #12]
}
 800be36:	bf00      	nop
 800be38:	bf00      	nop
 800be3a:	e7fd      	b.n	800be38 <prvDeleteTCB+0x54>
	}
 800be3c:	bf00      	nop
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be4a:	4b0c      	ldr	r3, [pc, #48]	@ (800be7c <prvResetNextTaskUnblockTime+0x38>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d104      	bne.n	800be5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be54:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <prvResetNextTaskUnblockTime+0x3c>)
 800be56:	f04f 32ff 	mov.w	r2, #4294967295
 800be5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be5c:	e008      	b.n	800be70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be5e:	4b07      	ldr	r3, [pc, #28]	@ (800be7c <prvResetNextTaskUnblockTime+0x38>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	4a04      	ldr	r2, [pc, #16]	@ (800be80 <prvResetNextTaskUnblockTime+0x3c>)
 800be6e:	6013      	str	r3, [r2, #0]
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	20003050 	.word	0x20003050
 800be80:	200030b8 	.word	0x200030b8

0800be84 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800be8a:	4b05      	ldr	r3, [pc, #20]	@ (800bea0 <xTaskGetCurrentTaskHandle+0x1c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800be90:	687b      	ldr	r3, [r7, #4]
	}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	20002bc4 	.word	0x20002bc4

0800bea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800beaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bed8 <xTaskGetSchedulerState+0x34>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d102      	bne.n	800beb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800beb2:	2301      	movs	r3, #1
 800beb4:	607b      	str	r3, [r7, #4]
 800beb6:	e008      	b.n	800beca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beb8:	4b08      	ldr	r3, [pc, #32]	@ (800bedc <xTaskGetSchedulerState+0x38>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bec0:	2302      	movs	r3, #2
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	e001      	b.n	800beca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bec6:	2300      	movs	r3, #0
 800bec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800beca:	687b      	ldr	r3, [r7, #4]
	}
 800becc:	4618      	mov	r0, r3
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	200030a4 	.word	0x200030a4
 800bedc:	200030c0 	.word	0x200030c0

0800bee0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d051      	beq.n	800bf9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800befa:	4b2a      	ldr	r3, [pc, #168]	@ (800bfa4 <xTaskPriorityInherit+0xc4>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d241      	bcs.n	800bf88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	699b      	ldr	r3, [r3, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	db06      	blt.n	800bf1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf0c:	4b25      	ldr	r3, [pc, #148]	@ (800bfa4 <xTaskPriorityInherit+0xc4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6959      	ldr	r1, [r3, #20]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4a1f      	ldr	r2, [pc, #124]	@ (800bfa8 <xTaskPriorityInherit+0xc8>)
 800bf2c:	4413      	add	r3, r2
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	d122      	bne.n	800bf78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe f9a8 	bl	800a28c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf3c:	4b19      	ldr	r3, [pc, #100]	@ (800bfa4 <xTaskPriorityInherit+0xc4>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf4a:	4b18      	ldr	r3, [pc, #96]	@ (800bfac <xTaskPriorityInherit+0xcc>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d903      	bls.n	800bf5a <xTaskPriorityInherit+0x7a>
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	4a15      	ldr	r2, [pc, #84]	@ (800bfac <xTaskPriorityInherit+0xcc>)
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf5e:	4613      	mov	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4413      	add	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4a10      	ldr	r2, [pc, #64]	@ (800bfa8 <xTaskPriorityInherit+0xc8>)
 800bf68:	441a      	add	r2, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7fe f92e 	bl	800a1d2 <vListInsertEnd>
 800bf76:	e004      	b.n	800bf82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf78:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa4 <xTaskPriorityInherit+0xc4>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf82:	2301      	movs	r3, #1
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	e008      	b.n	800bf9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf8c:	4b05      	ldr	r3, [pc, #20]	@ (800bfa4 <xTaskPriorityInherit+0xc4>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d201      	bcs.n	800bf9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf96:	2301      	movs	r3, #1
 800bf98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
	}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20002bc4 	.word	0x20002bc4
 800bfa8:	20002bc8 	.word	0x20002bc8
 800bfac:	200030a0 	.word	0x200030a0

0800bfb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d058      	beq.n	800c078 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfc6:	4b2f      	ldr	r3, [pc, #188]	@ (800c084 <xTaskPriorityDisinherit+0xd4>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d00b      	beq.n	800bfe8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	60fb      	str	r3, [r7, #12]
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	e7fd      	b.n	800bfe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10b      	bne.n	800c008 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	60bb      	str	r3, [r7, #8]
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d02c      	beq.n	800c078 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c022:	2b00      	cmp	r3, #0
 800c024:	d128      	bne.n	800c078 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	3304      	adds	r3, #4
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe f92e 	bl	800a28c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c03c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c048:	4b0f      	ldr	r3, [pc, #60]	@ (800c088 <xTaskPriorityDisinherit+0xd8>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d903      	bls.n	800c058 <xTaskPriorityDisinherit+0xa8>
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c054:	4a0c      	ldr	r2, [pc, #48]	@ (800c088 <xTaskPriorityDisinherit+0xd8>)
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4a09      	ldr	r2, [pc, #36]	@ (800c08c <xTaskPriorityDisinherit+0xdc>)
 800c066:	441a      	add	r2, r3
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4619      	mov	r1, r3
 800c06e:	4610      	mov	r0, r2
 800c070:	f7fe f8af 	bl	800a1d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c078:	697b      	ldr	r3, [r7, #20]
	}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20002bc4 	.word	0x20002bc4
 800c088:	200030a0 	.word	0x200030a0
 800c08c:	20002bc8 	.word	0x20002bc8

0800c090 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d06c      	beq.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	60fb      	str	r3, [r7, #12]
}
 800c0c2:	bf00      	nop
 800c0c4:	bf00      	nop
 800c0c6:	e7fd      	b.n	800c0c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d902      	bls.n	800c0d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	61fb      	str	r3, [r7, #28]
 800c0d6:	e002      	b.n	800c0de <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d04c      	beq.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0ec:	697a      	ldr	r2, [r7, #20]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d147      	bne.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c0f2:	4b26      	ldr	r3, [pc, #152]	@ (800c18c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d10b      	bne.n	800c114 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	60bb      	str	r3, [r7, #8]
}
 800c10e:	bf00      	nop
 800c110:	bf00      	nop
 800c112:	e7fd      	b.n	800c110 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c118:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	69fa      	ldr	r2, [r7, #28]
 800c11e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	db04      	blt.n	800c132 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	6959      	ldr	r1, [r3, #20]
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4a13      	ldr	r2, [pc, #76]	@ (800c190 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c142:	4413      	add	r3, r2
 800c144:	4299      	cmp	r1, r3
 800c146:	d11c      	bne.n	800c182 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	3304      	adds	r3, #4
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe f89d 	bl	800a28c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c156:	4b0f      	ldr	r3, [pc, #60]	@ (800c194 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d903      	bls.n	800c166 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c162:	4a0c      	ldr	r2, [pc, #48]	@ (800c194 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4a07      	ldr	r2, [pc, #28]	@ (800c190 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c174:	441a      	add	r2, r3
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	3304      	adds	r3, #4
 800c17a:	4619      	mov	r1, r3
 800c17c:	4610      	mov	r0, r2
 800c17e:	f7fe f828 	bl	800a1d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c182:	bf00      	nop
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	20002bc4 	.word	0x20002bc4
 800c190:	20002bc8 	.word	0x20002bc8
 800c194:	200030a0 	.word	0x200030a0

0800c198 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c198:	b480      	push	{r7}
 800c19a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c19c:	4b07      	ldr	r3, [pc, #28]	@ (800c1bc <pvTaskIncrementMutexHeldCount+0x24>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d004      	beq.n	800c1ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1a4:	4b05      	ldr	r3, [pc, #20]	@ (800c1bc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1aa:	3201      	adds	r2, #1
 800c1ac:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c1ae:	4b03      	ldr	r3, [pc, #12]	@ (800c1bc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
	}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	20002bc4 	.word	0x20002bc4

0800c1c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1ca:	4b21      	ldr	r3, [pc, #132]	@ (800c250 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1d0:	4b20      	ldr	r3, [pc, #128]	@ (800c254 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe f858 	bl	800a28c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e2:	d10a      	bne.n	800c1fa <prvAddCurrentTaskToDelayedList+0x3a>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c254 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4819      	ldr	r0, [pc, #100]	@ (800c258 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1f4:	f7fd ffed 	bl	800a1d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1f8:	e026      	b.n	800c248 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4413      	add	r3, r2
 800c200:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c202:	4b14      	ldr	r3, [pc, #80]	@ (800c254 <prvAddCurrentTaskToDelayedList+0x94>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d209      	bcs.n	800c226 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c212:	4b12      	ldr	r3, [pc, #72]	@ (800c25c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <prvAddCurrentTaskToDelayedList+0x94>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4619      	mov	r1, r3
 800c21e:	4610      	mov	r0, r2
 800c220:	f7fd fffb 	bl	800a21a <vListInsert>
}
 800c224:	e010      	b.n	800c248 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c226:	4b0e      	ldr	r3, [pc, #56]	@ (800c260 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	4b0a      	ldr	r3, [pc, #40]	@ (800c254 <prvAddCurrentTaskToDelayedList+0x94>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4610      	mov	r0, r2
 800c234:	f7fd fff1 	bl	800a21a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c238:	4b0a      	ldr	r3, [pc, #40]	@ (800c264 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d202      	bcs.n	800c248 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c242:	4a08      	ldr	r2, [pc, #32]	@ (800c264 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	6013      	str	r3, [r2, #0]
}
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	2000309c 	.word	0x2000309c
 800c254:	20002bc4 	.word	0x20002bc4
 800c258:	20003084 	.word	0x20003084
 800c25c:	20003054 	.word	0x20003054
 800c260:	20003050 	.word	0x20003050
 800c264:	200030b8 	.word	0x200030b8

0800c268 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08a      	sub	sp, #40	@ 0x28
 800c26c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c26e:	2300      	movs	r3, #0
 800c270:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c272:	f000 fb13 	bl	800c89c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c276:	4b1d      	ldr	r3, [pc, #116]	@ (800c2ec <xTimerCreateTimerTask+0x84>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d021      	beq.n	800c2c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c286:	1d3a      	adds	r2, r7, #4
 800c288:	f107 0108 	add.w	r1, r7, #8
 800c28c:	f107 030c 	add.w	r3, r7, #12
 800c290:	4618      	mov	r0, r3
 800c292:	f7fd ff57 	bl	800a144 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	9202      	str	r2, [sp, #8]
 800c29e:	9301      	str	r3, [sp, #4]
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	460a      	mov	r2, r1
 800c2a8:	4911      	ldr	r1, [pc, #68]	@ (800c2f0 <xTimerCreateTimerTask+0x88>)
 800c2aa:	4812      	ldr	r0, [pc, #72]	@ (800c2f4 <xTimerCreateTimerTask+0x8c>)
 800c2ac:	f7fe ff2e 	bl	800b10c <xTaskCreateStatic>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	4a11      	ldr	r2, [pc, #68]	@ (800c2f8 <xTimerCreateTimerTask+0x90>)
 800c2b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2b6:	4b10      	ldr	r3, [pc, #64]	@ (800c2f8 <xTimerCreateTimerTask+0x90>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10b      	bne.n	800c2e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	613b      	str	r3, [r7, #16]
}
 800c2da:	bf00      	nop
 800c2dc:	bf00      	nop
 800c2de:	e7fd      	b.n	800c2dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2e0:	697b      	ldr	r3, [r7, #20]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	200030f4 	.word	0x200030f4
 800c2f0:	08013ba4 	.word	0x08013ba4
 800c2f4:	0800c435 	.word	0x0800c435
 800c2f8:	200030f8 	.word	0x200030f8

0800c2fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	@ 0x28
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10b      	bne.n	800c32c <xTimerGenericCommand+0x30>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	623b      	str	r3, [r7, #32]
}
 800c326:	bf00      	nop
 800c328:	bf00      	nop
 800c32a:	e7fd      	b.n	800c328 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c32c:	4b19      	ldr	r3, [pc, #100]	@ (800c394 <xTimerGenericCommand+0x98>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d02a      	beq.n	800c38a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2b05      	cmp	r3, #5
 800c344:	dc18      	bgt.n	800c378 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c346:	f7ff fdad 	bl	800bea4 <xTaskGetSchedulerState>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d109      	bne.n	800c364 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c350:	4b10      	ldr	r3, [pc, #64]	@ (800c394 <xTimerGenericCommand+0x98>)
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	f107 0110 	add.w	r1, r7, #16
 800c358:	2300      	movs	r3, #0
 800c35a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c35c:	f7fe f9be 	bl	800a6dc <xQueueGenericSend>
 800c360:	6278      	str	r0, [r7, #36]	@ 0x24
 800c362:	e012      	b.n	800c38a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c364:	4b0b      	ldr	r3, [pc, #44]	@ (800c394 <xTimerGenericCommand+0x98>)
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	f107 0110 	add.w	r1, r7, #16
 800c36c:	2300      	movs	r3, #0
 800c36e:	2200      	movs	r2, #0
 800c370:	f7fe f9b4 	bl	800a6dc <xQueueGenericSend>
 800c374:	6278      	str	r0, [r7, #36]	@ 0x24
 800c376:	e008      	b.n	800c38a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c378:	4b06      	ldr	r3, [pc, #24]	@ (800c394 <xTimerGenericCommand+0x98>)
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	f107 0110 	add.w	r1, r7, #16
 800c380:	2300      	movs	r3, #0
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	f7fe faac 	bl	800a8e0 <xQueueGenericSendFromISR>
 800c388:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3728      	adds	r7, #40	@ 0x28
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	200030f4 	.word	0x200030f4

0800c398 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b23      	ldr	r3, [pc, #140]	@ (800c430 <prvProcessExpiredTimer+0x98>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd ff6b 	bl	800a28c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d023      	beq.n	800c40c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	699a      	ldr	r2, [r3, #24]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	18d1      	adds	r1, r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	6978      	ldr	r0, [r7, #20]
 800c3d2:	f000 f8d5 	bl	800c580 <prvInsertTimerInActiveList>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d020      	beq.n	800c41e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6978      	ldr	r0, [r7, #20]
 800c3e8:	f7ff ff88 	bl	800c2fc <xTimerGenericCommand>
 800c3ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d114      	bne.n	800c41e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	60fb      	str	r3, [r7, #12]
}
 800c406:	bf00      	nop
 800c408:	bf00      	nop
 800c40a:	e7fd      	b.n	800c408 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c412:	f023 0301 	bic.w	r3, r3, #1
 800c416:	b2da      	uxtb	r2, r3
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	6978      	ldr	r0, [r7, #20]
 800c424:	4798      	blx	r3
}
 800c426:	bf00      	nop
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	200030ec 	.word	0x200030ec

0800c434 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c43c:	f107 0308 	add.w	r3, r7, #8
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f859 	bl	800c4f8 <prvGetNextExpireTime>
 800c446:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	4619      	mov	r1, r3
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 f805 	bl	800c45c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c452:	f000 f8d7 	bl	800c604 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c456:	bf00      	nop
 800c458:	e7f0      	b.n	800c43c <prvTimerTask+0x8>
	...

0800c45c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c466:	f7ff f915 	bl	800b694 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c46a:	f107 0308 	add.w	r3, r7, #8
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 f866 	bl	800c540 <prvSampleTimeNow>
 800c474:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d130      	bne.n	800c4de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10a      	bne.n	800c498 <prvProcessTimerOrBlockTask+0x3c>
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	429a      	cmp	r2, r3
 800c488:	d806      	bhi.n	800c498 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c48a:	f7ff f911 	bl	800b6b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff ff81 	bl	800c398 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c496:	e024      	b.n	800c4e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d008      	beq.n	800c4b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c49e:	4b13      	ldr	r3, [pc, #76]	@ (800c4ec <prvProcessTimerOrBlockTask+0x90>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <prvProcessTimerOrBlockTask+0x50>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e000      	b.n	800c4ae <prvProcessTimerOrBlockTask+0x52>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f0 <prvProcessTimerOrBlockTask+0x94>)
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f7fe fdf1 	bl	800b0a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4c2:	f7ff f8f5 	bl	800b6b0 <xTaskResumeAll>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4cc:	4b09      	ldr	r3, [pc, #36]	@ (800c4f4 <prvProcessTimerOrBlockTask+0x98>)
 800c4ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	f3bf 8f6f 	isb	sy
}
 800c4dc:	e001      	b.n	800c4e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4de:	f7ff f8e7 	bl	800b6b0 <xTaskResumeAll>
}
 800c4e2:	bf00      	nop
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	200030f0 	.word	0x200030f0
 800c4f0:	200030f4 	.word	0x200030f4
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c500:	4b0e      	ldr	r3, [pc, #56]	@ (800c53c <prvGetNextExpireTime+0x44>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <prvGetNextExpireTime+0x16>
 800c50a:	2201      	movs	r2, #1
 800c50c:	e000      	b.n	800c510 <prvGetNextExpireTime+0x18>
 800c50e:	2200      	movs	r2, #0
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d105      	bne.n	800c528 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c51c:	4b07      	ldr	r3, [pc, #28]	@ (800c53c <prvGetNextExpireTime+0x44>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	e001      	b.n	800c52c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c52c:	68fb      	ldr	r3, [r7, #12]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	200030ec 	.word	0x200030ec

0800c540 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c548:	f7ff f950 	bl	800b7ec <xTaskGetTickCount>
 800c54c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c54e:	4b0b      	ldr	r3, [pc, #44]	@ (800c57c <prvSampleTimeNow+0x3c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	429a      	cmp	r2, r3
 800c556:	d205      	bcs.n	800c564 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c558:	f000 f93a 	bl	800c7d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	e002      	b.n	800c56a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c56a:	4a04      	ldr	r2, [pc, #16]	@ (800c57c <prvSampleTimeNow+0x3c>)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c570:	68fb      	ldr	r3, [r7, #12]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	200030fc 	.word	0x200030fc

0800c580 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c58e:	2300      	movs	r3, #0
 800c590:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d812      	bhi.n	800c5cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	1ad2      	subs	r2, r2, r3
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	699b      	ldr	r3, [r3, #24]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d302      	bcc.n	800c5ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	e01b      	b.n	800c5f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5ba:	4b10      	ldr	r3, [pc, #64]	@ (800c5fc <prvInsertTimerInActiveList+0x7c>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f7fd fe28 	bl	800a21a <vListInsert>
 800c5ca:	e012      	b.n	800c5f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d206      	bcs.n	800c5e2 <prvInsertTimerInActiveList+0x62>
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d302      	bcc.n	800c5e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	e007      	b.n	800c5f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5e2:	4b07      	ldr	r3, [pc, #28]	@ (800c600 <prvInsertTimerInActiveList+0x80>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	f7fd fe14 	bl	800a21a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5f2:	697b      	ldr	r3, [r7, #20]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	200030f0 	.word	0x200030f0
 800c600:	200030ec 	.word	0x200030ec

0800c604 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08e      	sub	sp, #56	@ 0x38
 800c608:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c60a:	e0ce      	b.n	800c7aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	da19      	bge.n	800c646 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c612:	1d3b      	adds	r3, r7, #4
 800c614:	3304      	adds	r3, #4
 800c616:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10b      	bne.n	800c636 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	61fb      	str	r3, [r7, #28]
}
 800c630:	bf00      	nop
 800c632:	bf00      	nop
 800c634:	e7fd      	b.n	800c632 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c63c:	6850      	ldr	r0, [r2, #4]
 800c63e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c640:	6892      	ldr	r2, [r2, #8]
 800c642:	4611      	mov	r1, r2
 800c644:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f2c0 80ae 	blt.w	800c7aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65c:	3304      	adds	r3, #4
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fd fe14 	bl	800a28c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c664:	463b      	mov	r3, r7
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff ff6a 	bl	800c540 <prvSampleTimeNow>
 800c66c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b09      	cmp	r3, #9
 800c672:	f200 8097 	bhi.w	800c7a4 <prvProcessReceivedCommands+0x1a0>
 800c676:	a201      	add	r2, pc, #4	@ (adr r2, 800c67c <prvProcessReceivedCommands+0x78>)
 800c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67c:	0800c6a5 	.word	0x0800c6a5
 800c680:	0800c6a5 	.word	0x0800c6a5
 800c684:	0800c6a5 	.word	0x0800c6a5
 800c688:	0800c71b 	.word	0x0800c71b
 800c68c:	0800c72f 	.word	0x0800c72f
 800c690:	0800c77b 	.word	0x0800c77b
 800c694:	0800c6a5 	.word	0x0800c6a5
 800c698:	0800c6a5 	.word	0x0800c6a5
 800c69c:	0800c71b 	.word	0x0800c71b
 800c6a0:	0800c72f 	.word	0x0800c72f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6aa:	f043 0301 	orr.w	r3, r3, #1
 800c6ae:	b2da      	uxtb	r2, r3
 800c6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	18d1      	adds	r1, r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6c4:	f7ff ff5c 	bl	800c580 <prvInsertTimerInActiveList>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d06c      	beq.n	800c7a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d061      	beq.n	800c7a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	441a      	add	r2, r3
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6f6:	f7ff fe01 	bl	800c2fc <xTimerGenericCommand>
 800c6fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d152      	bne.n	800c7a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	61bb      	str	r3, [r7, #24]
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop
 800c718:	e7fd      	b.n	800c716 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c720:	f023 0301 	bic.w	r3, r3, #1
 800c724:	b2da      	uxtb	r2, r3
 800c726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c728:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c72c:	e03d      	b.n	800c7aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c734:	f043 0301 	orr.w	r3, r3, #1
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	617b      	str	r3, [r7, #20]
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	e7fd      	b.n	800c762 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	699a      	ldr	r2, [r3, #24]
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	18d1      	adds	r1, r2, r3
 800c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c774:	f7ff ff04 	bl	800c580 <prvInsertTimerInActiveList>
					break;
 800c778:	e017      	b.n	800c7aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c780:	f003 0302 	and.w	r3, r3, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	d103      	bne.n	800c790 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c78a:	f000 fbe5 	bl	800cf58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c78e:	e00c      	b.n	800c7aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c796:	f023 0301 	bic.w	r3, r3, #1
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c7a2:	e002      	b.n	800c7aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c7a4:	bf00      	nop
 800c7a6:	e000      	b.n	800c7aa <prvProcessReceivedCommands+0x1a6>
					break;
 800c7a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7aa:	4b08      	ldr	r3, [pc, #32]	@ (800c7cc <prvProcessReceivedCommands+0x1c8>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	1d39      	adds	r1, r7, #4
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe f932 	bl	800aa1c <xQueueReceive>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f47f af26 	bne.w	800c60c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	3730      	adds	r7, #48	@ 0x30
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	200030f4 	.word	0x200030f4

0800c7d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7d6:	e049      	b.n	800c86c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c894 <prvSwitchTimerLists+0xc4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e2:	4b2c      	ldr	r3, [pc, #176]	@ (800c894 <prvSwitchTimerLists+0xc4>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fd fd4b 	bl	800a28c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d02f      	beq.n	800c86c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	4413      	add	r3, r2
 800c814:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d90e      	bls.n	800c83c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c82a:	4b1a      	ldr	r3, [pc, #104]	@ (800c894 <prvSwitchTimerLists+0xc4>)
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3304      	adds	r3, #4
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f7fd fcf0 	bl	800a21a <vListInsert>
 800c83a:	e017      	b.n	800c86c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c83c:	2300      	movs	r3, #0
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	2300      	movs	r3, #0
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	2100      	movs	r1, #0
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f7ff fd58 	bl	800c2fc <xTimerGenericCommand>
 800c84c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10b      	bne.n	800c86c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	603b      	str	r3, [r7, #0]
}
 800c866:	bf00      	nop
 800c868:	bf00      	nop
 800c86a:	e7fd      	b.n	800c868 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c86c:	4b09      	ldr	r3, [pc, #36]	@ (800c894 <prvSwitchTimerLists+0xc4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1b0      	bne.n	800c7d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c876:	4b07      	ldr	r3, [pc, #28]	@ (800c894 <prvSwitchTimerLists+0xc4>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c87c:	4b06      	ldr	r3, [pc, #24]	@ (800c898 <prvSwitchTimerLists+0xc8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a04      	ldr	r2, [pc, #16]	@ (800c894 <prvSwitchTimerLists+0xc4>)
 800c882:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c884:	4a04      	ldr	r2, [pc, #16]	@ (800c898 <prvSwitchTimerLists+0xc8>)
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	6013      	str	r3, [r2, #0]
}
 800c88a:	bf00      	nop
 800c88c:	3718      	adds	r7, #24
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	200030ec 	.word	0x200030ec
 800c898:	200030f0 	.word	0x200030f0

0800c89c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8a2:	f000 f969 	bl	800cb78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8a6:	4b15      	ldr	r3, [pc, #84]	@ (800c8fc <prvCheckForValidListAndQueue+0x60>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d120      	bne.n	800c8f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8ae:	4814      	ldr	r0, [pc, #80]	@ (800c900 <prvCheckForValidListAndQueue+0x64>)
 800c8b0:	f7fd fc62 	bl	800a178 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8b4:	4813      	ldr	r0, [pc, #76]	@ (800c904 <prvCheckForValidListAndQueue+0x68>)
 800c8b6:	f7fd fc5f 	bl	800a178 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8ba:	4b13      	ldr	r3, [pc, #76]	@ (800c908 <prvCheckForValidListAndQueue+0x6c>)
 800c8bc:	4a10      	ldr	r2, [pc, #64]	@ (800c900 <prvCheckForValidListAndQueue+0x64>)
 800c8be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8c0:	4b12      	ldr	r3, [pc, #72]	@ (800c90c <prvCheckForValidListAndQueue+0x70>)
 800c8c2:	4a10      	ldr	r2, [pc, #64]	@ (800c904 <prvCheckForValidListAndQueue+0x68>)
 800c8c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	4b11      	ldr	r3, [pc, #68]	@ (800c910 <prvCheckForValidListAndQueue+0x74>)
 800c8cc:	4a11      	ldr	r2, [pc, #68]	@ (800c914 <prvCheckForValidListAndQueue+0x78>)
 800c8ce:	2110      	movs	r1, #16
 800c8d0:	200a      	movs	r0, #10
 800c8d2:	f7fd fd6f 	bl	800a3b4 <xQueueGenericCreateStatic>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	4a08      	ldr	r2, [pc, #32]	@ (800c8fc <prvCheckForValidListAndQueue+0x60>)
 800c8da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8dc:	4b07      	ldr	r3, [pc, #28]	@ (800c8fc <prvCheckForValidListAndQueue+0x60>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d005      	beq.n	800c8f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8e4:	4b05      	ldr	r3, [pc, #20]	@ (800c8fc <prvCheckForValidListAndQueue+0x60>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	490b      	ldr	r1, [pc, #44]	@ (800c918 <prvCheckForValidListAndQueue+0x7c>)
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fe fbb0 	bl	800b050 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f0:	f000 f974 	bl	800cbdc <vPortExitCritical>
}
 800c8f4:	bf00      	nop
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	200030f4 	.word	0x200030f4
 800c900:	200030c4 	.word	0x200030c4
 800c904:	200030d8 	.word	0x200030d8
 800c908:	200030ec 	.word	0x200030ec
 800c90c:	200030f0 	.word	0x200030f0
 800c910:	200031a0 	.word	0x200031a0
 800c914:	20003100 	.word	0x20003100
 800c918:	08013bac 	.word	0x08013bac

0800c91c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	3b04      	subs	r3, #4
 800c92c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3b04      	subs	r3, #4
 800c93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	f023 0201 	bic.w	r2, r3, #1
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3b04      	subs	r3, #4
 800c94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c94c:	4a0c      	ldr	r2, [pc, #48]	@ (800c980 <pxPortInitialiseStack+0x64>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	3b14      	subs	r3, #20
 800c956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3b04      	subs	r3, #4
 800c962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f06f 0202 	mvn.w	r2, #2
 800c96a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	3b20      	subs	r3, #32
 800c970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c972:	68fb      	ldr	r3, [r7, #12]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	0800c985 	.word	0x0800c985

0800c984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c98e:	4b13      	ldr	r3, [pc, #76]	@ (800c9dc <prvTaskExitError+0x58>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c996:	d00b      	beq.n	800c9b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	60fb      	str	r3, [r7, #12]
}
 800c9aa:	bf00      	nop
 800c9ac:	bf00      	nop
 800c9ae:	e7fd      	b.n	800c9ac <prvTaskExitError+0x28>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60bb      	str	r3, [r7, #8]
}
 800c9c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9c4:	bf00      	nop
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0fc      	beq.n	800c9c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9cc:	bf00      	nop
 800c9ce:	bf00      	nop
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	20000020 	.word	0x20000020

0800c9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9e0:	4b07      	ldr	r3, [pc, #28]	@ (800ca00 <pxCurrentTCBConst2>)
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	6808      	ldr	r0, [r1, #0]
 800c9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ea:	f380 8809 	msr	PSP, r0
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f04f 0000 	mov.w	r0, #0
 800c9f6:	f380 8811 	msr	BASEPRI, r0
 800c9fa:	4770      	bx	lr
 800c9fc:	f3af 8000 	nop.w

0800ca00 <pxCurrentTCBConst2>:
 800ca00:	20002bc4 	.word	0x20002bc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop

0800ca08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca08:	4808      	ldr	r0, [pc, #32]	@ (800ca2c <prvPortStartFirstTask+0x24>)
 800ca0a:	6800      	ldr	r0, [r0, #0]
 800ca0c:	6800      	ldr	r0, [r0, #0]
 800ca0e:	f380 8808 	msr	MSP, r0
 800ca12:	f04f 0000 	mov.w	r0, #0
 800ca16:	f380 8814 	msr	CONTROL, r0
 800ca1a:	b662      	cpsie	i
 800ca1c:	b661      	cpsie	f
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	df00      	svc	0
 800ca28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca2a:	bf00      	nop
 800ca2c:	e000ed08 	.word	0xe000ed08

0800ca30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca36:	4b47      	ldr	r3, [pc, #284]	@ (800cb54 <xPortStartScheduler+0x124>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a47      	ldr	r2, [pc, #284]	@ (800cb58 <xPortStartScheduler+0x128>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d10b      	bne.n	800ca58 <xPortStartScheduler+0x28>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60fb      	str	r3, [r7, #12]
}
 800ca52:	bf00      	nop
 800ca54:	bf00      	nop
 800ca56:	e7fd      	b.n	800ca54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca58:	4b3e      	ldr	r3, [pc, #248]	@ (800cb54 <xPortStartScheduler+0x124>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a3f      	ldr	r2, [pc, #252]	@ (800cb5c <xPortStartScheduler+0x12c>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d10b      	bne.n	800ca7a <xPortStartScheduler+0x4a>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	613b      	str	r3, [r7, #16]
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop
 800ca78:	e7fd      	b.n	800ca76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca7a:	4b39      	ldr	r3, [pc, #228]	@ (800cb60 <xPortStartScheduler+0x130>)
 800ca7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	22ff      	movs	r2, #255	@ 0xff
 800ca8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	4b31      	ldr	r3, [pc, #196]	@ (800cb64 <xPortStartScheduler+0x134>)
 800caa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800caa2:	4b31      	ldr	r3, [pc, #196]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caa4:	2207      	movs	r2, #7
 800caa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caa8:	e009      	b.n	800cabe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800caaa:	4b2f      	ldr	r3, [pc, #188]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3b01      	subs	r3, #1
 800cab0:	4a2d      	ldr	r2, [pc, #180]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cabe:	78fb      	ldrb	r3, [r7, #3]
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cac6:	2b80      	cmp	r3, #128	@ 0x80
 800cac8:	d0ef      	beq.n	800caaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800caca:	4b27      	ldr	r3, [pc, #156]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f1c3 0307 	rsb	r3, r3, #7
 800cad2:	2b04      	cmp	r3, #4
 800cad4:	d00b      	beq.n	800caee <xPortStartScheduler+0xbe>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60bb      	str	r3, [r7, #8]
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	e7fd      	b.n	800caea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800caee:	4b1e      	ldr	r3, [pc, #120]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	021b      	lsls	r3, r3, #8
 800caf4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb68 <xPortStartScheduler+0x138>)
 800caf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800caf8:	4b1b      	ldr	r3, [pc, #108]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb00:	4a19      	ldr	r2, [pc, #100]	@ (800cb68 <xPortStartScheduler+0x138>)
 800cb02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb0c:	4b17      	ldr	r3, [pc, #92]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a16      	ldr	r2, [pc, #88]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cb16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb18:	4b14      	ldr	r3, [pc, #80]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a13      	ldr	r2, [pc, #76]	@ (800cb6c <xPortStartScheduler+0x13c>)
 800cb1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cb22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb24:	f000 f8da 	bl	800ccdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb28:	4b11      	ldr	r3, [pc, #68]	@ (800cb70 <xPortStartScheduler+0x140>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb2e:	f000 f8f9 	bl	800cd24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb32:	4b10      	ldr	r3, [pc, #64]	@ (800cb74 <xPortStartScheduler+0x144>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a0f      	ldr	r2, [pc, #60]	@ (800cb74 <xPortStartScheduler+0x144>)
 800cb38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cb3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb3e:	f7ff ff63 	bl	800ca08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb42:	f7fe ff2f 	bl	800b9a4 <vTaskSwitchContext>
	prvTaskExitError();
 800cb46:	f7ff ff1d 	bl	800c984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	e000ed00 	.word	0xe000ed00
 800cb58:	410fc271 	.word	0x410fc271
 800cb5c:	410fc270 	.word	0x410fc270
 800cb60:	e000e400 	.word	0xe000e400
 800cb64:	200031f0 	.word	0x200031f0
 800cb68:	200031f4 	.word	0x200031f4
 800cb6c:	e000ed20 	.word	0xe000ed20
 800cb70:	20000020 	.word	0x20000020
 800cb74:	e000ef34 	.word	0xe000ef34

0800cb78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb92:	4b10      	ldr	r3, [pc, #64]	@ (800cbd4 <vPortEnterCritical+0x5c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	3301      	adds	r3, #1
 800cb98:	4a0e      	ldr	r2, [pc, #56]	@ (800cbd4 <vPortEnterCritical+0x5c>)
 800cb9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd4 <vPortEnterCritical+0x5c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d110      	bne.n	800cbc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cba4:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd8 <vPortEnterCritical+0x60>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00b      	beq.n	800cbc6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	603b      	str	r3, [r7, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	e7fd      	b.n	800cbc2 <vPortEnterCritical+0x4a>
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20000020 	.word	0x20000020
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbe2:	4b12      	ldr	r3, [pc, #72]	@ (800cc2c <vPortExitCritical+0x50>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10b      	bne.n	800cc02 <vPortExitCritical+0x26>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
 800cbfe:	bf00      	nop
 800cc00:	e7fd      	b.n	800cbfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc02:	4b0a      	ldr	r3, [pc, #40]	@ (800cc2c <vPortExitCritical+0x50>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	4a08      	ldr	r2, [pc, #32]	@ (800cc2c <vPortExitCritical+0x50>)
 800cc0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc0c:	4b07      	ldr	r3, [pc, #28]	@ (800cc2c <vPortExitCritical+0x50>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <vPortExitCritical+0x44>
 800cc14:	2300      	movs	r3, #0
 800cc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f383 8811 	msr	BASEPRI, r3
}
 800cc1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	20000020 	.word	0x20000020

0800cc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc30:	f3ef 8009 	mrs	r0, PSP
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4b15      	ldr	r3, [pc, #84]	@ (800cc90 <pxCurrentTCBConst>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	f01e 0f10 	tst.w	lr, #16
 800cc40:	bf08      	it	eq
 800cc42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	6010      	str	r0, [r2, #0]
 800cc4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cc54:	f380 8811 	msr	BASEPRI, r0
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f7fe fea0 	bl	800b9a4 <vTaskSwitchContext>
 800cc64:	f04f 0000 	mov.w	r0, #0
 800cc68:	f380 8811 	msr	BASEPRI, r0
 800cc6c:	bc09      	pop	{r0, r3}
 800cc6e:	6819      	ldr	r1, [r3, #0]
 800cc70:	6808      	ldr	r0, [r1, #0]
 800cc72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc76:	f01e 0f10 	tst.w	lr, #16
 800cc7a:	bf08      	it	eq
 800cc7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc80:	f380 8809 	msr	PSP, r0
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst>:
 800cc90:	20002bc4 	.word	0x20002bc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	607b      	str	r3, [r7, #4]
}
 800ccb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccb2:	f7fe fdbd 	bl	800b830 <xTaskIncrementTick>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccbc:	4b06      	ldr	r3, [pc, #24]	@ (800ccd8 <xPortSysTickHandler+0x40>)
 800ccbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f383 8811 	msr	BASEPRI, r3
}
 800ccce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	e000ed04 	.word	0xe000ed04

0800ccdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cce0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd10 <vPortSetupTimerInterrupt+0x34>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cce6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd14 <vPortSetupTimerInterrupt+0x38>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccec:	4b0a      	ldr	r3, [pc, #40]	@ (800cd18 <vPortSetupTimerInterrupt+0x3c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a0a      	ldr	r2, [pc, #40]	@ (800cd1c <vPortSetupTimerInterrupt+0x40>)
 800ccf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf6:	099b      	lsrs	r3, r3, #6
 800ccf8:	4a09      	ldr	r2, [pc, #36]	@ (800cd20 <vPortSetupTimerInterrupt+0x44>)
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccfe:	4b04      	ldr	r3, [pc, #16]	@ (800cd10 <vPortSetupTimerInterrupt+0x34>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	601a      	str	r2, [r3, #0]
}
 800cd04:	bf00      	nop
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	e000e010 	.word	0xe000e010
 800cd14:	e000e018 	.word	0xe000e018
 800cd18:	20000014 	.word	0x20000014
 800cd1c:	10624dd3 	.word	0x10624dd3
 800cd20:	e000e014 	.word	0xe000e014

0800cd24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cd34 <vPortEnableVFP+0x10>
 800cd28:	6801      	ldr	r1, [r0, #0]
 800cd2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cd2e:	6001      	str	r1, [r0, #0]
 800cd30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd32:	bf00      	nop
 800cd34:	e000ed88 	.word	0xe000ed88

0800cd38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd3e:	f3ef 8305 	mrs	r3, IPSR
 800cd42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b0f      	cmp	r3, #15
 800cd48:	d915      	bls.n	800cd76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd4a:	4a18      	ldr	r2, [pc, #96]	@ (800cdac <vPortValidateInterruptPriority+0x74>)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd54:	4b16      	ldr	r3, [pc, #88]	@ (800cdb0 <vPortValidateInterruptPriority+0x78>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	7afa      	ldrb	r2, [r7, #11]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d20b      	bcs.n	800cd76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	607b      	str	r3, [r7, #4]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd76:	4b0f      	ldr	r3, [pc, #60]	@ (800cdb4 <vPortValidateInterruptPriority+0x7c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cdb8 <vPortValidateInterruptPriority+0x80>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d90b      	bls.n	800cd9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	603b      	str	r3, [r7, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	e7fd      	b.n	800cd9a <vPortValidateInterruptPriority+0x62>
	}
 800cd9e:	bf00      	nop
 800cda0:	3714      	adds	r7, #20
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	e000e3f0 	.word	0xe000e3f0
 800cdb0:	200031f0 	.word	0x200031f0
 800cdb4:	e000ed0c 	.word	0xe000ed0c
 800cdb8:	200031f4 	.word	0x200031f4

0800cdbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	@ 0x28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdc8:	f7fe fc64 	bl	800b694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdcc:	4b5c      	ldr	r3, [pc, #368]	@ (800cf40 <pvPortMalloc+0x184>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cdd4:	f000 f924 	bl	800d020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cdd8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf44 <pvPortMalloc+0x188>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4013      	ands	r3, r2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f040 8095 	bne.w	800cf10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d01e      	beq.n	800ce2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cdec:	2208      	movs	r2, #8
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d015      	beq.n	800ce2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f023 0307 	bic.w	r3, r3, #7
 800ce04:	3308      	adds	r3, #8
 800ce06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f003 0307 	and.w	r3, r3, #7
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00b      	beq.n	800ce2a <pvPortMalloc+0x6e>
	__asm volatile
 800ce12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	617b      	str	r3, [r7, #20]
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop
 800ce28:	e7fd      	b.n	800ce26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d06f      	beq.n	800cf10 <pvPortMalloc+0x154>
 800ce30:	4b45      	ldr	r3, [pc, #276]	@ (800cf48 <pvPortMalloc+0x18c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d86a      	bhi.n	800cf10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce3a:	4b44      	ldr	r3, [pc, #272]	@ (800cf4c <pvPortMalloc+0x190>)
 800ce3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce3e:	4b43      	ldr	r3, [pc, #268]	@ (800cf4c <pvPortMalloc+0x190>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce44:	e004      	b.n	800ce50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ce46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d903      	bls.n	800ce62 <pvPortMalloc+0xa6>
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1f1      	bne.n	800ce46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce62:	4b37      	ldr	r3, [pc, #220]	@ (800cf40 <pvPortMalloc+0x184>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d051      	beq.n	800cf10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2208      	movs	r2, #8
 800ce72:	4413      	add	r3, r2
 800ce74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	1ad2      	subs	r2, r2, r3
 800ce86:	2308      	movs	r3, #8
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d920      	bls.n	800ced0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4413      	add	r3, r2
 800ce94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	f003 0307 	and.w	r3, r3, #7
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00b      	beq.n	800ceb8 <pvPortMalloc+0xfc>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	613b      	str	r3, [r7, #16]
}
 800ceb2:	bf00      	nop
 800ceb4:	bf00      	nop
 800ceb6:	e7fd      	b.n	800ceb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	1ad2      	subs	r2, r2, r3
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ceca:	69b8      	ldr	r0, [r7, #24]
 800cecc:	f000 f90a 	bl	800d0e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ced0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf48 <pvPortMalloc+0x18c>)
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	1ad3      	subs	r3, r2, r3
 800ceda:	4a1b      	ldr	r2, [pc, #108]	@ (800cf48 <pvPortMalloc+0x18c>)
 800cedc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cede:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <pvPortMalloc+0x18c>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf50 <pvPortMalloc+0x194>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d203      	bcs.n	800cef2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ceea:	4b17      	ldr	r3, [pc, #92]	@ (800cf48 <pvPortMalloc+0x18c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a18      	ldr	r2, [pc, #96]	@ (800cf50 <pvPortMalloc+0x194>)
 800cef0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	4b13      	ldr	r3, [pc, #76]	@ (800cf44 <pvPortMalloc+0x188>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	431a      	orrs	r2, r3
 800cefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf02:	2200      	movs	r2, #0
 800cf04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf06:	4b13      	ldr	r3, [pc, #76]	@ (800cf54 <pvPortMalloc+0x198>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	4a11      	ldr	r2, [pc, #68]	@ (800cf54 <pvPortMalloc+0x198>)
 800cf0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf10:	f7fe fbce 	bl	800b6b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00b      	beq.n	800cf36 <pvPortMalloc+0x17a>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	60fb      	str	r3, [r7, #12]
}
 800cf30:	bf00      	nop
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <pvPortMalloc+0x176>
	return pvReturn;
 800cf36:	69fb      	ldr	r3, [r7, #28]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3728      	adds	r7, #40	@ 0x28
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	20006e00 	.word	0x20006e00
 800cf44:	20006e14 	.word	0x20006e14
 800cf48:	20006e04 	.word	0x20006e04
 800cf4c:	20006df8 	.word	0x20006df8
 800cf50:	20006e08 	.word	0x20006e08
 800cf54:	20006e0c 	.word	0x20006e0c

0800cf58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d04f      	beq.n	800d00a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf6a:	2308      	movs	r3, #8
 800cf6c:	425b      	negs	r3, r3
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	4413      	add	r3, r2
 800cf72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	4b25      	ldr	r3, [pc, #148]	@ (800d014 <vPortFree+0xbc>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4013      	ands	r3, r2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10b      	bne.n	800cf9e <vPortFree+0x46>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60fb      	str	r3, [r7, #12]
}
 800cf98:	bf00      	nop
 800cf9a:	bf00      	nop
 800cf9c:	e7fd      	b.n	800cf9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00b      	beq.n	800cfbe <vPortFree+0x66>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	60bb      	str	r3, [r7, #8]
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	e7fd      	b.n	800cfba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	4b14      	ldr	r3, [pc, #80]	@ (800d014 <vPortFree+0xbc>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d01e      	beq.n	800d00a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d11a      	bne.n	800d00a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	4b0e      	ldr	r3, [pc, #56]	@ (800d014 <vPortFree+0xbc>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	43db      	mvns	r3, r3
 800cfde:	401a      	ands	r2, r3
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfe4:	f7fe fb56 	bl	800b694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	4b0a      	ldr	r3, [pc, #40]	@ (800d018 <vPortFree+0xc0>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4413      	add	r3, r2
 800cff2:	4a09      	ldr	r2, [pc, #36]	@ (800d018 <vPortFree+0xc0>)
 800cff4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cff6:	6938      	ldr	r0, [r7, #16]
 800cff8:	f000 f874 	bl	800d0e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cffc:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <vPortFree+0xc4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3301      	adds	r3, #1
 800d002:	4a06      	ldr	r2, [pc, #24]	@ (800d01c <vPortFree+0xc4>)
 800d004:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d006:	f7fe fb53 	bl	800b6b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d00a:	bf00      	nop
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20006e14 	.word	0x20006e14
 800d018:	20006e04 	.word	0x20006e04
 800d01c:	20006e10 	.word	0x20006e10

0800d020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d026:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d02a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d02c:	4b27      	ldr	r3, [pc, #156]	@ (800d0cc <prvHeapInit+0xac>)
 800d02e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00c      	beq.n	800d054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3307      	adds	r3, #7
 800d03e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f023 0307 	bic.w	r3, r3, #7
 800d046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	4a1f      	ldr	r2, [pc, #124]	@ (800d0cc <prvHeapInit+0xac>)
 800d050:	4413      	add	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d058:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d0 <prvHeapInit+0xb0>)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d05e:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d0 <prvHeapInit+0xb0>)
 800d060:	2200      	movs	r2, #0
 800d062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	4413      	add	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d06c:	2208      	movs	r2, #8
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0307 	bic.w	r3, r3, #7
 800d07a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4a15      	ldr	r2, [pc, #84]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d082:	4b14      	ldr	r3, [pc, #80]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2200      	movs	r2, #0
 800d088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d08a:	4b12      	ldr	r3, [pc, #72]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	1ad2      	subs	r2, r2, r3
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d4 <prvHeapInit+0xb4>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d0d8 <prvHeapInit+0xb8>)
 800d0ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	4a09      	ldr	r2, [pc, #36]	@ (800d0dc <prvHeapInit+0xbc>)
 800d0b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0b8:	4b09      	ldr	r3, [pc, #36]	@ (800d0e0 <prvHeapInit+0xc0>)
 800d0ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d0be:	601a      	str	r2, [r3, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	200031f8 	.word	0x200031f8
 800d0d0:	20006df8 	.word	0x20006df8
 800d0d4:	20006e00 	.word	0x20006e00
 800d0d8:	20006e08 	.word	0x20006e08
 800d0dc:	20006e04 	.word	0x20006e04
 800d0e0:	20006e14 	.word	0x20006e14

0800d0e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0ec:	4b28      	ldr	r3, [pc, #160]	@ (800d190 <prvInsertBlockIntoFreeList+0xac>)
 800d0ee:	60fb      	str	r3, [r7, #12]
 800d0f0:	e002      	b.n	800d0f8 <prvInsertBlockIntoFreeList+0x14>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d8f7      	bhi.n	800d0f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4413      	add	r3, r2
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d108      	bne.n	800d126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	441a      	add	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	441a      	add	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d118      	bne.n	800d16c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	4b15      	ldr	r3, [pc, #84]	@ (800d194 <prvInsertBlockIntoFreeList+0xb0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d00d      	beq.n	800d162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	441a      	add	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	e008      	b.n	800d174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d162:	4b0c      	ldr	r3, [pc, #48]	@ (800d194 <prvInsertBlockIntoFreeList+0xb0>)
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	e003      	b.n	800d174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d002      	beq.n	800d182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d182:	bf00      	nop
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	20006df8 	.word	0x20006df8
 800d194:	20006e00 	.word	0x20006e00

0800d198 <atof>:
 800d198:	2100      	movs	r1, #0
 800d19a:	f000 be09 	b.w	800ddb0 <strtod>

0800d19e <atoi>:
 800d19e:	220a      	movs	r2, #10
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	f000 be8d 	b.w	800dec0 <strtol>

0800d1a6 <sulp>:
 800d1a6:	b570      	push	{r4, r5, r6, lr}
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	ec45 4b10 	vmov	d0, r4, r5
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	f004 fc39 	bl	8011a28 <__ulp>
 800d1b6:	ec51 0b10 	vmov	r0, r1, d0
 800d1ba:	b17e      	cbz	r6, 800d1dc <sulp+0x36>
 800d1bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d1c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dd09      	ble.n	800d1dc <sulp+0x36>
 800d1c8:	051b      	lsls	r3, r3, #20
 800d1ca:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d1ce:	2400      	movs	r4, #0
 800d1d0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d1d4:	4622      	mov	r2, r4
 800d1d6:	462b      	mov	r3, r5
 800d1d8:	f7f3 fa26 	bl	8000628 <__aeabi_dmul>
 800d1dc:	ec41 0b10 	vmov	d0, r0, r1
 800d1e0:	bd70      	pop	{r4, r5, r6, pc}
 800d1e2:	0000      	movs	r0, r0
 800d1e4:	0000      	movs	r0, r0
	...

0800d1e8 <_strtod_l>:
 800d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	b09f      	sub	sp, #124	@ 0x7c
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	921a      	str	r2, [sp, #104]	@ 0x68
 800d1f6:	9005      	str	r0, [sp, #20]
 800d1f8:	f04f 0a00 	mov.w	sl, #0
 800d1fc:	f04f 0b00 	mov.w	fp, #0
 800d200:	460a      	mov	r2, r1
 800d202:	9219      	str	r2, [sp, #100]	@ 0x64
 800d204:	7811      	ldrb	r1, [r2, #0]
 800d206:	292b      	cmp	r1, #43	@ 0x2b
 800d208:	d04a      	beq.n	800d2a0 <_strtod_l+0xb8>
 800d20a:	d838      	bhi.n	800d27e <_strtod_l+0x96>
 800d20c:	290d      	cmp	r1, #13
 800d20e:	d832      	bhi.n	800d276 <_strtod_l+0x8e>
 800d210:	2908      	cmp	r1, #8
 800d212:	d832      	bhi.n	800d27a <_strtod_l+0x92>
 800d214:	2900      	cmp	r1, #0
 800d216:	d03b      	beq.n	800d290 <_strtod_l+0xa8>
 800d218:	2200      	movs	r2, #0
 800d21a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d21c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d21e:	782a      	ldrb	r2, [r5, #0]
 800d220:	2a30      	cmp	r2, #48	@ 0x30
 800d222:	f040 80b2 	bne.w	800d38a <_strtod_l+0x1a2>
 800d226:	786a      	ldrb	r2, [r5, #1]
 800d228:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d22c:	2a58      	cmp	r2, #88	@ 0x58
 800d22e:	d16e      	bne.n	800d30e <_strtod_l+0x126>
 800d230:	9302      	str	r3, [sp, #8]
 800d232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	ab1a      	add	r3, sp, #104	@ 0x68
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	4a8f      	ldr	r2, [pc, #572]	@ (800d478 <_strtod_l+0x290>)
 800d23c:	9805      	ldr	r0, [sp, #20]
 800d23e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d240:	a919      	add	r1, sp, #100	@ 0x64
 800d242:	f003 fc9f 	bl	8010b84 <__gethex>
 800d246:	f010 060f 	ands.w	r6, r0, #15
 800d24a:	4604      	mov	r4, r0
 800d24c:	d005      	beq.n	800d25a <_strtod_l+0x72>
 800d24e:	2e06      	cmp	r6, #6
 800d250:	d128      	bne.n	800d2a4 <_strtod_l+0xbc>
 800d252:	3501      	adds	r5, #1
 800d254:	2300      	movs	r3, #0
 800d256:	9519      	str	r5, [sp, #100]	@ 0x64
 800d258:	930e      	str	r3, [sp, #56]	@ 0x38
 800d25a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f040 858e 	bne.w	800dd7e <_strtod_l+0xb96>
 800d262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d264:	b1cb      	cbz	r3, 800d29a <_strtod_l+0xb2>
 800d266:	4652      	mov	r2, sl
 800d268:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d26c:	ec43 2b10 	vmov	d0, r2, r3
 800d270:	b01f      	add	sp, #124	@ 0x7c
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d276:	2920      	cmp	r1, #32
 800d278:	d1ce      	bne.n	800d218 <_strtod_l+0x30>
 800d27a:	3201      	adds	r2, #1
 800d27c:	e7c1      	b.n	800d202 <_strtod_l+0x1a>
 800d27e:	292d      	cmp	r1, #45	@ 0x2d
 800d280:	d1ca      	bne.n	800d218 <_strtod_l+0x30>
 800d282:	2101      	movs	r1, #1
 800d284:	910e      	str	r1, [sp, #56]	@ 0x38
 800d286:	1c51      	adds	r1, r2, #1
 800d288:	9119      	str	r1, [sp, #100]	@ 0x64
 800d28a:	7852      	ldrb	r2, [r2, #1]
 800d28c:	2a00      	cmp	r2, #0
 800d28e:	d1c5      	bne.n	800d21c <_strtod_l+0x34>
 800d290:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d292:	9419      	str	r4, [sp, #100]	@ 0x64
 800d294:	2b00      	cmp	r3, #0
 800d296:	f040 8570 	bne.w	800dd7a <_strtod_l+0xb92>
 800d29a:	4652      	mov	r2, sl
 800d29c:	465b      	mov	r3, fp
 800d29e:	e7e5      	b.n	800d26c <_strtod_l+0x84>
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	e7ef      	b.n	800d284 <_strtod_l+0x9c>
 800d2a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d2a6:	b13a      	cbz	r2, 800d2b8 <_strtod_l+0xd0>
 800d2a8:	2135      	movs	r1, #53	@ 0x35
 800d2aa:	a81c      	add	r0, sp, #112	@ 0x70
 800d2ac:	f004 fcb6 	bl	8011c1c <__copybits>
 800d2b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	f004 f88c 	bl	80113d0 <_Bfree>
 800d2b8:	3e01      	subs	r6, #1
 800d2ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d2bc:	2e04      	cmp	r6, #4
 800d2be:	d806      	bhi.n	800d2ce <_strtod_l+0xe6>
 800d2c0:	e8df f006 	tbb	[pc, r6]
 800d2c4:	201d0314 	.word	0x201d0314
 800d2c8:	14          	.byte	0x14
 800d2c9:	00          	.byte	0x00
 800d2ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d2ce:	05e1      	lsls	r1, r4, #23
 800d2d0:	bf48      	it	mi
 800d2d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d2d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2da:	0d1b      	lsrs	r3, r3, #20
 800d2dc:	051b      	lsls	r3, r3, #20
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1bb      	bne.n	800d25a <_strtod_l+0x72>
 800d2e2:	f002 fccf 	bl	800fc84 <__errno>
 800d2e6:	2322      	movs	r3, #34	@ 0x22
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	e7b6      	b.n	800d25a <_strtod_l+0x72>
 800d2ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d2f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d2f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d2f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d2fc:	e7e7      	b.n	800d2ce <_strtod_l+0xe6>
 800d2fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d480 <_strtod_l+0x298>
 800d302:	e7e4      	b.n	800d2ce <_strtod_l+0xe6>
 800d304:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d308:	f04f 3aff 	mov.w	sl, #4294967295
 800d30c:	e7df      	b.n	800d2ce <_strtod_l+0xe6>
 800d30e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d310:	1c5a      	adds	r2, r3, #1
 800d312:	9219      	str	r2, [sp, #100]	@ 0x64
 800d314:	785b      	ldrb	r3, [r3, #1]
 800d316:	2b30      	cmp	r3, #48	@ 0x30
 800d318:	d0f9      	beq.n	800d30e <_strtod_l+0x126>
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d09d      	beq.n	800d25a <_strtod_l+0x72>
 800d31e:	2301      	movs	r3, #1
 800d320:	2700      	movs	r7, #0
 800d322:	9308      	str	r3, [sp, #32]
 800d324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d326:	930c      	str	r3, [sp, #48]	@ 0x30
 800d328:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d32a:	46b9      	mov	r9, r7
 800d32c:	220a      	movs	r2, #10
 800d32e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d330:	7805      	ldrb	r5, [r0, #0]
 800d332:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d336:	b2d9      	uxtb	r1, r3
 800d338:	2909      	cmp	r1, #9
 800d33a:	d928      	bls.n	800d38e <_strtod_l+0x1a6>
 800d33c:	494f      	ldr	r1, [pc, #316]	@ (800d47c <_strtod_l+0x294>)
 800d33e:	2201      	movs	r2, #1
 800d340:	f001 fd06 	bl	800ed50 <strncmp>
 800d344:	2800      	cmp	r0, #0
 800d346:	d032      	beq.n	800d3ae <_strtod_l+0x1c6>
 800d348:	2000      	movs	r0, #0
 800d34a:	462a      	mov	r2, r5
 800d34c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d34e:	464d      	mov	r5, r9
 800d350:	4603      	mov	r3, r0
 800d352:	2a65      	cmp	r2, #101	@ 0x65
 800d354:	d001      	beq.n	800d35a <_strtod_l+0x172>
 800d356:	2a45      	cmp	r2, #69	@ 0x45
 800d358:	d114      	bne.n	800d384 <_strtod_l+0x19c>
 800d35a:	b91d      	cbnz	r5, 800d364 <_strtod_l+0x17c>
 800d35c:	9a08      	ldr	r2, [sp, #32]
 800d35e:	4302      	orrs	r2, r0
 800d360:	d096      	beq.n	800d290 <_strtod_l+0xa8>
 800d362:	2500      	movs	r5, #0
 800d364:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d366:	1c62      	adds	r2, r4, #1
 800d368:	9219      	str	r2, [sp, #100]	@ 0x64
 800d36a:	7862      	ldrb	r2, [r4, #1]
 800d36c:	2a2b      	cmp	r2, #43	@ 0x2b
 800d36e:	d07a      	beq.n	800d466 <_strtod_l+0x27e>
 800d370:	2a2d      	cmp	r2, #45	@ 0x2d
 800d372:	d07e      	beq.n	800d472 <_strtod_l+0x28a>
 800d374:	f04f 0c00 	mov.w	ip, #0
 800d378:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d37c:	2909      	cmp	r1, #9
 800d37e:	f240 8085 	bls.w	800d48c <_strtod_l+0x2a4>
 800d382:	9419      	str	r4, [sp, #100]	@ 0x64
 800d384:	f04f 0800 	mov.w	r8, #0
 800d388:	e0a5      	b.n	800d4d6 <_strtod_l+0x2ee>
 800d38a:	2300      	movs	r3, #0
 800d38c:	e7c8      	b.n	800d320 <_strtod_l+0x138>
 800d38e:	f1b9 0f08 	cmp.w	r9, #8
 800d392:	bfd8      	it	le
 800d394:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d396:	f100 0001 	add.w	r0, r0, #1
 800d39a:	bfda      	itte	le
 800d39c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d3a0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d3a2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d3a6:	f109 0901 	add.w	r9, r9, #1
 800d3aa:	9019      	str	r0, [sp, #100]	@ 0x64
 800d3ac:	e7bf      	b.n	800d32e <_strtod_l+0x146>
 800d3ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3b4:	785a      	ldrb	r2, [r3, #1]
 800d3b6:	f1b9 0f00 	cmp.w	r9, #0
 800d3ba:	d03b      	beq.n	800d434 <_strtod_l+0x24c>
 800d3bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3be:	464d      	mov	r5, r9
 800d3c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d3c4:	2b09      	cmp	r3, #9
 800d3c6:	d912      	bls.n	800d3ee <_strtod_l+0x206>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e7c2      	b.n	800d352 <_strtod_l+0x16a>
 800d3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3d2:	785a      	ldrb	r2, [r3, #1]
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	2a30      	cmp	r2, #48	@ 0x30
 800d3d8:	d0f8      	beq.n	800d3cc <_strtod_l+0x1e4>
 800d3da:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d3de:	2b08      	cmp	r3, #8
 800d3e0:	f200 84d2 	bhi.w	800dd88 <_strtod_l+0xba0>
 800d3e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3e6:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	3a30      	subs	r2, #48	@ 0x30
 800d3f0:	f100 0301 	add.w	r3, r0, #1
 800d3f4:	d018      	beq.n	800d428 <_strtod_l+0x240>
 800d3f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3f8:	4419      	add	r1, r3
 800d3fa:	910a      	str	r1, [sp, #40]	@ 0x28
 800d3fc:	462e      	mov	r6, r5
 800d3fe:	f04f 0e0a 	mov.w	lr, #10
 800d402:	1c71      	adds	r1, r6, #1
 800d404:	eba1 0c05 	sub.w	ip, r1, r5
 800d408:	4563      	cmp	r3, ip
 800d40a:	dc15      	bgt.n	800d438 <_strtod_l+0x250>
 800d40c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d410:	182b      	adds	r3, r5, r0
 800d412:	2b08      	cmp	r3, #8
 800d414:	f105 0501 	add.w	r5, r5, #1
 800d418:	4405      	add	r5, r0
 800d41a:	dc1a      	bgt.n	800d452 <_strtod_l+0x26a>
 800d41c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d41e:	230a      	movs	r3, #10
 800d420:	fb03 2301 	mla	r3, r3, r1, r2
 800d424:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d426:	2300      	movs	r3, #0
 800d428:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d42a:	1c51      	adds	r1, r2, #1
 800d42c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d42e:	7852      	ldrb	r2, [r2, #1]
 800d430:	4618      	mov	r0, r3
 800d432:	e7c5      	b.n	800d3c0 <_strtod_l+0x1d8>
 800d434:	4648      	mov	r0, r9
 800d436:	e7ce      	b.n	800d3d6 <_strtod_l+0x1ee>
 800d438:	2e08      	cmp	r6, #8
 800d43a:	dc05      	bgt.n	800d448 <_strtod_l+0x260>
 800d43c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d43e:	fb0e f606 	mul.w	r6, lr, r6
 800d442:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d444:	460e      	mov	r6, r1
 800d446:	e7dc      	b.n	800d402 <_strtod_l+0x21a>
 800d448:	2910      	cmp	r1, #16
 800d44a:	bfd8      	it	le
 800d44c:	fb0e f707 	mulle.w	r7, lr, r7
 800d450:	e7f8      	b.n	800d444 <_strtod_l+0x25c>
 800d452:	2b0f      	cmp	r3, #15
 800d454:	bfdc      	itt	le
 800d456:	230a      	movle	r3, #10
 800d458:	fb03 2707 	mlale	r7, r3, r7, r2
 800d45c:	e7e3      	b.n	800d426 <_strtod_l+0x23e>
 800d45e:	2300      	movs	r3, #0
 800d460:	930a      	str	r3, [sp, #40]	@ 0x28
 800d462:	2301      	movs	r3, #1
 800d464:	e77a      	b.n	800d35c <_strtod_l+0x174>
 800d466:	f04f 0c00 	mov.w	ip, #0
 800d46a:	1ca2      	adds	r2, r4, #2
 800d46c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d46e:	78a2      	ldrb	r2, [r4, #2]
 800d470:	e782      	b.n	800d378 <_strtod_l+0x190>
 800d472:	f04f 0c01 	mov.w	ip, #1
 800d476:	e7f8      	b.n	800d46a <_strtod_l+0x282>
 800d478:	080140cc 	.word	0x080140cc
 800d47c:	08013d54 	.word	0x08013d54
 800d480:	7ff00000 	.word	0x7ff00000
 800d484:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d486:	1c51      	adds	r1, r2, #1
 800d488:	9119      	str	r1, [sp, #100]	@ 0x64
 800d48a:	7852      	ldrb	r2, [r2, #1]
 800d48c:	2a30      	cmp	r2, #48	@ 0x30
 800d48e:	d0f9      	beq.n	800d484 <_strtod_l+0x29c>
 800d490:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d494:	2908      	cmp	r1, #8
 800d496:	f63f af75 	bhi.w	800d384 <_strtod_l+0x19c>
 800d49a:	3a30      	subs	r2, #48	@ 0x30
 800d49c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d49e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d4a2:	f04f 080a 	mov.w	r8, #10
 800d4a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4a8:	1c56      	adds	r6, r2, #1
 800d4aa:	9619      	str	r6, [sp, #100]	@ 0x64
 800d4ac:	7852      	ldrb	r2, [r2, #1]
 800d4ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d4b2:	f1be 0f09 	cmp.w	lr, #9
 800d4b6:	d939      	bls.n	800d52c <_strtod_l+0x344>
 800d4b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d4ba:	1a76      	subs	r6, r6, r1
 800d4bc:	2e08      	cmp	r6, #8
 800d4be:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d4c2:	dc03      	bgt.n	800d4cc <_strtod_l+0x2e4>
 800d4c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4c6:	4588      	cmp	r8, r1
 800d4c8:	bfa8      	it	ge
 800d4ca:	4688      	movge	r8, r1
 800d4cc:	f1bc 0f00 	cmp.w	ip, #0
 800d4d0:	d001      	beq.n	800d4d6 <_strtod_l+0x2ee>
 800d4d2:	f1c8 0800 	rsb	r8, r8, #0
 800d4d6:	2d00      	cmp	r5, #0
 800d4d8:	d14e      	bne.n	800d578 <_strtod_l+0x390>
 800d4da:	9908      	ldr	r1, [sp, #32]
 800d4dc:	4308      	orrs	r0, r1
 800d4de:	f47f aebc 	bne.w	800d25a <_strtod_l+0x72>
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f47f aed4 	bne.w	800d290 <_strtod_l+0xa8>
 800d4e8:	2a69      	cmp	r2, #105	@ 0x69
 800d4ea:	d028      	beq.n	800d53e <_strtod_l+0x356>
 800d4ec:	dc25      	bgt.n	800d53a <_strtod_l+0x352>
 800d4ee:	2a49      	cmp	r2, #73	@ 0x49
 800d4f0:	d025      	beq.n	800d53e <_strtod_l+0x356>
 800d4f2:	2a4e      	cmp	r2, #78	@ 0x4e
 800d4f4:	f47f aecc 	bne.w	800d290 <_strtod_l+0xa8>
 800d4f8:	499a      	ldr	r1, [pc, #616]	@ (800d764 <_strtod_l+0x57c>)
 800d4fa:	a819      	add	r0, sp, #100	@ 0x64
 800d4fc:	f003 fd64 	bl	8010fc8 <__match>
 800d500:	2800      	cmp	r0, #0
 800d502:	f43f aec5 	beq.w	800d290 <_strtod_l+0xa8>
 800d506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b28      	cmp	r3, #40	@ 0x28
 800d50c:	d12e      	bne.n	800d56c <_strtod_l+0x384>
 800d50e:	4996      	ldr	r1, [pc, #600]	@ (800d768 <_strtod_l+0x580>)
 800d510:	aa1c      	add	r2, sp, #112	@ 0x70
 800d512:	a819      	add	r0, sp, #100	@ 0x64
 800d514:	f003 fd6c 	bl	8010ff0 <__hexnan>
 800d518:	2805      	cmp	r0, #5
 800d51a:	d127      	bne.n	800d56c <_strtod_l+0x384>
 800d51c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d51e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d522:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d526:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d52a:	e696      	b.n	800d25a <_strtod_l+0x72>
 800d52c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d52e:	fb08 2101 	mla	r1, r8, r1, r2
 800d532:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d536:	9209      	str	r2, [sp, #36]	@ 0x24
 800d538:	e7b5      	b.n	800d4a6 <_strtod_l+0x2be>
 800d53a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d53c:	e7da      	b.n	800d4f4 <_strtod_l+0x30c>
 800d53e:	498b      	ldr	r1, [pc, #556]	@ (800d76c <_strtod_l+0x584>)
 800d540:	a819      	add	r0, sp, #100	@ 0x64
 800d542:	f003 fd41 	bl	8010fc8 <__match>
 800d546:	2800      	cmp	r0, #0
 800d548:	f43f aea2 	beq.w	800d290 <_strtod_l+0xa8>
 800d54c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d54e:	4988      	ldr	r1, [pc, #544]	@ (800d770 <_strtod_l+0x588>)
 800d550:	3b01      	subs	r3, #1
 800d552:	a819      	add	r0, sp, #100	@ 0x64
 800d554:	9319      	str	r3, [sp, #100]	@ 0x64
 800d556:	f003 fd37 	bl	8010fc8 <__match>
 800d55a:	b910      	cbnz	r0, 800d562 <_strtod_l+0x37a>
 800d55c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d55e:	3301      	adds	r3, #1
 800d560:	9319      	str	r3, [sp, #100]	@ 0x64
 800d562:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d780 <_strtod_l+0x598>
 800d566:	f04f 0a00 	mov.w	sl, #0
 800d56a:	e676      	b.n	800d25a <_strtod_l+0x72>
 800d56c:	4881      	ldr	r0, [pc, #516]	@ (800d774 <_strtod_l+0x58c>)
 800d56e:	f002 fbcf 	bl	800fd10 <nan>
 800d572:	ec5b ab10 	vmov	sl, fp, d0
 800d576:	e670      	b.n	800d25a <_strtod_l+0x72>
 800d578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d57a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d57c:	eba8 0303 	sub.w	r3, r8, r3
 800d580:	f1b9 0f00 	cmp.w	r9, #0
 800d584:	bf08      	it	eq
 800d586:	46a9      	moveq	r9, r5
 800d588:	2d10      	cmp	r5, #16
 800d58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58c:	462c      	mov	r4, r5
 800d58e:	bfa8      	it	ge
 800d590:	2410      	movge	r4, #16
 800d592:	f7f2 ffcf 	bl	8000534 <__aeabi_ui2d>
 800d596:	2d09      	cmp	r5, #9
 800d598:	4682      	mov	sl, r0
 800d59a:	468b      	mov	fp, r1
 800d59c:	dc13      	bgt.n	800d5c6 <_strtod_l+0x3de>
 800d59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f43f ae5a 	beq.w	800d25a <_strtod_l+0x72>
 800d5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a8:	dd78      	ble.n	800d69c <_strtod_l+0x4b4>
 800d5aa:	2b16      	cmp	r3, #22
 800d5ac:	dc5f      	bgt.n	800d66e <_strtod_l+0x486>
 800d5ae:	4972      	ldr	r1, [pc, #456]	@ (800d778 <_strtod_l+0x590>)
 800d5b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5b8:	4652      	mov	r2, sl
 800d5ba:	465b      	mov	r3, fp
 800d5bc:	f7f3 f834 	bl	8000628 <__aeabi_dmul>
 800d5c0:	4682      	mov	sl, r0
 800d5c2:	468b      	mov	fp, r1
 800d5c4:	e649      	b.n	800d25a <_strtod_l+0x72>
 800d5c6:	4b6c      	ldr	r3, [pc, #432]	@ (800d778 <_strtod_l+0x590>)
 800d5c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d5d0:	f7f3 f82a 	bl	8000628 <__aeabi_dmul>
 800d5d4:	4682      	mov	sl, r0
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	468b      	mov	fp, r1
 800d5da:	f7f2 ffab 	bl	8000534 <__aeabi_ui2d>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	4659      	mov	r1, fp
 800d5e6:	f7f2 fe69 	bl	80002bc <__adddf3>
 800d5ea:	2d0f      	cmp	r5, #15
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	468b      	mov	fp, r1
 800d5f0:	ddd5      	ble.n	800d59e <_strtod_l+0x3b6>
 800d5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f4:	1b2c      	subs	r4, r5, r4
 800d5f6:	441c      	add	r4, r3
 800d5f8:	2c00      	cmp	r4, #0
 800d5fa:	f340 8093 	ble.w	800d724 <_strtod_l+0x53c>
 800d5fe:	f014 030f 	ands.w	r3, r4, #15
 800d602:	d00a      	beq.n	800d61a <_strtod_l+0x432>
 800d604:	495c      	ldr	r1, [pc, #368]	@ (800d778 <_strtod_l+0x590>)
 800d606:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d60a:	4652      	mov	r2, sl
 800d60c:	465b      	mov	r3, fp
 800d60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d612:	f7f3 f809 	bl	8000628 <__aeabi_dmul>
 800d616:	4682      	mov	sl, r0
 800d618:	468b      	mov	fp, r1
 800d61a:	f034 040f 	bics.w	r4, r4, #15
 800d61e:	d073      	beq.n	800d708 <_strtod_l+0x520>
 800d620:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d624:	dd49      	ble.n	800d6ba <_strtod_l+0x4d2>
 800d626:	2400      	movs	r4, #0
 800d628:	46a0      	mov	r8, r4
 800d62a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d62c:	46a1      	mov	r9, r4
 800d62e:	9a05      	ldr	r2, [sp, #20]
 800d630:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d780 <_strtod_l+0x598>
 800d634:	2322      	movs	r3, #34	@ 0x22
 800d636:	6013      	str	r3, [r2, #0]
 800d638:	f04f 0a00 	mov.w	sl, #0
 800d63c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f43f ae0b 	beq.w	800d25a <_strtod_l+0x72>
 800d644:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d646:	9805      	ldr	r0, [sp, #20]
 800d648:	f003 fec2 	bl	80113d0 <_Bfree>
 800d64c:	9805      	ldr	r0, [sp, #20]
 800d64e:	4649      	mov	r1, r9
 800d650:	f003 febe 	bl	80113d0 <_Bfree>
 800d654:	9805      	ldr	r0, [sp, #20]
 800d656:	4641      	mov	r1, r8
 800d658:	f003 feba 	bl	80113d0 <_Bfree>
 800d65c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d65e:	9805      	ldr	r0, [sp, #20]
 800d660:	f003 feb6 	bl	80113d0 <_Bfree>
 800d664:	9805      	ldr	r0, [sp, #20]
 800d666:	4621      	mov	r1, r4
 800d668:	f003 feb2 	bl	80113d0 <_Bfree>
 800d66c:	e5f5      	b.n	800d25a <_strtod_l+0x72>
 800d66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d670:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d674:	4293      	cmp	r3, r2
 800d676:	dbbc      	blt.n	800d5f2 <_strtod_l+0x40a>
 800d678:	4c3f      	ldr	r4, [pc, #252]	@ (800d778 <_strtod_l+0x590>)
 800d67a:	f1c5 050f 	rsb	r5, r5, #15
 800d67e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d682:	4652      	mov	r2, sl
 800d684:	465b      	mov	r3, fp
 800d686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d68a:	f7f2 ffcd 	bl	8000628 <__aeabi_dmul>
 800d68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d690:	1b5d      	subs	r5, r3, r5
 800d692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d69a:	e78f      	b.n	800d5bc <_strtod_l+0x3d4>
 800d69c:	3316      	adds	r3, #22
 800d69e:	dba8      	blt.n	800d5f2 <_strtod_l+0x40a>
 800d6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6a2:	eba3 0808 	sub.w	r8, r3, r8
 800d6a6:	4b34      	ldr	r3, [pc, #208]	@ (800d778 <_strtod_l+0x590>)
 800d6a8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d6ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d6b0:	4650      	mov	r0, sl
 800d6b2:	4659      	mov	r1, fp
 800d6b4:	f7f3 f8e2 	bl	800087c <__aeabi_ddiv>
 800d6b8:	e782      	b.n	800d5c0 <_strtod_l+0x3d8>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4f2f      	ldr	r7, [pc, #188]	@ (800d77c <_strtod_l+0x594>)
 800d6be:	1124      	asrs	r4, r4, #4
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	461e      	mov	r6, r3
 800d6c6:	2c01      	cmp	r4, #1
 800d6c8:	dc21      	bgt.n	800d70e <_strtod_l+0x526>
 800d6ca:	b10b      	cbz	r3, 800d6d0 <_strtod_l+0x4e8>
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	468b      	mov	fp, r1
 800d6d0:	492a      	ldr	r1, [pc, #168]	@ (800d77c <_strtod_l+0x594>)
 800d6d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d6d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d6da:	4652      	mov	r2, sl
 800d6dc:	465b      	mov	r3, fp
 800d6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e2:	f7f2 ffa1 	bl	8000628 <__aeabi_dmul>
 800d6e6:	4b26      	ldr	r3, [pc, #152]	@ (800d780 <_strtod_l+0x598>)
 800d6e8:	460a      	mov	r2, r1
 800d6ea:	400b      	ands	r3, r1
 800d6ec:	4925      	ldr	r1, [pc, #148]	@ (800d784 <_strtod_l+0x59c>)
 800d6ee:	428b      	cmp	r3, r1
 800d6f0:	4682      	mov	sl, r0
 800d6f2:	d898      	bhi.n	800d626 <_strtod_l+0x43e>
 800d6f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d6f8:	428b      	cmp	r3, r1
 800d6fa:	bf86      	itte	hi
 800d6fc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d788 <_strtod_l+0x5a0>
 800d700:	f04f 3aff 	movhi.w	sl, #4294967295
 800d704:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d708:	2300      	movs	r3, #0
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	e076      	b.n	800d7fc <_strtod_l+0x614>
 800d70e:	07e2      	lsls	r2, r4, #31
 800d710:	d504      	bpl.n	800d71c <_strtod_l+0x534>
 800d712:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d716:	f7f2 ff87 	bl	8000628 <__aeabi_dmul>
 800d71a:	2301      	movs	r3, #1
 800d71c:	3601      	adds	r6, #1
 800d71e:	1064      	asrs	r4, r4, #1
 800d720:	3708      	adds	r7, #8
 800d722:	e7d0      	b.n	800d6c6 <_strtod_l+0x4de>
 800d724:	d0f0      	beq.n	800d708 <_strtod_l+0x520>
 800d726:	4264      	negs	r4, r4
 800d728:	f014 020f 	ands.w	r2, r4, #15
 800d72c:	d00a      	beq.n	800d744 <_strtod_l+0x55c>
 800d72e:	4b12      	ldr	r3, [pc, #72]	@ (800d778 <_strtod_l+0x590>)
 800d730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d734:	4650      	mov	r0, sl
 800d736:	4659      	mov	r1, fp
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	f7f3 f89e 	bl	800087c <__aeabi_ddiv>
 800d740:	4682      	mov	sl, r0
 800d742:	468b      	mov	fp, r1
 800d744:	1124      	asrs	r4, r4, #4
 800d746:	d0df      	beq.n	800d708 <_strtod_l+0x520>
 800d748:	2c1f      	cmp	r4, #31
 800d74a:	dd1f      	ble.n	800d78c <_strtod_l+0x5a4>
 800d74c:	2400      	movs	r4, #0
 800d74e:	46a0      	mov	r8, r4
 800d750:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d752:	46a1      	mov	r9, r4
 800d754:	9a05      	ldr	r2, [sp, #20]
 800d756:	2322      	movs	r3, #34	@ 0x22
 800d758:	f04f 0a00 	mov.w	sl, #0
 800d75c:	f04f 0b00 	mov.w	fp, #0
 800d760:	6013      	str	r3, [r2, #0]
 800d762:	e76b      	b.n	800d63c <_strtod_l+0x454>
 800d764:	08013d63 	.word	0x08013d63
 800d768:	080140b8 	.word	0x080140b8
 800d76c:	08013d5b 	.word	0x08013d5b
 800d770:	08013ee7 	.word	0x08013ee7
 800d774:	080140b7 	.word	0x080140b7
 800d778:	08014300 	.word	0x08014300
 800d77c:	080142d8 	.word	0x080142d8
 800d780:	7ff00000 	.word	0x7ff00000
 800d784:	7ca00000 	.word	0x7ca00000
 800d788:	7fefffff 	.word	0x7fefffff
 800d78c:	f014 0310 	ands.w	r3, r4, #16
 800d790:	bf18      	it	ne
 800d792:	236a      	movne	r3, #106	@ 0x6a
 800d794:	4ea9      	ldr	r6, [pc, #676]	@ (800da3c <_strtod_l+0x854>)
 800d796:	9308      	str	r3, [sp, #32]
 800d798:	4650      	mov	r0, sl
 800d79a:	4659      	mov	r1, fp
 800d79c:	2300      	movs	r3, #0
 800d79e:	07e7      	lsls	r7, r4, #31
 800d7a0:	d504      	bpl.n	800d7ac <_strtod_l+0x5c4>
 800d7a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7a6:	f7f2 ff3f 	bl	8000628 <__aeabi_dmul>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	1064      	asrs	r4, r4, #1
 800d7ae:	f106 0608 	add.w	r6, r6, #8
 800d7b2:	d1f4      	bne.n	800d79e <_strtod_l+0x5b6>
 800d7b4:	b10b      	cbz	r3, 800d7ba <_strtod_l+0x5d2>
 800d7b6:	4682      	mov	sl, r0
 800d7b8:	468b      	mov	fp, r1
 800d7ba:	9b08      	ldr	r3, [sp, #32]
 800d7bc:	b1b3      	cbz	r3, 800d7ec <_strtod_l+0x604>
 800d7be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d7c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	4659      	mov	r1, fp
 800d7ca:	dd0f      	ble.n	800d7ec <_strtod_l+0x604>
 800d7cc:	2b1f      	cmp	r3, #31
 800d7ce:	dd56      	ble.n	800d87e <_strtod_l+0x696>
 800d7d0:	2b34      	cmp	r3, #52	@ 0x34
 800d7d2:	bfde      	ittt	le
 800d7d4:	f04f 33ff 	movle.w	r3, #4294967295
 800d7d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d7dc:	4093      	lslle	r3, r2
 800d7de:	f04f 0a00 	mov.w	sl, #0
 800d7e2:	bfcc      	ite	gt
 800d7e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d7e8:	ea03 0b01 	andle.w	fp, r3, r1
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	4659      	mov	r1, fp
 800d7f4:	f7f3 f980 	bl	8000af8 <__aeabi_dcmpeq>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d1a7      	bne.n	800d74c <_strtod_l+0x564>
 800d7fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d802:	9805      	ldr	r0, [sp, #20]
 800d804:	462b      	mov	r3, r5
 800d806:	464a      	mov	r2, r9
 800d808:	f003 fe4a 	bl	80114a0 <__s2b>
 800d80c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f af09 	beq.w	800d626 <_strtod_l+0x43e>
 800d814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d818:	2a00      	cmp	r2, #0
 800d81a:	eba3 0308 	sub.w	r3, r3, r8
 800d81e:	bfa8      	it	ge
 800d820:	2300      	movge	r3, #0
 800d822:	9312      	str	r3, [sp, #72]	@ 0x48
 800d824:	2400      	movs	r4, #0
 800d826:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d82a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d82c:	46a0      	mov	r8, r4
 800d82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d830:	9805      	ldr	r0, [sp, #20]
 800d832:	6859      	ldr	r1, [r3, #4]
 800d834:	f003 fd8c 	bl	8011350 <_Balloc>
 800d838:	4681      	mov	r9, r0
 800d83a:	2800      	cmp	r0, #0
 800d83c:	f43f aef7 	beq.w	800d62e <_strtod_l+0x446>
 800d840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d842:	691a      	ldr	r2, [r3, #16]
 800d844:	3202      	adds	r2, #2
 800d846:	f103 010c 	add.w	r1, r3, #12
 800d84a:	0092      	lsls	r2, r2, #2
 800d84c:	300c      	adds	r0, #12
 800d84e:	f002 fa50 	bl	800fcf2 <memcpy>
 800d852:	ec4b ab10 	vmov	d0, sl, fp
 800d856:	9805      	ldr	r0, [sp, #20]
 800d858:	aa1c      	add	r2, sp, #112	@ 0x70
 800d85a:	a91b      	add	r1, sp, #108	@ 0x6c
 800d85c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d860:	f004 f952 	bl	8011b08 <__d2b>
 800d864:	901a      	str	r0, [sp, #104]	@ 0x68
 800d866:	2800      	cmp	r0, #0
 800d868:	f43f aee1 	beq.w	800d62e <_strtod_l+0x446>
 800d86c:	9805      	ldr	r0, [sp, #20]
 800d86e:	2101      	movs	r1, #1
 800d870:	f003 feac 	bl	80115cc <__i2b>
 800d874:	4680      	mov	r8, r0
 800d876:	b948      	cbnz	r0, 800d88c <_strtod_l+0x6a4>
 800d878:	f04f 0800 	mov.w	r8, #0
 800d87c:	e6d7      	b.n	800d62e <_strtod_l+0x446>
 800d87e:	f04f 32ff 	mov.w	r2, #4294967295
 800d882:	fa02 f303 	lsl.w	r3, r2, r3
 800d886:	ea03 0a0a 	and.w	sl, r3, sl
 800d88a:	e7af      	b.n	800d7ec <_strtod_l+0x604>
 800d88c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d88e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d890:	2d00      	cmp	r5, #0
 800d892:	bfab      	itete	ge
 800d894:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d896:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d898:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d89a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d89c:	bfac      	ite	ge
 800d89e:	18ef      	addge	r7, r5, r3
 800d8a0:	1b5e      	sublt	r6, r3, r5
 800d8a2:	9b08      	ldr	r3, [sp, #32]
 800d8a4:	1aed      	subs	r5, r5, r3
 800d8a6:	4415      	add	r5, r2
 800d8a8:	4b65      	ldr	r3, [pc, #404]	@ (800da40 <_strtod_l+0x858>)
 800d8aa:	3d01      	subs	r5, #1
 800d8ac:	429d      	cmp	r5, r3
 800d8ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d8b2:	da50      	bge.n	800d956 <_strtod_l+0x76e>
 800d8b4:	1b5b      	subs	r3, r3, r5
 800d8b6:	2b1f      	cmp	r3, #31
 800d8b8:	eba2 0203 	sub.w	r2, r2, r3
 800d8bc:	f04f 0101 	mov.w	r1, #1
 800d8c0:	dc3d      	bgt.n	800d93e <_strtod_l+0x756>
 800d8c2:	fa01 f303 	lsl.w	r3, r1, r3
 800d8c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8cc:	18bd      	adds	r5, r7, r2
 800d8ce:	9b08      	ldr	r3, [sp, #32]
 800d8d0:	42af      	cmp	r7, r5
 800d8d2:	4416      	add	r6, r2
 800d8d4:	441e      	add	r6, r3
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	bfa8      	it	ge
 800d8da:	462b      	movge	r3, r5
 800d8dc:	42b3      	cmp	r3, r6
 800d8de:	bfa8      	it	ge
 800d8e0:	4633      	movge	r3, r6
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	bfc2      	ittt	gt
 800d8e6:	1aed      	subgt	r5, r5, r3
 800d8e8:	1af6      	subgt	r6, r6, r3
 800d8ea:	1aff      	subgt	r7, r7, r3
 800d8ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	dd16      	ble.n	800d920 <_strtod_l+0x738>
 800d8f2:	4641      	mov	r1, r8
 800d8f4:	9805      	ldr	r0, [sp, #20]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f003 ff20 	bl	801173c <__pow5mult>
 800d8fc:	4680      	mov	r8, r0
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d0ba      	beq.n	800d878 <_strtod_l+0x690>
 800d902:	4601      	mov	r1, r0
 800d904:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d906:	9805      	ldr	r0, [sp, #20]
 800d908:	f003 fe76 	bl	80115f8 <__multiply>
 800d90c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d90e:	2800      	cmp	r0, #0
 800d910:	f43f ae8d 	beq.w	800d62e <_strtod_l+0x446>
 800d914:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d916:	9805      	ldr	r0, [sp, #20]
 800d918:	f003 fd5a 	bl	80113d0 <_Bfree>
 800d91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d91e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d920:	2d00      	cmp	r5, #0
 800d922:	dc1d      	bgt.n	800d960 <_strtod_l+0x778>
 800d924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d926:	2b00      	cmp	r3, #0
 800d928:	dd23      	ble.n	800d972 <_strtod_l+0x78a>
 800d92a:	4649      	mov	r1, r9
 800d92c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d92e:	9805      	ldr	r0, [sp, #20]
 800d930:	f003 ff04 	bl	801173c <__pow5mult>
 800d934:	4681      	mov	r9, r0
 800d936:	b9e0      	cbnz	r0, 800d972 <_strtod_l+0x78a>
 800d938:	f04f 0900 	mov.w	r9, #0
 800d93c:	e677      	b.n	800d62e <_strtod_l+0x446>
 800d93e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d942:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d946:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d94a:	35e2      	adds	r5, #226	@ 0xe2
 800d94c:	fa01 f305 	lsl.w	r3, r1, r5
 800d950:	9310      	str	r3, [sp, #64]	@ 0x40
 800d952:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d954:	e7ba      	b.n	800d8cc <_strtod_l+0x6e4>
 800d956:	2300      	movs	r3, #0
 800d958:	9310      	str	r3, [sp, #64]	@ 0x40
 800d95a:	2301      	movs	r3, #1
 800d95c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d95e:	e7b5      	b.n	800d8cc <_strtod_l+0x6e4>
 800d960:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d962:	9805      	ldr	r0, [sp, #20]
 800d964:	462a      	mov	r2, r5
 800d966:	f003 ff43 	bl	80117f0 <__lshift>
 800d96a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d1d9      	bne.n	800d924 <_strtod_l+0x73c>
 800d970:	e65d      	b.n	800d62e <_strtod_l+0x446>
 800d972:	2e00      	cmp	r6, #0
 800d974:	dd07      	ble.n	800d986 <_strtod_l+0x79e>
 800d976:	4649      	mov	r1, r9
 800d978:	9805      	ldr	r0, [sp, #20]
 800d97a:	4632      	mov	r2, r6
 800d97c:	f003 ff38 	bl	80117f0 <__lshift>
 800d980:	4681      	mov	r9, r0
 800d982:	2800      	cmp	r0, #0
 800d984:	d0d8      	beq.n	800d938 <_strtod_l+0x750>
 800d986:	2f00      	cmp	r7, #0
 800d988:	dd08      	ble.n	800d99c <_strtod_l+0x7b4>
 800d98a:	4641      	mov	r1, r8
 800d98c:	9805      	ldr	r0, [sp, #20]
 800d98e:	463a      	mov	r2, r7
 800d990:	f003 ff2e 	bl	80117f0 <__lshift>
 800d994:	4680      	mov	r8, r0
 800d996:	2800      	cmp	r0, #0
 800d998:	f43f ae49 	beq.w	800d62e <_strtod_l+0x446>
 800d99c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d99e:	9805      	ldr	r0, [sp, #20]
 800d9a0:	464a      	mov	r2, r9
 800d9a2:	f003 ffad 	bl	8011900 <__mdiff>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	f43f ae40 	beq.w	800d62e <_strtod_l+0x446>
 800d9ae:	68c3      	ldr	r3, [r0, #12]
 800d9b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60c3      	str	r3, [r0, #12]
 800d9b6:	4641      	mov	r1, r8
 800d9b8:	f003 ff86 	bl	80118c8 <__mcmp>
 800d9bc:	2800      	cmp	r0, #0
 800d9be:	da45      	bge.n	800da4c <_strtod_l+0x864>
 800d9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9c2:	ea53 030a 	orrs.w	r3, r3, sl
 800d9c6:	d16b      	bne.n	800daa0 <_strtod_l+0x8b8>
 800d9c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d167      	bne.n	800daa0 <_strtod_l+0x8b8>
 800d9d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9d4:	0d1b      	lsrs	r3, r3, #20
 800d9d6:	051b      	lsls	r3, r3, #20
 800d9d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d9dc:	d960      	bls.n	800daa0 <_strtod_l+0x8b8>
 800d9de:	6963      	ldr	r3, [r4, #20]
 800d9e0:	b913      	cbnz	r3, 800d9e8 <_strtod_l+0x800>
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	dd5b      	ble.n	800daa0 <_strtod_l+0x8b8>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	9805      	ldr	r0, [sp, #20]
 800d9ee:	f003 feff 	bl	80117f0 <__lshift>
 800d9f2:	4641      	mov	r1, r8
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	f003 ff67 	bl	80118c8 <__mcmp>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	dd50      	ble.n	800daa0 <_strtod_l+0x8b8>
 800d9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da02:	9a08      	ldr	r2, [sp, #32]
 800da04:	0d1b      	lsrs	r3, r3, #20
 800da06:	051b      	lsls	r3, r3, #20
 800da08:	2a00      	cmp	r2, #0
 800da0a:	d06a      	beq.n	800dae2 <_strtod_l+0x8fa>
 800da0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da10:	d867      	bhi.n	800dae2 <_strtod_l+0x8fa>
 800da12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800da16:	f67f ae9d 	bls.w	800d754 <_strtod_l+0x56c>
 800da1a:	4b0a      	ldr	r3, [pc, #40]	@ (800da44 <_strtod_l+0x85c>)
 800da1c:	4650      	mov	r0, sl
 800da1e:	4659      	mov	r1, fp
 800da20:	2200      	movs	r2, #0
 800da22:	f7f2 fe01 	bl	8000628 <__aeabi_dmul>
 800da26:	4b08      	ldr	r3, [pc, #32]	@ (800da48 <_strtod_l+0x860>)
 800da28:	400b      	ands	r3, r1
 800da2a:	4682      	mov	sl, r0
 800da2c:	468b      	mov	fp, r1
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f47f ae08 	bne.w	800d644 <_strtod_l+0x45c>
 800da34:	9a05      	ldr	r2, [sp, #20]
 800da36:	2322      	movs	r3, #34	@ 0x22
 800da38:	6013      	str	r3, [r2, #0]
 800da3a:	e603      	b.n	800d644 <_strtod_l+0x45c>
 800da3c:	080140e0 	.word	0x080140e0
 800da40:	fffffc02 	.word	0xfffffc02
 800da44:	39500000 	.word	0x39500000
 800da48:	7ff00000 	.word	0x7ff00000
 800da4c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800da50:	d165      	bne.n	800db1e <_strtod_l+0x936>
 800da52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800da54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da58:	b35a      	cbz	r2, 800dab2 <_strtod_l+0x8ca>
 800da5a:	4a9f      	ldr	r2, [pc, #636]	@ (800dcd8 <_strtod_l+0xaf0>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d12b      	bne.n	800dab8 <_strtod_l+0x8d0>
 800da60:	9b08      	ldr	r3, [sp, #32]
 800da62:	4651      	mov	r1, sl
 800da64:	b303      	cbz	r3, 800daa8 <_strtod_l+0x8c0>
 800da66:	4b9d      	ldr	r3, [pc, #628]	@ (800dcdc <_strtod_l+0xaf4>)
 800da68:	465a      	mov	r2, fp
 800da6a:	4013      	ands	r3, r2
 800da6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800da70:	f04f 32ff 	mov.w	r2, #4294967295
 800da74:	d81b      	bhi.n	800daae <_strtod_l+0x8c6>
 800da76:	0d1b      	lsrs	r3, r3, #20
 800da78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da7c:	fa02 f303 	lsl.w	r3, r2, r3
 800da80:	4299      	cmp	r1, r3
 800da82:	d119      	bne.n	800dab8 <_strtod_l+0x8d0>
 800da84:	4b96      	ldr	r3, [pc, #600]	@ (800dce0 <_strtod_l+0xaf8>)
 800da86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da88:	429a      	cmp	r2, r3
 800da8a:	d102      	bne.n	800da92 <_strtod_l+0x8aa>
 800da8c:	3101      	adds	r1, #1
 800da8e:	f43f adce 	beq.w	800d62e <_strtod_l+0x446>
 800da92:	4b92      	ldr	r3, [pc, #584]	@ (800dcdc <_strtod_l+0xaf4>)
 800da94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da96:	401a      	ands	r2, r3
 800da98:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800da9c:	f04f 0a00 	mov.w	sl, #0
 800daa0:	9b08      	ldr	r3, [sp, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1b9      	bne.n	800da1a <_strtod_l+0x832>
 800daa6:	e5cd      	b.n	800d644 <_strtod_l+0x45c>
 800daa8:	f04f 33ff 	mov.w	r3, #4294967295
 800daac:	e7e8      	b.n	800da80 <_strtod_l+0x898>
 800daae:	4613      	mov	r3, r2
 800dab0:	e7e6      	b.n	800da80 <_strtod_l+0x898>
 800dab2:	ea53 030a 	orrs.w	r3, r3, sl
 800dab6:	d0a2      	beq.n	800d9fe <_strtod_l+0x816>
 800dab8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800daba:	b1db      	cbz	r3, 800daf4 <_strtod_l+0x90c>
 800dabc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dabe:	4213      	tst	r3, r2
 800dac0:	d0ee      	beq.n	800daa0 <_strtod_l+0x8b8>
 800dac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dac4:	9a08      	ldr	r2, [sp, #32]
 800dac6:	4650      	mov	r0, sl
 800dac8:	4659      	mov	r1, fp
 800daca:	b1bb      	cbz	r3, 800dafc <_strtod_l+0x914>
 800dacc:	f7ff fb6b 	bl	800d1a6 <sulp>
 800dad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dad4:	ec53 2b10 	vmov	r2, r3, d0
 800dad8:	f7f2 fbf0 	bl	80002bc <__adddf3>
 800dadc:	4682      	mov	sl, r0
 800dade:	468b      	mov	fp, r1
 800dae0:	e7de      	b.n	800daa0 <_strtod_l+0x8b8>
 800dae2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dae6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800daea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800daee:	f04f 3aff 	mov.w	sl, #4294967295
 800daf2:	e7d5      	b.n	800daa0 <_strtod_l+0x8b8>
 800daf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800daf6:	ea13 0f0a 	tst.w	r3, sl
 800dafa:	e7e1      	b.n	800dac0 <_strtod_l+0x8d8>
 800dafc:	f7ff fb53 	bl	800d1a6 <sulp>
 800db00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db04:	ec53 2b10 	vmov	r2, r3, d0
 800db08:	f7f2 fbd6 	bl	80002b8 <__aeabi_dsub>
 800db0c:	2200      	movs	r2, #0
 800db0e:	2300      	movs	r3, #0
 800db10:	4682      	mov	sl, r0
 800db12:	468b      	mov	fp, r1
 800db14:	f7f2 fff0 	bl	8000af8 <__aeabi_dcmpeq>
 800db18:	2800      	cmp	r0, #0
 800db1a:	d0c1      	beq.n	800daa0 <_strtod_l+0x8b8>
 800db1c:	e61a      	b.n	800d754 <_strtod_l+0x56c>
 800db1e:	4641      	mov	r1, r8
 800db20:	4620      	mov	r0, r4
 800db22:	f004 f849 	bl	8011bb8 <__ratio>
 800db26:	ec57 6b10 	vmov	r6, r7, d0
 800db2a:	2200      	movs	r2, #0
 800db2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db30:	4630      	mov	r0, r6
 800db32:	4639      	mov	r1, r7
 800db34:	f7f2 fff4 	bl	8000b20 <__aeabi_dcmple>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d06f      	beq.n	800dc1c <_strtod_l+0xa34>
 800db3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d17a      	bne.n	800dc38 <_strtod_l+0xa50>
 800db42:	f1ba 0f00 	cmp.w	sl, #0
 800db46:	d158      	bne.n	800dbfa <_strtod_l+0xa12>
 800db48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d15a      	bne.n	800dc08 <_strtod_l+0xa20>
 800db52:	4b64      	ldr	r3, [pc, #400]	@ (800dce4 <_strtod_l+0xafc>)
 800db54:	2200      	movs	r2, #0
 800db56:	4630      	mov	r0, r6
 800db58:	4639      	mov	r1, r7
 800db5a:	f7f2 ffd7 	bl	8000b0c <__aeabi_dcmplt>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d159      	bne.n	800dc16 <_strtod_l+0xa2e>
 800db62:	4630      	mov	r0, r6
 800db64:	4639      	mov	r1, r7
 800db66:	4b60      	ldr	r3, [pc, #384]	@ (800dce8 <_strtod_l+0xb00>)
 800db68:	2200      	movs	r2, #0
 800db6a:	f7f2 fd5d 	bl	8000628 <__aeabi_dmul>
 800db6e:	4606      	mov	r6, r0
 800db70:	460f      	mov	r7, r1
 800db72:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800db76:	9606      	str	r6, [sp, #24]
 800db78:	9307      	str	r3, [sp, #28]
 800db7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db7e:	4d57      	ldr	r5, [pc, #348]	@ (800dcdc <_strtod_l+0xaf4>)
 800db80:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db86:	401d      	ands	r5, r3
 800db88:	4b58      	ldr	r3, [pc, #352]	@ (800dcec <_strtod_l+0xb04>)
 800db8a:	429d      	cmp	r5, r3
 800db8c:	f040 80b2 	bne.w	800dcf4 <_strtod_l+0xb0c>
 800db90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db92:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800db96:	ec4b ab10 	vmov	d0, sl, fp
 800db9a:	f003 ff45 	bl	8011a28 <__ulp>
 800db9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dba2:	ec51 0b10 	vmov	r0, r1, d0
 800dba6:	f7f2 fd3f 	bl	8000628 <__aeabi_dmul>
 800dbaa:	4652      	mov	r2, sl
 800dbac:	465b      	mov	r3, fp
 800dbae:	f7f2 fb85 	bl	80002bc <__adddf3>
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4949      	ldr	r1, [pc, #292]	@ (800dcdc <_strtod_l+0xaf4>)
 800dbb6:	4a4e      	ldr	r2, [pc, #312]	@ (800dcf0 <_strtod_l+0xb08>)
 800dbb8:	4019      	ands	r1, r3
 800dbba:	4291      	cmp	r1, r2
 800dbbc:	4682      	mov	sl, r0
 800dbbe:	d942      	bls.n	800dc46 <_strtod_l+0xa5e>
 800dbc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dbc2:	4b47      	ldr	r3, [pc, #284]	@ (800dce0 <_strtod_l+0xaf8>)
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d103      	bne.n	800dbd0 <_strtod_l+0x9e8>
 800dbc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbca:	3301      	adds	r3, #1
 800dbcc:	f43f ad2f 	beq.w	800d62e <_strtod_l+0x446>
 800dbd0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dce0 <_strtod_l+0xaf8>
 800dbd4:	f04f 3aff 	mov.w	sl, #4294967295
 800dbd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbda:	9805      	ldr	r0, [sp, #20]
 800dbdc:	f003 fbf8 	bl	80113d0 <_Bfree>
 800dbe0:	9805      	ldr	r0, [sp, #20]
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	f003 fbf4 	bl	80113d0 <_Bfree>
 800dbe8:	9805      	ldr	r0, [sp, #20]
 800dbea:	4641      	mov	r1, r8
 800dbec:	f003 fbf0 	bl	80113d0 <_Bfree>
 800dbf0:	9805      	ldr	r0, [sp, #20]
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	f003 fbec 	bl	80113d0 <_Bfree>
 800dbf8:	e619      	b.n	800d82e <_strtod_l+0x646>
 800dbfa:	f1ba 0f01 	cmp.w	sl, #1
 800dbfe:	d103      	bne.n	800dc08 <_strtod_l+0xa20>
 800dc00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f43f ada6 	beq.w	800d754 <_strtod_l+0x56c>
 800dc08:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dcb8 <_strtod_l+0xad0>
 800dc0c:	4f35      	ldr	r7, [pc, #212]	@ (800dce4 <_strtod_l+0xafc>)
 800dc0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc12:	2600      	movs	r6, #0
 800dc14:	e7b1      	b.n	800db7a <_strtod_l+0x992>
 800dc16:	4f34      	ldr	r7, [pc, #208]	@ (800dce8 <_strtod_l+0xb00>)
 800dc18:	2600      	movs	r6, #0
 800dc1a:	e7aa      	b.n	800db72 <_strtod_l+0x98a>
 800dc1c:	4b32      	ldr	r3, [pc, #200]	@ (800dce8 <_strtod_l+0xb00>)
 800dc1e:	4630      	mov	r0, r6
 800dc20:	4639      	mov	r1, r7
 800dc22:	2200      	movs	r2, #0
 800dc24:	f7f2 fd00 	bl	8000628 <__aeabi_dmul>
 800dc28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	460f      	mov	r7, r1
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d09f      	beq.n	800db72 <_strtod_l+0x98a>
 800dc32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dc36:	e7a0      	b.n	800db7a <_strtod_l+0x992>
 800dc38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dcc0 <_strtod_l+0xad8>
 800dc3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc40:	ec57 6b17 	vmov	r6, r7, d7
 800dc44:	e799      	b.n	800db7a <_strtod_l+0x992>
 800dc46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dc4a:	9b08      	ldr	r3, [sp, #32]
 800dc4c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1c1      	bne.n	800dbd8 <_strtod_l+0x9f0>
 800dc54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc58:	0d1b      	lsrs	r3, r3, #20
 800dc5a:	051b      	lsls	r3, r3, #20
 800dc5c:	429d      	cmp	r5, r3
 800dc5e:	d1bb      	bne.n	800dbd8 <_strtod_l+0x9f0>
 800dc60:	4630      	mov	r0, r6
 800dc62:	4639      	mov	r1, r7
 800dc64:	f7f3 f890 	bl	8000d88 <__aeabi_d2lz>
 800dc68:	f7f2 fcb0 	bl	80005cc <__aeabi_l2d>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	f7f2 fb20 	bl	80002b8 <__aeabi_dsub>
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dc80:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dc84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc86:	ea46 060a 	orr.w	r6, r6, sl
 800dc8a:	431e      	orrs	r6, r3
 800dc8c:	d06f      	beq.n	800dd6e <_strtod_l+0xb86>
 800dc8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dcc8 <_strtod_l+0xae0>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	f7f2 ff3a 	bl	8000b0c <__aeabi_dcmplt>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	f47f acd3 	bne.w	800d644 <_strtod_l+0x45c>
 800dc9e:	a30c      	add	r3, pc, #48	@ (adr r3, 800dcd0 <_strtod_l+0xae8>)
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dca8:	f7f2 ff4e 	bl	8000b48 <__aeabi_dcmpgt>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d093      	beq.n	800dbd8 <_strtod_l+0x9f0>
 800dcb0:	e4c8      	b.n	800d644 <_strtod_l+0x45c>
 800dcb2:	bf00      	nop
 800dcb4:	f3af 8000 	nop.w
 800dcb8:	00000000 	.word	0x00000000
 800dcbc:	bff00000 	.word	0xbff00000
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	3ff00000 	.word	0x3ff00000
 800dcc8:	94a03595 	.word	0x94a03595
 800dccc:	3fdfffff 	.word	0x3fdfffff
 800dcd0:	35afe535 	.word	0x35afe535
 800dcd4:	3fe00000 	.word	0x3fe00000
 800dcd8:	000fffff 	.word	0x000fffff
 800dcdc:	7ff00000 	.word	0x7ff00000
 800dce0:	7fefffff 	.word	0x7fefffff
 800dce4:	3ff00000 	.word	0x3ff00000
 800dce8:	3fe00000 	.word	0x3fe00000
 800dcec:	7fe00000 	.word	0x7fe00000
 800dcf0:	7c9fffff 	.word	0x7c9fffff
 800dcf4:	9b08      	ldr	r3, [sp, #32]
 800dcf6:	b323      	cbz	r3, 800dd42 <_strtod_l+0xb5a>
 800dcf8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dcfc:	d821      	bhi.n	800dd42 <_strtod_l+0xb5a>
 800dcfe:	a328      	add	r3, pc, #160	@ (adr r3, 800dda0 <_strtod_l+0xbb8>)
 800dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd04:	4630      	mov	r0, r6
 800dd06:	4639      	mov	r1, r7
 800dd08:	f7f2 ff0a 	bl	8000b20 <__aeabi_dcmple>
 800dd0c:	b1a0      	cbz	r0, 800dd38 <_strtod_l+0xb50>
 800dd0e:	4639      	mov	r1, r7
 800dd10:	4630      	mov	r0, r6
 800dd12:	f7f2 ff61 	bl	8000bd8 <__aeabi_d2uiz>
 800dd16:	2801      	cmp	r0, #1
 800dd18:	bf38      	it	cc
 800dd1a:	2001      	movcc	r0, #1
 800dd1c:	f7f2 fc0a 	bl	8000534 <__aeabi_ui2d>
 800dd20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd22:	4606      	mov	r6, r0
 800dd24:	460f      	mov	r7, r1
 800dd26:	b9fb      	cbnz	r3, 800dd68 <_strtod_l+0xb80>
 800dd28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd2c:	9014      	str	r0, [sp, #80]	@ 0x50
 800dd2e:	9315      	str	r3, [sp, #84]	@ 0x54
 800dd30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dd34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dd38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dd3e:	1b5b      	subs	r3, r3, r5
 800dd40:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dd46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dd4a:	f003 fe6d 	bl	8011a28 <__ulp>
 800dd4e:	4650      	mov	r0, sl
 800dd50:	ec53 2b10 	vmov	r2, r3, d0
 800dd54:	4659      	mov	r1, fp
 800dd56:	f7f2 fc67 	bl	8000628 <__aeabi_dmul>
 800dd5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dd5e:	f7f2 faad 	bl	80002bc <__adddf3>
 800dd62:	4682      	mov	sl, r0
 800dd64:	468b      	mov	fp, r1
 800dd66:	e770      	b.n	800dc4a <_strtod_l+0xa62>
 800dd68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dd6c:	e7e0      	b.n	800dd30 <_strtod_l+0xb48>
 800dd6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dda8 <_strtod_l+0xbc0>)
 800dd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd74:	f7f2 feca 	bl	8000b0c <__aeabi_dcmplt>
 800dd78:	e798      	b.n	800dcac <_strtod_l+0xac4>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	930e      	str	r3, [sp, #56]	@ 0x38
 800dd7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dd80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	f7ff ba6d 	b.w	800d262 <_strtod_l+0x7a>
 800dd88:	2a65      	cmp	r2, #101	@ 0x65
 800dd8a:	f43f ab68 	beq.w	800d45e <_strtod_l+0x276>
 800dd8e:	2a45      	cmp	r2, #69	@ 0x45
 800dd90:	f43f ab65 	beq.w	800d45e <_strtod_l+0x276>
 800dd94:	2301      	movs	r3, #1
 800dd96:	f7ff bba0 	b.w	800d4da <_strtod_l+0x2f2>
 800dd9a:	bf00      	nop
 800dd9c:	f3af 8000 	nop.w
 800dda0:	ffc00000 	.word	0xffc00000
 800dda4:	41dfffff 	.word	0x41dfffff
 800dda8:	94a03595 	.word	0x94a03595
 800ddac:	3fcfffff 	.word	0x3fcfffff

0800ddb0 <strtod>:
 800ddb0:	460a      	mov	r2, r1
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	4802      	ldr	r0, [pc, #8]	@ (800ddc0 <strtod+0x10>)
 800ddb6:	4b03      	ldr	r3, [pc, #12]	@ (800ddc4 <strtod+0x14>)
 800ddb8:	6800      	ldr	r0, [r0, #0]
 800ddba:	f7ff ba15 	b.w	800d1e8 <_strtod_l>
 800ddbe:	bf00      	nop
 800ddc0:	200001a4 	.word	0x200001a4
 800ddc4:	20000038 	.word	0x20000038

0800ddc8 <_strtol_l.isra.0>:
 800ddc8:	2b24      	cmp	r3, #36	@ 0x24
 800ddca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddce:	4686      	mov	lr, r0
 800ddd0:	4690      	mov	r8, r2
 800ddd2:	d801      	bhi.n	800ddd8 <_strtol_l.isra.0+0x10>
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d106      	bne.n	800dde6 <_strtol_l.isra.0+0x1e>
 800ddd8:	f001 ff54 	bl	800fc84 <__errno>
 800dddc:	2316      	movs	r3, #22
 800ddde:	6003      	str	r3, [r0, #0]
 800dde0:	2000      	movs	r0, #0
 800dde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde6:	4834      	ldr	r0, [pc, #208]	@ (800deb8 <_strtol_l.isra.0+0xf0>)
 800dde8:	460d      	mov	r5, r1
 800ddea:	462a      	mov	r2, r5
 800ddec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddf0:	5d06      	ldrb	r6, [r0, r4]
 800ddf2:	f016 0608 	ands.w	r6, r6, #8
 800ddf6:	d1f8      	bne.n	800ddea <_strtol_l.isra.0+0x22>
 800ddf8:	2c2d      	cmp	r4, #45	@ 0x2d
 800ddfa:	d110      	bne.n	800de1e <_strtol_l.isra.0+0x56>
 800ddfc:	782c      	ldrb	r4, [r5, #0]
 800ddfe:	2601      	movs	r6, #1
 800de00:	1c95      	adds	r5, r2, #2
 800de02:	f033 0210 	bics.w	r2, r3, #16
 800de06:	d115      	bne.n	800de34 <_strtol_l.isra.0+0x6c>
 800de08:	2c30      	cmp	r4, #48	@ 0x30
 800de0a:	d10d      	bne.n	800de28 <_strtol_l.isra.0+0x60>
 800de0c:	782a      	ldrb	r2, [r5, #0]
 800de0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de12:	2a58      	cmp	r2, #88	@ 0x58
 800de14:	d108      	bne.n	800de28 <_strtol_l.isra.0+0x60>
 800de16:	786c      	ldrb	r4, [r5, #1]
 800de18:	3502      	adds	r5, #2
 800de1a:	2310      	movs	r3, #16
 800de1c:	e00a      	b.n	800de34 <_strtol_l.isra.0+0x6c>
 800de1e:	2c2b      	cmp	r4, #43	@ 0x2b
 800de20:	bf04      	itt	eq
 800de22:	782c      	ldrbeq	r4, [r5, #0]
 800de24:	1c95      	addeq	r5, r2, #2
 800de26:	e7ec      	b.n	800de02 <_strtol_l.isra.0+0x3a>
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1f6      	bne.n	800de1a <_strtol_l.isra.0+0x52>
 800de2c:	2c30      	cmp	r4, #48	@ 0x30
 800de2e:	bf14      	ite	ne
 800de30:	230a      	movne	r3, #10
 800de32:	2308      	moveq	r3, #8
 800de34:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800de38:	f10c 3cff 	add.w	ip, ip, #4294967295
 800de3c:	2200      	movs	r2, #0
 800de3e:	fbbc f9f3 	udiv	r9, ip, r3
 800de42:	4610      	mov	r0, r2
 800de44:	fb03 ca19 	mls	sl, r3, r9, ip
 800de48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800de4c:	2f09      	cmp	r7, #9
 800de4e:	d80f      	bhi.n	800de70 <_strtol_l.isra.0+0xa8>
 800de50:	463c      	mov	r4, r7
 800de52:	42a3      	cmp	r3, r4
 800de54:	dd1b      	ble.n	800de8e <_strtol_l.isra.0+0xc6>
 800de56:	1c57      	adds	r7, r2, #1
 800de58:	d007      	beq.n	800de6a <_strtol_l.isra.0+0xa2>
 800de5a:	4581      	cmp	r9, r0
 800de5c:	d314      	bcc.n	800de88 <_strtol_l.isra.0+0xc0>
 800de5e:	d101      	bne.n	800de64 <_strtol_l.isra.0+0x9c>
 800de60:	45a2      	cmp	sl, r4
 800de62:	db11      	blt.n	800de88 <_strtol_l.isra.0+0xc0>
 800de64:	fb00 4003 	mla	r0, r0, r3, r4
 800de68:	2201      	movs	r2, #1
 800de6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de6e:	e7eb      	b.n	800de48 <_strtol_l.isra.0+0x80>
 800de70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800de74:	2f19      	cmp	r7, #25
 800de76:	d801      	bhi.n	800de7c <_strtol_l.isra.0+0xb4>
 800de78:	3c37      	subs	r4, #55	@ 0x37
 800de7a:	e7ea      	b.n	800de52 <_strtol_l.isra.0+0x8a>
 800de7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800de80:	2f19      	cmp	r7, #25
 800de82:	d804      	bhi.n	800de8e <_strtol_l.isra.0+0xc6>
 800de84:	3c57      	subs	r4, #87	@ 0x57
 800de86:	e7e4      	b.n	800de52 <_strtol_l.isra.0+0x8a>
 800de88:	f04f 32ff 	mov.w	r2, #4294967295
 800de8c:	e7ed      	b.n	800de6a <_strtol_l.isra.0+0xa2>
 800de8e:	1c53      	adds	r3, r2, #1
 800de90:	d108      	bne.n	800dea4 <_strtol_l.isra.0+0xdc>
 800de92:	2322      	movs	r3, #34	@ 0x22
 800de94:	f8ce 3000 	str.w	r3, [lr]
 800de98:	4660      	mov	r0, ip
 800de9a:	f1b8 0f00 	cmp.w	r8, #0
 800de9e:	d0a0      	beq.n	800dde2 <_strtol_l.isra.0+0x1a>
 800dea0:	1e69      	subs	r1, r5, #1
 800dea2:	e006      	b.n	800deb2 <_strtol_l.isra.0+0xea>
 800dea4:	b106      	cbz	r6, 800dea8 <_strtol_l.isra.0+0xe0>
 800dea6:	4240      	negs	r0, r0
 800dea8:	f1b8 0f00 	cmp.w	r8, #0
 800deac:	d099      	beq.n	800dde2 <_strtol_l.isra.0+0x1a>
 800deae:	2a00      	cmp	r2, #0
 800deb0:	d1f6      	bne.n	800dea0 <_strtol_l.isra.0+0xd8>
 800deb2:	f8c8 1000 	str.w	r1, [r8]
 800deb6:	e794      	b.n	800dde2 <_strtol_l.isra.0+0x1a>
 800deb8:	08014109 	.word	0x08014109

0800debc <_strtol_r>:
 800debc:	f7ff bf84 	b.w	800ddc8 <_strtol_l.isra.0>

0800dec0 <strtol>:
 800dec0:	4613      	mov	r3, r2
 800dec2:	460a      	mov	r2, r1
 800dec4:	4601      	mov	r1, r0
 800dec6:	4802      	ldr	r0, [pc, #8]	@ (800ded0 <strtol+0x10>)
 800dec8:	6800      	ldr	r0, [r0, #0]
 800deca:	f7ff bf7d 	b.w	800ddc8 <_strtol_l.isra.0>
 800dece:	bf00      	nop
 800ded0:	200001a4 	.word	0x200001a4

0800ded4 <__cvt>:
 800ded4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ded8:	ec57 6b10 	vmov	r6, r7, d0
 800dedc:	2f00      	cmp	r7, #0
 800dede:	460c      	mov	r4, r1
 800dee0:	4619      	mov	r1, r3
 800dee2:	463b      	mov	r3, r7
 800dee4:	bfbb      	ittet	lt
 800dee6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800deea:	461f      	movlt	r7, r3
 800deec:	2300      	movge	r3, #0
 800deee:	232d      	movlt	r3, #45	@ 0x2d
 800def0:	700b      	strb	r3, [r1, #0]
 800def2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800def4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800def8:	4691      	mov	r9, r2
 800defa:	f023 0820 	bic.w	r8, r3, #32
 800defe:	bfbc      	itt	lt
 800df00:	4632      	movlt	r2, r6
 800df02:	4616      	movlt	r6, r2
 800df04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df08:	d005      	beq.n	800df16 <__cvt+0x42>
 800df0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800df0e:	d100      	bne.n	800df12 <__cvt+0x3e>
 800df10:	3401      	adds	r4, #1
 800df12:	2102      	movs	r1, #2
 800df14:	e000      	b.n	800df18 <__cvt+0x44>
 800df16:	2103      	movs	r1, #3
 800df18:	ab03      	add	r3, sp, #12
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	ab02      	add	r3, sp, #8
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	ec47 6b10 	vmov	d0, r6, r7
 800df24:	4653      	mov	r3, sl
 800df26:	4622      	mov	r2, r4
 800df28:	f001 ffaa 	bl	800fe80 <_dtoa_r>
 800df2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800df30:	4605      	mov	r5, r0
 800df32:	d119      	bne.n	800df68 <__cvt+0x94>
 800df34:	f019 0f01 	tst.w	r9, #1
 800df38:	d00e      	beq.n	800df58 <__cvt+0x84>
 800df3a:	eb00 0904 	add.w	r9, r0, r4
 800df3e:	2200      	movs	r2, #0
 800df40:	2300      	movs	r3, #0
 800df42:	4630      	mov	r0, r6
 800df44:	4639      	mov	r1, r7
 800df46:	f7f2 fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 800df4a:	b108      	cbz	r0, 800df50 <__cvt+0x7c>
 800df4c:	f8cd 900c 	str.w	r9, [sp, #12]
 800df50:	2230      	movs	r2, #48	@ 0x30
 800df52:	9b03      	ldr	r3, [sp, #12]
 800df54:	454b      	cmp	r3, r9
 800df56:	d31e      	bcc.n	800df96 <__cvt+0xc2>
 800df58:	9b03      	ldr	r3, [sp, #12]
 800df5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df5c:	1b5b      	subs	r3, r3, r5
 800df5e:	4628      	mov	r0, r5
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	b004      	add	sp, #16
 800df64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df6c:	eb00 0904 	add.w	r9, r0, r4
 800df70:	d1e5      	bne.n	800df3e <__cvt+0x6a>
 800df72:	7803      	ldrb	r3, [r0, #0]
 800df74:	2b30      	cmp	r3, #48	@ 0x30
 800df76:	d10a      	bne.n	800df8e <__cvt+0xba>
 800df78:	2200      	movs	r2, #0
 800df7a:	2300      	movs	r3, #0
 800df7c:	4630      	mov	r0, r6
 800df7e:	4639      	mov	r1, r7
 800df80:	f7f2 fdba 	bl	8000af8 <__aeabi_dcmpeq>
 800df84:	b918      	cbnz	r0, 800df8e <__cvt+0xba>
 800df86:	f1c4 0401 	rsb	r4, r4, #1
 800df8a:	f8ca 4000 	str.w	r4, [sl]
 800df8e:	f8da 3000 	ldr.w	r3, [sl]
 800df92:	4499      	add	r9, r3
 800df94:	e7d3      	b.n	800df3e <__cvt+0x6a>
 800df96:	1c59      	adds	r1, r3, #1
 800df98:	9103      	str	r1, [sp, #12]
 800df9a:	701a      	strb	r2, [r3, #0]
 800df9c:	e7d9      	b.n	800df52 <__cvt+0x7e>

0800df9e <__exponent>:
 800df9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfa0:	2900      	cmp	r1, #0
 800dfa2:	bfba      	itte	lt
 800dfa4:	4249      	neglt	r1, r1
 800dfa6:	232d      	movlt	r3, #45	@ 0x2d
 800dfa8:	232b      	movge	r3, #43	@ 0x2b
 800dfaa:	2909      	cmp	r1, #9
 800dfac:	7002      	strb	r2, [r0, #0]
 800dfae:	7043      	strb	r3, [r0, #1]
 800dfb0:	dd29      	ble.n	800e006 <__exponent+0x68>
 800dfb2:	f10d 0307 	add.w	r3, sp, #7
 800dfb6:	461d      	mov	r5, r3
 800dfb8:	270a      	movs	r7, #10
 800dfba:	461a      	mov	r2, r3
 800dfbc:	fbb1 f6f7 	udiv	r6, r1, r7
 800dfc0:	fb07 1416 	mls	r4, r7, r6, r1
 800dfc4:	3430      	adds	r4, #48	@ 0x30
 800dfc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dfca:	460c      	mov	r4, r1
 800dfcc:	2c63      	cmp	r4, #99	@ 0x63
 800dfce:	f103 33ff 	add.w	r3, r3, #4294967295
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	dcf1      	bgt.n	800dfba <__exponent+0x1c>
 800dfd6:	3130      	adds	r1, #48	@ 0x30
 800dfd8:	1e94      	subs	r4, r2, #2
 800dfda:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dfde:	1c41      	adds	r1, r0, #1
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	42ab      	cmp	r3, r5
 800dfe4:	d30a      	bcc.n	800dffc <__exponent+0x5e>
 800dfe6:	f10d 0309 	add.w	r3, sp, #9
 800dfea:	1a9b      	subs	r3, r3, r2
 800dfec:	42ac      	cmp	r4, r5
 800dfee:	bf88      	it	hi
 800dff0:	2300      	movhi	r3, #0
 800dff2:	3302      	adds	r3, #2
 800dff4:	4403      	add	r3, r0
 800dff6:	1a18      	subs	r0, r3, r0
 800dff8:	b003      	add	sp, #12
 800dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dffc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e000:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e004:	e7ed      	b.n	800dfe2 <__exponent+0x44>
 800e006:	2330      	movs	r3, #48	@ 0x30
 800e008:	3130      	adds	r1, #48	@ 0x30
 800e00a:	7083      	strb	r3, [r0, #2]
 800e00c:	70c1      	strb	r1, [r0, #3]
 800e00e:	1d03      	adds	r3, r0, #4
 800e010:	e7f1      	b.n	800dff6 <__exponent+0x58>
	...

0800e014 <_printf_float>:
 800e014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e018:	b08d      	sub	sp, #52	@ 0x34
 800e01a:	460c      	mov	r4, r1
 800e01c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e020:	4616      	mov	r6, r2
 800e022:	461f      	mov	r7, r3
 800e024:	4605      	mov	r5, r0
 800e026:	f001 fdd1 	bl	800fbcc <_localeconv_r>
 800e02a:	6803      	ldr	r3, [r0, #0]
 800e02c:	9304      	str	r3, [sp, #16]
 800e02e:	4618      	mov	r0, r3
 800e030:	f7f2 f936 	bl	80002a0 <strlen>
 800e034:	2300      	movs	r3, #0
 800e036:	930a      	str	r3, [sp, #40]	@ 0x28
 800e038:	f8d8 3000 	ldr.w	r3, [r8]
 800e03c:	9005      	str	r0, [sp, #20]
 800e03e:	3307      	adds	r3, #7
 800e040:	f023 0307 	bic.w	r3, r3, #7
 800e044:	f103 0208 	add.w	r2, r3, #8
 800e048:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e04c:	f8d4 b000 	ldr.w	fp, [r4]
 800e050:	f8c8 2000 	str.w	r2, [r8]
 800e054:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e058:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e05c:	9307      	str	r3, [sp, #28]
 800e05e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e062:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e06a:	4b9c      	ldr	r3, [pc, #624]	@ (800e2dc <_printf_float+0x2c8>)
 800e06c:	f04f 32ff 	mov.w	r2, #4294967295
 800e070:	f7f2 fd74 	bl	8000b5c <__aeabi_dcmpun>
 800e074:	bb70      	cbnz	r0, 800e0d4 <_printf_float+0xc0>
 800e076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e07a:	4b98      	ldr	r3, [pc, #608]	@ (800e2dc <_printf_float+0x2c8>)
 800e07c:	f04f 32ff 	mov.w	r2, #4294967295
 800e080:	f7f2 fd4e 	bl	8000b20 <__aeabi_dcmple>
 800e084:	bb30      	cbnz	r0, 800e0d4 <_printf_float+0xc0>
 800e086:	2200      	movs	r2, #0
 800e088:	2300      	movs	r3, #0
 800e08a:	4640      	mov	r0, r8
 800e08c:	4649      	mov	r1, r9
 800e08e:	f7f2 fd3d 	bl	8000b0c <__aeabi_dcmplt>
 800e092:	b110      	cbz	r0, 800e09a <_printf_float+0x86>
 800e094:	232d      	movs	r3, #45	@ 0x2d
 800e096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e09a:	4a91      	ldr	r2, [pc, #580]	@ (800e2e0 <_printf_float+0x2cc>)
 800e09c:	4b91      	ldr	r3, [pc, #580]	@ (800e2e4 <_printf_float+0x2d0>)
 800e09e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e0a2:	bf8c      	ite	hi
 800e0a4:	4690      	movhi	r8, r2
 800e0a6:	4698      	movls	r8, r3
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	6123      	str	r3, [r4, #16]
 800e0ac:	f02b 0304 	bic.w	r3, fp, #4
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	f04f 0900 	mov.w	r9, #0
 800e0b6:	9700      	str	r7, [sp, #0]
 800e0b8:	4633      	mov	r3, r6
 800e0ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f000 f9d2 	bl	800e468 <_printf_common>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	f040 808d 	bne.w	800e1e4 <_printf_float+0x1d0>
 800e0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ce:	b00d      	add	sp, #52	@ 0x34
 800e0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d4:	4642      	mov	r2, r8
 800e0d6:	464b      	mov	r3, r9
 800e0d8:	4640      	mov	r0, r8
 800e0da:	4649      	mov	r1, r9
 800e0dc:	f7f2 fd3e 	bl	8000b5c <__aeabi_dcmpun>
 800e0e0:	b140      	cbz	r0, 800e0f4 <_printf_float+0xe0>
 800e0e2:	464b      	mov	r3, r9
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	bfbc      	itt	lt
 800e0e8:	232d      	movlt	r3, #45	@ 0x2d
 800e0ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e0ee:	4a7e      	ldr	r2, [pc, #504]	@ (800e2e8 <_printf_float+0x2d4>)
 800e0f0:	4b7e      	ldr	r3, [pc, #504]	@ (800e2ec <_printf_float+0x2d8>)
 800e0f2:	e7d4      	b.n	800e09e <_printf_float+0x8a>
 800e0f4:	6863      	ldr	r3, [r4, #4]
 800e0f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e0fa:	9206      	str	r2, [sp, #24]
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	d13b      	bne.n	800e178 <_printf_float+0x164>
 800e100:	2306      	movs	r3, #6
 800e102:	6063      	str	r3, [r4, #4]
 800e104:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e108:	2300      	movs	r3, #0
 800e10a:	6022      	str	r2, [r4, #0]
 800e10c:	9303      	str	r3, [sp, #12]
 800e10e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e110:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e114:	ab09      	add	r3, sp, #36	@ 0x24
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	6861      	ldr	r1, [r4, #4]
 800e11a:	ec49 8b10 	vmov	d0, r8, r9
 800e11e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e122:	4628      	mov	r0, r5
 800e124:	f7ff fed6 	bl	800ded4 <__cvt>
 800e128:	9b06      	ldr	r3, [sp, #24]
 800e12a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e12c:	2b47      	cmp	r3, #71	@ 0x47
 800e12e:	4680      	mov	r8, r0
 800e130:	d129      	bne.n	800e186 <_printf_float+0x172>
 800e132:	1cc8      	adds	r0, r1, #3
 800e134:	db02      	blt.n	800e13c <_printf_float+0x128>
 800e136:	6863      	ldr	r3, [r4, #4]
 800e138:	4299      	cmp	r1, r3
 800e13a:	dd41      	ble.n	800e1c0 <_printf_float+0x1ac>
 800e13c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e140:	fa5f fa8a 	uxtb.w	sl, sl
 800e144:	3901      	subs	r1, #1
 800e146:	4652      	mov	r2, sl
 800e148:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e14c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e14e:	f7ff ff26 	bl	800df9e <__exponent>
 800e152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e154:	1813      	adds	r3, r2, r0
 800e156:	2a01      	cmp	r2, #1
 800e158:	4681      	mov	r9, r0
 800e15a:	6123      	str	r3, [r4, #16]
 800e15c:	dc02      	bgt.n	800e164 <_printf_float+0x150>
 800e15e:	6822      	ldr	r2, [r4, #0]
 800e160:	07d2      	lsls	r2, r2, #31
 800e162:	d501      	bpl.n	800e168 <_printf_float+0x154>
 800e164:	3301      	adds	r3, #1
 800e166:	6123      	str	r3, [r4, #16]
 800e168:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d0a2      	beq.n	800e0b6 <_printf_float+0xa2>
 800e170:	232d      	movs	r3, #45	@ 0x2d
 800e172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e176:	e79e      	b.n	800e0b6 <_printf_float+0xa2>
 800e178:	9a06      	ldr	r2, [sp, #24]
 800e17a:	2a47      	cmp	r2, #71	@ 0x47
 800e17c:	d1c2      	bne.n	800e104 <_printf_float+0xf0>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1c0      	bne.n	800e104 <_printf_float+0xf0>
 800e182:	2301      	movs	r3, #1
 800e184:	e7bd      	b.n	800e102 <_printf_float+0xee>
 800e186:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e18a:	d9db      	bls.n	800e144 <_printf_float+0x130>
 800e18c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e190:	d118      	bne.n	800e1c4 <_printf_float+0x1b0>
 800e192:	2900      	cmp	r1, #0
 800e194:	6863      	ldr	r3, [r4, #4]
 800e196:	dd0b      	ble.n	800e1b0 <_printf_float+0x19c>
 800e198:	6121      	str	r1, [r4, #16]
 800e19a:	b913      	cbnz	r3, 800e1a2 <_printf_float+0x18e>
 800e19c:	6822      	ldr	r2, [r4, #0]
 800e19e:	07d0      	lsls	r0, r2, #31
 800e1a0:	d502      	bpl.n	800e1a8 <_printf_float+0x194>
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	440b      	add	r3, r1
 800e1a6:	6123      	str	r3, [r4, #16]
 800e1a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e1aa:	f04f 0900 	mov.w	r9, #0
 800e1ae:	e7db      	b.n	800e168 <_printf_float+0x154>
 800e1b0:	b913      	cbnz	r3, 800e1b8 <_printf_float+0x1a4>
 800e1b2:	6822      	ldr	r2, [r4, #0]
 800e1b4:	07d2      	lsls	r2, r2, #31
 800e1b6:	d501      	bpl.n	800e1bc <_printf_float+0x1a8>
 800e1b8:	3302      	adds	r3, #2
 800e1ba:	e7f4      	b.n	800e1a6 <_printf_float+0x192>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e7f2      	b.n	800e1a6 <_printf_float+0x192>
 800e1c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1c6:	4299      	cmp	r1, r3
 800e1c8:	db05      	blt.n	800e1d6 <_printf_float+0x1c2>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	6121      	str	r1, [r4, #16]
 800e1ce:	07d8      	lsls	r0, r3, #31
 800e1d0:	d5ea      	bpl.n	800e1a8 <_printf_float+0x194>
 800e1d2:	1c4b      	adds	r3, r1, #1
 800e1d4:	e7e7      	b.n	800e1a6 <_printf_float+0x192>
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	bfd4      	ite	le
 800e1da:	f1c1 0202 	rsble	r2, r1, #2
 800e1de:	2201      	movgt	r2, #1
 800e1e0:	4413      	add	r3, r2
 800e1e2:	e7e0      	b.n	800e1a6 <_printf_float+0x192>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	055a      	lsls	r2, r3, #21
 800e1e8:	d407      	bmi.n	800e1fa <_printf_float+0x1e6>
 800e1ea:	6923      	ldr	r3, [r4, #16]
 800e1ec:	4642      	mov	r2, r8
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	47b8      	blx	r7
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	d12b      	bne.n	800e250 <_printf_float+0x23c>
 800e1f8:	e767      	b.n	800e0ca <_printf_float+0xb6>
 800e1fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1fe:	f240 80dd 	bls.w	800e3bc <_printf_float+0x3a8>
 800e202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e206:	2200      	movs	r2, #0
 800e208:	2300      	movs	r3, #0
 800e20a:	f7f2 fc75 	bl	8000af8 <__aeabi_dcmpeq>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d033      	beq.n	800e27a <_printf_float+0x266>
 800e212:	4a37      	ldr	r2, [pc, #220]	@ (800e2f0 <_printf_float+0x2dc>)
 800e214:	2301      	movs	r3, #1
 800e216:	4631      	mov	r1, r6
 800e218:	4628      	mov	r0, r5
 800e21a:	47b8      	blx	r7
 800e21c:	3001      	adds	r0, #1
 800e21e:	f43f af54 	beq.w	800e0ca <_printf_float+0xb6>
 800e222:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e226:	4543      	cmp	r3, r8
 800e228:	db02      	blt.n	800e230 <_printf_float+0x21c>
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	07d8      	lsls	r0, r3, #31
 800e22e:	d50f      	bpl.n	800e250 <_printf_float+0x23c>
 800e230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e234:	4631      	mov	r1, r6
 800e236:	4628      	mov	r0, r5
 800e238:	47b8      	blx	r7
 800e23a:	3001      	adds	r0, #1
 800e23c:	f43f af45 	beq.w	800e0ca <_printf_float+0xb6>
 800e240:	f04f 0900 	mov.w	r9, #0
 800e244:	f108 38ff 	add.w	r8, r8, #4294967295
 800e248:	f104 0a1a 	add.w	sl, r4, #26
 800e24c:	45c8      	cmp	r8, r9
 800e24e:	dc09      	bgt.n	800e264 <_printf_float+0x250>
 800e250:	6823      	ldr	r3, [r4, #0]
 800e252:	079b      	lsls	r3, r3, #30
 800e254:	f100 8103 	bmi.w	800e45e <_printf_float+0x44a>
 800e258:	68e0      	ldr	r0, [r4, #12]
 800e25a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e25c:	4298      	cmp	r0, r3
 800e25e:	bfb8      	it	lt
 800e260:	4618      	movlt	r0, r3
 800e262:	e734      	b.n	800e0ce <_printf_float+0xba>
 800e264:	2301      	movs	r3, #1
 800e266:	4652      	mov	r2, sl
 800e268:	4631      	mov	r1, r6
 800e26a:	4628      	mov	r0, r5
 800e26c:	47b8      	blx	r7
 800e26e:	3001      	adds	r0, #1
 800e270:	f43f af2b 	beq.w	800e0ca <_printf_float+0xb6>
 800e274:	f109 0901 	add.w	r9, r9, #1
 800e278:	e7e8      	b.n	800e24c <_printf_float+0x238>
 800e27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	dc39      	bgt.n	800e2f4 <_printf_float+0x2e0>
 800e280:	4a1b      	ldr	r2, [pc, #108]	@ (800e2f0 <_printf_float+0x2dc>)
 800e282:	2301      	movs	r3, #1
 800e284:	4631      	mov	r1, r6
 800e286:	4628      	mov	r0, r5
 800e288:	47b8      	blx	r7
 800e28a:	3001      	adds	r0, #1
 800e28c:	f43f af1d 	beq.w	800e0ca <_printf_float+0xb6>
 800e290:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e294:	ea59 0303 	orrs.w	r3, r9, r3
 800e298:	d102      	bne.n	800e2a0 <_printf_float+0x28c>
 800e29a:	6823      	ldr	r3, [r4, #0]
 800e29c:	07d9      	lsls	r1, r3, #31
 800e29e:	d5d7      	bpl.n	800e250 <_printf_float+0x23c>
 800e2a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2a4:	4631      	mov	r1, r6
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	47b8      	blx	r7
 800e2aa:	3001      	adds	r0, #1
 800e2ac:	f43f af0d 	beq.w	800e0ca <_printf_float+0xb6>
 800e2b0:	f04f 0a00 	mov.w	sl, #0
 800e2b4:	f104 0b1a 	add.w	fp, r4, #26
 800e2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ba:	425b      	negs	r3, r3
 800e2bc:	4553      	cmp	r3, sl
 800e2be:	dc01      	bgt.n	800e2c4 <_printf_float+0x2b0>
 800e2c0:	464b      	mov	r3, r9
 800e2c2:	e793      	b.n	800e1ec <_printf_float+0x1d8>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	465a      	mov	r2, fp
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	47b8      	blx	r7
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	f43f aefb 	beq.w	800e0ca <_printf_float+0xb6>
 800e2d4:	f10a 0a01 	add.w	sl, sl, #1
 800e2d8:	e7ee      	b.n	800e2b8 <_printf_float+0x2a4>
 800e2da:	bf00      	nop
 800e2dc:	7fefffff 	.word	0x7fefffff
 800e2e0:	08013d5a 	.word	0x08013d5a
 800e2e4:	08013d56 	.word	0x08013d56
 800e2e8:	08013d62 	.word	0x08013d62
 800e2ec:	08013d5e 	.word	0x08013d5e
 800e2f0:	0801403a 	.word	0x0801403a
 800e2f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e2f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e2fa:	4553      	cmp	r3, sl
 800e2fc:	bfa8      	it	ge
 800e2fe:	4653      	movge	r3, sl
 800e300:	2b00      	cmp	r3, #0
 800e302:	4699      	mov	r9, r3
 800e304:	dc36      	bgt.n	800e374 <_printf_float+0x360>
 800e306:	f04f 0b00 	mov.w	fp, #0
 800e30a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e30e:	f104 021a 	add.w	r2, r4, #26
 800e312:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e314:	9306      	str	r3, [sp, #24]
 800e316:	eba3 0309 	sub.w	r3, r3, r9
 800e31a:	455b      	cmp	r3, fp
 800e31c:	dc31      	bgt.n	800e382 <_printf_float+0x36e>
 800e31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e320:	459a      	cmp	sl, r3
 800e322:	dc3a      	bgt.n	800e39a <_printf_float+0x386>
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	07da      	lsls	r2, r3, #31
 800e328:	d437      	bmi.n	800e39a <_printf_float+0x386>
 800e32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e32c:	ebaa 0903 	sub.w	r9, sl, r3
 800e330:	9b06      	ldr	r3, [sp, #24]
 800e332:	ebaa 0303 	sub.w	r3, sl, r3
 800e336:	4599      	cmp	r9, r3
 800e338:	bfa8      	it	ge
 800e33a:	4699      	movge	r9, r3
 800e33c:	f1b9 0f00 	cmp.w	r9, #0
 800e340:	dc33      	bgt.n	800e3aa <_printf_float+0x396>
 800e342:	f04f 0800 	mov.w	r8, #0
 800e346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e34a:	f104 0b1a 	add.w	fp, r4, #26
 800e34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e350:	ebaa 0303 	sub.w	r3, sl, r3
 800e354:	eba3 0309 	sub.w	r3, r3, r9
 800e358:	4543      	cmp	r3, r8
 800e35a:	f77f af79 	ble.w	800e250 <_printf_float+0x23c>
 800e35e:	2301      	movs	r3, #1
 800e360:	465a      	mov	r2, fp
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	47b8      	blx	r7
 800e368:	3001      	adds	r0, #1
 800e36a:	f43f aeae 	beq.w	800e0ca <_printf_float+0xb6>
 800e36e:	f108 0801 	add.w	r8, r8, #1
 800e372:	e7ec      	b.n	800e34e <_printf_float+0x33a>
 800e374:	4642      	mov	r2, r8
 800e376:	4631      	mov	r1, r6
 800e378:	4628      	mov	r0, r5
 800e37a:	47b8      	blx	r7
 800e37c:	3001      	adds	r0, #1
 800e37e:	d1c2      	bne.n	800e306 <_printf_float+0x2f2>
 800e380:	e6a3      	b.n	800e0ca <_printf_float+0xb6>
 800e382:	2301      	movs	r3, #1
 800e384:	4631      	mov	r1, r6
 800e386:	4628      	mov	r0, r5
 800e388:	9206      	str	r2, [sp, #24]
 800e38a:	47b8      	blx	r7
 800e38c:	3001      	adds	r0, #1
 800e38e:	f43f ae9c 	beq.w	800e0ca <_printf_float+0xb6>
 800e392:	9a06      	ldr	r2, [sp, #24]
 800e394:	f10b 0b01 	add.w	fp, fp, #1
 800e398:	e7bb      	b.n	800e312 <_printf_float+0x2fe>
 800e39a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e39e:	4631      	mov	r1, r6
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b8      	blx	r7
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	d1c0      	bne.n	800e32a <_printf_float+0x316>
 800e3a8:	e68f      	b.n	800e0ca <_printf_float+0xb6>
 800e3aa:	9a06      	ldr	r2, [sp, #24]
 800e3ac:	464b      	mov	r3, r9
 800e3ae:	4442      	add	r2, r8
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	47b8      	blx	r7
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	d1c3      	bne.n	800e342 <_printf_float+0x32e>
 800e3ba:	e686      	b.n	800e0ca <_printf_float+0xb6>
 800e3bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e3c0:	f1ba 0f01 	cmp.w	sl, #1
 800e3c4:	dc01      	bgt.n	800e3ca <_printf_float+0x3b6>
 800e3c6:	07db      	lsls	r3, r3, #31
 800e3c8:	d536      	bpl.n	800e438 <_printf_float+0x424>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4642      	mov	r2, r8
 800e3ce:	4631      	mov	r1, r6
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	47b8      	blx	r7
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	f43f ae78 	beq.w	800e0ca <_printf_float+0xb6>
 800e3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3de:	4631      	mov	r1, r6
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	47b8      	blx	r7
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	f43f ae70 	beq.w	800e0ca <_printf_float+0xb6>
 800e3ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3f6:	f7f2 fb7f 	bl	8000af8 <__aeabi_dcmpeq>
 800e3fa:	b9c0      	cbnz	r0, 800e42e <_printf_float+0x41a>
 800e3fc:	4653      	mov	r3, sl
 800e3fe:	f108 0201 	add.w	r2, r8, #1
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	d10c      	bne.n	800e426 <_printf_float+0x412>
 800e40c:	e65d      	b.n	800e0ca <_printf_float+0xb6>
 800e40e:	2301      	movs	r3, #1
 800e410:	465a      	mov	r2, fp
 800e412:	4631      	mov	r1, r6
 800e414:	4628      	mov	r0, r5
 800e416:	47b8      	blx	r7
 800e418:	3001      	adds	r0, #1
 800e41a:	f43f ae56 	beq.w	800e0ca <_printf_float+0xb6>
 800e41e:	f108 0801 	add.w	r8, r8, #1
 800e422:	45d0      	cmp	r8, sl
 800e424:	dbf3      	blt.n	800e40e <_printf_float+0x3fa>
 800e426:	464b      	mov	r3, r9
 800e428:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e42c:	e6df      	b.n	800e1ee <_printf_float+0x1da>
 800e42e:	f04f 0800 	mov.w	r8, #0
 800e432:	f104 0b1a 	add.w	fp, r4, #26
 800e436:	e7f4      	b.n	800e422 <_printf_float+0x40e>
 800e438:	2301      	movs	r3, #1
 800e43a:	4642      	mov	r2, r8
 800e43c:	e7e1      	b.n	800e402 <_printf_float+0x3ee>
 800e43e:	2301      	movs	r3, #1
 800e440:	464a      	mov	r2, r9
 800e442:	4631      	mov	r1, r6
 800e444:	4628      	mov	r0, r5
 800e446:	47b8      	blx	r7
 800e448:	3001      	adds	r0, #1
 800e44a:	f43f ae3e 	beq.w	800e0ca <_printf_float+0xb6>
 800e44e:	f108 0801 	add.w	r8, r8, #1
 800e452:	68e3      	ldr	r3, [r4, #12]
 800e454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e456:	1a5b      	subs	r3, r3, r1
 800e458:	4543      	cmp	r3, r8
 800e45a:	dcf0      	bgt.n	800e43e <_printf_float+0x42a>
 800e45c:	e6fc      	b.n	800e258 <_printf_float+0x244>
 800e45e:	f04f 0800 	mov.w	r8, #0
 800e462:	f104 0919 	add.w	r9, r4, #25
 800e466:	e7f4      	b.n	800e452 <_printf_float+0x43e>

0800e468 <_printf_common>:
 800e468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e46c:	4616      	mov	r6, r2
 800e46e:	4698      	mov	r8, r3
 800e470:	688a      	ldr	r2, [r1, #8]
 800e472:	690b      	ldr	r3, [r1, #16]
 800e474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e478:	4293      	cmp	r3, r2
 800e47a:	bfb8      	it	lt
 800e47c:	4613      	movlt	r3, r2
 800e47e:	6033      	str	r3, [r6, #0]
 800e480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e484:	4607      	mov	r7, r0
 800e486:	460c      	mov	r4, r1
 800e488:	b10a      	cbz	r2, 800e48e <_printf_common+0x26>
 800e48a:	3301      	adds	r3, #1
 800e48c:	6033      	str	r3, [r6, #0]
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	0699      	lsls	r1, r3, #26
 800e492:	bf42      	ittt	mi
 800e494:	6833      	ldrmi	r3, [r6, #0]
 800e496:	3302      	addmi	r3, #2
 800e498:	6033      	strmi	r3, [r6, #0]
 800e49a:	6825      	ldr	r5, [r4, #0]
 800e49c:	f015 0506 	ands.w	r5, r5, #6
 800e4a0:	d106      	bne.n	800e4b0 <_printf_common+0x48>
 800e4a2:	f104 0a19 	add.w	sl, r4, #25
 800e4a6:	68e3      	ldr	r3, [r4, #12]
 800e4a8:	6832      	ldr	r2, [r6, #0]
 800e4aa:	1a9b      	subs	r3, r3, r2
 800e4ac:	42ab      	cmp	r3, r5
 800e4ae:	dc26      	bgt.n	800e4fe <_printf_common+0x96>
 800e4b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e4b4:	6822      	ldr	r2, [r4, #0]
 800e4b6:	3b00      	subs	r3, #0
 800e4b8:	bf18      	it	ne
 800e4ba:	2301      	movne	r3, #1
 800e4bc:	0692      	lsls	r2, r2, #26
 800e4be:	d42b      	bmi.n	800e518 <_printf_common+0xb0>
 800e4c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e4c4:	4641      	mov	r1, r8
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	47c8      	blx	r9
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	d01e      	beq.n	800e50c <_printf_common+0xa4>
 800e4ce:	6823      	ldr	r3, [r4, #0]
 800e4d0:	6922      	ldr	r2, [r4, #16]
 800e4d2:	f003 0306 	and.w	r3, r3, #6
 800e4d6:	2b04      	cmp	r3, #4
 800e4d8:	bf02      	ittt	eq
 800e4da:	68e5      	ldreq	r5, [r4, #12]
 800e4dc:	6833      	ldreq	r3, [r6, #0]
 800e4de:	1aed      	subeq	r5, r5, r3
 800e4e0:	68a3      	ldr	r3, [r4, #8]
 800e4e2:	bf0c      	ite	eq
 800e4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4e8:	2500      	movne	r5, #0
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	bfc4      	itt	gt
 800e4ee:	1a9b      	subgt	r3, r3, r2
 800e4f0:	18ed      	addgt	r5, r5, r3
 800e4f2:	2600      	movs	r6, #0
 800e4f4:	341a      	adds	r4, #26
 800e4f6:	42b5      	cmp	r5, r6
 800e4f8:	d11a      	bne.n	800e530 <_printf_common+0xc8>
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	e008      	b.n	800e510 <_printf_common+0xa8>
 800e4fe:	2301      	movs	r3, #1
 800e500:	4652      	mov	r2, sl
 800e502:	4641      	mov	r1, r8
 800e504:	4638      	mov	r0, r7
 800e506:	47c8      	blx	r9
 800e508:	3001      	adds	r0, #1
 800e50a:	d103      	bne.n	800e514 <_printf_common+0xac>
 800e50c:	f04f 30ff 	mov.w	r0, #4294967295
 800e510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e514:	3501      	adds	r5, #1
 800e516:	e7c6      	b.n	800e4a6 <_printf_common+0x3e>
 800e518:	18e1      	adds	r1, r4, r3
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	2030      	movs	r0, #48	@ 0x30
 800e51e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e522:	4422      	add	r2, r4
 800e524:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e52c:	3302      	adds	r3, #2
 800e52e:	e7c7      	b.n	800e4c0 <_printf_common+0x58>
 800e530:	2301      	movs	r3, #1
 800e532:	4622      	mov	r2, r4
 800e534:	4641      	mov	r1, r8
 800e536:	4638      	mov	r0, r7
 800e538:	47c8      	blx	r9
 800e53a:	3001      	adds	r0, #1
 800e53c:	d0e6      	beq.n	800e50c <_printf_common+0xa4>
 800e53e:	3601      	adds	r6, #1
 800e540:	e7d9      	b.n	800e4f6 <_printf_common+0x8e>
	...

0800e544 <_printf_i>:
 800e544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e548:	7e0f      	ldrb	r7, [r1, #24]
 800e54a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e54c:	2f78      	cmp	r7, #120	@ 0x78
 800e54e:	4691      	mov	r9, r2
 800e550:	4680      	mov	r8, r0
 800e552:	460c      	mov	r4, r1
 800e554:	469a      	mov	sl, r3
 800e556:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e55a:	d807      	bhi.n	800e56c <_printf_i+0x28>
 800e55c:	2f62      	cmp	r7, #98	@ 0x62
 800e55e:	d80a      	bhi.n	800e576 <_printf_i+0x32>
 800e560:	2f00      	cmp	r7, #0
 800e562:	f000 80d1 	beq.w	800e708 <_printf_i+0x1c4>
 800e566:	2f58      	cmp	r7, #88	@ 0x58
 800e568:	f000 80b8 	beq.w	800e6dc <_printf_i+0x198>
 800e56c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e570:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e574:	e03a      	b.n	800e5ec <_printf_i+0xa8>
 800e576:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e57a:	2b15      	cmp	r3, #21
 800e57c:	d8f6      	bhi.n	800e56c <_printf_i+0x28>
 800e57e:	a101      	add	r1, pc, #4	@ (adr r1, 800e584 <_printf_i+0x40>)
 800e580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e584:	0800e5dd 	.word	0x0800e5dd
 800e588:	0800e5f1 	.word	0x0800e5f1
 800e58c:	0800e56d 	.word	0x0800e56d
 800e590:	0800e56d 	.word	0x0800e56d
 800e594:	0800e56d 	.word	0x0800e56d
 800e598:	0800e56d 	.word	0x0800e56d
 800e59c:	0800e5f1 	.word	0x0800e5f1
 800e5a0:	0800e56d 	.word	0x0800e56d
 800e5a4:	0800e56d 	.word	0x0800e56d
 800e5a8:	0800e56d 	.word	0x0800e56d
 800e5ac:	0800e56d 	.word	0x0800e56d
 800e5b0:	0800e6ef 	.word	0x0800e6ef
 800e5b4:	0800e61b 	.word	0x0800e61b
 800e5b8:	0800e6a9 	.word	0x0800e6a9
 800e5bc:	0800e56d 	.word	0x0800e56d
 800e5c0:	0800e56d 	.word	0x0800e56d
 800e5c4:	0800e711 	.word	0x0800e711
 800e5c8:	0800e56d 	.word	0x0800e56d
 800e5cc:	0800e61b 	.word	0x0800e61b
 800e5d0:	0800e56d 	.word	0x0800e56d
 800e5d4:	0800e56d 	.word	0x0800e56d
 800e5d8:	0800e6b1 	.word	0x0800e6b1
 800e5dc:	6833      	ldr	r3, [r6, #0]
 800e5de:	1d1a      	adds	r2, r3, #4
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6032      	str	r2, [r6, #0]
 800e5e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e09c      	b.n	800e72a <_printf_i+0x1e6>
 800e5f0:	6833      	ldr	r3, [r6, #0]
 800e5f2:	6820      	ldr	r0, [r4, #0]
 800e5f4:	1d19      	adds	r1, r3, #4
 800e5f6:	6031      	str	r1, [r6, #0]
 800e5f8:	0606      	lsls	r6, r0, #24
 800e5fa:	d501      	bpl.n	800e600 <_printf_i+0xbc>
 800e5fc:	681d      	ldr	r5, [r3, #0]
 800e5fe:	e003      	b.n	800e608 <_printf_i+0xc4>
 800e600:	0645      	lsls	r5, r0, #25
 800e602:	d5fb      	bpl.n	800e5fc <_printf_i+0xb8>
 800e604:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e608:	2d00      	cmp	r5, #0
 800e60a:	da03      	bge.n	800e614 <_printf_i+0xd0>
 800e60c:	232d      	movs	r3, #45	@ 0x2d
 800e60e:	426d      	negs	r5, r5
 800e610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e614:	4858      	ldr	r0, [pc, #352]	@ (800e778 <_printf_i+0x234>)
 800e616:	230a      	movs	r3, #10
 800e618:	e011      	b.n	800e63e <_printf_i+0xfa>
 800e61a:	6821      	ldr	r1, [r4, #0]
 800e61c:	6833      	ldr	r3, [r6, #0]
 800e61e:	0608      	lsls	r0, r1, #24
 800e620:	f853 5b04 	ldr.w	r5, [r3], #4
 800e624:	d402      	bmi.n	800e62c <_printf_i+0xe8>
 800e626:	0649      	lsls	r1, r1, #25
 800e628:	bf48      	it	mi
 800e62a:	b2ad      	uxthmi	r5, r5
 800e62c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e62e:	4852      	ldr	r0, [pc, #328]	@ (800e778 <_printf_i+0x234>)
 800e630:	6033      	str	r3, [r6, #0]
 800e632:	bf14      	ite	ne
 800e634:	230a      	movne	r3, #10
 800e636:	2308      	moveq	r3, #8
 800e638:	2100      	movs	r1, #0
 800e63a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e63e:	6866      	ldr	r6, [r4, #4]
 800e640:	60a6      	str	r6, [r4, #8]
 800e642:	2e00      	cmp	r6, #0
 800e644:	db05      	blt.n	800e652 <_printf_i+0x10e>
 800e646:	6821      	ldr	r1, [r4, #0]
 800e648:	432e      	orrs	r6, r5
 800e64a:	f021 0104 	bic.w	r1, r1, #4
 800e64e:	6021      	str	r1, [r4, #0]
 800e650:	d04b      	beq.n	800e6ea <_printf_i+0x1a6>
 800e652:	4616      	mov	r6, r2
 800e654:	fbb5 f1f3 	udiv	r1, r5, r3
 800e658:	fb03 5711 	mls	r7, r3, r1, r5
 800e65c:	5dc7      	ldrb	r7, [r0, r7]
 800e65e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e662:	462f      	mov	r7, r5
 800e664:	42bb      	cmp	r3, r7
 800e666:	460d      	mov	r5, r1
 800e668:	d9f4      	bls.n	800e654 <_printf_i+0x110>
 800e66a:	2b08      	cmp	r3, #8
 800e66c:	d10b      	bne.n	800e686 <_printf_i+0x142>
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	07df      	lsls	r7, r3, #31
 800e672:	d508      	bpl.n	800e686 <_printf_i+0x142>
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	6861      	ldr	r1, [r4, #4]
 800e678:	4299      	cmp	r1, r3
 800e67a:	bfde      	ittt	le
 800e67c:	2330      	movle	r3, #48	@ 0x30
 800e67e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e682:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e686:	1b92      	subs	r2, r2, r6
 800e688:	6122      	str	r2, [r4, #16]
 800e68a:	f8cd a000 	str.w	sl, [sp]
 800e68e:	464b      	mov	r3, r9
 800e690:	aa03      	add	r2, sp, #12
 800e692:	4621      	mov	r1, r4
 800e694:	4640      	mov	r0, r8
 800e696:	f7ff fee7 	bl	800e468 <_printf_common>
 800e69a:	3001      	adds	r0, #1
 800e69c:	d14a      	bne.n	800e734 <_printf_i+0x1f0>
 800e69e:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a2:	b004      	add	sp, #16
 800e6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	f043 0320 	orr.w	r3, r3, #32
 800e6ae:	6023      	str	r3, [r4, #0]
 800e6b0:	4832      	ldr	r0, [pc, #200]	@ (800e77c <_printf_i+0x238>)
 800e6b2:	2778      	movs	r7, #120	@ 0x78
 800e6b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	6831      	ldr	r1, [r6, #0]
 800e6bc:	061f      	lsls	r7, r3, #24
 800e6be:	f851 5b04 	ldr.w	r5, [r1], #4
 800e6c2:	d402      	bmi.n	800e6ca <_printf_i+0x186>
 800e6c4:	065f      	lsls	r7, r3, #25
 800e6c6:	bf48      	it	mi
 800e6c8:	b2ad      	uxthmi	r5, r5
 800e6ca:	6031      	str	r1, [r6, #0]
 800e6cc:	07d9      	lsls	r1, r3, #31
 800e6ce:	bf44      	itt	mi
 800e6d0:	f043 0320 	orrmi.w	r3, r3, #32
 800e6d4:	6023      	strmi	r3, [r4, #0]
 800e6d6:	b11d      	cbz	r5, 800e6e0 <_printf_i+0x19c>
 800e6d8:	2310      	movs	r3, #16
 800e6da:	e7ad      	b.n	800e638 <_printf_i+0xf4>
 800e6dc:	4826      	ldr	r0, [pc, #152]	@ (800e778 <_printf_i+0x234>)
 800e6de:	e7e9      	b.n	800e6b4 <_printf_i+0x170>
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	f023 0320 	bic.w	r3, r3, #32
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	e7f6      	b.n	800e6d8 <_printf_i+0x194>
 800e6ea:	4616      	mov	r6, r2
 800e6ec:	e7bd      	b.n	800e66a <_printf_i+0x126>
 800e6ee:	6833      	ldr	r3, [r6, #0]
 800e6f0:	6825      	ldr	r5, [r4, #0]
 800e6f2:	6961      	ldr	r1, [r4, #20]
 800e6f4:	1d18      	adds	r0, r3, #4
 800e6f6:	6030      	str	r0, [r6, #0]
 800e6f8:	062e      	lsls	r6, r5, #24
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	d501      	bpl.n	800e702 <_printf_i+0x1be>
 800e6fe:	6019      	str	r1, [r3, #0]
 800e700:	e002      	b.n	800e708 <_printf_i+0x1c4>
 800e702:	0668      	lsls	r0, r5, #25
 800e704:	d5fb      	bpl.n	800e6fe <_printf_i+0x1ba>
 800e706:	8019      	strh	r1, [r3, #0]
 800e708:	2300      	movs	r3, #0
 800e70a:	6123      	str	r3, [r4, #16]
 800e70c:	4616      	mov	r6, r2
 800e70e:	e7bc      	b.n	800e68a <_printf_i+0x146>
 800e710:	6833      	ldr	r3, [r6, #0]
 800e712:	1d1a      	adds	r2, r3, #4
 800e714:	6032      	str	r2, [r6, #0]
 800e716:	681e      	ldr	r6, [r3, #0]
 800e718:	6862      	ldr	r2, [r4, #4]
 800e71a:	2100      	movs	r1, #0
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7f1 fd6f 	bl	8000200 <memchr>
 800e722:	b108      	cbz	r0, 800e728 <_printf_i+0x1e4>
 800e724:	1b80      	subs	r0, r0, r6
 800e726:	6060      	str	r0, [r4, #4]
 800e728:	6863      	ldr	r3, [r4, #4]
 800e72a:	6123      	str	r3, [r4, #16]
 800e72c:	2300      	movs	r3, #0
 800e72e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e732:	e7aa      	b.n	800e68a <_printf_i+0x146>
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	4632      	mov	r2, r6
 800e738:	4649      	mov	r1, r9
 800e73a:	4640      	mov	r0, r8
 800e73c:	47d0      	blx	sl
 800e73e:	3001      	adds	r0, #1
 800e740:	d0ad      	beq.n	800e69e <_printf_i+0x15a>
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	079b      	lsls	r3, r3, #30
 800e746:	d413      	bmi.n	800e770 <_printf_i+0x22c>
 800e748:	68e0      	ldr	r0, [r4, #12]
 800e74a:	9b03      	ldr	r3, [sp, #12]
 800e74c:	4298      	cmp	r0, r3
 800e74e:	bfb8      	it	lt
 800e750:	4618      	movlt	r0, r3
 800e752:	e7a6      	b.n	800e6a2 <_printf_i+0x15e>
 800e754:	2301      	movs	r3, #1
 800e756:	4632      	mov	r2, r6
 800e758:	4649      	mov	r1, r9
 800e75a:	4640      	mov	r0, r8
 800e75c:	47d0      	blx	sl
 800e75e:	3001      	adds	r0, #1
 800e760:	d09d      	beq.n	800e69e <_printf_i+0x15a>
 800e762:	3501      	adds	r5, #1
 800e764:	68e3      	ldr	r3, [r4, #12]
 800e766:	9903      	ldr	r1, [sp, #12]
 800e768:	1a5b      	subs	r3, r3, r1
 800e76a:	42ab      	cmp	r3, r5
 800e76c:	dcf2      	bgt.n	800e754 <_printf_i+0x210>
 800e76e:	e7eb      	b.n	800e748 <_printf_i+0x204>
 800e770:	2500      	movs	r5, #0
 800e772:	f104 0619 	add.w	r6, r4, #25
 800e776:	e7f5      	b.n	800e764 <_printf_i+0x220>
 800e778:	08013d66 	.word	0x08013d66
 800e77c:	08013d77 	.word	0x08013d77

0800e780 <std>:
 800e780:	2300      	movs	r3, #0
 800e782:	b510      	push	{r4, lr}
 800e784:	4604      	mov	r4, r0
 800e786:	e9c0 3300 	strd	r3, r3, [r0]
 800e78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e78e:	6083      	str	r3, [r0, #8]
 800e790:	8181      	strh	r1, [r0, #12]
 800e792:	6643      	str	r3, [r0, #100]	@ 0x64
 800e794:	81c2      	strh	r2, [r0, #14]
 800e796:	6183      	str	r3, [r0, #24]
 800e798:	4619      	mov	r1, r3
 800e79a:	2208      	movs	r2, #8
 800e79c:	305c      	adds	r0, #92	@ 0x5c
 800e79e:	f000 fab1 	bl	800ed04 <memset>
 800e7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e7d8 <std+0x58>)
 800e7a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e7dc <std+0x5c>)
 800e7a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e0 <std+0x60>)
 800e7ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e4 <std+0x64>)
 800e7b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e8 <std+0x68>)
 800e7b4:	6224      	str	r4, [r4, #32]
 800e7b6:	429c      	cmp	r4, r3
 800e7b8:	d006      	beq.n	800e7c8 <std+0x48>
 800e7ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e7be:	4294      	cmp	r4, r2
 800e7c0:	d002      	beq.n	800e7c8 <std+0x48>
 800e7c2:	33d0      	adds	r3, #208	@ 0xd0
 800e7c4:	429c      	cmp	r4, r3
 800e7c6:	d105      	bne.n	800e7d4 <std+0x54>
 800e7c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7d0:	f001 ba82 	b.w	800fcd8 <__retarget_lock_init_recursive>
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	bf00      	nop
 800e7d8:	0800eafd 	.word	0x0800eafd
 800e7dc:	0800eb23 	.word	0x0800eb23
 800e7e0:	0800eb5b 	.word	0x0800eb5b
 800e7e4:	0800eb7f 	.word	0x0800eb7f
 800e7e8:	20006e18 	.word	0x20006e18

0800e7ec <stdio_exit_handler>:
 800e7ec:	4a02      	ldr	r2, [pc, #8]	@ (800e7f8 <stdio_exit_handler+0xc>)
 800e7ee:	4903      	ldr	r1, [pc, #12]	@ (800e7fc <stdio_exit_handler+0x10>)
 800e7f0:	4803      	ldr	r0, [pc, #12]	@ (800e800 <stdio_exit_handler+0x14>)
 800e7f2:	f000 b869 	b.w	800e8c8 <_fwalk_sglue>
 800e7f6:	bf00      	nop
 800e7f8:	20000024 	.word	0x20000024
 800e7fc:	08012a29 	.word	0x08012a29
 800e800:	200001a8 	.word	0x200001a8

0800e804 <cleanup_stdio>:
 800e804:	6841      	ldr	r1, [r0, #4]
 800e806:	4b0c      	ldr	r3, [pc, #48]	@ (800e838 <cleanup_stdio+0x34>)
 800e808:	4299      	cmp	r1, r3
 800e80a:	b510      	push	{r4, lr}
 800e80c:	4604      	mov	r4, r0
 800e80e:	d001      	beq.n	800e814 <cleanup_stdio+0x10>
 800e810:	f004 f90a 	bl	8012a28 <_fflush_r>
 800e814:	68a1      	ldr	r1, [r4, #8]
 800e816:	4b09      	ldr	r3, [pc, #36]	@ (800e83c <cleanup_stdio+0x38>)
 800e818:	4299      	cmp	r1, r3
 800e81a:	d002      	beq.n	800e822 <cleanup_stdio+0x1e>
 800e81c:	4620      	mov	r0, r4
 800e81e:	f004 f903 	bl	8012a28 <_fflush_r>
 800e822:	68e1      	ldr	r1, [r4, #12]
 800e824:	4b06      	ldr	r3, [pc, #24]	@ (800e840 <cleanup_stdio+0x3c>)
 800e826:	4299      	cmp	r1, r3
 800e828:	d004      	beq.n	800e834 <cleanup_stdio+0x30>
 800e82a:	4620      	mov	r0, r4
 800e82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e830:	f004 b8fa 	b.w	8012a28 <_fflush_r>
 800e834:	bd10      	pop	{r4, pc}
 800e836:	bf00      	nop
 800e838:	20006e18 	.word	0x20006e18
 800e83c:	20006e80 	.word	0x20006e80
 800e840:	20006ee8 	.word	0x20006ee8

0800e844 <global_stdio_init.part.0>:
 800e844:	b510      	push	{r4, lr}
 800e846:	4b0b      	ldr	r3, [pc, #44]	@ (800e874 <global_stdio_init.part.0+0x30>)
 800e848:	4c0b      	ldr	r4, [pc, #44]	@ (800e878 <global_stdio_init.part.0+0x34>)
 800e84a:	4a0c      	ldr	r2, [pc, #48]	@ (800e87c <global_stdio_init.part.0+0x38>)
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	4620      	mov	r0, r4
 800e850:	2200      	movs	r2, #0
 800e852:	2104      	movs	r1, #4
 800e854:	f7ff ff94 	bl	800e780 <std>
 800e858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e85c:	2201      	movs	r2, #1
 800e85e:	2109      	movs	r1, #9
 800e860:	f7ff ff8e 	bl	800e780 <std>
 800e864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e868:	2202      	movs	r2, #2
 800e86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e86e:	2112      	movs	r1, #18
 800e870:	f7ff bf86 	b.w	800e780 <std>
 800e874:	20006f50 	.word	0x20006f50
 800e878:	20006e18 	.word	0x20006e18
 800e87c:	0800e7ed 	.word	0x0800e7ed

0800e880 <__sfp_lock_acquire>:
 800e880:	4801      	ldr	r0, [pc, #4]	@ (800e888 <__sfp_lock_acquire+0x8>)
 800e882:	f001 ba2b 	b.w	800fcdc <__retarget_lock_acquire_recursive>
 800e886:	bf00      	nop
 800e888:	20006f7f 	.word	0x20006f7f

0800e88c <__sfp_lock_release>:
 800e88c:	4801      	ldr	r0, [pc, #4]	@ (800e894 <__sfp_lock_release+0x8>)
 800e88e:	f001 ba27 	b.w	800fce0 <__retarget_lock_release_recursive>
 800e892:	bf00      	nop
 800e894:	20006f7f 	.word	0x20006f7f

0800e898 <__sinit>:
 800e898:	b510      	push	{r4, lr}
 800e89a:	4604      	mov	r4, r0
 800e89c:	f7ff fff0 	bl	800e880 <__sfp_lock_acquire>
 800e8a0:	6a23      	ldr	r3, [r4, #32]
 800e8a2:	b11b      	cbz	r3, 800e8ac <__sinit+0x14>
 800e8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a8:	f7ff bff0 	b.w	800e88c <__sfp_lock_release>
 800e8ac:	4b04      	ldr	r3, [pc, #16]	@ (800e8c0 <__sinit+0x28>)
 800e8ae:	6223      	str	r3, [r4, #32]
 800e8b0:	4b04      	ldr	r3, [pc, #16]	@ (800e8c4 <__sinit+0x2c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f5      	bne.n	800e8a4 <__sinit+0xc>
 800e8b8:	f7ff ffc4 	bl	800e844 <global_stdio_init.part.0>
 800e8bc:	e7f2      	b.n	800e8a4 <__sinit+0xc>
 800e8be:	bf00      	nop
 800e8c0:	0800e805 	.word	0x0800e805
 800e8c4:	20006f50 	.word	0x20006f50

0800e8c8 <_fwalk_sglue>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	4688      	mov	r8, r1
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	2600      	movs	r6, #0
 800e8d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8d8:	f1b9 0901 	subs.w	r9, r9, #1
 800e8dc:	d505      	bpl.n	800e8ea <_fwalk_sglue+0x22>
 800e8de:	6824      	ldr	r4, [r4, #0]
 800e8e0:	2c00      	cmp	r4, #0
 800e8e2:	d1f7      	bne.n	800e8d4 <_fwalk_sglue+0xc>
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d907      	bls.n	800e900 <_fwalk_sglue+0x38>
 800e8f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	d003      	beq.n	800e900 <_fwalk_sglue+0x38>
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	47c0      	blx	r8
 800e8fe:	4306      	orrs	r6, r0
 800e900:	3568      	adds	r5, #104	@ 0x68
 800e902:	e7e9      	b.n	800e8d8 <_fwalk_sglue+0x10>

0800e904 <iprintf>:
 800e904:	b40f      	push	{r0, r1, r2, r3}
 800e906:	b507      	push	{r0, r1, r2, lr}
 800e908:	4906      	ldr	r1, [pc, #24]	@ (800e924 <iprintf+0x20>)
 800e90a:	ab04      	add	r3, sp, #16
 800e90c:	6808      	ldr	r0, [r1, #0]
 800e90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e912:	6881      	ldr	r1, [r0, #8]
 800e914:	9301      	str	r3, [sp, #4]
 800e916:	f003 fd9d 	bl	8012454 <_vfiprintf_r>
 800e91a:	b003      	add	sp, #12
 800e91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e920:	b004      	add	sp, #16
 800e922:	4770      	bx	lr
 800e924:	200001a4 	.word	0x200001a4

0800e928 <putchar>:
 800e928:	4b02      	ldr	r3, [pc, #8]	@ (800e934 <putchar+0xc>)
 800e92a:	4601      	mov	r1, r0
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	6882      	ldr	r2, [r0, #8]
 800e930:	f004 b916 	b.w	8012b60 <_putc_r>
 800e934:	200001a4 	.word	0x200001a4

0800e938 <_puts_r>:
 800e938:	6a03      	ldr	r3, [r0, #32]
 800e93a:	b570      	push	{r4, r5, r6, lr}
 800e93c:	6884      	ldr	r4, [r0, #8]
 800e93e:	4605      	mov	r5, r0
 800e940:	460e      	mov	r6, r1
 800e942:	b90b      	cbnz	r3, 800e948 <_puts_r+0x10>
 800e944:	f7ff ffa8 	bl	800e898 <__sinit>
 800e948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e94a:	07db      	lsls	r3, r3, #31
 800e94c:	d405      	bmi.n	800e95a <_puts_r+0x22>
 800e94e:	89a3      	ldrh	r3, [r4, #12]
 800e950:	0598      	lsls	r0, r3, #22
 800e952:	d402      	bmi.n	800e95a <_puts_r+0x22>
 800e954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e956:	f001 f9c1 	bl	800fcdc <__retarget_lock_acquire_recursive>
 800e95a:	89a3      	ldrh	r3, [r4, #12]
 800e95c:	0719      	lsls	r1, r3, #28
 800e95e:	d502      	bpl.n	800e966 <_puts_r+0x2e>
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d135      	bne.n	800e9d2 <_puts_r+0x9a>
 800e966:	4621      	mov	r1, r4
 800e968:	4628      	mov	r0, r5
 800e96a:	f000 f94b 	bl	800ec04 <__swsetup_r>
 800e96e:	b380      	cbz	r0, 800e9d2 <_puts_r+0x9a>
 800e970:	f04f 35ff 	mov.w	r5, #4294967295
 800e974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e976:	07da      	lsls	r2, r3, #31
 800e978:	d405      	bmi.n	800e986 <_puts_r+0x4e>
 800e97a:	89a3      	ldrh	r3, [r4, #12]
 800e97c:	059b      	lsls	r3, r3, #22
 800e97e:	d402      	bmi.n	800e986 <_puts_r+0x4e>
 800e980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e982:	f001 f9ad 	bl	800fce0 <__retarget_lock_release_recursive>
 800e986:	4628      	mov	r0, r5
 800e988:	bd70      	pop	{r4, r5, r6, pc}
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	da04      	bge.n	800e998 <_puts_r+0x60>
 800e98e:	69a2      	ldr	r2, [r4, #24]
 800e990:	429a      	cmp	r2, r3
 800e992:	dc17      	bgt.n	800e9c4 <_puts_r+0x8c>
 800e994:	290a      	cmp	r1, #10
 800e996:	d015      	beq.n	800e9c4 <_puts_r+0x8c>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	1c5a      	adds	r2, r3, #1
 800e99c:	6022      	str	r2, [r4, #0]
 800e99e:	7019      	strb	r1, [r3, #0]
 800e9a0:	68a3      	ldr	r3, [r4, #8]
 800e9a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	60a3      	str	r3, [r4, #8]
 800e9aa:	2900      	cmp	r1, #0
 800e9ac:	d1ed      	bne.n	800e98a <_puts_r+0x52>
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	da11      	bge.n	800e9d6 <_puts_r+0x9e>
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	210a      	movs	r1, #10
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f000 f8e5 	bl	800eb86 <__swbuf_r>
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d0d7      	beq.n	800e970 <_puts_r+0x38>
 800e9c0:	250a      	movs	r5, #10
 800e9c2:	e7d7      	b.n	800e974 <_puts_r+0x3c>
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f000 f8dd 	bl	800eb86 <__swbuf_r>
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	d1e7      	bne.n	800e9a0 <_puts_r+0x68>
 800e9d0:	e7ce      	b.n	800e970 <_puts_r+0x38>
 800e9d2:	3e01      	subs	r6, #1
 800e9d4:	e7e4      	b.n	800e9a0 <_puts_r+0x68>
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	1c5a      	adds	r2, r3, #1
 800e9da:	6022      	str	r2, [r4, #0]
 800e9dc:	220a      	movs	r2, #10
 800e9de:	701a      	strb	r2, [r3, #0]
 800e9e0:	e7ee      	b.n	800e9c0 <_puts_r+0x88>
	...

0800e9e4 <puts>:
 800e9e4:	4b02      	ldr	r3, [pc, #8]	@ (800e9f0 <puts+0xc>)
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	f7ff bfa5 	b.w	800e938 <_puts_r>
 800e9ee:	bf00      	nop
 800e9f0:	200001a4 	.word	0x200001a4

0800e9f4 <sniprintf>:
 800e9f4:	b40c      	push	{r2, r3}
 800e9f6:	b530      	push	{r4, r5, lr}
 800e9f8:	4b18      	ldr	r3, [pc, #96]	@ (800ea5c <sniprintf+0x68>)
 800e9fa:	1e0c      	subs	r4, r1, #0
 800e9fc:	681d      	ldr	r5, [r3, #0]
 800e9fe:	b09d      	sub	sp, #116	@ 0x74
 800ea00:	da08      	bge.n	800ea14 <sniprintf+0x20>
 800ea02:	238b      	movs	r3, #139	@ 0x8b
 800ea04:	602b      	str	r3, [r5, #0]
 800ea06:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0a:	b01d      	add	sp, #116	@ 0x74
 800ea0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea10:	b002      	add	sp, #8
 800ea12:	4770      	bx	lr
 800ea14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea1c:	f04f 0300 	mov.w	r3, #0
 800ea20:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ea22:	bf14      	ite	ne
 800ea24:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea28:	4623      	moveq	r3, r4
 800ea2a:	9304      	str	r3, [sp, #16]
 800ea2c:	9307      	str	r3, [sp, #28]
 800ea2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea32:	9002      	str	r0, [sp, #8]
 800ea34:	9006      	str	r0, [sp, #24]
 800ea36:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea3c:	ab21      	add	r3, sp, #132	@ 0x84
 800ea3e:	a902      	add	r1, sp, #8
 800ea40:	4628      	mov	r0, r5
 800ea42:	9301      	str	r3, [sp, #4]
 800ea44:	f003 fa10 	bl	8011e68 <_svfiprintf_r>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	bfbc      	itt	lt
 800ea4c:	238b      	movlt	r3, #139	@ 0x8b
 800ea4e:	602b      	strlt	r3, [r5, #0]
 800ea50:	2c00      	cmp	r4, #0
 800ea52:	d0da      	beq.n	800ea0a <sniprintf+0x16>
 800ea54:	9b02      	ldr	r3, [sp, #8]
 800ea56:	2200      	movs	r2, #0
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	e7d6      	b.n	800ea0a <sniprintf+0x16>
 800ea5c:	200001a4 	.word	0x200001a4

0800ea60 <siprintf>:
 800ea60:	b40e      	push	{r1, r2, r3}
 800ea62:	b510      	push	{r4, lr}
 800ea64:	b09d      	sub	sp, #116	@ 0x74
 800ea66:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ea68:	9002      	str	r0, [sp, #8]
 800ea6a:	9006      	str	r0, [sp, #24]
 800ea6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ea70:	480a      	ldr	r0, [pc, #40]	@ (800ea9c <siprintf+0x3c>)
 800ea72:	9107      	str	r1, [sp, #28]
 800ea74:	9104      	str	r1, [sp, #16]
 800ea76:	490a      	ldr	r1, [pc, #40]	@ (800eaa0 <siprintf+0x40>)
 800ea78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea7c:	9105      	str	r1, [sp, #20]
 800ea7e:	2400      	movs	r4, #0
 800ea80:	a902      	add	r1, sp, #8
 800ea82:	6800      	ldr	r0, [r0, #0]
 800ea84:	9301      	str	r3, [sp, #4]
 800ea86:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ea88:	f003 f9ee 	bl	8011e68 <_svfiprintf_r>
 800ea8c:	9b02      	ldr	r3, [sp, #8]
 800ea8e:	701c      	strb	r4, [r3, #0]
 800ea90:	b01d      	add	sp, #116	@ 0x74
 800ea92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea96:	b003      	add	sp, #12
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	200001a4 	.word	0x200001a4
 800eaa0:	ffff0208 	.word	0xffff0208

0800eaa4 <siscanf>:
 800eaa4:	b40e      	push	{r1, r2, r3}
 800eaa6:	b570      	push	{r4, r5, r6, lr}
 800eaa8:	b09d      	sub	sp, #116	@ 0x74
 800eaaa:	ac21      	add	r4, sp, #132	@ 0x84
 800eaac:	2500      	movs	r5, #0
 800eaae:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800eab2:	f854 6b04 	ldr.w	r6, [r4], #4
 800eab6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800eaba:	951b      	str	r5, [sp, #108]	@ 0x6c
 800eabc:	9002      	str	r0, [sp, #8]
 800eabe:	9006      	str	r0, [sp, #24]
 800eac0:	f7f1 fbee 	bl	80002a0 <strlen>
 800eac4:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf4 <siscanf+0x50>)
 800eac6:	9003      	str	r0, [sp, #12]
 800eac8:	9007      	str	r0, [sp, #28]
 800eaca:	480b      	ldr	r0, [pc, #44]	@ (800eaf8 <siscanf+0x54>)
 800eacc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ead2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ead6:	4632      	mov	r2, r6
 800ead8:	4623      	mov	r3, r4
 800eada:	a902      	add	r1, sp, #8
 800eadc:	6800      	ldr	r0, [r0, #0]
 800eade:	950f      	str	r5, [sp, #60]	@ 0x3c
 800eae0:	9514      	str	r5, [sp, #80]	@ 0x50
 800eae2:	9401      	str	r4, [sp, #4]
 800eae4:	f003 fb16 	bl	8012114 <__ssvfiscanf_r>
 800eae8:	b01d      	add	sp, #116	@ 0x74
 800eaea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eaee:	b003      	add	sp, #12
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	0800eb1f 	.word	0x0800eb1f
 800eaf8:	200001a4 	.word	0x200001a4

0800eafc <__sread>:
 800eafc:	b510      	push	{r4, lr}
 800eafe:	460c      	mov	r4, r1
 800eb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb04:	f001 f89a 	bl	800fc3c <_read_r>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	bfab      	itete	ge
 800eb0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800eb10:	181b      	addge	r3, r3, r0
 800eb12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb16:	bfac      	ite	ge
 800eb18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb1a:	81a3      	strhlt	r3, [r4, #12]
 800eb1c:	bd10      	pop	{r4, pc}

0800eb1e <__seofread>:
 800eb1e:	2000      	movs	r0, #0
 800eb20:	4770      	bx	lr

0800eb22 <__swrite>:
 800eb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb26:	461f      	mov	r7, r3
 800eb28:	898b      	ldrh	r3, [r1, #12]
 800eb2a:	05db      	lsls	r3, r3, #23
 800eb2c:	4605      	mov	r5, r0
 800eb2e:	460c      	mov	r4, r1
 800eb30:	4616      	mov	r6, r2
 800eb32:	d505      	bpl.n	800eb40 <__swrite+0x1e>
 800eb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb38:	2302      	movs	r3, #2
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f001 f86c 	bl	800fc18 <_lseek_r>
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb4a:	81a3      	strh	r3, [r4, #12]
 800eb4c:	4632      	mov	r2, r6
 800eb4e:	463b      	mov	r3, r7
 800eb50:	4628      	mov	r0, r5
 800eb52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb56:	f001 b883 	b.w	800fc60 <_write_r>

0800eb5a <__sseek>:
 800eb5a:	b510      	push	{r4, lr}
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb62:	f001 f859 	bl	800fc18 <_lseek_r>
 800eb66:	1c43      	adds	r3, r0, #1
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	bf15      	itete	ne
 800eb6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb76:	81a3      	strheq	r3, [r4, #12]
 800eb78:	bf18      	it	ne
 800eb7a:	81a3      	strhne	r3, [r4, #12]
 800eb7c:	bd10      	pop	{r4, pc}

0800eb7e <__sclose>:
 800eb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb82:	f001 b827 	b.w	800fbd4 <_close_r>

0800eb86 <__swbuf_r>:
 800eb86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb88:	460e      	mov	r6, r1
 800eb8a:	4614      	mov	r4, r2
 800eb8c:	4605      	mov	r5, r0
 800eb8e:	b118      	cbz	r0, 800eb98 <__swbuf_r+0x12>
 800eb90:	6a03      	ldr	r3, [r0, #32]
 800eb92:	b90b      	cbnz	r3, 800eb98 <__swbuf_r+0x12>
 800eb94:	f7ff fe80 	bl	800e898 <__sinit>
 800eb98:	69a3      	ldr	r3, [r4, #24]
 800eb9a:	60a3      	str	r3, [r4, #8]
 800eb9c:	89a3      	ldrh	r3, [r4, #12]
 800eb9e:	071a      	lsls	r2, r3, #28
 800eba0:	d501      	bpl.n	800eba6 <__swbuf_r+0x20>
 800eba2:	6923      	ldr	r3, [r4, #16]
 800eba4:	b943      	cbnz	r3, 800ebb8 <__swbuf_r+0x32>
 800eba6:	4621      	mov	r1, r4
 800eba8:	4628      	mov	r0, r5
 800ebaa:	f000 f82b 	bl	800ec04 <__swsetup_r>
 800ebae:	b118      	cbz	r0, 800ebb8 <__swbuf_r+0x32>
 800ebb0:	f04f 37ff 	mov.w	r7, #4294967295
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	6922      	ldr	r2, [r4, #16]
 800ebbc:	1a98      	subs	r0, r3, r2
 800ebbe:	6963      	ldr	r3, [r4, #20]
 800ebc0:	b2f6      	uxtb	r6, r6
 800ebc2:	4283      	cmp	r3, r0
 800ebc4:	4637      	mov	r7, r6
 800ebc6:	dc05      	bgt.n	800ebd4 <__swbuf_r+0x4e>
 800ebc8:	4621      	mov	r1, r4
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f003 ff2c 	bl	8012a28 <_fflush_r>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d1ed      	bne.n	800ebb0 <__swbuf_r+0x2a>
 800ebd4:	68a3      	ldr	r3, [r4, #8]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	60a3      	str	r3, [r4, #8]
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	6022      	str	r2, [r4, #0]
 800ebe0:	701e      	strb	r6, [r3, #0]
 800ebe2:	6962      	ldr	r2, [r4, #20]
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d004      	beq.n	800ebf4 <__swbuf_r+0x6e>
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	07db      	lsls	r3, r3, #31
 800ebee:	d5e1      	bpl.n	800ebb4 <__swbuf_r+0x2e>
 800ebf0:	2e0a      	cmp	r6, #10
 800ebf2:	d1df      	bne.n	800ebb4 <__swbuf_r+0x2e>
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f003 ff16 	bl	8012a28 <_fflush_r>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d0d9      	beq.n	800ebb4 <__swbuf_r+0x2e>
 800ec00:	e7d6      	b.n	800ebb0 <__swbuf_r+0x2a>
	...

0800ec04 <__swsetup_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	4b29      	ldr	r3, [pc, #164]	@ (800ecac <__swsetup_r+0xa8>)
 800ec08:	4605      	mov	r5, r0
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	b118      	cbz	r0, 800ec18 <__swsetup_r+0x14>
 800ec10:	6a03      	ldr	r3, [r0, #32]
 800ec12:	b90b      	cbnz	r3, 800ec18 <__swsetup_r+0x14>
 800ec14:	f7ff fe40 	bl	800e898 <__sinit>
 800ec18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec1c:	0719      	lsls	r1, r3, #28
 800ec1e:	d422      	bmi.n	800ec66 <__swsetup_r+0x62>
 800ec20:	06da      	lsls	r2, r3, #27
 800ec22:	d407      	bmi.n	800ec34 <__swsetup_r+0x30>
 800ec24:	2209      	movs	r2, #9
 800ec26:	602a      	str	r2, [r5, #0]
 800ec28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec2c:	81a3      	strh	r3, [r4, #12]
 800ec2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec32:	e033      	b.n	800ec9c <__swsetup_r+0x98>
 800ec34:	0758      	lsls	r0, r3, #29
 800ec36:	d512      	bpl.n	800ec5e <__swsetup_r+0x5a>
 800ec38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec3a:	b141      	cbz	r1, 800ec4e <__swsetup_r+0x4a>
 800ec3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec40:	4299      	cmp	r1, r3
 800ec42:	d002      	beq.n	800ec4a <__swsetup_r+0x46>
 800ec44:	4628      	mov	r0, r5
 800ec46:	f001 feeb 	bl	8010a20 <_free_r>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	2300      	movs	r3, #0
 800ec58:	6063      	str	r3, [r4, #4]
 800ec5a:	6923      	ldr	r3, [r4, #16]
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	f043 0308 	orr.w	r3, r3, #8
 800ec64:	81a3      	strh	r3, [r4, #12]
 800ec66:	6923      	ldr	r3, [r4, #16]
 800ec68:	b94b      	cbnz	r3, 800ec7e <__swsetup_r+0x7a>
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec74:	d003      	beq.n	800ec7e <__swsetup_r+0x7a>
 800ec76:	4621      	mov	r1, r4
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f003 ff35 	bl	8012ae8 <__smakebuf_r>
 800ec7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec82:	f013 0201 	ands.w	r2, r3, #1
 800ec86:	d00a      	beq.n	800ec9e <__swsetup_r+0x9a>
 800ec88:	2200      	movs	r2, #0
 800ec8a:	60a2      	str	r2, [r4, #8]
 800ec8c:	6962      	ldr	r2, [r4, #20]
 800ec8e:	4252      	negs	r2, r2
 800ec90:	61a2      	str	r2, [r4, #24]
 800ec92:	6922      	ldr	r2, [r4, #16]
 800ec94:	b942      	cbnz	r2, 800eca8 <__swsetup_r+0xa4>
 800ec96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec9a:	d1c5      	bne.n	800ec28 <__swsetup_r+0x24>
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
 800ec9e:	0799      	lsls	r1, r3, #30
 800eca0:	bf58      	it	pl
 800eca2:	6962      	ldrpl	r2, [r4, #20]
 800eca4:	60a2      	str	r2, [r4, #8]
 800eca6:	e7f4      	b.n	800ec92 <__swsetup_r+0x8e>
 800eca8:	2000      	movs	r0, #0
 800ecaa:	e7f7      	b.n	800ec9c <__swsetup_r+0x98>
 800ecac:	200001a4 	.word	0x200001a4

0800ecb0 <memcmp>:
 800ecb0:	b510      	push	{r4, lr}
 800ecb2:	3901      	subs	r1, #1
 800ecb4:	4402      	add	r2, r0
 800ecb6:	4290      	cmp	r0, r2
 800ecb8:	d101      	bne.n	800ecbe <memcmp+0xe>
 800ecba:	2000      	movs	r0, #0
 800ecbc:	e005      	b.n	800ecca <memcmp+0x1a>
 800ecbe:	7803      	ldrb	r3, [r0, #0]
 800ecc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ecc4:	42a3      	cmp	r3, r4
 800ecc6:	d001      	beq.n	800eccc <memcmp+0x1c>
 800ecc8:	1b18      	subs	r0, r3, r4
 800ecca:	bd10      	pop	{r4, pc}
 800eccc:	3001      	adds	r0, #1
 800ecce:	e7f2      	b.n	800ecb6 <memcmp+0x6>

0800ecd0 <memmove>:
 800ecd0:	4288      	cmp	r0, r1
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	eb01 0402 	add.w	r4, r1, r2
 800ecd8:	d902      	bls.n	800ece0 <memmove+0x10>
 800ecda:	4284      	cmp	r4, r0
 800ecdc:	4623      	mov	r3, r4
 800ecde:	d807      	bhi.n	800ecf0 <memmove+0x20>
 800ece0:	1e43      	subs	r3, r0, #1
 800ece2:	42a1      	cmp	r1, r4
 800ece4:	d008      	beq.n	800ecf8 <memmove+0x28>
 800ece6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ecea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ecee:	e7f8      	b.n	800ece2 <memmove+0x12>
 800ecf0:	4402      	add	r2, r0
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	428a      	cmp	r2, r1
 800ecf6:	d100      	bne.n	800ecfa <memmove+0x2a>
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed02:	e7f7      	b.n	800ecf4 <memmove+0x24>

0800ed04 <memset>:
 800ed04:	4402      	add	r2, r0
 800ed06:	4603      	mov	r3, r0
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d100      	bne.n	800ed0e <memset+0xa>
 800ed0c:	4770      	bx	lr
 800ed0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed12:	e7f9      	b.n	800ed08 <memset+0x4>

0800ed14 <strchr>:
 800ed14:	b2c9      	uxtb	r1, r1
 800ed16:	4603      	mov	r3, r0
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed1e:	b112      	cbz	r2, 800ed26 <strchr+0x12>
 800ed20:	428a      	cmp	r2, r1
 800ed22:	d1f9      	bne.n	800ed18 <strchr+0x4>
 800ed24:	4770      	bx	lr
 800ed26:	2900      	cmp	r1, #0
 800ed28:	bf18      	it	ne
 800ed2a:	2000      	movne	r0, #0
 800ed2c:	4770      	bx	lr

0800ed2e <strcspn>:
 800ed2e:	b570      	push	{r4, r5, r6, lr}
 800ed30:	4603      	mov	r3, r0
 800ed32:	461e      	mov	r6, r3
 800ed34:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ed38:	b144      	cbz	r4, 800ed4c <strcspn+0x1e>
 800ed3a:	1e4a      	subs	r2, r1, #1
 800ed3c:	e001      	b.n	800ed42 <strcspn+0x14>
 800ed3e:	42a5      	cmp	r5, r4
 800ed40:	d004      	beq.n	800ed4c <strcspn+0x1e>
 800ed42:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	d1f9      	bne.n	800ed3e <strcspn+0x10>
 800ed4a:	e7f2      	b.n	800ed32 <strcspn+0x4>
 800ed4c:	1a30      	subs	r0, r6, r0
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}

0800ed50 <strncmp>:
 800ed50:	b510      	push	{r4, lr}
 800ed52:	b16a      	cbz	r2, 800ed70 <strncmp+0x20>
 800ed54:	3901      	subs	r1, #1
 800ed56:	1884      	adds	r4, r0, r2
 800ed58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d103      	bne.n	800ed6c <strncmp+0x1c>
 800ed64:	42a0      	cmp	r0, r4
 800ed66:	d001      	beq.n	800ed6c <strncmp+0x1c>
 800ed68:	2a00      	cmp	r2, #0
 800ed6a:	d1f5      	bne.n	800ed58 <strncmp+0x8>
 800ed6c:	1ad0      	subs	r0, r2, r3
 800ed6e:	bd10      	pop	{r4, pc}
 800ed70:	4610      	mov	r0, r2
 800ed72:	e7fc      	b.n	800ed6e <strncmp+0x1e>

0800ed74 <strncpy>:
 800ed74:	b510      	push	{r4, lr}
 800ed76:	3901      	subs	r1, #1
 800ed78:	4603      	mov	r3, r0
 800ed7a:	b132      	cbz	r2, 800ed8a <strncpy+0x16>
 800ed7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ed80:	f803 4b01 	strb.w	r4, [r3], #1
 800ed84:	3a01      	subs	r2, #1
 800ed86:	2c00      	cmp	r4, #0
 800ed88:	d1f7      	bne.n	800ed7a <strncpy+0x6>
 800ed8a:	441a      	add	r2, r3
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d100      	bne.n	800ed94 <strncpy+0x20>
 800ed92:	bd10      	pop	{r4, pc}
 800ed94:	f803 1b01 	strb.w	r1, [r3], #1
 800ed98:	e7f9      	b.n	800ed8e <strncpy+0x1a>
	...

0800ed9c <strtok>:
 800ed9c:	4b16      	ldr	r3, [pc, #88]	@ (800edf8 <strtok+0x5c>)
 800ed9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda2:	681f      	ldr	r7, [r3, #0]
 800eda4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800eda6:	4605      	mov	r5, r0
 800eda8:	460e      	mov	r6, r1
 800edaa:	b9ec      	cbnz	r4, 800ede8 <strtok+0x4c>
 800edac:	2050      	movs	r0, #80	@ 0x50
 800edae:	f002 f9ff 	bl	80111b0 <malloc>
 800edb2:	4602      	mov	r2, r0
 800edb4:	6478      	str	r0, [r7, #68]	@ 0x44
 800edb6:	b920      	cbnz	r0, 800edc2 <strtok+0x26>
 800edb8:	4b10      	ldr	r3, [pc, #64]	@ (800edfc <strtok+0x60>)
 800edba:	4811      	ldr	r0, [pc, #68]	@ (800ee00 <strtok+0x64>)
 800edbc:	215b      	movs	r1, #91	@ 0x5b
 800edbe:	f000 ffaf 	bl	800fd20 <__assert_func>
 800edc2:	e9c0 4400 	strd	r4, r4, [r0]
 800edc6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800edca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800edce:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800edd2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800edd6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800edda:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800edde:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ede2:	6184      	str	r4, [r0, #24]
 800ede4:	7704      	strb	r4, [r0, #28]
 800ede6:	6244      	str	r4, [r0, #36]	@ 0x24
 800ede8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edea:	4631      	mov	r1, r6
 800edec:	4628      	mov	r0, r5
 800edee:	2301      	movs	r3, #1
 800edf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edf4:	f000 b806 	b.w	800ee04 <__strtok_r>
 800edf8:	200001a4 	.word	0x200001a4
 800edfc:	08013d88 	.word	0x08013d88
 800ee00:	08013d9f 	.word	0x08013d9f

0800ee04 <__strtok_r>:
 800ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee06:	4604      	mov	r4, r0
 800ee08:	b908      	cbnz	r0, 800ee0e <__strtok_r+0xa>
 800ee0a:	6814      	ldr	r4, [r2, #0]
 800ee0c:	b144      	cbz	r4, 800ee20 <__strtok_r+0x1c>
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ee14:	460f      	mov	r7, r1
 800ee16:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ee1a:	b91e      	cbnz	r6, 800ee24 <__strtok_r+0x20>
 800ee1c:	b965      	cbnz	r5, 800ee38 <__strtok_r+0x34>
 800ee1e:	6015      	str	r5, [r2, #0]
 800ee20:	2000      	movs	r0, #0
 800ee22:	e005      	b.n	800ee30 <__strtok_r+0x2c>
 800ee24:	42b5      	cmp	r5, r6
 800ee26:	d1f6      	bne.n	800ee16 <__strtok_r+0x12>
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1f0      	bne.n	800ee0e <__strtok_r+0xa>
 800ee2c:	6014      	str	r4, [r2, #0]
 800ee2e:	7003      	strb	r3, [r0, #0]
 800ee30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee32:	461c      	mov	r4, r3
 800ee34:	e00c      	b.n	800ee50 <__strtok_r+0x4c>
 800ee36:	b91d      	cbnz	r5, 800ee40 <__strtok_r+0x3c>
 800ee38:	4627      	mov	r7, r4
 800ee3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee3e:	460e      	mov	r6, r1
 800ee40:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ee44:	42ab      	cmp	r3, r5
 800ee46:	d1f6      	bne.n	800ee36 <__strtok_r+0x32>
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d0f2      	beq.n	800ee32 <__strtok_r+0x2e>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	703b      	strb	r3, [r7, #0]
 800ee50:	6014      	str	r4, [r2, #0]
 800ee52:	e7ed      	b.n	800ee30 <__strtok_r+0x2c>

0800ee54 <strstr>:
 800ee54:	780a      	ldrb	r2, [r1, #0]
 800ee56:	b570      	push	{r4, r5, r6, lr}
 800ee58:	b96a      	cbnz	r2, 800ee76 <strstr+0x22>
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d109      	bne.n	800ee74 <strstr+0x20>
 800ee60:	460c      	mov	r4, r1
 800ee62:	4605      	mov	r5, r0
 800ee64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d0f6      	beq.n	800ee5a <strstr+0x6>
 800ee6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ee70:	429e      	cmp	r6, r3
 800ee72:	d0f7      	beq.n	800ee64 <strstr+0x10>
 800ee74:	3001      	adds	r0, #1
 800ee76:	7803      	ldrb	r3, [r0, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1ef      	bne.n	800ee5c <strstr+0x8>
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	e7ec      	b.n	800ee5a <strstr+0x6>

0800ee80 <ctime>:
 800ee80:	b508      	push	{r3, lr}
 800ee82:	f000 f805 	bl	800ee90 <localtime>
 800ee86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ee8a:	f003 bf11 	b.w	8012cb0 <asctime>
	...

0800ee90 <localtime>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4b0b      	ldr	r3, [pc, #44]	@ (800eec0 <localtime+0x30>)
 800ee94:	681d      	ldr	r5, [r3, #0]
 800ee96:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ee98:	4604      	mov	r4, r0
 800ee9a:	b953      	cbnz	r3, 800eeb2 <localtime+0x22>
 800ee9c:	2024      	movs	r0, #36	@ 0x24
 800ee9e:	f002 f987 	bl	80111b0 <malloc>
 800eea2:	4602      	mov	r2, r0
 800eea4:	6368      	str	r0, [r5, #52]	@ 0x34
 800eea6:	b920      	cbnz	r0, 800eeb2 <localtime+0x22>
 800eea8:	4b06      	ldr	r3, [pc, #24]	@ (800eec4 <localtime+0x34>)
 800eeaa:	4807      	ldr	r0, [pc, #28]	@ (800eec8 <localtime+0x38>)
 800eeac:	2132      	movs	r1, #50	@ 0x32
 800eeae:	f000 ff37 	bl	800fd20 <__assert_func>
 800eeb2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeba:	f000 b807 	b.w	800eecc <localtime_r>
 800eebe:	bf00      	nop
 800eec0:	200001a4 	.word	0x200001a4
 800eec4:	08013d88 	.word	0x08013d88
 800eec8:	08013df9 	.word	0x08013df9

0800eecc <localtime_r>:
 800eecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed0:	460c      	mov	r4, r1
 800eed2:	4607      	mov	r7, r0
 800eed4:	f003 ff34 	bl	8012d40 <__gettzinfo>
 800eed8:	4621      	mov	r1, r4
 800eeda:	4605      	mov	r5, r0
 800eedc:	4638      	mov	r0, r7
 800eede:	f003 ff33 	bl	8012d48 <gmtime_r>
 800eee2:	6943      	ldr	r3, [r0, #20]
 800eee4:	0799      	lsls	r1, r3, #30
 800eee6:	4604      	mov	r4, r0
 800eee8:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800eeec:	d106      	bne.n	800eefc <localtime_r+0x30>
 800eeee:	2264      	movs	r2, #100	@ 0x64
 800eef0:	fb98 f3f2 	sdiv	r3, r8, r2
 800eef4:	fb02 8313 	mls	r3, r2, r3, r8
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d171      	bne.n	800efe0 <localtime_r+0x114>
 800eefc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ef00:	fb98 f3f2 	sdiv	r3, r8, r2
 800ef04:	fb02 8313 	mls	r3, r2, r3, r8
 800ef08:	fab3 f383 	clz	r3, r3
 800ef0c:	095b      	lsrs	r3, r3, #5
 800ef0e:	425e      	negs	r6, r3
 800ef10:	4b64      	ldr	r3, [pc, #400]	@ (800f0a4 <localtime_r+0x1d8>)
 800ef12:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 800ef16:	441e      	add	r6, r3
 800ef18:	f000 fc24 	bl	800f764 <__tz_lock>
 800ef1c:	f000 fc2e 	bl	800f77c <_tzset_unlocked>
 800ef20:	4b61      	ldr	r3, [pc, #388]	@ (800f0a8 <localtime_r+0x1dc>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d06a      	beq.n	800effe <localtime_r+0x132>
 800ef28:	686b      	ldr	r3, [r5, #4]
 800ef2a:	4543      	cmp	r3, r8
 800ef2c:	d15a      	bne.n	800efe4 <localtime_r+0x118>
 800ef2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef32:	682f      	ldr	r7, [r5, #0]
 800ef34:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800ef38:	2f00      	cmp	r7, #0
 800ef3a:	d15b      	bne.n	800eff4 <localtime_r+0x128>
 800ef3c:	4282      	cmp	r2, r0
 800ef3e:	eb73 0101 	sbcs.w	r1, r3, r1
 800ef42:	db5e      	blt.n	800f002 <localtime_r+0x136>
 800ef44:	2301      	movs	r3, #1
 800ef46:	6223      	str	r3, [r4, #32]
 800ef48:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ef4a:	6861      	ldr	r1, [r4, #4]
 800ef4c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800ef50:	fb93 f0f2 	sdiv	r0, r3, r2
 800ef54:	fb02 3310 	mls	r3, r2, r0, r3
 800ef58:	223c      	movs	r2, #60	@ 0x3c
 800ef5a:	fb93 f5f2 	sdiv	r5, r3, r2
 800ef5e:	fb02 3215 	mls	r2, r2, r5, r3
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	1a9b      	subs	r3, r3, r2
 800ef66:	68a2      	ldr	r2, [r4, #8]
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	1b49      	subs	r1, r1, r5
 800ef6c:	1a12      	subs	r2, r2, r0
 800ef6e:	2b3b      	cmp	r3, #59	@ 0x3b
 800ef70:	6061      	str	r1, [r4, #4]
 800ef72:	60a2      	str	r2, [r4, #8]
 800ef74:	dd51      	ble.n	800f01a <localtime_r+0x14e>
 800ef76:	3101      	adds	r1, #1
 800ef78:	6061      	str	r1, [r4, #4]
 800ef7a:	3b3c      	subs	r3, #60	@ 0x3c
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	6863      	ldr	r3, [r4, #4]
 800ef80:	2b3b      	cmp	r3, #59	@ 0x3b
 800ef82:	dd50      	ble.n	800f026 <localtime_r+0x15a>
 800ef84:	3201      	adds	r2, #1
 800ef86:	60a2      	str	r2, [r4, #8]
 800ef88:	3b3c      	subs	r3, #60	@ 0x3c
 800ef8a:	6063      	str	r3, [r4, #4]
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	2b17      	cmp	r3, #23
 800ef90:	dd4f      	ble.n	800f032 <localtime_r+0x166>
 800ef92:	69e2      	ldr	r2, [r4, #28]
 800ef94:	3201      	adds	r2, #1
 800ef96:	61e2      	str	r2, [r4, #28]
 800ef98:	69a2      	ldr	r2, [r4, #24]
 800ef9a:	3201      	adds	r2, #1
 800ef9c:	2a07      	cmp	r2, #7
 800ef9e:	bfa8      	it	ge
 800efa0:	2200      	movge	r2, #0
 800efa2:	61a2      	str	r2, [r4, #24]
 800efa4:	68e2      	ldr	r2, [r4, #12]
 800efa6:	3b18      	subs	r3, #24
 800efa8:	3201      	adds	r2, #1
 800efaa:	60a3      	str	r3, [r4, #8]
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	60e2      	str	r2, [r4, #12]
 800efb0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800efb4:	428a      	cmp	r2, r1
 800efb6:	dd0e      	ble.n	800efd6 <localtime_r+0x10a>
 800efb8:	2b0b      	cmp	r3, #11
 800efba:	eba2 0201 	sub.w	r2, r2, r1
 800efbe:	60e2      	str	r2, [r4, #12]
 800efc0:	f103 0201 	add.w	r2, r3, #1
 800efc4:	bf09      	itett	eq
 800efc6:	6963      	ldreq	r3, [r4, #20]
 800efc8:	6122      	strne	r2, [r4, #16]
 800efca:	2200      	moveq	r2, #0
 800efcc:	3301      	addeq	r3, #1
 800efce:	bf02      	ittt	eq
 800efd0:	6122      	streq	r2, [r4, #16]
 800efd2:	6163      	streq	r3, [r4, #20]
 800efd4:	61e2      	streq	r2, [r4, #28]
 800efd6:	f000 fbcb 	bl	800f770 <__tz_unlock>
 800efda:	4620      	mov	r0, r4
 800efdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe0:	2301      	movs	r3, #1
 800efe2:	e794      	b.n	800ef0e <localtime_r+0x42>
 800efe4:	4640      	mov	r0, r8
 800efe6:	f000 fb09 	bl	800f5fc <__tzcalc_limits>
 800efea:	2800      	cmp	r0, #0
 800efec:	d19f      	bne.n	800ef2e <localtime_r+0x62>
 800efee:	f04f 33ff 	mov.w	r3, #4294967295
 800eff2:	e004      	b.n	800effe <localtime_r+0x132>
 800eff4:	4282      	cmp	r2, r0
 800eff6:	eb73 0101 	sbcs.w	r1, r3, r1
 800effa:	da02      	bge.n	800f002 <localtime_r+0x136>
 800effc:	2300      	movs	r3, #0
 800effe:	6223      	str	r3, [r4, #32]
 800f000:	e009      	b.n	800f016 <localtime_r+0x14a>
 800f002:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800f006:	4282      	cmp	r2, r0
 800f008:	418b      	sbcs	r3, r1
 800f00a:	bfb4      	ite	lt
 800f00c:	2301      	movlt	r3, #1
 800f00e:	2300      	movge	r3, #0
 800f010:	6223      	str	r3, [r4, #32]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d198      	bne.n	800ef48 <localtime_r+0x7c>
 800f016:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800f018:	e797      	b.n	800ef4a <localtime_r+0x7e>
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	daaf      	bge.n	800ef7e <localtime_r+0xb2>
 800f01e:	3901      	subs	r1, #1
 800f020:	6061      	str	r1, [r4, #4]
 800f022:	333c      	adds	r3, #60	@ 0x3c
 800f024:	e7aa      	b.n	800ef7c <localtime_r+0xb0>
 800f026:	2b00      	cmp	r3, #0
 800f028:	dab0      	bge.n	800ef8c <localtime_r+0xc0>
 800f02a:	3a01      	subs	r2, #1
 800f02c:	60a2      	str	r2, [r4, #8]
 800f02e:	333c      	adds	r3, #60	@ 0x3c
 800f030:	e7ab      	b.n	800ef8a <localtime_r+0xbe>
 800f032:	2b00      	cmp	r3, #0
 800f034:	dacf      	bge.n	800efd6 <localtime_r+0x10a>
 800f036:	69e2      	ldr	r2, [r4, #28]
 800f038:	3a01      	subs	r2, #1
 800f03a:	61e2      	str	r2, [r4, #28]
 800f03c:	69a2      	ldr	r2, [r4, #24]
 800f03e:	3a01      	subs	r2, #1
 800f040:	bf48      	it	mi
 800f042:	2206      	movmi	r2, #6
 800f044:	61a2      	str	r2, [r4, #24]
 800f046:	68e2      	ldr	r2, [r4, #12]
 800f048:	3318      	adds	r3, #24
 800f04a:	3a01      	subs	r2, #1
 800f04c:	60e2      	str	r2, [r4, #12]
 800f04e:	60a3      	str	r3, [r4, #8]
 800f050:	2a00      	cmp	r2, #0
 800f052:	d1c0      	bne.n	800efd6 <localtime_r+0x10a>
 800f054:	6923      	ldr	r3, [r4, #16]
 800f056:	3b01      	subs	r3, #1
 800f058:	d405      	bmi.n	800f066 <localtime_r+0x19a>
 800f05a:	6123      	str	r3, [r4, #16]
 800f05c:	6923      	ldr	r3, [r4, #16]
 800f05e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800f062:	60e3      	str	r3, [r4, #12]
 800f064:	e7b7      	b.n	800efd6 <localtime_r+0x10a>
 800f066:	230b      	movs	r3, #11
 800f068:	6123      	str	r3, [r4, #16]
 800f06a:	6963      	ldr	r3, [r4, #20]
 800f06c:	1e5a      	subs	r2, r3, #1
 800f06e:	6162      	str	r2, [r4, #20]
 800f070:	0792      	lsls	r2, r2, #30
 800f072:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800f076:	d105      	bne.n	800f084 <localtime_r+0x1b8>
 800f078:	2164      	movs	r1, #100	@ 0x64
 800f07a:	fb93 f2f1 	sdiv	r2, r3, r1
 800f07e:	fb01 3212 	mls	r2, r1, r2, r3
 800f082:	b962      	cbnz	r2, 800f09e <localtime_r+0x1d2>
 800f084:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f088:	fb93 f1f2 	sdiv	r1, r3, r2
 800f08c:	fb02 3311 	mls	r3, r2, r1, r3
 800f090:	fab3 f383 	clz	r3, r3
 800f094:	095b      	lsrs	r3, r3, #5
 800f096:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800f09a:	61e3      	str	r3, [r4, #28]
 800f09c:	e7de      	b.n	800f05c <localtime_r+0x190>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e7f9      	b.n	800f096 <localtime_r+0x1ca>
 800f0a2:	bf00      	nop
 800f0a4:	0801426c 	.word	0x0801426c
 800f0a8:	20006f74 	.word	0x20006f74

0800f0ac <validate_structure>:
 800f0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ae:	6801      	ldr	r1, [r0, #0]
 800f0b0:	293b      	cmp	r1, #59	@ 0x3b
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	d911      	bls.n	800f0da <validate_structure+0x2e>
 800f0b6:	223c      	movs	r2, #60	@ 0x3c
 800f0b8:	4668      	mov	r0, sp
 800f0ba:	f000 fe4f 	bl	800fd5c <div>
 800f0be:	9a01      	ldr	r2, [sp, #4]
 800f0c0:	6863      	ldr	r3, [r4, #4]
 800f0c2:	9900      	ldr	r1, [sp, #0]
 800f0c4:	2a00      	cmp	r2, #0
 800f0c6:	440b      	add	r3, r1
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	bfbb      	ittet	lt
 800f0cc:	323c      	addlt	r2, #60	@ 0x3c
 800f0ce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800f0d2:	6022      	strge	r2, [r4, #0]
 800f0d4:	6022      	strlt	r2, [r4, #0]
 800f0d6:	bfb8      	it	lt
 800f0d8:	6063      	strlt	r3, [r4, #4]
 800f0da:	6861      	ldr	r1, [r4, #4]
 800f0dc:	293b      	cmp	r1, #59	@ 0x3b
 800f0de:	d911      	bls.n	800f104 <validate_structure+0x58>
 800f0e0:	223c      	movs	r2, #60	@ 0x3c
 800f0e2:	4668      	mov	r0, sp
 800f0e4:	f000 fe3a 	bl	800fd5c <div>
 800f0e8:	9a01      	ldr	r2, [sp, #4]
 800f0ea:	68a3      	ldr	r3, [r4, #8]
 800f0ec:	9900      	ldr	r1, [sp, #0]
 800f0ee:	2a00      	cmp	r2, #0
 800f0f0:	440b      	add	r3, r1
 800f0f2:	60a3      	str	r3, [r4, #8]
 800f0f4:	bfbb      	ittet	lt
 800f0f6:	323c      	addlt	r2, #60	@ 0x3c
 800f0f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800f0fc:	6062      	strge	r2, [r4, #4]
 800f0fe:	6062      	strlt	r2, [r4, #4]
 800f100:	bfb8      	it	lt
 800f102:	60a3      	strlt	r3, [r4, #8]
 800f104:	68a1      	ldr	r1, [r4, #8]
 800f106:	2917      	cmp	r1, #23
 800f108:	d911      	bls.n	800f12e <validate_structure+0x82>
 800f10a:	2218      	movs	r2, #24
 800f10c:	4668      	mov	r0, sp
 800f10e:	f000 fe25 	bl	800fd5c <div>
 800f112:	9a01      	ldr	r2, [sp, #4]
 800f114:	68e3      	ldr	r3, [r4, #12]
 800f116:	9900      	ldr	r1, [sp, #0]
 800f118:	2a00      	cmp	r2, #0
 800f11a:	440b      	add	r3, r1
 800f11c:	60e3      	str	r3, [r4, #12]
 800f11e:	bfbb      	ittet	lt
 800f120:	3218      	addlt	r2, #24
 800f122:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800f126:	60a2      	strge	r2, [r4, #8]
 800f128:	60a2      	strlt	r2, [r4, #8]
 800f12a:	bfb8      	it	lt
 800f12c:	60e3      	strlt	r3, [r4, #12]
 800f12e:	6921      	ldr	r1, [r4, #16]
 800f130:	290b      	cmp	r1, #11
 800f132:	d911      	bls.n	800f158 <validate_structure+0xac>
 800f134:	220c      	movs	r2, #12
 800f136:	4668      	mov	r0, sp
 800f138:	f000 fe10 	bl	800fd5c <div>
 800f13c:	9a01      	ldr	r2, [sp, #4]
 800f13e:	6963      	ldr	r3, [r4, #20]
 800f140:	9900      	ldr	r1, [sp, #0]
 800f142:	2a00      	cmp	r2, #0
 800f144:	440b      	add	r3, r1
 800f146:	6163      	str	r3, [r4, #20]
 800f148:	bfbb      	ittet	lt
 800f14a:	320c      	addlt	r2, #12
 800f14c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800f150:	6122      	strge	r2, [r4, #16]
 800f152:	6122      	strlt	r2, [r4, #16]
 800f154:	bfb8      	it	lt
 800f156:	6163      	strlt	r3, [r4, #20]
 800f158:	6963      	ldr	r3, [r4, #20]
 800f15a:	079a      	lsls	r2, r3, #30
 800f15c:	d11c      	bne.n	800f198 <validate_structure+0xec>
 800f15e:	2164      	movs	r1, #100	@ 0x64
 800f160:	fb93 f2f1 	sdiv	r2, r3, r1
 800f164:	fb01 3212 	mls	r2, r1, r2, r3
 800f168:	b9c2      	cbnz	r2, 800f19c <validate_structure+0xf0>
 800f16a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800f16e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f172:	fb93 f1f2 	sdiv	r1, r3, r2
 800f176:	fb02 3311 	mls	r3, r2, r1, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	bf0c      	ite	eq
 800f17e:	231d      	moveq	r3, #29
 800f180:	231c      	movne	r3, #28
 800f182:	68e2      	ldr	r2, [r4, #12]
 800f184:	2a00      	cmp	r2, #0
 800f186:	dc0b      	bgt.n	800f1a0 <validate_structure+0xf4>
 800f188:	4d31      	ldr	r5, [pc, #196]	@ (800f250 <validate_structure+0x1a4>)
 800f18a:	200b      	movs	r0, #11
 800f18c:	2164      	movs	r1, #100	@ 0x64
 800f18e:	68e6      	ldr	r6, [r4, #12]
 800f190:	2e00      	cmp	r6, #0
 800f192:	dd30      	ble.n	800f1f6 <validate_structure+0x14a>
 800f194:	b003      	add	sp, #12
 800f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f198:	231c      	movs	r3, #28
 800f19a:	e7f2      	b.n	800f182 <validate_structure+0xd6>
 800f19c:	231d      	movs	r3, #29
 800f19e:	e7f0      	b.n	800f182 <validate_structure+0xd6>
 800f1a0:	4d2b      	ldr	r5, [pc, #172]	@ (800f250 <validate_structure+0x1a4>)
 800f1a2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800f1a6:	2a01      	cmp	r2, #1
 800f1a8:	bf14      	ite	ne
 800f1aa:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800f1ae:	4618      	moveq	r0, r3
 800f1b0:	4281      	cmp	r1, r0
 800f1b2:	ddef      	ble.n	800f194 <validate_structure+0xe8>
 800f1b4:	3201      	adds	r2, #1
 800f1b6:	1a09      	subs	r1, r1, r0
 800f1b8:	2a0c      	cmp	r2, #12
 800f1ba:	60e1      	str	r1, [r4, #12]
 800f1bc:	6122      	str	r2, [r4, #16]
 800f1be:	d1f0      	bne.n	800f1a2 <validate_structure+0xf6>
 800f1c0:	6963      	ldr	r3, [r4, #20]
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	6121      	str	r1, [r4, #16]
 800f1c8:	0791      	lsls	r1, r2, #30
 800f1ca:	6162      	str	r2, [r4, #20]
 800f1cc:	d13c      	bne.n	800f248 <validate_structure+0x19c>
 800f1ce:	2164      	movs	r1, #100	@ 0x64
 800f1d0:	fb92 f0f1 	sdiv	r0, r2, r1
 800f1d4:	fb01 2210 	mls	r2, r1, r0, r2
 800f1d8:	2a00      	cmp	r2, #0
 800f1da:	d137      	bne.n	800f24c <validate_structure+0x1a0>
 800f1dc:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800f1e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f1e4:	fb93 f1f2 	sdiv	r1, r3, r2
 800f1e8:	fb02 3311 	mls	r3, r2, r1, r3
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bf0c      	ite	eq
 800f1f0:	231d      	moveq	r3, #29
 800f1f2:	231c      	movne	r3, #28
 800f1f4:	e7d5      	b.n	800f1a2 <validate_structure+0xf6>
 800f1f6:	6922      	ldr	r2, [r4, #16]
 800f1f8:	3a01      	subs	r2, #1
 800f1fa:	6122      	str	r2, [r4, #16]
 800f1fc:	3201      	adds	r2, #1
 800f1fe:	d116      	bne.n	800f22e <validate_structure+0x182>
 800f200:	6963      	ldr	r3, [r4, #20]
 800f202:	1e5a      	subs	r2, r3, #1
 800f204:	0797      	lsls	r7, r2, #30
 800f206:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800f20a:	d119      	bne.n	800f240 <validate_structure+0x194>
 800f20c:	fb92 f7f1 	sdiv	r7, r2, r1
 800f210:	fb01 2217 	mls	r2, r1, r7, r2
 800f214:	b9b2      	cbnz	r2, 800f244 <validate_structure+0x198>
 800f216:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800f21a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f21e:	fb93 f7f2 	sdiv	r7, r3, r2
 800f222:	fb02 3317 	mls	r3, r2, r7, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	bf0c      	ite	eq
 800f22a:	231d      	moveq	r3, #29
 800f22c:	231c      	movne	r3, #28
 800f22e:	6922      	ldr	r2, [r4, #16]
 800f230:	2a01      	cmp	r2, #1
 800f232:	bf14      	ite	ne
 800f234:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800f238:	461a      	moveq	r2, r3
 800f23a:	4432      	add	r2, r6
 800f23c:	60e2      	str	r2, [r4, #12]
 800f23e:	e7a6      	b.n	800f18e <validate_structure+0xe2>
 800f240:	231c      	movs	r3, #28
 800f242:	e7f4      	b.n	800f22e <validate_structure+0x182>
 800f244:	231d      	movs	r3, #29
 800f246:	e7f2      	b.n	800f22e <validate_structure+0x182>
 800f248:	231c      	movs	r3, #28
 800f24a:	e7aa      	b.n	800f1a2 <validate_structure+0xf6>
 800f24c:	231d      	movs	r3, #29
 800f24e:	e7a8      	b.n	800f1a2 <validate_structure+0xf6>
 800f250:	0801423c 	.word	0x0801423c

0800f254 <mktime>:
 800f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f258:	b085      	sub	sp, #20
 800f25a:	4607      	mov	r7, r0
 800f25c:	f003 fd70 	bl	8012d40 <__gettzinfo>
 800f260:	4681      	mov	r9, r0
 800f262:	4638      	mov	r0, r7
 800f264:	f7ff ff22 	bl	800f0ac <validate_structure>
 800f268:	e9d7 4300 	ldrd	r4, r3, [r7]
 800f26c:	223c      	movs	r2, #60	@ 0x3c
 800f26e:	fb02 4403 	mla	r4, r2, r3, r4
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	697d      	ldr	r5, [r7, #20]
 800f276:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800f27a:	fb02 4403 	mla	r4, r2, r3, r4
 800f27e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800f282:	4ac3      	ldr	r2, [pc, #780]	@ (800f590 <mktime+0x33c>)
 800f284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f288:	3e01      	subs	r6, #1
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	4416      	add	r6, r2
 800f28e:	dd11      	ble.n	800f2b4 <mktime+0x60>
 800f290:	07a9      	lsls	r1, r5, #30
 800f292:	d10f      	bne.n	800f2b4 <mktime+0x60>
 800f294:	2264      	movs	r2, #100	@ 0x64
 800f296:	fb95 f3f2 	sdiv	r3, r5, r2
 800f29a:	fb02 5313 	mls	r3, r2, r3, r5
 800f29e:	b943      	cbnz	r3, 800f2b2 <mktime+0x5e>
 800f2a0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800f2a4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f2a8:	fb93 f1f2 	sdiv	r1, r3, r2
 800f2ac:	fb02 3311 	mls	r3, r2, r1, r3
 800f2b0:	b903      	cbnz	r3, 800f2b4 <mktime+0x60>
 800f2b2:	3601      	adds	r6, #1
 800f2b4:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800f2b8:	3310      	adds	r3, #16
 800f2ba:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	61fe      	str	r6, [r7, #28]
 800f2c2:	f200 8170 	bhi.w	800f5a6 <mktime+0x352>
 800f2c6:	2d46      	cmp	r5, #70	@ 0x46
 800f2c8:	f340 80b6 	ble.w	800f438 <mktime+0x1e4>
 800f2cc:	2346      	movs	r3, #70	@ 0x46
 800f2ce:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800f2d2:	2164      	movs	r1, #100	@ 0x64
 800f2d4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800f2d8:	079a      	lsls	r2, r3, #30
 800f2da:	f040 80a7 	bne.w	800f42c <mktime+0x1d8>
 800f2de:	fb93 f2f1 	sdiv	r2, r3, r1
 800f2e2:	fb01 3212 	mls	r2, r1, r2, r3
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	f040 80a3 	bne.w	800f432 <mktime+0x1de>
 800f2ec:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800f2f0:	fb92 fef0 	sdiv	lr, r2, r0
 800f2f4:	fb00 221e 	mls	r2, r0, lr, r2
 800f2f8:	2a00      	cmp	r2, #0
 800f2fa:	bf0c      	ite	eq
 800f2fc:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800f300:	4662      	movne	r2, ip
 800f302:	3301      	adds	r3, #1
 800f304:	429d      	cmp	r5, r3
 800f306:	4416      	add	r6, r2
 800f308:	d1e6      	bne.n	800f2d8 <mktime+0x84>
 800f30a:	4ba2      	ldr	r3, [pc, #648]	@ (800f594 <mktime+0x340>)
 800f30c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800f310:	fbc6 4803 	smlal	r4, r8, r6, r3
 800f314:	f000 fa26 	bl	800f764 <__tz_lock>
 800f318:	f000 fa30 	bl	800f77c <_tzset_unlocked>
 800f31c:	4b9e      	ldr	r3, [pc, #632]	@ (800f598 <mktime+0x344>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	f000 8147 	beq.w	800f5b4 <mktime+0x360>
 800f326:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800f32a:	6978      	ldr	r0, [r7, #20]
 800f32c:	4653      	mov	r3, sl
 800f32e:	2b01      	cmp	r3, #1
 800f330:	bfa8      	it	ge
 800f332:	2301      	movge	r3, #1
 800f334:	9301      	str	r3, [sp, #4]
 800f336:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f33a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800f33e:	4283      	cmp	r3, r0
 800f340:	f040 80bd 	bne.w	800f4be <mktime+0x26a>
 800f344:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800f348:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800f34c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800f350:	1a13      	subs	r3, r2, r0
 800f352:	9303      	str	r3, [sp, #12]
 800f354:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800f358:	9302      	str	r3, [sp, #8]
 800f35a:	9a02      	ldr	r2, [sp, #8]
 800f35c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800f360:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800f364:	ebb2 0e03 	subs.w	lr, r2, r3
 800f368:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800f36c:	4574      	cmp	r4, lr
 800f36e:	eb78 0201 	sbcs.w	r2, r8, r1
 800f372:	f280 80c7 	bge.w	800f504 <mktime+0x2b0>
 800f376:	f8d9 2000 	ldr.w	r2, [r9]
 800f37a:	2a00      	cmp	r2, #0
 800f37c:	f000 80d0 	beq.w	800f520 <mktime+0x2cc>
 800f380:	9a03      	ldr	r2, [sp, #12]
 800f382:	4294      	cmp	r4, r2
 800f384:	eb78 020b 	sbcs.w	r2, r8, fp
 800f388:	f2c0 8111 	blt.w	800f5ae <mktime+0x35a>
 800f38c:	4574      	cmp	r4, lr
 800f38e:	eb78 0101 	sbcs.w	r1, r8, r1
 800f392:	bfb4      	ite	lt
 800f394:	f04f 0b01 	movlt.w	fp, #1
 800f398:	f04f 0b00 	movge.w	fp, #0
 800f39c:	f1ba 0f00 	cmp.w	sl, #0
 800f3a0:	f2c0 8094 	blt.w	800f4cc <mktime+0x278>
 800f3a4:	9a01      	ldr	r2, [sp, #4]
 800f3a6:	ea82 0a0b 	eor.w	sl, r2, fp
 800f3aa:	f1ba 0f01 	cmp.w	sl, #1
 800f3ae:	f040 808d 	bne.w	800f4cc <mktime+0x278>
 800f3b2:	f1bb 0f00 	cmp.w	fp, #0
 800f3b6:	f000 80c2 	beq.w	800f53e <mktime+0x2ea>
 800f3ba:	1a1b      	subs	r3, r3, r0
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	441a      	add	r2, r3
 800f3c0:	191c      	adds	r4, r3, r4
 800f3c2:	603a      	str	r2, [r7, #0]
 800f3c4:	4638      	mov	r0, r7
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	9201      	str	r2, [sp, #4]
 800f3ca:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800f3ce:	f7ff fe6d 	bl	800f0ac <validate_structure>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	9a01      	ldr	r2, [sp, #4]
 800f3d6:	1a9b      	subs	r3, r3, r2
 800f3d8:	d078      	beq.n	800f4cc <mktime+0x278>
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	f300 80b1 	bgt.w	800f542 <mktime+0x2ee>
 800f3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e4:	bfa8      	it	ge
 800f3e6:	469a      	movge	sl, r3
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	eb1a 0303 	adds.w	r3, sl, r3
 800f3ee:	4456      	add	r6, sl
 800f3f0:	f140 80b0 	bpl.w	800f554 <mktime+0x300>
 800f3f4:	1e6b      	subs	r3, r5, #1
 800f3f6:	0799      	lsls	r1, r3, #30
 800f3f8:	f040 80a6 	bne.w	800f548 <mktime+0x2f4>
 800f3fc:	2264      	movs	r2, #100	@ 0x64
 800f3fe:	fb93 f1f2 	sdiv	r1, r3, r2
 800f402:	fb02 3311 	mls	r3, r2, r1, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	f040 80a1 	bne.w	800f54e <mktime+0x2fa>
 800f40c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f410:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800f414:	fb95 f2f3 	sdiv	r2, r5, r3
 800f418:	fb03 5512 	mls	r5, r3, r2, r5
 800f41c:	2d00      	cmp	r5, #0
 800f41e:	f240 136d 	movw	r3, #365	@ 0x16d
 800f422:	bf18      	it	ne
 800f424:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800f428:	61fb      	str	r3, [r7, #28]
 800f42a:	e04f      	b.n	800f4cc <mktime+0x278>
 800f42c:	f240 126d 	movw	r2, #365	@ 0x16d
 800f430:	e767      	b.n	800f302 <mktime+0xae>
 800f432:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800f436:	e764      	b.n	800f302 <mktime+0xae>
 800f438:	f43f af67 	beq.w	800f30a <mktime+0xb6>
 800f43c:	2345      	movs	r3, #69	@ 0x45
 800f43e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800f442:	2164      	movs	r1, #100	@ 0x64
 800f444:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800f448:	e012      	b.n	800f470 <mktime+0x21c>
 800f44a:	bb62      	cbnz	r2, 800f4a6 <mktime+0x252>
 800f44c:	fb93 f2f1 	sdiv	r2, r3, r1
 800f450:	fb01 3212 	mls	r2, r1, r2, r3
 800f454:	bb52      	cbnz	r2, 800f4ac <mktime+0x258>
 800f456:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800f45a:	fb92 fef0 	sdiv	lr, r2, r0
 800f45e:	fb00 221e 	mls	r2, r0, lr, r2
 800f462:	2a00      	cmp	r2, #0
 800f464:	bf0c      	ite	eq
 800f466:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800f46a:	4662      	movne	r2, ip
 800f46c:	1ab6      	subs	r6, r6, r2
 800f46e:	3b01      	subs	r3, #1
 800f470:	429d      	cmp	r5, r3
 800f472:	f003 0203 	and.w	r2, r3, #3
 800f476:	dbe8      	blt.n	800f44a <mktime+0x1f6>
 800f478:	b9da      	cbnz	r2, 800f4b2 <mktime+0x25e>
 800f47a:	2264      	movs	r2, #100	@ 0x64
 800f47c:	fb95 f3f2 	sdiv	r3, r5, r2
 800f480:	fb02 5313 	mls	r3, r2, r3, r5
 800f484:	b9c3      	cbnz	r3, 800f4b8 <mktime+0x264>
 800f486:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800f48a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f48e:	fb93 f1f2 	sdiv	r1, r3, r2
 800f492:	fb02 3311 	mls	r3, r2, r1, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	f240 136d 	movw	r3, #365	@ 0x16d
 800f49c:	bf08      	it	eq
 800f49e:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800f4a2:	1af6      	subs	r6, r6, r3
 800f4a4:	e731      	b.n	800f30a <mktime+0xb6>
 800f4a6:	f240 126d 	movw	r2, #365	@ 0x16d
 800f4aa:	e7df      	b.n	800f46c <mktime+0x218>
 800f4ac:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800f4b0:	e7dc      	b.n	800f46c <mktime+0x218>
 800f4b2:	f240 136d 	movw	r3, #365	@ 0x16d
 800f4b6:	e7f4      	b.n	800f4a2 <mktime+0x24e>
 800f4b8:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800f4bc:	e7f1      	b.n	800f4a2 <mktime+0x24e>
 800f4be:	f000 f89d 	bl	800f5fc <__tzcalc_limits>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	f47f af3e 	bne.w	800f344 <mktime+0xf0>
 800f4c8:	f8dd b004 	ldr.w	fp, [sp, #4]
 800f4cc:	f1bb 0f01 	cmp.w	fp, #1
 800f4d0:	d172      	bne.n	800f5b8 <mktime+0x364>
 800f4d2:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800f4d6:	191c      	adds	r4, r3, r4
 800f4d8:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800f4dc:	f04f 0b01 	mov.w	fp, #1
 800f4e0:	f000 f946 	bl	800f770 <__tz_unlock>
 800f4e4:	3604      	adds	r6, #4
 800f4e6:	2307      	movs	r3, #7
 800f4e8:	fb96 f3f3 	sdiv	r3, r6, r3
 800f4ec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f4f0:	1af6      	subs	r6, r6, r3
 800f4f2:	d456      	bmi.n	800f5a2 <mktime+0x34e>
 800f4f4:	f8c7 b020 	str.w	fp, [r7, #32]
 800f4f8:	61be      	str	r6, [r7, #24]
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	4641      	mov	r1, r8
 800f4fe:	b005      	add	sp, #20
 800f500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f504:	9a02      	ldr	r2, [sp, #8]
 800f506:	1a12      	subs	r2, r2, r0
 800f508:	9202      	str	r2, [sp, #8]
 800f50a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800f50e:	eb6c 0c02 	sbc.w	ip, ip, r2
 800f512:	9a02      	ldr	r2, [sp, #8]
 800f514:	4294      	cmp	r4, r2
 800f516:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800f51a:	f6bf af2c 	bge.w	800f376 <mktime+0x122>
 800f51e:	e7d3      	b.n	800f4c8 <mktime+0x274>
 800f520:	9a03      	ldr	r2, [sp, #12]
 800f522:	4294      	cmp	r4, r2
 800f524:	eb78 020b 	sbcs.w	r2, r8, fp
 800f528:	f6ff af30 	blt.w	800f38c <mktime+0x138>
 800f52c:	f1ba 0f00 	cmp.w	sl, #0
 800f530:	dbcf      	blt.n	800f4d2 <mktime+0x27e>
 800f532:	f04f 0b01 	mov.w	fp, #1
 800f536:	e735      	b.n	800f3a4 <mktime+0x150>
 800f538:	f04f 0b00 	mov.w	fp, #0
 800f53c:	e732      	b.n	800f3a4 <mktime+0x150>
 800f53e:	1ac3      	subs	r3, r0, r3
 800f540:	e73c      	b.n	800f3bc <mktime+0x168>
 800f542:	f04f 3aff 	mov.w	sl, #4294967295
 800f546:	e74f      	b.n	800f3e8 <mktime+0x194>
 800f548:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800f54c:	e76c      	b.n	800f428 <mktime+0x1d4>
 800f54e:	f240 136d 	movw	r3, #365	@ 0x16d
 800f552:	e769      	b.n	800f428 <mktime+0x1d4>
 800f554:	07aa      	lsls	r2, r5, #30
 800f556:	d117      	bne.n	800f588 <mktime+0x334>
 800f558:	2164      	movs	r1, #100	@ 0x64
 800f55a:	fb95 f2f1 	sdiv	r2, r5, r1
 800f55e:	fb01 5212 	mls	r2, r1, r2, r5
 800f562:	b9da      	cbnz	r2, 800f59c <mktime+0x348>
 800f564:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f568:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800f56c:	fb95 f1f2 	sdiv	r1, r5, r2
 800f570:	fb02 5511 	mls	r5, r2, r1, r5
 800f574:	2d00      	cmp	r5, #0
 800f576:	f240 126d 	movw	r2, #365	@ 0x16d
 800f57a:	bf08      	it	eq
 800f57c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800f580:	4293      	cmp	r3, r2
 800f582:	bfa8      	it	ge
 800f584:	1a9b      	subge	r3, r3, r2
 800f586:	e74f      	b.n	800f428 <mktime+0x1d4>
 800f588:	f240 126d 	movw	r2, #365	@ 0x16d
 800f58c:	e7f8      	b.n	800f580 <mktime+0x32c>
 800f58e:	bf00      	nop
 800f590:	0801420c 	.word	0x0801420c
 800f594:	00015180 	.word	0x00015180
 800f598:	20006f74 	.word	0x20006f74
 800f59c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800f5a0:	e7ee      	b.n	800f580 <mktime+0x32c>
 800f5a2:	3607      	adds	r6, #7
 800f5a4:	e7a6      	b.n	800f4f4 <mktime+0x2a0>
 800f5a6:	f04f 34ff 	mov.w	r4, #4294967295
 800f5aa:	46a0      	mov	r8, r4
 800f5ac:	e7a5      	b.n	800f4fa <mktime+0x2a6>
 800f5ae:	f1ba 0f00 	cmp.w	sl, #0
 800f5b2:	dac1      	bge.n	800f538 <mktime+0x2e4>
 800f5b4:	f04f 0b00 	mov.w	fp, #0
 800f5b8:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800f5bc:	191c      	adds	r4, r3, r4
 800f5be:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800f5c2:	e78d      	b.n	800f4e0 <mktime+0x28c>

0800f5c4 <time>:
 800f5c4:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800f5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800f5f8 <time+0x34>)
 800f5c8:	f04f 36ff 	mov.w	r6, #4294967295
 800f5cc:	f04f 37ff 	mov.w	r7, #4294967295
 800f5d0:	4669      	mov	r1, sp
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	6818      	ldr	r0, [r3, #0]
 800f5d8:	e9cd 6700 	strd	r6, r7, [sp]
 800f5dc:	f000 fb0a 	bl	800fbf4 <_gettimeofday_r>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	bfb8      	it	lt
 800f5e4:	e9cd 6700 	strdlt	r6, r7, [sp]
 800f5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5ec:	b10c      	cbz	r4, 800f5f2 <time+0x2e>
 800f5ee:	e9c4 0100 	strd	r0, r1, [r4]
 800f5f2:	b004      	add	sp, #16
 800f5f4:	bdd0      	pop	{r4, r6, r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	200001a4 	.word	0x200001a4

0800f5fc <__tzcalc_limits>:
 800f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f600:	4604      	mov	r4, r0
 800f602:	f003 fb9d 	bl	8012d40 <__gettzinfo>
 800f606:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800f60a:	429c      	cmp	r4, r3
 800f60c:	f340 80a3 	ble.w	800f756 <__tzcalc_limits+0x15a>
 800f610:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800f614:	1865      	adds	r5, r4, r1
 800f616:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800f61a:	f240 126d 	movw	r2, #365	@ 0x16d
 800f61e:	10ad      	asrs	r5, r5, #2
 800f620:	fb02 5503 	mla	r5, r2, r3, r5
 800f624:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800f628:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800f62c:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800f630:	fb93 f3f2 	sdiv	r3, r3, r2
 800f634:	441d      	add	r5, r3
 800f636:	19a3      	adds	r3, r4, r6
 800f638:	4e48      	ldr	r6, [pc, #288]	@ (800f75c <__tzcalc_limits+0x160>)
 800f63a:	6044      	str	r4, [r0, #4]
 800f63c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f640:	4601      	mov	r1, r0
 800f642:	fbb3 f3f2 	udiv	r3, r3, r2
 800f646:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800f64a:	441d      	add	r5, r3
 800f64c:	7a0b      	ldrb	r3, [r1, #8]
 800f64e:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800f652:	2b4a      	cmp	r3, #74	@ 0x4a
 800f654:	d138      	bne.n	800f6c8 <__tzcalc_limits+0xcc>
 800f656:	07a2      	lsls	r2, r4, #30
 800f658:	eb05 030c 	add.w	r3, r5, ip
 800f65c:	d106      	bne.n	800f66c <__tzcalc_limits+0x70>
 800f65e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800f662:	fb94 f2fe 	sdiv	r2, r4, lr
 800f666:	fb0e 4212 	mls	r2, lr, r2, r4
 800f66a:	b932      	cbnz	r2, 800f67a <__tzcalc_limits+0x7e>
 800f66c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800f670:	fb94 f2fe 	sdiv	r2, r4, lr
 800f674:	fb0e 4212 	mls	r2, lr, r2, r4
 800f678:	bb1a      	cbnz	r2, 800f6c2 <__tzcalc_limits+0xc6>
 800f67a:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800f67e:	bfd4      	ite	le
 800f680:	f04f 0c00 	movle.w	ip, #0
 800f684:	f04f 0c01 	movgt.w	ip, #1
 800f688:	4463      	add	r3, ip
 800f68a:	3b01      	subs	r3, #1
 800f68c:	698a      	ldr	r2, [r1, #24]
 800f68e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800f692:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800f696:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800f698:	18d2      	adds	r2, r2, r3
 800f69a:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800f69e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800f6a2:	3128      	adds	r1, #40	@ 0x28
 800f6a4:	428f      	cmp	r7, r1
 800f6a6:	d1d1      	bne.n	800f64c <__tzcalc_limits+0x50>
 800f6a8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800f6ac:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800f6b0:	428c      	cmp	r4, r1
 800f6b2:	4193      	sbcs	r3, r2
 800f6b4:	bfb4      	ite	lt
 800f6b6:	2301      	movlt	r3, #1
 800f6b8:	2300      	movge	r3, #0
 800f6ba:	6003      	str	r3, [r0, #0]
 800f6bc:	2001      	movs	r0, #1
 800f6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6c2:	f04f 0c00 	mov.w	ip, #0
 800f6c6:	e7df      	b.n	800f688 <__tzcalc_limits+0x8c>
 800f6c8:	2b44      	cmp	r3, #68	@ 0x44
 800f6ca:	d102      	bne.n	800f6d2 <__tzcalc_limits+0xd6>
 800f6cc:	eb05 030c 	add.w	r3, r5, ip
 800f6d0:	e7dc      	b.n	800f68c <__tzcalc_limits+0x90>
 800f6d2:	07a3      	lsls	r3, r4, #30
 800f6d4:	d105      	bne.n	800f6e2 <__tzcalc_limits+0xe6>
 800f6d6:	2264      	movs	r2, #100	@ 0x64
 800f6d8:	fb94 f3f2 	sdiv	r3, r4, r2
 800f6dc:	fb02 4313 	mls	r3, r2, r3, r4
 800f6e0:	bb93      	cbnz	r3, 800f748 <__tzcalc_limits+0x14c>
 800f6e2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f6e6:	fb94 f3f2 	sdiv	r3, r4, r2
 800f6ea:	fb02 4313 	mls	r3, r2, r3, r4
 800f6ee:	fab3 f383 	clz	r3, r3
 800f6f2:	095b      	lsrs	r3, r3, #5
 800f6f4:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800f760 <__tzcalc_limits+0x164>
 800f6f8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800f6fc:	425b      	negs	r3, r3
 800f6fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f702:	462a      	mov	r2, r5
 800f704:	f04f 0800 	mov.w	r8, #0
 800f708:	4473      	add	r3, lr
 800f70a:	f108 0801 	add.w	r8, r8, #1
 800f70e:	45c1      	cmp	r9, r8
 800f710:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800f714:	dc1a      	bgt.n	800f74c <__tzcalc_limits+0x150>
 800f716:	f102 0804 	add.w	r8, r2, #4
 800f71a:	2307      	movs	r3, #7
 800f71c:	fb98 f3f3 	sdiv	r3, r8, r3
 800f720:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f724:	eba8 0303 	sub.w	r3, r8, r3
 800f728:	ebbc 0c03 	subs.w	ip, ip, r3
 800f72c:	690b      	ldr	r3, [r1, #16]
 800f72e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f732:	bf48      	it	mi
 800f734:	f10c 0c07 	addmi.w	ip, ip, #7
 800f738:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f73c:	449c      	add	ip, r3
 800f73e:	45f4      	cmp	ip, lr
 800f740:	da06      	bge.n	800f750 <__tzcalc_limits+0x154>
 800f742:	eb02 030c 	add.w	r3, r2, ip
 800f746:	e7a1      	b.n	800f68c <__tzcalc_limits+0x90>
 800f748:	2301      	movs	r3, #1
 800f74a:	e7d3      	b.n	800f6f4 <__tzcalc_limits+0xf8>
 800f74c:	4472      	add	r2, lr
 800f74e:	e7dc      	b.n	800f70a <__tzcalc_limits+0x10e>
 800f750:	f1ac 0c07 	sub.w	ip, ip, #7
 800f754:	e7f3      	b.n	800f73e <__tzcalc_limits+0x142>
 800f756:	2000      	movs	r0, #0
 800f758:	e7b1      	b.n	800f6be <__tzcalc_limits+0xc2>
 800f75a:	bf00      	nop
 800f75c:	00015180 	.word	0x00015180
 800f760:	08014268 	.word	0x08014268

0800f764 <__tz_lock>:
 800f764:	4801      	ldr	r0, [pc, #4]	@ (800f76c <__tz_lock+0x8>)
 800f766:	f000 bab8 	b.w	800fcda <__retarget_lock_acquire>
 800f76a:	bf00      	nop
 800f76c:	20006f7c 	.word	0x20006f7c

0800f770 <__tz_unlock>:
 800f770:	4801      	ldr	r0, [pc, #4]	@ (800f778 <__tz_unlock+0x8>)
 800f772:	f000 bab4 	b.w	800fcde <__retarget_lock_release>
 800f776:	bf00      	nop
 800f778:	20006f7c 	.word	0x20006f7c

0800f77c <_tzset_unlocked>:
 800f77c:	4b01      	ldr	r3, [pc, #4]	@ (800f784 <_tzset_unlocked+0x8>)
 800f77e:	6818      	ldr	r0, [r3, #0]
 800f780:	f000 b802 	b.w	800f788 <_tzset_unlocked_r>
 800f784:	200001a4 	.word	0x200001a4

0800f788 <_tzset_unlocked_r>:
 800f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	b08d      	sub	sp, #52	@ 0x34
 800f78e:	4607      	mov	r7, r0
 800f790:	f003 fad6 	bl	8012d40 <__gettzinfo>
 800f794:	49bc      	ldr	r1, [pc, #752]	@ (800fa88 <_tzset_unlocked_r+0x300>)
 800f796:	4dbd      	ldr	r5, [pc, #756]	@ (800fa8c <_tzset_unlocked_r+0x304>)
 800f798:	4604      	mov	r4, r0
 800f79a:	4638      	mov	r0, r7
 800f79c:	f001 fd00 	bl	80111a0 <_getenv_r>
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	bb10      	cbnz	r0, 800f7ea <_tzset_unlocked_r+0x62>
 800f7a4:	4bba      	ldr	r3, [pc, #744]	@ (800fa90 <_tzset_unlocked_r+0x308>)
 800f7a6:	4abb      	ldr	r2, [pc, #748]	@ (800fa94 <_tzset_unlocked_r+0x30c>)
 800f7a8:	6018      	str	r0, [r3, #0]
 800f7aa:	4bbb      	ldr	r3, [pc, #748]	@ (800fa98 <_tzset_unlocked_r+0x310>)
 800f7ac:	62a0      	str	r0, [r4, #40]	@ 0x28
 800f7ae:	6018      	str	r0, [r3, #0]
 800f7b0:	4bba      	ldr	r3, [pc, #744]	@ (800fa9c <_tzset_unlocked_r+0x314>)
 800f7b2:	6520      	str	r0, [r4, #80]	@ 0x50
 800f7b4:	e9c3 2200 	strd	r2, r2, [r3]
 800f7b8:	214a      	movs	r1, #74	@ 0x4a
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	2300      	movs	r3, #0
 800f7be:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800f7c2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800f7c6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800f7ca:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f7ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f7d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800f7d6:	6828      	ldr	r0, [r5, #0]
 800f7d8:	7221      	strb	r1, [r4, #8]
 800f7da:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800f7de:	f001 fcef 	bl	80111c0 <free>
 800f7e2:	602e      	str	r6, [r5, #0]
 800f7e4:	b00d      	add	sp, #52	@ 0x34
 800f7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ea:	6829      	ldr	r1, [r5, #0]
 800f7ec:	2900      	cmp	r1, #0
 800f7ee:	f040 808e 	bne.w	800f90e <_tzset_unlocked_r+0x186>
 800f7f2:	6828      	ldr	r0, [r5, #0]
 800f7f4:	f001 fce4 	bl	80111c0 <free>
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f7f0 fd51 	bl	80002a0 <strlen>
 800f7fe:	1c41      	adds	r1, r0, #1
 800f800:	4638      	mov	r0, r7
 800f802:	f001 fd07 	bl	8011214 <_malloc_r>
 800f806:	6028      	str	r0, [r5, #0]
 800f808:	2800      	cmp	r0, #0
 800f80a:	f040 8086 	bne.w	800f91a <_tzset_unlocked_r+0x192>
 800f80e:	4aa2      	ldr	r2, [pc, #648]	@ (800fa98 <_tzset_unlocked_r+0x310>)
 800f810:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800fa9c <_tzset_unlocked_r+0x314>
 800f814:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800fa90 <_tzset_unlocked_r+0x308>
 800f818:	2300      	movs	r3, #0
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	4aa0      	ldr	r2, [pc, #640]	@ (800faa0 <_tzset_unlocked_r+0x318>)
 800f81e:	f8ca 3000 	str.w	r3, [sl]
 800f822:	2000      	movs	r0, #0
 800f824:	2100      	movs	r1, #0
 800f826:	e9c8 2200 	strd	r2, r2, [r8]
 800f82a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800f82e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800f832:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800f836:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800f83a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800f83e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800f842:	224a      	movs	r2, #74	@ 0x4a
 800f844:	7222      	strb	r2, [r4, #8]
 800f846:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f848:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800f84c:	6523      	str	r3, [r4, #80]	@ 0x50
 800f84e:	7833      	ldrb	r3, [r6, #0]
 800f850:	2b3a      	cmp	r3, #58	@ 0x3a
 800f852:	bf08      	it	eq
 800f854:	3601      	addeq	r6, #1
 800f856:	7833      	ldrb	r3, [r6, #0]
 800f858:	2b3c      	cmp	r3, #60	@ 0x3c
 800f85a:	d162      	bne.n	800f922 <_tzset_unlocked_r+0x19a>
 800f85c:	1c75      	adds	r5, r6, #1
 800f85e:	4a91      	ldr	r2, [pc, #580]	@ (800faa4 <_tzset_unlocked_r+0x31c>)
 800f860:	4991      	ldr	r1, [pc, #580]	@ (800faa8 <_tzset_unlocked_r+0x320>)
 800f862:	ab0a      	add	r3, sp, #40	@ 0x28
 800f864:	4628      	mov	r0, r5
 800f866:	f7ff f91d 	bl	800eaa4 <siscanf>
 800f86a:	2800      	cmp	r0, #0
 800f86c:	ddba      	ble.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f86e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f870:	1eda      	subs	r2, r3, #3
 800f872:	2a07      	cmp	r2, #7
 800f874:	d8b6      	bhi.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f876:	5ceb      	ldrb	r3, [r5, r3]
 800f878:	2b3e      	cmp	r3, #62	@ 0x3e
 800f87a:	d1b3      	bne.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f87c:	3602      	adds	r6, #2
 800f87e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f880:	18f5      	adds	r5, r6, r3
 800f882:	5cf3      	ldrb	r3, [r6, r3]
 800f884:	2b2d      	cmp	r3, #45	@ 0x2d
 800f886:	d15a      	bne.n	800f93e <_tzset_unlocked_r+0x1b6>
 800f888:	3501      	adds	r5, #1
 800f88a:	f04f 39ff 	mov.w	r9, #4294967295
 800f88e:	2300      	movs	r3, #0
 800f890:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f894:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f898:	af08      	add	r7, sp, #32
 800f89a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f89c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800f8a0:	9303      	str	r3, [sp, #12]
 800f8a2:	f10d 031e 	add.w	r3, sp, #30
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	4980      	ldr	r1, [pc, #512]	@ (800faac <_tzset_unlocked_r+0x324>)
 800f8aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800f8ac:	aa07      	add	r2, sp, #28
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f7ff f8f8 	bl	800eaa4 <siscanf>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	dd95      	ble.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f8b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f8bc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800f8c0:	223c      	movs	r2, #60	@ 0x3c
 800f8c2:	fb02 6603 	mla	r6, r2, r3, r6
 800f8c6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f8ca:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800f8ce:	fb02 6603 	mla	r6, r2, r3, r6
 800f8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8d4:	fb09 f606 	mul.w	r6, r9, r6
 800f8d8:	eb05 0903 	add.w	r9, r5, r3
 800f8dc:	5ceb      	ldrb	r3, [r5, r3]
 800f8de:	2b3c      	cmp	r3, #60	@ 0x3c
 800f8e0:	f040 80ee 	bne.w	800fac0 <_tzset_unlocked_r+0x338>
 800f8e4:	f109 0501 	add.w	r5, r9, #1
 800f8e8:	4a71      	ldr	r2, [pc, #452]	@ (800fab0 <_tzset_unlocked_r+0x328>)
 800f8ea:	496f      	ldr	r1, [pc, #444]	@ (800faa8 <_tzset_unlocked_r+0x320>)
 800f8ec:	ab0a      	add	r3, sp, #40	@ 0x28
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f7ff f8d8 	bl	800eaa4 <siscanf>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	dc28      	bgt.n	800f94a <_tzset_unlocked_r+0x1c2>
 800f8f8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f8fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f8fe:	d124      	bne.n	800f94a <_tzset_unlocked_r+0x1c2>
 800f900:	4b68      	ldr	r3, [pc, #416]	@ (800faa4 <_tzset_unlocked_r+0x31c>)
 800f902:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f904:	e9c8 3300 	strd	r3, r3, [r8]
 800f908:	f8ca 6000 	str.w	r6, [sl]
 800f90c:	e76a      	b.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f90e:	f7f0 fc67 	bl	80001e0 <strcmp>
 800f912:	2800      	cmp	r0, #0
 800f914:	f47f af6d 	bne.w	800f7f2 <_tzset_unlocked_r+0x6a>
 800f918:	e764      	b.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f91a:	4631      	mov	r1, r6
 800f91c:	f000 f9e1 	bl	800fce2 <strcpy>
 800f920:	e775      	b.n	800f80e <_tzset_unlocked_r+0x86>
 800f922:	4a60      	ldr	r2, [pc, #384]	@ (800faa4 <_tzset_unlocked_r+0x31c>)
 800f924:	4963      	ldr	r1, [pc, #396]	@ (800fab4 <_tzset_unlocked_r+0x32c>)
 800f926:	ab0a      	add	r3, sp, #40	@ 0x28
 800f928:	4630      	mov	r0, r6
 800f92a:	f7ff f8bb 	bl	800eaa4 <siscanf>
 800f92e:	2800      	cmp	r0, #0
 800f930:	f77f af58 	ble.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800f934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f936:	3b03      	subs	r3, #3
 800f938:	2b07      	cmp	r3, #7
 800f93a:	d9a0      	bls.n	800f87e <_tzset_unlocked_r+0xf6>
 800f93c:	e752      	b.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800f93e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f940:	bf08      	it	eq
 800f942:	3501      	addeq	r5, #1
 800f944:	f04f 0901 	mov.w	r9, #1
 800f948:	e7a1      	b.n	800f88e <_tzset_unlocked_r+0x106>
 800f94a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f94c:	1eda      	subs	r2, r3, #3
 800f94e:	2a07      	cmp	r2, #7
 800f950:	f63f af48 	bhi.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800f954:	5ceb      	ldrb	r3, [r5, r3]
 800f956:	2b3e      	cmp	r3, #62	@ 0x3e
 800f958:	f47f af44 	bne.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800f95c:	f109 0902 	add.w	r9, r9, #2
 800f960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f962:	eb09 0503 	add.w	r5, r9, r3
 800f966:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f96a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f96c:	f040 80b7 	bne.w	800fade <_tzset_unlocked_r+0x356>
 800f970:	3501      	adds	r5, #1
 800f972:	f04f 39ff 	mov.w	r9, #4294967295
 800f976:	2300      	movs	r3, #0
 800f978:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f97c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f980:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f984:	930a      	str	r3, [sp, #40]	@ 0x28
 800f986:	ab0a      	add	r3, sp, #40	@ 0x28
 800f988:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	f10d 031e 	add.w	r3, sp, #30
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	4945      	ldr	r1, [pc, #276]	@ (800faac <_tzset_unlocked_r+0x324>)
 800f996:	ab0a      	add	r3, sp, #40	@ 0x28
 800f998:	aa07      	add	r2, sp, #28
 800f99a:	4628      	mov	r0, r5
 800f99c:	f7ff f882 	bl	800eaa4 <siscanf>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f300 80a2 	bgt.w	800faea <_tzset_unlocked_r+0x362>
 800f9a6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9ae:	4627      	mov	r7, r4
 800f9b0:	441d      	add	r5, r3
 800f9b2:	f04f 0b00 	mov.w	fp, #0
 800f9b6:	782b      	ldrb	r3, [r5, #0]
 800f9b8:	2b2c      	cmp	r3, #44	@ 0x2c
 800f9ba:	bf08      	it	eq
 800f9bc:	3501      	addeq	r5, #1
 800f9be:	f895 9000 	ldrb.w	r9, [r5]
 800f9c2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800f9c6:	f040 80a3 	bne.w	800fb10 <_tzset_unlocked_r+0x388>
 800f9ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9cc:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800f9d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f9d4:	aa09      	add	r2, sp, #36	@ 0x24
 800f9d6:	9200      	str	r2, [sp, #0]
 800f9d8:	4937      	ldr	r1, [pc, #220]	@ (800fab8 <_tzset_unlocked_r+0x330>)
 800f9da:	9303      	str	r3, [sp, #12]
 800f9dc:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f7ff f85f 	bl	800eaa4 <siscanf>
 800f9e6:	2803      	cmp	r0, #3
 800f9e8:	f47f aefc 	bne.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800f9ec:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800f9f0:	1e4b      	subs	r3, r1, #1
 800f9f2:	2b0b      	cmp	r3, #11
 800f9f4:	f63f aef6 	bhi.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800f9f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800f9fc:	1e53      	subs	r3, r2, #1
 800f9fe:	2b04      	cmp	r3, #4
 800fa00:	f63f aef0 	bhi.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800fa04:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800fa08:	2b06      	cmp	r3, #6
 800fa0a:	f63f aeeb 	bhi.w	800f7e4 <_tzset_unlocked_r+0x5c>
 800fa0e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800fa12:	f887 9008 	strb.w	r9, [r7, #8]
 800fa16:	617b      	str	r3, [r7, #20]
 800fa18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa1a:	eb05 0903 	add.w	r9, r5, r3
 800fa1e:	2500      	movs	r5, #0
 800fa20:	f04f 0302 	mov.w	r3, #2
 800fa24:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fa28:	f8ad 501e 	strh.w	r5, [sp, #30]
 800fa2c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800fa30:	950a      	str	r5, [sp, #40]	@ 0x28
 800fa32:	f899 3000 	ldrb.w	r3, [r9]
 800fa36:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa38:	f040 8096 	bne.w	800fb68 <_tzset_unlocked_r+0x3e0>
 800fa3c:	ab0a      	add	r3, sp, #40	@ 0x28
 800fa3e:	aa08      	add	r2, sp, #32
 800fa40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fa44:	f10d 021e 	add.w	r2, sp, #30
 800fa48:	9200      	str	r2, [sp, #0]
 800fa4a:	491c      	ldr	r1, [pc, #112]	@ (800fabc <_tzset_unlocked_r+0x334>)
 800fa4c:	9303      	str	r3, [sp, #12]
 800fa4e:	aa07      	add	r2, sp, #28
 800fa50:	4648      	mov	r0, r9
 800fa52:	f7ff f827 	bl	800eaa4 <siscanf>
 800fa56:	42a8      	cmp	r0, r5
 800fa58:	f300 8086 	bgt.w	800fb68 <_tzset_unlocked_r+0x3e0>
 800fa5c:	214a      	movs	r1, #74	@ 0x4a
 800fa5e:	2200      	movs	r2, #0
 800fa60:	2300      	movs	r3, #0
 800fa62:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800fa66:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fa6a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800fa6e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800fa72:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800fa76:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800fa7a:	7221      	strb	r1, [r4, #8]
 800fa7c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800fa7e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800fa82:	6525      	str	r5, [r4, #80]	@ 0x50
 800fa84:	e6ae      	b.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800fa86:	bf00      	nop
 800fa88:	08013e52 	.word	0x08013e52
 800fa8c:	20006f54 	.word	0x20006f54
 800fa90:	20006f70 	.word	0x20006f70
 800fa94:	08013e55 	.word	0x08013e55
 800fa98:	20006f74 	.word	0x20006f74
 800fa9c:	20000030 	.word	0x20000030
 800faa0:	080140b7 	.word	0x080140b7
 800faa4:	20006f64 	.word	0x20006f64
 800faa8:	08013e59 	.word	0x08013e59
 800faac:	08013e8e 	.word	0x08013e8e
 800fab0:	20006f58 	.word	0x20006f58
 800fab4:	08013e6c 	.word	0x08013e6c
 800fab8:	08013e7a 	.word	0x08013e7a
 800fabc:	08013e8d 	.word	0x08013e8d
 800fac0:	4a3e      	ldr	r2, [pc, #248]	@ (800fbbc <_tzset_unlocked_r+0x434>)
 800fac2:	493f      	ldr	r1, [pc, #252]	@ (800fbc0 <_tzset_unlocked_r+0x438>)
 800fac4:	ab0a      	add	r3, sp, #40	@ 0x28
 800fac6:	4648      	mov	r0, r9
 800fac8:	f7fe ffec 	bl	800eaa4 <siscanf>
 800facc:	2800      	cmp	r0, #0
 800face:	f77f af17 	ble.w	800f900 <_tzset_unlocked_r+0x178>
 800fad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fad4:	3b03      	subs	r3, #3
 800fad6:	2b07      	cmp	r3, #7
 800fad8:	f67f af42 	bls.w	800f960 <_tzset_unlocked_r+0x1d8>
 800fadc:	e682      	b.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800fade:	2b2b      	cmp	r3, #43	@ 0x2b
 800fae0:	bf08      	it	eq
 800fae2:	3501      	addeq	r5, #1
 800fae4:	f04f 0901 	mov.w	r9, #1
 800fae8:	e745      	b.n	800f976 <_tzset_unlocked_r+0x1ee>
 800faea:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800faee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800faf2:	213c      	movs	r1, #60	@ 0x3c
 800faf4:	fb01 3302 	mla	r3, r1, r2, r3
 800faf8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fafc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800fb00:	fb01 3302 	mla	r3, r1, r2, r3
 800fb04:	fb09 f303 	mul.w	r3, r9, r3
 800fb08:	e74f      	b.n	800f9aa <_tzset_unlocked_r+0x222>
 800fb0a:	f04f 0b01 	mov.w	fp, #1
 800fb0e:	e752      	b.n	800f9b6 <_tzset_unlocked_r+0x22e>
 800fb10:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800fb14:	bf06      	itte	eq
 800fb16:	3501      	addeq	r5, #1
 800fb18:	464b      	moveq	r3, r9
 800fb1a:	2344      	movne	r3, #68	@ 0x44
 800fb1c:	220a      	movs	r2, #10
 800fb1e:	a90b      	add	r1, sp, #44	@ 0x2c
 800fb20:	4628      	mov	r0, r5
 800fb22:	9305      	str	r3, [sp, #20]
 800fb24:	f002 f92e 	bl	8011d84 <strtoul>
 800fb28:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800fb32:	45a9      	cmp	r9, r5
 800fb34:	d114      	bne.n	800fb60 <_tzset_unlocked_r+0x3d8>
 800fb36:	234d      	movs	r3, #77	@ 0x4d
 800fb38:	f1bb 0f00 	cmp.w	fp, #0
 800fb3c:	d107      	bne.n	800fb4e <_tzset_unlocked_r+0x3c6>
 800fb3e:	7223      	strb	r3, [r4, #8]
 800fb40:	2103      	movs	r1, #3
 800fb42:	2302      	movs	r3, #2
 800fb44:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800fb48:	f8c4 b014 	str.w	fp, [r4, #20]
 800fb4c:	e767      	b.n	800fa1e <_tzset_unlocked_r+0x296>
 800fb4e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800fb52:	220b      	movs	r2, #11
 800fb54:	2301      	movs	r3, #1
 800fb56:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800fb5e:	e75e      	b.n	800fa1e <_tzset_unlocked_r+0x296>
 800fb60:	b280      	uxth	r0, r0
 800fb62:	723b      	strb	r3, [r7, #8]
 800fb64:	6178      	str	r0, [r7, #20]
 800fb66:	e75a      	b.n	800fa1e <_tzset_unlocked_r+0x296>
 800fb68:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fb6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fb70:	213c      	movs	r1, #60	@ 0x3c
 800fb72:	fb01 3302 	mla	r3, r1, r2, r3
 800fb76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fb7a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800fb7e:	fb01 3302 	mla	r3, r1, r2, r3
 800fb82:	61bb      	str	r3, [r7, #24]
 800fb84:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fb86:	3728      	adds	r7, #40	@ 0x28
 800fb88:	444d      	add	r5, r9
 800fb8a:	f1bb 0f00 	cmp.w	fp, #0
 800fb8e:	d0bc      	beq.n	800fb0a <_tzset_unlocked_r+0x382>
 800fb90:	9b04      	ldr	r3, [sp, #16]
 800fb92:	6523      	str	r3, [r4, #80]	@ 0x50
 800fb94:	4b0b      	ldr	r3, [pc, #44]	@ (800fbc4 <_tzset_unlocked_r+0x43c>)
 800fb96:	f8c8 3000 	str.w	r3, [r8]
 800fb9a:	6860      	ldr	r0, [r4, #4]
 800fb9c:	4b07      	ldr	r3, [pc, #28]	@ (800fbbc <_tzset_unlocked_r+0x434>)
 800fb9e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800fba0:	f8c8 3004 	str.w	r3, [r8, #4]
 800fba4:	f7ff fd2a 	bl	800f5fc <__tzcalc_limits>
 800fba8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fbaa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800fbac:	f8ca 2000 	str.w	r2, [sl]
 800fbb0:	1a9b      	subs	r3, r3, r2
 800fbb2:	4a05      	ldr	r2, [pc, #20]	@ (800fbc8 <_tzset_unlocked_r+0x440>)
 800fbb4:	bf18      	it	ne
 800fbb6:	2301      	movne	r3, #1
 800fbb8:	6013      	str	r3, [r2, #0]
 800fbba:	e613      	b.n	800f7e4 <_tzset_unlocked_r+0x5c>
 800fbbc:	20006f58 	.word	0x20006f58
 800fbc0:	08013e6c 	.word	0x08013e6c
 800fbc4:	20006f64 	.word	0x20006f64
 800fbc8:	20006f74 	.word	0x20006f74

0800fbcc <_localeconv_r>:
 800fbcc:	4800      	ldr	r0, [pc, #0]	@ (800fbd0 <_localeconv_r+0x4>)
 800fbce:	4770      	bx	lr
 800fbd0:	20000128 	.word	0x20000128

0800fbd4 <_close_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4d06      	ldr	r5, [pc, #24]	@ (800fbf0 <_close_r+0x1c>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	4604      	mov	r4, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	f7f5 fa30 	bl	8005044 <_close>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_close_r+0x1a>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_close_r+0x1a>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	20006f78 	.word	0x20006f78

0800fbf4 <_gettimeofday_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	@ (800fc14 <_gettimeofday_r+0x20>)
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	4611      	mov	r1, r2
 800fc00:	602b      	str	r3, [r5, #0]
 800fc02:	f7f5 fa53 	bl	80050ac <_gettimeofday>
 800fc06:	1c43      	adds	r3, r0, #1
 800fc08:	d102      	bne.n	800fc10 <_gettimeofday_r+0x1c>
 800fc0a:	682b      	ldr	r3, [r5, #0]
 800fc0c:	b103      	cbz	r3, 800fc10 <_gettimeofday_r+0x1c>
 800fc0e:	6023      	str	r3, [r4, #0]
 800fc10:	bd38      	pop	{r3, r4, r5, pc}
 800fc12:	bf00      	nop
 800fc14:	20006f78 	.word	0x20006f78

0800fc18 <_lseek_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d07      	ldr	r5, [pc, #28]	@ (800fc38 <_lseek_r+0x20>)
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	4608      	mov	r0, r1
 800fc20:	4611      	mov	r1, r2
 800fc22:	2200      	movs	r2, #0
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	f7f5 fa33 	bl	8005092 <_lseek>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_lseek_r+0x1e>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_lseek_r+0x1e>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	20006f78 	.word	0x20006f78

0800fc3c <_read_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d07      	ldr	r5, [pc, #28]	@ (800fc5c <_read_r+0x20>)
 800fc40:	4604      	mov	r4, r0
 800fc42:	4608      	mov	r0, r1
 800fc44:	4611      	mov	r1, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	602a      	str	r2, [r5, #0]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f7f5 f9c1 	bl	8004fd2 <_read>
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	d102      	bne.n	800fc5a <_read_r+0x1e>
 800fc54:	682b      	ldr	r3, [r5, #0]
 800fc56:	b103      	cbz	r3, 800fc5a <_read_r+0x1e>
 800fc58:	6023      	str	r3, [r4, #0]
 800fc5a:	bd38      	pop	{r3, r4, r5, pc}
 800fc5c:	20006f78 	.word	0x20006f78

0800fc60 <_write_r>:
 800fc60:	b538      	push	{r3, r4, r5, lr}
 800fc62:	4d07      	ldr	r5, [pc, #28]	@ (800fc80 <_write_r+0x20>)
 800fc64:	4604      	mov	r4, r0
 800fc66:	4608      	mov	r0, r1
 800fc68:	4611      	mov	r1, r2
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	602a      	str	r2, [r5, #0]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	f7f5 f9cc 	bl	800500c <_write>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	d102      	bne.n	800fc7e <_write_r+0x1e>
 800fc78:	682b      	ldr	r3, [r5, #0]
 800fc7a:	b103      	cbz	r3, 800fc7e <_write_r+0x1e>
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	20006f78 	.word	0x20006f78

0800fc84 <__errno>:
 800fc84:	4b01      	ldr	r3, [pc, #4]	@ (800fc8c <__errno+0x8>)
 800fc86:	6818      	ldr	r0, [r3, #0]
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	200001a4 	.word	0x200001a4

0800fc90 <__libc_init_array>:
 800fc90:	b570      	push	{r4, r5, r6, lr}
 800fc92:	4d0d      	ldr	r5, [pc, #52]	@ (800fcc8 <__libc_init_array+0x38>)
 800fc94:	4c0d      	ldr	r4, [pc, #52]	@ (800fccc <__libc_init_array+0x3c>)
 800fc96:	1b64      	subs	r4, r4, r5
 800fc98:	10a4      	asrs	r4, r4, #2
 800fc9a:	2600      	movs	r6, #0
 800fc9c:	42a6      	cmp	r6, r4
 800fc9e:	d109      	bne.n	800fcb4 <__libc_init_array+0x24>
 800fca0:	4d0b      	ldr	r5, [pc, #44]	@ (800fcd0 <__libc_init_array+0x40>)
 800fca2:	4c0c      	ldr	r4, [pc, #48]	@ (800fcd4 <__libc_init_array+0x44>)
 800fca4:	f003 f9ca 	bl	801303c <_init>
 800fca8:	1b64      	subs	r4, r4, r5
 800fcaa:	10a4      	asrs	r4, r4, #2
 800fcac:	2600      	movs	r6, #0
 800fcae:	42a6      	cmp	r6, r4
 800fcb0:	d105      	bne.n	800fcbe <__libc_init_array+0x2e>
 800fcb2:	bd70      	pop	{r4, r5, r6, pc}
 800fcb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcb8:	4798      	blx	r3
 800fcba:	3601      	adds	r6, #1
 800fcbc:	e7ee      	b.n	800fc9c <__libc_init_array+0xc>
 800fcbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcc2:	4798      	blx	r3
 800fcc4:	3601      	adds	r6, #1
 800fcc6:	e7f2      	b.n	800fcae <__libc_init_array+0x1e>
 800fcc8:	0801440c 	.word	0x0801440c
 800fccc:	0801440c 	.word	0x0801440c
 800fcd0:	0801440c 	.word	0x0801440c
 800fcd4:	08014410 	.word	0x08014410

0800fcd8 <__retarget_lock_init_recursive>:
 800fcd8:	4770      	bx	lr

0800fcda <__retarget_lock_acquire>:
 800fcda:	4770      	bx	lr

0800fcdc <__retarget_lock_acquire_recursive>:
 800fcdc:	4770      	bx	lr

0800fcde <__retarget_lock_release>:
 800fcde:	4770      	bx	lr

0800fce0 <__retarget_lock_release_recursive>:
 800fce0:	4770      	bx	lr

0800fce2 <strcpy>:
 800fce2:	4603      	mov	r3, r0
 800fce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fce8:	f803 2b01 	strb.w	r2, [r3], #1
 800fcec:	2a00      	cmp	r2, #0
 800fcee:	d1f9      	bne.n	800fce4 <strcpy+0x2>
 800fcf0:	4770      	bx	lr

0800fcf2 <memcpy>:
 800fcf2:	440a      	add	r2, r1
 800fcf4:	4291      	cmp	r1, r2
 800fcf6:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcfa:	d100      	bne.n	800fcfe <memcpy+0xc>
 800fcfc:	4770      	bx	lr
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd08:	4291      	cmp	r1, r2
 800fd0a:	d1f9      	bne.n	800fd00 <memcpy+0xe>
 800fd0c:	bd10      	pop	{r4, pc}
	...

0800fd10 <nan>:
 800fd10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fd18 <nan+0x8>
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	00000000 	.word	0x00000000
 800fd1c:	7ff80000 	.word	0x7ff80000

0800fd20 <__assert_func>:
 800fd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd22:	4614      	mov	r4, r2
 800fd24:	461a      	mov	r2, r3
 800fd26:	4b09      	ldr	r3, [pc, #36]	@ (800fd4c <__assert_func+0x2c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4605      	mov	r5, r0
 800fd2c:	68d8      	ldr	r0, [r3, #12]
 800fd2e:	b14c      	cbz	r4, 800fd44 <__assert_func+0x24>
 800fd30:	4b07      	ldr	r3, [pc, #28]	@ (800fd50 <__assert_func+0x30>)
 800fd32:	9100      	str	r1, [sp, #0]
 800fd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd38:	4906      	ldr	r1, [pc, #24]	@ (800fd54 <__assert_func+0x34>)
 800fd3a:	462b      	mov	r3, r5
 800fd3c:	f002 fe9c 	bl	8012a78 <fiprintf>
 800fd40:	f003 f8da 	bl	8012ef8 <abort>
 800fd44:	4b04      	ldr	r3, [pc, #16]	@ (800fd58 <__assert_func+0x38>)
 800fd46:	461c      	mov	r4, r3
 800fd48:	e7f3      	b.n	800fd32 <__assert_func+0x12>
 800fd4a:	bf00      	nop
 800fd4c:	200001a4 	.word	0x200001a4
 800fd50:	08013ea8 	.word	0x08013ea8
 800fd54:	08013eb5 	.word	0x08013eb5
 800fd58:	080140b7 	.word	0x080140b7

0800fd5c <div>:
 800fd5c:	b510      	push	{r4, lr}
 800fd5e:	fb91 f4f2 	sdiv	r4, r1, r2
 800fd62:	fb02 1114 	mls	r1, r2, r4, r1
 800fd66:	6004      	str	r4, [r0, #0]
 800fd68:	6041      	str	r1, [r0, #4]
 800fd6a:	bd10      	pop	{r4, pc}

0800fd6c <quorem>:
 800fd6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	6903      	ldr	r3, [r0, #16]
 800fd72:	690c      	ldr	r4, [r1, #16]
 800fd74:	42a3      	cmp	r3, r4
 800fd76:	4607      	mov	r7, r0
 800fd78:	db7e      	blt.n	800fe78 <quorem+0x10c>
 800fd7a:	3c01      	subs	r4, #1
 800fd7c:	f101 0814 	add.w	r8, r1, #20
 800fd80:	00a3      	lsls	r3, r4, #2
 800fd82:	f100 0514 	add.w	r5, r0, #20
 800fd86:	9300      	str	r3, [sp, #0]
 800fd88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd96:	3301      	adds	r3, #1
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800fda2:	d32e      	bcc.n	800fe02 <quorem+0x96>
 800fda4:	f04f 0a00 	mov.w	sl, #0
 800fda8:	46c4      	mov	ip, r8
 800fdaa:	46ae      	mov	lr, r5
 800fdac:	46d3      	mov	fp, sl
 800fdae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdb2:	b298      	uxth	r0, r3
 800fdb4:	fb06 a000 	mla	r0, r6, r0, sl
 800fdb8:	0c02      	lsrs	r2, r0, #16
 800fdba:	0c1b      	lsrs	r3, r3, #16
 800fdbc:	fb06 2303 	mla	r3, r6, r3, r2
 800fdc0:	f8de 2000 	ldr.w	r2, [lr]
 800fdc4:	b280      	uxth	r0, r0
 800fdc6:	b292      	uxth	r2, r2
 800fdc8:	1a12      	subs	r2, r2, r0
 800fdca:	445a      	add	r2, fp
 800fdcc:	f8de 0000 	ldr.w	r0, [lr]
 800fdd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fdda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fdde:	b292      	uxth	r2, r2
 800fde0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fde4:	45e1      	cmp	r9, ip
 800fde6:	f84e 2b04 	str.w	r2, [lr], #4
 800fdea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdee:	d2de      	bcs.n	800fdae <quorem+0x42>
 800fdf0:	9b00      	ldr	r3, [sp, #0]
 800fdf2:	58eb      	ldr	r3, [r5, r3]
 800fdf4:	b92b      	cbnz	r3, 800fe02 <quorem+0x96>
 800fdf6:	9b01      	ldr	r3, [sp, #4]
 800fdf8:	3b04      	subs	r3, #4
 800fdfa:	429d      	cmp	r5, r3
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	d32f      	bcc.n	800fe60 <quorem+0xf4>
 800fe00:	613c      	str	r4, [r7, #16]
 800fe02:	4638      	mov	r0, r7
 800fe04:	f001 fd60 	bl	80118c8 <__mcmp>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	db25      	blt.n	800fe58 <quorem+0xec>
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	2000      	movs	r0, #0
 800fe10:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe14:	f8d1 c000 	ldr.w	ip, [r1]
 800fe18:	fa1f fe82 	uxth.w	lr, r2
 800fe1c:	fa1f f38c 	uxth.w	r3, ip
 800fe20:	eba3 030e 	sub.w	r3, r3, lr
 800fe24:	4403      	add	r3, r0
 800fe26:	0c12      	lsrs	r2, r2, #16
 800fe28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe36:	45c1      	cmp	r9, r8
 800fe38:	f841 3b04 	str.w	r3, [r1], #4
 800fe3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe40:	d2e6      	bcs.n	800fe10 <quorem+0xa4>
 800fe42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe4a:	b922      	cbnz	r2, 800fe56 <quorem+0xea>
 800fe4c:	3b04      	subs	r3, #4
 800fe4e:	429d      	cmp	r5, r3
 800fe50:	461a      	mov	r2, r3
 800fe52:	d30b      	bcc.n	800fe6c <quorem+0x100>
 800fe54:	613c      	str	r4, [r7, #16]
 800fe56:	3601      	adds	r6, #1
 800fe58:	4630      	mov	r0, r6
 800fe5a:	b003      	add	sp, #12
 800fe5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe60:	6812      	ldr	r2, [r2, #0]
 800fe62:	3b04      	subs	r3, #4
 800fe64:	2a00      	cmp	r2, #0
 800fe66:	d1cb      	bne.n	800fe00 <quorem+0x94>
 800fe68:	3c01      	subs	r4, #1
 800fe6a:	e7c6      	b.n	800fdfa <quorem+0x8e>
 800fe6c:	6812      	ldr	r2, [r2, #0]
 800fe6e:	3b04      	subs	r3, #4
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	d1ef      	bne.n	800fe54 <quorem+0xe8>
 800fe74:	3c01      	subs	r4, #1
 800fe76:	e7ea      	b.n	800fe4e <quorem+0xe2>
 800fe78:	2000      	movs	r0, #0
 800fe7a:	e7ee      	b.n	800fe5a <quorem+0xee>
 800fe7c:	0000      	movs	r0, r0
	...

0800fe80 <_dtoa_r>:
 800fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe84:	69c7      	ldr	r7, [r0, #28]
 800fe86:	b097      	sub	sp, #92	@ 0x5c
 800fe88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fe8c:	ec55 4b10 	vmov	r4, r5, d0
 800fe90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fe92:	9107      	str	r1, [sp, #28]
 800fe94:	4681      	mov	r9, r0
 800fe96:	920c      	str	r2, [sp, #48]	@ 0x30
 800fe98:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe9a:	b97f      	cbnz	r7, 800febc <_dtoa_r+0x3c>
 800fe9c:	2010      	movs	r0, #16
 800fe9e:	f001 f987 	bl	80111b0 <malloc>
 800fea2:	4602      	mov	r2, r0
 800fea4:	f8c9 001c 	str.w	r0, [r9, #28]
 800fea8:	b920      	cbnz	r0, 800feb4 <_dtoa_r+0x34>
 800feaa:	4ba9      	ldr	r3, [pc, #676]	@ (8010150 <_dtoa_r+0x2d0>)
 800feac:	21ef      	movs	r1, #239	@ 0xef
 800feae:	48a9      	ldr	r0, [pc, #676]	@ (8010154 <_dtoa_r+0x2d4>)
 800feb0:	f7ff ff36 	bl	800fd20 <__assert_func>
 800feb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800feb8:	6007      	str	r7, [r0, #0]
 800feba:	60c7      	str	r7, [r0, #12]
 800febc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fec0:	6819      	ldr	r1, [r3, #0]
 800fec2:	b159      	cbz	r1, 800fedc <_dtoa_r+0x5c>
 800fec4:	685a      	ldr	r2, [r3, #4]
 800fec6:	604a      	str	r2, [r1, #4]
 800fec8:	2301      	movs	r3, #1
 800feca:	4093      	lsls	r3, r2
 800fecc:	608b      	str	r3, [r1, #8]
 800fece:	4648      	mov	r0, r9
 800fed0:	f001 fa7e 	bl	80113d0 <_Bfree>
 800fed4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fed8:	2200      	movs	r2, #0
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	1e2b      	subs	r3, r5, #0
 800fede:	bfb9      	ittee	lt
 800fee0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fee4:	9305      	strlt	r3, [sp, #20]
 800fee6:	2300      	movge	r3, #0
 800fee8:	6033      	strge	r3, [r6, #0]
 800feea:	9f05      	ldr	r7, [sp, #20]
 800feec:	4b9a      	ldr	r3, [pc, #616]	@ (8010158 <_dtoa_r+0x2d8>)
 800feee:	bfbc      	itt	lt
 800fef0:	2201      	movlt	r2, #1
 800fef2:	6032      	strlt	r2, [r6, #0]
 800fef4:	43bb      	bics	r3, r7
 800fef6:	d112      	bne.n	800ff1e <_dtoa_r+0x9e>
 800fef8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fefa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff04:	4323      	orrs	r3, r4
 800ff06:	f000 855a 	beq.w	80109be <_dtoa_r+0xb3e>
 800ff0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801016c <_dtoa_r+0x2ec>
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f000 855c 	beq.w	80109ce <_dtoa_r+0xb4e>
 800ff16:	f10a 0303 	add.w	r3, sl, #3
 800ff1a:	f000 bd56 	b.w	80109ca <_dtoa_r+0xb4a>
 800ff1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ff22:	2200      	movs	r2, #0
 800ff24:	ec51 0b17 	vmov	r0, r1, d7
 800ff28:	2300      	movs	r3, #0
 800ff2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ff2e:	f7f0 fde3 	bl	8000af8 <__aeabi_dcmpeq>
 800ff32:	4680      	mov	r8, r0
 800ff34:	b158      	cbz	r0, 800ff4e <_dtoa_r+0xce>
 800ff36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ff38:	2301      	movs	r3, #1
 800ff3a:	6013      	str	r3, [r2, #0]
 800ff3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff3e:	b113      	cbz	r3, 800ff46 <_dtoa_r+0xc6>
 800ff40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ff42:	4b86      	ldr	r3, [pc, #536]	@ (801015c <_dtoa_r+0x2dc>)
 800ff44:	6013      	str	r3, [r2, #0]
 800ff46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010170 <_dtoa_r+0x2f0>
 800ff4a:	f000 bd40 	b.w	80109ce <_dtoa_r+0xb4e>
 800ff4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ff52:	aa14      	add	r2, sp, #80	@ 0x50
 800ff54:	a915      	add	r1, sp, #84	@ 0x54
 800ff56:	4648      	mov	r0, r9
 800ff58:	f001 fdd6 	bl	8011b08 <__d2b>
 800ff5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ff60:	9002      	str	r0, [sp, #8]
 800ff62:	2e00      	cmp	r6, #0
 800ff64:	d078      	beq.n	8010058 <_dtoa_r+0x1d8>
 800ff66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ff6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ff74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff80:	4619      	mov	r1, r3
 800ff82:	2200      	movs	r2, #0
 800ff84:	4b76      	ldr	r3, [pc, #472]	@ (8010160 <_dtoa_r+0x2e0>)
 800ff86:	f7f0 f997 	bl	80002b8 <__aeabi_dsub>
 800ff8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010138 <_dtoa_r+0x2b8>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 fb4a 	bl	8000628 <__aeabi_dmul>
 800ff94:	a36a      	add	r3, pc, #424	@ (adr r3, 8010140 <_dtoa_r+0x2c0>)
 800ff96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9a:	f7f0 f98f 	bl	80002bc <__adddf3>
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	460d      	mov	r5, r1
 800ffa4:	f7f0 fad6 	bl	8000554 <__aeabi_i2d>
 800ffa8:	a367      	add	r3, pc, #412	@ (adr r3, 8010148 <_dtoa_r+0x2c8>)
 800ffaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffae:	f7f0 fb3b 	bl	8000628 <__aeabi_dmul>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	4629      	mov	r1, r5
 800ffba:	f7f0 f97f 	bl	80002bc <__adddf3>
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	460d      	mov	r5, r1
 800ffc2:	f7f0 fde1 	bl	8000b88 <__aeabi_d2iz>
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	4607      	mov	r7, r0
 800ffca:	2300      	movs	r3, #0
 800ffcc:	4620      	mov	r0, r4
 800ffce:	4629      	mov	r1, r5
 800ffd0:	f7f0 fd9c 	bl	8000b0c <__aeabi_dcmplt>
 800ffd4:	b140      	cbz	r0, 800ffe8 <_dtoa_r+0x168>
 800ffd6:	4638      	mov	r0, r7
 800ffd8:	f7f0 fabc 	bl	8000554 <__aeabi_i2d>
 800ffdc:	4622      	mov	r2, r4
 800ffde:	462b      	mov	r3, r5
 800ffe0:	f7f0 fd8a 	bl	8000af8 <__aeabi_dcmpeq>
 800ffe4:	b900      	cbnz	r0, 800ffe8 <_dtoa_r+0x168>
 800ffe6:	3f01      	subs	r7, #1
 800ffe8:	2f16      	cmp	r7, #22
 800ffea:	d852      	bhi.n	8010092 <_dtoa_r+0x212>
 800ffec:	4b5d      	ldr	r3, [pc, #372]	@ (8010164 <_dtoa_r+0x2e4>)
 800ffee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fffa:	f7f0 fd87 	bl	8000b0c <__aeabi_dcmplt>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d049      	beq.n	8010096 <_dtoa_r+0x216>
 8010002:	3f01      	subs	r7, #1
 8010004:	2300      	movs	r3, #0
 8010006:	9310      	str	r3, [sp, #64]	@ 0x40
 8010008:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801000a:	1b9b      	subs	r3, r3, r6
 801000c:	1e5a      	subs	r2, r3, #1
 801000e:	bf45      	ittet	mi
 8010010:	f1c3 0301 	rsbmi	r3, r3, #1
 8010014:	9300      	strmi	r3, [sp, #0]
 8010016:	2300      	movpl	r3, #0
 8010018:	2300      	movmi	r3, #0
 801001a:	9206      	str	r2, [sp, #24]
 801001c:	bf54      	ite	pl
 801001e:	9300      	strpl	r3, [sp, #0]
 8010020:	9306      	strmi	r3, [sp, #24]
 8010022:	2f00      	cmp	r7, #0
 8010024:	db39      	blt.n	801009a <_dtoa_r+0x21a>
 8010026:	9b06      	ldr	r3, [sp, #24]
 8010028:	970d      	str	r7, [sp, #52]	@ 0x34
 801002a:	443b      	add	r3, r7
 801002c:	9306      	str	r3, [sp, #24]
 801002e:	2300      	movs	r3, #0
 8010030:	9308      	str	r3, [sp, #32]
 8010032:	9b07      	ldr	r3, [sp, #28]
 8010034:	2b09      	cmp	r3, #9
 8010036:	d863      	bhi.n	8010100 <_dtoa_r+0x280>
 8010038:	2b05      	cmp	r3, #5
 801003a:	bfc4      	itt	gt
 801003c:	3b04      	subgt	r3, #4
 801003e:	9307      	strgt	r3, [sp, #28]
 8010040:	9b07      	ldr	r3, [sp, #28]
 8010042:	f1a3 0302 	sub.w	r3, r3, #2
 8010046:	bfcc      	ite	gt
 8010048:	2400      	movgt	r4, #0
 801004a:	2401      	movle	r4, #1
 801004c:	2b03      	cmp	r3, #3
 801004e:	d863      	bhi.n	8010118 <_dtoa_r+0x298>
 8010050:	e8df f003 	tbb	[pc, r3]
 8010054:	2b375452 	.word	0x2b375452
 8010058:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801005c:	441e      	add	r6, r3
 801005e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010062:	2b20      	cmp	r3, #32
 8010064:	bfc1      	itttt	gt
 8010066:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801006a:	409f      	lslgt	r7, r3
 801006c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010070:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010074:	bfd6      	itet	le
 8010076:	f1c3 0320 	rsble	r3, r3, #32
 801007a:	ea47 0003 	orrgt.w	r0, r7, r3
 801007e:	fa04 f003 	lslle.w	r0, r4, r3
 8010082:	f7f0 fa57 	bl	8000534 <__aeabi_ui2d>
 8010086:	2201      	movs	r2, #1
 8010088:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801008c:	3e01      	subs	r6, #1
 801008e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010090:	e776      	b.n	800ff80 <_dtoa_r+0x100>
 8010092:	2301      	movs	r3, #1
 8010094:	e7b7      	b.n	8010006 <_dtoa_r+0x186>
 8010096:	9010      	str	r0, [sp, #64]	@ 0x40
 8010098:	e7b6      	b.n	8010008 <_dtoa_r+0x188>
 801009a:	9b00      	ldr	r3, [sp, #0]
 801009c:	1bdb      	subs	r3, r3, r7
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	427b      	negs	r3, r7
 80100a2:	9308      	str	r3, [sp, #32]
 80100a4:	2300      	movs	r3, #0
 80100a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80100a8:	e7c3      	b.n	8010032 <_dtoa_r+0x1b2>
 80100aa:	2301      	movs	r3, #1
 80100ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80100ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100b0:	eb07 0b03 	add.w	fp, r7, r3
 80100b4:	f10b 0301 	add.w	r3, fp, #1
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	9303      	str	r3, [sp, #12]
 80100bc:	bfb8      	it	lt
 80100be:	2301      	movlt	r3, #1
 80100c0:	e006      	b.n	80100d0 <_dtoa_r+0x250>
 80100c2:	2301      	movs	r3, #1
 80100c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80100c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	dd28      	ble.n	801011e <_dtoa_r+0x29e>
 80100cc:	469b      	mov	fp, r3
 80100ce:	9303      	str	r3, [sp, #12]
 80100d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80100d4:	2100      	movs	r1, #0
 80100d6:	2204      	movs	r2, #4
 80100d8:	f102 0514 	add.w	r5, r2, #20
 80100dc:	429d      	cmp	r5, r3
 80100de:	d926      	bls.n	801012e <_dtoa_r+0x2ae>
 80100e0:	6041      	str	r1, [r0, #4]
 80100e2:	4648      	mov	r0, r9
 80100e4:	f001 f934 	bl	8011350 <_Balloc>
 80100e8:	4682      	mov	sl, r0
 80100ea:	2800      	cmp	r0, #0
 80100ec:	d142      	bne.n	8010174 <_dtoa_r+0x2f4>
 80100ee:	4b1e      	ldr	r3, [pc, #120]	@ (8010168 <_dtoa_r+0x2e8>)
 80100f0:	4602      	mov	r2, r0
 80100f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80100f6:	e6da      	b.n	800feae <_dtoa_r+0x2e>
 80100f8:	2300      	movs	r3, #0
 80100fa:	e7e3      	b.n	80100c4 <_dtoa_r+0x244>
 80100fc:	2300      	movs	r3, #0
 80100fe:	e7d5      	b.n	80100ac <_dtoa_r+0x22c>
 8010100:	2401      	movs	r4, #1
 8010102:	2300      	movs	r3, #0
 8010104:	9307      	str	r3, [sp, #28]
 8010106:	9409      	str	r4, [sp, #36]	@ 0x24
 8010108:	f04f 3bff 	mov.w	fp, #4294967295
 801010c:	2200      	movs	r2, #0
 801010e:	f8cd b00c 	str.w	fp, [sp, #12]
 8010112:	2312      	movs	r3, #18
 8010114:	920c      	str	r2, [sp, #48]	@ 0x30
 8010116:	e7db      	b.n	80100d0 <_dtoa_r+0x250>
 8010118:	2301      	movs	r3, #1
 801011a:	9309      	str	r3, [sp, #36]	@ 0x24
 801011c:	e7f4      	b.n	8010108 <_dtoa_r+0x288>
 801011e:	f04f 0b01 	mov.w	fp, #1
 8010122:	f8cd b00c 	str.w	fp, [sp, #12]
 8010126:	465b      	mov	r3, fp
 8010128:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801012c:	e7d0      	b.n	80100d0 <_dtoa_r+0x250>
 801012e:	3101      	adds	r1, #1
 8010130:	0052      	lsls	r2, r2, #1
 8010132:	e7d1      	b.n	80100d8 <_dtoa_r+0x258>
 8010134:	f3af 8000 	nop.w
 8010138:	636f4361 	.word	0x636f4361
 801013c:	3fd287a7 	.word	0x3fd287a7
 8010140:	8b60c8b3 	.word	0x8b60c8b3
 8010144:	3fc68a28 	.word	0x3fc68a28
 8010148:	509f79fb 	.word	0x509f79fb
 801014c:	3fd34413 	.word	0x3fd34413
 8010150:	08013d88 	.word	0x08013d88
 8010154:	08013ef1 	.word	0x08013ef1
 8010158:	7ff00000 	.word	0x7ff00000
 801015c:	0801403b 	.word	0x0801403b
 8010160:	3ff80000 	.word	0x3ff80000
 8010164:	08014300 	.word	0x08014300
 8010168:	08013f49 	.word	0x08013f49
 801016c:	08013eed 	.word	0x08013eed
 8010170:	0801403a 	.word	0x0801403a
 8010174:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010178:	6018      	str	r0, [r3, #0]
 801017a:	9b03      	ldr	r3, [sp, #12]
 801017c:	2b0e      	cmp	r3, #14
 801017e:	f200 80a1 	bhi.w	80102c4 <_dtoa_r+0x444>
 8010182:	2c00      	cmp	r4, #0
 8010184:	f000 809e 	beq.w	80102c4 <_dtoa_r+0x444>
 8010188:	2f00      	cmp	r7, #0
 801018a:	dd33      	ble.n	80101f4 <_dtoa_r+0x374>
 801018c:	4b9c      	ldr	r3, [pc, #624]	@ (8010400 <_dtoa_r+0x580>)
 801018e:	f007 020f 	and.w	r2, r7, #15
 8010192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010196:	ed93 7b00 	vldr	d7, [r3]
 801019a:	05f8      	lsls	r0, r7, #23
 801019c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80101a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101a4:	d516      	bpl.n	80101d4 <_dtoa_r+0x354>
 80101a6:	4b97      	ldr	r3, [pc, #604]	@ (8010404 <_dtoa_r+0x584>)
 80101a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80101ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101b0:	f7f0 fb64 	bl	800087c <__aeabi_ddiv>
 80101b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101b8:	f004 040f 	and.w	r4, r4, #15
 80101bc:	2603      	movs	r6, #3
 80101be:	4d91      	ldr	r5, [pc, #580]	@ (8010404 <_dtoa_r+0x584>)
 80101c0:	b954      	cbnz	r4, 80101d8 <_dtoa_r+0x358>
 80101c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80101c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101ca:	f7f0 fb57 	bl	800087c <__aeabi_ddiv>
 80101ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101d2:	e028      	b.n	8010226 <_dtoa_r+0x3a6>
 80101d4:	2602      	movs	r6, #2
 80101d6:	e7f2      	b.n	80101be <_dtoa_r+0x33e>
 80101d8:	07e1      	lsls	r1, r4, #31
 80101da:	d508      	bpl.n	80101ee <_dtoa_r+0x36e>
 80101dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80101e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101e4:	f7f0 fa20 	bl	8000628 <__aeabi_dmul>
 80101e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80101ec:	3601      	adds	r6, #1
 80101ee:	1064      	asrs	r4, r4, #1
 80101f0:	3508      	adds	r5, #8
 80101f2:	e7e5      	b.n	80101c0 <_dtoa_r+0x340>
 80101f4:	f000 80af 	beq.w	8010356 <_dtoa_r+0x4d6>
 80101f8:	427c      	negs	r4, r7
 80101fa:	4b81      	ldr	r3, [pc, #516]	@ (8010400 <_dtoa_r+0x580>)
 80101fc:	4d81      	ldr	r5, [pc, #516]	@ (8010404 <_dtoa_r+0x584>)
 80101fe:	f004 020f 	and.w	r2, r4, #15
 8010202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801020e:	f7f0 fa0b 	bl	8000628 <__aeabi_dmul>
 8010212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010216:	1124      	asrs	r4, r4, #4
 8010218:	2300      	movs	r3, #0
 801021a:	2602      	movs	r6, #2
 801021c:	2c00      	cmp	r4, #0
 801021e:	f040 808f 	bne.w	8010340 <_dtoa_r+0x4c0>
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1d3      	bne.n	80101ce <_dtoa_r+0x34e>
 8010226:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010228:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 8094 	beq.w	801035a <_dtoa_r+0x4da>
 8010232:	4b75      	ldr	r3, [pc, #468]	@ (8010408 <_dtoa_r+0x588>)
 8010234:	2200      	movs	r2, #0
 8010236:	4620      	mov	r0, r4
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 fc67 	bl	8000b0c <__aeabi_dcmplt>
 801023e:	2800      	cmp	r0, #0
 8010240:	f000 808b 	beq.w	801035a <_dtoa_r+0x4da>
 8010244:	9b03      	ldr	r3, [sp, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 8087 	beq.w	801035a <_dtoa_r+0x4da>
 801024c:	f1bb 0f00 	cmp.w	fp, #0
 8010250:	dd34      	ble.n	80102bc <_dtoa_r+0x43c>
 8010252:	4620      	mov	r0, r4
 8010254:	4b6d      	ldr	r3, [pc, #436]	@ (801040c <_dtoa_r+0x58c>)
 8010256:	2200      	movs	r2, #0
 8010258:	4629      	mov	r1, r5
 801025a:	f7f0 f9e5 	bl	8000628 <__aeabi_dmul>
 801025e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010262:	f107 38ff 	add.w	r8, r7, #4294967295
 8010266:	3601      	adds	r6, #1
 8010268:	465c      	mov	r4, fp
 801026a:	4630      	mov	r0, r6
 801026c:	f7f0 f972 	bl	8000554 <__aeabi_i2d>
 8010270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010274:	f7f0 f9d8 	bl	8000628 <__aeabi_dmul>
 8010278:	4b65      	ldr	r3, [pc, #404]	@ (8010410 <_dtoa_r+0x590>)
 801027a:	2200      	movs	r2, #0
 801027c:	f7f0 f81e 	bl	80002bc <__adddf3>
 8010280:	4605      	mov	r5, r0
 8010282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010286:	2c00      	cmp	r4, #0
 8010288:	d16a      	bne.n	8010360 <_dtoa_r+0x4e0>
 801028a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801028e:	4b61      	ldr	r3, [pc, #388]	@ (8010414 <_dtoa_r+0x594>)
 8010290:	2200      	movs	r2, #0
 8010292:	f7f0 f811 	bl	80002b8 <__aeabi_dsub>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801029e:	462a      	mov	r2, r5
 80102a0:	4633      	mov	r3, r6
 80102a2:	f7f0 fc51 	bl	8000b48 <__aeabi_dcmpgt>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	f040 8298 	bne.w	80107dc <_dtoa_r+0x95c>
 80102ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102b0:	462a      	mov	r2, r5
 80102b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80102b6:	f7f0 fc29 	bl	8000b0c <__aeabi_dcmplt>
 80102ba:	bb38      	cbnz	r0, 801030c <_dtoa_r+0x48c>
 80102bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80102c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80102c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f2c0 8157 	blt.w	801057a <_dtoa_r+0x6fa>
 80102cc:	2f0e      	cmp	r7, #14
 80102ce:	f300 8154 	bgt.w	801057a <_dtoa_r+0x6fa>
 80102d2:	4b4b      	ldr	r3, [pc, #300]	@ (8010400 <_dtoa_r+0x580>)
 80102d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102d8:	ed93 7b00 	vldr	d7, [r3]
 80102dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102de:	2b00      	cmp	r3, #0
 80102e0:	ed8d 7b00 	vstr	d7, [sp]
 80102e4:	f280 80e5 	bge.w	80104b2 <_dtoa_r+0x632>
 80102e8:	9b03      	ldr	r3, [sp, #12]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f300 80e1 	bgt.w	80104b2 <_dtoa_r+0x632>
 80102f0:	d10c      	bne.n	801030c <_dtoa_r+0x48c>
 80102f2:	4b48      	ldr	r3, [pc, #288]	@ (8010414 <_dtoa_r+0x594>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	ec51 0b17 	vmov	r0, r1, d7
 80102fa:	f7f0 f995 	bl	8000628 <__aeabi_dmul>
 80102fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010302:	f7f0 fc17 	bl	8000b34 <__aeabi_dcmpge>
 8010306:	2800      	cmp	r0, #0
 8010308:	f000 8266 	beq.w	80107d8 <_dtoa_r+0x958>
 801030c:	2400      	movs	r4, #0
 801030e:	4625      	mov	r5, r4
 8010310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010312:	4656      	mov	r6, sl
 8010314:	ea6f 0803 	mvn.w	r8, r3
 8010318:	2700      	movs	r7, #0
 801031a:	4621      	mov	r1, r4
 801031c:	4648      	mov	r0, r9
 801031e:	f001 f857 	bl	80113d0 <_Bfree>
 8010322:	2d00      	cmp	r5, #0
 8010324:	f000 80bd 	beq.w	80104a2 <_dtoa_r+0x622>
 8010328:	b12f      	cbz	r7, 8010336 <_dtoa_r+0x4b6>
 801032a:	42af      	cmp	r7, r5
 801032c:	d003      	beq.n	8010336 <_dtoa_r+0x4b6>
 801032e:	4639      	mov	r1, r7
 8010330:	4648      	mov	r0, r9
 8010332:	f001 f84d 	bl	80113d0 <_Bfree>
 8010336:	4629      	mov	r1, r5
 8010338:	4648      	mov	r0, r9
 801033a:	f001 f849 	bl	80113d0 <_Bfree>
 801033e:	e0b0      	b.n	80104a2 <_dtoa_r+0x622>
 8010340:	07e2      	lsls	r2, r4, #31
 8010342:	d505      	bpl.n	8010350 <_dtoa_r+0x4d0>
 8010344:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010348:	f7f0 f96e 	bl	8000628 <__aeabi_dmul>
 801034c:	3601      	adds	r6, #1
 801034e:	2301      	movs	r3, #1
 8010350:	1064      	asrs	r4, r4, #1
 8010352:	3508      	adds	r5, #8
 8010354:	e762      	b.n	801021c <_dtoa_r+0x39c>
 8010356:	2602      	movs	r6, #2
 8010358:	e765      	b.n	8010226 <_dtoa_r+0x3a6>
 801035a:	9c03      	ldr	r4, [sp, #12]
 801035c:	46b8      	mov	r8, r7
 801035e:	e784      	b.n	801026a <_dtoa_r+0x3ea>
 8010360:	4b27      	ldr	r3, [pc, #156]	@ (8010400 <_dtoa_r+0x580>)
 8010362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010364:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801036c:	4454      	add	r4, sl
 801036e:	2900      	cmp	r1, #0
 8010370:	d054      	beq.n	801041c <_dtoa_r+0x59c>
 8010372:	4929      	ldr	r1, [pc, #164]	@ (8010418 <_dtoa_r+0x598>)
 8010374:	2000      	movs	r0, #0
 8010376:	f7f0 fa81 	bl	800087c <__aeabi_ddiv>
 801037a:	4633      	mov	r3, r6
 801037c:	462a      	mov	r2, r5
 801037e:	f7ef ff9b 	bl	80002b8 <__aeabi_dsub>
 8010382:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010386:	4656      	mov	r6, sl
 8010388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801038c:	f7f0 fbfc 	bl	8000b88 <__aeabi_d2iz>
 8010390:	4605      	mov	r5, r0
 8010392:	f7f0 f8df 	bl	8000554 <__aeabi_i2d>
 8010396:	4602      	mov	r2, r0
 8010398:	460b      	mov	r3, r1
 801039a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801039e:	f7ef ff8b 	bl	80002b8 <__aeabi_dsub>
 80103a2:	3530      	adds	r5, #48	@ 0x30
 80103a4:	4602      	mov	r2, r0
 80103a6:	460b      	mov	r3, r1
 80103a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103ac:	f806 5b01 	strb.w	r5, [r6], #1
 80103b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80103b4:	f7f0 fbaa 	bl	8000b0c <__aeabi_dcmplt>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	d172      	bne.n	80104a2 <_dtoa_r+0x622>
 80103bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103c0:	4911      	ldr	r1, [pc, #68]	@ (8010408 <_dtoa_r+0x588>)
 80103c2:	2000      	movs	r0, #0
 80103c4:	f7ef ff78 	bl	80002b8 <__aeabi_dsub>
 80103c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80103cc:	f7f0 fb9e 	bl	8000b0c <__aeabi_dcmplt>
 80103d0:	2800      	cmp	r0, #0
 80103d2:	f040 80b4 	bne.w	801053e <_dtoa_r+0x6be>
 80103d6:	42a6      	cmp	r6, r4
 80103d8:	f43f af70 	beq.w	80102bc <_dtoa_r+0x43c>
 80103dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80103e0:	4b0a      	ldr	r3, [pc, #40]	@ (801040c <_dtoa_r+0x58c>)
 80103e2:	2200      	movs	r2, #0
 80103e4:	f7f0 f920 	bl	8000628 <__aeabi_dmul>
 80103e8:	4b08      	ldr	r3, [pc, #32]	@ (801040c <_dtoa_r+0x58c>)
 80103ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80103ee:	2200      	movs	r2, #0
 80103f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103f4:	f7f0 f918 	bl	8000628 <__aeabi_dmul>
 80103f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103fc:	e7c4      	b.n	8010388 <_dtoa_r+0x508>
 80103fe:	bf00      	nop
 8010400:	08014300 	.word	0x08014300
 8010404:	080142d8 	.word	0x080142d8
 8010408:	3ff00000 	.word	0x3ff00000
 801040c:	40240000 	.word	0x40240000
 8010410:	401c0000 	.word	0x401c0000
 8010414:	40140000 	.word	0x40140000
 8010418:	3fe00000 	.word	0x3fe00000
 801041c:	4631      	mov	r1, r6
 801041e:	4628      	mov	r0, r5
 8010420:	f7f0 f902 	bl	8000628 <__aeabi_dmul>
 8010424:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010428:	9413      	str	r4, [sp, #76]	@ 0x4c
 801042a:	4656      	mov	r6, sl
 801042c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010430:	f7f0 fbaa 	bl	8000b88 <__aeabi_d2iz>
 8010434:	4605      	mov	r5, r0
 8010436:	f7f0 f88d 	bl	8000554 <__aeabi_i2d>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010442:	f7ef ff39 	bl	80002b8 <__aeabi_dsub>
 8010446:	3530      	adds	r5, #48	@ 0x30
 8010448:	f806 5b01 	strb.w	r5, [r6], #1
 801044c:	4602      	mov	r2, r0
 801044e:	460b      	mov	r3, r1
 8010450:	42a6      	cmp	r6, r4
 8010452:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010456:	f04f 0200 	mov.w	r2, #0
 801045a:	d124      	bne.n	80104a6 <_dtoa_r+0x626>
 801045c:	4baf      	ldr	r3, [pc, #700]	@ (801071c <_dtoa_r+0x89c>)
 801045e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010462:	f7ef ff2b 	bl	80002bc <__adddf3>
 8010466:	4602      	mov	r2, r0
 8010468:	460b      	mov	r3, r1
 801046a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801046e:	f7f0 fb6b 	bl	8000b48 <__aeabi_dcmpgt>
 8010472:	2800      	cmp	r0, #0
 8010474:	d163      	bne.n	801053e <_dtoa_r+0x6be>
 8010476:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801047a:	49a8      	ldr	r1, [pc, #672]	@ (801071c <_dtoa_r+0x89c>)
 801047c:	2000      	movs	r0, #0
 801047e:	f7ef ff1b 	bl	80002b8 <__aeabi_dsub>
 8010482:	4602      	mov	r2, r0
 8010484:	460b      	mov	r3, r1
 8010486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801048a:	f7f0 fb3f 	bl	8000b0c <__aeabi_dcmplt>
 801048e:	2800      	cmp	r0, #0
 8010490:	f43f af14 	beq.w	80102bc <_dtoa_r+0x43c>
 8010494:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010496:	1e73      	subs	r3, r6, #1
 8010498:	9313      	str	r3, [sp, #76]	@ 0x4c
 801049a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801049e:	2b30      	cmp	r3, #48	@ 0x30
 80104a0:	d0f8      	beq.n	8010494 <_dtoa_r+0x614>
 80104a2:	4647      	mov	r7, r8
 80104a4:	e03b      	b.n	801051e <_dtoa_r+0x69e>
 80104a6:	4b9e      	ldr	r3, [pc, #632]	@ (8010720 <_dtoa_r+0x8a0>)
 80104a8:	f7f0 f8be 	bl	8000628 <__aeabi_dmul>
 80104ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104b0:	e7bc      	b.n	801042c <_dtoa_r+0x5ac>
 80104b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80104b6:	4656      	mov	r6, sl
 80104b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104bc:	4620      	mov	r0, r4
 80104be:	4629      	mov	r1, r5
 80104c0:	f7f0 f9dc 	bl	800087c <__aeabi_ddiv>
 80104c4:	f7f0 fb60 	bl	8000b88 <__aeabi_d2iz>
 80104c8:	4680      	mov	r8, r0
 80104ca:	f7f0 f843 	bl	8000554 <__aeabi_i2d>
 80104ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104d2:	f7f0 f8a9 	bl	8000628 <__aeabi_dmul>
 80104d6:	4602      	mov	r2, r0
 80104d8:	460b      	mov	r3, r1
 80104da:	4620      	mov	r0, r4
 80104dc:	4629      	mov	r1, r5
 80104de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80104e2:	f7ef fee9 	bl	80002b8 <__aeabi_dsub>
 80104e6:	f806 4b01 	strb.w	r4, [r6], #1
 80104ea:	9d03      	ldr	r5, [sp, #12]
 80104ec:	eba6 040a 	sub.w	r4, r6, sl
 80104f0:	42a5      	cmp	r5, r4
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	d133      	bne.n	8010560 <_dtoa_r+0x6e0>
 80104f8:	f7ef fee0 	bl	80002bc <__adddf3>
 80104fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010500:	4604      	mov	r4, r0
 8010502:	460d      	mov	r5, r1
 8010504:	f7f0 fb20 	bl	8000b48 <__aeabi_dcmpgt>
 8010508:	b9c0      	cbnz	r0, 801053c <_dtoa_r+0x6bc>
 801050a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	f7f0 faf1 	bl	8000af8 <__aeabi_dcmpeq>
 8010516:	b110      	cbz	r0, 801051e <_dtoa_r+0x69e>
 8010518:	f018 0f01 	tst.w	r8, #1
 801051c:	d10e      	bne.n	801053c <_dtoa_r+0x6bc>
 801051e:	9902      	ldr	r1, [sp, #8]
 8010520:	4648      	mov	r0, r9
 8010522:	f000 ff55 	bl	80113d0 <_Bfree>
 8010526:	2300      	movs	r3, #0
 8010528:	7033      	strb	r3, [r6, #0]
 801052a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801052c:	3701      	adds	r7, #1
 801052e:	601f      	str	r7, [r3, #0]
 8010530:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010532:	2b00      	cmp	r3, #0
 8010534:	f000 824b 	beq.w	80109ce <_dtoa_r+0xb4e>
 8010538:	601e      	str	r6, [r3, #0]
 801053a:	e248      	b.n	80109ce <_dtoa_r+0xb4e>
 801053c:	46b8      	mov	r8, r7
 801053e:	4633      	mov	r3, r6
 8010540:	461e      	mov	r6, r3
 8010542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010546:	2a39      	cmp	r2, #57	@ 0x39
 8010548:	d106      	bne.n	8010558 <_dtoa_r+0x6d8>
 801054a:	459a      	cmp	sl, r3
 801054c:	d1f8      	bne.n	8010540 <_dtoa_r+0x6c0>
 801054e:	2230      	movs	r2, #48	@ 0x30
 8010550:	f108 0801 	add.w	r8, r8, #1
 8010554:	f88a 2000 	strb.w	r2, [sl]
 8010558:	781a      	ldrb	r2, [r3, #0]
 801055a:	3201      	adds	r2, #1
 801055c:	701a      	strb	r2, [r3, #0]
 801055e:	e7a0      	b.n	80104a2 <_dtoa_r+0x622>
 8010560:	4b6f      	ldr	r3, [pc, #444]	@ (8010720 <_dtoa_r+0x8a0>)
 8010562:	2200      	movs	r2, #0
 8010564:	f7f0 f860 	bl	8000628 <__aeabi_dmul>
 8010568:	2200      	movs	r2, #0
 801056a:	2300      	movs	r3, #0
 801056c:	4604      	mov	r4, r0
 801056e:	460d      	mov	r5, r1
 8010570:	f7f0 fac2 	bl	8000af8 <__aeabi_dcmpeq>
 8010574:	2800      	cmp	r0, #0
 8010576:	d09f      	beq.n	80104b8 <_dtoa_r+0x638>
 8010578:	e7d1      	b.n	801051e <_dtoa_r+0x69e>
 801057a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801057c:	2a00      	cmp	r2, #0
 801057e:	f000 80ea 	beq.w	8010756 <_dtoa_r+0x8d6>
 8010582:	9a07      	ldr	r2, [sp, #28]
 8010584:	2a01      	cmp	r2, #1
 8010586:	f300 80cd 	bgt.w	8010724 <_dtoa_r+0x8a4>
 801058a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801058c:	2a00      	cmp	r2, #0
 801058e:	f000 80c1 	beq.w	8010714 <_dtoa_r+0x894>
 8010592:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010596:	9c08      	ldr	r4, [sp, #32]
 8010598:	9e00      	ldr	r6, [sp, #0]
 801059a:	9a00      	ldr	r2, [sp, #0]
 801059c:	441a      	add	r2, r3
 801059e:	9200      	str	r2, [sp, #0]
 80105a0:	9a06      	ldr	r2, [sp, #24]
 80105a2:	2101      	movs	r1, #1
 80105a4:	441a      	add	r2, r3
 80105a6:	4648      	mov	r0, r9
 80105a8:	9206      	str	r2, [sp, #24]
 80105aa:	f001 f80f 	bl	80115cc <__i2b>
 80105ae:	4605      	mov	r5, r0
 80105b0:	b166      	cbz	r6, 80105cc <_dtoa_r+0x74c>
 80105b2:	9b06      	ldr	r3, [sp, #24]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	dd09      	ble.n	80105cc <_dtoa_r+0x74c>
 80105b8:	42b3      	cmp	r3, r6
 80105ba:	9a00      	ldr	r2, [sp, #0]
 80105bc:	bfa8      	it	ge
 80105be:	4633      	movge	r3, r6
 80105c0:	1ad2      	subs	r2, r2, r3
 80105c2:	9200      	str	r2, [sp, #0]
 80105c4:	9a06      	ldr	r2, [sp, #24]
 80105c6:	1af6      	subs	r6, r6, r3
 80105c8:	1ad3      	subs	r3, r2, r3
 80105ca:	9306      	str	r3, [sp, #24]
 80105cc:	9b08      	ldr	r3, [sp, #32]
 80105ce:	b30b      	cbz	r3, 8010614 <_dtoa_r+0x794>
 80105d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f000 80c6 	beq.w	8010764 <_dtoa_r+0x8e4>
 80105d8:	2c00      	cmp	r4, #0
 80105da:	f000 80c0 	beq.w	801075e <_dtoa_r+0x8de>
 80105de:	4629      	mov	r1, r5
 80105e0:	4622      	mov	r2, r4
 80105e2:	4648      	mov	r0, r9
 80105e4:	f001 f8aa 	bl	801173c <__pow5mult>
 80105e8:	9a02      	ldr	r2, [sp, #8]
 80105ea:	4601      	mov	r1, r0
 80105ec:	4605      	mov	r5, r0
 80105ee:	4648      	mov	r0, r9
 80105f0:	f001 f802 	bl	80115f8 <__multiply>
 80105f4:	9902      	ldr	r1, [sp, #8]
 80105f6:	4680      	mov	r8, r0
 80105f8:	4648      	mov	r0, r9
 80105fa:	f000 fee9 	bl	80113d0 <_Bfree>
 80105fe:	9b08      	ldr	r3, [sp, #32]
 8010600:	1b1b      	subs	r3, r3, r4
 8010602:	9308      	str	r3, [sp, #32]
 8010604:	f000 80b1 	beq.w	801076a <_dtoa_r+0x8ea>
 8010608:	9a08      	ldr	r2, [sp, #32]
 801060a:	4641      	mov	r1, r8
 801060c:	4648      	mov	r0, r9
 801060e:	f001 f895 	bl	801173c <__pow5mult>
 8010612:	9002      	str	r0, [sp, #8]
 8010614:	2101      	movs	r1, #1
 8010616:	4648      	mov	r0, r9
 8010618:	f000 ffd8 	bl	80115cc <__i2b>
 801061c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801061e:	4604      	mov	r4, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	f000 81d8 	beq.w	80109d6 <_dtoa_r+0xb56>
 8010626:	461a      	mov	r2, r3
 8010628:	4601      	mov	r1, r0
 801062a:	4648      	mov	r0, r9
 801062c:	f001 f886 	bl	801173c <__pow5mult>
 8010630:	9b07      	ldr	r3, [sp, #28]
 8010632:	2b01      	cmp	r3, #1
 8010634:	4604      	mov	r4, r0
 8010636:	f300 809f 	bgt.w	8010778 <_dtoa_r+0x8f8>
 801063a:	9b04      	ldr	r3, [sp, #16]
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 8097 	bne.w	8010770 <_dtoa_r+0x8f0>
 8010642:	9b05      	ldr	r3, [sp, #20]
 8010644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010648:	2b00      	cmp	r3, #0
 801064a:	f040 8093 	bne.w	8010774 <_dtoa_r+0x8f4>
 801064e:	9b05      	ldr	r3, [sp, #20]
 8010650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010654:	0d1b      	lsrs	r3, r3, #20
 8010656:	051b      	lsls	r3, r3, #20
 8010658:	b133      	cbz	r3, 8010668 <_dtoa_r+0x7e8>
 801065a:	9b00      	ldr	r3, [sp, #0]
 801065c:	3301      	adds	r3, #1
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	9b06      	ldr	r3, [sp, #24]
 8010662:	3301      	adds	r3, #1
 8010664:	9306      	str	r3, [sp, #24]
 8010666:	2301      	movs	r3, #1
 8010668:	9308      	str	r3, [sp, #32]
 801066a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801066c:	2b00      	cmp	r3, #0
 801066e:	f000 81b8 	beq.w	80109e2 <_dtoa_r+0xb62>
 8010672:	6923      	ldr	r3, [r4, #16]
 8010674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010678:	6918      	ldr	r0, [r3, #16]
 801067a:	f000 ff5b 	bl	8011534 <__hi0bits>
 801067e:	f1c0 0020 	rsb	r0, r0, #32
 8010682:	9b06      	ldr	r3, [sp, #24]
 8010684:	4418      	add	r0, r3
 8010686:	f010 001f 	ands.w	r0, r0, #31
 801068a:	f000 8082 	beq.w	8010792 <_dtoa_r+0x912>
 801068e:	f1c0 0320 	rsb	r3, r0, #32
 8010692:	2b04      	cmp	r3, #4
 8010694:	dd73      	ble.n	801077e <_dtoa_r+0x8fe>
 8010696:	9b00      	ldr	r3, [sp, #0]
 8010698:	f1c0 001c 	rsb	r0, r0, #28
 801069c:	4403      	add	r3, r0
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	9b06      	ldr	r3, [sp, #24]
 80106a2:	4403      	add	r3, r0
 80106a4:	4406      	add	r6, r0
 80106a6:	9306      	str	r3, [sp, #24]
 80106a8:	9b00      	ldr	r3, [sp, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd05      	ble.n	80106ba <_dtoa_r+0x83a>
 80106ae:	9902      	ldr	r1, [sp, #8]
 80106b0:	461a      	mov	r2, r3
 80106b2:	4648      	mov	r0, r9
 80106b4:	f001 f89c 	bl	80117f0 <__lshift>
 80106b8:	9002      	str	r0, [sp, #8]
 80106ba:	9b06      	ldr	r3, [sp, #24]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dd05      	ble.n	80106cc <_dtoa_r+0x84c>
 80106c0:	4621      	mov	r1, r4
 80106c2:	461a      	mov	r2, r3
 80106c4:	4648      	mov	r0, r9
 80106c6:	f001 f893 	bl	80117f0 <__lshift>
 80106ca:	4604      	mov	r4, r0
 80106cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d061      	beq.n	8010796 <_dtoa_r+0x916>
 80106d2:	9802      	ldr	r0, [sp, #8]
 80106d4:	4621      	mov	r1, r4
 80106d6:	f001 f8f7 	bl	80118c8 <__mcmp>
 80106da:	2800      	cmp	r0, #0
 80106dc:	da5b      	bge.n	8010796 <_dtoa_r+0x916>
 80106de:	2300      	movs	r3, #0
 80106e0:	9902      	ldr	r1, [sp, #8]
 80106e2:	220a      	movs	r2, #10
 80106e4:	4648      	mov	r0, r9
 80106e6:	f000 fe95 	bl	8011414 <__multadd>
 80106ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ec:	9002      	str	r0, [sp, #8]
 80106ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 8177 	beq.w	80109e6 <_dtoa_r+0xb66>
 80106f8:	4629      	mov	r1, r5
 80106fa:	2300      	movs	r3, #0
 80106fc:	220a      	movs	r2, #10
 80106fe:	4648      	mov	r0, r9
 8010700:	f000 fe88 	bl	8011414 <__multadd>
 8010704:	f1bb 0f00 	cmp.w	fp, #0
 8010708:	4605      	mov	r5, r0
 801070a:	dc6f      	bgt.n	80107ec <_dtoa_r+0x96c>
 801070c:	9b07      	ldr	r3, [sp, #28]
 801070e:	2b02      	cmp	r3, #2
 8010710:	dc49      	bgt.n	80107a6 <_dtoa_r+0x926>
 8010712:	e06b      	b.n	80107ec <_dtoa_r+0x96c>
 8010714:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010716:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801071a:	e73c      	b.n	8010596 <_dtoa_r+0x716>
 801071c:	3fe00000 	.word	0x3fe00000
 8010720:	40240000 	.word	0x40240000
 8010724:	9b03      	ldr	r3, [sp, #12]
 8010726:	1e5c      	subs	r4, r3, #1
 8010728:	9b08      	ldr	r3, [sp, #32]
 801072a:	42a3      	cmp	r3, r4
 801072c:	db09      	blt.n	8010742 <_dtoa_r+0x8c2>
 801072e:	1b1c      	subs	r4, r3, r4
 8010730:	9b03      	ldr	r3, [sp, #12]
 8010732:	2b00      	cmp	r3, #0
 8010734:	f6bf af30 	bge.w	8010598 <_dtoa_r+0x718>
 8010738:	9b00      	ldr	r3, [sp, #0]
 801073a:	9a03      	ldr	r2, [sp, #12]
 801073c:	1a9e      	subs	r6, r3, r2
 801073e:	2300      	movs	r3, #0
 8010740:	e72b      	b.n	801059a <_dtoa_r+0x71a>
 8010742:	9b08      	ldr	r3, [sp, #32]
 8010744:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010746:	9408      	str	r4, [sp, #32]
 8010748:	1ae3      	subs	r3, r4, r3
 801074a:	441a      	add	r2, r3
 801074c:	9e00      	ldr	r6, [sp, #0]
 801074e:	9b03      	ldr	r3, [sp, #12]
 8010750:	920d      	str	r2, [sp, #52]	@ 0x34
 8010752:	2400      	movs	r4, #0
 8010754:	e721      	b.n	801059a <_dtoa_r+0x71a>
 8010756:	9c08      	ldr	r4, [sp, #32]
 8010758:	9e00      	ldr	r6, [sp, #0]
 801075a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801075c:	e728      	b.n	80105b0 <_dtoa_r+0x730>
 801075e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010762:	e751      	b.n	8010608 <_dtoa_r+0x788>
 8010764:	9a08      	ldr	r2, [sp, #32]
 8010766:	9902      	ldr	r1, [sp, #8]
 8010768:	e750      	b.n	801060c <_dtoa_r+0x78c>
 801076a:	f8cd 8008 	str.w	r8, [sp, #8]
 801076e:	e751      	b.n	8010614 <_dtoa_r+0x794>
 8010770:	2300      	movs	r3, #0
 8010772:	e779      	b.n	8010668 <_dtoa_r+0x7e8>
 8010774:	9b04      	ldr	r3, [sp, #16]
 8010776:	e777      	b.n	8010668 <_dtoa_r+0x7e8>
 8010778:	2300      	movs	r3, #0
 801077a:	9308      	str	r3, [sp, #32]
 801077c:	e779      	b.n	8010672 <_dtoa_r+0x7f2>
 801077e:	d093      	beq.n	80106a8 <_dtoa_r+0x828>
 8010780:	9a00      	ldr	r2, [sp, #0]
 8010782:	331c      	adds	r3, #28
 8010784:	441a      	add	r2, r3
 8010786:	9200      	str	r2, [sp, #0]
 8010788:	9a06      	ldr	r2, [sp, #24]
 801078a:	441a      	add	r2, r3
 801078c:	441e      	add	r6, r3
 801078e:	9206      	str	r2, [sp, #24]
 8010790:	e78a      	b.n	80106a8 <_dtoa_r+0x828>
 8010792:	4603      	mov	r3, r0
 8010794:	e7f4      	b.n	8010780 <_dtoa_r+0x900>
 8010796:	9b03      	ldr	r3, [sp, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	46b8      	mov	r8, r7
 801079c:	dc20      	bgt.n	80107e0 <_dtoa_r+0x960>
 801079e:	469b      	mov	fp, r3
 80107a0:	9b07      	ldr	r3, [sp, #28]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	dd1e      	ble.n	80107e4 <_dtoa_r+0x964>
 80107a6:	f1bb 0f00 	cmp.w	fp, #0
 80107aa:	f47f adb1 	bne.w	8010310 <_dtoa_r+0x490>
 80107ae:	4621      	mov	r1, r4
 80107b0:	465b      	mov	r3, fp
 80107b2:	2205      	movs	r2, #5
 80107b4:	4648      	mov	r0, r9
 80107b6:	f000 fe2d 	bl	8011414 <__multadd>
 80107ba:	4601      	mov	r1, r0
 80107bc:	4604      	mov	r4, r0
 80107be:	9802      	ldr	r0, [sp, #8]
 80107c0:	f001 f882 	bl	80118c8 <__mcmp>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	f77f ada3 	ble.w	8010310 <_dtoa_r+0x490>
 80107ca:	4656      	mov	r6, sl
 80107cc:	2331      	movs	r3, #49	@ 0x31
 80107ce:	f806 3b01 	strb.w	r3, [r6], #1
 80107d2:	f108 0801 	add.w	r8, r8, #1
 80107d6:	e59f      	b.n	8010318 <_dtoa_r+0x498>
 80107d8:	9c03      	ldr	r4, [sp, #12]
 80107da:	46b8      	mov	r8, r7
 80107dc:	4625      	mov	r5, r4
 80107de:	e7f4      	b.n	80107ca <_dtoa_r+0x94a>
 80107e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80107e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f000 8101 	beq.w	80109ee <_dtoa_r+0xb6e>
 80107ec:	2e00      	cmp	r6, #0
 80107ee:	dd05      	ble.n	80107fc <_dtoa_r+0x97c>
 80107f0:	4629      	mov	r1, r5
 80107f2:	4632      	mov	r2, r6
 80107f4:	4648      	mov	r0, r9
 80107f6:	f000 fffb 	bl	80117f0 <__lshift>
 80107fa:	4605      	mov	r5, r0
 80107fc:	9b08      	ldr	r3, [sp, #32]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d05c      	beq.n	80108bc <_dtoa_r+0xa3c>
 8010802:	6869      	ldr	r1, [r5, #4]
 8010804:	4648      	mov	r0, r9
 8010806:	f000 fda3 	bl	8011350 <_Balloc>
 801080a:	4606      	mov	r6, r0
 801080c:	b928      	cbnz	r0, 801081a <_dtoa_r+0x99a>
 801080e:	4b82      	ldr	r3, [pc, #520]	@ (8010a18 <_dtoa_r+0xb98>)
 8010810:	4602      	mov	r2, r0
 8010812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010816:	f7ff bb4a 	b.w	800feae <_dtoa_r+0x2e>
 801081a:	692a      	ldr	r2, [r5, #16]
 801081c:	3202      	adds	r2, #2
 801081e:	0092      	lsls	r2, r2, #2
 8010820:	f105 010c 	add.w	r1, r5, #12
 8010824:	300c      	adds	r0, #12
 8010826:	f7ff fa64 	bl	800fcf2 <memcpy>
 801082a:	2201      	movs	r2, #1
 801082c:	4631      	mov	r1, r6
 801082e:	4648      	mov	r0, r9
 8010830:	f000 ffde 	bl	80117f0 <__lshift>
 8010834:	f10a 0301 	add.w	r3, sl, #1
 8010838:	9300      	str	r3, [sp, #0]
 801083a:	eb0a 030b 	add.w	r3, sl, fp
 801083e:	9308      	str	r3, [sp, #32]
 8010840:	9b04      	ldr	r3, [sp, #16]
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	462f      	mov	r7, r5
 8010848:	9306      	str	r3, [sp, #24]
 801084a:	4605      	mov	r5, r0
 801084c:	9b00      	ldr	r3, [sp, #0]
 801084e:	9802      	ldr	r0, [sp, #8]
 8010850:	4621      	mov	r1, r4
 8010852:	f103 3bff 	add.w	fp, r3, #4294967295
 8010856:	f7ff fa89 	bl	800fd6c <quorem>
 801085a:	4603      	mov	r3, r0
 801085c:	3330      	adds	r3, #48	@ 0x30
 801085e:	9003      	str	r0, [sp, #12]
 8010860:	4639      	mov	r1, r7
 8010862:	9802      	ldr	r0, [sp, #8]
 8010864:	9309      	str	r3, [sp, #36]	@ 0x24
 8010866:	f001 f82f 	bl	80118c8 <__mcmp>
 801086a:	462a      	mov	r2, r5
 801086c:	9004      	str	r0, [sp, #16]
 801086e:	4621      	mov	r1, r4
 8010870:	4648      	mov	r0, r9
 8010872:	f001 f845 	bl	8011900 <__mdiff>
 8010876:	68c2      	ldr	r2, [r0, #12]
 8010878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801087a:	4606      	mov	r6, r0
 801087c:	bb02      	cbnz	r2, 80108c0 <_dtoa_r+0xa40>
 801087e:	4601      	mov	r1, r0
 8010880:	9802      	ldr	r0, [sp, #8]
 8010882:	f001 f821 	bl	80118c8 <__mcmp>
 8010886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010888:	4602      	mov	r2, r0
 801088a:	4631      	mov	r1, r6
 801088c:	4648      	mov	r0, r9
 801088e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010890:	9309      	str	r3, [sp, #36]	@ 0x24
 8010892:	f000 fd9d 	bl	80113d0 <_Bfree>
 8010896:	9b07      	ldr	r3, [sp, #28]
 8010898:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801089a:	9e00      	ldr	r6, [sp, #0]
 801089c:	ea42 0103 	orr.w	r1, r2, r3
 80108a0:	9b06      	ldr	r3, [sp, #24]
 80108a2:	4319      	orrs	r1, r3
 80108a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a6:	d10d      	bne.n	80108c4 <_dtoa_r+0xa44>
 80108a8:	2b39      	cmp	r3, #57	@ 0x39
 80108aa:	d027      	beq.n	80108fc <_dtoa_r+0xa7c>
 80108ac:	9a04      	ldr	r2, [sp, #16]
 80108ae:	2a00      	cmp	r2, #0
 80108b0:	dd01      	ble.n	80108b6 <_dtoa_r+0xa36>
 80108b2:	9b03      	ldr	r3, [sp, #12]
 80108b4:	3331      	adds	r3, #49	@ 0x31
 80108b6:	f88b 3000 	strb.w	r3, [fp]
 80108ba:	e52e      	b.n	801031a <_dtoa_r+0x49a>
 80108bc:	4628      	mov	r0, r5
 80108be:	e7b9      	b.n	8010834 <_dtoa_r+0x9b4>
 80108c0:	2201      	movs	r2, #1
 80108c2:	e7e2      	b.n	801088a <_dtoa_r+0xa0a>
 80108c4:	9904      	ldr	r1, [sp, #16]
 80108c6:	2900      	cmp	r1, #0
 80108c8:	db04      	blt.n	80108d4 <_dtoa_r+0xa54>
 80108ca:	9807      	ldr	r0, [sp, #28]
 80108cc:	4301      	orrs	r1, r0
 80108ce:	9806      	ldr	r0, [sp, #24]
 80108d0:	4301      	orrs	r1, r0
 80108d2:	d120      	bne.n	8010916 <_dtoa_r+0xa96>
 80108d4:	2a00      	cmp	r2, #0
 80108d6:	ddee      	ble.n	80108b6 <_dtoa_r+0xa36>
 80108d8:	9902      	ldr	r1, [sp, #8]
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	2201      	movs	r2, #1
 80108de:	4648      	mov	r0, r9
 80108e0:	f000 ff86 	bl	80117f0 <__lshift>
 80108e4:	4621      	mov	r1, r4
 80108e6:	9002      	str	r0, [sp, #8]
 80108e8:	f000 ffee 	bl	80118c8 <__mcmp>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	9b00      	ldr	r3, [sp, #0]
 80108f0:	dc02      	bgt.n	80108f8 <_dtoa_r+0xa78>
 80108f2:	d1e0      	bne.n	80108b6 <_dtoa_r+0xa36>
 80108f4:	07da      	lsls	r2, r3, #31
 80108f6:	d5de      	bpl.n	80108b6 <_dtoa_r+0xa36>
 80108f8:	2b39      	cmp	r3, #57	@ 0x39
 80108fa:	d1da      	bne.n	80108b2 <_dtoa_r+0xa32>
 80108fc:	2339      	movs	r3, #57	@ 0x39
 80108fe:	f88b 3000 	strb.w	r3, [fp]
 8010902:	4633      	mov	r3, r6
 8010904:	461e      	mov	r6, r3
 8010906:	3b01      	subs	r3, #1
 8010908:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801090c:	2a39      	cmp	r2, #57	@ 0x39
 801090e:	d04e      	beq.n	80109ae <_dtoa_r+0xb2e>
 8010910:	3201      	adds	r2, #1
 8010912:	701a      	strb	r2, [r3, #0]
 8010914:	e501      	b.n	801031a <_dtoa_r+0x49a>
 8010916:	2a00      	cmp	r2, #0
 8010918:	dd03      	ble.n	8010922 <_dtoa_r+0xaa2>
 801091a:	2b39      	cmp	r3, #57	@ 0x39
 801091c:	d0ee      	beq.n	80108fc <_dtoa_r+0xa7c>
 801091e:	3301      	adds	r3, #1
 8010920:	e7c9      	b.n	80108b6 <_dtoa_r+0xa36>
 8010922:	9a00      	ldr	r2, [sp, #0]
 8010924:	9908      	ldr	r1, [sp, #32]
 8010926:	f802 3c01 	strb.w	r3, [r2, #-1]
 801092a:	428a      	cmp	r2, r1
 801092c:	d028      	beq.n	8010980 <_dtoa_r+0xb00>
 801092e:	9902      	ldr	r1, [sp, #8]
 8010930:	2300      	movs	r3, #0
 8010932:	220a      	movs	r2, #10
 8010934:	4648      	mov	r0, r9
 8010936:	f000 fd6d 	bl	8011414 <__multadd>
 801093a:	42af      	cmp	r7, r5
 801093c:	9002      	str	r0, [sp, #8]
 801093e:	f04f 0300 	mov.w	r3, #0
 8010942:	f04f 020a 	mov.w	r2, #10
 8010946:	4639      	mov	r1, r7
 8010948:	4648      	mov	r0, r9
 801094a:	d107      	bne.n	801095c <_dtoa_r+0xadc>
 801094c:	f000 fd62 	bl	8011414 <__multadd>
 8010950:	4607      	mov	r7, r0
 8010952:	4605      	mov	r5, r0
 8010954:	9b00      	ldr	r3, [sp, #0]
 8010956:	3301      	adds	r3, #1
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	e777      	b.n	801084c <_dtoa_r+0x9cc>
 801095c:	f000 fd5a 	bl	8011414 <__multadd>
 8010960:	4629      	mov	r1, r5
 8010962:	4607      	mov	r7, r0
 8010964:	2300      	movs	r3, #0
 8010966:	220a      	movs	r2, #10
 8010968:	4648      	mov	r0, r9
 801096a:	f000 fd53 	bl	8011414 <__multadd>
 801096e:	4605      	mov	r5, r0
 8010970:	e7f0      	b.n	8010954 <_dtoa_r+0xad4>
 8010972:	f1bb 0f00 	cmp.w	fp, #0
 8010976:	bfcc      	ite	gt
 8010978:	465e      	movgt	r6, fp
 801097a:	2601      	movle	r6, #1
 801097c:	4456      	add	r6, sl
 801097e:	2700      	movs	r7, #0
 8010980:	9902      	ldr	r1, [sp, #8]
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	2201      	movs	r2, #1
 8010986:	4648      	mov	r0, r9
 8010988:	f000 ff32 	bl	80117f0 <__lshift>
 801098c:	4621      	mov	r1, r4
 801098e:	9002      	str	r0, [sp, #8]
 8010990:	f000 ff9a 	bl	80118c8 <__mcmp>
 8010994:	2800      	cmp	r0, #0
 8010996:	dcb4      	bgt.n	8010902 <_dtoa_r+0xa82>
 8010998:	d102      	bne.n	80109a0 <_dtoa_r+0xb20>
 801099a:	9b00      	ldr	r3, [sp, #0]
 801099c:	07db      	lsls	r3, r3, #31
 801099e:	d4b0      	bmi.n	8010902 <_dtoa_r+0xa82>
 80109a0:	4633      	mov	r3, r6
 80109a2:	461e      	mov	r6, r3
 80109a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109a8:	2a30      	cmp	r2, #48	@ 0x30
 80109aa:	d0fa      	beq.n	80109a2 <_dtoa_r+0xb22>
 80109ac:	e4b5      	b.n	801031a <_dtoa_r+0x49a>
 80109ae:	459a      	cmp	sl, r3
 80109b0:	d1a8      	bne.n	8010904 <_dtoa_r+0xa84>
 80109b2:	2331      	movs	r3, #49	@ 0x31
 80109b4:	f108 0801 	add.w	r8, r8, #1
 80109b8:	f88a 3000 	strb.w	r3, [sl]
 80109bc:	e4ad      	b.n	801031a <_dtoa_r+0x49a>
 80109be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010a1c <_dtoa_r+0xb9c>
 80109c4:	b11b      	cbz	r3, 80109ce <_dtoa_r+0xb4e>
 80109c6:	f10a 0308 	add.w	r3, sl, #8
 80109ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80109cc:	6013      	str	r3, [r2, #0]
 80109ce:	4650      	mov	r0, sl
 80109d0:	b017      	add	sp, #92	@ 0x5c
 80109d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d6:	9b07      	ldr	r3, [sp, #28]
 80109d8:	2b01      	cmp	r3, #1
 80109da:	f77f ae2e 	ble.w	801063a <_dtoa_r+0x7ba>
 80109de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109e0:	9308      	str	r3, [sp, #32]
 80109e2:	2001      	movs	r0, #1
 80109e4:	e64d      	b.n	8010682 <_dtoa_r+0x802>
 80109e6:	f1bb 0f00 	cmp.w	fp, #0
 80109ea:	f77f aed9 	ble.w	80107a0 <_dtoa_r+0x920>
 80109ee:	4656      	mov	r6, sl
 80109f0:	9802      	ldr	r0, [sp, #8]
 80109f2:	4621      	mov	r1, r4
 80109f4:	f7ff f9ba 	bl	800fd6c <quorem>
 80109f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80109fc:	f806 3b01 	strb.w	r3, [r6], #1
 8010a00:	eba6 020a 	sub.w	r2, r6, sl
 8010a04:	4593      	cmp	fp, r2
 8010a06:	ddb4      	ble.n	8010972 <_dtoa_r+0xaf2>
 8010a08:	9902      	ldr	r1, [sp, #8]
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	220a      	movs	r2, #10
 8010a0e:	4648      	mov	r0, r9
 8010a10:	f000 fd00 	bl	8011414 <__multadd>
 8010a14:	9002      	str	r0, [sp, #8]
 8010a16:	e7eb      	b.n	80109f0 <_dtoa_r+0xb70>
 8010a18:	08013f49 	.word	0x08013f49
 8010a1c:	08013ee4 	.word	0x08013ee4

08010a20 <_free_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4605      	mov	r5, r0
 8010a24:	2900      	cmp	r1, #0
 8010a26:	d041      	beq.n	8010aac <_free_r+0x8c>
 8010a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a2c:	1f0c      	subs	r4, r1, #4
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	bfb8      	it	lt
 8010a32:	18e4      	addlt	r4, r4, r3
 8010a34:	f000 fc80 	bl	8011338 <__malloc_lock>
 8010a38:	4a1d      	ldr	r2, [pc, #116]	@ (8010ab0 <_free_r+0x90>)
 8010a3a:	6813      	ldr	r3, [r2, #0]
 8010a3c:	b933      	cbnz	r3, 8010a4c <_free_r+0x2c>
 8010a3e:	6063      	str	r3, [r4, #4]
 8010a40:	6014      	str	r4, [r2, #0]
 8010a42:	4628      	mov	r0, r5
 8010a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a48:	f000 bc7c 	b.w	8011344 <__malloc_unlock>
 8010a4c:	42a3      	cmp	r3, r4
 8010a4e:	d908      	bls.n	8010a62 <_free_r+0x42>
 8010a50:	6820      	ldr	r0, [r4, #0]
 8010a52:	1821      	adds	r1, r4, r0
 8010a54:	428b      	cmp	r3, r1
 8010a56:	bf01      	itttt	eq
 8010a58:	6819      	ldreq	r1, [r3, #0]
 8010a5a:	685b      	ldreq	r3, [r3, #4]
 8010a5c:	1809      	addeq	r1, r1, r0
 8010a5e:	6021      	streq	r1, [r4, #0]
 8010a60:	e7ed      	b.n	8010a3e <_free_r+0x1e>
 8010a62:	461a      	mov	r2, r3
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	b10b      	cbz	r3, 8010a6c <_free_r+0x4c>
 8010a68:	42a3      	cmp	r3, r4
 8010a6a:	d9fa      	bls.n	8010a62 <_free_r+0x42>
 8010a6c:	6811      	ldr	r1, [r2, #0]
 8010a6e:	1850      	adds	r0, r2, r1
 8010a70:	42a0      	cmp	r0, r4
 8010a72:	d10b      	bne.n	8010a8c <_free_r+0x6c>
 8010a74:	6820      	ldr	r0, [r4, #0]
 8010a76:	4401      	add	r1, r0
 8010a78:	1850      	adds	r0, r2, r1
 8010a7a:	4283      	cmp	r3, r0
 8010a7c:	6011      	str	r1, [r2, #0]
 8010a7e:	d1e0      	bne.n	8010a42 <_free_r+0x22>
 8010a80:	6818      	ldr	r0, [r3, #0]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	6053      	str	r3, [r2, #4]
 8010a86:	4408      	add	r0, r1
 8010a88:	6010      	str	r0, [r2, #0]
 8010a8a:	e7da      	b.n	8010a42 <_free_r+0x22>
 8010a8c:	d902      	bls.n	8010a94 <_free_r+0x74>
 8010a8e:	230c      	movs	r3, #12
 8010a90:	602b      	str	r3, [r5, #0]
 8010a92:	e7d6      	b.n	8010a42 <_free_r+0x22>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	1821      	adds	r1, r4, r0
 8010a98:	428b      	cmp	r3, r1
 8010a9a:	bf04      	itt	eq
 8010a9c:	6819      	ldreq	r1, [r3, #0]
 8010a9e:	685b      	ldreq	r3, [r3, #4]
 8010aa0:	6063      	str	r3, [r4, #4]
 8010aa2:	bf04      	itt	eq
 8010aa4:	1809      	addeq	r1, r1, r0
 8010aa6:	6021      	streq	r1, [r4, #0]
 8010aa8:	6054      	str	r4, [r2, #4]
 8010aaa:	e7ca      	b.n	8010a42 <_free_r+0x22>
 8010aac:	bd38      	pop	{r3, r4, r5, pc}
 8010aae:	bf00      	nop
 8010ab0:	20006f84 	.word	0x20006f84

08010ab4 <rshift>:
 8010ab4:	6903      	ldr	r3, [r0, #16]
 8010ab6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010aba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010abe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ac2:	f100 0414 	add.w	r4, r0, #20
 8010ac6:	dd45      	ble.n	8010b54 <rshift+0xa0>
 8010ac8:	f011 011f 	ands.w	r1, r1, #31
 8010acc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010ad0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ad4:	d10c      	bne.n	8010af0 <rshift+0x3c>
 8010ad6:	f100 0710 	add.w	r7, r0, #16
 8010ada:	4629      	mov	r1, r5
 8010adc:	42b1      	cmp	r1, r6
 8010ade:	d334      	bcc.n	8010b4a <rshift+0x96>
 8010ae0:	1a9b      	subs	r3, r3, r2
 8010ae2:	009b      	lsls	r3, r3, #2
 8010ae4:	1eea      	subs	r2, r5, #3
 8010ae6:	4296      	cmp	r6, r2
 8010ae8:	bf38      	it	cc
 8010aea:	2300      	movcc	r3, #0
 8010aec:	4423      	add	r3, r4
 8010aee:	e015      	b.n	8010b1c <rshift+0x68>
 8010af0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010af4:	f1c1 0820 	rsb	r8, r1, #32
 8010af8:	40cf      	lsrs	r7, r1
 8010afa:	f105 0e04 	add.w	lr, r5, #4
 8010afe:	46a1      	mov	r9, r4
 8010b00:	4576      	cmp	r6, lr
 8010b02:	46f4      	mov	ip, lr
 8010b04:	d815      	bhi.n	8010b32 <rshift+0x7e>
 8010b06:	1a9a      	subs	r2, r3, r2
 8010b08:	0092      	lsls	r2, r2, #2
 8010b0a:	3a04      	subs	r2, #4
 8010b0c:	3501      	adds	r5, #1
 8010b0e:	42ae      	cmp	r6, r5
 8010b10:	bf38      	it	cc
 8010b12:	2200      	movcc	r2, #0
 8010b14:	18a3      	adds	r3, r4, r2
 8010b16:	50a7      	str	r7, [r4, r2]
 8010b18:	b107      	cbz	r7, 8010b1c <rshift+0x68>
 8010b1a:	3304      	adds	r3, #4
 8010b1c:	1b1a      	subs	r2, r3, r4
 8010b1e:	42a3      	cmp	r3, r4
 8010b20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b24:	bf08      	it	eq
 8010b26:	2300      	moveq	r3, #0
 8010b28:	6102      	str	r2, [r0, #16]
 8010b2a:	bf08      	it	eq
 8010b2c:	6143      	streq	r3, [r0, #20]
 8010b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b32:	f8dc c000 	ldr.w	ip, [ip]
 8010b36:	fa0c fc08 	lsl.w	ip, ip, r8
 8010b3a:	ea4c 0707 	orr.w	r7, ip, r7
 8010b3e:	f849 7b04 	str.w	r7, [r9], #4
 8010b42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b46:	40cf      	lsrs	r7, r1
 8010b48:	e7da      	b.n	8010b00 <rshift+0x4c>
 8010b4a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010b4e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010b52:	e7c3      	b.n	8010adc <rshift+0x28>
 8010b54:	4623      	mov	r3, r4
 8010b56:	e7e1      	b.n	8010b1c <rshift+0x68>

08010b58 <__hexdig_fun>:
 8010b58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010b5c:	2b09      	cmp	r3, #9
 8010b5e:	d802      	bhi.n	8010b66 <__hexdig_fun+0xe>
 8010b60:	3820      	subs	r0, #32
 8010b62:	b2c0      	uxtb	r0, r0
 8010b64:	4770      	bx	lr
 8010b66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010b6a:	2b05      	cmp	r3, #5
 8010b6c:	d801      	bhi.n	8010b72 <__hexdig_fun+0x1a>
 8010b6e:	3847      	subs	r0, #71	@ 0x47
 8010b70:	e7f7      	b.n	8010b62 <__hexdig_fun+0xa>
 8010b72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010b76:	2b05      	cmp	r3, #5
 8010b78:	d801      	bhi.n	8010b7e <__hexdig_fun+0x26>
 8010b7a:	3827      	subs	r0, #39	@ 0x27
 8010b7c:	e7f1      	b.n	8010b62 <__hexdig_fun+0xa>
 8010b7e:	2000      	movs	r0, #0
 8010b80:	4770      	bx	lr
	...

08010b84 <__gethex>:
 8010b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	b085      	sub	sp, #20
 8010b8a:	468a      	mov	sl, r1
 8010b8c:	9302      	str	r3, [sp, #8]
 8010b8e:	680b      	ldr	r3, [r1, #0]
 8010b90:	9001      	str	r0, [sp, #4]
 8010b92:	4690      	mov	r8, r2
 8010b94:	1c9c      	adds	r4, r3, #2
 8010b96:	46a1      	mov	r9, r4
 8010b98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010b9c:	2830      	cmp	r0, #48	@ 0x30
 8010b9e:	d0fa      	beq.n	8010b96 <__gethex+0x12>
 8010ba0:	eba9 0303 	sub.w	r3, r9, r3
 8010ba4:	f1a3 0b02 	sub.w	fp, r3, #2
 8010ba8:	f7ff ffd6 	bl	8010b58 <__hexdig_fun>
 8010bac:	4605      	mov	r5, r0
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d168      	bne.n	8010c84 <__gethex+0x100>
 8010bb2:	49a0      	ldr	r1, [pc, #640]	@ (8010e34 <__gethex+0x2b0>)
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	4648      	mov	r0, r9
 8010bb8:	f7fe f8ca 	bl	800ed50 <strncmp>
 8010bbc:	4607      	mov	r7, r0
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d167      	bne.n	8010c92 <__gethex+0x10e>
 8010bc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010bc6:	4626      	mov	r6, r4
 8010bc8:	f7ff ffc6 	bl	8010b58 <__hexdig_fun>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d062      	beq.n	8010c96 <__gethex+0x112>
 8010bd0:	4623      	mov	r3, r4
 8010bd2:	7818      	ldrb	r0, [r3, #0]
 8010bd4:	2830      	cmp	r0, #48	@ 0x30
 8010bd6:	4699      	mov	r9, r3
 8010bd8:	f103 0301 	add.w	r3, r3, #1
 8010bdc:	d0f9      	beq.n	8010bd2 <__gethex+0x4e>
 8010bde:	f7ff ffbb 	bl	8010b58 <__hexdig_fun>
 8010be2:	fab0 f580 	clz	r5, r0
 8010be6:	096d      	lsrs	r5, r5, #5
 8010be8:	f04f 0b01 	mov.w	fp, #1
 8010bec:	464a      	mov	r2, r9
 8010bee:	4616      	mov	r6, r2
 8010bf0:	3201      	adds	r2, #1
 8010bf2:	7830      	ldrb	r0, [r6, #0]
 8010bf4:	f7ff ffb0 	bl	8010b58 <__hexdig_fun>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d1f8      	bne.n	8010bee <__gethex+0x6a>
 8010bfc:	498d      	ldr	r1, [pc, #564]	@ (8010e34 <__gethex+0x2b0>)
 8010bfe:	2201      	movs	r2, #1
 8010c00:	4630      	mov	r0, r6
 8010c02:	f7fe f8a5 	bl	800ed50 <strncmp>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d13f      	bne.n	8010c8a <__gethex+0x106>
 8010c0a:	b944      	cbnz	r4, 8010c1e <__gethex+0x9a>
 8010c0c:	1c74      	adds	r4, r6, #1
 8010c0e:	4622      	mov	r2, r4
 8010c10:	4616      	mov	r6, r2
 8010c12:	3201      	adds	r2, #1
 8010c14:	7830      	ldrb	r0, [r6, #0]
 8010c16:	f7ff ff9f 	bl	8010b58 <__hexdig_fun>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d1f8      	bne.n	8010c10 <__gethex+0x8c>
 8010c1e:	1ba4      	subs	r4, r4, r6
 8010c20:	00a7      	lsls	r7, r4, #2
 8010c22:	7833      	ldrb	r3, [r6, #0]
 8010c24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010c28:	2b50      	cmp	r3, #80	@ 0x50
 8010c2a:	d13e      	bne.n	8010caa <__gethex+0x126>
 8010c2c:	7873      	ldrb	r3, [r6, #1]
 8010c2e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010c30:	d033      	beq.n	8010c9a <__gethex+0x116>
 8010c32:	2b2d      	cmp	r3, #45	@ 0x2d
 8010c34:	d034      	beq.n	8010ca0 <__gethex+0x11c>
 8010c36:	1c71      	adds	r1, r6, #1
 8010c38:	2400      	movs	r4, #0
 8010c3a:	7808      	ldrb	r0, [r1, #0]
 8010c3c:	f7ff ff8c 	bl	8010b58 <__hexdig_fun>
 8010c40:	1e43      	subs	r3, r0, #1
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	2b18      	cmp	r3, #24
 8010c46:	d830      	bhi.n	8010caa <__gethex+0x126>
 8010c48:	f1a0 0210 	sub.w	r2, r0, #16
 8010c4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c50:	f7ff ff82 	bl	8010b58 <__hexdig_fun>
 8010c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8010c58:	fa5f fc8c 	uxtb.w	ip, ip
 8010c5c:	f1bc 0f18 	cmp.w	ip, #24
 8010c60:	f04f 030a 	mov.w	r3, #10
 8010c64:	d91e      	bls.n	8010ca4 <__gethex+0x120>
 8010c66:	b104      	cbz	r4, 8010c6a <__gethex+0xe6>
 8010c68:	4252      	negs	r2, r2
 8010c6a:	4417      	add	r7, r2
 8010c6c:	f8ca 1000 	str.w	r1, [sl]
 8010c70:	b1ed      	cbz	r5, 8010cae <__gethex+0x12a>
 8010c72:	f1bb 0f00 	cmp.w	fp, #0
 8010c76:	bf0c      	ite	eq
 8010c78:	2506      	moveq	r5, #6
 8010c7a:	2500      	movne	r5, #0
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	b005      	add	sp, #20
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c84:	2500      	movs	r5, #0
 8010c86:	462c      	mov	r4, r5
 8010c88:	e7b0      	b.n	8010bec <__gethex+0x68>
 8010c8a:	2c00      	cmp	r4, #0
 8010c8c:	d1c7      	bne.n	8010c1e <__gethex+0x9a>
 8010c8e:	4627      	mov	r7, r4
 8010c90:	e7c7      	b.n	8010c22 <__gethex+0x9e>
 8010c92:	464e      	mov	r6, r9
 8010c94:	462f      	mov	r7, r5
 8010c96:	2501      	movs	r5, #1
 8010c98:	e7c3      	b.n	8010c22 <__gethex+0x9e>
 8010c9a:	2400      	movs	r4, #0
 8010c9c:	1cb1      	adds	r1, r6, #2
 8010c9e:	e7cc      	b.n	8010c3a <__gethex+0xb6>
 8010ca0:	2401      	movs	r4, #1
 8010ca2:	e7fb      	b.n	8010c9c <__gethex+0x118>
 8010ca4:	fb03 0002 	mla	r0, r3, r2, r0
 8010ca8:	e7ce      	b.n	8010c48 <__gethex+0xc4>
 8010caa:	4631      	mov	r1, r6
 8010cac:	e7de      	b.n	8010c6c <__gethex+0xe8>
 8010cae:	eba6 0309 	sub.w	r3, r6, r9
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	2b07      	cmp	r3, #7
 8010cb8:	dc0a      	bgt.n	8010cd0 <__gethex+0x14c>
 8010cba:	9801      	ldr	r0, [sp, #4]
 8010cbc:	f000 fb48 	bl	8011350 <_Balloc>
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	b940      	cbnz	r0, 8010cd6 <__gethex+0x152>
 8010cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8010e38 <__gethex+0x2b4>)
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	21e4      	movs	r1, #228	@ 0xe4
 8010cca:	485c      	ldr	r0, [pc, #368]	@ (8010e3c <__gethex+0x2b8>)
 8010ccc:	f7ff f828 	bl	800fd20 <__assert_func>
 8010cd0:	3101      	adds	r1, #1
 8010cd2:	105b      	asrs	r3, r3, #1
 8010cd4:	e7ef      	b.n	8010cb6 <__gethex+0x132>
 8010cd6:	f100 0a14 	add.w	sl, r0, #20
 8010cda:	2300      	movs	r3, #0
 8010cdc:	4655      	mov	r5, sl
 8010cde:	469b      	mov	fp, r3
 8010ce0:	45b1      	cmp	r9, r6
 8010ce2:	d337      	bcc.n	8010d54 <__gethex+0x1d0>
 8010ce4:	f845 bb04 	str.w	fp, [r5], #4
 8010ce8:	eba5 050a 	sub.w	r5, r5, sl
 8010cec:	10ad      	asrs	r5, r5, #2
 8010cee:	6125      	str	r5, [r4, #16]
 8010cf0:	4658      	mov	r0, fp
 8010cf2:	f000 fc1f 	bl	8011534 <__hi0bits>
 8010cf6:	016d      	lsls	r5, r5, #5
 8010cf8:	f8d8 6000 	ldr.w	r6, [r8]
 8010cfc:	1a2d      	subs	r5, r5, r0
 8010cfe:	42b5      	cmp	r5, r6
 8010d00:	dd54      	ble.n	8010dac <__gethex+0x228>
 8010d02:	1bad      	subs	r5, r5, r6
 8010d04:	4629      	mov	r1, r5
 8010d06:	4620      	mov	r0, r4
 8010d08:	f000 ffab 	bl	8011c62 <__any_on>
 8010d0c:	4681      	mov	r9, r0
 8010d0e:	b178      	cbz	r0, 8010d30 <__gethex+0x1ac>
 8010d10:	1e6b      	subs	r3, r5, #1
 8010d12:	1159      	asrs	r1, r3, #5
 8010d14:	f003 021f 	and.w	r2, r3, #31
 8010d18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010d1c:	f04f 0901 	mov.w	r9, #1
 8010d20:	fa09 f202 	lsl.w	r2, r9, r2
 8010d24:	420a      	tst	r2, r1
 8010d26:	d003      	beq.n	8010d30 <__gethex+0x1ac>
 8010d28:	454b      	cmp	r3, r9
 8010d2a:	dc36      	bgt.n	8010d9a <__gethex+0x216>
 8010d2c:	f04f 0902 	mov.w	r9, #2
 8010d30:	4629      	mov	r1, r5
 8010d32:	4620      	mov	r0, r4
 8010d34:	f7ff febe 	bl	8010ab4 <rshift>
 8010d38:	442f      	add	r7, r5
 8010d3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d3e:	42bb      	cmp	r3, r7
 8010d40:	da42      	bge.n	8010dc8 <__gethex+0x244>
 8010d42:	9801      	ldr	r0, [sp, #4]
 8010d44:	4621      	mov	r1, r4
 8010d46:	f000 fb43 	bl	80113d0 <_Bfree>
 8010d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	6013      	str	r3, [r2, #0]
 8010d50:	25a3      	movs	r5, #163	@ 0xa3
 8010d52:	e793      	b.n	8010c7c <__gethex+0xf8>
 8010d54:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010d58:	2a2e      	cmp	r2, #46	@ 0x2e
 8010d5a:	d012      	beq.n	8010d82 <__gethex+0x1fe>
 8010d5c:	2b20      	cmp	r3, #32
 8010d5e:	d104      	bne.n	8010d6a <__gethex+0x1e6>
 8010d60:	f845 bb04 	str.w	fp, [r5], #4
 8010d64:	f04f 0b00 	mov.w	fp, #0
 8010d68:	465b      	mov	r3, fp
 8010d6a:	7830      	ldrb	r0, [r6, #0]
 8010d6c:	9303      	str	r3, [sp, #12]
 8010d6e:	f7ff fef3 	bl	8010b58 <__hexdig_fun>
 8010d72:	9b03      	ldr	r3, [sp, #12]
 8010d74:	f000 000f 	and.w	r0, r0, #15
 8010d78:	4098      	lsls	r0, r3
 8010d7a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010d7e:	3304      	adds	r3, #4
 8010d80:	e7ae      	b.n	8010ce0 <__gethex+0x15c>
 8010d82:	45b1      	cmp	r9, r6
 8010d84:	d8ea      	bhi.n	8010d5c <__gethex+0x1d8>
 8010d86:	492b      	ldr	r1, [pc, #172]	@ (8010e34 <__gethex+0x2b0>)
 8010d88:	9303      	str	r3, [sp, #12]
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	f7fd ffdf 	bl	800ed50 <strncmp>
 8010d92:	9b03      	ldr	r3, [sp, #12]
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d1e1      	bne.n	8010d5c <__gethex+0x1d8>
 8010d98:	e7a2      	b.n	8010ce0 <__gethex+0x15c>
 8010d9a:	1ea9      	subs	r1, r5, #2
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 ff60 	bl	8011c62 <__any_on>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d0c2      	beq.n	8010d2c <__gethex+0x1a8>
 8010da6:	f04f 0903 	mov.w	r9, #3
 8010daa:	e7c1      	b.n	8010d30 <__gethex+0x1ac>
 8010dac:	da09      	bge.n	8010dc2 <__gethex+0x23e>
 8010dae:	1b75      	subs	r5, r6, r5
 8010db0:	4621      	mov	r1, r4
 8010db2:	9801      	ldr	r0, [sp, #4]
 8010db4:	462a      	mov	r2, r5
 8010db6:	f000 fd1b 	bl	80117f0 <__lshift>
 8010dba:	1b7f      	subs	r7, r7, r5
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	f100 0a14 	add.w	sl, r0, #20
 8010dc2:	f04f 0900 	mov.w	r9, #0
 8010dc6:	e7b8      	b.n	8010d3a <__gethex+0x1b6>
 8010dc8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010dcc:	42bd      	cmp	r5, r7
 8010dce:	dd6f      	ble.n	8010eb0 <__gethex+0x32c>
 8010dd0:	1bed      	subs	r5, r5, r7
 8010dd2:	42ae      	cmp	r6, r5
 8010dd4:	dc34      	bgt.n	8010e40 <__gethex+0x2bc>
 8010dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010dda:	2b02      	cmp	r3, #2
 8010ddc:	d022      	beq.n	8010e24 <__gethex+0x2a0>
 8010dde:	2b03      	cmp	r3, #3
 8010de0:	d024      	beq.n	8010e2c <__gethex+0x2a8>
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d115      	bne.n	8010e12 <__gethex+0x28e>
 8010de6:	42ae      	cmp	r6, r5
 8010de8:	d113      	bne.n	8010e12 <__gethex+0x28e>
 8010dea:	2e01      	cmp	r6, #1
 8010dec:	d10b      	bne.n	8010e06 <__gethex+0x282>
 8010dee:	9a02      	ldr	r2, [sp, #8]
 8010df0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010df4:	6013      	str	r3, [r2, #0]
 8010df6:	2301      	movs	r3, #1
 8010df8:	6123      	str	r3, [r4, #16]
 8010dfa:	f8ca 3000 	str.w	r3, [sl]
 8010dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e00:	2562      	movs	r5, #98	@ 0x62
 8010e02:	601c      	str	r4, [r3, #0]
 8010e04:	e73a      	b.n	8010c7c <__gethex+0xf8>
 8010e06:	1e71      	subs	r1, r6, #1
 8010e08:	4620      	mov	r0, r4
 8010e0a:	f000 ff2a 	bl	8011c62 <__any_on>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d1ed      	bne.n	8010dee <__gethex+0x26a>
 8010e12:	9801      	ldr	r0, [sp, #4]
 8010e14:	4621      	mov	r1, r4
 8010e16:	f000 fadb 	bl	80113d0 <_Bfree>
 8010e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	6013      	str	r3, [r2, #0]
 8010e20:	2550      	movs	r5, #80	@ 0x50
 8010e22:	e72b      	b.n	8010c7c <__gethex+0xf8>
 8010e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d1f3      	bne.n	8010e12 <__gethex+0x28e>
 8010e2a:	e7e0      	b.n	8010dee <__gethex+0x26a>
 8010e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1dd      	bne.n	8010dee <__gethex+0x26a>
 8010e32:	e7ee      	b.n	8010e12 <__gethex+0x28e>
 8010e34:	08013d54 	.word	0x08013d54
 8010e38:	08013f49 	.word	0x08013f49
 8010e3c:	08013f5a 	.word	0x08013f5a
 8010e40:	1e6f      	subs	r7, r5, #1
 8010e42:	f1b9 0f00 	cmp.w	r9, #0
 8010e46:	d130      	bne.n	8010eaa <__gethex+0x326>
 8010e48:	b127      	cbz	r7, 8010e54 <__gethex+0x2d0>
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	f000 ff08 	bl	8011c62 <__any_on>
 8010e52:	4681      	mov	r9, r0
 8010e54:	117a      	asrs	r2, r7, #5
 8010e56:	2301      	movs	r3, #1
 8010e58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010e5c:	f007 071f 	and.w	r7, r7, #31
 8010e60:	40bb      	lsls	r3, r7
 8010e62:	4213      	tst	r3, r2
 8010e64:	4629      	mov	r1, r5
 8010e66:	4620      	mov	r0, r4
 8010e68:	bf18      	it	ne
 8010e6a:	f049 0902 	orrne.w	r9, r9, #2
 8010e6e:	f7ff fe21 	bl	8010ab4 <rshift>
 8010e72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010e76:	1b76      	subs	r6, r6, r5
 8010e78:	2502      	movs	r5, #2
 8010e7a:	f1b9 0f00 	cmp.w	r9, #0
 8010e7e:	d047      	beq.n	8010f10 <__gethex+0x38c>
 8010e80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	d015      	beq.n	8010eb4 <__gethex+0x330>
 8010e88:	2b03      	cmp	r3, #3
 8010e8a:	d017      	beq.n	8010ebc <__gethex+0x338>
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d109      	bne.n	8010ea4 <__gethex+0x320>
 8010e90:	f019 0f02 	tst.w	r9, #2
 8010e94:	d006      	beq.n	8010ea4 <__gethex+0x320>
 8010e96:	f8da 3000 	ldr.w	r3, [sl]
 8010e9a:	ea49 0903 	orr.w	r9, r9, r3
 8010e9e:	f019 0f01 	tst.w	r9, #1
 8010ea2:	d10e      	bne.n	8010ec2 <__gethex+0x33e>
 8010ea4:	f045 0510 	orr.w	r5, r5, #16
 8010ea8:	e032      	b.n	8010f10 <__gethex+0x38c>
 8010eaa:	f04f 0901 	mov.w	r9, #1
 8010eae:	e7d1      	b.n	8010e54 <__gethex+0x2d0>
 8010eb0:	2501      	movs	r5, #1
 8010eb2:	e7e2      	b.n	8010e7a <__gethex+0x2f6>
 8010eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eb6:	f1c3 0301 	rsb	r3, r3, #1
 8010eba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d0f0      	beq.n	8010ea4 <__gethex+0x320>
 8010ec2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010ec6:	f104 0314 	add.w	r3, r4, #20
 8010eca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010ece:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010ed2:	f04f 0c00 	mov.w	ip, #0
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010edc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010ee0:	d01b      	beq.n	8010f1a <__gethex+0x396>
 8010ee2:	3201      	adds	r2, #1
 8010ee4:	6002      	str	r2, [r0, #0]
 8010ee6:	2d02      	cmp	r5, #2
 8010ee8:	f104 0314 	add.w	r3, r4, #20
 8010eec:	d13c      	bne.n	8010f68 <__gethex+0x3e4>
 8010eee:	f8d8 2000 	ldr.w	r2, [r8]
 8010ef2:	3a01      	subs	r2, #1
 8010ef4:	42b2      	cmp	r2, r6
 8010ef6:	d109      	bne.n	8010f0c <__gethex+0x388>
 8010ef8:	1171      	asrs	r1, r6, #5
 8010efa:	2201      	movs	r2, #1
 8010efc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f00:	f006 061f 	and.w	r6, r6, #31
 8010f04:	fa02 f606 	lsl.w	r6, r2, r6
 8010f08:	421e      	tst	r6, r3
 8010f0a:	d13a      	bne.n	8010f82 <__gethex+0x3fe>
 8010f0c:	f045 0520 	orr.w	r5, r5, #32
 8010f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f12:	601c      	str	r4, [r3, #0]
 8010f14:	9b02      	ldr	r3, [sp, #8]
 8010f16:	601f      	str	r7, [r3, #0]
 8010f18:	e6b0      	b.n	8010c7c <__gethex+0xf8>
 8010f1a:	4299      	cmp	r1, r3
 8010f1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f20:	d8d9      	bhi.n	8010ed6 <__gethex+0x352>
 8010f22:	68a3      	ldr	r3, [r4, #8]
 8010f24:	459b      	cmp	fp, r3
 8010f26:	db17      	blt.n	8010f58 <__gethex+0x3d4>
 8010f28:	6861      	ldr	r1, [r4, #4]
 8010f2a:	9801      	ldr	r0, [sp, #4]
 8010f2c:	3101      	adds	r1, #1
 8010f2e:	f000 fa0f 	bl	8011350 <_Balloc>
 8010f32:	4681      	mov	r9, r0
 8010f34:	b918      	cbnz	r0, 8010f3e <__gethex+0x3ba>
 8010f36:	4b1a      	ldr	r3, [pc, #104]	@ (8010fa0 <__gethex+0x41c>)
 8010f38:	4602      	mov	r2, r0
 8010f3a:	2184      	movs	r1, #132	@ 0x84
 8010f3c:	e6c5      	b.n	8010cca <__gethex+0x146>
 8010f3e:	6922      	ldr	r2, [r4, #16]
 8010f40:	3202      	adds	r2, #2
 8010f42:	f104 010c 	add.w	r1, r4, #12
 8010f46:	0092      	lsls	r2, r2, #2
 8010f48:	300c      	adds	r0, #12
 8010f4a:	f7fe fed2 	bl	800fcf2 <memcpy>
 8010f4e:	4621      	mov	r1, r4
 8010f50:	9801      	ldr	r0, [sp, #4]
 8010f52:	f000 fa3d 	bl	80113d0 <_Bfree>
 8010f56:	464c      	mov	r4, r9
 8010f58:	6923      	ldr	r3, [r4, #16]
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f60:	6122      	str	r2, [r4, #16]
 8010f62:	2201      	movs	r2, #1
 8010f64:	615a      	str	r2, [r3, #20]
 8010f66:	e7be      	b.n	8010ee6 <__gethex+0x362>
 8010f68:	6922      	ldr	r2, [r4, #16]
 8010f6a:	455a      	cmp	r2, fp
 8010f6c:	dd0b      	ble.n	8010f86 <__gethex+0x402>
 8010f6e:	2101      	movs	r1, #1
 8010f70:	4620      	mov	r0, r4
 8010f72:	f7ff fd9f 	bl	8010ab4 <rshift>
 8010f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f7a:	3701      	adds	r7, #1
 8010f7c:	42bb      	cmp	r3, r7
 8010f7e:	f6ff aee0 	blt.w	8010d42 <__gethex+0x1be>
 8010f82:	2501      	movs	r5, #1
 8010f84:	e7c2      	b.n	8010f0c <__gethex+0x388>
 8010f86:	f016 061f 	ands.w	r6, r6, #31
 8010f8a:	d0fa      	beq.n	8010f82 <__gethex+0x3fe>
 8010f8c:	4453      	add	r3, sl
 8010f8e:	f1c6 0620 	rsb	r6, r6, #32
 8010f92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f96:	f000 facd 	bl	8011534 <__hi0bits>
 8010f9a:	42b0      	cmp	r0, r6
 8010f9c:	dbe7      	blt.n	8010f6e <__gethex+0x3ea>
 8010f9e:	e7f0      	b.n	8010f82 <__gethex+0x3fe>
 8010fa0:	08013f49 	.word	0x08013f49

08010fa4 <L_shift>:
 8010fa4:	f1c2 0208 	rsb	r2, r2, #8
 8010fa8:	0092      	lsls	r2, r2, #2
 8010faa:	b570      	push	{r4, r5, r6, lr}
 8010fac:	f1c2 0620 	rsb	r6, r2, #32
 8010fb0:	6843      	ldr	r3, [r0, #4]
 8010fb2:	6804      	ldr	r4, [r0, #0]
 8010fb4:	fa03 f506 	lsl.w	r5, r3, r6
 8010fb8:	432c      	orrs	r4, r5
 8010fba:	40d3      	lsrs	r3, r2
 8010fbc:	6004      	str	r4, [r0, #0]
 8010fbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010fc2:	4288      	cmp	r0, r1
 8010fc4:	d3f4      	bcc.n	8010fb0 <L_shift+0xc>
 8010fc6:	bd70      	pop	{r4, r5, r6, pc}

08010fc8 <__match>:
 8010fc8:	b530      	push	{r4, r5, lr}
 8010fca:	6803      	ldr	r3, [r0, #0]
 8010fcc:	3301      	adds	r3, #1
 8010fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fd2:	b914      	cbnz	r4, 8010fda <__match+0x12>
 8010fd4:	6003      	str	r3, [r0, #0]
 8010fd6:	2001      	movs	r0, #1
 8010fd8:	bd30      	pop	{r4, r5, pc}
 8010fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010fe2:	2d19      	cmp	r5, #25
 8010fe4:	bf98      	it	ls
 8010fe6:	3220      	addls	r2, #32
 8010fe8:	42a2      	cmp	r2, r4
 8010fea:	d0f0      	beq.n	8010fce <__match+0x6>
 8010fec:	2000      	movs	r0, #0
 8010fee:	e7f3      	b.n	8010fd8 <__match+0x10>

08010ff0 <__hexnan>:
 8010ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	680b      	ldr	r3, [r1, #0]
 8010ff6:	6801      	ldr	r1, [r0, #0]
 8010ff8:	115e      	asrs	r6, r3, #5
 8010ffa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ffe:	f013 031f 	ands.w	r3, r3, #31
 8011002:	b087      	sub	sp, #28
 8011004:	bf18      	it	ne
 8011006:	3604      	addne	r6, #4
 8011008:	2500      	movs	r5, #0
 801100a:	1f37      	subs	r7, r6, #4
 801100c:	4682      	mov	sl, r0
 801100e:	4690      	mov	r8, r2
 8011010:	9301      	str	r3, [sp, #4]
 8011012:	f846 5c04 	str.w	r5, [r6, #-4]
 8011016:	46b9      	mov	r9, r7
 8011018:	463c      	mov	r4, r7
 801101a:	9502      	str	r5, [sp, #8]
 801101c:	46ab      	mov	fp, r5
 801101e:	784a      	ldrb	r2, [r1, #1]
 8011020:	1c4b      	adds	r3, r1, #1
 8011022:	9303      	str	r3, [sp, #12]
 8011024:	b342      	cbz	r2, 8011078 <__hexnan+0x88>
 8011026:	4610      	mov	r0, r2
 8011028:	9105      	str	r1, [sp, #20]
 801102a:	9204      	str	r2, [sp, #16]
 801102c:	f7ff fd94 	bl	8010b58 <__hexdig_fun>
 8011030:	2800      	cmp	r0, #0
 8011032:	d151      	bne.n	80110d8 <__hexnan+0xe8>
 8011034:	9a04      	ldr	r2, [sp, #16]
 8011036:	9905      	ldr	r1, [sp, #20]
 8011038:	2a20      	cmp	r2, #32
 801103a:	d818      	bhi.n	801106e <__hexnan+0x7e>
 801103c:	9b02      	ldr	r3, [sp, #8]
 801103e:	459b      	cmp	fp, r3
 8011040:	dd13      	ble.n	801106a <__hexnan+0x7a>
 8011042:	454c      	cmp	r4, r9
 8011044:	d206      	bcs.n	8011054 <__hexnan+0x64>
 8011046:	2d07      	cmp	r5, #7
 8011048:	dc04      	bgt.n	8011054 <__hexnan+0x64>
 801104a:	462a      	mov	r2, r5
 801104c:	4649      	mov	r1, r9
 801104e:	4620      	mov	r0, r4
 8011050:	f7ff ffa8 	bl	8010fa4 <L_shift>
 8011054:	4544      	cmp	r4, r8
 8011056:	d952      	bls.n	80110fe <__hexnan+0x10e>
 8011058:	2300      	movs	r3, #0
 801105a:	f1a4 0904 	sub.w	r9, r4, #4
 801105e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011062:	f8cd b008 	str.w	fp, [sp, #8]
 8011066:	464c      	mov	r4, r9
 8011068:	461d      	mov	r5, r3
 801106a:	9903      	ldr	r1, [sp, #12]
 801106c:	e7d7      	b.n	801101e <__hexnan+0x2e>
 801106e:	2a29      	cmp	r2, #41	@ 0x29
 8011070:	d157      	bne.n	8011122 <__hexnan+0x132>
 8011072:	3102      	adds	r1, #2
 8011074:	f8ca 1000 	str.w	r1, [sl]
 8011078:	f1bb 0f00 	cmp.w	fp, #0
 801107c:	d051      	beq.n	8011122 <__hexnan+0x132>
 801107e:	454c      	cmp	r4, r9
 8011080:	d206      	bcs.n	8011090 <__hexnan+0xa0>
 8011082:	2d07      	cmp	r5, #7
 8011084:	dc04      	bgt.n	8011090 <__hexnan+0xa0>
 8011086:	462a      	mov	r2, r5
 8011088:	4649      	mov	r1, r9
 801108a:	4620      	mov	r0, r4
 801108c:	f7ff ff8a 	bl	8010fa4 <L_shift>
 8011090:	4544      	cmp	r4, r8
 8011092:	d936      	bls.n	8011102 <__hexnan+0x112>
 8011094:	f1a8 0204 	sub.w	r2, r8, #4
 8011098:	4623      	mov	r3, r4
 801109a:	f853 1b04 	ldr.w	r1, [r3], #4
 801109e:	f842 1f04 	str.w	r1, [r2, #4]!
 80110a2:	429f      	cmp	r7, r3
 80110a4:	d2f9      	bcs.n	801109a <__hexnan+0xaa>
 80110a6:	1b3b      	subs	r3, r7, r4
 80110a8:	f023 0303 	bic.w	r3, r3, #3
 80110ac:	3304      	adds	r3, #4
 80110ae:	3401      	adds	r4, #1
 80110b0:	3e03      	subs	r6, #3
 80110b2:	42b4      	cmp	r4, r6
 80110b4:	bf88      	it	hi
 80110b6:	2304      	movhi	r3, #4
 80110b8:	4443      	add	r3, r8
 80110ba:	2200      	movs	r2, #0
 80110bc:	f843 2b04 	str.w	r2, [r3], #4
 80110c0:	429f      	cmp	r7, r3
 80110c2:	d2fb      	bcs.n	80110bc <__hexnan+0xcc>
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	b91b      	cbnz	r3, 80110d0 <__hexnan+0xe0>
 80110c8:	4547      	cmp	r7, r8
 80110ca:	d128      	bne.n	801111e <__hexnan+0x12e>
 80110cc:	2301      	movs	r3, #1
 80110ce:	603b      	str	r3, [r7, #0]
 80110d0:	2005      	movs	r0, #5
 80110d2:	b007      	add	sp, #28
 80110d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d8:	3501      	adds	r5, #1
 80110da:	2d08      	cmp	r5, #8
 80110dc:	f10b 0b01 	add.w	fp, fp, #1
 80110e0:	dd06      	ble.n	80110f0 <__hexnan+0x100>
 80110e2:	4544      	cmp	r4, r8
 80110e4:	d9c1      	bls.n	801106a <__hexnan+0x7a>
 80110e6:	2300      	movs	r3, #0
 80110e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80110ec:	2501      	movs	r5, #1
 80110ee:	3c04      	subs	r4, #4
 80110f0:	6822      	ldr	r2, [r4, #0]
 80110f2:	f000 000f 	and.w	r0, r0, #15
 80110f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80110fa:	6020      	str	r0, [r4, #0]
 80110fc:	e7b5      	b.n	801106a <__hexnan+0x7a>
 80110fe:	2508      	movs	r5, #8
 8011100:	e7b3      	b.n	801106a <__hexnan+0x7a>
 8011102:	9b01      	ldr	r3, [sp, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0dd      	beq.n	80110c4 <__hexnan+0xd4>
 8011108:	f1c3 0320 	rsb	r3, r3, #32
 801110c:	f04f 32ff 	mov.w	r2, #4294967295
 8011110:	40da      	lsrs	r2, r3
 8011112:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011116:	4013      	ands	r3, r2
 8011118:	f846 3c04 	str.w	r3, [r6, #-4]
 801111c:	e7d2      	b.n	80110c4 <__hexnan+0xd4>
 801111e:	3f04      	subs	r7, #4
 8011120:	e7d0      	b.n	80110c4 <__hexnan+0xd4>
 8011122:	2004      	movs	r0, #4
 8011124:	e7d5      	b.n	80110d2 <__hexnan+0xe2>
	...

08011128 <_findenv_r>:
 8011128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801112c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801119c <_findenv_r+0x74>
 8011130:	4606      	mov	r6, r0
 8011132:	4689      	mov	r9, r1
 8011134:	4617      	mov	r7, r2
 8011136:	f001 fefb 	bl	8012f30 <__env_lock>
 801113a:	f8da 4000 	ldr.w	r4, [sl]
 801113e:	b134      	cbz	r4, 801114e <_findenv_r+0x26>
 8011140:	464b      	mov	r3, r9
 8011142:	4698      	mov	r8, r3
 8011144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011148:	b13a      	cbz	r2, 801115a <_findenv_r+0x32>
 801114a:	2a3d      	cmp	r2, #61	@ 0x3d
 801114c:	d1f9      	bne.n	8011142 <_findenv_r+0x1a>
 801114e:	4630      	mov	r0, r6
 8011150:	f001 fef4 	bl	8012f3c <__env_unlock>
 8011154:	2000      	movs	r0, #0
 8011156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115a:	eba8 0809 	sub.w	r8, r8, r9
 801115e:	46a3      	mov	fp, r4
 8011160:	f854 0b04 	ldr.w	r0, [r4], #4
 8011164:	2800      	cmp	r0, #0
 8011166:	d0f2      	beq.n	801114e <_findenv_r+0x26>
 8011168:	4642      	mov	r2, r8
 801116a:	4649      	mov	r1, r9
 801116c:	f7fd fdf0 	bl	800ed50 <strncmp>
 8011170:	2800      	cmp	r0, #0
 8011172:	d1f4      	bne.n	801115e <_findenv_r+0x36>
 8011174:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011178:	eb03 0508 	add.w	r5, r3, r8
 801117c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011180:	2b3d      	cmp	r3, #61	@ 0x3d
 8011182:	d1ec      	bne.n	801115e <_findenv_r+0x36>
 8011184:	f8da 3000 	ldr.w	r3, [sl]
 8011188:	ebab 0303 	sub.w	r3, fp, r3
 801118c:	109b      	asrs	r3, r3, #2
 801118e:	4630      	mov	r0, r6
 8011190:	603b      	str	r3, [r7, #0]
 8011192:	f001 fed3 	bl	8012f3c <__env_unlock>
 8011196:	1c68      	adds	r0, r5, #1
 8011198:	e7dd      	b.n	8011156 <_findenv_r+0x2e>
 801119a:	bf00      	nop
 801119c:	20000010 	.word	0x20000010

080111a0 <_getenv_r>:
 80111a0:	b507      	push	{r0, r1, r2, lr}
 80111a2:	aa01      	add	r2, sp, #4
 80111a4:	f7ff ffc0 	bl	8011128 <_findenv_r>
 80111a8:	b003      	add	sp, #12
 80111aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080111b0 <malloc>:
 80111b0:	4b02      	ldr	r3, [pc, #8]	@ (80111bc <malloc+0xc>)
 80111b2:	4601      	mov	r1, r0
 80111b4:	6818      	ldr	r0, [r3, #0]
 80111b6:	f000 b82d 	b.w	8011214 <_malloc_r>
 80111ba:	bf00      	nop
 80111bc:	200001a4 	.word	0x200001a4

080111c0 <free>:
 80111c0:	4b02      	ldr	r3, [pc, #8]	@ (80111cc <free+0xc>)
 80111c2:	4601      	mov	r1, r0
 80111c4:	6818      	ldr	r0, [r3, #0]
 80111c6:	f7ff bc2b 	b.w	8010a20 <_free_r>
 80111ca:	bf00      	nop
 80111cc:	200001a4 	.word	0x200001a4

080111d0 <sbrk_aligned>:
 80111d0:	b570      	push	{r4, r5, r6, lr}
 80111d2:	4e0f      	ldr	r6, [pc, #60]	@ (8011210 <sbrk_aligned+0x40>)
 80111d4:	460c      	mov	r4, r1
 80111d6:	6831      	ldr	r1, [r6, #0]
 80111d8:	4605      	mov	r5, r0
 80111da:	b911      	cbnz	r1, 80111e2 <sbrk_aligned+0x12>
 80111dc:	f001 fe7c 	bl	8012ed8 <_sbrk_r>
 80111e0:	6030      	str	r0, [r6, #0]
 80111e2:	4621      	mov	r1, r4
 80111e4:	4628      	mov	r0, r5
 80111e6:	f001 fe77 	bl	8012ed8 <_sbrk_r>
 80111ea:	1c43      	adds	r3, r0, #1
 80111ec:	d103      	bne.n	80111f6 <sbrk_aligned+0x26>
 80111ee:	f04f 34ff 	mov.w	r4, #4294967295
 80111f2:	4620      	mov	r0, r4
 80111f4:	bd70      	pop	{r4, r5, r6, pc}
 80111f6:	1cc4      	adds	r4, r0, #3
 80111f8:	f024 0403 	bic.w	r4, r4, #3
 80111fc:	42a0      	cmp	r0, r4
 80111fe:	d0f8      	beq.n	80111f2 <sbrk_aligned+0x22>
 8011200:	1a21      	subs	r1, r4, r0
 8011202:	4628      	mov	r0, r5
 8011204:	f001 fe68 	bl	8012ed8 <_sbrk_r>
 8011208:	3001      	adds	r0, #1
 801120a:	d1f2      	bne.n	80111f2 <sbrk_aligned+0x22>
 801120c:	e7ef      	b.n	80111ee <sbrk_aligned+0x1e>
 801120e:	bf00      	nop
 8011210:	20006f80 	.word	0x20006f80

08011214 <_malloc_r>:
 8011214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011218:	1ccd      	adds	r5, r1, #3
 801121a:	f025 0503 	bic.w	r5, r5, #3
 801121e:	3508      	adds	r5, #8
 8011220:	2d0c      	cmp	r5, #12
 8011222:	bf38      	it	cc
 8011224:	250c      	movcc	r5, #12
 8011226:	2d00      	cmp	r5, #0
 8011228:	4606      	mov	r6, r0
 801122a:	db01      	blt.n	8011230 <_malloc_r+0x1c>
 801122c:	42a9      	cmp	r1, r5
 801122e:	d904      	bls.n	801123a <_malloc_r+0x26>
 8011230:	230c      	movs	r3, #12
 8011232:	6033      	str	r3, [r6, #0]
 8011234:	2000      	movs	r0, #0
 8011236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011310 <_malloc_r+0xfc>
 801123e:	f000 f87b 	bl	8011338 <__malloc_lock>
 8011242:	f8d8 3000 	ldr.w	r3, [r8]
 8011246:	461c      	mov	r4, r3
 8011248:	bb44      	cbnz	r4, 801129c <_malloc_r+0x88>
 801124a:	4629      	mov	r1, r5
 801124c:	4630      	mov	r0, r6
 801124e:	f7ff ffbf 	bl	80111d0 <sbrk_aligned>
 8011252:	1c43      	adds	r3, r0, #1
 8011254:	4604      	mov	r4, r0
 8011256:	d158      	bne.n	801130a <_malloc_r+0xf6>
 8011258:	f8d8 4000 	ldr.w	r4, [r8]
 801125c:	4627      	mov	r7, r4
 801125e:	2f00      	cmp	r7, #0
 8011260:	d143      	bne.n	80112ea <_malloc_r+0xd6>
 8011262:	2c00      	cmp	r4, #0
 8011264:	d04b      	beq.n	80112fe <_malloc_r+0xea>
 8011266:	6823      	ldr	r3, [r4, #0]
 8011268:	4639      	mov	r1, r7
 801126a:	4630      	mov	r0, r6
 801126c:	eb04 0903 	add.w	r9, r4, r3
 8011270:	f001 fe32 	bl	8012ed8 <_sbrk_r>
 8011274:	4581      	cmp	r9, r0
 8011276:	d142      	bne.n	80112fe <_malloc_r+0xea>
 8011278:	6821      	ldr	r1, [r4, #0]
 801127a:	1a6d      	subs	r5, r5, r1
 801127c:	4629      	mov	r1, r5
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff ffa6 	bl	80111d0 <sbrk_aligned>
 8011284:	3001      	adds	r0, #1
 8011286:	d03a      	beq.n	80112fe <_malloc_r+0xea>
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	442b      	add	r3, r5
 801128c:	6023      	str	r3, [r4, #0]
 801128e:	f8d8 3000 	ldr.w	r3, [r8]
 8011292:	685a      	ldr	r2, [r3, #4]
 8011294:	bb62      	cbnz	r2, 80112f0 <_malloc_r+0xdc>
 8011296:	f8c8 7000 	str.w	r7, [r8]
 801129a:	e00f      	b.n	80112bc <_malloc_r+0xa8>
 801129c:	6822      	ldr	r2, [r4, #0]
 801129e:	1b52      	subs	r2, r2, r5
 80112a0:	d420      	bmi.n	80112e4 <_malloc_r+0xd0>
 80112a2:	2a0b      	cmp	r2, #11
 80112a4:	d917      	bls.n	80112d6 <_malloc_r+0xc2>
 80112a6:	1961      	adds	r1, r4, r5
 80112a8:	42a3      	cmp	r3, r4
 80112aa:	6025      	str	r5, [r4, #0]
 80112ac:	bf18      	it	ne
 80112ae:	6059      	strne	r1, [r3, #4]
 80112b0:	6863      	ldr	r3, [r4, #4]
 80112b2:	bf08      	it	eq
 80112b4:	f8c8 1000 	streq.w	r1, [r8]
 80112b8:	5162      	str	r2, [r4, r5]
 80112ba:	604b      	str	r3, [r1, #4]
 80112bc:	4630      	mov	r0, r6
 80112be:	f000 f841 	bl	8011344 <__malloc_unlock>
 80112c2:	f104 000b 	add.w	r0, r4, #11
 80112c6:	1d23      	adds	r3, r4, #4
 80112c8:	f020 0007 	bic.w	r0, r0, #7
 80112cc:	1ac2      	subs	r2, r0, r3
 80112ce:	bf1c      	itt	ne
 80112d0:	1a1b      	subne	r3, r3, r0
 80112d2:	50a3      	strne	r3, [r4, r2]
 80112d4:	e7af      	b.n	8011236 <_malloc_r+0x22>
 80112d6:	6862      	ldr	r2, [r4, #4]
 80112d8:	42a3      	cmp	r3, r4
 80112da:	bf0c      	ite	eq
 80112dc:	f8c8 2000 	streq.w	r2, [r8]
 80112e0:	605a      	strne	r2, [r3, #4]
 80112e2:	e7eb      	b.n	80112bc <_malloc_r+0xa8>
 80112e4:	4623      	mov	r3, r4
 80112e6:	6864      	ldr	r4, [r4, #4]
 80112e8:	e7ae      	b.n	8011248 <_malloc_r+0x34>
 80112ea:	463c      	mov	r4, r7
 80112ec:	687f      	ldr	r7, [r7, #4]
 80112ee:	e7b6      	b.n	801125e <_malloc_r+0x4a>
 80112f0:	461a      	mov	r2, r3
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	42a3      	cmp	r3, r4
 80112f6:	d1fb      	bne.n	80112f0 <_malloc_r+0xdc>
 80112f8:	2300      	movs	r3, #0
 80112fa:	6053      	str	r3, [r2, #4]
 80112fc:	e7de      	b.n	80112bc <_malloc_r+0xa8>
 80112fe:	230c      	movs	r3, #12
 8011300:	6033      	str	r3, [r6, #0]
 8011302:	4630      	mov	r0, r6
 8011304:	f000 f81e 	bl	8011344 <__malloc_unlock>
 8011308:	e794      	b.n	8011234 <_malloc_r+0x20>
 801130a:	6005      	str	r5, [r0, #0]
 801130c:	e7d6      	b.n	80112bc <_malloc_r+0xa8>
 801130e:	bf00      	nop
 8011310:	20006f84 	.word	0x20006f84

08011314 <__ascii_mbtowc>:
 8011314:	b082      	sub	sp, #8
 8011316:	b901      	cbnz	r1, 801131a <__ascii_mbtowc+0x6>
 8011318:	a901      	add	r1, sp, #4
 801131a:	b142      	cbz	r2, 801132e <__ascii_mbtowc+0x1a>
 801131c:	b14b      	cbz	r3, 8011332 <__ascii_mbtowc+0x1e>
 801131e:	7813      	ldrb	r3, [r2, #0]
 8011320:	600b      	str	r3, [r1, #0]
 8011322:	7812      	ldrb	r2, [r2, #0]
 8011324:	1e10      	subs	r0, r2, #0
 8011326:	bf18      	it	ne
 8011328:	2001      	movne	r0, #1
 801132a:	b002      	add	sp, #8
 801132c:	4770      	bx	lr
 801132e:	4610      	mov	r0, r2
 8011330:	e7fb      	b.n	801132a <__ascii_mbtowc+0x16>
 8011332:	f06f 0001 	mvn.w	r0, #1
 8011336:	e7f8      	b.n	801132a <__ascii_mbtowc+0x16>

08011338 <__malloc_lock>:
 8011338:	4801      	ldr	r0, [pc, #4]	@ (8011340 <__malloc_lock+0x8>)
 801133a:	f7fe bccf 	b.w	800fcdc <__retarget_lock_acquire_recursive>
 801133e:	bf00      	nop
 8011340:	20006f7e 	.word	0x20006f7e

08011344 <__malloc_unlock>:
 8011344:	4801      	ldr	r0, [pc, #4]	@ (801134c <__malloc_unlock+0x8>)
 8011346:	f7fe bccb 	b.w	800fce0 <__retarget_lock_release_recursive>
 801134a:	bf00      	nop
 801134c:	20006f7e 	.word	0x20006f7e

08011350 <_Balloc>:
 8011350:	b570      	push	{r4, r5, r6, lr}
 8011352:	69c6      	ldr	r6, [r0, #28]
 8011354:	4604      	mov	r4, r0
 8011356:	460d      	mov	r5, r1
 8011358:	b976      	cbnz	r6, 8011378 <_Balloc+0x28>
 801135a:	2010      	movs	r0, #16
 801135c:	f7ff ff28 	bl	80111b0 <malloc>
 8011360:	4602      	mov	r2, r0
 8011362:	61e0      	str	r0, [r4, #28]
 8011364:	b920      	cbnz	r0, 8011370 <_Balloc+0x20>
 8011366:	4b18      	ldr	r3, [pc, #96]	@ (80113c8 <_Balloc+0x78>)
 8011368:	4818      	ldr	r0, [pc, #96]	@ (80113cc <_Balloc+0x7c>)
 801136a:	216b      	movs	r1, #107	@ 0x6b
 801136c:	f7fe fcd8 	bl	800fd20 <__assert_func>
 8011370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011374:	6006      	str	r6, [r0, #0]
 8011376:	60c6      	str	r6, [r0, #12]
 8011378:	69e6      	ldr	r6, [r4, #28]
 801137a:	68f3      	ldr	r3, [r6, #12]
 801137c:	b183      	cbz	r3, 80113a0 <_Balloc+0x50>
 801137e:	69e3      	ldr	r3, [r4, #28]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011386:	b9b8      	cbnz	r0, 80113b8 <_Balloc+0x68>
 8011388:	2101      	movs	r1, #1
 801138a:	fa01 f605 	lsl.w	r6, r1, r5
 801138e:	1d72      	adds	r2, r6, #5
 8011390:	0092      	lsls	r2, r2, #2
 8011392:	4620      	mov	r0, r4
 8011394:	f001 fdb7 	bl	8012f06 <_calloc_r>
 8011398:	b160      	cbz	r0, 80113b4 <_Balloc+0x64>
 801139a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801139e:	e00e      	b.n	80113be <_Balloc+0x6e>
 80113a0:	2221      	movs	r2, #33	@ 0x21
 80113a2:	2104      	movs	r1, #4
 80113a4:	4620      	mov	r0, r4
 80113a6:	f001 fdae 	bl	8012f06 <_calloc_r>
 80113aa:	69e3      	ldr	r3, [r4, #28]
 80113ac:	60f0      	str	r0, [r6, #12]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1e4      	bne.n	801137e <_Balloc+0x2e>
 80113b4:	2000      	movs	r0, #0
 80113b6:	bd70      	pop	{r4, r5, r6, pc}
 80113b8:	6802      	ldr	r2, [r0, #0]
 80113ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113be:	2300      	movs	r3, #0
 80113c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113c4:	e7f7      	b.n	80113b6 <_Balloc+0x66>
 80113c6:	bf00      	nop
 80113c8:	08013d88 	.word	0x08013d88
 80113cc:	08013fba 	.word	0x08013fba

080113d0 <_Bfree>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	69c6      	ldr	r6, [r0, #28]
 80113d4:	4605      	mov	r5, r0
 80113d6:	460c      	mov	r4, r1
 80113d8:	b976      	cbnz	r6, 80113f8 <_Bfree+0x28>
 80113da:	2010      	movs	r0, #16
 80113dc:	f7ff fee8 	bl	80111b0 <malloc>
 80113e0:	4602      	mov	r2, r0
 80113e2:	61e8      	str	r0, [r5, #28]
 80113e4:	b920      	cbnz	r0, 80113f0 <_Bfree+0x20>
 80113e6:	4b09      	ldr	r3, [pc, #36]	@ (801140c <_Bfree+0x3c>)
 80113e8:	4809      	ldr	r0, [pc, #36]	@ (8011410 <_Bfree+0x40>)
 80113ea:	218f      	movs	r1, #143	@ 0x8f
 80113ec:	f7fe fc98 	bl	800fd20 <__assert_func>
 80113f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113f4:	6006      	str	r6, [r0, #0]
 80113f6:	60c6      	str	r6, [r0, #12]
 80113f8:	b13c      	cbz	r4, 801140a <_Bfree+0x3a>
 80113fa:	69eb      	ldr	r3, [r5, #28]
 80113fc:	6862      	ldr	r2, [r4, #4]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011404:	6021      	str	r1, [r4, #0]
 8011406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	08013d88 	.word	0x08013d88
 8011410:	08013fba 	.word	0x08013fba

08011414 <__multadd>:
 8011414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011418:	690d      	ldr	r5, [r1, #16]
 801141a:	4607      	mov	r7, r0
 801141c:	460c      	mov	r4, r1
 801141e:	461e      	mov	r6, r3
 8011420:	f101 0c14 	add.w	ip, r1, #20
 8011424:	2000      	movs	r0, #0
 8011426:	f8dc 3000 	ldr.w	r3, [ip]
 801142a:	b299      	uxth	r1, r3
 801142c:	fb02 6101 	mla	r1, r2, r1, r6
 8011430:	0c1e      	lsrs	r6, r3, #16
 8011432:	0c0b      	lsrs	r3, r1, #16
 8011434:	fb02 3306 	mla	r3, r2, r6, r3
 8011438:	b289      	uxth	r1, r1
 801143a:	3001      	adds	r0, #1
 801143c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011440:	4285      	cmp	r5, r0
 8011442:	f84c 1b04 	str.w	r1, [ip], #4
 8011446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801144a:	dcec      	bgt.n	8011426 <__multadd+0x12>
 801144c:	b30e      	cbz	r6, 8011492 <__multadd+0x7e>
 801144e:	68a3      	ldr	r3, [r4, #8]
 8011450:	42ab      	cmp	r3, r5
 8011452:	dc19      	bgt.n	8011488 <__multadd+0x74>
 8011454:	6861      	ldr	r1, [r4, #4]
 8011456:	4638      	mov	r0, r7
 8011458:	3101      	adds	r1, #1
 801145a:	f7ff ff79 	bl	8011350 <_Balloc>
 801145e:	4680      	mov	r8, r0
 8011460:	b928      	cbnz	r0, 801146e <__multadd+0x5a>
 8011462:	4602      	mov	r2, r0
 8011464:	4b0c      	ldr	r3, [pc, #48]	@ (8011498 <__multadd+0x84>)
 8011466:	480d      	ldr	r0, [pc, #52]	@ (801149c <__multadd+0x88>)
 8011468:	21ba      	movs	r1, #186	@ 0xba
 801146a:	f7fe fc59 	bl	800fd20 <__assert_func>
 801146e:	6922      	ldr	r2, [r4, #16]
 8011470:	3202      	adds	r2, #2
 8011472:	f104 010c 	add.w	r1, r4, #12
 8011476:	0092      	lsls	r2, r2, #2
 8011478:	300c      	adds	r0, #12
 801147a:	f7fe fc3a 	bl	800fcf2 <memcpy>
 801147e:	4621      	mov	r1, r4
 8011480:	4638      	mov	r0, r7
 8011482:	f7ff ffa5 	bl	80113d0 <_Bfree>
 8011486:	4644      	mov	r4, r8
 8011488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801148c:	3501      	adds	r5, #1
 801148e:	615e      	str	r6, [r3, #20]
 8011490:	6125      	str	r5, [r4, #16]
 8011492:	4620      	mov	r0, r4
 8011494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011498:	08013f49 	.word	0x08013f49
 801149c:	08013fba 	.word	0x08013fba

080114a0 <__s2b>:
 80114a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a4:	460c      	mov	r4, r1
 80114a6:	4615      	mov	r5, r2
 80114a8:	461f      	mov	r7, r3
 80114aa:	2209      	movs	r2, #9
 80114ac:	3308      	adds	r3, #8
 80114ae:	4606      	mov	r6, r0
 80114b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80114b4:	2100      	movs	r1, #0
 80114b6:	2201      	movs	r2, #1
 80114b8:	429a      	cmp	r2, r3
 80114ba:	db09      	blt.n	80114d0 <__s2b+0x30>
 80114bc:	4630      	mov	r0, r6
 80114be:	f7ff ff47 	bl	8011350 <_Balloc>
 80114c2:	b940      	cbnz	r0, 80114d6 <__s2b+0x36>
 80114c4:	4602      	mov	r2, r0
 80114c6:	4b19      	ldr	r3, [pc, #100]	@ (801152c <__s2b+0x8c>)
 80114c8:	4819      	ldr	r0, [pc, #100]	@ (8011530 <__s2b+0x90>)
 80114ca:	21d3      	movs	r1, #211	@ 0xd3
 80114cc:	f7fe fc28 	bl	800fd20 <__assert_func>
 80114d0:	0052      	lsls	r2, r2, #1
 80114d2:	3101      	adds	r1, #1
 80114d4:	e7f0      	b.n	80114b8 <__s2b+0x18>
 80114d6:	9b08      	ldr	r3, [sp, #32]
 80114d8:	6143      	str	r3, [r0, #20]
 80114da:	2d09      	cmp	r5, #9
 80114dc:	f04f 0301 	mov.w	r3, #1
 80114e0:	6103      	str	r3, [r0, #16]
 80114e2:	dd16      	ble.n	8011512 <__s2b+0x72>
 80114e4:	f104 0909 	add.w	r9, r4, #9
 80114e8:	46c8      	mov	r8, r9
 80114ea:	442c      	add	r4, r5
 80114ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80114f0:	4601      	mov	r1, r0
 80114f2:	3b30      	subs	r3, #48	@ 0x30
 80114f4:	220a      	movs	r2, #10
 80114f6:	4630      	mov	r0, r6
 80114f8:	f7ff ff8c 	bl	8011414 <__multadd>
 80114fc:	45a0      	cmp	r8, r4
 80114fe:	d1f5      	bne.n	80114ec <__s2b+0x4c>
 8011500:	f1a5 0408 	sub.w	r4, r5, #8
 8011504:	444c      	add	r4, r9
 8011506:	1b2d      	subs	r5, r5, r4
 8011508:	1963      	adds	r3, r4, r5
 801150a:	42bb      	cmp	r3, r7
 801150c:	db04      	blt.n	8011518 <__s2b+0x78>
 801150e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011512:	340a      	adds	r4, #10
 8011514:	2509      	movs	r5, #9
 8011516:	e7f6      	b.n	8011506 <__s2b+0x66>
 8011518:	f814 3b01 	ldrb.w	r3, [r4], #1
 801151c:	4601      	mov	r1, r0
 801151e:	3b30      	subs	r3, #48	@ 0x30
 8011520:	220a      	movs	r2, #10
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ff76 	bl	8011414 <__multadd>
 8011528:	e7ee      	b.n	8011508 <__s2b+0x68>
 801152a:	bf00      	nop
 801152c:	08013f49 	.word	0x08013f49
 8011530:	08013fba 	.word	0x08013fba

08011534 <__hi0bits>:
 8011534:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011538:	4603      	mov	r3, r0
 801153a:	bf36      	itet	cc
 801153c:	0403      	lslcc	r3, r0, #16
 801153e:	2000      	movcs	r0, #0
 8011540:	2010      	movcc	r0, #16
 8011542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011546:	bf3c      	itt	cc
 8011548:	021b      	lslcc	r3, r3, #8
 801154a:	3008      	addcc	r0, #8
 801154c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011550:	bf3c      	itt	cc
 8011552:	011b      	lslcc	r3, r3, #4
 8011554:	3004      	addcc	r0, #4
 8011556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801155a:	bf3c      	itt	cc
 801155c:	009b      	lslcc	r3, r3, #2
 801155e:	3002      	addcc	r0, #2
 8011560:	2b00      	cmp	r3, #0
 8011562:	db05      	blt.n	8011570 <__hi0bits+0x3c>
 8011564:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011568:	f100 0001 	add.w	r0, r0, #1
 801156c:	bf08      	it	eq
 801156e:	2020      	moveq	r0, #32
 8011570:	4770      	bx	lr

08011572 <__lo0bits>:
 8011572:	6803      	ldr	r3, [r0, #0]
 8011574:	4602      	mov	r2, r0
 8011576:	f013 0007 	ands.w	r0, r3, #7
 801157a:	d00b      	beq.n	8011594 <__lo0bits+0x22>
 801157c:	07d9      	lsls	r1, r3, #31
 801157e:	d421      	bmi.n	80115c4 <__lo0bits+0x52>
 8011580:	0798      	lsls	r0, r3, #30
 8011582:	bf49      	itett	mi
 8011584:	085b      	lsrmi	r3, r3, #1
 8011586:	089b      	lsrpl	r3, r3, #2
 8011588:	2001      	movmi	r0, #1
 801158a:	6013      	strmi	r3, [r2, #0]
 801158c:	bf5c      	itt	pl
 801158e:	6013      	strpl	r3, [r2, #0]
 8011590:	2002      	movpl	r0, #2
 8011592:	4770      	bx	lr
 8011594:	b299      	uxth	r1, r3
 8011596:	b909      	cbnz	r1, 801159c <__lo0bits+0x2a>
 8011598:	0c1b      	lsrs	r3, r3, #16
 801159a:	2010      	movs	r0, #16
 801159c:	b2d9      	uxtb	r1, r3
 801159e:	b909      	cbnz	r1, 80115a4 <__lo0bits+0x32>
 80115a0:	3008      	adds	r0, #8
 80115a2:	0a1b      	lsrs	r3, r3, #8
 80115a4:	0719      	lsls	r1, r3, #28
 80115a6:	bf04      	itt	eq
 80115a8:	091b      	lsreq	r3, r3, #4
 80115aa:	3004      	addeq	r0, #4
 80115ac:	0799      	lsls	r1, r3, #30
 80115ae:	bf04      	itt	eq
 80115b0:	089b      	lsreq	r3, r3, #2
 80115b2:	3002      	addeq	r0, #2
 80115b4:	07d9      	lsls	r1, r3, #31
 80115b6:	d403      	bmi.n	80115c0 <__lo0bits+0x4e>
 80115b8:	085b      	lsrs	r3, r3, #1
 80115ba:	f100 0001 	add.w	r0, r0, #1
 80115be:	d003      	beq.n	80115c8 <__lo0bits+0x56>
 80115c0:	6013      	str	r3, [r2, #0]
 80115c2:	4770      	bx	lr
 80115c4:	2000      	movs	r0, #0
 80115c6:	4770      	bx	lr
 80115c8:	2020      	movs	r0, #32
 80115ca:	4770      	bx	lr

080115cc <__i2b>:
 80115cc:	b510      	push	{r4, lr}
 80115ce:	460c      	mov	r4, r1
 80115d0:	2101      	movs	r1, #1
 80115d2:	f7ff febd 	bl	8011350 <_Balloc>
 80115d6:	4602      	mov	r2, r0
 80115d8:	b928      	cbnz	r0, 80115e6 <__i2b+0x1a>
 80115da:	4b05      	ldr	r3, [pc, #20]	@ (80115f0 <__i2b+0x24>)
 80115dc:	4805      	ldr	r0, [pc, #20]	@ (80115f4 <__i2b+0x28>)
 80115de:	f240 1145 	movw	r1, #325	@ 0x145
 80115e2:	f7fe fb9d 	bl	800fd20 <__assert_func>
 80115e6:	2301      	movs	r3, #1
 80115e8:	6144      	str	r4, [r0, #20]
 80115ea:	6103      	str	r3, [r0, #16]
 80115ec:	bd10      	pop	{r4, pc}
 80115ee:	bf00      	nop
 80115f0:	08013f49 	.word	0x08013f49
 80115f4:	08013fba 	.word	0x08013fba

080115f8 <__multiply>:
 80115f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115fc:	4617      	mov	r7, r2
 80115fe:	690a      	ldr	r2, [r1, #16]
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	429a      	cmp	r2, r3
 8011604:	bfa8      	it	ge
 8011606:	463b      	movge	r3, r7
 8011608:	4689      	mov	r9, r1
 801160a:	bfa4      	itt	ge
 801160c:	460f      	movge	r7, r1
 801160e:	4699      	movge	r9, r3
 8011610:	693d      	ldr	r5, [r7, #16]
 8011612:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	6879      	ldr	r1, [r7, #4]
 801161a:	eb05 060a 	add.w	r6, r5, sl
 801161e:	42b3      	cmp	r3, r6
 8011620:	b085      	sub	sp, #20
 8011622:	bfb8      	it	lt
 8011624:	3101      	addlt	r1, #1
 8011626:	f7ff fe93 	bl	8011350 <_Balloc>
 801162a:	b930      	cbnz	r0, 801163a <__multiply+0x42>
 801162c:	4602      	mov	r2, r0
 801162e:	4b41      	ldr	r3, [pc, #260]	@ (8011734 <__multiply+0x13c>)
 8011630:	4841      	ldr	r0, [pc, #260]	@ (8011738 <__multiply+0x140>)
 8011632:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011636:	f7fe fb73 	bl	800fd20 <__assert_func>
 801163a:	f100 0414 	add.w	r4, r0, #20
 801163e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011642:	4623      	mov	r3, r4
 8011644:	2200      	movs	r2, #0
 8011646:	4573      	cmp	r3, lr
 8011648:	d320      	bcc.n	801168c <__multiply+0x94>
 801164a:	f107 0814 	add.w	r8, r7, #20
 801164e:	f109 0114 	add.w	r1, r9, #20
 8011652:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011656:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801165a:	9302      	str	r3, [sp, #8]
 801165c:	1beb      	subs	r3, r5, r7
 801165e:	3b15      	subs	r3, #21
 8011660:	f023 0303 	bic.w	r3, r3, #3
 8011664:	3304      	adds	r3, #4
 8011666:	3715      	adds	r7, #21
 8011668:	42bd      	cmp	r5, r7
 801166a:	bf38      	it	cc
 801166c:	2304      	movcc	r3, #4
 801166e:	9301      	str	r3, [sp, #4]
 8011670:	9b02      	ldr	r3, [sp, #8]
 8011672:	9103      	str	r1, [sp, #12]
 8011674:	428b      	cmp	r3, r1
 8011676:	d80c      	bhi.n	8011692 <__multiply+0x9a>
 8011678:	2e00      	cmp	r6, #0
 801167a:	dd03      	ble.n	8011684 <__multiply+0x8c>
 801167c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011680:	2b00      	cmp	r3, #0
 8011682:	d055      	beq.n	8011730 <__multiply+0x138>
 8011684:	6106      	str	r6, [r0, #16]
 8011686:	b005      	add	sp, #20
 8011688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801168c:	f843 2b04 	str.w	r2, [r3], #4
 8011690:	e7d9      	b.n	8011646 <__multiply+0x4e>
 8011692:	f8b1 a000 	ldrh.w	sl, [r1]
 8011696:	f1ba 0f00 	cmp.w	sl, #0
 801169a:	d01f      	beq.n	80116dc <__multiply+0xe4>
 801169c:	46c4      	mov	ip, r8
 801169e:	46a1      	mov	r9, r4
 80116a0:	2700      	movs	r7, #0
 80116a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80116a6:	f8d9 3000 	ldr.w	r3, [r9]
 80116aa:	fa1f fb82 	uxth.w	fp, r2
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80116b4:	443b      	add	r3, r7
 80116b6:	f8d9 7000 	ldr.w	r7, [r9]
 80116ba:	0c12      	lsrs	r2, r2, #16
 80116bc:	0c3f      	lsrs	r7, r7, #16
 80116be:	fb0a 7202 	mla	r2, sl, r2, r7
 80116c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116cc:	4565      	cmp	r5, ip
 80116ce:	f849 3b04 	str.w	r3, [r9], #4
 80116d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80116d6:	d8e4      	bhi.n	80116a2 <__multiply+0xaa>
 80116d8:	9b01      	ldr	r3, [sp, #4]
 80116da:	50e7      	str	r7, [r4, r3]
 80116dc:	9b03      	ldr	r3, [sp, #12]
 80116de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80116e2:	3104      	adds	r1, #4
 80116e4:	f1b9 0f00 	cmp.w	r9, #0
 80116e8:	d020      	beq.n	801172c <__multiply+0x134>
 80116ea:	6823      	ldr	r3, [r4, #0]
 80116ec:	4647      	mov	r7, r8
 80116ee:	46a4      	mov	ip, r4
 80116f0:	f04f 0a00 	mov.w	sl, #0
 80116f4:	f8b7 b000 	ldrh.w	fp, [r7]
 80116f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80116fc:	fb09 220b 	mla	r2, r9, fp, r2
 8011700:	4452      	add	r2, sl
 8011702:	b29b      	uxth	r3, r3
 8011704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011708:	f84c 3b04 	str.w	r3, [ip], #4
 801170c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011714:	f8bc 3000 	ldrh.w	r3, [ip]
 8011718:	fb09 330a 	mla	r3, r9, sl, r3
 801171c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011720:	42bd      	cmp	r5, r7
 8011722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011726:	d8e5      	bhi.n	80116f4 <__multiply+0xfc>
 8011728:	9a01      	ldr	r2, [sp, #4]
 801172a:	50a3      	str	r3, [r4, r2]
 801172c:	3404      	adds	r4, #4
 801172e:	e79f      	b.n	8011670 <__multiply+0x78>
 8011730:	3e01      	subs	r6, #1
 8011732:	e7a1      	b.n	8011678 <__multiply+0x80>
 8011734:	08013f49 	.word	0x08013f49
 8011738:	08013fba 	.word	0x08013fba

0801173c <__pow5mult>:
 801173c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011740:	4615      	mov	r5, r2
 8011742:	f012 0203 	ands.w	r2, r2, #3
 8011746:	4607      	mov	r7, r0
 8011748:	460e      	mov	r6, r1
 801174a:	d007      	beq.n	801175c <__pow5mult+0x20>
 801174c:	4c25      	ldr	r4, [pc, #148]	@ (80117e4 <__pow5mult+0xa8>)
 801174e:	3a01      	subs	r2, #1
 8011750:	2300      	movs	r3, #0
 8011752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011756:	f7ff fe5d 	bl	8011414 <__multadd>
 801175a:	4606      	mov	r6, r0
 801175c:	10ad      	asrs	r5, r5, #2
 801175e:	d03d      	beq.n	80117dc <__pow5mult+0xa0>
 8011760:	69fc      	ldr	r4, [r7, #28]
 8011762:	b97c      	cbnz	r4, 8011784 <__pow5mult+0x48>
 8011764:	2010      	movs	r0, #16
 8011766:	f7ff fd23 	bl	80111b0 <malloc>
 801176a:	4602      	mov	r2, r0
 801176c:	61f8      	str	r0, [r7, #28]
 801176e:	b928      	cbnz	r0, 801177c <__pow5mult+0x40>
 8011770:	4b1d      	ldr	r3, [pc, #116]	@ (80117e8 <__pow5mult+0xac>)
 8011772:	481e      	ldr	r0, [pc, #120]	@ (80117ec <__pow5mult+0xb0>)
 8011774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011778:	f7fe fad2 	bl	800fd20 <__assert_func>
 801177c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011780:	6004      	str	r4, [r0, #0]
 8011782:	60c4      	str	r4, [r0, #12]
 8011784:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801178c:	b94c      	cbnz	r4, 80117a2 <__pow5mult+0x66>
 801178e:	f240 2171 	movw	r1, #625	@ 0x271
 8011792:	4638      	mov	r0, r7
 8011794:	f7ff ff1a 	bl	80115cc <__i2b>
 8011798:	2300      	movs	r3, #0
 801179a:	f8c8 0008 	str.w	r0, [r8, #8]
 801179e:	4604      	mov	r4, r0
 80117a0:	6003      	str	r3, [r0, #0]
 80117a2:	f04f 0900 	mov.w	r9, #0
 80117a6:	07eb      	lsls	r3, r5, #31
 80117a8:	d50a      	bpl.n	80117c0 <__pow5mult+0x84>
 80117aa:	4631      	mov	r1, r6
 80117ac:	4622      	mov	r2, r4
 80117ae:	4638      	mov	r0, r7
 80117b0:	f7ff ff22 	bl	80115f8 <__multiply>
 80117b4:	4631      	mov	r1, r6
 80117b6:	4680      	mov	r8, r0
 80117b8:	4638      	mov	r0, r7
 80117ba:	f7ff fe09 	bl	80113d0 <_Bfree>
 80117be:	4646      	mov	r6, r8
 80117c0:	106d      	asrs	r5, r5, #1
 80117c2:	d00b      	beq.n	80117dc <__pow5mult+0xa0>
 80117c4:	6820      	ldr	r0, [r4, #0]
 80117c6:	b938      	cbnz	r0, 80117d8 <__pow5mult+0x9c>
 80117c8:	4622      	mov	r2, r4
 80117ca:	4621      	mov	r1, r4
 80117cc:	4638      	mov	r0, r7
 80117ce:	f7ff ff13 	bl	80115f8 <__multiply>
 80117d2:	6020      	str	r0, [r4, #0]
 80117d4:	f8c0 9000 	str.w	r9, [r0]
 80117d8:	4604      	mov	r4, r0
 80117da:	e7e4      	b.n	80117a6 <__pow5mult+0x6a>
 80117dc:	4630      	mov	r0, r6
 80117de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117e2:	bf00      	nop
 80117e4:	080142cc 	.word	0x080142cc
 80117e8:	08013d88 	.word	0x08013d88
 80117ec:	08013fba 	.word	0x08013fba

080117f0 <__lshift>:
 80117f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f4:	460c      	mov	r4, r1
 80117f6:	6849      	ldr	r1, [r1, #4]
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117fe:	68a3      	ldr	r3, [r4, #8]
 8011800:	4607      	mov	r7, r0
 8011802:	4691      	mov	r9, r2
 8011804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011808:	f108 0601 	add.w	r6, r8, #1
 801180c:	42b3      	cmp	r3, r6
 801180e:	db0b      	blt.n	8011828 <__lshift+0x38>
 8011810:	4638      	mov	r0, r7
 8011812:	f7ff fd9d 	bl	8011350 <_Balloc>
 8011816:	4605      	mov	r5, r0
 8011818:	b948      	cbnz	r0, 801182e <__lshift+0x3e>
 801181a:	4602      	mov	r2, r0
 801181c:	4b28      	ldr	r3, [pc, #160]	@ (80118c0 <__lshift+0xd0>)
 801181e:	4829      	ldr	r0, [pc, #164]	@ (80118c4 <__lshift+0xd4>)
 8011820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011824:	f7fe fa7c 	bl	800fd20 <__assert_func>
 8011828:	3101      	adds	r1, #1
 801182a:	005b      	lsls	r3, r3, #1
 801182c:	e7ee      	b.n	801180c <__lshift+0x1c>
 801182e:	2300      	movs	r3, #0
 8011830:	f100 0114 	add.w	r1, r0, #20
 8011834:	f100 0210 	add.w	r2, r0, #16
 8011838:	4618      	mov	r0, r3
 801183a:	4553      	cmp	r3, sl
 801183c:	db33      	blt.n	80118a6 <__lshift+0xb6>
 801183e:	6920      	ldr	r0, [r4, #16]
 8011840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011844:	f104 0314 	add.w	r3, r4, #20
 8011848:	f019 091f 	ands.w	r9, r9, #31
 801184c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011854:	d02b      	beq.n	80118ae <__lshift+0xbe>
 8011856:	f1c9 0e20 	rsb	lr, r9, #32
 801185a:	468a      	mov	sl, r1
 801185c:	2200      	movs	r2, #0
 801185e:	6818      	ldr	r0, [r3, #0]
 8011860:	fa00 f009 	lsl.w	r0, r0, r9
 8011864:	4310      	orrs	r0, r2
 8011866:	f84a 0b04 	str.w	r0, [sl], #4
 801186a:	f853 2b04 	ldr.w	r2, [r3], #4
 801186e:	459c      	cmp	ip, r3
 8011870:	fa22 f20e 	lsr.w	r2, r2, lr
 8011874:	d8f3      	bhi.n	801185e <__lshift+0x6e>
 8011876:	ebac 0304 	sub.w	r3, ip, r4
 801187a:	3b15      	subs	r3, #21
 801187c:	f023 0303 	bic.w	r3, r3, #3
 8011880:	3304      	adds	r3, #4
 8011882:	f104 0015 	add.w	r0, r4, #21
 8011886:	4560      	cmp	r0, ip
 8011888:	bf88      	it	hi
 801188a:	2304      	movhi	r3, #4
 801188c:	50ca      	str	r2, [r1, r3]
 801188e:	b10a      	cbz	r2, 8011894 <__lshift+0xa4>
 8011890:	f108 0602 	add.w	r6, r8, #2
 8011894:	3e01      	subs	r6, #1
 8011896:	4638      	mov	r0, r7
 8011898:	612e      	str	r6, [r5, #16]
 801189a:	4621      	mov	r1, r4
 801189c:	f7ff fd98 	bl	80113d0 <_Bfree>
 80118a0:	4628      	mov	r0, r5
 80118a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118aa:	3301      	adds	r3, #1
 80118ac:	e7c5      	b.n	801183a <__lshift+0x4a>
 80118ae:	3904      	subs	r1, #4
 80118b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80118b8:	459c      	cmp	ip, r3
 80118ba:	d8f9      	bhi.n	80118b0 <__lshift+0xc0>
 80118bc:	e7ea      	b.n	8011894 <__lshift+0xa4>
 80118be:	bf00      	nop
 80118c0:	08013f49 	.word	0x08013f49
 80118c4:	08013fba 	.word	0x08013fba

080118c8 <__mcmp>:
 80118c8:	690a      	ldr	r2, [r1, #16]
 80118ca:	4603      	mov	r3, r0
 80118cc:	6900      	ldr	r0, [r0, #16]
 80118ce:	1a80      	subs	r0, r0, r2
 80118d0:	b530      	push	{r4, r5, lr}
 80118d2:	d10e      	bne.n	80118f2 <__mcmp+0x2a>
 80118d4:	3314      	adds	r3, #20
 80118d6:	3114      	adds	r1, #20
 80118d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80118dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80118e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80118e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80118e8:	4295      	cmp	r5, r2
 80118ea:	d003      	beq.n	80118f4 <__mcmp+0x2c>
 80118ec:	d205      	bcs.n	80118fa <__mcmp+0x32>
 80118ee:	f04f 30ff 	mov.w	r0, #4294967295
 80118f2:	bd30      	pop	{r4, r5, pc}
 80118f4:	42a3      	cmp	r3, r4
 80118f6:	d3f3      	bcc.n	80118e0 <__mcmp+0x18>
 80118f8:	e7fb      	b.n	80118f2 <__mcmp+0x2a>
 80118fa:	2001      	movs	r0, #1
 80118fc:	e7f9      	b.n	80118f2 <__mcmp+0x2a>
	...

08011900 <__mdiff>:
 8011900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	4689      	mov	r9, r1
 8011906:	4606      	mov	r6, r0
 8011908:	4611      	mov	r1, r2
 801190a:	4648      	mov	r0, r9
 801190c:	4614      	mov	r4, r2
 801190e:	f7ff ffdb 	bl	80118c8 <__mcmp>
 8011912:	1e05      	subs	r5, r0, #0
 8011914:	d112      	bne.n	801193c <__mdiff+0x3c>
 8011916:	4629      	mov	r1, r5
 8011918:	4630      	mov	r0, r6
 801191a:	f7ff fd19 	bl	8011350 <_Balloc>
 801191e:	4602      	mov	r2, r0
 8011920:	b928      	cbnz	r0, 801192e <__mdiff+0x2e>
 8011922:	4b3f      	ldr	r3, [pc, #252]	@ (8011a20 <__mdiff+0x120>)
 8011924:	f240 2137 	movw	r1, #567	@ 0x237
 8011928:	483e      	ldr	r0, [pc, #248]	@ (8011a24 <__mdiff+0x124>)
 801192a:	f7fe f9f9 	bl	800fd20 <__assert_func>
 801192e:	2301      	movs	r3, #1
 8011930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011934:	4610      	mov	r0, r2
 8011936:	b003      	add	sp, #12
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	bfbc      	itt	lt
 801193e:	464b      	movlt	r3, r9
 8011940:	46a1      	movlt	r9, r4
 8011942:	4630      	mov	r0, r6
 8011944:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011948:	bfba      	itte	lt
 801194a:	461c      	movlt	r4, r3
 801194c:	2501      	movlt	r5, #1
 801194e:	2500      	movge	r5, #0
 8011950:	f7ff fcfe 	bl	8011350 <_Balloc>
 8011954:	4602      	mov	r2, r0
 8011956:	b918      	cbnz	r0, 8011960 <__mdiff+0x60>
 8011958:	4b31      	ldr	r3, [pc, #196]	@ (8011a20 <__mdiff+0x120>)
 801195a:	f240 2145 	movw	r1, #581	@ 0x245
 801195e:	e7e3      	b.n	8011928 <__mdiff+0x28>
 8011960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011964:	6926      	ldr	r6, [r4, #16]
 8011966:	60c5      	str	r5, [r0, #12]
 8011968:	f109 0310 	add.w	r3, r9, #16
 801196c:	f109 0514 	add.w	r5, r9, #20
 8011970:	f104 0e14 	add.w	lr, r4, #20
 8011974:	f100 0b14 	add.w	fp, r0, #20
 8011978:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801197c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011980:	9301      	str	r3, [sp, #4]
 8011982:	46d9      	mov	r9, fp
 8011984:	f04f 0c00 	mov.w	ip, #0
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801198e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011992:	9301      	str	r3, [sp, #4]
 8011994:	fa1f f38a 	uxth.w	r3, sl
 8011998:	4619      	mov	r1, r3
 801199a:	b283      	uxth	r3, r0
 801199c:	1acb      	subs	r3, r1, r3
 801199e:	0c00      	lsrs	r0, r0, #16
 80119a0:	4463      	add	r3, ip
 80119a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80119a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80119b0:	4576      	cmp	r6, lr
 80119b2:	f849 3b04 	str.w	r3, [r9], #4
 80119b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119ba:	d8e5      	bhi.n	8011988 <__mdiff+0x88>
 80119bc:	1b33      	subs	r3, r6, r4
 80119be:	3b15      	subs	r3, #21
 80119c0:	f023 0303 	bic.w	r3, r3, #3
 80119c4:	3415      	adds	r4, #21
 80119c6:	3304      	adds	r3, #4
 80119c8:	42a6      	cmp	r6, r4
 80119ca:	bf38      	it	cc
 80119cc:	2304      	movcc	r3, #4
 80119ce:	441d      	add	r5, r3
 80119d0:	445b      	add	r3, fp
 80119d2:	461e      	mov	r6, r3
 80119d4:	462c      	mov	r4, r5
 80119d6:	4544      	cmp	r4, r8
 80119d8:	d30e      	bcc.n	80119f8 <__mdiff+0xf8>
 80119da:	f108 0103 	add.w	r1, r8, #3
 80119de:	1b49      	subs	r1, r1, r5
 80119e0:	f021 0103 	bic.w	r1, r1, #3
 80119e4:	3d03      	subs	r5, #3
 80119e6:	45a8      	cmp	r8, r5
 80119e8:	bf38      	it	cc
 80119ea:	2100      	movcc	r1, #0
 80119ec:	440b      	add	r3, r1
 80119ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119f2:	b191      	cbz	r1, 8011a1a <__mdiff+0x11a>
 80119f4:	6117      	str	r7, [r2, #16]
 80119f6:	e79d      	b.n	8011934 <__mdiff+0x34>
 80119f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80119fc:	46e6      	mov	lr, ip
 80119fe:	0c08      	lsrs	r0, r1, #16
 8011a00:	fa1c fc81 	uxtah	ip, ip, r1
 8011a04:	4471      	add	r1, lr
 8011a06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011a0a:	b289      	uxth	r1, r1
 8011a0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011a10:	f846 1b04 	str.w	r1, [r6], #4
 8011a14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a18:	e7dd      	b.n	80119d6 <__mdiff+0xd6>
 8011a1a:	3f01      	subs	r7, #1
 8011a1c:	e7e7      	b.n	80119ee <__mdiff+0xee>
 8011a1e:	bf00      	nop
 8011a20:	08013f49 	.word	0x08013f49
 8011a24:	08013fba 	.word	0x08013fba

08011a28 <__ulp>:
 8011a28:	b082      	sub	sp, #8
 8011a2a:	ed8d 0b00 	vstr	d0, [sp]
 8011a2e:	9a01      	ldr	r2, [sp, #4]
 8011a30:	4b0f      	ldr	r3, [pc, #60]	@ (8011a70 <__ulp+0x48>)
 8011a32:	4013      	ands	r3, r2
 8011a34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	dc08      	bgt.n	8011a4e <__ulp+0x26>
 8011a3c:	425b      	negs	r3, r3
 8011a3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011a42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011a46:	da04      	bge.n	8011a52 <__ulp+0x2a>
 8011a48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011a4c:	4113      	asrs	r3, r2
 8011a4e:	2200      	movs	r2, #0
 8011a50:	e008      	b.n	8011a64 <__ulp+0x3c>
 8011a52:	f1a2 0314 	sub.w	r3, r2, #20
 8011a56:	2b1e      	cmp	r3, #30
 8011a58:	bfda      	itte	le
 8011a5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011a5e:	40da      	lsrle	r2, r3
 8011a60:	2201      	movgt	r2, #1
 8011a62:	2300      	movs	r3, #0
 8011a64:	4619      	mov	r1, r3
 8011a66:	4610      	mov	r0, r2
 8011a68:	ec41 0b10 	vmov	d0, r0, r1
 8011a6c:	b002      	add	sp, #8
 8011a6e:	4770      	bx	lr
 8011a70:	7ff00000 	.word	0x7ff00000

08011a74 <__b2d>:
 8011a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a78:	6906      	ldr	r6, [r0, #16]
 8011a7a:	f100 0814 	add.w	r8, r0, #20
 8011a7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011a82:	1f37      	subs	r7, r6, #4
 8011a84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011a88:	4610      	mov	r0, r2
 8011a8a:	f7ff fd53 	bl	8011534 <__hi0bits>
 8011a8e:	f1c0 0320 	rsb	r3, r0, #32
 8011a92:	280a      	cmp	r0, #10
 8011a94:	600b      	str	r3, [r1, #0]
 8011a96:	491b      	ldr	r1, [pc, #108]	@ (8011b04 <__b2d+0x90>)
 8011a98:	dc15      	bgt.n	8011ac6 <__b2d+0x52>
 8011a9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011a9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011aa2:	45b8      	cmp	r8, r7
 8011aa4:	ea43 0501 	orr.w	r5, r3, r1
 8011aa8:	bf34      	ite	cc
 8011aaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011aae:	2300      	movcs	r3, #0
 8011ab0:	3015      	adds	r0, #21
 8011ab2:	fa02 f000 	lsl.w	r0, r2, r0
 8011ab6:	fa23 f30c 	lsr.w	r3, r3, ip
 8011aba:	4303      	orrs	r3, r0
 8011abc:	461c      	mov	r4, r3
 8011abe:	ec45 4b10 	vmov	d0, r4, r5
 8011ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac6:	45b8      	cmp	r8, r7
 8011ac8:	bf3a      	itte	cc
 8011aca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ace:	f1a6 0708 	subcc.w	r7, r6, #8
 8011ad2:	2300      	movcs	r3, #0
 8011ad4:	380b      	subs	r0, #11
 8011ad6:	d012      	beq.n	8011afe <__b2d+0x8a>
 8011ad8:	f1c0 0120 	rsb	r1, r0, #32
 8011adc:	fa23 f401 	lsr.w	r4, r3, r1
 8011ae0:	4082      	lsls	r2, r0
 8011ae2:	4322      	orrs	r2, r4
 8011ae4:	4547      	cmp	r7, r8
 8011ae6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011aea:	bf8c      	ite	hi
 8011aec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011af0:	2200      	movls	r2, #0
 8011af2:	4083      	lsls	r3, r0
 8011af4:	40ca      	lsrs	r2, r1
 8011af6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011afa:	4313      	orrs	r3, r2
 8011afc:	e7de      	b.n	8011abc <__b2d+0x48>
 8011afe:	ea42 0501 	orr.w	r5, r2, r1
 8011b02:	e7db      	b.n	8011abc <__b2d+0x48>
 8011b04:	3ff00000 	.word	0x3ff00000

08011b08 <__d2b>:
 8011b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b0c:	460f      	mov	r7, r1
 8011b0e:	2101      	movs	r1, #1
 8011b10:	ec59 8b10 	vmov	r8, r9, d0
 8011b14:	4616      	mov	r6, r2
 8011b16:	f7ff fc1b 	bl	8011350 <_Balloc>
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	b930      	cbnz	r0, 8011b2c <__d2b+0x24>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	4b23      	ldr	r3, [pc, #140]	@ (8011bb0 <__d2b+0xa8>)
 8011b22:	4824      	ldr	r0, [pc, #144]	@ (8011bb4 <__d2b+0xac>)
 8011b24:	f240 310f 	movw	r1, #783	@ 0x30f
 8011b28:	f7fe f8fa 	bl	800fd20 <__assert_func>
 8011b2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b34:	b10d      	cbz	r5, 8011b3a <__d2b+0x32>
 8011b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	f1b8 0300 	subs.w	r3, r8, #0
 8011b40:	d023      	beq.n	8011b8a <__d2b+0x82>
 8011b42:	4668      	mov	r0, sp
 8011b44:	9300      	str	r3, [sp, #0]
 8011b46:	f7ff fd14 	bl	8011572 <__lo0bits>
 8011b4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b4e:	b1d0      	cbz	r0, 8011b86 <__d2b+0x7e>
 8011b50:	f1c0 0320 	rsb	r3, r0, #32
 8011b54:	fa02 f303 	lsl.w	r3, r2, r3
 8011b58:	430b      	orrs	r3, r1
 8011b5a:	40c2      	lsrs	r2, r0
 8011b5c:	6163      	str	r3, [r4, #20]
 8011b5e:	9201      	str	r2, [sp, #4]
 8011b60:	9b01      	ldr	r3, [sp, #4]
 8011b62:	61a3      	str	r3, [r4, #24]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	bf0c      	ite	eq
 8011b68:	2201      	moveq	r2, #1
 8011b6a:	2202      	movne	r2, #2
 8011b6c:	6122      	str	r2, [r4, #16]
 8011b6e:	b1a5      	cbz	r5, 8011b9a <__d2b+0x92>
 8011b70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b74:	4405      	add	r5, r0
 8011b76:	603d      	str	r5, [r7, #0]
 8011b78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011b7c:	6030      	str	r0, [r6, #0]
 8011b7e:	4620      	mov	r0, r4
 8011b80:	b003      	add	sp, #12
 8011b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b86:	6161      	str	r1, [r4, #20]
 8011b88:	e7ea      	b.n	8011b60 <__d2b+0x58>
 8011b8a:	a801      	add	r0, sp, #4
 8011b8c:	f7ff fcf1 	bl	8011572 <__lo0bits>
 8011b90:	9b01      	ldr	r3, [sp, #4]
 8011b92:	6163      	str	r3, [r4, #20]
 8011b94:	3020      	adds	r0, #32
 8011b96:	2201      	movs	r2, #1
 8011b98:	e7e8      	b.n	8011b6c <__d2b+0x64>
 8011b9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011ba2:	6038      	str	r0, [r7, #0]
 8011ba4:	6918      	ldr	r0, [r3, #16]
 8011ba6:	f7ff fcc5 	bl	8011534 <__hi0bits>
 8011baa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011bae:	e7e5      	b.n	8011b7c <__d2b+0x74>
 8011bb0:	08013f49 	.word	0x08013f49
 8011bb4:	08013fba 	.word	0x08013fba

08011bb8 <__ratio>:
 8011bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	b085      	sub	sp, #20
 8011bbe:	e9cd 1000 	strd	r1, r0, [sp]
 8011bc2:	a902      	add	r1, sp, #8
 8011bc4:	f7ff ff56 	bl	8011a74 <__b2d>
 8011bc8:	9800      	ldr	r0, [sp, #0]
 8011bca:	a903      	add	r1, sp, #12
 8011bcc:	ec55 4b10 	vmov	r4, r5, d0
 8011bd0:	f7ff ff50 	bl	8011a74 <__b2d>
 8011bd4:	9b01      	ldr	r3, [sp, #4]
 8011bd6:	6919      	ldr	r1, [r3, #16]
 8011bd8:	9b00      	ldr	r3, [sp, #0]
 8011bda:	691b      	ldr	r3, [r3, #16]
 8011bdc:	1ac9      	subs	r1, r1, r3
 8011bde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011be2:	1a9b      	subs	r3, r3, r2
 8011be4:	ec5b ab10 	vmov	sl, fp, d0
 8011be8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	bfce      	itee	gt
 8011bf0:	462a      	movgt	r2, r5
 8011bf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011bf6:	465a      	movle	r2, fp
 8011bf8:	462f      	mov	r7, r5
 8011bfa:	46d9      	mov	r9, fp
 8011bfc:	bfcc      	ite	gt
 8011bfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011c02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011c06:	464b      	mov	r3, r9
 8011c08:	4652      	mov	r2, sl
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	4639      	mov	r1, r7
 8011c0e:	f7ee fe35 	bl	800087c <__aeabi_ddiv>
 8011c12:	ec41 0b10 	vmov	d0, r0, r1
 8011c16:	b005      	add	sp, #20
 8011c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c1c <__copybits>:
 8011c1c:	3901      	subs	r1, #1
 8011c1e:	b570      	push	{r4, r5, r6, lr}
 8011c20:	1149      	asrs	r1, r1, #5
 8011c22:	6914      	ldr	r4, [r2, #16]
 8011c24:	3101      	adds	r1, #1
 8011c26:	f102 0314 	add.w	r3, r2, #20
 8011c2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c32:	1f05      	subs	r5, r0, #4
 8011c34:	42a3      	cmp	r3, r4
 8011c36:	d30c      	bcc.n	8011c52 <__copybits+0x36>
 8011c38:	1aa3      	subs	r3, r4, r2
 8011c3a:	3b11      	subs	r3, #17
 8011c3c:	f023 0303 	bic.w	r3, r3, #3
 8011c40:	3211      	adds	r2, #17
 8011c42:	42a2      	cmp	r2, r4
 8011c44:	bf88      	it	hi
 8011c46:	2300      	movhi	r3, #0
 8011c48:	4418      	add	r0, r3
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	4288      	cmp	r0, r1
 8011c4e:	d305      	bcc.n	8011c5c <__copybits+0x40>
 8011c50:	bd70      	pop	{r4, r5, r6, pc}
 8011c52:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c56:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c5a:	e7eb      	b.n	8011c34 <__copybits+0x18>
 8011c5c:	f840 3b04 	str.w	r3, [r0], #4
 8011c60:	e7f4      	b.n	8011c4c <__copybits+0x30>

08011c62 <__any_on>:
 8011c62:	f100 0214 	add.w	r2, r0, #20
 8011c66:	6900      	ldr	r0, [r0, #16]
 8011c68:	114b      	asrs	r3, r1, #5
 8011c6a:	4298      	cmp	r0, r3
 8011c6c:	b510      	push	{r4, lr}
 8011c6e:	db11      	blt.n	8011c94 <__any_on+0x32>
 8011c70:	dd0a      	ble.n	8011c88 <__any_on+0x26>
 8011c72:	f011 011f 	ands.w	r1, r1, #31
 8011c76:	d007      	beq.n	8011c88 <__any_on+0x26>
 8011c78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c7c:	fa24 f001 	lsr.w	r0, r4, r1
 8011c80:	fa00 f101 	lsl.w	r1, r0, r1
 8011c84:	428c      	cmp	r4, r1
 8011c86:	d10b      	bne.n	8011ca0 <__any_on+0x3e>
 8011c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d803      	bhi.n	8011c98 <__any_on+0x36>
 8011c90:	2000      	movs	r0, #0
 8011c92:	bd10      	pop	{r4, pc}
 8011c94:	4603      	mov	r3, r0
 8011c96:	e7f7      	b.n	8011c88 <__any_on+0x26>
 8011c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c9c:	2900      	cmp	r1, #0
 8011c9e:	d0f5      	beq.n	8011c8c <__any_on+0x2a>
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	e7f6      	b.n	8011c92 <__any_on+0x30>

08011ca4 <_strtoul_l.isra.0>:
 8011ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ca8:	4e34      	ldr	r6, [pc, #208]	@ (8011d7c <_strtoul_l.isra.0+0xd8>)
 8011caa:	4686      	mov	lr, r0
 8011cac:	460d      	mov	r5, r1
 8011cae:	4628      	mov	r0, r5
 8011cb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cb4:	5d37      	ldrb	r7, [r6, r4]
 8011cb6:	f017 0708 	ands.w	r7, r7, #8
 8011cba:	d1f8      	bne.n	8011cae <_strtoul_l.isra.0+0xa>
 8011cbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8011cbe:	d110      	bne.n	8011ce2 <_strtoul_l.isra.0+0x3e>
 8011cc0:	782c      	ldrb	r4, [r5, #0]
 8011cc2:	2701      	movs	r7, #1
 8011cc4:	1c85      	adds	r5, r0, #2
 8011cc6:	f033 0010 	bics.w	r0, r3, #16
 8011cca:	d115      	bne.n	8011cf8 <_strtoul_l.isra.0+0x54>
 8011ccc:	2c30      	cmp	r4, #48	@ 0x30
 8011cce:	d10d      	bne.n	8011cec <_strtoul_l.isra.0+0x48>
 8011cd0:	7828      	ldrb	r0, [r5, #0]
 8011cd2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011cd6:	2858      	cmp	r0, #88	@ 0x58
 8011cd8:	d108      	bne.n	8011cec <_strtoul_l.isra.0+0x48>
 8011cda:	786c      	ldrb	r4, [r5, #1]
 8011cdc:	3502      	adds	r5, #2
 8011cde:	2310      	movs	r3, #16
 8011ce0:	e00a      	b.n	8011cf8 <_strtoul_l.isra.0+0x54>
 8011ce2:	2c2b      	cmp	r4, #43	@ 0x2b
 8011ce4:	bf04      	itt	eq
 8011ce6:	782c      	ldrbeq	r4, [r5, #0]
 8011ce8:	1c85      	addeq	r5, r0, #2
 8011cea:	e7ec      	b.n	8011cc6 <_strtoul_l.isra.0+0x22>
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1f6      	bne.n	8011cde <_strtoul_l.isra.0+0x3a>
 8011cf0:	2c30      	cmp	r4, #48	@ 0x30
 8011cf2:	bf14      	ite	ne
 8011cf4:	230a      	movne	r3, #10
 8011cf6:	2308      	moveq	r3, #8
 8011cf8:	f04f 38ff 	mov.w	r8, #4294967295
 8011cfc:	2600      	movs	r6, #0
 8011cfe:	fbb8 f8f3 	udiv	r8, r8, r3
 8011d02:	fb03 f908 	mul.w	r9, r3, r8
 8011d06:	ea6f 0909 	mvn.w	r9, r9
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011d10:	f1bc 0f09 	cmp.w	ip, #9
 8011d14:	d810      	bhi.n	8011d38 <_strtoul_l.isra.0+0x94>
 8011d16:	4664      	mov	r4, ip
 8011d18:	42a3      	cmp	r3, r4
 8011d1a:	dd1e      	ble.n	8011d5a <_strtoul_l.isra.0+0xb6>
 8011d1c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011d20:	d007      	beq.n	8011d32 <_strtoul_l.isra.0+0x8e>
 8011d22:	4580      	cmp	r8, r0
 8011d24:	d316      	bcc.n	8011d54 <_strtoul_l.isra.0+0xb0>
 8011d26:	d101      	bne.n	8011d2c <_strtoul_l.isra.0+0x88>
 8011d28:	45a1      	cmp	r9, r4
 8011d2a:	db13      	blt.n	8011d54 <_strtoul_l.isra.0+0xb0>
 8011d2c:	fb00 4003 	mla	r0, r0, r3, r4
 8011d30:	2601      	movs	r6, #1
 8011d32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d36:	e7e9      	b.n	8011d0c <_strtoul_l.isra.0+0x68>
 8011d38:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011d3c:	f1bc 0f19 	cmp.w	ip, #25
 8011d40:	d801      	bhi.n	8011d46 <_strtoul_l.isra.0+0xa2>
 8011d42:	3c37      	subs	r4, #55	@ 0x37
 8011d44:	e7e8      	b.n	8011d18 <_strtoul_l.isra.0+0x74>
 8011d46:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011d4a:	f1bc 0f19 	cmp.w	ip, #25
 8011d4e:	d804      	bhi.n	8011d5a <_strtoul_l.isra.0+0xb6>
 8011d50:	3c57      	subs	r4, #87	@ 0x57
 8011d52:	e7e1      	b.n	8011d18 <_strtoul_l.isra.0+0x74>
 8011d54:	f04f 36ff 	mov.w	r6, #4294967295
 8011d58:	e7eb      	b.n	8011d32 <_strtoul_l.isra.0+0x8e>
 8011d5a:	1c73      	adds	r3, r6, #1
 8011d5c:	d106      	bne.n	8011d6c <_strtoul_l.isra.0+0xc8>
 8011d5e:	2322      	movs	r3, #34	@ 0x22
 8011d60:	f8ce 3000 	str.w	r3, [lr]
 8011d64:	4630      	mov	r0, r6
 8011d66:	b932      	cbnz	r2, 8011d76 <_strtoul_l.isra.0+0xd2>
 8011d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d6c:	b107      	cbz	r7, 8011d70 <_strtoul_l.isra.0+0xcc>
 8011d6e:	4240      	negs	r0, r0
 8011d70:	2a00      	cmp	r2, #0
 8011d72:	d0f9      	beq.n	8011d68 <_strtoul_l.isra.0+0xc4>
 8011d74:	b106      	cbz	r6, 8011d78 <_strtoul_l.isra.0+0xd4>
 8011d76:	1e69      	subs	r1, r5, #1
 8011d78:	6011      	str	r1, [r2, #0]
 8011d7a:	e7f5      	b.n	8011d68 <_strtoul_l.isra.0+0xc4>
 8011d7c:	08014109 	.word	0x08014109

08011d80 <_strtoul_r>:
 8011d80:	f7ff bf90 	b.w	8011ca4 <_strtoul_l.isra.0>

08011d84 <strtoul>:
 8011d84:	4613      	mov	r3, r2
 8011d86:	460a      	mov	r2, r1
 8011d88:	4601      	mov	r1, r0
 8011d8a:	4802      	ldr	r0, [pc, #8]	@ (8011d94 <strtoul+0x10>)
 8011d8c:	6800      	ldr	r0, [r0, #0]
 8011d8e:	f7ff bf89 	b.w	8011ca4 <_strtoul_l.isra.0>
 8011d92:	bf00      	nop
 8011d94:	200001a4 	.word	0x200001a4

08011d98 <__ascii_wctomb>:
 8011d98:	4603      	mov	r3, r0
 8011d9a:	4608      	mov	r0, r1
 8011d9c:	b141      	cbz	r1, 8011db0 <__ascii_wctomb+0x18>
 8011d9e:	2aff      	cmp	r2, #255	@ 0xff
 8011da0:	d904      	bls.n	8011dac <__ascii_wctomb+0x14>
 8011da2:	228a      	movs	r2, #138	@ 0x8a
 8011da4:	601a      	str	r2, [r3, #0]
 8011da6:	f04f 30ff 	mov.w	r0, #4294967295
 8011daa:	4770      	bx	lr
 8011dac:	700a      	strb	r2, [r1, #0]
 8011dae:	2001      	movs	r0, #1
 8011db0:	4770      	bx	lr

08011db2 <__ssputs_r>:
 8011db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db6:	688e      	ldr	r6, [r1, #8]
 8011db8:	461f      	mov	r7, r3
 8011dba:	42be      	cmp	r6, r7
 8011dbc:	680b      	ldr	r3, [r1, #0]
 8011dbe:	4682      	mov	sl, r0
 8011dc0:	460c      	mov	r4, r1
 8011dc2:	4690      	mov	r8, r2
 8011dc4:	d82d      	bhi.n	8011e22 <__ssputs_r+0x70>
 8011dc6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011dca:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011dce:	d026      	beq.n	8011e1e <__ssputs_r+0x6c>
 8011dd0:	6965      	ldr	r5, [r4, #20]
 8011dd2:	6909      	ldr	r1, [r1, #16]
 8011dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011dd8:	eba3 0901 	sub.w	r9, r3, r1
 8011ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011de0:	1c7b      	adds	r3, r7, #1
 8011de2:	444b      	add	r3, r9
 8011de4:	106d      	asrs	r5, r5, #1
 8011de6:	429d      	cmp	r5, r3
 8011de8:	bf38      	it	cc
 8011dea:	461d      	movcc	r5, r3
 8011dec:	0553      	lsls	r3, r2, #21
 8011dee:	d527      	bpl.n	8011e40 <__ssputs_r+0x8e>
 8011df0:	4629      	mov	r1, r5
 8011df2:	f7ff fa0f 	bl	8011214 <_malloc_r>
 8011df6:	4606      	mov	r6, r0
 8011df8:	b360      	cbz	r0, 8011e54 <__ssputs_r+0xa2>
 8011dfa:	6921      	ldr	r1, [r4, #16]
 8011dfc:	464a      	mov	r2, r9
 8011dfe:	f7fd ff78 	bl	800fcf2 <memcpy>
 8011e02:	89a3      	ldrh	r3, [r4, #12]
 8011e04:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e0c:	81a3      	strh	r3, [r4, #12]
 8011e0e:	6126      	str	r6, [r4, #16]
 8011e10:	6165      	str	r5, [r4, #20]
 8011e12:	444e      	add	r6, r9
 8011e14:	eba5 0509 	sub.w	r5, r5, r9
 8011e18:	6026      	str	r6, [r4, #0]
 8011e1a:	60a5      	str	r5, [r4, #8]
 8011e1c:	463e      	mov	r6, r7
 8011e1e:	42be      	cmp	r6, r7
 8011e20:	d900      	bls.n	8011e24 <__ssputs_r+0x72>
 8011e22:	463e      	mov	r6, r7
 8011e24:	6820      	ldr	r0, [r4, #0]
 8011e26:	4632      	mov	r2, r6
 8011e28:	4641      	mov	r1, r8
 8011e2a:	f7fc ff51 	bl	800ecd0 <memmove>
 8011e2e:	68a3      	ldr	r3, [r4, #8]
 8011e30:	1b9b      	subs	r3, r3, r6
 8011e32:	60a3      	str	r3, [r4, #8]
 8011e34:	6823      	ldr	r3, [r4, #0]
 8011e36:	4433      	add	r3, r6
 8011e38:	6023      	str	r3, [r4, #0]
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e40:	462a      	mov	r2, r5
 8011e42:	f001 f881 	bl	8012f48 <_realloc_r>
 8011e46:	4606      	mov	r6, r0
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	d1e0      	bne.n	8011e0e <__ssputs_r+0x5c>
 8011e4c:	6921      	ldr	r1, [r4, #16]
 8011e4e:	4650      	mov	r0, sl
 8011e50:	f7fe fde6 	bl	8010a20 <_free_r>
 8011e54:	230c      	movs	r3, #12
 8011e56:	f8ca 3000 	str.w	r3, [sl]
 8011e5a:	89a3      	ldrh	r3, [r4, #12]
 8011e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e60:	81a3      	strh	r3, [r4, #12]
 8011e62:	f04f 30ff 	mov.w	r0, #4294967295
 8011e66:	e7e9      	b.n	8011e3c <__ssputs_r+0x8a>

08011e68 <_svfiprintf_r>:
 8011e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e6c:	4698      	mov	r8, r3
 8011e6e:	898b      	ldrh	r3, [r1, #12]
 8011e70:	061b      	lsls	r3, r3, #24
 8011e72:	b09d      	sub	sp, #116	@ 0x74
 8011e74:	4607      	mov	r7, r0
 8011e76:	460d      	mov	r5, r1
 8011e78:	4614      	mov	r4, r2
 8011e7a:	d510      	bpl.n	8011e9e <_svfiprintf_r+0x36>
 8011e7c:	690b      	ldr	r3, [r1, #16]
 8011e7e:	b973      	cbnz	r3, 8011e9e <_svfiprintf_r+0x36>
 8011e80:	2140      	movs	r1, #64	@ 0x40
 8011e82:	f7ff f9c7 	bl	8011214 <_malloc_r>
 8011e86:	6028      	str	r0, [r5, #0]
 8011e88:	6128      	str	r0, [r5, #16]
 8011e8a:	b930      	cbnz	r0, 8011e9a <_svfiprintf_r+0x32>
 8011e8c:	230c      	movs	r3, #12
 8011e8e:	603b      	str	r3, [r7, #0]
 8011e90:	f04f 30ff 	mov.w	r0, #4294967295
 8011e94:	b01d      	add	sp, #116	@ 0x74
 8011e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e9a:	2340      	movs	r3, #64	@ 0x40
 8011e9c:	616b      	str	r3, [r5, #20]
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ea2:	2320      	movs	r3, #32
 8011ea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eac:	2330      	movs	r3, #48	@ 0x30
 8011eae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801204c <_svfiprintf_r+0x1e4>
 8011eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011eb6:	f04f 0901 	mov.w	r9, #1
 8011eba:	4623      	mov	r3, r4
 8011ebc:	469a      	mov	sl, r3
 8011ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ec2:	b10a      	cbz	r2, 8011ec8 <_svfiprintf_r+0x60>
 8011ec4:	2a25      	cmp	r2, #37	@ 0x25
 8011ec6:	d1f9      	bne.n	8011ebc <_svfiprintf_r+0x54>
 8011ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8011ecc:	d00b      	beq.n	8011ee6 <_svfiprintf_r+0x7e>
 8011ece:	465b      	mov	r3, fp
 8011ed0:	4622      	mov	r2, r4
 8011ed2:	4629      	mov	r1, r5
 8011ed4:	4638      	mov	r0, r7
 8011ed6:	f7ff ff6c 	bl	8011db2 <__ssputs_r>
 8011eda:	3001      	adds	r0, #1
 8011edc:	f000 80a7 	beq.w	801202e <_svfiprintf_r+0x1c6>
 8011ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ee2:	445a      	add	r2, fp
 8011ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	f000 809f 	beq.w	801202e <_svfiprintf_r+0x1c6>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011efa:	f10a 0a01 	add.w	sl, sl, #1
 8011efe:	9304      	str	r3, [sp, #16]
 8011f00:	9307      	str	r3, [sp, #28]
 8011f02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f08:	4654      	mov	r4, sl
 8011f0a:	2205      	movs	r2, #5
 8011f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f10:	484e      	ldr	r0, [pc, #312]	@ (801204c <_svfiprintf_r+0x1e4>)
 8011f12:	f7ee f975 	bl	8000200 <memchr>
 8011f16:	9a04      	ldr	r2, [sp, #16]
 8011f18:	b9d8      	cbnz	r0, 8011f52 <_svfiprintf_r+0xea>
 8011f1a:	06d0      	lsls	r0, r2, #27
 8011f1c:	bf44      	itt	mi
 8011f1e:	2320      	movmi	r3, #32
 8011f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f24:	0711      	lsls	r1, r2, #28
 8011f26:	bf44      	itt	mi
 8011f28:	232b      	movmi	r3, #43	@ 0x2b
 8011f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f34:	d015      	beq.n	8011f62 <_svfiprintf_r+0xfa>
 8011f36:	9a07      	ldr	r2, [sp, #28]
 8011f38:	4654      	mov	r4, sl
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	f04f 0c0a 	mov.w	ip, #10
 8011f40:	4621      	mov	r1, r4
 8011f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f46:	3b30      	subs	r3, #48	@ 0x30
 8011f48:	2b09      	cmp	r3, #9
 8011f4a:	d94b      	bls.n	8011fe4 <_svfiprintf_r+0x17c>
 8011f4c:	b1b0      	cbz	r0, 8011f7c <_svfiprintf_r+0x114>
 8011f4e:	9207      	str	r2, [sp, #28]
 8011f50:	e014      	b.n	8011f7c <_svfiprintf_r+0x114>
 8011f52:	eba0 0308 	sub.w	r3, r0, r8
 8011f56:	fa09 f303 	lsl.w	r3, r9, r3
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	9304      	str	r3, [sp, #16]
 8011f5e:	46a2      	mov	sl, r4
 8011f60:	e7d2      	b.n	8011f08 <_svfiprintf_r+0xa0>
 8011f62:	9b03      	ldr	r3, [sp, #12]
 8011f64:	1d19      	adds	r1, r3, #4
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	9103      	str	r1, [sp, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bfbb      	ittet	lt
 8011f6e:	425b      	neglt	r3, r3
 8011f70:	f042 0202 	orrlt.w	r2, r2, #2
 8011f74:	9307      	strge	r3, [sp, #28]
 8011f76:	9307      	strlt	r3, [sp, #28]
 8011f78:	bfb8      	it	lt
 8011f7a:	9204      	strlt	r2, [sp, #16]
 8011f7c:	7823      	ldrb	r3, [r4, #0]
 8011f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f80:	d10a      	bne.n	8011f98 <_svfiprintf_r+0x130>
 8011f82:	7863      	ldrb	r3, [r4, #1]
 8011f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f86:	d132      	bne.n	8011fee <_svfiprintf_r+0x186>
 8011f88:	9b03      	ldr	r3, [sp, #12]
 8011f8a:	1d1a      	adds	r2, r3, #4
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	9203      	str	r2, [sp, #12]
 8011f90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f94:	3402      	adds	r4, #2
 8011f96:	9305      	str	r3, [sp, #20]
 8011f98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801205c <_svfiprintf_r+0x1f4>
 8011f9c:	7821      	ldrb	r1, [r4, #0]
 8011f9e:	2203      	movs	r2, #3
 8011fa0:	4650      	mov	r0, sl
 8011fa2:	f7ee f92d 	bl	8000200 <memchr>
 8011fa6:	b138      	cbz	r0, 8011fb8 <_svfiprintf_r+0x150>
 8011fa8:	9b04      	ldr	r3, [sp, #16]
 8011faa:	eba0 000a 	sub.w	r0, r0, sl
 8011fae:	2240      	movs	r2, #64	@ 0x40
 8011fb0:	4082      	lsls	r2, r0
 8011fb2:	4313      	orrs	r3, r2
 8011fb4:	3401      	adds	r4, #1
 8011fb6:	9304      	str	r3, [sp, #16]
 8011fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fbc:	4824      	ldr	r0, [pc, #144]	@ (8012050 <_svfiprintf_r+0x1e8>)
 8011fbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fc2:	2206      	movs	r2, #6
 8011fc4:	f7ee f91c 	bl	8000200 <memchr>
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d036      	beq.n	801203a <_svfiprintf_r+0x1d2>
 8011fcc:	4b21      	ldr	r3, [pc, #132]	@ (8012054 <_svfiprintf_r+0x1ec>)
 8011fce:	bb1b      	cbnz	r3, 8012018 <_svfiprintf_r+0x1b0>
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	3307      	adds	r3, #7
 8011fd4:	f023 0307 	bic.w	r3, r3, #7
 8011fd8:	3308      	adds	r3, #8
 8011fda:	9303      	str	r3, [sp, #12]
 8011fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fde:	4433      	add	r3, r6
 8011fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fe2:	e76a      	b.n	8011eba <_svfiprintf_r+0x52>
 8011fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fe8:	460c      	mov	r4, r1
 8011fea:	2001      	movs	r0, #1
 8011fec:	e7a8      	b.n	8011f40 <_svfiprintf_r+0xd8>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	3401      	adds	r4, #1
 8011ff2:	9305      	str	r3, [sp, #20]
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	f04f 0c0a 	mov.w	ip, #10
 8011ffa:	4620      	mov	r0, r4
 8011ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012000:	3a30      	subs	r2, #48	@ 0x30
 8012002:	2a09      	cmp	r2, #9
 8012004:	d903      	bls.n	801200e <_svfiprintf_r+0x1a6>
 8012006:	2b00      	cmp	r3, #0
 8012008:	d0c6      	beq.n	8011f98 <_svfiprintf_r+0x130>
 801200a:	9105      	str	r1, [sp, #20]
 801200c:	e7c4      	b.n	8011f98 <_svfiprintf_r+0x130>
 801200e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012012:	4604      	mov	r4, r0
 8012014:	2301      	movs	r3, #1
 8012016:	e7f0      	b.n	8011ffa <_svfiprintf_r+0x192>
 8012018:	ab03      	add	r3, sp, #12
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	462a      	mov	r2, r5
 801201e:	4b0e      	ldr	r3, [pc, #56]	@ (8012058 <_svfiprintf_r+0x1f0>)
 8012020:	a904      	add	r1, sp, #16
 8012022:	4638      	mov	r0, r7
 8012024:	f7fb fff6 	bl	800e014 <_printf_float>
 8012028:	1c42      	adds	r2, r0, #1
 801202a:	4606      	mov	r6, r0
 801202c:	d1d6      	bne.n	8011fdc <_svfiprintf_r+0x174>
 801202e:	89ab      	ldrh	r3, [r5, #12]
 8012030:	065b      	lsls	r3, r3, #25
 8012032:	f53f af2d 	bmi.w	8011e90 <_svfiprintf_r+0x28>
 8012036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012038:	e72c      	b.n	8011e94 <_svfiprintf_r+0x2c>
 801203a:	ab03      	add	r3, sp, #12
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	462a      	mov	r2, r5
 8012040:	4b05      	ldr	r3, [pc, #20]	@ (8012058 <_svfiprintf_r+0x1f0>)
 8012042:	a904      	add	r1, sp, #16
 8012044:	4638      	mov	r0, r7
 8012046:	f7fc fa7d 	bl	800e544 <_printf_i>
 801204a:	e7ed      	b.n	8012028 <_svfiprintf_r+0x1c0>
 801204c:	08014013 	.word	0x08014013
 8012050:	0801401d 	.word	0x0801401d
 8012054:	0800e015 	.word	0x0800e015
 8012058:	08011db3 	.word	0x08011db3
 801205c:	08014019 	.word	0x08014019

08012060 <_sungetc_r>:
 8012060:	b538      	push	{r3, r4, r5, lr}
 8012062:	1c4b      	adds	r3, r1, #1
 8012064:	4614      	mov	r4, r2
 8012066:	d103      	bne.n	8012070 <_sungetc_r+0x10>
 8012068:	f04f 35ff 	mov.w	r5, #4294967295
 801206c:	4628      	mov	r0, r5
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	8993      	ldrh	r3, [r2, #12]
 8012072:	f023 0320 	bic.w	r3, r3, #32
 8012076:	8193      	strh	r3, [r2, #12]
 8012078:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801207a:	6852      	ldr	r2, [r2, #4]
 801207c:	b2cd      	uxtb	r5, r1
 801207e:	b18b      	cbz	r3, 80120a4 <_sungetc_r+0x44>
 8012080:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8012082:	4293      	cmp	r3, r2
 8012084:	dd08      	ble.n	8012098 <_sungetc_r+0x38>
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	1e5a      	subs	r2, r3, #1
 801208a:	6022      	str	r2, [r4, #0]
 801208c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	3301      	adds	r3, #1
 8012094:	6063      	str	r3, [r4, #4]
 8012096:	e7e9      	b.n	801206c <_sungetc_r+0xc>
 8012098:	4621      	mov	r1, r4
 801209a:	f000 fdce 	bl	8012c3a <__submore>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d0f1      	beq.n	8012086 <_sungetc_r+0x26>
 80120a2:	e7e1      	b.n	8012068 <_sungetc_r+0x8>
 80120a4:	6921      	ldr	r1, [r4, #16]
 80120a6:	6823      	ldr	r3, [r4, #0]
 80120a8:	b151      	cbz	r1, 80120c0 <_sungetc_r+0x60>
 80120aa:	4299      	cmp	r1, r3
 80120ac:	d208      	bcs.n	80120c0 <_sungetc_r+0x60>
 80120ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80120b2:	42a9      	cmp	r1, r5
 80120b4:	d104      	bne.n	80120c0 <_sungetc_r+0x60>
 80120b6:	3b01      	subs	r3, #1
 80120b8:	3201      	adds	r2, #1
 80120ba:	6023      	str	r3, [r4, #0]
 80120bc:	6062      	str	r2, [r4, #4]
 80120be:	e7d5      	b.n	801206c <_sungetc_r+0xc>
 80120c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80120c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80120ca:	2303      	movs	r3, #3
 80120cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80120ce:	4623      	mov	r3, r4
 80120d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80120d4:	6023      	str	r3, [r4, #0]
 80120d6:	2301      	movs	r3, #1
 80120d8:	e7dc      	b.n	8012094 <_sungetc_r+0x34>

080120da <__ssrefill_r>:
 80120da:	b510      	push	{r4, lr}
 80120dc:	460c      	mov	r4, r1
 80120de:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80120e0:	b169      	cbz	r1, 80120fe <__ssrefill_r+0x24>
 80120e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120e6:	4299      	cmp	r1, r3
 80120e8:	d001      	beq.n	80120ee <__ssrefill_r+0x14>
 80120ea:	f7fe fc99 	bl	8010a20 <_free_r>
 80120ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120f0:	6063      	str	r3, [r4, #4]
 80120f2:	2000      	movs	r0, #0
 80120f4:	6360      	str	r0, [r4, #52]	@ 0x34
 80120f6:	b113      	cbz	r3, 80120fe <__ssrefill_r+0x24>
 80120f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80120fa:	6023      	str	r3, [r4, #0]
 80120fc:	bd10      	pop	{r4, pc}
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	6023      	str	r3, [r4, #0]
 8012102:	2300      	movs	r3, #0
 8012104:	6063      	str	r3, [r4, #4]
 8012106:	89a3      	ldrh	r3, [r4, #12]
 8012108:	f043 0320 	orr.w	r3, r3, #32
 801210c:	81a3      	strh	r3, [r4, #12]
 801210e:	f04f 30ff 	mov.w	r0, #4294967295
 8012112:	e7f3      	b.n	80120fc <__ssrefill_r+0x22>

08012114 <__ssvfiscanf_r>:
 8012114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	460c      	mov	r4, r1
 801211a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801211e:	2100      	movs	r1, #0
 8012120:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012124:	49a6      	ldr	r1, [pc, #664]	@ (80123c0 <__ssvfiscanf_r+0x2ac>)
 8012126:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012128:	f10d 0804 	add.w	r8, sp, #4
 801212c:	49a5      	ldr	r1, [pc, #660]	@ (80123c4 <__ssvfiscanf_r+0x2b0>)
 801212e:	4fa6      	ldr	r7, [pc, #664]	@ (80123c8 <__ssvfiscanf_r+0x2b4>)
 8012130:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012134:	4606      	mov	r6, r0
 8012136:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	f892 9000 	ldrb.w	r9, [r2]
 801213e:	f1b9 0f00 	cmp.w	r9, #0
 8012142:	f000 8158 	beq.w	80123f6 <__ssvfiscanf_r+0x2e2>
 8012146:	f817 3009 	ldrb.w	r3, [r7, r9]
 801214a:	f013 0308 	ands.w	r3, r3, #8
 801214e:	f102 0501 	add.w	r5, r2, #1
 8012152:	d019      	beq.n	8012188 <__ssvfiscanf_r+0x74>
 8012154:	6863      	ldr	r3, [r4, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	dd0f      	ble.n	801217a <__ssvfiscanf_r+0x66>
 801215a:	6823      	ldr	r3, [r4, #0]
 801215c:	781a      	ldrb	r2, [r3, #0]
 801215e:	5cba      	ldrb	r2, [r7, r2]
 8012160:	0712      	lsls	r2, r2, #28
 8012162:	d401      	bmi.n	8012168 <__ssvfiscanf_r+0x54>
 8012164:	462a      	mov	r2, r5
 8012166:	e7e8      	b.n	801213a <__ssvfiscanf_r+0x26>
 8012168:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801216a:	3201      	adds	r2, #1
 801216c:	9245      	str	r2, [sp, #276]	@ 0x114
 801216e:	6862      	ldr	r2, [r4, #4]
 8012170:	3301      	adds	r3, #1
 8012172:	3a01      	subs	r2, #1
 8012174:	6062      	str	r2, [r4, #4]
 8012176:	6023      	str	r3, [r4, #0]
 8012178:	e7ec      	b.n	8012154 <__ssvfiscanf_r+0x40>
 801217a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801217c:	4621      	mov	r1, r4
 801217e:	4630      	mov	r0, r6
 8012180:	4798      	blx	r3
 8012182:	2800      	cmp	r0, #0
 8012184:	d0e9      	beq.n	801215a <__ssvfiscanf_r+0x46>
 8012186:	e7ed      	b.n	8012164 <__ssvfiscanf_r+0x50>
 8012188:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801218c:	f040 8085 	bne.w	801229a <__ssvfiscanf_r+0x186>
 8012190:	9341      	str	r3, [sp, #260]	@ 0x104
 8012192:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012194:	7853      	ldrb	r3, [r2, #1]
 8012196:	2b2a      	cmp	r3, #42	@ 0x2a
 8012198:	bf02      	ittt	eq
 801219a:	2310      	moveq	r3, #16
 801219c:	1c95      	addeq	r5, r2, #2
 801219e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80121a0:	220a      	movs	r2, #10
 80121a2:	46aa      	mov	sl, r5
 80121a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80121a8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80121ac:	2b09      	cmp	r3, #9
 80121ae:	d91e      	bls.n	80121ee <__ssvfiscanf_r+0xda>
 80121b0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80123cc <__ssvfiscanf_r+0x2b8>
 80121b4:	2203      	movs	r2, #3
 80121b6:	4658      	mov	r0, fp
 80121b8:	f7ee f822 	bl	8000200 <memchr>
 80121bc:	b138      	cbz	r0, 80121ce <__ssvfiscanf_r+0xba>
 80121be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80121c0:	eba0 000b 	sub.w	r0, r0, fp
 80121c4:	2301      	movs	r3, #1
 80121c6:	4083      	lsls	r3, r0
 80121c8:	4313      	orrs	r3, r2
 80121ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80121cc:	4655      	mov	r5, sl
 80121ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80121d2:	2b78      	cmp	r3, #120	@ 0x78
 80121d4:	d806      	bhi.n	80121e4 <__ssvfiscanf_r+0xd0>
 80121d6:	2b57      	cmp	r3, #87	@ 0x57
 80121d8:	d810      	bhi.n	80121fc <__ssvfiscanf_r+0xe8>
 80121da:	2b25      	cmp	r3, #37	@ 0x25
 80121dc:	d05d      	beq.n	801229a <__ssvfiscanf_r+0x186>
 80121de:	d857      	bhi.n	8012290 <__ssvfiscanf_r+0x17c>
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d075      	beq.n	80122d0 <__ssvfiscanf_r+0x1bc>
 80121e4:	2303      	movs	r3, #3
 80121e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80121e8:	230a      	movs	r3, #10
 80121ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80121ec:	e088      	b.n	8012300 <__ssvfiscanf_r+0x1ec>
 80121ee:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80121f0:	fb02 1103 	mla	r1, r2, r3, r1
 80121f4:	3930      	subs	r1, #48	@ 0x30
 80121f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80121f8:	4655      	mov	r5, sl
 80121fa:	e7d2      	b.n	80121a2 <__ssvfiscanf_r+0x8e>
 80121fc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012200:	2a20      	cmp	r2, #32
 8012202:	d8ef      	bhi.n	80121e4 <__ssvfiscanf_r+0xd0>
 8012204:	a101      	add	r1, pc, #4	@ (adr r1, 801220c <__ssvfiscanf_r+0xf8>)
 8012206:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801220a:	bf00      	nop
 801220c:	080122df 	.word	0x080122df
 8012210:	080121e5 	.word	0x080121e5
 8012214:	080121e5 	.word	0x080121e5
 8012218:	08012339 	.word	0x08012339
 801221c:	080121e5 	.word	0x080121e5
 8012220:	080121e5 	.word	0x080121e5
 8012224:	080121e5 	.word	0x080121e5
 8012228:	080121e5 	.word	0x080121e5
 801222c:	080121e5 	.word	0x080121e5
 8012230:	080121e5 	.word	0x080121e5
 8012234:	080121e5 	.word	0x080121e5
 8012238:	0801234f 	.word	0x0801234f
 801223c:	08012335 	.word	0x08012335
 8012240:	08012297 	.word	0x08012297
 8012244:	08012297 	.word	0x08012297
 8012248:	08012297 	.word	0x08012297
 801224c:	080121e5 	.word	0x080121e5
 8012250:	080122f1 	.word	0x080122f1
 8012254:	080121e5 	.word	0x080121e5
 8012258:	080121e5 	.word	0x080121e5
 801225c:	080121e5 	.word	0x080121e5
 8012260:	080121e5 	.word	0x080121e5
 8012264:	0801235f 	.word	0x0801235f
 8012268:	080122f9 	.word	0x080122f9
 801226c:	080122d7 	.word	0x080122d7
 8012270:	080121e5 	.word	0x080121e5
 8012274:	080121e5 	.word	0x080121e5
 8012278:	0801235b 	.word	0x0801235b
 801227c:	080121e5 	.word	0x080121e5
 8012280:	08012335 	.word	0x08012335
 8012284:	080121e5 	.word	0x080121e5
 8012288:	080121e5 	.word	0x080121e5
 801228c:	080122df 	.word	0x080122df
 8012290:	3b45      	subs	r3, #69	@ 0x45
 8012292:	2b02      	cmp	r3, #2
 8012294:	d8a6      	bhi.n	80121e4 <__ssvfiscanf_r+0xd0>
 8012296:	2305      	movs	r3, #5
 8012298:	e031      	b.n	80122fe <__ssvfiscanf_r+0x1ea>
 801229a:	6863      	ldr	r3, [r4, #4]
 801229c:	2b00      	cmp	r3, #0
 801229e:	dd0d      	ble.n	80122bc <__ssvfiscanf_r+0x1a8>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	781a      	ldrb	r2, [r3, #0]
 80122a4:	454a      	cmp	r2, r9
 80122a6:	f040 80a6 	bne.w	80123f6 <__ssvfiscanf_r+0x2e2>
 80122aa:	3301      	adds	r3, #1
 80122ac:	6862      	ldr	r2, [r4, #4]
 80122ae:	6023      	str	r3, [r4, #0]
 80122b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80122b2:	3a01      	subs	r2, #1
 80122b4:	3301      	adds	r3, #1
 80122b6:	6062      	str	r2, [r4, #4]
 80122b8:	9345      	str	r3, [sp, #276]	@ 0x114
 80122ba:	e753      	b.n	8012164 <__ssvfiscanf_r+0x50>
 80122bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80122be:	4621      	mov	r1, r4
 80122c0:	4630      	mov	r0, r6
 80122c2:	4798      	blx	r3
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d0eb      	beq.n	80122a0 <__ssvfiscanf_r+0x18c>
 80122c8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80122ca:	2800      	cmp	r0, #0
 80122cc:	f040 808b 	bne.w	80123e6 <__ssvfiscanf_r+0x2d2>
 80122d0:	f04f 30ff 	mov.w	r0, #4294967295
 80122d4:	e08b      	b.n	80123ee <__ssvfiscanf_r+0x2da>
 80122d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122d8:	f042 0220 	orr.w	r2, r2, #32
 80122dc:	9241      	str	r2, [sp, #260]	@ 0x104
 80122de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80122e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80122e6:	2210      	movs	r2, #16
 80122e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80122ea:	9242      	str	r2, [sp, #264]	@ 0x108
 80122ec:	d902      	bls.n	80122f4 <__ssvfiscanf_r+0x1e0>
 80122ee:	e005      	b.n	80122fc <__ssvfiscanf_r+0x1e8>
 80122f0:	2300      	movs	r3, #0
 80122f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80122f4:	2303      	movs	r3, #3
 80122f6:	e002      	b.n	80122fe <__ssvfiscanf_r+0x1ea>
 80122f8:	2308      	movs	r3, #8
 80122fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80122fc:	2304      	movs	r3, #4
 80122fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012300:	6863      	ldr	r3, [r4, #4]
 8012302:	2b00      	cmp	r3, #0
 8012304:	dd39      	ble.n	801237a <__ssvfiscanf_r+0x266>
 8012306:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012308:	0659      	lsls	r1, r3, #25
 801230a:	d404      	bmi.n	8012316 <__ssvfiscanf_r+0x202>
 801230c:	6823      	ldr	r3, [r4, #0]
 801230e:	781a      	ldrb	r2, [r3, #0]
 8012310:	5cba      	ldrb	r2, [r7, r2]
 8012312:	0712      	lsls	r2, r2, #28
 8012314:	d438      	bmi.n	8012388 <__ssvfiscanf_r+0x274>
 8012316:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012318:	2b02      	cmp	r3, #2
 801231a:	dc47      	bgt.n	80123ac <__ssvfiscanf_r+0x298>
 801231c:	466b      	mov	r3, sp
 801231e:	4622      	mov	r2, r4
 8012320:	a941      	add	r1, sp, #260	@ 0x104
 8012322:	4630      	mov	r0, r6
 8012324:	f000 f9ae 	bl	8012684 <_scanf_chars>
 8012328:	2801      	cmp	r0, #1
 801232a:	d064      	beq.n	80123f6 <__ssvfiscanf_r+0x2e2>
 801232c:	2802      	cmp	r0, #2
 801232e:	f47f af19 	bne.w	8012164 <__ssvfiscanf_r+0x50>
 8012332:	e7c9      	b.n	80122c8 <__ssvfiscanf_r+0x1b4>
 8012334:	220a      	movs	r2, #10
 8012336:	e7d7      	b.n	80122e8 <__ssvfiscanf_r+0x1d4>
 8012338:	4629      	mov	r1, r5
 801233a:	4640      	mov	r0, r8
 801233c:	f000 fc44 	bl	8012bc8 <__sccl>
 8012340:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012346:	9341      	str	r3, [sp, #260]	@ 0x104
 8012348:	4605      	mov	r5, r0
 801234a:	2301      	movs	r3, #1
 801234c:	e7d7      	b.n	80122fe <__ssvfiscanf_r+0x1ea>
 801234e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012354:	9341      	str	r3, [sp, #260]	@ 0x104
 8012356:	2300      	movs	r3, #0
 8012358:	e7d1      	b.n	80122fe <__ssvfiscanf_r+0x1ea>
 801235a:	2302      	movs	r3, #2
 801235c:	e7cf      	b.n	80122fe <__ssvfiscanf_r+0x1ea>
 801235e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012360:	06c3      	lsls	r3, r0, #27
 8012362:	f53f aeff 	bmi.w	8012164 <__ssvfiscanf_r+0x50>
 8012366:	9b00      	ldr	r3, [sp, #0]
 8012368:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801236a:	1d19      	adds	r1, r3, #4
 801236c:	9100      	str	r1, [sp, #0]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	07c0      	lsls	r0, r0, #31
 8012372:	bf4c      	ite	mi
 8012374:	801a      	strhmi	r2, [r3, #0]
 8012376:	601a      	strpl	r2, [r3, #0]
 8012378:	e6f4      	b.n	8012164 <__ssvfiscanf_r+0x50>
 801237a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801237c:	4621      	mov	r1, r4
 801237e:	4630      	mov	r0, r6
 8012380:	4798      	blx	r3
 8012382:	2800      	cmp	r0, #0
 8012384:	d0bf      	beq.n	8012306 <__ssvfiscanf_r+0x1f2>
 8012386:	e79f      	b.n	80122c8 <__ssvfiscanf_r+0x1b4>
 8012388:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801238a:	3201      	adds	r2, #1
 801238c:	9245      	str	r2, [sp, #276]	@ 0x114
 801238e:	6862      	ldr	r2, [r4, #4]
 8012390:	3a01      	subs	r2, #1
 8012392:	2a00      	cmp	r2, #0
 8012394:	6062      	str	r2, [r4, #4]
 8012396:	dd02      	ble.n	801239e <__ssvfiscanf_r+0x28a>
 8012398:	3301      	adds	r3, #1
 801239a:	6023      	str	r3, [r4, #0]
 801239c:	e7b6      	b.n	801230c <__ssvfiscanf_r+0x1f8>
 801239e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123a0:	4621      	mov	r1, r4
 80123a2:	4630      	mov	r0, r6
 80123a4:	4798      	blx	r3
 80123a6:	2800      	cmp	r0, #0
 80123a8:	d0b0      	beq.n	801230c <__ssvfiscanf_r+0x1f8>
 80123aa:	e78d      	b.n	80122c8 <__ssvfiscanf_r+0x1b4>
 80123ac:	2b04      	cmp	r3, #4
 80123ae:	dc0f      	bgt.n	80123d0 <__ssvfiscanf_r+0x2bc>
 80123b0:	466b      	mov	r3, sp
 80123b2:	4622      	mov	r2, r4
 80123b4:	a941      	add	r1, sp, #260	@ 0x104
 80123b6:	4630      	mov	r0, r6
 80123b8:	f000 f9be 	bl	8012738 <_scanf_i>
 80123bc:	e7b4      	b.n	8012328 <__ssvfiscanf_r+0x214>
 80123be:	bf00      	nop
 80123c0:	08012061 	.word	0x08012061
 80123c4:	080120db 	.word	0x080120db
 80123c8:	08014109 	.word	0x08014109
 80123cc:	08014019 	.word	0x08014019
 80123d0:	4b0a      	ldr	r3, [pc, #40]	@ (80123fc <__ssvfiscanf_r+0x2e8>)
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	f43f aec6 	beq.w	8012164 <__ssvfiscanf_r+0x50>
 80123d8:	466b      	mov	r3, sp
 80123da:	4622      	mov	r2, r4
 80123dc:	a941      	add	r1, sp, #260	@ 0x104
 80123de:	4630      	mov	r0, r6
 80123e0:	f3af 8000 	nop.w
 80123e4:	e7a0      	b.n	8012328 <__ssvfiscanf_r+0x214>
 80123e6:	89a3      	ldrh	r3, [r4, #12]
 80123e8:	065b      	lsls	r3, r3, #25
 80123ea:	f53f af71 	bmi.w	80122d0 <__ssvfiscanf_r+0x1bc>
 80123ee:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80123f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80123f8:	e7f9      	b.n	80123ee <__ssvfiscanf_r+0x2da>
 80123fa:	bf00      	nop
 80123fc:	00000000 	.word	0x00000000

08012400 <__sfputc_r>:
 8012400:	6893      	ldr	r3, [r2, #8]
 8012402:	3b01      	subs	r3, #1
 8012404:	2b00      	cmp	r3, #0
 8012406:	b410      	push	{r4}
 8012408:	6093      	str	r3, [r2, #8]
 801240a:	da08      	bge.n	801241e <__sfputc_r+0x1e>
 801240c:	6994      	ldr	r4, [r2, #24]
 801240e:	42a3      	cmp	r3, r4
 8012410:	db01      	blt.n	8012416 <__sfputc_r+0x16>
 8012412:	290a      	cmp	r1, #10
 8012414:	d103      	bne.n	801241e <__sfputc_r+0x1e>
 8012416:	f85d 4b04 	ldr.w	r4, [sp], #4
 801241a:	f7fc bbb4 	b.w	800eb86 <__swbuf_r>
 801241e:	6813      	ldr	r3, [r2, #0]
 8012420:	1c58      	adds	r0, r3, #1
 8012422:	6010      	str	r0, [r2, #0]
 8012424:	7019      	strb	r1, [r3, #0]
 8012426:	4608      	mov	r0, r1
 8012428:	f85d 4b04 	ldr.w	r4, [sp], #4
 801242c:	4770      	bx	lr

0801242e <__sfputs_r>:
 801242e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012430:	4606      	mov	r6, r0
 8012432:	460f      	mov	r7, r1
 8012434:	4614      	mov	r4, r2
 8012436:	18d5      	adds	r5, r2, r3
 8012438:	42ac      	cmp	r4, r5
 801243a:	d101      	bne.n	8012440 <__sfputs_r+0x12>
 801243c:	2000      	movs	r0, #0
 801243e:	e007      	b.n	8012450 <__sfputs_r+0x22>
 8012440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012444:	463a      	mov	r2, r7
 8012446:	4630      	mov	r0, r6
 8012448:	f7ff ffda 	bl	8012400 <__sfputc_r>
 801244c:	1c43      	adds	r3, r0, #1
 801244e:	d1f3      	bne.n	8012438 <__sfputs_r+0xa>
 8012450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012454 <_vfiprintf_r>:
 8012454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012458:	460d      	mov	r5, r1
 801245a:	b09d      	sub	sp, #116	@ 0x74
 801245c:	4614      	mov	r4, r2
 801245e:	4698      	mov	r8, r3
 8012460:	4606      	mov	r6, r0
 8012462:	b118      	cbz	r0, 801246c <_vfiprintf_r+0x18>
 8012464:	6a03      	ldr	r3, [r0, #32]
 8012466:	b90b      	cbnz	r3, 801246c <_vfiprintf_r+0x18>
 8012468:	f7fc fa16 	bl	800e898 <__sinit>
 801246c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801246e:	07d9      	lsls	r1, r3, #31
 8012470:	d405      	bmi.n	801247e <_vfiprintf_r+0x2a>
 8012472:	89ab      	ldrh	r3, [r5, #12]
 8012474:	059a      	lsls	r2, r3, #22
 8012476:	d402      	bmi.n	801247e <_vfiprintf_r+0x2a>
 8012478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801247a:	f7fd fc2f 	bl	800fcdc <__retarget_lock_acquire_recursive>
 801247e:	89ab      	ldrh	r3, [r5, #12]
 8012480:	071b      	lsls	r3, r3, #28
 8012482:	d501      	bpl.n	8012488 <_vfiprintf_r+0x34>
 8012484:	692b      	ldr	r3, [r5, #16]
 8012486:	b99b      	cbnz	r3, 80124b0 <_vfiprintf_r+0x5c>
 8012488:	4629      	mov	r1, r5
 801248a:	4630      	mov	r0, r6
 801248c:	f7fc fbba 	bl	800ec04 <__swsetup_r>
 8012490:	b170      	cbz	r0, 80124b0 <_vfiprintf_r+0x5c>
 8012492:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012494:	07dc      	lsls	r4, r3, #31
 8012496:	d504      	bpl.n	80124a2 <_vfiprintf_r+0x4e>
 8012498:	f04f 30ff 	mov.w	r0, #4294967295
 801249c:	b01d      	add	sp, #116	@ 0x74
 801249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a2:	89ab      	ldrh	r3, [r5, #12]
 80124a4:	0598      	lsls	r0, r3, #22
 80124a6:	d4f7      	bmi.n	8012498 <_vfiprintf_r+0x44>
 80124a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124aa:	f7fd fc19 	bl	800fce0 <__retarget_lock_release_recursive>
 80124ae:	e7f3      	b.n	8012498 <_vfiprintf_r+0x44>
 80124b0:	2300      	movs	r3, #0
 80124b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80124b4:	2320      	movs	r3, #32
 80124b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80124be:	2330      	movs	r3, #48	@ 0x30
 80124c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012670 <_vfiprintf_r+0x21c>
 80124c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124c8:	f04f 0901 	mov.w	r9, #1
 80124cc:	4623      	mov	r3, r4
 80124ce:	469a      	mov	sl, r3
 80124d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124d4:	b10a      	cbz	r2, 80124da <_vfiprintf_r+0x86>
 80124d6:	2a25      	cmp	r2, #37	@ 0x25
 80124d8:	d1f9      	bne.n	80124ce <_vfiprintf_r+0x7a>
 80124da:	ebba 0b04 	subs.w	fp, sl, r4
 80124de:	d00b      	beq.n	80124f8 <_vfiprintf_r+0xa4>
 80124e0:	465b      	mov	r3, fp
 80124e2:	4622      	mov	r2, r4
 80124e4:	4629      	mov	r1, r5
 80124e6:	4630      	mov	r0, r6
 80124e8:	f7ff ffa1 	bl	801242e <__sfputs_r>
 80124ec:	3001      	adds	r0, #1
 80124ee:	f000 80a7 	beq.w	8012640 <_vfiprintf_r+0x1ec>
 80124f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124f4:	445a      	add	r2, fp
 80124f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80124f8:	f89a 3000 	ldrb.w	r3, [sl]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 809f 	beq.w	8012640 <_vfiprintf_r+0x1ec>
 8012502:	2300      	movs	r3, #0
 8012504:	f04f 32ff 	mov.w	r2, #4294967295
 8012508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801250c:	f10a 0a01 	add.w	sl, sl, #1
 8012510:	9304      	str	r3, [sp, #16]
 8012512:	9307      	str	r3, [sp, #28]
 8012514:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012518:	931a      	str	r3, [sp, #104]	@ 0x68
 801251a:	4654      	mov	r4, sl
 801251c:	2205      	movs	r2, #5
 801251e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012522:	4853      	ldr	r0, [pc, #332]	@ (8012670 <_vfiprintf_r+0x21c>)
 8012524:	f7ed fe6c 	bl	8000200 <memchr>
 8012528:	9a04      	ldr	r2, [sp, #16]
 801252a:	b9d8      	cbnz	r0, 8012564 <_vfiprintf_r+0x110>
 801252c:	06d1      	lsls	r1, r2, #27
 801252e:	bf44      	itt	mi
 8012530:	2320      	movmi	r3, #32
 8012532:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012536:	0713      	lsls	r3, r2, #28
 8012538:	bf44      	itt	mi
 801253a:	232b      	movmi	r3, #43	@ 0x2b
 801253c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012540:	f89a 3000 	ldrb.w	r3, [sl]
 8012544:	2b2a      	cmp	r3, #42	@ 0x2a
 8012546:	d015      	beq.n	8012574 <_vfiprintf_r+0x120>
 8012548:	9a07      	ldr	r2, [sp, #28]
 801254a:	4654      	mov	r4, sl
 801254c:	2000      	movs	r0, #0
 801254e:	f04f 0c0a 	mov.w	ip, #10
 8012552:	4621      	mov	r1, r4
 8012554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012558:	3b30      	subs	r3, #48	@ 0x30
 801255a:	2b09      	cmp	r3, #9
 801255c:	d94b      	bls.n	80125f6 <_vfiprintf_r+0x1a2>
 801255e:	b1b0      	cbz	r0, 801258e <_vfiprintf_r+0x13a>
 8012560:	9207      	str	r2, [sp, #28]
 8012562:	e014      	b.n	801258e <_vfiprintf_r+0x13a>
 8012564:	eba0 0308 	sub.w	r3, r0, r8
 8012568:	fa09 f303 	lsl.w	r3, r9, r3
 801256c:	4313      	orrs	r3, r2
 801256e:	9304      	str	r3, [sp, #16]
 8012570:	46a2      	mov	sl, r4
 8012572:	e7d2      	b.n	801251a <_vfiprintf_r+0xc6>
 8012574:	9b03      	ldr	r3, [sp, #12]
 8012576:	1d19      	adds	r1, r3, #4
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	9103      	str	r1, [sp, #12]
 801257c:	2b00      	cmp	r3, #0
 801257e:	bfbb      	ittet	lt
 8012580:	425b      	neglt	r3, r3
 8012582:	f042 0202 	orrlt.w	r2, r2, #2
 8012586:	9307      	strge	r3, [sp, #28]
 8012588:	9307      	strlt	r3, [sp, #28]
 801258a:	bfb8      	it	lt
 801258c:	9204      	strlt	r2, [sp, #16]
 801258e:	7823      	ldrb	r3, [r4, #0]
 8012590:	2b2e      	cmp	r3, #46	@ 0x2e
 8012592:	d10a      	bne.n	80125aa <_vfiprintf_r+0x156>
 8012594:	7863      	ldrb	r3, [r4, #1]
 8012596:	2b2a      	cmp	r3, #42	@ 0x2a
 8012598:	d132      	bne.n	8012600 <_vfiprintf_r+0x1ac>
 801259a:	9b03      	ldr	r3, [sp, #12]
 801259c:	1d1a      	adds	r2, r3, #4
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	9203      	str	r2, [sp, #12]
 80125a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125a6:	3402      	adds	r4, #2
 80125a8:	9305      	str	r3, [sp, #20]
 80125aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012680 <_vfiprintf_r+0x22c>
 80125ae:	7821      	ldrb	r1, [r4, #0]
 80125b0:	2203      	movs	r2, #3
 80125b2:	4650      	mov	r0, sl
 80125b4:	f7ed fe24 	bl	8000200 <memchr>
 80125b8:	b138      	cbz	r0, 80125ca <_vfiprintf_r+0x176>
 80125ba:	9b04      	ldr	r3, [sp, #16]
 80125bc:	eba0 000a 	sub.w	r0, r0, sl
 80125c0:	2240      	movs	r2, #64	@ 0x40
 80125c2:	4082      	lsls	r2, r0
 80125c4:	4313      	orrs	r3, r2
 80125c6:	3401      	adds	r4, #1
 80125c8:	9304      	str	r3, [sp, #16]
 80125ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ce:	4829      	ldr	r0, [pc, #164]	@ (8012674 <_vfiprintf_r+0x220>)
 80125d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80125d4:	2206      	movs	r2, #6
 80125d6:	f7ed fe13 	bl	8000200 <memchr>
 80125da:	2800      	cmp	r0, #0
 80125dc:	d03f      	beq.n	801265e <_vfiprintf_r+0x20a>
 80125de:	4b26      	ldr	r3, [pc, #152]	@ (8012678 <_vfiprintf_r+0x224>)
 80125e0:	bb1b      	cbnz	r3, 801262a <_vfiprintf_r+0x1d6>
 80125e2:	9b03      	ldr	r3, [sp, #12]
 80125e4:	3307      	adds	r3, #7
 80125e6:	f023 0307 	bic.w	r3, r3, #7
 80125ea:	3308      	adds	r3, #8
 80125ec:	9303      	str	r3, [sp, #12]
 80125ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125f0:	443b      	add	r3, r7
 80125f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125f4:	e76a      	b.n	80124cc <_vfiprintf_r+0x78>
 80125f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80125fa:	460c      	mov	r4, r1
 80125fc:	2001      	movs	r0, #1
 80125fe:	e7a8      	b.n	8012552 <_vfiprintf_r+0xfe>
 8012600:	2300      	movs	r3, #0
 8012602:	3401      	adds	r4, #1
 8012604:	9305      	str	r3, [sp, #20]
 8012606:	4619      	mov	r1, r3
 8012608:	f04f 0c0a 	mov.w	ip, #10
 801260c:	4620      	mov	r0, r4
 801260e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012612:	3a30      	subs	r2, #48	@ 0x30
 8012614:	2a09      	cmp	r2, #9
 8012616:	d903      	bls.n	8012620 <_vfiprintf_r+0x1cc>
 8012618:	2b00      	cmp	r3, #0
 801261a:	d0c6      	beq.n	80125aa <_vfiprintf_r+0x156>
 801261c:	9105      	str	r1, [sp, #20]
 801261e:	e7c4      	b.n	80125aa <_vfiprintf_r+0x156>
 8012620:	fb0c 2101 	mla	r1, ip, r1, r2
 8012624:	4604      	mov	r4, r0
 8012626:	2301      	movs	r3, #1
 8012628:	e7f0      	b.n	801260c <_vfiprintf_r+0x1b8>
 801262a:	ab03      	add	r3, sp, #12
 801262c:	9300      	str	r3, [sp, #0]
 801262e:	462a      	mov	r2, r5
 8012630:	4b12      	ldr	r3, [pc, #72]	@ (801267c <_vfiprintf_r+0x228>)
 8012632:	a904      	add	r1, sp, #16
 8012634:	4630      	mov	r0, r6
 8012636:	f7fb fced 	bl	800e014 <_printf_float>
 801263a:	4607      	mov	r7, r0
 801263c:	1c78      	adds	r0, r7, #1
 801263e:	d1d6      	bne.n	80125ee <_vfiprintf_r+0x19a>
 8012640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012642:	07d9      	lsls	r1, r3, #31
 8012644:	d405      	bmi.n	8012652 <_vfiprintf_r+0x1fe>
 8012646:	89ab      	ldrh	r3, [r5, #12]
 8012648:	059a      	lsls	r2, r3, #22
 801264a:	d402      	bmi.n	8012652 <_vfiprintf_r+0x1fe>
 801264c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801264e:	f7fd fb47 	bl	800fce0 <__retarget_lock_release_recursive>
 8012652:	89ab      	ldrh	r3, [r5, #12]
 8012654:	065b      	lsls	r3, r3, #25
 8012656:	f53f af1f 	bmi.w	8012498 <_vfiprintf_r+0x44>
 801265a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801265c:	e71e      	b.n	801249c <_vfiprintf_r+0x48>
 801265e:	ab03      	add	r3, sp, #12
 8012660:	9300      	str	r3, [sp, #0]
 8012662:	462a      	mov	r2, r5
 8012664:	4b05      	ldr	r3, [pc, #20]	@ (801267c <_vfiprintf_r+0x228>)
 8012666:	a904      	add	r1, sp, #16
 8012668:	4630      	mov	r0, r6
 801266a:	f7fb ff6b 	bl	800e544 <_printf_i>
 801266e:	e7e4      	b.n	801263a <_vfiprintf_r+0x1e6>
 8012670:	08014013 	.word	0x08014013
 8012674:	0801401d 	.word	0x0801401d
 8012678:	0800e015 	.word	0x0800e015
 801267c:	0801242f 	.word	0x0801242f
 8012680:	08014019 	.word	0x08014019

08012684 <_scanf_chars>:
 8012684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012688:	4615      	mov	r5, r2
 801268a:	688a      	ldr	r2, [r1, #8]
 801268c:	4680      	mov	r8, r0
 801268e:	460c      	mov	r4, r1
 8012690:	b932      	cbnz	r2, 80126a0 <_scanf_chars+0x1c>
 8012692:	698a      	ldr	r2, [r1, #24]
 8012694:	2a00      	cmp	r2, #0
 8012696:	bf14      	ite	ne
 8012698:	f04f 32ff 	movne.w	r2, #4294967295
 801269c:	2201      	moveq	r2, #1
 801269e:	608a      	str	r2, [r1, #8]
 80126a0:	6822      	ldr	r2, [r4, #0]
 80126a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012734 <_scanf_chars+0xb0>
 80126a6:	06d1      	lsls	r1, r2, #27
 80126a8:	bf5f      	itttt	pl
 80126aa:	681a      	ldrpl	r2, [r3, #0]
 80126ac:	1d11      	addpl	r1, r2, #4
 80126ae:	6019      	strpl	r1, [r3, #0]
 80126b0:	6816      	ldrpl	r6, [r2, #0]
 80126b2:	2700      	movs	r7, #0
 80126b4:	69a0      	ldr	r0, [r4, #24]
 80126b6:	b188      	cbz	r0, 80126dc <_scanf_chars+0x58>
 80126b8:	2801      	cmp	r0, #1
 80126ba:	d107      	bne.n	80126cc <_scanf_chars+0x48>
 80126bc:	682b      	ldr	r3, [r5, #0]
 80126be:	781a      	ldrb	r2, [r3, #0]
 80126c0:	6963      	ldr	r3, [r4, #20]
 80126c2:	5c9b      	ldrb	r3, [r3, r2]
 80126c4:	b953      	cbnz	r3, 80126dc <_scanf_chars+0x58>
 80126c6:	2f00      	cmp	r7, #0
 80126c8:	d031      	beq.n	801272e <_scanf_chars+0xaa>
 80126ca:	e022      	b.n	8012712 <_scanf_chars+0x8e>
 80126cc:	2802      	cmp	r0, #2
 80126ce:	d120      	bne.n	8012712 <_scanf_chars+0x8e>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80126d8:	071b      	lsls	r3, r3, #28
 80126da:	d41a      	bmi.n	8012712 <_scanf_chars+0x8e>
 80126dc:	6823      	ldr	r3, [r4, #0]
 80126de:	06da      	lsls	r2, r3, #27
 80126e0:	bf5e      	ittt	pl
 80126e2:	682b      	ldrpl	r3, [r5, #0]
 80126e4:	781b      	ldrbpl	r3, [r3, #0]
 80126e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80126ea:	682a      	ldr	r2, [r5, #0]
 80126ec:	686b      	ldr	r3, [r5, #4]
 80126ee:	3201      	adds	r2, #1
 80126f0:	602a      	str	r2, [r5, #0]
 80126f2:	68a2      	ldr	r2, [r4, #8]
 80126f4:	3b01      	subs	r3, #1
 80126f6:	3a01      	subs	r2, #1
 80126f8:	606b      	str	r3, [r5, #4]
 80126fa:	3701      	adds	r7, #1
 80126fc:	60a2      	str	r2, [r4, #8]
 80126fe:	b142      	cbz	r2, 8012712 <_scanf_chars+0x8e>
 8012700:	2b00      	cmp	r3, #0
 8012702:	dcd7      	bgt.n	80126b4 <_scanf_chars+0x30>
 8012704:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012708:	4629      	mov	r1, r5
 801270a:	4640      	mov	r0, r8
 801270c:	4798      	blx	r3
 801270e:	2800      	cmp	r0, #0
 8012710:	d0d0      	beq.n	80126b4 <_scanf_chars+0x30>
 8012712:	6823      	ldr	r3, [r4, #0]
 8012714:	f013 0310 	ands.w	r3, r3, #16
 8012718:	d105      	bne.n	8012726 <_scanf_chars+0xa2>
 801271a:	68e2      	ldr	r2, [r4, #12]
 801271c:	3201      	adds	r2, #1
 801271e:	60e2      	str	r2, [r4, #12]
 8012720:	69a2      	ldr	r2, [r4, #24]
 8012722:	b102      	cbz	r2, 8012726 <_scanf_chars+0xa2>
 8012724:	7033      	strb	r3, [r6, #0]
 8012726:	6923      	ldr	r3, [r4, #16]
 8012728:	443b      	add	r3, r7
 801272a:	6123      	str	r3, [r4, #16]
 801272c:	2000      	movs	r0, #0
 801272e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012732:	bf00      	nop
 8012734:	08014109 	.word	0x08014109

08012738 <_scanf_i>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	4698      	mov	r8, r3
 801273e:	4b74      	ldr	r3, [pc, #464]	@ (8012910 <_scanf_i+0x1d8>)
 8012740:	460c      	mov	r4, r1
 8012742:	4682      	mov	sl, r0
 8012744:	4616      	mov	r6, r2
 8012746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801274a:	b087      	sub	sp, #28
 801274c:	ab03      	add	r3, sp, #12
 801274e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012752:	4b70      	ldr	r3, [pc, #448]	@ (8012914 <_scanf_i+0x1dc>)
 8012754:	69a1      	ldr	r1, [r4, #24]
 8012756:	4a70      	ldr	r2, [pc, #448]	@ (8012918 <_scanf_i+0x1e0>)
 8012758:	2903      	cmp	r1, #3
 801275a:	bf08      	it	eq
 801275c:	461a      	moveq	r2, r3
 801275e:	68a3      	ldr	r3, [r4, #8]
 8012760:	9201      	str	r2, [sp, #4]
 8012762:	1e5a      	subs	r2, r3, #1
 8012764:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012768:	bf88      	it	hi
 801276a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801276e:	4627      	mov	r7, r4
 8012770:	bf82      	ittt	hi
 8012772:	eb03 0905 	addhi.w	r9, r3, r5
 8012776:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801277a:	60a3      	strhi	r3, [r4, #8]
 801277c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012780:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012784:	bf98      	it	ls
 8012786:	f04f 0900 	movls.w	r9, #0
 801278a:	6023      	str	r3, [r4, #0]
 801278c:	463d      	mov	r5, r7
 801278e:	f04f 0b00 	mov.w	fp, #0
 8012792:	6831      	ldr	r1, [r6, #0]
 8012794:	ab03      	add	r3, sp, #12
 8012796:	7809      	ldrb	r1, [r1, #0]
 8012798:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801279c:	2202      	movs	r2, #2
 801279e:	f7ed fd2f 	bl	8000200 <memchr>
 80127a2:	b328      	cbz	r0, 80127f0 <_scanf_i+0xb8>
 80127a4:	f1bb 0f01 	cmp.w	fp, #1
 80127a8:	d159      	bne.n	801285e <_scanf_i+0x126>
 80127aa:	6862      	ldr	r2, [r4, #4]
 80127ac:	b92a      	cbnz	r2, 80127ba <_scanf_i+0x82>
 80127ae:	6822      	ldr	r2, [r4, #0]
 80127b0:	2108      	movs	r1, #8
 80127b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80127b6:	6061      	str	r1, [r4, #4]
 80127b8:	6022      	str	r2, [r4, #0]
 80127ba:	6822      	ldr	r2, [r4, #0]
 80127bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80127c0:	6022      	str	r2, [r4, #0]
 80127c2:	68a2      	ldr	r2, [r4, #8]
 80127c4:	1e51      	subs	r1, r2, #1
 80127c6:	60a1      	str	r1, [r4, #8]
 80127c8:	b192      	cbz	r2, 80127f0 <_scanf_i+0xb8>
 80127ca:	6832      	ldr	r2, [r6, #0]
 80127cc:	1c51      	adds	r1, r2, #1
 80127ce:	6031      	str	r1, [r6, #0]
 80127d0:	7812      	ldrb	r2, [r2, #0]
 80127d2:	f805 2b01 	strb.w	r2, [r5], #1
 80127d6:	6872      	ldr	r2, [r6, #4]
 80127d8:	3a01      	subs	r2, #1
 80127da:	2a00      	cmp	r2, #0
 80127dc:	6072      	str	r2, [r6, #4]
 80127de:	dc07      	bgt.n	80127f0 <_scanf_i+0xb8>
 80127e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80127e4:	4631      	mov	r1, r6
 80127e6:	4650      	mov	r0, sl
 80127e8:	4790      	blx	r2
 80127ea:	2800      	cmp	r0, #0
 80127ec:	f040 8085 	bne.w	80128fa <_scanf_i+0x1c2>
 80127f0:	f10b 0b01 	add.w	fp, fp, #1
 80127f4:	f1bb 0f03 	cmp.w	fp, #3
 80127f8:	d1cb      	bne.n	8012792 <_scanf_i+0x5a>
 80127fa:	6863      	ldr	r3, [r4, #4]
 80127fc:	b90b      	cbnz	r3, 8012802 <_scanf_i+0xca>
 80127fe:	230a      	movs	r3, #10
 8012800:	6063      	str	r3, [r4, #4]
 8012802:	6863      	ldr	r3, [r4, #4]
 8012804:	4945      	ldr	r1, [pc, #276]	@ (801291c <_scanf_i+0x1e4>)
 8012806:	6960      	ldr	r0, [r4, #20]
 8012808:	1ac9      	subs	r1, r1, r3
 801280a:	f000 f9dd 	bl	8012bc8 <__sccl>
 801280e:	f04f 0b00 	mov.w	fp, #0
 8012812:	68a3      	ldr	r3, [r4, #8]
 8012814:	6822      	ldr	r2, [r4, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d03d      	beq.n	8012896 <_scanf_i+0x15e>
 801281a:	6831      	ldr	r1, [r6, #0]
 801281c:	6960      	ldr	r0, [r4, #20]
 801281e:	f891 c000 	ldrb.w	ip, [r1]
 8012822:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012826:	2800      	cmp	r0, #0
 8012828:	d035      	beq.n	8012896 <_scanf_i+0x15e>
 801282a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801282e:	d124      	bne.n	801287a <_scanf_i+0x142>
 8012830:	0510      	lsls	r0, r2, #20
 8012832:	d522      	bpl.n	801287a <_scanf_i+0x142>
 8012834:	f10b 0b01 	add.w	fp, fp, #1
 8012838:	f1b9 0f00 	cmp.w	r9, #0
 801283c:	d003      	beq.n	8012846 <_scanf_i+0x10e>
 801283e:	3301      	adds	r3, #1
 8012840:	f109 39ff 	add.w	r9, r9, #4294967295
 8012844:	60a3      	str	r3, [r4, #8]
 8012846:	6873      	ldr	r3, [r6, #4]
 8012848:	3b01      	subs	r3, #1
 801284a:	2b00      	cmp	r3, #0
 801284c:	6073      	str	r3, [r6, #4]
 801284e:	dd1b      	ble.n	8012888 <_scanf_i+0x150>
 8012850:	6833      	ldr	r3, [r6, #0]
 8012852:	3301      	adds	r3, #1
 8012854:	6033      	str	r3, [r6, #0]
 8012856:	68a3      	ldr	r3, [r4, #8]
 8012858:	3b01      	subs	r3, #1
 801285a:	60a3      	str	r3, [r4, #8]
 801285c:	e7d9      	b.n	8012812 <_scanf_i+0xda>
 801285e:	f1bb 0f02 	cmp.w	fp, #2
 8012862:	d1ae      	bne.n	80127c2 <_scanf_i+0x8a>
 8012864:	6822      	ldr	r2, [r4, #0]
 8012866:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801286a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801286e:	d1c4      	bne.n	80127fa <_scanf_i+0xc2>
 8012870:	2110      	movs	r1, #16
 8012872:	6061      	str	r1, [r4, #4]
 8012874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012878:	e7a2      	b.n	80127c0 <_scanf_i+0x88>
 801287a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801287e:	6022      	str	r2, [r4, #0]
 8012880:	780b      	ldrb	r3, [r1, #0]
 8012882:	f805 3b01 	strb.w	r3, [r5], #1
 8012886:	e7de      	b.n	8012846 <_scanf_i+0x10e>
 8012888:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801288c:	4631      	mov	r1, r6
 801288e:	4650      	mov	r0, sl
 8012890:	4798      	blx	r3
 8012892:	2800      	cmp	r0, #0
 8012894:	d0df      	beq.n	8012856 <_scanf_i+0x11e>
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	05d9      	lsls	r1, r3, #23
 801289a:	d50d      	bpl.n	80128b8 <_scanf_i+0x180>
 801289c:	42bd      	cmp	r5, r7
 801289e:	d909      	bls.n	80128b4 <_scanf_i+0x17c>
 80128a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80128a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80128a8:	4632      	mov	r2, r6
 80128aa:	4650      	mov	r0, sl
 80128ac:	4798      	blx	r3
 80128ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80128b2:	464d      	mov	r5, r9
 80128b4:	42bd      	cmp	r5, r7
 80128b6:	d028      	beq.n	801290a <_scanf_i+0x1d2>
 80128b8:	6822      	ldr	r2, [r4, #0]
 80128ba:	f012 0210 	ands.w	r2, r2, #16
 80128be:	d113      	bne.n	80128e8 <_scanf_i+0x1b0>
 80128c0:	702a      	strb	r2, [r5, #0]
 80128c2:	6863      	ldr	r3, [r4, #4]
 80128c4:	9e01      	ldr	r6, [sp, #4]
 80128c6:	4639      	mov	r1, r7
 80128c8:	4650      	mov	r0, sl
 80128ca:	47b0      	blx	r6
 80128cc:	f8d8 3000 	ldr.w	r3, [r8]
 80128d0:	6821      	ldr	r1, [r4, #0]
 80128d2:	1d1a      	adds	r2, r3, #4
 80128d4:	f8c8 2000 	str.w	r2, [r8]
 80128d8:	f011 0f20 	tst.w	r1, #32
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	d00f      	beq.n	8012900 <_scanf_i+0x1c8>
 80128e0:	6018      	str	r0, [r3, #0]
 80128e2:	68e3      	ldr	r3, [r4, #12]
 80128e4:	3301      	adds	r3, #1
 80128e6:	60e3      	str	r3, [r4, #12]
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	1bed      	subs	r5, r5, r7
 80128ec:	445d      	add	r5, fp
 80128ee:	442b      	add	r3, r5
 80128f0:	6123      	str	r3, [r4, #16]
 80128f2:	2000      	movs	r0, #0
 80128f4:	b007      	add	sp, #28
 80128f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fa:	f04f 0b00 	mov.w	fp, #0
 80128fe:	e7ca      	b.n	8012896 <_scanf_i+0x15e>
 8012900:	07ca      	lsls	r2, r1, #31
 8012902:	bf4c      	ite	mi
 8012904:	8018      	strhmi	r0, [r3, #0]
 8012906:	6018      	strpl	r0, [r3, #0]
 8012908:	e7eb      	b.n	80128e2 <_scanf_i+0x1aa>
 801290a:	2001      	movs	r0, #1
 801290c:	e7f2      	b.n	80128f4 <_scanf_i+0x1bc>
 801290e:	bf00      	nop
 8012910:	08013bb4 	.word	0x08013bb4
 8012914:	0800debd 	.word	0x0800debd
 8012918:	08011d81 	.word	0x08011d81
 801291c:	08014034 	.word	0x08014034

08012920 <__sflush_r>:
 8012920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012928:	0716      	lsls	r6, r2, #28
 801292a:	4605      	mov	r5, r0
 801292c:	460c      	mov	r4, r1
 801292e:	d454      	bmi.n	80129da <__sflush_r+0xba>
 8012930:	684b      	ldr	r3, [r1, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	dc02      	bgt.n	801293c <__sflush_r+0x1c>
 8012936:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012938:	2b00      	cmp	r3, #0
 801293a:	dd48      	ble.n	80129ce <__sflush_r+0xae>
 801293c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801293e:	2e00      	cmp	r6, #0
 8012940:	d045      	beq.n	80129ce <__sflush_r+0xae>
 8012942:	2300      	movs	r3, #0
 8012944:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012948:	682f      	ldr	r7, [r5, #0]
 801294a:	6a21      	ldr	r1, [r4, #32]
 801294c:	602b      	str	r3, [r5, #0]
 801294e:	d030      	beq.n	80129b2 <__sflush_r+0x92>
 8012950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012952:	89a3      	ldrh	r3, [r4, #12]
 8012954:	0759      	lsls	r1, r3, #29
 8012956:	d505      	bpl.n	8012964 <__sflush_r+0x44>
 8012958:	6863      	ldr	r3, [r4, #4]
 801295a:	1ad2      	subs	r2, r2, r3
 801295c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801295e:	b10b      	cbz	r3, 8012964 <__sflush_r+0x44>
 8012960:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012962:	1ad2      	subs	r2, r2, r3
 8012964:	2300      	movs	r3, #0
 8012966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012968:	6a21      	ldr	r1, [r4, #32]
 801296a:	4628      	mov	r0, r5
 801296c:	47b0      	blx	r6
 801296e:	1c43      	adds	r3, r0, #1
 8012970:	89a3      	ldrh	r3, [r4, #12]
 8012972:	d106      	bne.n	8012982 <__sflush_r+0x62>
 8012974:	6829      	ldr	r1, [r5, #0]
 8012976:	291d      	cmp	r1, #29
 8012978:	d82b      	bhi.n	80129d2 <__sflush_r+0xb2>
 801297a:	4a2a      	ldr	r2, [pc, #168]	@ (8012a24 <__sflush_r+0x104>)
 801297c:	40ca      	lsrs	r2, r1
 801297e:	07d6      	lsls	r6, r2, #31
 8012980:	d527      	bpl.n	80129d2 <__sflush_r+0xb2>
 8012982:	2200      	movs	r2, #0
 8012984:	6062      	str	r2, [r4, #4]
 8012986:	04d9      	lsls	r1, r3, #19
 8012988:	6922      	ldr	r2, [r4, #16]
 801298a:	6022      	str	r2, [r4, #0]
 801298c:	d504      	bpl.n	8012998 <__sflush_r+0x78>
 801298e:	1c42      	adds	r2, r0, #1
 8012990:	d101      	bne.n	8012996 <__sflush_r+0x76>
 8012992:	682b      	ldr	r3, [r5, #0]
 8012994:	b903      	cbnz	r3, 8012998 <__sflush_r+0x78>
 8012996:	6560      	str	r0, [r4, #84]	@ 0x54
 8012998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801299a:	602f      	str	r7, [r5, #0]
 801299c:	b1b9      	cbz	r1, 80129ce <__sflush_r+0xae>
 801299e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129a2:	4299      	cmp	r1, r3
 80129a4:	d002      	beq.n	80129ac <__sflush_r+0x8c>
 80129a6:	4628      	mov	r0, r5
 80129a8:	f7fe f83a 	bl	8010a20 <_free_r>
 80129ac:	2300      	movs	r3, #0
 80129ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80129b0:	e00d      	b.n	80129ce <__sflush_r+0xae>
 80129b2:	2301      	movs	r3, #1
 80129b4:	4628      	mov	r0, r5
 80129b6:	47b0      	blx	r6
 80129b8:	4602      	mov	r2, r0
 80129ba:	1c50      	adds	r0, r2, #1
 80129bc:	d1c9      	bne.n	8012952 <__sflush_r+0x32>
 80129be:	682b      	ldr	r3, [r5, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d0c6      	beq.n	8012952 <__sflush_r+0x32>
 80129c4:	2b1d      	cmp	r3, #29
 80129c6:	d001      	beq.n	80129cc <__sflush_r+0xac>
 80129c8:	2b16      	cmp	r3, #22
 80129ca:	d11e      	bne.n	8012a0a <__sflush_r+0xea>
 80129cc:	602f      	str	r7, [r5, #0]
 80129ce:	2000      	movs	r0, #0
 80129d0:	e022      	b.n	8012a18 <__sflush_r+0xf8>
 80129d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129d6:	b21b      	sxth	r3, r3
 80129d8:	e01b      	b.n	8012a12 <__sflush_r+0xf2>
 80129da:	690f      	ldr	r7, [r1, #16]
 80129dc:	2f00      	cmp	r7, #0
 80129de:	d0f6      	beq.n	80129ce <__sflush_r+0xae>
 80129e0:	0793      	lsls	r3, r2, #30
 80129e2:	680e      	ldr	r6, [r1, #0]
 80129e4:	bf08      	it	eq
 80129e6:	694b      	ldreq	r3, [r1, #20]
 80129e8:	600f      	str	r7, [r1, #0]
 80129ea:	bf18      	it	ne
 80129ec:	2300      	movne	r3, #0
 80129ee:	eba6 0807 	sub.w	r8, r6, r7
 80129f2:	608b      	str	r3, [r1, #8]
 80129f4:	f1b8 0f00 	cmp.w	r8, #0
 80129f8:	dde9      	ble.n	80129ce <__sflush_r+0xae>
 80129fa:	6a21      	ldr	r1, [r4, #32]
 80129fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129fe:	4643      	mov	r3, r8
 8012a00:	463a      	mov	r2, r7
 8012a02:	4628      	mov	r0, r5
 8012a04:	47b0      	blx	r6
 8012a06:	2800      	cmp	r0, #0
 8012a08:	dc08      	bgt.n	8012a1c <__sflush_r+0xfc>
 8012a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a12:	81a3      	strh	r3, [r4, #12]
 8012a14:	f04f 30ff 	mov.w	r0, #4294967295
 8012a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a1c:	4407      	add	r7, r0
 8012a1e:	eba8 0800 	sub.w	r8, r8, r0
 8012a22:	e7e7      	b.n	80129f4 <__sflush_r+0xd4>
 8012a24:	20400001 	.word	0x20400001

08012a28 <_fflush_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	690b      	ldr	r3, [r1, #16]
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	460c      	mov	r4, r1
 8012a30:	b913      	cbnz	r3, 8012a38 <_fflush_r+0x10>
 8012a32:	2500      	movs	r5, #0
 8012a34:	4628      	mov	r0, r5
 8012a36:	bd38      	pop	{r3, r4, r5, pc}
 8012a38:	b118      	cbz	r0, 8012a42 <_fflush_r+0x1a>
 8012a3a:	6a03      	ldr	r3, [r0, #32]
 8012a3c:	b90b      	cbnz	r3, 8012a42 <_fflush_r+0x1a>
 8012a3e:	f7fb ff2b 	bl	800e898 <__sinit>
 8012a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d0f3      	beq.n	8012a32 <_fflush_r+0xa>
 8012a4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a4c:	07d0      	lsls	r0, r2, #31
 8012a4e:	d404      	bmi.n	8012a5a <_fflush_r+0x32>
 8012a50:	0599      	lsls	r1, r3, #22
 8012a52:	d402      	bmi.n	8012a5a <_fflush_r+0x32>
 8012a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a56:	f7fd f941 	bl	800fcdc <__retarget_lock_acquire_recursive>
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	4621      	mov	r1, r4
 8012a5e:	f7ff ff5f 	bl	8012920 <__sflush_r>
 8012a62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a64:	07da      	lsls	r2, r3, #31
 8012a66:	4605      	mov	r5, r0
 8012a68:	d4e4      	bmi.n	8012a34 <_fflush_r+0xc>
 8012a6a:	89a3      	ldrh	r3, [r4, #12]
 8012a6c:	059b      	lsls	r3, r3, #22
 8012a6e:	d4e1      	bmi.n	8012a34 <_fflush_r+0xc>
 8012a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a72:	f7fd f935 	bl	800fce0 <__retarget_lock_release_recursive>
 8012a76:	e7dd      	b.n	8012a34 <_fflush_r+0xc>

08012a78 <fiprintf>:
 8012a78:	b40e      	push	{r1, r2, r3}
 8012a7a:	b503      	push	{r0, r1, lr}
 8012a7c:	4601      	mov	r1, r0
 8012a7e:	ab03      	add	r3, sp, #12
 8012a80:	4805      	ldr	r0, [pc, #20]	@ (8012a98 <fiprintf+0x20>)
 8012a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a86:	6800      	ldr	r0, [r0, #0]
 8012a88:	9301      	str	r3, [sp, #4]
 8012a8a:	f7ff fce3 	bl	8012454 <_vfiprintf_r>
 8012a8e:	b002      	add	sp, #8
 8012a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a94:	b003      	add	sp, #12
 8012a96:	4770      	bx	lr
 8012a98:	200001a4 	.word	0x200001a4

08012a9c <__swhatbuf_r>:
 8012a9c:	b570      	push	{r4, r5, r6, lr}
 8012a9e:	460c      	mov	r4, r1
 8012aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aa4:	2900      	cmp	r1, #0
 8012aa6:	b096      	sub	sp, #88	@ 0x58
 8012aa8:	4615      	mov	r5, r2
 8012aaa:	461e      	mov	r6, r3
 8012aac:	da0d      	bge.n	8012aca <__swhatbuf_r+0x2e>
 8012aae:	89a3      	ldrh	r3, [r4, #12]
 8012ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ab4:	f04f 0100 	mov.w	r1, #0
 8012ab8:	bf14      	ite	ne
 8012aba:	2340      	movne	r3, #64	@ 0x40
 8012abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	6031      	str	r1, [r6, #0]
 8012ac4:	602b      	str	r3, [r5, #0]
 8012ac6:	b016      	add	sp, #88	@ 0x58
 8012ac8:	bd70      	pop	{r4, r5, r6, pc}
 8012aca:	466a      	mov	r2, sp
 8012acc:	f000 f9e2 	bl	8012e94 <_fstat_r>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	dbec      	blt.n	8012aae <__swhatbuf_r+0x12>
 8012ad4:	9901      	ldr	r1, [sp, #4]
 8012ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012ade:	4259      	negs	r1, r3
 8012ae0:	4159      	adcs	r1, r3
 8012ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ae6:	e7eb      	b.n	8012ac0 <__swhatbuf_r+0x24>

08012ae8 <__smakebuf_r>:
 8012ae8:	898b      	ldrh	r3, [r1, #12]
 8012aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012aec:	079d      	lsls	r5, r3, #30
 8012aee:	4606      	mov	r6, r0
 8012af0:	460c      	mov	r4, r1
 8012af2:	d507      	bpl.n	8012b04 <__smakebuf_r+0x1c>
 8012af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	6123      	str	r3, [r4, #16]
 8012afc:	2301      	movs	r3, #1
 8012afe:	6163      	str	r3, [r4, #20]
 8012b00:	b003      	add	sp, #12
 8012b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b04:	ab01      	add	r3, sp, #4
 8012b06:	466a      	mov	r2, sp
 8012b08:	f7ff ffc8 	bl	8012a9c <__swhatbuf_r>
 8012b0c:	9f00      	ldr	r7, [sp, #0]
 8012b0e:	4605      	mov	r5, r0
 8012b10:	4639      	mov	r1, r7
 8012b12:	4630      	mov	r0, r6
 8012b14:	f7fe fb7e 	bl	8011214 <_malloc_r>
 8012b18:	b948      	cbnz	r0, 8012b2e <__smakebuf_r+0x46>
 8012b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b1e:	059a      	lsls	r2, r3, #22
 8012b20:	d4ee      	bmi.n	8012b00 <__smakebuf_r+0x18>
 8012b22:	f023 0303 	bic.w	r3, r3, #3
 8012b26:	f043 0302 	orr.w	r3, r3, #2
 8012b2a:	81a3      	strh	r3, [r4, #12]
 8012b2c:	e7e2      	b.n	8012af4 <__smakebuf_r+0xc>
 8012b2e:	89a3      	ldrh	r3, [r4, #12]
 8012b30:	6020      	str	r0, [r4, #0]
 8012b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b36:	81a3      	strh	r3, [r4, #12]
 8012b38:	9b01      	ldr	r3, [sp, #4]
 8012b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012b3e:	b15b      	cbz	r3, 8012b58 <__smakebuf_r+0x70>
 8012b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b44:	4630      	mov	r0, r6
 8012b46:	f000 f9b7 	bl	8012eb8 <_isatty_r>
 8012b4a:	b128      	cbz	r0, 8012b58 <__smakebuf_r+0x70>
 8012b4c:	89a3      	ldrh	r3, [r4, #12]
 8012b4e:	f023 0303 	bic.w	r3, r3, #3
 8012b52:	f043 0301 	orr.w	r3, r3, #1
 8012b56:	81a3      	strh	r3, [r4, #12]
 8012b58:	89a3      	ldrh	r3, [r4, #12]
 8012b5a:	431d      	orrs	r5, r3
 8012b5c:	81a5      	strh	r5, [r4, #12]
 8012b5e:	e7cf      	b.n	8012b00 <__smakebuf_r+0x18>

08012b60 <_putc_r>:
 8012b60:	b570      	push	{r4, r5, r6, lr}
 8012b62:	460d      	mov	r5, r1
 8012b64:	4614      	mov	r4, r2
 8012b66:	4606      	mov	r6, r0
 8012b68:	b118      	cbz	r0, 8012b72 <_putc_r+0x12>
 8012b6a:	6a03      	ldr	r3, [r0, #32]
 8012b6c:	b90b      	cbnz	r3, 8012b72 <_putc_r+0x12>
 8012b6e:	f7fb fe93 	bl	800e898 <__sinit>
 8012b72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b74:	07d8      	lsls	r0, r3, #31
 8012b76:	d405      	bmi.n	8012b84 <_putc_r+0x24>
 8012b78:	89a3      	ldrh	r3, [r4, #12]
 8012b7a:	0599      	lsls	r1, r3, #22
 8012b7c:	d402      	bmi.n	8012b84 <_putc_r+0x24>
 8012b7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b80:	f7fd f8ac 	bl	800fcdc <__retarget_lock_acquire_recursive>
 8012b84:	68a3      	ldr	r3, [r4, #8]
 8012b86:	3b01      	subs	r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	60a3      	str	r3, [r4, #8]
 8012b8c:	da05      	bge.n	8012b9a <_putc_r+0x3a>
 8012b8e:	69a2      	ldr	r2, [r4, #24]
 8012b90:	4293      	cmp	r3, r2
 8012b92:	db12      	blt.n	8012bba <_putc_r+0x5a>
 8012b94:	b2eb      	uxtb	r3, r5
 8012b96:	2b0a      	cmp	r3, #10
 8012b98:	d00f      	beq.n	8012bba <_putc_r+0x5a>
 8012b9a:	6823      	ldr	r3, [r4, #0]
 8012b9c:	1c5a      	adds	r2, r3, #1
 8012b9e:	6022      	str	r2, [r4, #0]
 8012ba0:	701d      	strb	r5, [r3, #0]
 8012ba2:	b2ed      	uxtb	r5, r5
 8012ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ba6:	07da      	lsls	r2, r3, #31
 8012ba8:	d405      	bmi.n	8012bb6 <_putc_r+0x56>
 8012baa:	89a3      	ldrh	r3, [r4, #12]
 8012bac:	059b      	lsls	r3, r3, #22
 8012bae:	d402      	bmi.n	8012bb6 <_putc_r+0x56>
 8012bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012bb2:	f7fd f895 	bl	800fce0 <__retarget_lock_release_recursive>
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	bd70      	pop	{r4, r5, r6, pc}
 8012bba:	4629      	mov	r1, r5
 8012bbc:	4622      	mov	r2, r4
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f7fb ffe1 	bl	800eb86 <__swbuf_r>
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	e7ed      	b.n	8012ba4 <_putc_r+0x44>

08012bc8 <__sccl>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	780b      	ldrb	r3, [r1, #0]
 8012bcc:	4604      	mov	r4, r0
 8012bce:	2b5e      	cmp	r3, #94	@ 0x5e
 8012bd0:	bf0b      	itete	eq
 8012bd2:	784b      	ldrbeq	r3, [r1, #1]
 8012bd4:	1c4a      	addne	r2, r1, #1
 8012bd6:	1c8a      	addeq	r2, r1, #2
 8012bd8:	2100      	movne	r1, #0
 8012bda:	bf08      	it	eq
 8012bdc:	2101      	moveq	r1, #1
 8012bde:	3801      	subs	r0, #1
 8012be0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012be4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012be8:	42a8      	cmp	r0, r5
 8012bea:	d1fb      	bne.n	8012be4 <__sccl+0x1c>
 8012bec:	b90b      	cbnz	r3, 8012bf2 <__sccl+0x2a>
 8012bee:	1e50      	subs	r0, r2, #1
 8012bf0:	bd70      	pop	{r4, r5, r6, pc}
 8012bf2:	f081 0101 	eor.w	r1, r1, #1
 8012bf6:	54e1      	strb	r1, [r4, r3]
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012c00:	2d2d      	cmp	r5, #45	@ 0x2d
 8012c02:	d005      	beq.n	8012c10 <__sccl+0x48>
 8012c04:	2d5d      	cmp	r5, #93	@ 0x5d
 8012c06:	d016      	beq.n	8012c36 <__sccl+0x6e>
 8012c08:	2d00      	cmp	r5, #0
 8012c0a:	d0f1      	beq.n	8012bf0 <__sccl+0x28>
 8012c0c:	462b      	mov	r3, r5
 8012c0e:	e7f2      	b.n	8012bf6 <__sccl+0x2e>
 8012c10:	7846      	ldrb	r6, [r0, #1]
 8012c12:	2e5d      	cmp	r6, #93	@ 0x5d
 8012c14:	d0fa      	beq.n	8012c0c <__sccl+0x44>
 8012c16:	42b3      	cmp	r3, r6
 8012c18:	dcf8      	bgt.n	8012c0c <__sccl+0x44>
 8012c1a:	3002      	adds	r0, #2
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	3201      	adds	r2, #1
 8012c20:	4296      	cmp	r6, r2
 8012c22:	54a1      	strb	r1, [r4, r2]
 8012c24:	dcfb      	bgt.n	8012c1e <__sccl+0x56>
 8012c26:	1af2      	subs	r2, r6, r3
 8012c28:	3a01      	subs	r2, #1
 8012c2a:	1c5d      	adds	r5, r3, #1
 8012c2c:	42b3      	cmp	r3, r6
 8012c2e:	bfa8      	it	ge
 8012c30:	2200      	movge	r2, #0
 8012c32:	18ab      	adds	r3, r5, r2
 8012c34:	e7e1      	b.n	8012bfa <__sccl+0x32>
 8012c36:	4610      	mov	r0, r2
 8012c38:	e7da      	b.n	8012bf0 <__sccl+0x28>

08012c3a <__submore>:
 8012c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c3e:	460c      	mov	r4, r1
 8012c40:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c46:	4299      	cmp	r1, r3
 8012c48:	d11d      	bne.n	8012c86 <__submore+0x4c>
 8012c4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012c4e:	f7fe fae1 	bl	8011214 <_malloc_r>
 8012c52:	b918      	cbnz	r0, 8012c5c <__submore+0x22>
 8012c54:	f04f 30ff 	mov.w	r0, #4294967295
 8012c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c60:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012c62:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012c66:	6360      	str	r0, [r4, #52]	@ 0x34
 8012c68:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012c6c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012c70:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012c74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012c78:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012c7c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012c80:	6020      	str	r0, [r4, #0]
 8012c82:	2000      	movs	r0, #0
 8012c84:	e7e8      	b.n	8012c58 <__submore+0x1e>
 8012c86:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012c88:	0077      	lsls	r7, r6, #1
 8012c8a:	463a      	mov	r2, r7
 8012c8c:	f000 f95c 	bl	8012f48 <_realloc_r>
 8012c90:	4605      	mov	r5, r0
 8012c92:	2800      	cmp	r0, #0
 8012c94:	d0de      	beq.n	8012c54 <__submore+0x1a>
 8012c96:	eb00 0806 	add.w	r8, r0, r6
 8012c9a:	4601      	mov	r1, r0
 8012c9c:	4632      	mov	r2, r6
 8012c9e:	4640      	mov	r0, r8
 8012ca0:	f7fd f827 	bl	800fcf2 <memcpy>
 8012ca4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012ca8:	f8c4 8000 	str.w	r8, [r4]
 8012cac:	e7e9      	b.n	8012c82 <__submore+0x48>
	...

08012cb0 <asctime>:
 8012cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8012ce8 <asctime+0x38>)
 8012cb2:	b570      	push	{r4, r5, r6, lr}
 8012cb4:	681d      	ldr	r5, [r3, #0]
 8012cb6:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 8012cb8:	4604      	mov	r4, r0
 8012cba:	b976      	cbnz	r6, 8012cda <asctime+0x2a>
 8012cbc:	201a      	movs	r0, #26
 8012cbe:	f7fe fa77 	bl	80111b0 <malloc>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	63a8      	str	r0, [r5, #56]	@ 0x38
 8012cc6:	b920      	cbnz	r0, 8012cd2 <asctime+0x22>
 8012cc8:	4b08      	ldr	r3, [pc, #32]	@ (8012cec <asctime+0x3c>)
 8012cca:	4809      	ldr	r0, [pc, #36]	@ (8012cf0 <asctime+0x40>)
 8012ccc:	213b      	movs	r1, #59	@ 0x3b
 8012cce:	f7fd f827 	bl	800fd20 <__assert_func>
 8012cd2:	221a      	movs	r2, #26
 8012cd4:	4631      	mov	r1, r6
 8012cd6:	f7fc f815 	bl	800ed04 <memset>
 8012cda:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8012cdc:	4620      	mov	r0, r4
 8012cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ce2:	f000 b807 	b.w	8012cf4 <asctime_r>
 8012ce6:	bf00      	nop
 8012ce8:	200001a4 	.word	0x200001a4
 8012cec:	08013d88 	.word	0x08013d88
 8012cf0:	0801403f 	.word	0x0801403f

08012cf4 <asctime_r>:
 8012cf4:	b510      	push	{r4, lr}
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	6941      	ldr	r1, [r0, #20]
 8012cfa:	6903      	ldr	r3, [r0, #16]
 8012cfc:	6982      	ldr	r2, [r0, #24]
 8012cfe:	b086      	sub	sp, #24
 8012d00:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 8012d04:	9104      	str	r1, [sp, #16]
 8012d06:	6801      	ldr	r1, [r0, #0]
 8012d08:	9103      	str	r1, [sp, #12]
 8012d0a:	6841      	ldr	r1, [r0, #4]
 8012d0c:	9102      	str	r1, [sp, #8]
 8012d0e:	6881      	ldr	r1, [r0, #8]
 8012d10:	9101      	str	r1, [sp, #4]
 8012d12:	68c1      	ldr	r1, [r0, #12]
 8012d14:	9100      	str	r1, [sp, #0]
 8012d16:	4907      	ldr	r1, [pc, #28]	@ (8012d34 <asctime_r+0x40>)
 8012d18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012d1c:	440b      	add	r3, r1
 8012d1e:	4906      	ldr	r1, [pc, #24]	@ (8012d38 <asctime_r+0x44>)
 8012d20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012d24:	440a      	add	r2, r1
 8012d26:	4620      	mov	r0, r4
 8012d28:	4904      	ldr	r1, [pc, #16]	@ (8012d3c <asctime_r+0x48>)
 8012d2a:	f7fb fe99 	bl	800ea60 <siprintf>
 8012d2e:	4620      	mov	r0, r4
 8012d30:	b006      	add	sp, #24
 8012d32:	bd10      	pop	{r4, pc}
 8012d34:	080143c8 	.word	0x080143c8
 8012d38:	080143ec 	.word	0x080143ec
 8012d3c:	08014098 	.word	0x08014098

08012d40 <__gettzinfo>:
 8012d40:	4800      	ldr	r0, [pc, #0]	@ (8012d44 <__gettzinfo+0x4>)
 8012d42:	4770      	bx	lr
 8012d44:	200001f8 	.word	0x200001f8

08012d48 <gmtime_r>:
 8012d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8012e84 <gmtime_r+0x13c>)
 8012d4e:	460c      	mov	r4, r1
 8012d50:	2300      	movs	r3, #0
 8012d52:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012d56:	f7ed ffaf 	bl	8000cb8 <__aeabi_ldivmod>
 8012d5a:	2a00      	cmp	r2, #0
 8012d5c:	bfbc      	itt	lt
 8012d5e:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8012d62:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8012d66:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8012d6a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8012d6e:	fbb2 f3f1 	udiv	r3, r2, r1
 8012d72:	fb01 2213 	mls	r2, r1, r3, r2
 8012d76:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8012d7a:	bfac      	ite	ge
 8012d7c:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8012d80:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8012d84:	60a3      	str	r3, [r4, #8]
 8012d86:	fbb2 f3f1 	udiv	r3, r2, r1
 8012d8a:	fb01 2213 	mls	r2, r1, r3, r2
 8012d8e:	6063      	str	r3, [r4, #4]
 8012d90:	6022      	str	r2, [r4, #0]
 8012d92:	1cc3      	adds	r3, r0, #3
 8012d94:	2207      	movs	r2, #7
 8012d96:	fb93 f2f2 	sdiv	r2, r3, r2
 8012d9a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8012d9e:	1a9b      	subs	r3, r3, r2
 8012da0:	4939      	ldr	r1, [pc, #228]	@ (8012e88 <gmtime_r+0x140>)
 8012da2:	d555      	bpl.n	8012e50 <gmtime_r+0x108>
 8012da4:	3307      	adds	r3, #7
 8012da6:	61a3      	str	r3, [r4, #24]
 8012da8:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 8012dac:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8012db0:	fb93 f1f1 	sdiv	r1, r3, r1
 8012db4:	4b35      	ldr	r3, [pc, #212]	@ (8012e8c <gmtime_r+0x144>)
 8012db6:	fb03 0001 	mla	r0, r3, r1, r0
 8012dba:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8012dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8012dc2:	4403      	add	r3, r0
 8012dc4:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8012dc8:	fbb0 f2fc 	udiv	r2, r0, ip
 8012dcc:	1a9b      	subs	r3, r3, r2
 8012dce:	f240 176d 	movw	r7, #365	@ 0x16d
 8012dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8012e90 <gmtime_r+0x148>)
 8012dd4:	fbb0 f2f2 	udiv	r2, r0, r2
 8012dd8:	2664      	movs	r6, #100	@ 0x64
 8012dda:	1a9b      	subs	r3, r3, r2
 8012ddc:	fbb3 f2f7 	udiv	r2, r3, r7
 8012de0:	fbb3 f3fc 	udiv	r3, r3, ip
 8012de4:	fbb2 f5f6 	udiv	r5, r2, r6
 8012de8:	1aeb      	subs	r3, r5, r3
 8012dea:	4403      	add	r3, r0
 8012dec:	fb07 3312 	mls	r3, r7, r2, r3
 8012df0:	2099      	movs	r0, #153	@ 0x99
 8012df2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8012df6:	3702      	adds	r7, #2
 8012df8:	f103 0e01 	add.w	lr, r3, #1
 8012dfc:	fbb7 fcf0 	udiv	ip, r7, r0
 8012e00:	fb00 f00c 	mul.w	r0, r0, ip
 8012e04:	3002      	adds	r0, #2
 8012e06:	f04f 0805 	mov.w	r8, #5
 8012e0a:	fbb0 f0f8 	udiv	r0, r0, r8
 8012e0e:	ebae 0000 	sub.w	r0, lr, r0
 8012e12:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8012e16:	4577      	cmp	r7, lr
 8012e18:	bf8c      	ite	hi
 8012e1a:	f06f 0709 	mvnhi.w	r7, #9
 8012e1e:	2702      	movls	r7, #2
 8012e20:	4467      	add	r7, ip
 8012e22:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8012e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e2a:	2f01      	cmp	r7, #1
 8012e2c:	bf98      	it	ls
 8012e2e:	3101      	addls	r1, #1
 8012e30:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8012e34:	d312      	bcc.n	8012e5c <gmtime_r+0x114>
 8012e36:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8012e3a:	61e3      	str	r3, [r4, #28]
 8012e3c:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8012e40:	2300      	movs	r3, #0
 8012e42:	60e0      	str	r0, [r4, #12]
 8012e44:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8012e48:	6223      	str	r3, [r4, #32]
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e50:	2800      	cmp	r0, #0
 8012e52:	61a3      	str	r3, [r4, #24]
 8012e54:	dba8      	blt.n	8012da8 <gmtime_r+0x60>
 8012e56:	fb90 f1f1 	sdiv	r1, r0, r1
 8012e5a:	e7ab      	b.n	8012db4 <gmtime_r+0x6c>
 8012e5c:	f012 0f03 	tst.w	r2, #3
 8012e60:	d102      	bne.n	8012e68 <gmtime_r+0x120>
 8012e62:	fb06 2515 	mls	r5, r6, r5, r2
 8012e66:	b95d      	cbnz	r5, 8012e80 <gmtime_r+0x138>
 8012e68:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8012e6c:	fbb2 f6f5 	udiv	r6, r2, r5
 8012e70:	fb05 2216 	mls	r2, r5, r6, r2
 8012e74:	fab2 f282 	clz	r2, r2
 8012e78:	0952      	lsrs	r2, r2, #5
 8012e7a:	333b      	adds	r3, #59	@ 0x3b
 8012e7c:	4413      	add	r3, r2
 8012e7e:	e7dc      	b.n	8012e3a <gmtime_r+0xf2>
 8012e80:	2201      	movs	r2, #1
 8012e82:	e7fa      	b.n	8012e7a <gmtime_r+0x132>
 8012e84:	00015180 	.word	0x00015180
 8012e88:	00023ab1 	.word	0x00023ab1
 8012e8c:	fffdc54f 	.word	0xfffdc54f
 8012e90:	00023ab0 	.word	0x00023ab0

08012e94 <_fstat_r>:
 8012e94:	b538      	push	{r3, r4, r5, lr}
 8012e96:	4d07      	ldr	r5, [pc, #28]	@ (8012eb4 <_fstat_r+0x20>)
 8012e98:	2300      	movs	r3, #0
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	4608      	mov	r0, r1
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	602b      	str	r3, [r5, #0]
 8012ea2:	f7f2 f8db 	bl	800505c <_fstat>
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	d102      	bne.n	8012eb0 <_fstat_r+0x1c>
 8012eaa:	682b      	ldr	r3, [r5, #0]
 8012eac:	b103      	cbz	r3, 8012eb0 <_fstat_r+0x1c>
 8012eae:	6023      	str	r3, [r4, #0]
 8012eb0:	bd38      	pop	{r3, r4, r5, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20006f78 	.word	0x20006f78

08012eb8 <_isatty_r>:
 8012eb8:	b538      	push	{r3, r4, r5, lr}
 8012eba:	4d06      	ldr	r5, [pc, #24]	@ (8012ed4 <_isatty_r+0x1c>)
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	4608      	mov	r0, r1
 8012ec2:	602b      	str	r3, [r5, #0]
 8012ec4:	f7f2 f8da 	bl	800507c <_isatty>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d102      	bne.n	8012ed2 <_isatty_r+0x1a>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	b103      	cbz	r3, 8012ed2 <_isatty_r+0x1a>
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	20006f78 	.word	0x20006f78

08012ed8 <_sbrk_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4d06      	ldr	r5, [pc, #24]	@ (8012ef4 <_sbrk_r+0x1c>)
 8012edc:	2300      	movs	r3, #0
 8012ede:	4604      	mov	r4, r0
 8012ee0:	4608      	mov	r0, r1
 8012ee2:	602b      	str	r3, [r5, #0]
 8012ee4:	f7f2 f8f8 	bl	80050d8 <_sbrk>
 8012ee8:	1c43      	adds	r3, r0, #1
 8012eea:	d102      	bne.n	8012ef2 <_sbrk_r+0x1a>
 8012eec:	682b      	ldr	r3, [r5, #0]
 8012eee:	b103      	cbz	r3, 8012ef2 <_sbrk_r+0x1a>
 8012ef0:	6023      	str	r3, [r4, #0]
 8012ef2:	bd38      	pop	{r3, r4, r5, pc}
 8012ef4:	20006f78 	.word	0x20006f78

08012ef8 <abort>:
 8012ef8:	b508      	push	{r3, lr}
 8012efa:	2006      	movs	r0, #6
 8012efc:	f000 f87a 	bl	8012ff4 <raise>
 8012f00:	2001      	movs	r0, #1
 8012f02:	f7f2 f85b 	bl	8004fbc <_exit>

08012f06 <_calloc_r>:
 8012f06:	b570      	push	{r4, r5, r6, lr}
 8012f08:	fba1 5402 	umull	r5, r4, r1, r2
 8012f0c:	b934      	cbnz	r4, 8012f1c <_calloc_r+0x16>
 8012f0e:	4629      	mov	r1, r5
 8012f10:	f7fe f980 	bl	8011214 <_malloc_r>
 8012f14:	4606      	mov	r6, r0
 8012f16:	b928      	cbnz	r0, 8012f24 <_calloc_r+0x1e>
 8012f18:	4630      	mov	r0, r6
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	220c      	movs	r2, #12
 8012f1e:	6002      	str	r2, [r0, #0]
 8012f20:	2600      	movs	r6, #0
 8012f22:	e7f9      	b.n	8012f18 <_calloc_r+0x12>
 8012f24:	462a      	mov	r2, r5
 8012f26:	4621      	mov	r1, r4
 8012f28:	f7fb feec 	bl	800ed04 <memset>
 8012f2c:	e7f4      	b.n	8012f18 <_calloc_r+0x12>
	...

08012f30 <__env_lock>:
 8012f30:	4801      	ldr	r0, [pc, #4]	@ (8012f38 <__env_lock+0x8>)
 8012f32:	f7fc bed3 	b.w	800fcdc <__retarget_lock_acquire_recursive>
 8012f36:	bf00      	nop
 8012f38:	20006f7d 	.word	0x20006f7d

08012f3c <__env_unlock>:
 8012f3c:	4801      	ldr	r0, [pc, #4]	@ (8012f44 <__env_unlock+0x8>)
 8012f3e:	f7fc becf 	b.w	800fce0 <__retarget_lock_release_recursive>
 8012f42:	bf00      	nop
 8012f44:	20006f7d 	.word	0x20006f7d

08012f48 <_realloc_r>:
 8012f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	4614      	mov	r4, r2
 8012f50:	460d      	mov	r5, r1
 8012f52:	b921      	cbnz	r1, 8012f5e <_realloc_r+0x16>
 8012f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f58:	4611      	mov	r1, r2
 8012f5a:	f7fe b95b 	b.w	8011214 <_malloc_r>
 8012f5e:	b92a      	cbnz	r2, 8012f6c <_realloc_r+0x24>
 8012f60:	f7fd fd5e 	bl	8010a20 <_free_r>
 8012f64:	4625      	mov	r5, r4
 8012f66:	4628      	mov	r0, r5
 8012f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6c:	f000 f85e 	bl	801302c <_malloc_usable_size_r>
 8012f70:	4284      	cmp	r4, r0
 8012f72:	4606      	mov	r6, r0
 8012f74:	d802      	bhi.n	8012f7c <_realloc_r+0x34>
 8012f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f7a:	d8f4      	bhi.n	8012f66 <_realloc_r+0x1e>
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	4638      	mov	r0, r7
 8012f80:	f7fe f948 	bl	8011214 <_malloc_r>
 8012f84:	4680      	mov	r8, r0
 8012f86:	b908      	cbnz	r0, 8012f8c <_realloc_r+0x44>
 8012f88:	4645      	mov	r5, r8
 8012f8a:	e7ec      	b.n	8012f66 <_realloc_r+0x1e>
 8012f8c:	42b4      	cmp	r4, r6
 8012f8e:	4622      	mov	r2, r4
 8012f90:	4629      	mov	r1, r5
 8012f92:	bf28      	it	cs
 8012f94:	4632      	movcs	r2, r6
 8012f96:	f7fc feac 	bl	800fcf2 <memcpy>
 8012f9a:	4629      	mov	r1, r5
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	f7fd fd3f 	bl	8010a20 <_free_r>
 8012fa2:	e7f1      	b.n	8012f88 <_realloc_r+0x40>

08012fa4 <_raise_r>:
 8012fa4:	291f      	cmp	r1, #31
 8012fa6:	b538      	push	{r3, r4, r5, lr}
 8012fa8:	4605      	mov	r5, r0
 8012faa:	460c      	mov	r4, r1
 8012fac:	d904      	bls.n	8012fb8 <_raise_r+0x14>
 8012fae:	2316      	movs	r3, #22
 8012fb0:	6003      	str	r3, [r0, #0]
 8012fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8012fb6:	bd38      	pop	{r3, r4, r5, pc}
 8012fb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012fba:	b112      	cbz	r2, 8012fc2 <_raise_r+0x1e>
 8012fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fc0:	b94b      	cbnz	r3, 8012fd6 <_raise_r+0x32>
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f000 f830 	bl	8013028 <_getpid_r>
 8012fc8:	4622      	mov	r2, r4
 8012fca:	4601      	mov	r1, r0
 8012fcc:	4628      	mov	r0, r5
 8012fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fd2:	f000 b817 	b.w	8013004 <_kill_r>
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	d00a      	beq.n	8012ff0 <_raise_r+0x4c>
 8012fda:	1c59      	adds	r1, r3, #1
 8012fdc:	d103      	bne.n	8012fe6 <_raise_r+0x42>
 8012fde:	2316      	movs	r3, #22
 8012fe0:	6003      	str	r3, [r0, #0]
 8012fe2:	2001      	movs	r0, #1
 8012fe4:	e7e7      	b.n	8012fb6 <_raise_r+0x12>
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fec:	4620      	mov	r0, r4
 8012fee:	4798      	blx	r3
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	e7e0      	b.n	8012fb6 <_raise_r+0x12>

08012ff4 <raise>:
 8012ff4:	4b02      	ldr	r3, [pc, #8]	@ (8013000 <raise+0xc>)
 8012ff6:	4601      	mov	r1, r0
 8012ff8:	6818      	ldr	r0, [r3, #0]
 8012ffa:	f7ff bfd3 	b.w	8012fa4 <_raise_r>
 8012ffe:	bf00      	nop
 8013000:	200001a4 	.word	0x200001a4

08013004 <_kill_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	4d07      	ldr	r5, [pc, #28]	@ (8013024 <_kill_r+0x20>)
 8013008:	2300      	movs	r3, #0
 801300a:	4604      	mov	r4, r0
 801300c:	4608      	mov	r0, r1
 801300e:	4611      	mov	r1, r2
 8013010:	602b      	str	r3, [r5, #0]
 8013012:	f7f1 ffc3 	bl	8004f9c <_kill>
 8013016:	1c43      	adds	r3, r0, #1
 8013018:	d102      	bne.n	8013020 <_kill_r+0x1c>
 801301a:	682b      	ldr	r3, [r5, #0]
 801301c:	b103      	cbz	r3, 8013020 <_kill_r+0x1c>
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	bd38      	pop	{r3, r4, r5, pc}
 8013022:	bf00      	nop
 8013024:	20006f78 	.word	0x20006f78

08013028 <_getpid_r>:
 8013028:	f7f1 bfb0 	b.w	8004f8c <_getpid>

0801302c <_malloc_usable_size_r>:
 801302c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013030:	1f18      	subs	r0, r3, #4
 8013032:	2b00      	cmp	r3, #0
 8013034:	bfbc      	itt	lt
 8013036:	580b      	ldrlt	r3, [r1, r0]
 8013038:	18c0      	addlt	r0, r0, r3
 801303a:	4770      	bx	lr

0801303c <_init>:
 801303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303e:	bf00      	nop
 8013040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013042:	bc08      	pop	{r3}
 8013044:	469e      	mov	lr, r3
 8013046:	4770      	bx	lr

08013048 <_fini>:
 8013048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801304a:	bf00      	nop
 801304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801304e:	bc08      	pop	{r3}
 8013050:	469e      	mov	lr, r3
 8013052:	4770      	bx	lr
