
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b984  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  0800bb24  0800bb24  0000cb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c788  0800c788  0000e0d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c788  0800c788  0000d788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c790  0800c790  0000e0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c790  0800c790  0000d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c794  0800c794  0000d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800c798  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000545c  200000d8  0800c870  0000e0d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005534  0800c870  0000e534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c37c  00000000  00000000  0000e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004420  00000000  00000000  0002a484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  0002e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136a  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc8a  00000000  00000000  0003150a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de08  00000000  00000000  0004d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15a8  00000000  00000000  0006af9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c58  00000000  00000000  0010c588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001141e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb0c 	.word	0x0800bb0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0800bb0c 	.word	0x0800bb0c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9d3 	b.w	8000678 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <Aiot_Task>:
#include "esp.h"

extern osMutexId_t ESP_MutexHandle;

void Aiot_Task(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 8000684:	f000 ff86 	bl	8001594 <AiotClient_Init>
    for(;;)
    {
        if (esp_get_status() != 0) {
 8000688:	f000 fe26 	bl	80012d8 <esp_get_status>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d013      	beq.n	80006ba <Aiot_Task+0x3e>
            printf("server connecting ...\r\n");
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <Aiot_Task+0x48>)
 8000694:	f008 fc3c 	bl	8008f10 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <Aiot_Task+0x4c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 f9ba 	bl	8005a1a <osMutexAcquire>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d106      	bne.n	80006ba <Aiot_Task+0x3e>
                esp_client_conn();
 80006ac:	f000 fdd0 	bl	8001250 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <Aiot_Task+0x4c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 f9fb 	bl	8005ab0 <osMutexRelease>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(10000));
 80006ba:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006be:	f006 fc59 	bl	8006f74 <vTaskDelay>
        if (esp_get_status() != 0) {
 80006c2:	e7e1      	b.n	8000688 <Aiot_Task+0xc>
 80006c4:	0800bb24 	.word	0x0800bb24
 80006c8:	20000a58 	.word	0x20000a58

080006cc <esp_event>:
   - 개행을 기다리지 말고 길이 기반으로 정확히 잘라내기
*/


void esp_event(const char *recvBuf)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0aa      	sub	sp, #168	@ 0xa8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	227f      	movs	r2, #127	@ 0x7f
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f008 fdb6 	bl	800925c <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	210a      	movs	r1, #10
 80006fc:	4618      	mov	r0, r3
 80006fe:	f008 fd8f 	bl	8009220 <strchr>
 8000702:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 8000706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <esp_event+0x4a>
 800070e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	210d      	movs	r1, #13
 800071c:	4618      	mov	r0, r3
 800071e:	f008 fd7f 	bl	8009220 <strchr>
 8000722:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 8000726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <esp_event+0x6a>
 800072e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4945      	ldr	r1, [pc, #276]	@ (8000858 <esp_event+0x18c>)
 8000742:	4618      	mov	r0, r3
 8000744:	f008 fd9e 	bl	8009284 <strtok>
 8000748:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 800074c:	e011      	b.n	8000772 <esp_event+0xa6>
    {
        pArray[idx++] = token;
 800074e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	33a8      	adds	r3, #168	@ 0xa8
 800075c:	443b      	add	r3, r7
 800075e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000762:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 8000766:	493c      	ldr	r1, [pc, #240]	@ (8000858 <esp_event+0x18c>)
 8000768:	2000      	movs	r0, #0
 800076a:	f008 fd8b 	bl	8009284 <strtok>
 800076e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 8000772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <esp_event+0xb6>
 800077a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800077e:	2b03      	cmp	r3, #3
 8000780:	dde5      	ble.n	800074e <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d05c      	beq.n	8000842 <esp_event+0x176>
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d059      	beq.n	8000842 <esp_event+0x176>
    {
        if (strcmp(pArray[1], "LED") == 0)
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4932      	ldr	r1, [pc, #200]	@ (800085c <esp_event+0x190>)
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd24 	bl	80001e0 <strcmp>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d121      	bne.n	80007e2 <esp_event+0x116>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	492f      	ldr	r1, [pc, #188]	@ (8000860 <esp_event+0x194>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fd1c 	bl	80001e0 <strcmp>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d108      	bne.n	80007c0 <esp_event+0xf4>
                LED_ON();
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	482c      	ldr	r0, [pc, #176]	@ (8000864 <esp_event+0x198>)
 80007b4:	f002 f960 	bl	8002a78 <HAL_GPIO_WritePin>
                printf("LED turned ON\r\n");
 80007b8:	482b      	ldr	r0, [pc, #172]	@ (8000868 <esp_event+0x19c>)
 80007ba:	f008 fba9 	bl	8008f10 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80007be:	e045      	b.n	800084c <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	492a      	ldr	r1, [pc, #168]	@ (800086c <esp_event+0x1a0>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fd0b 	bl	80001e0 <strcmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d13d      	bne.n	800084c <esp_event+0x180>
                LED_OFF();
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4823      	ldr	r0, [pc, #140]	@ (8000864 <esp_event+0x198>)
 80007d6:	f002 f94f 	bl	8002a78 <HAL_GPIO_WritePin>
                printf("LED turned OFF\r\n");
 80007da:	4825      	ldr	r0, [pc, #148]	@ (8000870 <esp_event+0x1a4>)
 80007dc:	f008 fb98 	bl	8008f10 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80007e0:	e034      	b.n	800084c <esp_event+0x180>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	4923      	ldr	r1, [pc, #140]	@ (8000874 <esp_event+0x1a8>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcfa 	bl	80001e0 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d121      	bne.n	8000836 <esp_event+0x16a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	491a      	ldr	r1, [pc, #104]	@ (8000860 <esp_event+0x194>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fcf2 	bl	80001e0 <strcmp>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <esp_event+0x148>
                FAN_ON();
 8000802:	2201      	movs	r2, #1
 8000804:	2110      	movs	r1, #16
 8000806:	481c      	ldr	r0, [pc, #112]	@ (8000878 <esp_event+0x1ac>)
 8000808:	f002 f936 	bl	8002a78 <HAL_GPIO_WritePin>
                printf("FAN turned ON\r\n");
 800080c:	481b      	ldr	r0, [pc, #108]	@ (800087c <esp_event+0x1b0>)
 800080e:	f008 fb7f 	bl	8008f10 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8000812:	e01b      	b.n	800084c <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4915      	ldr	r1, [pc, #84]	@ (800086c <esp_event+0x1a0>)
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fce1 	bl	80001e0 <strcmp>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d113      	bne.n	800084c <esp_event+0x180>
                FAN_OFF();
 8000824:	2200      	movs	r2, #0
 8000826:	2110      	movs	r1, #16
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <esp_event+0x1ac>)
 800082a:	f002 f925 	bl	8002a78 <HAL_GPIO_WritePin>
                printf("FAN turned OFF\r\n");
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <esp_event+0x1b4>)
 8000830:	f008 fb6e 	bl	8008f10 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8000834:	e00a      	b.n	800084c <esp_event+0x180>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <esp_event+0x1b8>)
 800083c:	f008 faf8 	bl	8008e30 <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 8000840:	e004      	b.n	800084c <esp_event+0x180>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <esp_event+0x1bc>)
 8000846:	f008 faf3 	bl	8008e30 <iprintf>
    }
}
 800084a:	e000      	b.n	800084e <esp_event+0x182>
        if (strcmp(pArray[1], "LED") == 0)
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	37a8      	adds	r7, #168	@ 0xa8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800bb3c 	.word	0x0800bb3c
 800085c:	0800bb44 	.word	0x0800bb44
 8000860:	0800bb48 	.word	0x0800bb48
 8000864:	40020000 	.word	0x40020000
 8000868:	0800bb4c 	.word	0x0800bb4c
 800086c:	0800bb5c 	.word	0x0800bb5c
 8000870:	0800bb60 	.word	0x0800bb60
 8000874:	0800bb70 	.word	0x0800bb70
 8000878:	40020400 	.word	0x40020400
 800087c:	0800bb74 	.word	0x0800bb74
 8000880:	0800bb84 	.word	0x0800bb84
 8000884:	0800bb94 	.word	0x0800bb94
 8000888:	0800bbac 	.word	0x0800bbac

0800088c <try_extract_ipd_payload>:

// +IPD,<len>:...   (CIPMUX=0)
// +IPD,<id>,<len>:...  (CIPMUX=1)
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b092      	sub	sp, #72	@ 0x48
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
    int copied = 0, consumed = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	647b      	str	r3, [r7, #68]	@ 0x44
 800089a:	2300      	movs	r3, #0
 800089c:	643b      	str	r3, [r7, #64]	@ 0x40

    taskENTER_CRITICAL();
 800089e:	f007 fe6b 	bl	8008578 <vPortEnterCritical>
    int n = cb_data.length;
 80008a2:	4b70      	ldr	r3, [pc, #448]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80008a4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80008a8:	623b      	str	r3, [r7, #32]
    if (n > 0) {
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f340 80d2 	ble.w	8000a56 <try_extract_ipd_payload+0x1ca>
        int start = -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i + 4 < n; ++i) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80008bc:	e023      	b.n	8000906 <try_extract_ipd_payload+0x7a>
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 80008be:	4a69      	ldr	r2, [pc, #420]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80008c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80008c8:	d11a      	bne.n	8000900 <try_extract_ipd_payload+0x74>
 80008ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a65      	ldr	r2, [pc, #404]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	2b49      	cmp	r3, #73	@ 0x49
 80008d4:	d114      	bne.n	8000900 <try_extract_ipd_payload+0x74>
 80008d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008d8:	3302      	adds	r3, #2
 80008da:	4a62      	ldr	r2, [pc, #392]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80008dc:	5cd3      	ldrb	r3, [r2, r3]
 80008de:	2b50      	cmp	r3, #80	@ 0x50
 80008e0:	d10e      	bne.n	8000900 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 80008e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008e4:	3303      	adds	r3, #3
 80008e6:	4a5f      	ldr	r2, [pc, #380]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 80008ea:	2b44      	cmp	r3, #68	@ 0x44
 80008ec:	d108      	bne.n	8000900 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 80008ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008f0:	3304      	adds	r3, #4
 80008f2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80008f8:	d102      	bne.n	8000900 <try_extract_ipd_payload+0x74>
 80008fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008fe:	e007      	b.n	8000910 <try_extract_ipd_payload+0x84>
        for (int i = 0; i + 4 < n; ++i) {
 8000900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000902:	3301      	adds	r3, #1
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000908:	3304      	adds	r3, #4
 800090a:	6a3a      	ldr	r2, [r7, #32]
 800090c:	429a      	cmp	r2, r3
 800090e:	dcd6      	bgt.n	80008be <try_extract_ipd_payload+0x32>
        }
        if (start >= 0) {
 8000910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000912:	2b00      	cmp	r3, #0
 8000914:	f2c0 8088 	blt.w	8000a28 <try_extract_ipd_payload+0x19c>
            int p = start + 5;
 8000918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800091a:	3305      	adds	r3, #5
 800091c:	637b      	str	r3, [r7, #52]	@ 0x34

            // (1) optional link id
            int q = p;
 800091e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
            while (q < n && cb_data.buf[q]>='0' && cb_data.buf[q]<='9') q++;
 8000922:	e002      	b.n	800092a <try_extract_ipd_payload+0x9e>
 8000924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000926:	3301      	adds	r3, #1
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
 800092a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	429a      	cmp	r2, r3
 8000930:	da0b      	bge.n	800094a <try_extract_ipd_payload+0xbe>
 8000932:	4a4c      	ldr	r2, [pc, #304]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b2f      	cmp	r3, #47	@ 0x2f
 800093c:	d905      	bls.n	800094a <try_extract_ipd_payload+0xbe>
 800093e:	4a49      	ldr	r2, [pc, #292]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b39      	cmp	r3, #57	@ 0x39
 8000948:	d9ec      	bls.n	8000924 <try_extract_ipd_payload+0x98>
            if (q < n && cb_data.buf[q] == ',') {
 800094a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	429a      	cmp	r2, r3
 8000950:	da08      	bge.n	8000964 <try_extract_ipd_payload+0xd8>
 8000952:	4a44      	ldr	r2, [pc, #272]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b2c      	cmp	r3, #44	@ 0x2c
 800095c:	d102      	bne.n	8000964 <try_extract_ipd_payload+0xd8>
                p = q + 1; // had link id -> p now at len
 800095e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000960:	3301      	adds	r3, #1
 8000962:	637b      	str	r3, [r7, #52]	@ 0x34
            } // else: single mode, p already at len

            // (2) parse length until ':'
            int len_start = p, colon = -1;
 8000964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 800096e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
 8000972:	e01b      	b.n	80009ac <try_extract_ipd_payload+0x120>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 8000974:	4a3b      	ldr	r2, [pc, #236]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b3a      	cmp	r3, #58	@ 0x3a
 800097e:	d102      	bne.n	8000986 <try_extract_ipd_payload+0xfa>
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000984:	e01b      	b.n	80009be <try_extract_ipd_payload+0x132>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { len_start = -1; break; }
 8000986:	4a37      	ldr	r2, [pc, #220]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000990:	d905      	bls.n	800099e <try_extract_ipd_payload+0x112>
 8000992:	4a34      	ldr	r2, [pc, #208]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000996:	4413      	add	r3, r2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b39      	cmp	r3, #57	@ 0x39
 800099c:	d903      	bls.n	80009a6 <try_extract_ipd_payload+0x11a>
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009a4:	e00b      	b.n	80009be <try_extract_ipd_payload+0x132>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	3301      	adds	r3, #1
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	da04      	bge.n	80009be <try_extract_ipd_payload+0x132>
 80009b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b6:	3309      	adds	r3, #9
 80009b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ba:	429a      	cmp	r2, r3
 80009bc:	ddda      	ble.n	8000974 <try_extract_ipd_payload+0xe8>
            }
            if (len_start >= 0 && colon > 0) {
 80009be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db31      	blt.n	8000a28 <try_extract_ipd_payload+0x19c>
 80009c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	dd2e      	ble.n	8000a28 <try_extract_ipd_payload+0x19c>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 80009ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009cc:	4a25      	ldr	r2, [pc, #148]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 80009ce:	4413      	add	r3, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f008 f8e1 	bl	8008b98 <atoi>
 80009d6:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 80009d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009da:	3301      	adds	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 80009de:	6a3a      	ldr	r2, [r7, #32]
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dd1d      	ble.n	8000a28 <try_extract_ipd_payload+0x19c>
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	db19      	blt.n	8000a28 <try_extract_ipd_payload+0x19c>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	69fa      	ldr	r2, [r7, #28]
 80009fa:	4293      	cmp	r3, r2
 80009fc:	bfa8      	it	ge
 80009fe:	4613      	movge	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4a17      	ldr	r2, [pc, #92]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000a06:	4413      	add	r3, r2
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f009 fbb2 	bl	800a176 <memcpy>
                    dst[cpy] = 0;
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
                    consumed = payload_start + ipd_len;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	4413      	add	r3, r2
 8000a26:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }
        }
        if (consumed > 0) {
 8000a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	dd13      	ble.n	8000a56 <try_extract_ipd_payload+0x1ca>
            int left = n - consumed;
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove(cb_data.buf, &cb_data.buf[consumed], left);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd07      	ble.n	8000a4c <try_extract_ipd_payload+0x1c0>
 8000a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000a40:	4413      	add	r3, r2
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000a48:	f008 fbc8 	bl	80091dc <memmove>
            cb_data.length = left;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <try_extract_ipd_payload+0x1d8>)
 8000a52:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
        }
    }
    taskEXIT_CRITICAL();
 8000a56:	f007 fdc1 	bl	80085dc <vPortExitCritical>
    return copied;
 8000a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3748      	adds	r7, #72	@ 0x48
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000548 	.word	0x20000548

08000a68 <Command_Task>:

void Command_Task(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0c4      	sub	sp, #272	@ 0x110
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a76:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
        // No need to require a trailing \n anymore
        int got = try_extract_ipd_payload(payload, sizeof(payload));
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff03 	bl	800088c <try_extract_ipd_payload>
 8000a86:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (got > 0) {
 8000a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	dd11      	ble.n	8000ab6 <Command_Task+0x4e>
            // strip CR/LF
            payload[strcspn(payload, "\r\n")] = '\0';
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	490a      	ldr	r1, [pc, #40]	@ (8000ac0 <Command_Task+0x58>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f008 fbce 	bl	800923a <strcspn>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5499      	strb	r1, [r3, r2]
            esp_event(payload);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe0b 	bl	80006cc <esp_event>
        }

        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f006 fa5c 	bl	8006f74 <vTaskDelay>
    {
 8000abc:	e7dc      	b.n	8000a78 <Command_Task+0x10>
 8000abe:	bf00      	nop
 8000ac0:	0800bbcc 	.word	0x0800bbcc

08000ac4 <NTP_Task>:
extern time_t ntp_time;

#define NTPTIME_TASK_PERIOD_MS 10000

void NTP_Task(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
    TickType_t last = xTaskGetTickCount();
 8000ad0:	f006 fb9a 	bl	8007208 <xTaskGetTickCount>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60bb      	str	r3, [r7, #8]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 8000ad8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000adc:	613b      	str	r3, [r7, #16]
    static int s_ntp_cfg_ok = 0;

    for(;;)
    {
        if (esp_get_status() == 0) {
 8000ade:	f000 fbfb 	bl	80012d8 <esp_get_status>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d143      	bne.n	8000b70 <NTP_Task+0xac>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <NTP_Task+0xe4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 ff92 	bl	8005a1a <osMutexAcquire>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14d      	bne.n	8000b98 <NTP_Task+0xd4>
                if (!s_ntp_cfg_ok) {
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <NTP_Task+0xe8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d107      	bne.n	8000b14 <NTP_Task+0x50>
                    if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 8000b04:	f000 fe90 	bl	8001828 <esp_ntp_config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <NTP_Task+0x50>
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <NTP_Task+0xe8>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
                	}
				if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 8000b14:	f107 020e 	add.w	r2, r7, #14
 8000b18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b1c:	4924      	ldr	r1, [pc, #144]	@ (8000bb0 <NTP_Task+0xec>)
 8000b1e:	4825      	ldr	r0, [pc, #148]	@ (8000bb4 <NTP_Task+0xf0>)
 8000b20:	f000 fa82 	bl	8001028 <esp_at_command>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d11c      	bne.n	8000b64 <NTP_Task+0xa0>
					char *p = strtok(response, "\r\n");
 8000b2a:	4923      	ldr	r1, [pc, #140]	@ (8000bb8 <NTP_Task+0xf4>)
 8000b2c:	4820      	ldr	r0, [pc, #128]	@ (8000bb0 <NTP_Task+0xec>)
 8000b2e:	f008 fba9 	bl	8009284 <strtok>
 8000b32:	6178      	str	r0, [r7, #20]
					while (p) {
 8000b34:	e013      	b.n	8000b5e <NTP_Task+0x9a>
						if (parse_cipsntptime_line(p, &epoch) == 0) {
 8000b36:	4921      	ldr	r1, [pc, #132]	@ (8000bbc <NTP_Task+0xf8>)
 8000b38:	6978      	ldr	r0, [r7, #20]
 8000b3a:	f000 fd79 	bl	8001630 <parse_cipsntptime_line>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <NTP_Task+0x90>
							printf("NTP Time (KST): %s", ctime(&epoch));
 8000b44:	481d      	ldr	r0, [pc, #116]	@ (8000bbc <NTP_Task+0xf8>)
 8000b46:	f008 fc0f 	bl	8009368 <ctime>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481c      	ldr	r0, [pc, #112]	@ (8000bc0 <NTP_Task+0xfc>)
 8000b50:	f008 f96e 	bl	8008e30 <iprintf>
								osMutexRelease(NTP_MutexHandle);
							}
							break;
							*/
						}
						p = strtok(NULL, "\r\n");
 8000b54:	4918      	ldr	r1, [pc, #96]	@ (8000bb8 <NTP_Task+0xf4>)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f008 fb94 	bl	8009284 <strtok>
 8000b5c:	6178      	str	r0, [r7, #20]
					while (p) {
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1e8      	bne.n	8000b36 <NTP_Task+0x72>
					}
			}
                osMutexRelease(ESP_MutexHandle);
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <NTP_Task+0xe4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 ffa1 	bl	8005ab0 <osMutexRelease>
 8000b6e:	e013      	b.n	8000b98 <NTP_Task+0xd4>
            }
        } else {
            printf("TCP not connected!, reconnecting...\r\n");
 8000b70:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <NTP_Task+0x100>)
 8000b72:	f008 f9cd 	bl	8008f10 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <NTP_Task+0xe4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 ff4b 	bl	8005a1a <osMutexAcquire>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <NTP_Task+0xd4>
                esp_client_conn();
 8000b8a:	f000 fb61 	bl	8001250 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <NTP_Task+0xe4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 ff8c 	bl	8005ab0 <osMutexRelease>
            }
        }
        vTaskDelayUntil(&last, period);
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 f968 	bl	8006e74 <vTaskDelayUntil>
        if (esp_get_status() == 0) {
 8000ba4:	e79b      	b.n	8000ade <NTP_Task+0x1a>
 8000ba6:	bf00      	nop
 8000ba8:	20000a58 	.word	0x20000a58
 8000bac:	200000f4 	.word	0x200000f4
 8000bb0:	20000110 	.word	0x20000110
 8000bb4:	0800bbd0 	.word	0x0800bbd0
 8000bb8:	0800bbe4 	.word	0x0800bbe4
 8000bbc:	200000f8 	.word	0x200000f8
 8000bc0:	0800bbe8 	.word	0x0800bbe8
 8000bc4:	0800bbfc 	.word	0x0800bbfc

08000bc8 <json_pick_value>:
// ★ esp.c에 추가한 프로브 함수 원형
int esp_link1_tcp_probe(const char *ip_or_host, int port);

// 간단 JSON 파서: "category":"T1H" ... "obsrValue": 27  또는 "obsrValue":"27"
static int json_pick_value(const char *json, const char *cat, char *out, int out_sz)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b098      	sub	sp, #96	@ 0x60
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
    char key[64];
    snprintf(key, sizeof(key), "\"category\":\"%s\"", cat);
 8000bd6:	f107 0010 	add.w	r0, r7, #16
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc8 <json_pick_value+0x100>)
 8000bde:	2140      	movs	r1, #64	@ 0x40
 8000be0:	f008 f99e 	bl	8008f20 <sniprintf>
    const char *p = strstr(json, key);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f008 fba6 	bl	800933c <strstr>
 8000bf0:	6538      	str	r0, [r7, #80]	@ 0x50
    if (!p) return -1;
 8000bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <json_pick_value+0x36>
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	e05f      	b.n	8000cbe <json_pick_value+0xf6>

    const char *v = strstr(p, "\"obsrValue\"");
 8000bfe:	4933      	ldr	r1, [pc, #204]	@ (8000ccc <json_pick_value+0x104>)
 8000c00:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000c02:	f008 fb9b 	bl	800933c <strstr>
 8000c06:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 8000c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <json_pick_value+0x4c>
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e054      	b.n	8000cbe <json_pick_value+0xf6>
    v = strchr(v, ':');
 8000c14:	213a      	movs	r1, #58	@ 0x3a
 8000c16:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000c18:	f008 fb02 	bl	8009220 <strchr>
 8000c1c:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 8000c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <json_pick_value+0x62>
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	e049      	b.n	8000cbe <json_pick_value+0xf6>
    v++; // skip ':'
 8000c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // 공백/따옴표 스킵
    while (*v==' ' || *v=='\"') v++;
 8000c30:	e002      	b.n	8000c38 <json_pick_value+0x70>
 8000c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c34:	3301      	adds	r3, #1
 8000c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b20      	cmp	r3, #32
 8000c3e:	d0f8      	beq.n	8000c32 <json_pick_value+0x6a>
 8000c40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b22      	cmp	r3, #34	@ 0x22
 8000c46:	d0f4      	beq.n	8000c32 <json_pick_value+0x6a>

    // 숫자/텍스트 토큰 끝까지
    const char *e = v;
 8000c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*e && *e!='\"' && *e!='\r' && *e!='\n' && *e!=',' && *e!='}') e++;
 8000c4c:	e002      	b.n	8000c54 <json_pick_value+0x8c>
 8000c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c50:	3301      	adds	r3, #1
 8000c52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <json_pick_value+0xbc>
 8000c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b22      	cmp	r3, #34	@ 0x22
 8000c62:	d00f      	beq.n	8000c84 <json_pick_value+0xbc>
 8000c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b0d      	cmp	r3, #13
 8000c6a:	d00b      	beq.n	8000c84 <json_pick_value+0xbc>
 8000c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b0a      	cmp	r3, #10
 8000c72:	d007      	beq.n	8000c84 <json_pick_value+0xbc>
 8000c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c7a:	d003      	beq.n	8000c84 <json_pick_value+0xbc>
 8000c7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c82:	d1e4      	bne.n	8000c4e <json_pick_value+0x86>

    int len = (int)(e - v);
 8000c84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (len <= 0) return -1;
 8000c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dc02      	bgt.n	8000c98 <json_pick_value+0xd0>
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e012      	b.n	8000cbe <json_pick_value+0xf6>
    if (len >= out_sz) len = out_sz - 1;
 8000c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	db02      	blt.n	8000ca6 <json_pick_value+0xde>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	657b      	str	r3, [r7, #84]	@ 0x54
    memcpy(out, v, len);
 8000ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f009 fa62 	bl	800a176 <memcpy>
    out[len] = 0;
 8000cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
    return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3760      	adds	r7, #96	@ 0x60
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	0800bc24 	.word	0x0800bc24
 8000ccc:	0800bc34 	.word	0x0800bc34

08000cd0 <pty_text>:

static const char* pty_text(int code)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    switch (code) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d822      	bhi.n	8000d24 <pty_text+0x54>
 8000cde:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <pty_text+0x14>)
 8000ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce4:	08000d05 	.word	0x08000d05
 8000ce8:	08000d09 	.word	0x08000d09
 8000cec:	08000d0d 	.word	0x08000d0d
 8000cf0:	08000d11 	.word	0x08000d11
 8000cf4:	08000d15 	.word	0x08000d15
 8000cf8:	08000d19 	.word	0x08000d19
 8000cfc:	08000d1d 	.word	0x08000d1d
 8000d00:	08000d21 	.word	0x08000d21
        case 0: return "강수없음";
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <pty_text+0x64>)
 8000d06:	e00e      	b.n	8000d26 <pty_text+0x56>
        case 1: return "비";
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <pty_text+0x68>)
 8000d0a:	e00c      	b.n	8000d26 <pty_text+0x56>
        case 2: return "비/눈";
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <pty_text+0x6c>)
 8000d0e:	e00a      	b.n	8000d26 <pty_text+0x56>
        case 3: return "눈";
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <pty_text+0x70>)
 8000d12:	e008      	b.n	8000d26 <pty_text+0x56>
        case 4: return "소나기";
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <pty_text+0x74>)
 8000d16:	e006      	b.n	8000d26 <pty_text+0x56>
        case 5: return "빗방울";
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <pty_text+0x78>)
 8000d1a:	e004      	b.n	8000d26 <pty_text+0x56>
        case 6: return "빗방울눈날림";
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <pty_text+0x7c>)
 8000d1e:	e002      	b.n	8000d26 <pty_text+0x56>
        case 7: return "눈날림";
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <pty_text+0x80>)
 8000d22:	e000      	b.n	8000d26 <pty_text+0x56>
        default: return "?";
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <pty_text+0x84>)
    }
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	0800bc40 	.word	0x0800bc40
 8000d38:	0800bc50 	.word	0x0800bc50
 8000d3c:	0800bc54 	.word	0x0800bc54
 8000d40:	0800bc5c 	.word	0x0800bc5c
 8000d44:	0800bc60 	.word	0x0800bc60
 8000d48:	0800bc6c 	.word	0x0800bc6c
 8000d4c:	0800bc78 	.word	0x0800bc78
 8000d50:	0800bc8c 	.word	0x0800bc8c
 8000d54:	0800bc98 	.word	0x0800bc98

08000d58 <Weather_Task>:


void Weather_Task(void *argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	f5ad 6dde 	sub.w	sp, sp, #1776	@ 0x6f0
 8000d5e:	af02      	add	r7, sp, #8
 8000d60:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 8000d64:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 8000d68:	6018      	str	r0, [r3, #0]
    const char *KMA_HOST = "apihub.kma.go.kr";
 8000d6a:	4b9b      	ldr	r3, [pc, #620]	@ (8000fd8 <Weather_Task+0x280>)
 8000d6c:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
    const char *KMA_IP   = "203.247.96.25";   // nslookup 결과
 8000d70:	4b9a      	ldr	r3, [pc, #616]	@ (8000fdc <Weather_Task+0x284>)
 8000d72:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
    uint16_t length;

    for (;;)
    {
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000d76:	4b9a      	ldr	r3, [pc, #616]	@ (8000fe0 <Weather_Task+0x288>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fe4b 	bl	8005a1a <osMutexAcquire>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f040 8120 	bne.w	8000fcc <Weather_Task+0x274>
            // 1) 링크1 열기
            char cmd[128];
            sprintf(cmd, "AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", KMA_IP);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	f8d7 26d4 	ldr.w	r2, [r7, #1748]	@ 0x6d4
 8000d94:	4993      	ldr	r1, [pc, #588]	@ (8000fe4 <Weather_Task+0x28c>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f008 f8f8 	bl	8008f8c <siprintf>
            if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) == 0) {
 8000d9c:	f207 62ce 	addw	r2, r7, #1742	@ 0x6ce
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000da8:	498f      	ldr	r1, [pc, #572]	@ (8000fe8 <Weather_Task+0x290>)
 8000daa:	f000 f93d 	bl	8001028 <esp_at_command>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f040 8103 	bne.w	8000fbc <Weather_Task+0x264>
                printf("[WEATHER] Link1 TCP connect OK\r\n");
 8000db6:	488d      	ldr	r0, [pc, #564]	@ (8000fec <Weather_Task+0x294>)
 8000db8:	f008 f8aa 	bl	8008f10 <puts>

                // 2) HTTP GET 문자열 준비
                char http_req[512];
                sprintf(http_req,
 8000dbc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000dc0:	f8d7 26d8 	ldr.w	r2, [r7, #1752]	@ 0x6d8
 8000dc4:	498a      	ldr	r1, [pc, #552]	@ (8000ff0 <Weather_Task+0x298>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 f8e0 	bl	8008f8c <siprintf>
                    "Host: %s\r\n"
                    "Connection: close\r\n"
                    "\r\n", KMA_HOST);

                // 3) AT+CIPSEND=1,<len>
                sprintf(cmd, "AT+CIPSEND=1,%d\r\n", (int)strlen(http_req));
 8000dcc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa0f 	bl	80001f4 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4985      	ldr	r1, [pc, #532]	@ (8000ff4 <Weather_Task+0x29c>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f008 f8d3 	bl	8008f8c <siprintf>
                if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 2000) == 0) {
 8000de6:	f207 62ce 	addw	r2, r7, #1742	@ 0x6ce
 8000dea:	f107 000c 	add.w	r0, r7, #12
 8000dee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000df2:	497d      	ldr	r1, [pc, #500]	@ (8000fe8 <Weather_Task+0x290>)
 8000df4:	f000 f918 	bl	8001028 <esp_at_command>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 80d5 	bne.w	8000faa <Weather_Task+0x252>
                    // (권장) 프롬프트 안정화
                    vTaskDelay(pdMS_TO_TICKS(50));
 8000e00:	2032      	movs	r0, #50	@ 0x32
 8000e02:	f006 f8b7 	bl	8006f74 <vTaskDelay>

                    // 4) payload 송신 (단순 송신)
                    HAL_UART_Transmit(&huart6, (uint8_t*)http_req, strlen(http_req), 500);
 8000e06:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff f9f2 	bl	80001f4 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000e18:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e1c:	4876      	ldr	r0, [pc, #472]	@ (8000ff8 <Weather_Task+0x2a0>)
 8000e1e:	f003 fc2f 	bl	8004680 <HAL_UART_Transmit>

                    // 5) 응답 수신: cb_data에서 rx로 누적 수집 (최대 8초, CLOSED 감지 시 조기 종료)
                    char rx[MAX_ESP_RX_BUFFER];
                    int  copied = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
                    int  elapsed = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
                    memset(rx, 0, sizeof(rx));
 8000e2e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8000e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f008 f9e9 	bl	8009210 <memset>

                    for (;;) {
                        // CLOSED 들어오면 서버가 응답 끝내고 소켓 닫았다는 의미
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8000e3e:	496f      	ldr	r1, [pc, #444]	@ (8000ffc <Weather_Task+0x2a4>)
 8000e40:	486f      	ldr	r0, [pc, #444]	@ (8001000 <Weather_Task+0x2a8>)
 8000e42:	f008 fa7b 	bl	800933c <strstr>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d142      	bne.n	8000ed2 <Weather_Task+0x17a>

                        if (cb_data.length > 0) {
 8000e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001000 <Weather_Task+0x2a8>)
 8000e4e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d02f      	beq.n	8000eb6 <Weather_Task+0x15e>
                            taskENTER_CRITICAL();
 8000e56:	f007 fb8f 	bl	8008578 <vPortEnterCritical>
                            int n = cb_data.length;
 8000e5a:	4b69      	ldr	r3, [pc, #420]	@ (8001000 <Weather_Task+0x2a8>)
 8000e5c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000e60:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
                            if (n > (int)sizeof(rx) - 1 - copied) n = sizeof(rx) - 1 - copied;
 8000e64:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	@ 0x6e4
 8000e68:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000e6c:	3303      	adds	r3, #3
 8000e6e:	f8d7 26dc 	ldr.w	r2, [r7, #1756]	@ 0x6dc
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dd06      	ble.n	8000e84 <Weather_Task+0x12c>
 8000e76:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	@ 0x6e4
 8000e7a:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000e7e:	3303      	adds	r3, #3
 8000e80:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
                            memcpy(rx + copied, cb_data.buf, n);
 8000e84:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	@ 0x6e4
 8000e88:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f8d7 26dc 	ldr.w	r2, [r7, #1756]	@ 0x6dc
 8000e92:	495b      	ldr	r1, [pc, #364]	@ (8001000 <Weather_Task+0x2a8>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f009 f96e 	bl	800a176 <memcpy>
                            cb_data.length = 0;   // 소비
 8000e9a:	4b59      	ldr	r3, [pc, #356]	@ (8001000 <Weather_Task+0x2a8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
                            taskEXIT_CRITICAL();
 8000ea2:	f007 fb9b 	bl	80085dc <vPortExitCritical>
                            copied += n;
 8000ea6:	f8d7 26e4 	ldr.w	r2, [r7, #1764]	@ 0x6e4
 8000eaa:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	@ 0x6dc
 8000eae:	4413      	add	r3, r2
 8000eb0:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 8000eb4:	e7c3      	b.n	8000e3e <Weather_Task+0xe6>
                        } else {
                            vTaskDelay(pdMS_TO_TICKS(20));
 8000eb6:	2014      	movs	r0, #20
 8000eb8:	f006 f85c 	bl	8006f74 <vTaskDelay>
                            elapsed += 20;
 8000ebc:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	@ 0x6e0
 8000ec0:	3314      	adds	r3, #20
 8000ec2:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8000ec6:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	@ 0x6e0
 8000eca:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000ece:	da02      	bge.n	8000ed6 <Weather_Task+0x17e>
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8000ed0:	e7b5      	b.n	8000e3e <Weather_Task+0xe6>
 8000ed2:	bf00      	nop
 8000ed4:	e000      	b.n	8000ed8 <Weather_Task+0x180>
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8000ed6:	bf00      	nop
                               copied, (copied > 800) ? 800 : copied, rx);  // 로그 과다 방지
                    } else {
                        printf("[WEATHER] No HTTP response (copied=%d)\r\n", copied);
                    }
					*/
                    if (strstr(rx, "HTTP/1.1 200")) {
 8000ed8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8000edc:	4949      	ldr	r1, [pc, #292]	@ (8001004 <Weather_Task+0x2ac>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 fa2c 	bl	800933c <strstr>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d05a      	beq.n	8000fa0 <Weather_Task+0x248>
                        // JSON에서 값 뽑기
                        char t1h[16] = "?", reh[16] = "?", pty[16] = "?", rn1[16] = "?";
 8000eea:	233f      	movs	r3, #63	@ 0x3f
 8000eec:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 8000ef0:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	233f      	movs	r3, #63	@ 0x3f
 8000efe:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8000f02:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	233f      	movs	r3, #63	@ 0x3f
 8000f10:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8000f14:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	233f      	movs	r3, #63	@ 0x3f
 8000f22:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 8000f26:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
                        json_pick_value(rx, "T1H", t1h, sizeof(t1h));
 8000f32:	f207 62bc 	addw	r2, r7, #1724	@ 0x6bc
 8000f36:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	4932      	ldr	r1, [pc, #200]	@ (8001008 <Weather_Task+0x2b0>)
 8000f3e:	f7ff fe43 	bl	8000bc8 <json_pick_value>
                        json_pick_value(rx, "REH", reh, sizeof(reh));
 8000f42:	f207 62ac 	addw	r2, r7, #1708	@ 0x6ac
 8000f46:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	492f      	ldr	r1, [pc, #188]	@ (800100c <Weather_Task+0x2b4>)
 8000f4e:	f7ff fe3b 	bl	8000bc8 <json_pick_value>
                        json_pick_value(rx, "PTY", pty, sizeof(pty));
 8000f52:	f207 629c 	addw	r2, r7, #1692	@ 0x69c
 8000f56:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	492c      	ldr	r1, [pc, #176]	@ (8001010 <Weather_Task+0x2b8>)
 8000f5e:	f7ff fe33 	bl	8000bc8 <json_pick_value>
                        json_pick_value(rx, "RN1", rn1, sizeof(rn1));
 8000f62:	f207 628c 	addw	r2, r7, #1676	@ 0x68c
 8000f66:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	4929      	ldr	r1, [pc, #164]	@ (8001014 <Weather_Task+0x2bc>)
 8000f6e:	f7ff fe2b 	bl	8000bc8 <json_pick_value>

                        int pty_code = atoi(pty);
 8000f72:	f207 639c 	addw	r3, r7, #1692	@ 0x69c
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 fe0e 	bl	8008b98 <atoi>
 8000f7c:	f8c7 06d0 	str.w	r0, [r7, #1744]	@ 0x6d0
                        printf("[WEATHER][Gangseo-gu] T=%s°C, RH=%s%%, RAIN=%s, RN1=%smm\r\n",
 8000f80:	f8d7 06d0 	ldr.w	r0, [r7, #1744]	@ 0x6d0
 8000f84:	f7ff fea4 	bl	8000cd0 <pty_text>
 8000f88:	f207 62ac 	addw	r2, r7, #1708	@ 0x6ac
 8000f8c:	f207 61bc 	addw	r1, r7, #1724	@ 0x6bc
 8000f90:	f207 638c 	addw	r3, r7, #1676	@ 0x68c
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4603      	mov	r3, r0
 8000f98:	481f      	ldr	r0, [pc, #124]	@ (8001018 <Weather_Task+0x2c0>)
 8000f9a:	f007 ff49 	bl	8008e30 <iprintf>
 8000f9e:	e004      	b.n	8000faa <Weather_Task+0x252>
                               t1h, reh, pty_text(pty_code), rn1);
                    } else {
                        printf("[WEATHER] HTTP not 200 (len=%d)\r\n", copied);
 8000fa0:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 8000fa4:	481d      	ldr	r0, [pc, #116]	@ (800101c <Weather_Task+0x2c4>)
 8000fa6:	f007 ff43 	bl	8008e30 <iprintf>
                    }

                }

                // 6) 링크1 닫기
                esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
 8000faa:	f207 62ce 	addw	r2, r7, #1742	@ 0x6ce
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <Weather_Task+0x290>)
 8000fb4:	481a      	ldr	r0, [pc, #104]	@ (8001020 <Weather_Task+0x2c8>)
 8000fb6:	f000 f837 	bl	8001028 <esp_at_command>
 8000fba:	e002      	b.n	8000fc2 <Weather_Task+0x26a>
            } else {
                printf("[WEATHER] Link1 TCP connect FAIL\r\n");
 8000fbc:	4819      	ldr	r0, [pc, #100]	@ (8001024 <Weather_Task+0x2cc>)
 8000fbe:	f007 ffa7 	bl	8008f10 <puts>
            }

            osMutexRelease(ESP_MutexHandle);
 8000fc2:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <Weather_Task+0x288>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 fd72 	bl	8005ab0 <osMutexRelease>
        }

        vTaskDelay(pdMS_TO_TICKS(10000));  // 10초 주기
 8000fcc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000fd0:	f005 ffd0 	bl	8006f74 <vTaskDelay>
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000fd4:	e6cf      	b.n	8000d76 <Weather_Task+0x1e>
 8000fd6:	bf00      	nop
 8000fd8:	0800bc9c 	.word	0x0800bc9c
 8000fdc:	0800bcb0 	.word	0x0800bcb0
 8000fe0:	20000a58 	.word	0x20000a58
 8000fe4:	0800bcc0 	.word	0x0800bcc0
 8000fe8:	20000110 	.word	0x20000110
 8000fec:	0800bce0 	.word	0x0800bce0
 8000ff0:	0800bd00 	.word	0x0800bd00
 8000ff4:	0800bde0 	.word	0x0800bde0
 8000ff8:	20000a00 	.word	0x20000a00
 8000ffc:	0800bdf4 	.word	0x0800bdf4
 8001000:	20000548 	.word	0x20000548
 8001004:	0800bdfc 	.word	0x0800bdfc
 8001008:	0800be0c 	.word	0x0800be0c
 800100c:	0800be10 	.word	0x0800be10
 8001010:	0800be14 	.word	0x0800be14
 8001014:	0800be18 	.word	0x0800be18
 8001018:	0800be1c 	.word	0x0800be1c
 800101c:	0800be58 	.word	0x0800be58
 8001020:	0800be7c 	.word	0x0800be7c
 8001024:	0800be8c 	.word	0x0800be8c

08001028 <esp_at_command>:
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	807b      	strh	r3, [r7, #2]
	*length = 0;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 800103c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001040:	2100      	movs	r1, #0
 8001042:	68b8      	ldr	r0, [r7, #8]
 8001044:	f008 f8e4 	bl	8009210 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 8001048:	f240 4204 	movw	r2, #1028	@ 0x404
 800104c:	2100      	movs	r1, #0
 800104e:	482f      	ldr	r0, [pc, #188]	@ (800110c <esp_at_command+0xe4>)
 8001050:	f008 f8de 	bl	8009210 <memset>
	cb_data.length = 0;
 8001054:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <esp_at_command+0xe4>)
 8001056:	2200      	movs	r2, #0
 8001058:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff f8c9 	bl	80001f4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	2364      	movs	r3, #100	@ 0x64
 8001068:	68f9      	ldr	r1, [r7, #12]
 800106a:	4829      	ldr	r0, [pc, #164]	@ (8001110 <esp_at_command+0xe8>)
 800106c:	f003 fb08 	bl	8004680 <HAL_UART_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d03f      	beq.n	80010f6 <esp_at_command+0xce>
		return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e042      	b.n	8001102 <esp_at_command+0xda>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER) return -2;
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <esp_at_command+0xe4>)
 800107e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001086:	d302      	bcc.n	800108e <esp_at_command+0x66>
 8001088:	f06f 0301 	mvn.w	r3, #1
 800108c:	e039      	b.n	8001102 <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL) return -3;
 800108e:	4921      	ldr	r1, [pc, #132]	@ (8001114 <esp_at_command+0xec>)
 8001090:	481e      	ldr	r0, [pc, #120]	@ (800110c <esp_at_command+0xe4>)
 8001092:	f008 f953 	bl	800933c <strstr>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <esp_at_command+0x7a>
 800109c:	f06f 0302 	mvn.w	r3, #2
 80010a0:	e02f      	b.n	8001102 <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 80010a2:	491d      	ldr	r1, [pc, #116]	@ (8001118 <esp_at_command+0xf0>)
 80010a4:	4819      	ldr	r0, [pc, #100]	@ (800110c <esp_at_command+0xe4>)
 80010a6:	f008 f949 	bl	800933c <strstr>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <esp_at_command+0x94>
		{
			printf("ESP: TCP connection closed.\r\n");
 80010b0:	481a      	ldr	r0, [pc, #104]	@ (800111c <esp_at_command+0xf4>)
 80010b2:	f007 ff2d 	bl	8008f10 <puts>
			//esp_client_conn();   // 자동 재연결
			return -5;
 80010b6:	f06f 0304 	mvn.w	r3, #4
 80010ba:	e022      	b.n	8001102 <esp_at_command+0xda>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 80010bc:	4918      	ldr	r1, [pc, #96]	@ (8001120 <esp_at_command+0xf8>)
 80010be:	4813      	ldr	r0, [pc, #76]	@ (800110c <esp_at_command+0xe4>)
 80010c0:	f008 f93c 	bl	800933c <strstr>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <esp_at_command+0xc0>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <esp_at_command+0xe4>)
 80010cc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80010d0:	461a      	mov	r2, r3
 80010d2:	490e      	ldr	r1, [pc, #56]	@ (800110c <esp_at_command+0xe4>)
 80010d4:	68b8      	ldr	r0, [r7, #8]
 80010d6:	f009 f84e 	bl	800a176 <memcpy>
			*length = cb_data.length;
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <esp_at_command+0xe4>)
 80010dc:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	801a      	strh	r2, [r3, #0]
			return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e00c      	b.n	8001102 <esp_at_command+0xda>
		}

		time_out -= 10;
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	3b0a      	subs	r3, #10
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f001 f975 	bl	80023e0 <HAL_Delay>
	while (time_out > 0)
 80010f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dcbe      	bgt.n	800107c <esp_at_command+0x54>
	}
	return -4; // Timeout
 80010fe:	f06f 0303 	mvn.w	r3, #3
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000548 	.word	0x20000548
 8001110:	20000a00 	.word	0x20000a00
 8001114:	0800beb0 	.word	0x0800beb0
 8001118:	0800beb8 	.word	0x0800beb8
 800111c:	0800bec0 	.word	0x0800bec0
 8001120:	0800bee0 	.word	0x0800bee0

08001124 <esp_reset>:
    return 0; // 타임아웃
}


static int esp_reset(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800112e:	1dba      	adds	r2, r7, #6
 8001130:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001134:	4909      	ldr	r1, [pc, #36]	@ (800115c <esp_reset+0x38>)
 8001136:	480a      	ldr	r0, [pc, #40]	@ (8001160 <esp_reset+0x3c>)
 8001138:	f7ff ff76 	bl	8001028 <esp_at_command>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <esp_reset+0x24>
    {
    	return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e004      	b.n	8001152 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001148:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800114c:	f001 f948 	bl	80023e0 <HAL_Delay>
    return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000110 	.word	0x20000110
 8001160:	0800bee4 	.word	0x0800bee4

08001164 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8001172:	f107 020a 	add.w	r2, r7, #10
 8001176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117a:	492d      	ldr	r1, [pc, #180]	@ (8001230 <request_ip_addr+0xcc>)
 800117c:	482d      	ldr	r0, [pc, #180]	@ (8001234 <request_ip_addr+0xd0>)
 800117e:	f7ff ff53 	bl	8001028 <esp_at_command>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001188:	482b      	ldr	r0, [pc, #172]	@ (8001238 <request_ip_addr+0xd4>)
 800118a:	f007 fec1 	bl	8008f10 <puts>
 800118e:	e049      	b.n	8001224 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8001190:	492a      	ldr	r1, [pc, #168]	@ (800123c <request_ip_addr+0xd8>)
 8001192:	4827      	ldr	r0, [pc, #156]	@ (8001230 <request_ip_addr+0xcc>)
 8001194:	f008 f876 	bl	8009284 <strtok>
 8001198:	6178      	str	r0, [r7, #20]

        if(is_debug)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d03e      	beq.n	800121e <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	e009      	b.n	80011ba <request_ip_addr+0x56>
                printf("%c", response[i]);
 80011a6:	4a22      	ldr	r2, [pc, #136]	@ (8001230 <request_ip_addr+0xcc>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f007 fe50 	bl	8008e54 <putchar>
            for(int i = 0 ; i < length ; i++)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	3301      	adds	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	897b      	ldrh	r3, [r7, #10]
 80011bc:	461a      	mov	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	dbf0      	blt.n	80011a6 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80011c4:	e02b      	b.n	800121e <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80011c6:	491e      	ldr	r1, [pc, #120]	@ (8001240 <request_ip_addr+0xdc>)
 80011c8:	6978      	ldr	r0, [r7, #20]
 80011ca:	f008 f8b7 	bl	800933c <strstr>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01f      	beq.n	8001214 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80011d4:	491b      	ldr	r1, [pc, #108]	@ (8001244 <request_ip_addr+0xe0>)
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f008 f854 	bl	8009284 <strtok>
                ip = strtok(NULL, "\"");
 80011dc:	4919      	ldr	r1, [pc, #100]	@ (8001244 <request_ip_addr+0xe0>)
 80011de:	2000      	movs	r0, #0
 80011e0:	f008 f850 	bl	8009284 <strtok>
 80011e4:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80011e6:	4918      	ldr	r1, [pc, #96]	@ (8001248 <request_ip_addr+0xe4>)
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7fe fff9 	bl	80001e0 <strcmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00f      	beq.n	8001214 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80011f4:	2210      	movs	r2, #16
 80011f6:	2100      	movs	r1, #0
 80011f8:	4814      	ldr	r0, [pc, #80]	@ (800124c <request_ip_addr+0xe8>)
 80011fa:	f008 f809 	bl	8009210 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7fe fff8 	bl	80001f4 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4810      	ldr	r0, [pc, #64]	@ (800124c <request_ip_addr+0xe8>)
 800120c:	f008 ffb3 	bl	800a176 <memcpy>
                    return 0;
 8001210:	2300      	movs	r3, #0
 8001212:	e009      	b.n	8001228 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001214:	4909      	ldr	r1, [pc, #36]	@ (800123c <request_ip_addr+0xd8>)
 8001216:	2000      	movs	r0, #0
 8001218:	f008 f834 	bl	8009284 <strtok>
 800121c:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1d0      	bne.n	80011c6 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000110 	.word	0x20000110
 8001234:	0800bf2c 	.word	0x0800bf2c
 8001238:	0800bf38 	.word	0x0800bf38
 800123c:	0800bf20 	.word	0x0800bf20
 8001240:	0800bf58 	.word	0x0800bf58
 8001244:	0800bf28 	.word	0x0800bf28
 8001248:	0800bef0 	.word	0x0800bef0
 800124c:	20000100 	.word	0x20000100

08001250 <esp_client_conn>:

int esp_client_conn()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b092      	sub	sp, #72	@ 0x48
 8001254:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2240      	movs	r2, #64	@ 0x40
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f007 ffd6 	bl	8009210 <memset>
	uint16_t length = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	80fb      	strh	r3, [r7, #6]

    // 링크ID 0로 접속
    sprintf(at_cmd, "AT+CIPSTART=0,\"TCP\",\"%s\",%d\r\n", DST_IP, DST_PORT);
 8001268:	f107 0008 	add.w	r0, r7, #8
 800126c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001270:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <esp_client_conn+0x74>)
 8001272:	4915      	ldr	r1, [pc, #84]	@ (80012c8 <esp_client_conn+0x78>)
 8001274:	f007 fe8a 	bl	8008f8c <siprintf>
    esp_at_command((uint8_t*)at_cmd, (uint8_t*)response, &length, 2000);
 8001278:	1dba      	adds	r2, r7, #6
 800127a:	f107 0008 	add.w	r0, r7, #8
 800127e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001282:	4912      	ldr	r1, [pc, #72]	@ (80012cc <esp_client_conn+0x7c>)
 8001284:	f7ff fed0 	bl	8001028 <esp_at_command>

    // 첫 로그인/인증도 링크0로 전송
    sprintf(at_cmd, "AT+CIPSEND=0,%d\r\n", (int)strlen("["LOGID":"PASSWD"]"));
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2210      	movs	r2, #16
 800128e:	4910      	ldr	r1, [pc, #64]	@ (80012d0 <esp_client_conn+0x80>)
 8001290:	4618      	mov	r0, r3
 8001292:	f007 fe7b 	bl	8008f8c <siprintf>
    if (esp_at_command((uint8_t*)at_cmd, (uint8_t*)response, &length, 1000) == 0) {
 8001296:	1dba      	adds	r2, r7, #6
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a0:	490a      	ldr	r1, [pc, #40]	@ (80012cc <esp_client_conn+0x7c>)
 80012a2:	f7ff fec1 	bl	8001028 <esp_at_command>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d106      	bne.n	80012ba <esp_client_conn+0x6a>
        esp_at_command((uint8_t*)("["LOGID":"PASSWD"]"), (uint8_t*)response, &length, 1000);
 80012ac:	1dba      	adds	r2, r7, #6
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	4906      	ldr	r1, [pc, #24]	@ (80012cc <esp_client_conn+0x7c>)
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <esp_client_conn+0x84>)
 80012b6:	f7ff feb7 	bl	8001028 <esp_at_command>
    }

	return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3748      	adds	r7, #72	@ 0x48
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800bf64 	.word	0x0800bf64
 80012c8:	0800bf70 	.word	0x0800bf70
 80012cc:	20000110 	.word	0x20000110
 80012d0:	0800bf90 	.word	0x0800bf90
 80012d4:	0800bfa4 	.word	0x0800bfa4

080012d8 <esp_get_status>:
int esp_get_status()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80012e2:	1dba      	adds	r2, r7, #6
 80012e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e8:	4909      	ldr	r1, [pc, #36]	@ (8001310 <esp_get_status+0x38>)
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <esp_get_status+0x3c>)
 80012ec:	f7ff fe9c 	bl	8001028 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80012f0:	4909      	ldr	r1, [pc, #36]	@ (8001318 <esp_get_status+0x40>)
 80012f2:	4807      	ldr	r0, [pc, #28]	@ (8001310 <esp_get_status+0x38>)
 80012f4:	f008 f822 	bl	800933c <strstr>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <esp_get_status+0x2a>
    {
    	return 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	e001      	b.n	8001306 <esp_get_status+0x2e>
    }
	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000110 	.word	0x20000110
 8001314:	0800bfb8 	.word	0x0800bfb8
 8001318:	0800bfc8 	.word	0x0800bfc8

0800131c <drv_esp_init>:

 int drv_esp_init(void)
 {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 8001322:	2210      	movs	r2, #16
 8001324:	2100      	movs	r1, #0
 8001326:	4817      	ldr	r0, [pc, #92]	@ (8001384 <drv_esp_init+0x68>)
 8001328:	f007 ff72 	bl	8009210 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 800132c:	f240 4204 	movw	r2, #1028	@ 0x404
 8001330:	2100      	movs	r1, #0
 8001332:	4815      	ldr	r0, [pc, #84]	@ (8001388 <drv_esp_init+0x6c>)
 8001334:	f007 ff6c 	bl	8009210 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	4914      	ldr	r1, [pc, #80]	@ (800138c <drv_esp_init+0x70>)
 800133c:	4814      	ldr	r0, [pc, #80]	@ (8001390 <drv_esp_init+0x74>)
 800133e:	f003 fa2a 	bl	8004796 <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	e011      	b.n	800136c <drv_esp_init+0x50>
         uint16_t len=0;
 8001348:	2300      	movs	r3, #0
 800134a:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 800134c:	1cba      	adds	r2, r7, #2
 800134e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001352:	4910      	ldr	r1, [pc, #64]	@ (8001394 <drv_esp_init+0x78>)
 8001354:	4810      	ldr	r0, [pc, #64]	@ (8001398 <drv_esp_init+0x7c>)
 8001356:	f7ff fe67 	bl	8001028 <esp_at_command>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <drv_esp_init+0x58>
         HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	@ 0x64
 8001362:	f001 f83d 	bl	80023e0 <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	ddea      	ble.n	8001348 <drv_esp_init+0x2c>
 8001372:	e000      	b.n	8001376 <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8001374:	bf00      	nop
     }
     return esp_reset();
 8001376:	f7ff fed5 	bl	8001124 <esp_reset>
 800137a:	4603      	mov	r3, r0
 }
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000100 	.word	0x20000100
 8001388:	20000548 	.word	0x20000548
 800138c:	20000547 	.word	0x20000547
 8001390:	20000a00 	.word	0x20000a00
 8001394:	20000110 	.word	0x20000110
 8001398:	0800bfd4 	.word	0x0800bfd4

0800139c <reset_func>:

void reset_func()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 80013a0:	4808      	ldr	r0, [pc, #32]	@ (80013c4 <reset_func+0x28>)
 80013a2:	f007 fd45 	bl	8008e30 <iprintf>
	if(esp_reset() == 0)
 80013a6:	f7ff febd 	bl	8001124 <esp_reset>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <reset_func+0x1c>
			printf("OK\r\n");
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <reset_func+0x2c>)
 80013b2:	f007 fdad 	bl	8008f10 <puts>
	else
			printf("fail\r\n");
}
 80013b6:	e002      	b.n	80013be <reset_func+0x22>
			printf("fail\r\n");
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <reset_func+0x30>)
 80013ba:	f007 fda9 	bl	8008f10 <puts>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	0800bfdc 	.word	0x0800bfdc
 80013c8:	0800bfec 	.word	0x0800bfec
 80013cc:	0800bff0 	.word	0x0800bff0

080013d0 <version_func>:

void version_func()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 80013da:	4813      	ldr	r0, [pc, #76]	@ (8001428 <version_func+0x58>)
 80013dc:	f007 fd98 	bl	8008f10 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80013e0:	1cba      	adds	r2, r7, #2
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	4911      	ldr	r1, [pc, #68]	@ (800142c <version_func+0x5c>)
 80013e8:	4811      	ldr	r0, [pc, #68]	@ (8001430 <version_func+0x60>)
 80013ea:	f7ff fe1d 	bl	8001028 <esp_at_command>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <version_func+0x2c>
      printf("ap scan command fail\r\n");
 80013f4:	480f      	ldr	r0, [pc, #60]	@ (8001434 <version_func+0x64>)
 80013f6:	f007 fd8b 	bl	8008f10 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 80013fa:	e011      	b.n	8001420 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	e009      	b.n	8001416 <version_func+0x46>
          printf("%c", response[i]);
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <version_func+0x5c>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f007 fd22 	bl	8008e54 <putchar>
      for(int i = 0 ; i < length ; i++)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4293      	cmp	r3, r2
 800141e:	dbf0      	blt.n	8001402 <version_func+0x32>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800bff8 	.word	0x0800bff8
 800142c:	20000110 	.word	0x20000110
 8001430:	0800c010 	.word	0x0800c010
 8001434:	0800c01c 	.word	0x0800c01c

08001438 <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	@ 0x50
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2240      	movs	r2, #64	@ 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fedd 	bl	8009210 <memset>
  if(ssid == NULL || passwd == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <ap_conn_func+0x2a>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001462:	4817      	ldr	r0, [pc, #92]	@ (80014c0 <ap_conn_func+0x88>)
 8001464:	f007 fd54 	bl	8008f10 <puts>
 8001468:	e026      	b.n	80014b8 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800146a:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	4914      	ldr	r1, [pc, #80]	@ (80014c4 <ap_conn_func+0x8c>)
 8001474:	4814      	ldr	r0, [pc, #80]	@ (80014c8 <ap_conn_func+0x90>)
 8001476:	f7ff fdd7 	bl	8001028 <esp_at_command>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001480:	4812      	ldr	r0, [pc, #72]	@ (80014cc <ap_conn_func+0x94>)
 8001482:	f007 fd45 	bl	8008f10 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8001486:	f107 000c 	add.w	r0, r7, #12
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4910      	ldr	r1, [pc, #64]	@ (80014d0 <ap_conn_func+0x98>)
 8001490:	f007 fd7c 	bl	8008f8c <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001494:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001498:	f107 000c 	add.w	r0, r7, #12
 800149c:	f241 7370 	movw	r3, #6000	@ 0x1770
 80014a0:	4908      	ldr	r1, [pc, #32]	@ (80014c4 <ap_conn_func+0x8c>)
 80014a2:	f7ff fdc1 	bl	8001028 <esp_at_command>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <ap_conn_func+0x9c>)
 80014b4:	f007 fcbc 	bl	8008e30 <iprintf>
}
 80014b8:	3750      	adds	r7, #80	@ 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800c034 	.word	0x0800c034
 80014c4:	20000110 	.word	0x20000110
 80014c8:	0800c060 	.word	0x0800c060
 80014cc:	0800c070 	.word	0x0800c070
 80014d0:	0800c084 	.word	0x0800c084
 80014d4:	0800c09c 	.word	0x0800c09c

080014d8 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a23      	ldr	r2, [pc, #140]	@ (8001574 <HAL_UART_RxCpltCallback+0x9c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d117      	bne.n	800151a <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_UART_RxCpltCallback+0xa0>)
 80014ec:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80014f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f4:	d20c      	bcs.n	8001510 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_UART_RxCpltCallback+0xa0>)
 80014f8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	b291      	uxth	r1, r2
 8001500:	4a1d      	ldr	r2, [pc, #116]	@ (8001578 <HAL_UART_RxCpltCallback+0xa0>)
 8001502:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8001506:	461a      	mov	r2, r3
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_UART_RxCpltCallback+0xa4>)
 800150a:	7819      	ldrb	r1, [r3, #0]
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_UART_RxCpltCallback+0xa0>)
 800150e:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	491a      	ldr	r1, [pc, #104]	@ (800157c <HAL_UART_RxCpltCallback+0xa4>)
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f003 f93e 	bl	8004796 <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a18      	ldr	r2, [pc, #96]	@ (8001580 <HAL_UART_RxCpltCallback+0xa8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d122      	bne.n	800156a <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_UART_RxCpltCallback+0xac>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_UART_RxCpltCallback+0xb0>)
 800152a:	7811      	ldrb	r1, [r2, #0]
 800152c:	4a17      	ldr	r2, [pc, #92]	@ (800158c <HAL_UART_RxCpltCallback+0xb4>)
 800152e:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_UART_RxCpltCallback+0xac>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a15      	ldr	r2, [pc, #84]	@ (800158c <HAL_UART_RxCpltCallback+0xb4>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b0d      	cmp	r3, #13
 800153c:	d10b      	bne.n	8001556 <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_UART_RxCpltCallback+0xac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <HAL_UART_RxCpltCallback+0xb4>)
 8001544:	2100      	movs	r1, #0
 8001546:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_UART_RxCpltCallback+0xb8>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
            i = 0;
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_UART_RxCpltCallback+0xac>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e004      	b.n	8001560 <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_UART_RxCpltCallback+0xac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_UART_RxCpltCallback+0xac>)
 800155e:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4909      	ldr	r1, [pc, #36]	@ (8001588 <HAL_UART_RxCpltCallback+0xb0>)
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f003 f916 	bl	8004796 <HAL_UART_Receive_IT>
    }
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40011400 	.word	0x40011400
 8001578:	20000548 	.word	0x20000548
 800157c:	20000547 	.word	0x20000547
 8001580:	40004400 	.word	0x40004400
 8001584:	2000094c 	.word	0x2000094c
 8001588:	20000546 	.word	0x20000546
 800158c:	20000514 	.word	0x20000514
 8001590:	20000510 	.word	0x20000510

08001594 <AiotClient_Init>:



void AiotClient_Init()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	reset_func();
 800159a:	f7ff feff 	bl	800139c <reset_func>
	version_func();
 800159e:	f7ff ff17 	bl	80013d0 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 80015a2:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <AiotClient_Init+0x40>)
 80015a4:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <AiotClient_Init+0x44>)
 80015a6:	f7ff ff47 	bl	8001438 <ap_conn_func>
	request_ip_addr(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fdda 	bl	8001164 <request_ip_addr>

    // ★ 멀티커넥션 ON
	uint16_t length = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t*)"AT+CIPMUX=1\r\n", (uint8_t*)response, &length, 1000);
 80015b4:	1dba      	adds	r2, r7, #6
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <AiotClient_Init+0x48>)
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <AiotClient_Init+0x4c>)
 80015be:	f7ff fd33 	bl	8001028 <esp_at_command>


	esp_client_conn();
 80015c2:	f7ff fe45 	bl	8001250 <esp_client_conn>
	esp_get_status();
 80015c6:	f7ff fe87 	bl	80012d8 <esp_get_status>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800c0fc 	.word	0x0800c0fc
 80015d8:	0800c108 	.word	0x0800c108
 80015dc:	20000110 	.word	0x20000110
 80015e0:	0800c110 	.word	0x0800c110

080015e4 <drv_uart_init>:
}


//==================uart2=========================
int drv_uart_init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	4903      	ldr	r1, [pc, #12]	@ (80015f8 <drv_uart_init+0x14>)
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <drv_uart_init+0x18>)
 80015ee:	f003 f8d2 	bl	8004796 <HAL_UART_Receive_IT>
    return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000546 	.word	0x20000546
 80015fc:	200009b8 	.word	0x200009b8

08001600 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001608:	1d39      	adds	r1, r7, #4
 800160a:	230a      	movs	r3, #10
 800160c:	2201      	movs	r2, #1
 800160e:	4807      	ldr	r0, [pc, #28]	@ (800162c <__io_putchar+0x2c>)
 8001610:	f003 f836 	bl	8004680 <HAL_UART_Transmit>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <__io_putchar+0x1e>
        return ch;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	e001      	b.n	8001622 <__io_putchar+0x22>
    return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200009b8 	.word	0x200009b8

08001630 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09a      	sub	sp, #104	@ 0x68
 8001634:	af06      	add	r7, sp, #24
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 800163a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800163e:	2224      	movs	r2, #36	@ 0x24
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f007 fde4 	bl	8009210 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 8001648:	4969      	ldr	r1, [pc, #420]	@ (80017f0 <parse_cipsntptime_line+0x1c0>)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f007 fe76 	bl	800933c <strstr>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <parse_cipsntptime_line+0x2c>
        return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e0c5      	b.n	80017e8 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 800165c:	f107 0120 	add.w	r1, r7, #32
 8001660:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	9304      	str	r3, [sp, #16]
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	9303      	str	r3, [sp, #12]
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	460b      	mov	r3, r1
 8001684:	495b      	ldr	r1, [pc, #364]	@ (80017f4 <parse_cipsntptime_line+0x1c4>)
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f007 fca2 	bl	8008fd0 <siscanf>
 800168c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 800168e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001690:	2b07      	cmp	r3, #7
 8001692:	f040 80a7 	bne.w	80017e4 <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	4957      	ldr	r1, [pc, #348]	@ (80017f8 <parse_cipsntptime_line+0x1c8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fd9f 	bl	80001e0 <strcmp>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <parse_cipsntptime_line+0x7e>
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ac:	e082      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 80016ae:	f107 0320 	add.w	r3, r7, #32
 80016b2:	4952      	ldr	r1, [pc, #328]	@ (80017fc <parse_cipsntptime_line+0x1cc>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fd93 	bl	80001e0 <strcmp>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <parse_cipsntptime_line+0x96>
 80016c0:	2301      	movs	r3, #1
 80016c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016c4:	e076      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	494d      	ldr	r1, [pc, #308]	@ (8001800 <parse_cipsntptime_line+0x1d0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fd87 	bl	80001e0 <strcmp>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <parse_cipsntptime_line+0xae>
 80016d8:	2302      	movs	r3, #2
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016dc:	e06a      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	4948      	ldr	r1, [pc, #288]	@ (8001804 <parse_cipsntptime_line+0x1d4>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fd7b 	bl	80001e0 <strcmp>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <parse_cipsntptime_line+0xc6>
 80016f0:	2303      	movs	r3, #3
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016f4:	e05e      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	4943      	ldr	r1, [pc, #268]	@ (8001808 <parse_cipsntptime_line+0x1d8>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd6f 	bl	80001e0 <strcmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <parse_cipsntptime_line+0xde>
 8001708:	2304      	movs	r3, #4
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800170c:	e052      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	493e      	ldr	r1, [pc, #248]	@ (800180c <parse_cipsntptime_line+0x1dc>)
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe fd63 	bl	80001e0 <strcmp>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <parse_cipsntptime_line+0xf6>
 8001720:	2305      	movs	r3, #5
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001724:	e046      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	4939      	ldr	r1, [pc, #228]	@ (8001810 <parse_cipsntptime_line+0x1e0>)
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd57 	bl	80001e0 <strcmp>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <parse_cipsntptime_line+0x10e>
 8001738:	2306      	movs	r3, #6
 800173a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800173c:	e03a      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	4934      	ldr	r1, [pc, #208]	@ (8001814 <parse_cipsntptime_line+0x1e4>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fd4b 	bl	80001e0 <strcmp>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <parse_cipsntptime_line+0x126>
 8001750:	2307      	movs	r3, #7
 8001752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001754:	e02e      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	492f      	ldr	r1, [pc, #188]	@ (8001818 <parse_cipsntptime_line+0x1e8>)
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fd3f 	bl	80001e0 <strcmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <parse_cipsntptime_line+0x13e>
 8001768:	2308      	movs	r3, #8
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800176c:	e022      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	492a      	ldr	r1, [pc, #168]	@ (800181c <parse_cipsntptime_line+0x1ec>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fd33 	bl	80001e0 <strcmp>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <parse_cipsntptime_line+0x156>
 8001780:	2309      	movs	r3, #9
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001784:	e016      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	4925      	ldr	r1, [pc, #148]	@ (8001820 <parse_cipsntptime_line+0x1f0>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fd27 	bl	80001e0 <strcmp>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <parse_cipsntptime_line+0x16e>
 8001798:	230a      	movs	r3, #10
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800179c:	e00a      	b.n	80017b4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	4920      	ldr	r1, [pc, #128]	@ (8001824 <parse_cipsntptime_line+0x1f4>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fd1b 	bl	80001e0 <strcmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <parse_cipsntptime_line+0x184>
 80017b0:	230b      	movs	r3, #11
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80017ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 80017cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d0:	4618      	mov	r0, r3
 80017d2:	f007 ffb3 	bl	800973c <mktime>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e001      	b.n	80017e8 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3750      	adds	r7, #80	@ 0x50
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	0800c120 	.word	0x0800c120
 80017f4:	0800c130 	.word	0x0800c130
 80017f8:	0800c154 	.word	0x0800c154
 80017fc:	0800c158 	.word	0x0800c158
 8001800:	0800c15c 	.word	0x0800c15c
 8001804:	0800c160 	.word	0x0800c160
 8001808:	0800c164 	.word	0x0800c164
 800180c:	0800c168 	.word	0x0800c168
 8001810:	0800c16c 	.word	0x0800c16c
 8001814:	0800c170 	.word	0x0800c170
 8001818:	0800c174 	.word	0x0800c174
 800181c:	0800c178 	.word	0x0800c178
 8001820:	0800c17c 	.word	0x0800c17c
 8001824:	0800c180 	.word	0x0800c180

08001828 <esp_ntp_config>:

int esp_ntp_config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a0      	sub	sp, #128	@ 0x80
 800182c:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 800182e:	463b      	mov	r3, r7
 8001830:	4a0f      	ldr	r2, [pc, #60]	@ (8001870 <esp_ntp_config+0x48>)
 8001832:	4910      	ldr	r1, [pc, #64]	@ (8001874 <esp_ntp_config+0x4c>)
 8001834:	4618      	mov	r0, r3
 8001836:	f007 fba9 	bl	8008f8c <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fcd9 	bl	80001f4 <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	4639      	mov	r1, r7
 8001848:	2364      	movs	r3, #100	@ 0x64
 800184a:	480b      	ldr	r0, [pc, #44]	@ (8001878 <esp_ntp_config+0x50>)
 800184c:	f002 ff18 	bl	8004680 <HAL_UART_Transmit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <esp_ntp_config+0x34>
        return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e004      	b.n	8001866 <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 800185c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001860:	f005 fb88 	bl	8006f74 <vTaskDelay>
    return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3780      	adds	r7, #128	@ 0x80
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	0800c184 	.word	0x0800c184
 8001874:	0800c198 	.word	0x0800c198
 8001878:	20000a00 	.word	0x20000a00

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001886:	f000 fd39 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188a:	f000 f885 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188e:	f000 fa1d 	bl	8001ccc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001892:	f000 f9c7 	bl	8001c24 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001896:	f000 f9ef 	bl	8001c78 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800189a:	f000 f975 	bl	8001b88 <MX_TIM3_Init>
  MX_RTC_Init();
 800189e:	f000 f8e7 	bl	8001a70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 80018a2:	482a      	ldr	r0, [pc, #168]	@ (800194c <main+0xd0>)
 80018a4:	f007 fb34 	bl	8008f10 <puts>
  ret |= drv_uart_init();
 80018a8:	f7ff fe9c 	bl	80015e4 <drv_uart_init>
 80018ac:	4602      	mov	r2, r0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 80018b4:	f7ff fd32 	bl	800131c <drv_esp_init>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d004      	beq.n	80018d0 <main+0x54>
  {
	  printf("Esp response error\r\n");
 80018c6:	4822      	ldr	r0, [pc, #136]	@ (8001950 <main+0xd4>)
 80018c8:	f007 fb22 	bl	8008f10 <puts>
	  Error_Handler();
 80018cc:	f000 faa8 	bl	8001e20 <Error_Handler>
  }

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80018d0:	4820      	ldr	r0, [pc, #128]	@ (8001954 <main+0xd8>)
 80018d2:	f002 faa1 	bl	8003e18 <HAL_TIM_Base_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <main+0x64>
  {
	  Error_Handler();
 80018dc:	f000 faa0 	bl	8001e20 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018e0:	f003 ff1e 	bl	8005720 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 80018e4:	481c      	ldr	r0, [pc, #112]	@ (8001958 <main+0xdc>)
 80018e6:	f004 f812 	bl	800590e <osMutexNew>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <main+0xe0>)
 80018ee:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 80018f0:	481b      	ldr	r0, [pc, #108]	@ (8001960 <main+0xe4>)
 80018f2:	f004 f80c 	bl	800590e <osMutexNew>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <main+0xe8>)
 80018fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 80018fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <main+0xec>)
 80018fe:	2100      	movs	r1, #0
 8001900:	481a      	ldr	r0, [pc, #104]	@ (800196c <main+0xf0>)
 8001902:	f003 ff57 	bl	80057b4 <osThreadNew>
 8001906:	4603      	mov	r3, r0
 8001908:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <main+0xf4>)
 800190a:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <main+0xf8>)
 800190e:	2100      	movs	r1, #0
 8001910:	4819      	ldr	r0, [pc, #100]	@ (8001978 <main+0xfc>)
 8001912:	f003 ff4f 	bl	80057b4 <osThreadNew>
 8001916:	4603      	mov	r3, r0
 8001918:	4a18      	ldr	r2, [pc, #96]	@ (800197c <main+0x100>)
 800191a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 800191c:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <main+0x104>)
 800191e:	2100      	movs	r1, #0
 8001920:	4818      	ldr	r0, [pc, #96]	@ (8001984 <main+0x108>)
 8001922:	f003 ff47 	bl	80057b4 <osThreadNew>
 8001926:	4603      	mov	r3, r0
 8001928:	4a17      	ldr	r2, [pc, #92]	@ (8001988 <main+0x10c>)
 800192a:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 800192c:	4a17      	ldr	r2, [pc, #92]	@ (800198c <main+0x110>)
 800192e:	2100      	movs	r1, #0
 8001930:	4817      	ldr	r0, [pc, #92]	@ (8001990 <main+0x114>)
 8001932:	f003 ff3f 	bl	80057b4 <osThreadNew>
 8001936:	4603      	mov	r3, r0
 8001938:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <main+0x118>)
 800193a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800193c:	f003 ff14 	bl	8005768 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8001940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001944:	f003 ffc8 	bl	80058d8 <osDelay>
 8001948:	e7fa      	b.n	8001940 <main+0xc4>
 800194a:	bf00      	nop
 800194c:	0800c258 	.word	0x0800c258
 8001950:	0800c270 	.word	0x0800c270
 8001954:	20000970 	.word	0x20000970
 8001958:	0800c338 	.word	0x0800c338
 800195c:	20000a58 	.word	0x20000a58
 8001960:	0800c348 	.word	0x0800c348
 8001964:	20000a5c 	.word	0x20000a5c
 8001968:	0800c2a8 	.word	0x0800c2a8
 800196c:	0800067d 	.word	0x0800067d
 8001970:	20000a48 	.word	0x20000a48
 8001974:	0800c2cc 	.word	0x0800c2cc
 8001978:	08000ac5 	.word	0x08000ac5
 800197c:	20000a4c 	.word	0x20000a4c
 8001980:	0800c2f0 	.word	0x0800c2f0
 8001984:	08000d59 	.word	0x08000d59
 8001988:	20000a50 	.word	0x20000a50
 800198c:	0800c314 	.word	0x0800c314
 8001990:	08000a69 	.word	0x08000a69
 8001994:	20000a54 	.word	0x20000a54

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	@ 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2230      	movs	r2, #48	@ 0x30
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f007 fc32 	bl	8009210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <SystemClock_Config+0xd0>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <SystemClock_Config+0xd0>)
 80019c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <SystemClock_Config+0xd0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <SystemClock_Config+0xd4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a22      	ldr	r2, [pc, #136]	@ (8001a6c <SystemClock_Config+0xd4>)
 80019e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <SystemClock_Config+0xd4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019f4:	2309      	movs	r3, #9
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019fe:	2301      	movs	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a16:	2304      	movs	r3, #4
 8001a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 f842 	bl	8002aac <HAL_RCC_OscConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a2e:	f000 f9f7 	bl	8001e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a32:	230f      	movs	r3, #15
 8001a34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 faa4 	bl	8002f9c <HAL_RCC_ClockConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a5a:	f000 f9e1 	bl	8001e20 <Error_Handler>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3750      	adds	r7, #80	@ 0x50
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40007000 	.word	0x40007000

08001a70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b090      	sub	sp, #64	@ 0x40
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2228      	movs	r2, #40	@ 0x28
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fbbd 	bl	8009210 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a96:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001a98:	4a3a      	ldr	r2, [pc, #232]	@ (8001b84 <MX_RTC_Init+0x114>)
 8001a9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001aa4:	227f      	movs	r2, #127	@ 0x7f
 8001aa6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001aaa:	22ff      	movs	r2, #255	@ 0xff
 8001aac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aba:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ac0:	482f      	ldr	r0, [pc, #188]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001ac2:	f001 fd7b 	bl	80035bc <HAL_RTC_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001acc:	f000 f9a8 	bl	8001e20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aee:	2201      	movs	r2, #1
 8001af0:	4619      	mov	r1, r3
 8001af2:	4823      	ldr	r0, [pc, #140]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001af4:	f001 fde3 	bl	80036be <HAL_RTC_SetTime>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001afe:	f000 f98f 	bl	8001e20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4619      	mov	r1, r3
 8001b22:	4817      	ldr	r0, [pc, #92]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001b24:	f001 fe65 	bl	80037f2 <HAL_RTC_SetDate>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001b2e:	f000 f977 	bl	8001e20 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	2201      	movs	r2, #1
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_RTC_Init+0x110>)
 8001b6a:	f001 fec7 	bl	80038fc <HAL_RTC_SetAlarm_IT>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001b74:	f000 f954 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3740      	adds	r7, #64	@ 0x40
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000950 	.word	0x20000950
 8001b84:	40002800 	.word	0x40002800

08001b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <MX_TIM3_Init+0x98>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001bac:	2253      	movs	r2, #83	@ 0x53
 8001bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001bb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bca:	4814      	ldr	r0, [pc, #80]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001bcc:	f002 f8d4 	bl	8003d78 <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bd6:	f000 f923 	bl	8001e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001be8:	f002 fa68 	bl	80040bc <HAL_TIM_ConfigClockSource>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bf2:	f000 f915 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM3_Init+0x94>)
 8001c04:	f002 fc6a 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c0e:	f000 f907 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000970 	.word	0x20000970
 8001c20:	40000400 	.word	0x40000400

08001c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <MX_USART2_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c5c:	f002 fcc0 	bl	80045e0 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f000 f8db 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200009b8 	.word	0x200009b8
 8001c74:	40004400 	.word	0x40004400

08001c78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART6_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c84:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001c88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001cb0:	f002 fc96 	bl	80045e0 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f8b1 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000a00 	.word	0x20000a00
 8001cc8:	40011400 	.word	0x40011400

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b37      	ldr	r3, [pc, #220]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a36      	ldr	r2, [pc, #216]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a28      	ldr	r2, [pc, #160]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <MX_GPIO_Init+0xf8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2120      	movs	r1, #32
 8001d56:	481c      	ldr	r0, [pc, #112]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d58:	f000 fe8e 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2110      	movs	r1, #16
 8001d60:	481a      	ldr	r0, [pc, #104]	@ (8001dcc <MX_GPIO_Init+0x100>)
 8001d62:	f000 fe89 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4814      	ldr	r0, [pc, #80]	@ (8001dd0 <MX_GPIO_Init+0x104>)
 8001d7e:	f000 fcf7 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d82:	2320      	movs	r3, #32
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d9a:	f000 fce9 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 8001d9e:	2310      	movs	r3, #16
 8001da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <MX_GPIO_Init+0x100>)
 8001db6:	f000 fcdb 	bl	8002770 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	@ 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(FAN_GPIO_Port, pin, GPIO_PIN_RESET);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001de4:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dee:	db0a      	blt.n	8001e06 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dfe:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
	}
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000a64 	.word	0x20000a64
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000a60 	.word	0x20000a60

08001e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <Error_Handler+0x8>

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_MspInit+0x54>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_MspInit+0x54>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <HAL_MspInit+0x54>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_MspInit+0x54>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <HAL_MspInit+0x54>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_MspInit+0x54>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	f06f 0001 	mvn.w	r0, #1
 8001e72:	f000 fbb4 	bl	80025de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_RTC_MspInit+0x60>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d119      	bne.n	8001edc <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 fa90 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ec2:	f7ff ffad 	bl	8001e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_RTC_MspInit+0x64>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2105      	movs	r1, #5
 8001ed0:	2029      	movs	r0, #41	@ 0x29
 8001ed2:	f000 fb84 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ed6:	2029      	movs	r0, #41	@ 0x29
 8001ed8:	f000 fb9d 	bl	8002616 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40002800 	.word	0x40002800
 8001ee8:	42470e3c 	.word	0x42470e3c

08001eec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d115      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_TIM_Base_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <HAL_TIM_Base_MspInit+0x4c>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_TIM_Base_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f000 fb5d 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f24:	201d      	movs	r0, #29
 8001f26:	f000 fb76 	bl	8002616 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40023800 	.word	0x40023800

08001f3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	@ 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	@ (8002044 <HAL_UART_MspInit+0x108>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d134      	bne.n	8001fc8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	4a38      	ldr	r2, [pc, #224]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6e:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a31      	ldr	r2, [pc, #196]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f96:	230c      	movs	r3, #12
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4826      	ldr	r0, [pc, #152]	@ (800204c <HAL_UART_MspInit+0x110>)
 8001fb2:	f000 fbdd 	bl	8002770 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	2026      	movs	r0, #38	@ 0x26
 8001fbc:	f000 fb0f 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc0:	2026      	movs	r0, #38	@ 0x26
 8001fc2:	f000 fb28 	bl	8002616 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fc6:	e038      	b.n	800203a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a20      	ldr	r2, [pc, #128]	@ (8002050 <HAL_UART_MspInit+0x114>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d133      	bne.n	800203a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a1b      	ldr	r2, [pc, #108]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_UART_MspInit+0x10c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800200a:	23c0      	movs	r3, #192	@ 0xc0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800201a:	2308      	movs	r3, #8
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	480b      	ldr	r0, [pc, #44]	@ (8002054 <HAL_UART_MspInit+0x118>)
 8002026:	f000 fba3 	bl	8002770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	2047      	movs	r0, #71	@ 0x47
 8002030:	f000 fad5 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002034:	2047      	movs	r0, #71	@ 0x47
 8002036:	f000 faee 	bl	8002616 <HAL_NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3730      	adds	r7, #48	@ 0x30
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40004400 	.word	0x40004400
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000
 8002050:	40011400 	.word	0x40011400
 8002054:	40020800 	.word	0x40020800

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <NMI_Handler+0x4>

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <MemManage_Handler+0x4>

08002070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <UsageFault_Handler+0x4>

08002080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002092:	f000 f985 	bl	80023a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002096:	f005 fc01 	bl	800789c <xTaskGetSchedulerState>
 800209a:	4603      	mov	r3, r0
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020a0:	f006 fafa 	bl	8008698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <TIM3_IRQHandler+0x10>)
 80020ae:	f001 ff15 	bl	8003edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000970 	.word	0x20000970

080020bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <USART2_IRQHandler+0x10>)
 80020c2:	f002 fb8d 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200009b8 	.word	0x200009b8

080020d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020d4:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <RTC_Alarm_IRQHandler+0x10>)
 80020d6:	f001 fd55 	bl	8003b84 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000950 	.word	0x20000950

080020e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020e8:	4802      	ldr	r0, [pc, #8]	@ (80020f4 <USART6_IRQHandler+0x10>)
 80020ea:	f002 fb79 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000a00 	.word	0x20000a00

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002112:	f007 fff9 	bl	800a108 <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
  return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit (int status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
  while (1) {}    /* Make sure we hang here */
 800213a:	bf00      	nop
 800213c:	e7fd      	b.n	800213a <_exit+0x12>

0800213e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e00a      	b.n	8002166 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002150:	f3af 8000 	nop.w
 8002154:	4601      	mov	r1, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	60ba      	str	r2, [r7, #8]
 800215c:	b2ca      	uxtb	r2, r1
 800215e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbf0      	blt.n	8002150 <_read+0x12>
  }

  return len;
 800216e:	687b      	ldr	r3, [r7, #4]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e009      	b.n	800219e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	60ba      	str	r2, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fa34 	bl	8001600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbf1      	blt.n	800218a <_write+0x12>
  }
  return len;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_close>:

int _close(int file)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021d8:	605a      	str	r2, [r3, #4]
  return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_isatty>:

int _isatty(int file)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	@ (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f007 ff5e 	bl	800a108 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	@ (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	@ (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20020000 	.word	0x20020000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000a6c 	.word	0x20000a6c
 8002280:	20005538 	.word	0x20005538

08002284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	@ (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ac:	f7ff ffea 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b0:	480c      	ldr	r0, [pc, #48]	@ (80022e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022b2:	490d      	ldr	r1, [pc, #52]	@ (80022e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022b4:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0a      	ldr	r2, [pc, #40]	@ (80022f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c8:	4c0a      	ldr	r4, [pc, #40]	@ (80022f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022d6:	f007 ff1d 	bl	800a114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff facf 	bl	800187c <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80022ec:	0800c798 	.word	0x0800c798
  ldr r2, =_sbss
 80022f0:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80022f4:	20005534 	.word	0x20005534

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	@ (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f94f 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fd7c 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f967 	bl	8002632 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f92f 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	@ (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000008 	.word	0x20000008
 8002398:	20000010 	.word	0x20000010
 800239c:	2000000c 	.word	0x2000000c

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000010 	.word	0x20000010
 80023c4:	20000a70 	.word	0x20000a70

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000a70 	.word	0x20000a70

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000010 	.word	0x20000010

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	@ (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff feb6 	bl	80023c8 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d008      	beq.n	800267c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2280      	movs	r2, #128	@ 0x80
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e052      	b.n	8002722 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0216 	bic.w	r2, r2, #22
 800268a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800269a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <HAL_DMA_Abort+0x62>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0208 	bic.w	r2, r2, #8
 80026ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026cc:	e013      	b.n	80026f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ce:	f7ff fe7b 	bl	80023c8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d90c      	bls.n	80026f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e015      	b.n	8002722 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e4      	bne.n	80026ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	223f      	movs	r2, #63	@ 0x3f
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d004      	beq.n	8002748 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e00c      	b.n	8002762 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2205      	movs	r2, #5
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	@ 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e159      	b.n	8002a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 8148 	bne.w	8002a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d005      	beq.n	80027c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d130      	bne.n	8002824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 0201 	and.w	r2, r3, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b03      	cmp	r3, #3
 800282e:	d017      	beq.n	8002860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d123      	bne.n	80028b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a2 	beq.w	8002a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b57      	ldr	r3, [pc, #348]	@ (8002a58 <HAL_GPIO_Init+0x2e8>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	4a56      	ldr	r2, [pc, #344]	@ (8002a58 <HAL_GPIO_Init+0x2e8>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002904:	6453      	str	r3, [r2, #68]	@ 0x44
 8002906:	4b54      	ldr	r3, [pc, #336]	@ (8002a58 <HAL_GPIO_Init+0x2e8>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002912:	4a52      	ldr	r2, [pc, #328]	@ (8002a5c <HAL_GPIO_Init+0x2ec>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a49      	ldr	r2, [pc, #292]	@ (8002a60 <HAL_GPIO_Init+0x2f0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x202>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a48      	ldr	r2, [pc, #288]	@ (8002a64 <HAL_GPIO_Init+0x2f4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x1fe>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a47      	ldr	r2, [pc, #284]	@ (8002a68 <HAL_GPIO_Init+0x2f8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x1fa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a46      	ldr	r2, [pc, #280]	@ (8002a6c <HAL_GPIO_Init+0x2fc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x1f6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a45      	ldr	r2, [pc, #276]	@ (8002a70 <HAL_GPIO_Init+0x300>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x1f2>
 800295e:	2304      	movs	r3, #4
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002962:	2307      	movs	r3, #7
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x204>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x204>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	@ (8002a5c <HAL_GPIO_Init+0x2ec>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a24      	ldr	r2, [pc, #144]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a34:	4a0f      	ldr	r2, [pc, #60]	@ (8002a74 <HAL_GPIO_Init+0x304>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f aea2 	bls.w	800278c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	@ 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e267      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d075      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002aca:	4b88      	ldr	r3, [pc, #544]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d00c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4b85      	ldr	r3, [pc, #532]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d112      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4b82      	ldr	r3, [pc, #520]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aee:	d10b      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4b7e      	ldr	r3, [pc, #504]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d157      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e242      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x74>
 8002b12:	4b76      	ldr	r3, [pc, #472]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a75      	ldr	r2, [pc, #468]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b70      	ldr	r3, [pc, #448]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b44:	4b69      	ldr	r3, [pc, #420]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a68      	ldr	r2, [pc, #416]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b66      	ldr	r3, [pc, #408]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a65      	ldr	r2, [pc, #404]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fc30 	bl	80023c8 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff fc2c 	bl	80023c8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e207      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fc1c 	bl	80023c8 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fc18 	bl	80023c8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1f3      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b51      	ldr	r3, [pc, #324]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b41      	ldr	r3, [pc, #260]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1c7      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4937      	ldr	r1, [pc, #220]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e03a      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <HAL_RCC_OscConfig+0x244>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7ff fbd1 	bl	80023c8 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7ff fbcd 	bl	80023c8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1a8      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b28      	ldr	r3, [pc, #160]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4925      	ldr	r1, [pc, #148]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b24      	ldr	r3, [pc, #144]	@ (8002cf0 <HAL_RCC_OscConfig+0x244>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7ff fbb0 	bl	80023c8 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7ff fbac 	bl	80023c8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e187      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d036      	beq.n	8002d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_RCC_OscConfig+0x248>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7ff fb90 	bl	80023c8 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cac:	f7ff fb8c 	bl	80023c8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e167      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_OscConfig+0x240>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x200>
 8002cca:	e01b      	b.n	8002d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCC_OscConfig+0x248>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7ff fb79 	bl	80023c8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	e00e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cda:	f7ff fb75 	bl	80023c8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d907      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e150      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	42470000 	.word	0x42470000
 8002cf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ea      	bne.n	8002cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8097 	beq.w	8002e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b81      	ldr	r3, [pc, #516]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b7d      	ldr	r3, [pc, #500]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b7a      	ldr	r3, [pc, #488]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b77      	ldr	r3, [pc, #476]	@ (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b74      	ldr	r3, [pc, #464]	@ (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a73      	ldr	r2, [pc, #460]	@ (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7ff fb35 	bl	80023c8 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7ff fb31 	bl	80023c8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e10c      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b6a      	ldr	r3, [pc, #424]	@ (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2ea>
 8002d88:	4b64      	ldr	r3, [pc, #400]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8c:	4a63      	ldr	r2, [pc, #396]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d94:	e01c      	b.n	8002dd0 <HAL_RCC_OscConfig+0x324>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x30c>
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	4a5e      	ldr	r2, [pc, #376]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002daa:	4b5c      	ldr	r3, [pc, #368]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a5b      	ldr	r2, [pc, #364]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x324>
 8002db8:	4b58      	ldr	r3, [pc, #352]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	4a57      	ldr	r2, [pc, #348]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc4:	4b55      	ldr	r3, [pc, #340]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc8:	4a54      	ldr	r2, [pc, #336]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7ff faf6 	bl	80023c8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7ff faf2 	bl	80023c8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0cb      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0ee      	beq.n	8002de0 <HAL_RCC_OscConfig+0x334>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7ff fae0 	bl	80023c8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7ff fadc 	bl	80023c8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0b5      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e22:	4b3e      	ldr	r3, [pc, #248]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ee      	bne.n	8002e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b39      	ldr	r3, [pc, #228]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	4a38      	ldr	r2, [pc, #224]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a1 	beq.w	8002f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4a:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d05c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d141      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <HAL_RCC_OscConfig+0x478>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fab0 	bl	80023c8 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff faac 	bl	80023c8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e087      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b27      	ldr	r3, [pc, #156]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	019b      	lsls	r3, r3, #6
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	491b      	ldr	r1, [pc, #108]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x478>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7ff fa85 	bl	80023c8 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7ff fa81 	bl	80023c8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e05c      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x416>
 8002ee0:	e054      	b.n	8002f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <HAL_RCC_OscConfig+0x478>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7ff fa6e 	bl	80023c8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7ff fa6a 	bl	80023c8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e045      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x444>
 8002f0e:	e03d      	b.n	8002f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e038      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000
 8002f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_OscConfig+0x4ec>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d028      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d121      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d11a      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d111      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	3b01      	subs	r3, #1
 8002f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800

08002f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cc      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b68      	ldr	r3, [pc, #416]	@ (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d90c      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b65      	ldr	r3, [pc, #404]	@ (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d044      	beq.n	80030bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d119      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	2b03      	cmp	r3, #3
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b3f      	ldr	r3, [pc, #252]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e067      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b37      	ldr	r3, [pc, #220]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4934      	ldr	r1, [pc, #208]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308c:	f7ff f99c 	bl	80023c8 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7ff f998 	bl	80023c8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e04f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d20c      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b22      	ldr	r3, [pc, #136]	@ (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490a      	ldr	r1, [pc, #40]	@ (800315c <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff f8fc 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00
 8003158:	40023800 	.word	0x40023800
 800315c:	0800c358 	.word	0x0800c358
 8003160:	20000008 	.word	0x20000008
 8003164:	2000000c 	.word	0x2000000c

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b094      	sub	sp, #80	@ 0x50
 800316e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003180:	4b79      	ldr	r3, [pc, #484]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d00d      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x40>
 800318c:	2b08      	cmp	r3, #8
 800318e:	f200 80e1 	bhi.w	8003354 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x34>
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800319a:	e0db      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b73      	ldr	r3, [pc, #460]	@ (800336c <HAL_RCC_GetSysClockFreq+0x204>)
 800319e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031a0:	e0db      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a2:	4b73      	ldr	r3, [pc, #460]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x208>)
 80031a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031a6:	e0d8      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b6a      	ldr	r3, [pc, #424]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	2200      	movs	r2, #0
 80031c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031da:	4622      	mov	r2, r4
 80031dc:	462b      	mov	r3, r5
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	0159      	lsls	r1, r3, #5
 80031e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ec:	0150      	lsls	r0, r2, #5
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4621      	mov	r1, r4
 80031f4:	1a51      	subs	r1, r2, r1
 80031f6:	6139      	str	r1, [r7, #16]
 80031f8:	4629      	mov	r1, r5
 80031fa:	eb63 0301 	sbc.w	r3, r3, r1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800320c:	4659      	mov	r1, fp
 800320e:	018b      	lsls	r3, r1, #6
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003216:	4651      	mov	r1, sl
 8003218:	018a      	lsls	r2, r1, #6
 800321a:	4651      	mov	r1, sl
 800321c:	ebb2 0801 	subs.w	r8, r2, r1
 8003220:	4659      	mov	r1, fp
 8003222:	eb63 0901 	sbc.w	r9, r3, r1
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323a:	4690      	mov	r8, r2
 800323c:	4699      	mov	r9, r3
 800323e:	4623      	mov	r3, r4
 8003240:	eb18 0303 	adds.w	r3, r8, r3
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	462b      	mov	r3, r5
 8003248:	eb49 0303 	adc.w	r3, r9, r3
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800325a:	4629      	mov	r1, r5
 800325c:	024b      	lsls	r3, r1, #9
 800325e:	4621      	mov	r1, r4
 8003260:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003264:	4621      	mov	r1, r4
 8003266:	024a      	lsls	r2, r1, #9
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326e:	2200      	movs	r2, #0
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003278:	f7fd f86a 	bl	8000350 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003284:	e058      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b38      	ldr	r3, [pc, #224]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	2200      	movs	r2, #0
 800328e:	4618      	mov	r0, r3
 8003290:	4611      	mov	r1, r2
 8003292:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003296:	623b      	str	r3, [r7, #32]
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
 800329c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032a0:	4642      	mov	r2, r8
 80032a2:	464b      	mov	r3, r9
 80032a4:	f04f 0000 	mov.w	r0, #0
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	0159      	lsls	r1, r3, #5
 80032ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b2:	0150      	lsls	r0, r2, #5
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4641      	mov	r1, r8
 80032ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80032be:	4649      	mov	r1, r9
 80032c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032d8:	ebb2 040a 	subs.w	r4, r2, sl
 80032dc:	eb63 050b 	sbc.w	r5, r3, fp
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	00eb      	lsls	r3, r5, #3
 80032ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ee:	00e2      	lsls	r2, r4, #3
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4643      	mov	r3, r8
 80032f6:	18e3      	adds	r3, r4, r3
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	464b      	mov	r3, r9
 80032fc:	eb45 0303 	adc.w	r3, r5, r3
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800330e:	4629      	mov	r1, r5
 8003310:	028b      	lsls	r3, r1, #10
 8003312:	4621      	mov	r1, r4
 8003314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003318:	4621      	mov	r1, r4
 800331a:	028a      	lsls	r2, r1, #10
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003322:	2200      	movs	r2, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	61fa      	str	r2, [r7, #28]
 8003328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332c:	f7fd f810 	bl	8000350 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	3301      	adds	r3, #1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003348:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800334a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCC_GetSysClockFreq+0x204>)
 8003356:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800335c:	4618      	mov	r0, r3
 800335e:	3750      	adds	r7, #80	@ 0x50
 8003360:	46bd      	mov	sp, r7
 8003362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	00f42400 	.word	0x00f42400
 8003370:	007a1200 	.word	0x007a1200

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <HAL_RCC_GetHCLKFreq+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000008 	.word	0x20000008

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003390:	f7ff fff0 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	@ (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	0800c368 	.word	0x0800c368

080033b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b8:	f7ff ffdc 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0b5b      	lsrs	r3, r3, #13
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	@ (80033d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	0800c368 	.word	0x0800c368

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003400:	2b00      	cmp	r3, #0
 8003402:	d038      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003404:	4b68      	ldr	r3, [pc, #416]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800340a:	f7fe ffdd 	bl	80023c8 <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003412:	f7fe ffd9 	bl	80023c8 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0bd      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003424:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	495a      	ldr	r1, [pc, #360]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800344a:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003450:	f7fe ffba 	bl	80023c8 <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003458:	f7fe ffb6 	bl	80023c8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e09a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800346a:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8083 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	4b48      	ldr	r3, [pc, #288]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	4a47      	ldr	r2, [pc, #284]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003492:	6413      	str	r3, [r2, #64]	@ 0x40
 8003494:	4b45      	ldr	r3, [pc, #276]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034a0:	4b43      	ldr	r3, [pc, #268]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a42      	ldr	r2, [pc, #264]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fe ff8c 	bl	80023c8 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fe ff88 	bl	80023c8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e06c      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80034c6:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d2:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034da:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02f      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d028      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f0:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034fa:	4b2e      	ldr	r3, [pc, #184]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003500:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003506:	4a29      	ldr	r2, [pc, #164]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800350c:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d114      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe ff56 	bl	80023c8 <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe ff52 	bl	80023c8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e034      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800354e:	d10d      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003550:	4b16      	ldr	r3, [pc, #88]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003564:	4911      	ldr	r1, [pc, #68]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e005      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003576:	6093      	str	r3, [r2, #8]
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	4909      	ldr	r1, [pc, #36]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7d1a      	ldrb	r2, [r3, #20]
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800359c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	42470068 	.word	0x42470068
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470e40 	.word	0x42470e40
 80035b8:	424711e0 	.word	0x424711e0

080035bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e073      	b.n	80036b6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7f5b      	ldrb	r3, [r3, #29]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fc50 	bl	8001e84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d055      	beq.n	80036a4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	22ca      	movs	r2, #202	@ 0xca
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2253      	movs	r2, #83	@ 0x53
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb31 	bl	8003c70 <RTC_EnterInitMode>
 800360e:	4603      	mov	r3, r0
 8003610:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d12c      	bne.n	8003672 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800362a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6919      	ldr	r1, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	041a      	lsls	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb38 	bl	8003cde <RTC_ExitInitMode>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d110      	bne.n	800369a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	22ff      	movs	r2, #255	@ 0xff
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80036a2:	e001      	b.n	80036a8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036be:	b590      	push	{r4, r7, lr}
 80036c0:	b087      	sub	sp, #28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	7f1b      	ldrb	r3, [r3, #28]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_RTC_SetTime+0x1c>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e087      	b.n	80037ea <HAL_RTC_SetTime+0x12c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2202      	movs	r2, #2
 80036e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d126      	bne.n	800373a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2200      	movs	r2, #0
 80036fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fb0f 	bl	8003d28 <RTC_ByteToBcd2>
 800370a:	4603      	mov	r3, r0
 800370c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb08 	bl	8003d28 <RTC_ByteToBcd2>
 8003718:	4603      	mov	r3, r0
 800371a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800371c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	789b      	ldrb	r3, [r3, #2]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fb00 	bl	8003d28 <RTC_ByteToBcd2>
 8003728:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800372a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	78db      	ldrb	r3, [r3, #3]
 8003732:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e018      	b.n	800376c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2200      	movs	r2, #0
 800374c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800375a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003760:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	78db      	ldrb	r3, [r3, #3]
 8003766:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	22ca      	movs	r2, #202	@ 0xca
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2253      	movs	r2, #83	@ 0x53
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 fa77 	bl	8003c70 <RTC_EnterInitMode>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d120      	bne.n	80037ce <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003796:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800379a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fa8a 	bl	8003cde <RTC_ExitInitMode>
 80037ca:	4603      	mov	r3, r0
 80037cc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	22ff      	movs	r2, #255	@ 0xff
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]

  return status;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037f2:	b590      	push	{r4, r7, lr}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	7f1b      	ldrb	r3, [r3, #28]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_RTC_SetDate+0x1c>
 800380a:	2302      	movs	r3, #2
 800380c:	e071      	b.n	80038f2 <HAL_RTC_SetDate+0x100>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2202      	movs	r2, #2
 8003818:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10e      	bne.n	800383e <HAL_RTC_SetDate+0x4c>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	785b      	ldrb	r3, [r3, #1]
 8003830:	f023 0310 	bic.w	r3, r3, #16
 8003834:	b2db      	uxtb	r3, r3
 8003836:	330a      	adds	r3, #10
 8003838:	b2da      	uxtb	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d11c      	bne.n	800387e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fa6d 	bl	8003d28 <RTC_ByteToBcd2>
 800384e:	4603      	mov	r3, r0
 8003850:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fa66 	bl	8003d28 <RTC_ByteToBcd2>
 800385c:	4603      	mov	r3, r0
 800385e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003860:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	789b      	ldrb	r3, [r3, #2]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fa5e 	bl	8003d28 <RTC_ByteToBcd2>
 800386c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800386e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e00e      	b.n	800389c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	78db      	ldrb	r3, [r3, #3]
 8003882:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800388a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003890:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	22ca      	movs	r2, #202	@ 0xca
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2253      	movs	r2, #83	@ 0x53
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f9df 	bl	8003c70 <RTC_EnterInitMode>
 80038b2:	4603      	mov	r3, r0
 80038b4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80038ca:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fa06 	bl	8003cde <RTC_ExitInitMode>
 80038d2:	4603      	mov	r3, r0
 80038d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	22ff      	movs	r2, #255	@ 0xff
 80038e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]

  return status;
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
	...

080038fc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b089      	sub	sp, #36	@ 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003908:	4b9b      	ldr	r3, [pc, #620]	@ (8003b78 <HAL_RTC_SetAlarm_IT+0x27c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a9b      	ldr	r2, [pc, #620]	@ (8003b7c <HAL_RTC_SetAlarm_IT+0x280>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0adb      	lsrs	r3, r3, #11
 8003914:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	7f1b      	ldrb	r3, [r3, #28]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_RTC_SetAlarm_IT+0x36>
 800392e:	2302      	movs	r3, #2
 8003930:	e11e      	b.n	8003b70 <HAL_RTC_SetAlarm_IT+0x274>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2202      	movs	r2, #2
 800393c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d137      	bne.n	80039b4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2200      	movs	r2, #0
 8003956:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f9e3 	bl	8003d28 <RTC_ByteToBcd2>
 8003962:	4603      	mov	r3, r0
 8003964:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f9dc 	bl	8003d28 <RTC_ByteToBcd2>
 8003970:	4603      	mov	r3, r0
 8003972:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003974:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	789b      	ldrb	r3, [r3, #2]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f9d4 	bl	8003d28 <RTC_ByteToBcd2>
 8003980:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003982:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	78db      	ldrb	r3, [r3, #3]
 800398a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800398c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f9c6 	bl	8003d28 <RTC_ByteToBcd2>
 800399c:	4603      	mov	r3, r0
 800399e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80039a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80039a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e023      	b.n	80039fc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	785b      	ldrb	r3, [r3, #1]
 80039d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80039d4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80039da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	78db      	ldrb	r3, [r3, #3]
 80039e0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80039e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80039ec:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80039f2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	22ca      	movs	r2, #202	@ 0xca
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2253      	movs	r2, #83	@ 0x53
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a20:	d142      	bne.n	8003aa8 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a30:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003a42:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	22ff      	movs	r2, #255	@ 0xff
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e083      	b.n	8003b70 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0e6      	beq.n	8003a44 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a94:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	e04c      	b.n	8003b42 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ab6:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003ac8:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003aca:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_RTC_SetAlarm_IT+0x280>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	0adb      	lsrs	r3, r3, #11
 8003ad6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	22ff      	movs	r2, #255	@ 0xff
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2203      	movs	r2, #3
 8003af8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e035      	b.n	8003b70 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0e6      	beq.n	8003ae0 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b30:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b40:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003b42:	4b0f      	ldr	r3, [pc, #60]	@ (8003b80 <HAL_RTC_SetAlarm_IT+0x284>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <HAL_RTC_SetAlarm_IT+0x284>)
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b4c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RTC_SetAlarm_IT+0x284>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a0b      	ldr	r2, [pc, #44]	@ (8003b80 <HAL_RTC_SetAlarm_IT+0x284>)
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b58:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	22ff      	movs	r2, #255	@ 0xff
 8003b60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3724      	adds	r7, #36	@ 0x24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}
 8003b78:	20000008 	.word	0x20000008
 8003b7c:	10624dd3 	.word	0x10624dd3
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c0c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003b8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b92:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003bc0:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f824 	bl	8003c10 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d012      	beq.n	8003bfc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003bf4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8b4 	bl	8003d64 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	775a      	strb	r2, [r3, #29]
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40013c00 	.word	0x40013c00

08003c10 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0d      	ldr	r2, [pc, #52]	@ (8003c6c <HAL_RTC_WaitForSynchro+0x48>)
 8003c36:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c38:	f7fe fbc6 	bl	80023c8 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c3e:	e009      	b.n	8003c54 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c40:	f7fe fbc2 	bl	80023c8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c4e:	d901      	bls.n	8003c54 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e007      	b.n	8003c64 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ee      	beq.n	8003c40 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	00013f5f 	.word	0x00013f5f

08003c70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d122      	bne.n	8003cd4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9e:	f7fe fb93 	bl	80023c8 <HAL_GetTick>
 8003ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ca4:	e00c      	b.n	8003cc0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ca6:	f7fe fb8f 	bl	80023c8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cb4:	d904      	bls.n	8003cc0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <RTC_EnterInitMode+0x64>
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d1e8      	bne.n	8003ca6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cf8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff8b 	bl	8003c24 <HAL_RTC_WaitForSynchro>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003d36:	e005      	b.n	8003d44 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	3b0a      	subs	r3, #10
 8003d42:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b09      	cmp	r3, #9
 8003d48:	d8f6      	bhi.n	8003d38 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b2db      	uxtb	r3, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e041      	b.n	8003e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe f8a4 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fa70 	bl	800429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e044      	b.n	8003eba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d018      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_TIM_Base_Start_IT+0xb4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	@ (8003ed0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x6c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d010      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	e007      	b.n	8003eb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40014000 	.word	0x40014000

08003edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d020      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01b      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0202 	mvn.w	r2, #2
 8003f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f999 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f98b 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f99c 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d020      	beq.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0204 	mvn.w	r2, #4
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f973 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f965 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f976 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d020      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0208 	mvn.w	r2, #8
 8003fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2204      	movs	r2, #4
 8003fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f94d 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f93f 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f950 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d020      	beq.n	8004024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01b      	beq.n	8004024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0210 	mvn.w	r2, #16
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f927 	bl	800425e <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f919 	bl	800424a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f92a 	bl	8004272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0201 	mvn.w	r2, #1
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fec6 	bl	8001dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fab0 	bl	80045cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8fb 	bl	8004286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0220 	mvn.w	r2, #32
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa82 	bl	80045b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_ConfigClockSource+0x1c>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0b4      	b.n	8004242 <HAL_TIM_ConfigClockSource+0x186>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004110:	d03e      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0xd4>
 8004112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004116:	f200 8087 	bhi.w	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 800411a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411e:	f000 8086 	beq.w	800422e <HAL_TIM_ConfigClockSource+0x172>
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004126:	d87f      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b70      	cmp	r3, #112	@ 0x70
 800412a:	d01a      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0xa6>
 800412c:	2b70      	cmp	r3, #112	@ 0x70
 800412e:	d87b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b60      	cmp	r3, #96	@ 0x60
 8004132:	d050      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004134:	2b60      	cmp	r3, #96	@ 0x60
 8004136:	d877      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b50      	cmp	r3, #80	@ 0x50
 800413a:	d03c      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0xfa>
 800413c:	2b50      	cmp	r3, #80	@ 0x50
 800413e:	d873      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d058      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d86f      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b30      	cmp	r3, #48	@ 0x30
 800414a:	d064      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 800414c:	2b30      	cmp	r3, #48	@ 0x30
 800414e:	d86b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b20      	cmp	r3, #32
 8004152:	d060      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d867      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d05c      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b10      	cmp	r3, #16
 800415e:	d05a      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x15a>
 8004160:	e062      	b.n	8004228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	f000 f993 	bl	800449c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]
      break;
 800418e:	e04f      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	f000 f97c 	bl	800449c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041b2:	609a      	str	r2, [r3, #8]
      break;
 80041b4:	e03c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 f8f0 	bl	80043a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2150      	movs	r1, #80	@ 0x50
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f949 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 80041d4:	e02c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 f90f 	bl	8004406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2160      	movs	r1, #96	@ 0x60
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f939 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 80041f4:	e01c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	461a      	mov	r2, r3
 8004204:	f000 f8d0 	bl	80043a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f929 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004214:	e00c      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f000 f920 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004226:	e003      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
      break;
 800422c:	e000      	b.n	8004230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800422e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a37      	ldr	r2, [pc, #220]	@ (800438c <TIM_Base_SetConfig+0xf0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00f      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a34      	ldr	r2, [pc, #208]	@ (8004390 <TIM_Base_SetConfig+0xf4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <TIM_Base_SetConfig+0xf8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x38>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a32      	ldr	r2, [pc, #200]	@ (8004398 <TIM_Base_SetConfig+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a28      	ldr	r2, [pc, #160]	@ (800438c <TIM_Base_SetConfig+0xf0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01b      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d017      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a25      	ldr	r2, [pc, #148]	@ (8004390 <TIM_Base_SetConfig+0xf4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <TIM_Base_SetConfig+0xf8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a23      	ldr	r2, [pc, #140]	@ (8004398 <TIM_Base_SetConfig+0xfc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a22      	ldr	r2, [pc, #136]	@ (800439c <TIM_Base_SetConfig+0x100>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a21      	ldr	r2, [pc, #132]	@ (80043a0 <TIM_Base_SetConfig+0x104>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <TIM_Base_SetConfig+0x108>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d108      	bne.n	8004338 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a0c      	ldr	r2, [pc, #48]	@ (800438c <TIM_Base_SetConfig+0xf0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d103      	bne.n	8004366 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 030a 	bic.w	r3, r3, #10
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004406:	b480      	push	{r7}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f023 0210 	bic.w	r2, r3, #16
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	f043 0307 	orr.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	431a      	orrs	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e050      	b.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1c      	ldr	r2, [pc, #112]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004540:	d013      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a13      	ldr	r2, [pc, #76]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10c      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40014000 	.word	0x40014000

080045b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e042      	b.n	8004678 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fc98 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	@ 0x24
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fdd3 	bl	80051d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d175      	bne.n	800478c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Transmit+0x2c>
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e06e      	b.n	800478e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2221      	movs	r2, #33	@ 0x21
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046be:	f7fd fe83 	bl	80023c8 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d8:	d108      	bne.n	80046ec <HAL_UART_Transmit+0x6c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e003      	b.n	80046f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046f4:	e02e      	b.n	8004754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2180      	movs	r1, #128	@ 0x80
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fb37 	bl	8004d74 <UART_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e03a      	b.n	800478e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3302      	adds	r3, #2
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e007      	b.n	8004746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1cb      	bne.n	80046f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	2140      	movs	r1, #64	@ 0x40
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fb03 	bl	8004d74 <UART_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e006      	b.n	800478e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d112      	bne.n	80047d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Receive_IT+0x26>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e00b      	b.n	80047d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fb2a 	bl	8004e26 <UART_Start_Receive_IT>
 80047d2:	4603      	mov	r3, r0
 80047d4:	e000      	b.n	80047d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0ba      	sub	sp, #232	@ 0xe8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800481e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_UART_IRQHandler+0x66>
 8004832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fc07 	bl	8005052 <UART_Receive_IT>
      return;
 8004844:	e273      	b.n	8004d2e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80de 	beq.w	8004a0c <HAL_UART_IRQHandler+0x22c>
 8004850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004860:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80d1 	beq.w	8004a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_UART_IRQHandler+0xae>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_UART_IRQHandler+0xd2>
 800489a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f043 0202 	orr.w	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_UART_IRQHandler+0xf6>
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d011      	beq.n	8004906 <HAL_UART_IRQHandler+0x126>
 80048e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f043 0208 	orr.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 820a 	beq.w	8004d24 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_UART_IRQHandler+0x14e>
 800491c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fb92 	bl	8005052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_UART_IRQHandler+0x17a>
 8004952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d04f      	beq.n	80049fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa9d 	bl	8004e9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496a:	2b40      	cmp	r3, #64	@ 0x40
 800496c:	d141      	bne.n	80049f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004984:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800498c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800499a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800499e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1d9      	bne.n	800496e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d013      	beq.n	80049ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c6:	4a8a      	ldr	r2, [pc, #552]	@ (8004bf0 <HAL_UART_IRQHandler+0x410>)
 80049c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd feab 	bl	800272a <HAL_DMA_Abort_IT>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049e4:	4610      	mov	r0, r2
 80049e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	e00e      	b.n	8004a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9ac 	bl	8004d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e00a      	b.n	8004a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9a8 	bl	8004d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	e006      	b.n	8004a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9a4 	bl	8004d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a06:	e18d      	b.n	8004d24 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	bf00      	nop
    return;
 8004a0a:	e18b      	b.n	8004d24 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 8167 	bne.w	8004ce4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8160 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8159 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	f040 80ce 	bne.w	8004bf4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80a9 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a76:	429a      	cmp	r2, r3
 8004a78:	f080 80a2 	bcs.w	8004bc0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a8e:	f000 8088 	beq.w	8004ba2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1d9      	bne.n	8004a92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e1      	bne.n	8004ade <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e3      	bne.n	8004b1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b72:	f023 0310 	bic.w	r3, r3, #16
 8004b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e3      	bne.n	8004b60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd fd54 	bl	800264a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f8cf 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bbe:	e0b3      	b.n	8004d28 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	f040 80ad 	bne.w	8004d28 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd8:	f040 80a6 	bne.w	8004d28 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f8b7 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
      return;
 8004bee:	e09b      	b.n	8004d28 <HAL_UART_IRQHandler+0x548>
 8004bf0:	08004f61 	.word	0x08004f61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 808e 	beq.w	8004d2c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8089 	beq.w	8004d2c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e3      	bne.n	8004c1a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	623b      	str	r3, [r7, #32]
   return(result);
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c76:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0310 	bic.w	r3, r3, #16
 8004cae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cbc:	61fa      	str	r2, [r7, #28]
 8004cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	69b9      	ldr	r1, [r7, #24]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e3      	bne.n	8004c98 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f83d 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ce2:	e023      	b.n	8004d2c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_UART_IRQHandler+0x524>
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f940 	bl	8004f82 <UART_Transmit_IT>
    return;
 8004d02:	e014      	b.n	8004d2e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00e      	beq.n	8004d2e <HAL_UART_IRQHandler+0x54e>
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f980 	bl	8005022 <UART_EndTransmit_IT>
    return;
 8004d22:	e004      	b.n	8004d2e <HAL_UART_IRQHandler+0x54e>
    return;
 8004d24:	bf00      	nop
 8004d26:	e002      	b.n	8004d2e <HAL_UART_IRQHandler+0x54e>
      return;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_UART_IRQHandler+0x54e>
      return;
 8004d2c:	bf00      	nop
  }
}
 8004d2e:	37e8      	adds	r7, #232	@ 0xe8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	4613      	mov	r3, r2
 8004d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d84:	e03b      	b.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d037      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fd fb1b 	bl	80023c8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e03a      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d023      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b80      	cmp	r3, #128	@ 0x80
 8004dba:	d020      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b40      	cmp	r3, #64	@ 0x40
 8004dc0:	d01d      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d116      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f857 	bl	8004e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2208      	movs	r2, #8
 8004df0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e00f      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d0b4      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2222      	movs	r2, #34	@ 0x22
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0220 	orr.w	r2, r2, #32
 8004e8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b095      	sub	sp, #84	@ 0x54
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ec2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ec8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e5      	bne.n	8004ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3314      	adds	r3, #20
 8004edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d119      	bne.n	8004f46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f023 0310 	bic.w	r3, r3, #16
 8004f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f32:	61ba      	str	r2, [r7, #24]
 8004f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f54:	bf00      	nop
 8004f56:	3754      	adds	r7, #84	@ 0x54
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fee7 	bl	8004d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b21      	cmp	r3, #33	@ 0x21
 8004f94:	d13e      	bne.n	8005014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9e:	d114      	bne.n	8004fca <UART_Transmit_IT+0x48>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d110      	bne.n	8004fca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	1c9a      	adds	r2, r3, #2
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]
 8004fc8:	e008      	b.n	8004fdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6211      	str	r1, [r2, #32]
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ffe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800500e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fe76 	bl	8004d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b08c      	sub	sp, #48	@ 0x30
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b22      	cmp	r3, #34	@ 0x22
 800506c:	f040 80aa 	bne.w	80051c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005078:	d115      	bne.n	80050a6 <UART_Receive_IT+0x54>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d111      	bne.n	80050a6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	b29a      	uxth	r2, r3
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80050a4:	e024      	b.n	80050f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b4:	d007      	beq.n	80050c6 <UART_Receive_IT+0x74>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <UART_Receive_IT+0x82>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e008      	b.n	80050e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4619      	mov	r1, r3
 80050fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005100:	2b00      	cmp	r3, #0
 8005102:	d15d      	bne.n	80051c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0220 	bic.w	r2, r2, #32
 8005112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	2b01      	cmp	r3, #1
 8005148:	d135      	bne.n	80051b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	613b      	str	r3, [r7, #16]
   return(result);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 0310 	bic.w	r3, r3, #16
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005170:	623a      	str	r2, [r7, #32]
 8005172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	69f9      	ldr	r1, [r7, #28]
 8005176:	6a3a      	ldr	r2, [r7, #32]
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	61bb      	str	r3, [r7, #24]
   return(result);
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e5      	bne.n	8005150 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b10      	cmp	r3, #16
 8005190:	d10a      	bne.n	80051a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fdd4 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
 80051b4:	e002      	b.n	80051bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc f98e 	bl	80014d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e002      	b.n	80051c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3730      	adds	r7, #48	@ 0x30
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d4:	b0c0      	sub	sp, #256	@ 0x100
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	68d9      	ldr	r1, [r3, #12]
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	ea40 0301 	orr.w	r3, r0, r1
 80051f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	431a      	orrs	r2, r3
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	431a      	orrs	r2, r3
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005228:	f021 010c 	bic.w	r1, r1, #12
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005236:	430b      	orrs	r3, r1
 8005238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	6999      	ldr	r1, [r3, #24]
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	ea40 0301 	orr.w	r3, r0, r1
 8005256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b8f      	ldr	r3, [pc, #572]	@ (800549c <UART_SetConfig+0x2cc>)
 8005260:	429a      	cmp	r2, r3
 8005262:	d005      	beq.n	8005270 <UART_SetConfig+0xa0>
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b8d      	ldr	r3, [pc, #564]	@ (80054a0 <UART_SetConfig+0x2d0>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d104      	bne.n	800527a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005270:	f7fe f8a0 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 8005274:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005278:	e003      	b.n	8005282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800527a:	f7fe f887 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 800527e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528c:	f040 810c 	bne.w	80054a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800529a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800529e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052a2:	4622      	mov	r2, r4
 80052a4:	462b      	mov	r3, r5
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052aa:	415b      	adcs	r3, r3
 80052ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052b2:	4621      	mov	r1, r4
 80052b4:	eb12 0801 	adds.w	r8, r2, r1
 80052b8:	4629      	mov	r1, r5
 80052ba:	eb43 0901 	adc.w	r9, r3, r1
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052d2:	4690      	mov	r8, r2
 80052d4:	4699      	mov	r9, r3
 80052d6:	4623      	mov	r3, r4
 80052d8:	eb18 0303 	adds.w	r3, r8, r3
 80052dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052e0:	462b      	mov	r3, r5
 80052e2:	eb49 0303 	adc.w	r3, r9, r3
 80052e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052fe:	460b      	mov	r3, r1
 8005300:	18db      	adds	r3, r3, r3
 8005302:	653b      	str	r3, [r7, #80]	@ 0x50
 8005304:	4613      	mov	r3, r2
 8005306:	eb42 0303 	adc.w	r3, r2, r3
 800530a:	657b      	str	r3, [r7, #84]	@ 0x54
 800530c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005314:	f7fb f81c 	bl	8000350 <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4b61      	ldr	r3, [pc, #388]	@ (80054a4 <UART_SetConfig+0x2d4>)
 800531e:	fba3 2302 	umull	r2, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	011c      	lsls	r4, r3, #4
 8005326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800532a:	2200      	movs	r2, #0
 800532c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005330:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	1891      	adds	r1, r2, r2
 800533e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005340:	415b      	adcs	r3, r3
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005348:	4641      	mov	r1, r8
 800534a:	eb12 0a01 	adds.w	sl, r2, r1
 800534e:	4649      	mov	r1, r9
 8005350:	eb43 0b01 	adc.w	fp, r3, r1
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005368:	4692      	mov	sl, r2
 800536a:	469b      	mov	fp, r3
 800536c:	4643      	mov	r3, r8
 800536e:	eb1a 0303 	adds.w	r3, sl, r3
 8005372:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005376:	464b      	mov	r3, r9
 8005378:	eb4b 0303 	adc.w	r3, fp, r3
 800537c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800538c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005394:	460b      	mov	r3, r1
 8005396:	18db      	adds	r3, r3, r3
 8005398:	643b      	str	r3, [r7, #64]	@ 0x40
 800539a:	4613      	mov	r3, r2
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053aa:	f7fa ffd1 	bl	8000350 <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	4b3b      	ldr	r3, [pc, #236]	@ (80054a4 <UART_SetConfig+0x2d4>)
 80053b6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2264      	movs	r2, #100	@ 0x64
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	1acb      	subs	r3, r1, r3
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053ca:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <UART_SetConfig+0x2d4>)
 80053cc:	fba3 2302 	umull	r2, r3, r3, r2
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053d8:	441c      	add	r4, r3
 80053da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053f4:	415b      	adcs	r3, r3
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053fc:	4641      	mov	r1, r8
 80053fe:	1851      	adds	r1, r2, r1
 8005400:	6339      	str	r1, [r7, #48]	@ 0x30
 8005402:	4649      	mov	r1, r9
 8005404:	414b      	adcs	r3, r1
 8005406:	637b      	str	r3, [r7, #52]	@ 0x34
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005414:	4659      	mov	r1, fp
 8005416:	00cb      	lsls	r3, r1, #3
 8005418:	4651      	mov	r1, sl
 800541a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800541e:	4651      	mov	r1, sl
 8005420:	00ca      	lsls	r2, r1, #3
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	4603      	mov	r3, r0
 8005428:	4642      	mov	r2, r8
 800542a:	189b      	adds	r3, r3, r2
 800542c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005430:	464b      	mov	r3, r9
 8005432:	460a      	mov	r2, r1
 8005434:	eb42 0303 	adc.w	r3, r2, r3
 8005438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005448:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800544c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005450:	460b      	mov	r3, r1
 8005452:	18db      	adds	r3, r3, r3
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005456:	4613      	mov	r3, r2
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800545e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005466:	f7fa ff73 	bl	8000350 <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <UART_SetConfig+0x2d4>)
 8005470:	fba3 1302 	umull	r1, r3, r3, r2
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	2164      	movs	r1, #100	@ 0x64
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	3332      	adds	r3, #50	@ 0x32
 8005482:	4a08      	ldr	r2, [pc, #32]	@ (80054a4 <UART_SetConfig+0x2d4>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	f003 0207 	and.w	r2, r3, #7
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4422      	add	r2, r4
 8005496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005498:	e106      	b.n	80056a8 <UART_SetConfig+0x4d8>
 800549a:	bf00      	nop
 800549c:	40011000 	.word	0x40011000
 80054a0:	40011400 	.word	0x40011400
 80054a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054ba:	4642      	mov	r2, r8
 80054bc:	464b      	mov	r3, r9
 80054be:	1891      	adds	r1, r2, r2
 80054c0:	6239      	str	r1, [r7, #32]
 80054c2:	415b      	adcs	r3, r3
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ca:	4641      	mov	r1, r8
 80054cc:	1854      	adds	r4, r2, r1
 80054ce:	4649      	mov	r1, r9
 80054d0:	eb43 0501 	adc.w	r5, r3, r1
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	00eb      	lsls	r3, r5, #3
 80054de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e2:	00e2      	lsls	r2, r4, #3
 80054e4:	4614      	mov	r4, r2
 80054e6:	461d      	mov	r5, r3
 80054e8:	4643      	mov	r3, r8
 80054ea:	18e3      	adds	r3, r4, r3
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f0:	464b      	mov	r3, r9
 80054f2:	eb45 0303 	adc.w	r3, r5, r3
 80054f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005516:	4629      	mov	r1, r5
 8005518:	008b      	lsls	r3, r1, #2
 800551a:	4621      	mov	r1, r4
 800551c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005520:	4621      	mov	r1, r4
 8005522:	008a      	lsls	r2, r1, #2
 8005524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005528:	f7fa ff12 	bl	8000350 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4b60      	ldr	r3, [pc, #384]	@ (80056b4 <UART_SetConfig+0x4e4>)
 8005532:	fba3 2302 	umull	r2, r3, r3, r2
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	011c      	lsls	r4, r3, #4
 800553a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800553e:	2200      	movs	r2, #0
 8005540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005544:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	1891      	adds	r1, r2, r2
 8005552:	61b9      	str	r1, [r7, #24]
 8005554:	415b      	adcs	r3, r3
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800555c:	4641      	mov	r1, r8
 800555e:	1851      	adds	r1, r2, r1
 8005560:	6139      	str	r1, [r7, #16]
 8005562:	4649      	mov	r1, r9
 8005564:	414b      	adcs	r3, r1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005574:	4659      	mov	r1, fp
 8005576:	00cb      	lsls	r3, r1, #3
 8005578:	4651      	mov	r1, sl
 800557a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800557e:	4651      	mov	r1, sl
 8005580:	00ca      	lsls	r2, r1, #3
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	4603      	mov	r3, r0
 8005588:	4642      	mov	r2, r8
 800558a:	189b      	adds	r3, r3, r2
 800558c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005590:	464b      	mov	r3, r9
 8005592:	460a      	mov	r2, r1
 8005594:	eb42 0303 	adc.w	r3, r2, r3
 8005598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055b4:	4649      	mov	r1, r9
 80055b6:	008b      	lsls	r3, r1, #2
 80055b8:	4641      	mov	r1, r8
 80055ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055be:	4641      	mov	r1, r8
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055c6:	f7fa fec3 	bl	8000350 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	4b38      	ldr	r3, [pc, #224]	@ (80056b4 <UART_SetConfig+0x4e4>)
 80055d2:	fba3 2301 	umull	r2, r3, r3, r1
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	2264      	movs	r2, #100	@ 0x64
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	1acb      	subs	r3, r1, r3
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	3332      	adds	r3, #50	@ 0x32
 80055e4:	4a33      	ldr	r2, [pc, #204]	@ (80056b4 <UART_SetConfig+0x4e4>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055f0:	441c      	add	r4, r3
 80055f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f6:	2200      	movs	r2, #0
 80055f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80055fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80055fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	415b      	adcs	r3, r3
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005610:	4641      	mov	r1, r8
 8005612:	1851      	adds	r1, r2, r1
 8005614:	6039      	str	r1, [r7, #0]
 8005616:	4649      	mov	r1, r9
 8005618:	414b      	adcs	r3, r1
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005628:	4659      	mov	r1, fp
 800562a:	00cb      	lsls	r3, r1, #3
 800562c:	4651      	mov	r1, sl
 800562e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005632:	4651      	mov	r1, sl
 8005634:	00ca      	lsls	r2, r1, #3
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	4603      	mov	r3, r0
 800563c:	4642      	mov	r2, r8
 800563e:	189b      	adds	r3, r3, r2
 8005640:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005642:	464b      	mov	r3, r9
 8005644:	460a      	mov	r2, r1
 8005646:	eb42 0303 	adc.w	r3, r2, r3
 800564a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	663b      	str	r3, [r7, #96]	@ 0x60
 8005656:	667a      	str	r2, [r7, #100]	@ 0x64
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005664:	4649      	mov	r1, r9
 8005666:	008b      	lsls	r3, r1, #2
 8005668:	4641      	mov	r1, r8
 800566a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800566e:	4641      	mov	r1, r8
 8005670:	008a      	lsls	r2, r1, #2
 8005672:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005676:	f7fa fe6b 	bl	8000350 <__aeabi_uldivmod>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <UART_SetConfig+0x4e4>)
 8005680:	fba3 1302 	umull	r1, r3, r3, r2
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	2164      	movs	r1, #100	@ 0x64
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	3332      	adds	r3, #50	@ 0x32
 8005692:	4a08      	ldr	r2, [pc, #32]	@ (80056b4 <UART_SetConfig+0x4e4>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4422      	add	r2, r4
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056ae:	46bd      	mov	sp, r7
 80056b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b4:	51eb851f 	.word	0x51eb851f

080056b8 <__NVIC_SetPriority>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db0a      	blt.n	80056e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	490c      	ldr	r1, [pc, #48]	@ (8005704 <__NVIC_SetPriority+0x4c>)
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	440b      	add	r3, r1
 80056dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056e0:	e00a      	b.n	80056f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4908      	ldr	r1, [pc, #32]	@ (8005708 <__NVIC_SetPriority+0x50>)
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	3b04      	subs	r3, #4
 80056f0:	0112      	lsls	r2, r2, #4
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	440b      	add	r3, r1
 80056f6:	761a      	strb	r2, [r3, #24]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000e100 	.word	0xe000e100
 8005708:	e000ed00 	.word	0xe000ed00

0800570c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005710:	2100      	movs	r1, #0
 8005712:	f06f 0004 	mvn.w	r0, #4
 8005716:	f7ff ffcf 	bl	80056b8 <__NVIC_SetPriority>
#endif
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	603b      	str	r3, [r7, #0]
  return(result);
 800572c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005732:	f06f 0305 	mvn.w	r3, #5
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	e00c      	b.n	8005754 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800573a:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <osKernelInitialize+0x44>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d105      	bne.n	800574e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005742:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <osKernelInitialize+0x44>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005748:	2300      	movs	r3, #0
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	e002      	b.n	8005754 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800574e:	f04f 33ff 	mov.w	r3, #4294967295
 8005752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005754:	687b      	ldr	r3, [r7, #4]
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000a74 	.word	0x20000a74

08005768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576e:	f3ef 8305 	mrs	r3, IPSR
 8005772:	603b      	str	r3, [r7, #0]
  return(result);
 8005774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <osKernelStart+0x1a>
    stat = osErrorISR;
 800577a:	f06f 0305 	mvn.w	r3, #5
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e010      	b.n	80057a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005782:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <osKernelStart+0x48>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d109      	bne.n	800579e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800578a:	f7ff ffbf 	bl	800570c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800578e:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <osKernelStart+0x48>)
 8005790:	2202      	movs	r2, #2
 8005792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005794:	f001 fc24 	bl	8006fe0 <vTaskStartScheduler>
      stat = osOK;
 8005798:	2300      	movs	r3, #0
 800579a:	607b      	str	r3, [r7, #4]
 800579c:	e002      	b.n	80057a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057a4:	687b      	ldr	r3, [r7, #4]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000a74 	.word	0x20000a74

080057b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08e      	sub	sp, #56	@ 0x38
 80057b8:	af04      	add	r7, sp, #16
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c4:	f3ef 8305 	mrs	r3, IPSR
 80057c8:	617b      	str	r3, [r7, #20]
  return(result);
 80057ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d17e      	bne.n	80058ce <osThreadNew+0x11a>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d07b      	beq.n	80058ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057d6:	2380      	movs	r3, #128	@ 0x80
 80057d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057da:	2318      	movs	r3, #24
 80057dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d045      	beq.n	800587a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <osThreadNew+0x48>
        name = attr->name;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <osThreadNew+0x6e>
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b38      	cmp	r3, #56	@ 0x38
 8005814:	d805      	bhi.n	8005822 <osThreadNew+0x6e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <osThreadNew+0x72>
        return (NULL);
 8005822:	2300      	movs	r3, #0
 8005824:	e054      	b.n	80058d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <osThreadNew+0xa8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b5b      	cmp	r3, #91	@ 0x5b
 8005844:	d90a      	bls.n	800585c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <osThreadNew+0xa8>
        mem = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e010      	b.n	800587e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10c      	bne.n	800587e <osThreadNew+0xca>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d108      	bne.n	800587e <osThreadNew+0xca>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <osThreadNew+0xca>
          mem = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e001      	b.n	800587e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d110      	bne.n	80058a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800588c:	9202      	str	r2, [sp, #8]
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f001 f944 	bl	8006b28 <xTaskCreateStatic>
 80058a0:	4603      	mov	r3, r0
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	e013      	b.n	80058ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d110      	bne.n	80058ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f001 f992 	bl	8006be8 <xTaskCreate>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <osThreadNew+0x11a>
            hTask = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058ce:	693b      	ldr	r3, [r7, #16]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	@ 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e0:	f3ef 8305 	mrs	r3, IPSR
 80058e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80058e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <osDelay+0x1c>
    stat = osErrorISR;
 80058ec:	f06f 0305 	mvn.w	r3, #5
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e007      	b.n	8005904 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <osDelay+0x2c>
      vTaskDelay(ticks);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fb38 	bl	8006f74 <vTaskDelay>
    }
  }

  return (stat);
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800590e:	b580      	push	{r7, lr}
 8005910:	b088      	sub	sp, #32
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591a:	f3ef 8305 	mrs	r3, IPSR
 800591e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005920:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005922:	2b00      	cmp	r3, #0
 8005924:	d174      	bne.n	8005a10 <osMutexNew+0x102>
    if (attr != NULL) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <osMutexNew+0x26>
      type = attr->attr_bits;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e001      	b.n	8005938 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <osMutexNew+0x3a>
      rmtx = 1U;
 8005942:	2301      	movs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e001      	b.n	800594c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d15c      	bne.n	8005a10 <osMutexNew+0x102>
      mem = -1;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d015      	beq.n	800598e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d006      	beq.n	8005978 <osMutexNew+0x6a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005970:	d902      	bls.n	8005978 <osMutexNew+0x6a>
          mem = 1;
 8005972:	2301      	movs	r3, #1
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e00c      	b.n	8005992 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d108      	bne.n	8005992 <osMutexNew+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <osMutexNew+0x84>
            mem = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	e001      	b.n	8005992 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d112      	bne.n	80059be <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4619      	mov	r1, r3
 80059a4:	2004      	movs	r0, #4
 80059a6:	f000 fb20 	bl	8005fea <xQueueCreateMutexStatic>
 80059aa:	61f8      	str	r0, [r7, #28]
 80059ac:	e016      	b.n	80059dc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4619      	mov	r1, r3
 80059b4:	2001      	movs	r0, #1
 80059b6:	f000 fb18 	bl	8005fea <xQueueCreateMutexStatic>
 80059ba:	61f8      	str	r0, [r7, #28]
 80059bc:	e00e      	b.n	80059dc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80059ca:	2004      	movs	r0, #4
 80059cc:	f000 faf5 	bl	8005fba <xQueueCreateMutex>
 80059d0:	61f8      	str	r0, [r7, #28]
 80059d2:	e003      	b.n	80059dc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80059d4:	2001      	movs	r0, #1
 80059d6:	f000 faf0 	bl	8005fba <xQueueCreateMutex>
 80059da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00c      	beq.n	80059fc <osMutexNew+0xee>
        if (attr != NULL) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <osMutexNew+0xe2>
          name = attr->name;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e001      	b.n	80059f4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	69f8      	ldr	r0, [r7, #28]
 80059f8:	f001 f838 	bl	8006a6c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d006      	beq.n	8005a10 <osMutexNew+0x102>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a10:	69fb      	ldr	r3, [r7, #28]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a38:	f3ef 8305 	mrs	r3, IPSR
 8005a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a3e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005a44:	f06f 0305 	mvn.w	r3, #5
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e02c      	b.n	8005aa6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005a52:	f06f 0303 	mvn.w	r3, #3
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e025      	b.n	8005aa6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d011      	beq.n	8005a84 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	6938      	ldr	r0, [r7, #16]
 8005a64:	f000 fb11 	bl	800608a <xQueueTakeMutexRecursive>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d01b      	beq.n	8005aa6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005a74:	f06f 0301 	mvn.w	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e014      	b.n	8005aa6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a7c:	f06f 0302 	mvn.w	r3, #2
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e010      	b.n	8005aa6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6938      	ldr	r0, [r7, #16]
 8005a88:	f000 fdb8 	bl	80065fc <xQueueSemaphoreTake>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d009      	beq.n	8005aa6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005a98:	f06f 0301 	mvn.w	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e002      	b.n	8005aa6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005aa0:	f06f 0302 	mvn.w	r3, #2
 8005aa4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005aa6:	697b      	ldr	r3, [r7, #20]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005acc:	f3ef 8305 	mrs	r3, IPSR
 8005ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ad2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005ad8:	f06f 0305 	mvn.w	r3, #5
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e01f      	b.n	8005b20 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005ae6:	f06f 0303 	mvn.w	r3, #3
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e018      	b.n	8005b20 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005af4:	6938      	ldr	r0, [r7, #16]
 8005af6:	f000 fa93 	bl	8006020 <xQueueGiveMutexRecursive>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d00f      	beq.n	8005b20 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b00:	f06f 0302 	mvn.w	r3, #2
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e00b      	b.n	8005b20 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	6938      	ldr	r0, [r7, #16]
 8005b10:	f000 faf2 	bl	80060f8 <xQueueGenericSend>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d002      	beq.n	8005b20 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b1a:	f06f 0302 	mvn.w	r3, #2
 8005b1e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b20:	697b      	ldr	r3, [r7, #20]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a07      	ldr	r2, [pc, #28]	@ (8005b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4a06      	ldr	r2, [pc, #24]	@ (8005b5c <vApplicationGetIdleTaskMemory+0x30>)
 8005b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000a78 	.word	0x20000a78
 8005b5c:	20000ad4 	.word	0x20000ad4

08005b60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a07      	ldr	r2, [pc, #28]	@ (8005b8c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4a06      	ldr	r2, [pc, #24]	@ (8005b90 <vApplicationGetTimerTaskMemory+0x30>)
 8005b76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b7e:	601a      	str	r2, [r3, #0]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000cd4 	.word	0x20000cd4
 8005b90:	20000d30 	.word	0x20000d30

08005b94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f103 0208 	add.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f103 0208 	add.w	r2, r3, #8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f103 0208 	add.w	r2, r3, #8
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d103      	bne.n	8005c56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e00c      	b.n	8005c70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e002      	b.n	8005c64 <vListInsert+0x2e>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d2f6      	bcs.n	8005c5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6892      	ldr	r2, [r2, #8]
 8005cbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6852      	ldr	r2, [r2, #4]
 8005cc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d103      	bne.n	8005cdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	1e5a      	subs	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d28:	f002 fc26 	bl	8008578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	68f9      	ldr	r1, [r7, #12]
 8005d36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	441a      	add	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	@ 0xff
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	22ff      	movs	r2, #255	@ 0xff
 8005d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d114      	bne.n	8005da8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01a      	beq.n	8005dbc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3310      	adds	r3, #16
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fbb6 	bl	80074fc <xTaskRemoveFromEventList>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d96:	4b0d      	ldr	r3, [pc, #52]	@ (8005dcc <xQueueGenericReset+0xd0>)
 8005d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	e009      	b.n	8005dbc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3310      	adds	r3, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fef1 	bl	8005b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3324      	adds	r3, #36	@ 0x24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff feec 	bl	8005b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005dbc:	f002 fc0e 	bl	80085dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dc0:	2301      	movs	r3, #1
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	@ 0x38
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10b      	bne.n	8005dfc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <xQueueGenericCreateStatic+0x56>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <xQueueGenericCreateStatic+0x5a>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <xQueueGenericCreateStatic+0x5c>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	623b      	str	r3, [r7, #32]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <xQueueGenericCreateStatic+0x84>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <xQueueGenericCreateStatic+0x88>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <xQueueGenericCreateStatic+0x8a>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	61fb      	str	r3, [r7, #28]
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e76:	2350      	movs	r3, #80	@ 0x50
 8005e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b50      	cmp	r3, #80	@ 0x50
 8005e7e:	d00b      	beq.n	8005e98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61bb      	str	r3, [r7, #24]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00d      	beq.n	8005ec0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f840 	bl	8005f40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3730      	adds	r7, #48	@ 0x30
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b08a      	sub	sp, #40	@ 0x28
 8005ece:	af02      	add	r7, sp, #8
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	613b      	str	r3, [r7, #16]
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	e7fd      	b.n	8005ef2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	3350      	adds	r3, #80	@ 0x50
 8005f04:	4618      	mov	r0, r3
 8005f06:	f002 fc59 	bl	80087bc <pvPortMalloc>
 8005f0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d011      	beq.n	8005f36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3350      	adds	r3, #80	@ 0x50
 8005f1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f24:	79fa      	ldrb	r2, [r7, #7]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f805 	bl	8005f40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f36:	69bb      	ldr	r3, [r7, #24]
	}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f6e:	2101      	movs	r1, #1
 8005f70:	69b8      	ldr	r0, [r7, #24]
 8005f72:	f7ff fec3 	bl	8005cfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f7e:	bf00      	nop
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00e      	beq.n	8005fb2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2100      	movs	r1, #0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f8a3 	bl	80060f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b086      	sub	sp, #24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6939      	ldr	r1, [r7, #16]
 8005fd2:	6978      	ldr	r0, [r7, #20]
 8005fd4:	f7ff ff79 	bl	8005eca <xQueueGenericCreate>
 8005fd8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff ffd3 	bl	8005f86 <prvInitialiseMutex>

		return xNewQueue;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
	}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af02      	add	r7, sp, #8
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	6039      	str	r1, [r7, #0]
 8005ff4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2200      	movs	r2, #0
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	6978      	ldr	r0, [r7, #20]
 800600a:	f7ff fee1 	bl	8005dd0 <xQueueGenericCreateStatic>
 800600e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ffb8 	bl	8005f86 <prvInitialiseMutex>

		return xNewQueue;
 8006016:	68fb      	ldr	r3, [r7, #12]
	}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60fb      	str	r3, [r7, #12]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	689c      	ldr	r4, [r3, #8]
 800604e:	f001 fc15 	bl	800787c <xTaskGetCurrentTaskHandle>
 8006052:	4603      	mov	r3, r0
 8006054:	429c      	cmp	r4, r3
 8006056:	d111      	bne.n	800607c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d105      	bne.n	8006076 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800606a:	2300      	movs	r3, #0
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	6938      	ldr	r0, [r7, #16]
 8006072:	f000 f841 	bl	80060f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006076:	2301      	movs	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e001      	b.n	8006080 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006080:	697b      	ldr	r3, [r7, #20]
	}
 8006082:	4618      	mov	r0, r3
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	bd90      	pop	{r4, r7, pc}

0800608a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800608a:	b590      	push	{r4, r7, lr}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60fb      	str	r3, [r7, #12]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	689c      	ldr	r4, [r3, #8]
 80060ba:	f001 fbdf 	bl	800787c <xTaskGetCurrentTaskHandle>
 80060be:	4603      	mov	r3, r0
 80060c0:	429c      	cmp	r4, r3
 80060c2:	d107      	bne.n	80060d4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80060ce:	2301      	movs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e00c      	b.n	80060ee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6938      	ldr	r0, [r7, #16]
 80060d8:	f000 fa90 	bl	80065fc <xQueueSemaphoreTake>
 80060dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80060ee:	697b      	ldr	r3, [r7, #20]
	}
 80060f0:	4618      	mov	r0, r3
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd90      	pop	{r4, r7, pc}

080060f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	@ 0x38
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006106:	2300      	movs	r3, #0
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <xQueueGenericSend+0x34>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <xQueueGenericSend+0x42>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <xQueueGenericSend+0x46>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericSend+0x48>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueGenericSend+0x64>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d103      	bne.n	800616a <xQueueGenericSend+0x72>
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <xQueueGenericSend+0x76>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericSend+0x78>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <xQueueGenericSend+0x94>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	623b      	str	r3, [r7, #32]
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	e7fd      	b.n	8006188 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800618c:	f001 fb86 	bl	800789c <xTaskGetSchedulerState>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <xQueueGenericSend+0xa4>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <xQueueGenericSend+0xa8>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <xQueueGenericSend+0xaa>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <xQueueGenericSend+0xc6>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	61fb      	str	r3, [r7, #28]
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	e7fd      	b.n	80061ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061be:	f002 f9db 	bl	8008578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <xQueueGenericSend+0xdc>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d129      	bne.n	8006228 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061da:	f000 fb37 	bl	800684c <prvCopyDataToQueue>
 80061de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	3324      	adds	r3, #36	@ 0x24
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 f985 	bl	80074fc <xTaskRemoveFromEventList>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d013      	beq.n	8006220 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061f8:	4b3f      	ldr	r3, [pc, #252]	@ (80062f8 <xQueueGenericSend+0x200>)
 80061fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	e00a      	b.n	8006220 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006210:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <xQueueGenericSend+0x200>)
 8006212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006220:	f002 f9dc 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 8006224:	2301      	movs	r3, #1
 8006226:	e063      	b.n	80062f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800622e:	f002 f9d5 	bl	80085dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006232:	2300      	movs	r3, #0
 8006234:	e05c      	b.n	80062f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	4618      	mov	r0, r3
 8006242:	f001 f9bf 	bl	80075c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006246:	2301      	movs	r3, #1
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800624a:	f002 f9c7 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800624e:	f000 ff2f 	bl	80070b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006252:	f002 f991 	bl	8008578 <vPortEnterCritical>
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800625c:	b25b      	sxtb	r3, r3
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d103      	bne.n	800626c <xQueueGenericSend+0x174>
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006272:	b25b      	sxtb	r3, r3
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d103      	bne.n	8006282 <xQueueGenericSend+0x18a>
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006282:	f002 f9ab 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006286:	1d3a      	adds	r2, r7, #4
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f001 f9ae 	bl	80075f0 <xTaskCheckForTimeOut>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d124      	bne.n	80062e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800629a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800629c:	f000 fbce 	bl	8006a3c <prvIsQueueFull>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d018      	beq.n	80062d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	3310      	adds	r3, #16
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f8d2 	bl	8007458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062b6:	f000 fb59 	bl	800696c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062ba:	f000 ff07 	bl	80070cc <xTaskResumeAll>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f47f af7c 	bne.w	80061be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062c6:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <xQueueGenericSend+0x200>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	e772      	b.n	80061be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062da:	f000 fb47 	bl	800696c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062de:	f000 fef5 	bl	80070cc <xTaskResumeAll>
 80062e2:	e76c      	b.n	80061be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062e6:	f000 fb41 	bl	800696c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ea:	f000 feef 	bl	80070cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3738      	adds	r7, #56	@ 0x38
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b090      	sub	sp, #64	@ 0x40
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <xQueueGenericSendFromISR+0x3e>
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <xQueueGenericSendFromISR+0x42>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xQueueGenericSendFromISR+0x44>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d103      	bne.n	800636a <xQueueGenericSendFromISR+0x6e>
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <xQueueGenericSendFromISR+0x72>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericSendFromISR+0x74>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	623b      	str	r3, [r7, #32]
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800638c:	f002 f9d4 	bl	8008738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006390:	f3ef 8211 	mrs	r2, BASEPRI
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d302      	bcc.n	80063be <xQueueGenericSendFromISR+0xc2>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d12f      	bne.n	800641e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063d4:	f000 fa3a 	bl	800684c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d112      	bne.n	8006408 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d016      	beq.n	8006418 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	3324      	adds	r3, #36	@ 0x24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 f884 	bl	80074fc <xTaskRemoveFromEventList>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e007      	b.n	8006418 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800640c:	3301      	adds	r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	b25a      	sxtb	r2, r3
 8006412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006418:	2301      	movs	r3, #1
 800641a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800641c:	e001      	b.n	8006422 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800641e:	2300      	movs	r3, #0
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006424:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800642c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800642e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006430:	4618      	mov	r0, r3
 8006432:	3740      	adds	r7, #64	@ 0x40
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08c      	sub	sp, #48	@ 0x30
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006444:	2300      	movs	r3, #0
 8006446:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <xQueueReceive+0x32>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	623b      	str	r3, [r7, #32]
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <xQueueReceive+0x40>
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <xQueueReceive+0x44>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <xQueueReceive+0x46>
 800647c:	2300      	movs	r3, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <xQueueReceive+0x62>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	61fb      	str	r3, [r7, #28]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800649a:	f001 f9ff 	bl	800789c <xTaskGetSchedulerState>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <xQueueReceive+0x72>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <xQueueReceive+0x76>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <xQueueReceive+0x78>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <xQueueReceive+0x94>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	61bb      	str	r3, [r7, #24]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064cc:	f002 f854 	bl	8008578 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01f      	beq.n	800651c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e0:	f000 fa1e 	bl	8006920 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00f      	beq.n	8006514 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	3310      	adds	r3, #16
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ffff 	bl	80074fc <xTaskRemoveFromEventList>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006504:	4b3c      	ldr	r3, [pc, #240]	@ (80065f8 <xQueueReceive+0x1c0>)
 8006506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006514:	f002 f862 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 8006518:	2301      	movs	r3, #1
 800651a:	e069      	b.n	80065f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006522:	f002 f85b 	bl	80085dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006526:	2300      	movs	r3, #0
 8006528:	e062      	b.n	80065f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800652a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006530:	f107 0310 	add.w	r3, r7, #16
 8006534:	4618      	mov	r0, r3
 8006536:	f001 f845 	bl	80075c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800653e:	f002 f84d 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006542:	f000 fdb5 	bl	80070b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006546:	f002 f817 	bl	8008578 <vPortEnterCritical>
 800654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006550:	b25b      	sxtb	r3, r3
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d103      	bne.n	8006560 <xQueueReceive+0x128>
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006566:	b25b      	sxtb	r3, r3
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d103      	bne.n	8006576 <xQueueReceive+0x13e>
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006576:	f002 f831 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800657a:	1d3a      	adds	r2, r7, #4
 800657c:	f107 0310 	add.w	r3, r7, #16
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f001 f834 	bl	80075f0 <xTaskCheckForTimeOut>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d123      	bne.n	80065d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800658e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006590:	f000 fa3e 	bl	8006a10 <prvIsQueueEmpty>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d017      	beq.n	80065ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	3324      	adds	r3, #36	@ 0x24
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 ff58 	bl	8007458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065aa:	f000 f9df 	bl	800696c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065ae:	f000 fd8d 	bl	80070cc <xTaskResumeAll>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d189      	bne.n	80064cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065b8:	4b0f      	ldr	r3, [pc, #60]	@ (80065f8 <xQueueReceive+0x1c0>)
 80065ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	e780      	b.n	80064cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065cc:	f000 f9ce 	bl	800696c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065d0:	f000 fd7c 	bl	80070cc <xTaskResumeAll>
 80065d4:	e77a      	b.n	80064cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d8:	f000 f9c8 	bl	800696c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065dc:	f000 fd76 	bl	80070cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e2:	f000 fa15 	bl	8006a10 <prvIsQueueEmpty>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f43f af6f 	beq.w	80064cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3730      	adds	r7, #48	@ 0x30
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08e      	sub	sp, #56	@ 0x38
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	623b      	str	r3, [r7, #32]
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	61fb      	str	r3, [r7, #28]
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	e7fd      	b.n	800664c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006650:	f001 f924 	bl	800789c <xTaskGetSchedulerState>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <xQueueSemaphoreTake+0x64>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <xQueueSemaphoreTake+0x68>
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <xQueueSemaphoreTake+0x6a>
 8006664:	2300      	movs	r3, #0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	61bb      	str	r3, [r7, #24]
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	e7fd      	b.n	800667e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006682:	f001 ff79 	bl	8008578 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d024      	beq.n	80066dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	1e5a      	subs	r2, r3, #1
 8006696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006698:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066a2:	f001 fa75 	bl	8007b90 <pvTaskIncrementMutexHeldCount>
 80066a6:	4602      	mov	r2, r0
 80066a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00f      	beq.n	80066d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b6:	3310      	adds	r3, #16
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 ff1f 	bl	80074fc <xTaskRemoveFromEventList>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066c4:	4b54      	ldr	r3, [pc, #336]	@ (8006818 <xQueueSemaphoreTake+0x21c>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066d4:	f001 ff82 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 80066d8:	2301      	movs	r3, #1
 80066da:	e098      	b.n	800680e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d112      	bne.n	8006708 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	617b      	str	r3, [r7, #20]
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006700:	f001 ff6c 	bl	80085dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006704:	2300      	movs	r3, #0
 8006706:	e082      	b.n	800680e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800670e:	f107 030c 	add.w	r3, r7, #12
 8006712:	4618      	mov	r0, r3
 8006714:	f000 ff56 	bl	80075c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800671c:	f001 ff5e 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006720:	f000 fcc6 	bl	80070b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006724:	f001 ff28 	bl	8008578 <vPortEnterCritical>
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800672e:	b25b      	sxtb	r3, r3
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d103      	bne.n	800673e <xQueueSemaphoreTake+0x142>
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006744:	b25b      	sxtb	r3, r3
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d103      	bne.n	8006754 <xQueueSemaphoreTake+0x158>
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006754:	f001 ff42 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006758:	463a      	mov	r2, r7
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f000 ff45 	bl	80075f0 <xTaskCheckForTimeOut>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d132      	bne.n	80067d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800676c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800676e:	f000 f94f 	bl	8006a10 <prvIsQueueEmpty>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d026      	beq.n	80067c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006780:	f001 fefa 	bl	8008578 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f8a5 	bl	80078d8 <xTaskPriorityInherit>
 800678e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006790:	f001 ff24 	bl	80085dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	3324      	adds	r3, #36	@ 0x24
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	4611      	mov	r1, r2
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fe5b 	bl	8007458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067a4:	f000 f8e2 	bl	800696c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067a8:	f000 fc90 	bl	80070cc <xTaskResumeAll>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f47f af67 	bne.w	8006682 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80067b4:	4b18      	ldr	r3, [pc, #96]	@ (8006818 <xQueueSemaphoreTake+0x21c>)
 80067b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	e75d      	b.n	8006682 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067c8:	f000 f8d0 	bl	800696c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067cc:	f000 fc7e 	bl	80070cc <xTaskResumeAll>
 80067d0:	e757      	b.n	8006682 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067d4:	f000 f8ca 	bl	800696c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067d8:	f000 fc78 	bl	80070cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067de:	f000 f917 	bl	8006a10 <prvIsQueueEmpty>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f43f af4c 	beq.w	8006682 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00d      	beq.n	800680c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80067f0:	f001 fec2 	bl	8008578 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067f6:	f000 f811 	bl	800681c <prvGetDisinheritPriorityAfterTimeout>
 80067fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006802:	4618      	mov	r0, r3
 8006804:	f001 f940 	bl	8007a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006808:	f001 fee8 	bl	80085dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800680c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800680e:	4618      	mov	r0, r3
 8006810:	3738      	adds	r7, #56	@ 0x38
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d006      	beq.n	800683a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e001      	b.n	800683e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800683e:	68fb      	ldr	r3, [r7, #12]
	}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d14d      	bne.n	800690e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4618      	mov	r0, r3
 8006878:	f001 f896 	bl	80079a8 <xTaskPriorityDisinherit>
 800687c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	e043      	b.n	800690e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d119      	bne.n	80068c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6858      	ldr	r0, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	461a      	mov	r2, r3
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	f003 fc6d 	bl	800a176 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a4:	441a      	add	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d32b      	bcc.n	800690e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	e026      	b.n	800690e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68d8      	ldr	r0, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	461a      	mov	r2, r3
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	f003 fc53 	bl	800a176 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d8:	425b      	negs	r3, r3
 80068da:	441a      	add	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d207      	bcs.n	80068fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	425b      	negs	r3, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d105      	bne.n	800690e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3b01      	subs	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006916:	697b      	ldr	r3, [r7, #20]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693a:	441a      	add	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	429a      	cmp	r2, r3
 800694a:	d303      	bcc.n	8006954 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68d9      	ldr	r1, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695c:	461a      	mov	r2, r3
 800695e:	6838      	ldr	r0, [r7, #0]
 8006960:	f003 fc09 	bl	800a176 <memcpy>
	}
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006974:	f001 fe00 	bl	8008578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800697e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006980:	e011      	b.n	80069a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d012      	beq.n	80069b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3324      	adds	r3, #36	@ 0x24
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fdb4 	bl	80074fc <xTaskRemoveFromEventList>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800699a:	f000 fe8d 	bl	80076b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dce9      	bgt.n	8006982 <prvUnlockQueue+0x16>
 80069ae:	e000      	b.n	80069b2 <prvUnlockQueue+0x46>
					break;
 80069b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	22ff      	movs	r2, #255	@ 0xff
 80069b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069ba:	f001 fe0f 	bl	80085dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069be:	f001 fddb 	bl	8008578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069ca:	e011      	b.n	80069f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d012      	beq.n	80069fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3310      	adds	r3, #16
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fd8f 	bl	80074fc <xTaskRemoveFromEventList>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069e4:	f000 fe68 	bl	80076b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dce9      	bgt.n	80069cc <prvUnlockQueue+0x60>
 80069f8:	e000      	b.n	80069fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	22ff      	movs	r2, #255	@ 0xff
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a04:	f001 fdea 	bl	80085dc <vPortExitCritical>
}
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a18:	f001 fdae 	bl	8008578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a24:	2301      	movs	r3, #1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a2e:	f001 fdd5 	bl	80085dc <vPortExitCritical>

	return xReturn;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a44:	f001 fd98 	bl	8008578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d102      	bne.n	8006a5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e001      	b.n	8006a5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a5e:	f001 fdbd 	bl	80085dc <vPortExitCritical>

	return xReturn;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e014      	b.n	8006aa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8006abc <vQueueAddToRegistry+0x50>)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a88:	490c      	ldr	r1, [pc, #48]	@ (8006abc <vQueueAddToRegistry+0x50>)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a92:	4a0a      	ldr	r2, [pc, #40]	@ (8006abc <vQueueAddToRegistry+0x50>)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4413      	add	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a9e:	e006      	b.n	8006aae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b07      	cmp	r3, #7
 8006aaa:	d9e7      	bls.n	8006a7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20001130 	.word	0x20001130

08006ac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ad0:	f001 fd52 	bl	8008578 <vPortEnterCritical>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ada:	b25b      	sxtb	r3, r3
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d103      	bne.n	8006aea <vQueueWaitForMessageRestricted+0x2a>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006af0:	b25b      	sxtb	r3, r3
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d103      	bne.n	8006b00 <vQueueWaitForMessageRestricted+0x40>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b00:	f001 fd6c 	bl	80085dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	3324      	adds	r3, #36	@ 0x24
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fcc5 	bl	80074a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b1a:	6978      	ldr	r0, [r7, #20]
 8006b1c:	f7ff ff26 	bl	800696c <prvUnlockQueue>
	}
 8006b20:	bf00      	nop
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	@ 0x38
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	61fb      	str	r3, [r7, #28]
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	e7fd      	b.n	8006b6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b72:	235c      	movs	r3, #92	@ 0x5c
 8006b74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b7a:	d00b      	beq.n	8006b94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	61bb      	str	r3, [r7, #24]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <xTaskCreateStatic+0xb2>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01b      	beq.n	8006bda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006baa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	f107 0314 	add.w	r3, r7, #20
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f850 	bl	8006c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bd4:	f000 f8de 	bl	8006d94 <prvAddNewTaskToReadyList>
 8006bd8:	e001      	b.n	8006bde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
	}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3728      	adds	r7, #40	@ 0x28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	@ 0x30
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 fddd 	bl	80087bc <pvPortMalloc>
 8006c02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c0a:	205c      	movs	r0, #92	@ 0x5c
 8006c0c:	f001 fdd6 	bl	80087bc <pvPortMalloc>
 8006c10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c1e:	e005      	b.n	8006c2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c20:	6978      	ldr	r0, [r7, #20]
 8006c22:	f001 fe99 	bl	8008958 <vPortFree>
 8006c26:	e001      	b.n	8006c2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d017      	beq.n	8006c62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9303      	str	r3, [sp, #12]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	9302      	str	r3, [sp, #8]
 8006c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f80e 	bl	8006c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c56:	69f8      	ldr	r0, [r7, #28]
 8006c58:	f000 f89c 	bl	8006d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	e002      	b.n	8006c68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c68:	69bb      	ldr	r3, [r7, #24]
	}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b088      	sub	sp, #32
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	21a5      	movs	r1, #165	@ 0xa5
 8006c8c:	f002 fac0 	bl	8009210 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f023 0307 	bic.w	r3, r3, #7
 8006ca8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	617b      	str	r3, [r7, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01f      	beq.n	8006d12 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	e012      	b.n	8006cfe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	7819      	ldrb	r1, [r3, #0]
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3334      	adds	r3, #52	@ 0x34
 8006ce8:	460a      	mov	r2, r1
 8006cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b0f      	cmp	r3, #15
 8006d02:	d9e9      	bls.n	8006cd8 <prvInitialiseNewTask+0x66>
 8006d04:	e000      	b.n	8006d08 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d10:	e003      	b.n	8006d1a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	2b37      	cmp	r3, #55	@ 0x37
 8006d1e:	d901      	bls.n	8006d24 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d20:	2337      	movs	r3, #55	@ 0x37
 8006d22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	2200      	movs	r2, #0
 8006d34:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fe ff4a 	bl	8005bd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	3318      	adds	r3, #24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe ff45 	bl	8005bd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	2200      	movs	r2, #0
 8006d64:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	68f9      	ldr	r1, [r7, #12]
 8006d72:	69b8      	ldr	r0, [r7, #24]
 8006d74:	f001 face 	bl	8008314 <pxPortInitialiseStack>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d9c:	f001 fbec 	bl	8008578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006da0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <prvAddNewTaskToReadyList+0xc4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e58 <prvAddNewTaskToReadyList+0xc4>)
 8006da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006daa:	4b2c      	ldr	r3, [pc, #176]	@ (8006e5c <prvAddNewTaskToReadyList+0xc8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006db2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e5c <prvAddNewTaskToReadyList+0xc8>)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006db8:	4b27      	ldr	r3, [pc, #156]	@ (8006e58 <prvAddNewTaskToReadyList+0xc4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d110      	bne.n	8006de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dc0:	f000 fc9e 	bl	8007700 <prvInitialiseTaskLists>
 8006dc4:	e00d      	b.n	8006de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dc6:	4b26      	ldr	r3, [pc, #152]	@ (8006e60 <prvAddNewTaskToReadyList+0xcc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dce:	4b23      	ldr	r3, [pc, #140]	@ (8006e5c <prvAddNewTaskToReadyList+0xc8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d802      	bhi.n	8006de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e5c <prvAddNewTaskToReadyList+0xc8>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006de2:	4b20      	ldr	r3, [pc, #128]	@ (8006e64 <prvAddNewTaskToReadyList+0xd0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e64 <prvAddNewTaskToReadyList+0xd0>)
 8006dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dec:	4b1d      	ldr	r3, [pc, #116]	@ (8006e64 <prvAddNewTaskToReadyList+0xd0>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <prvAddNewTaskToReadyList+0xd4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d903      	bls.n	8006e08 <prvAddNewTaskToReadyList+0x74>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	4a18      	ldr	r2, [pc, #96]	@ (8006e68 <prvAddNewTaskToReadyList+0xd4>)
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4a15      	ldr	r2, [pc, #84]	@ (8006e6c <prvAddNewTaskToReadyList+0xd8>)
 8006e16:	441a      	add	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f7fe fee5 	bl	8005bee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e24:	f001 fbda 	bl	80085dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e28:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <prvAddNewTaskToReadyList+0xcc>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e30:	4b0a      	ldr	r3, [pc, #40]	@ (8006e5c <prvAddNewTaskToReadyList+0xc8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d207      	bcs.n	8006e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <prvAddNewTaskToReadyList+0xdc>)
 8006e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20001644 	.word	0x20001644
 8006e5c:	20001170 	.word	0x20001170
 8006e60:	20001650 	.word	0x20001650
 8006e64:	20001660 	.word	0x20001660
 8006e68:	2000164c 	.word	0x2000164c
 8006e6c:	20001174 	.word	0x20001174
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	@ 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	617b      	str	r3, [r7, #20]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <vTaskDelayUntil+0x4a>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	613b      	str	r3, [r7, #16]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8006f68 <vTaskDelayUntil+0xf4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <vTaskDelayUntil+0x6a>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60fb      	str	r3, [r7, #12]
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	e7fd      	b.n	8006eda <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006ede:	f000 f8e7 	bl	80070b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006ee2:	4b22      	ldr	r3, [pc, #136]	@ (8006f6c <vTaskDelayUntil+0xf8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	4413      	add	r3, r2
 8006ef0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20b      	bcs.n	8006f14 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d211      	bcs.n	8006f2a <vTaskDelayUntil+0xb6>
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d90d      	bls.n	8006f2a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f12:	e00a      	b.n	8006f2a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d303      	bcc.n	8006f26 <vTaskDelayUntil+0xb2>
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d901      	bls.n	8006f2a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d006      	beq.n	8006f44 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fe3a 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006f44:	f000 f8c2 	bl	80070cc <xTaskResumeAll>
 8006f48:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d107      	bne.n	8006f60 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006f50:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <vTaskDelayUntil+0xfc>)
 8006f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f60:	bf00      	nop
 8006f62:	3728      	adds	r7, #40	@ 0x28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	2000166c 	.word	0x2000166c
 8006f6c:	20001648 	.word	0x20001648
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d018      	beq.n	8006fb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f86:	4b14      	ldr	r3, [pc, #80]	@ (8006fd8 <vTaskDelay+0x64>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00b      	beq.n	8006fa6 <vTaskDelay+0x32>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60bb      	str	r3, [r7, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006fa6:	f000 f883 	bl	80070b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006faa:	2100      	movs	r1, #0
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fe03 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fb2:	f000 f88b 	bl	80070cc <xTaskResumeAll>
 8006fb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006fbe:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <vTaskDelay+0x68>)
 8006fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	2000166c 	.word	0x2000166c
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	@ 0x28
 8006fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fee:	463a      	mov	r2, r7
 8006ff0:	1d39      	adds	r1, r7, #4
 8006ff2:	f107 0308 	add.w	r3, r7, #8
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fd98 	bl	8005b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	9202      	str	r2, [sp, #8]
 8007004:	9301      	str	r3, [sp, #4]
 8007006:	2300      	movs	r3, #0
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	2300      	movs	r3, #0
 800700c:	460a      	mov	r2, r1
 800700e:	4922      	ldr	r1, [pc, #136]	@ (8007098 <vTaskStartScheduler+0xb8>)
 8007010:	4822      	ldr	r0, [pc, #136]	@ (800709c <vTaskStartScheduler+0xbc>)
 8007012:	f7ff fd89 	bl	8006b28 <xTaskCreateStatic>
 8007016:	4603      	mov	r3, r0
 8007018:	4a21      	ldr	r2, [pc, #132]	@ (80070a0 <vTaskStartScheduler+0xc0>)
 800701a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800701c:	4b20      	ldr	r3, [pc, #128]	@ (80070a0 <vTaskStartScheduler+0xc0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007024:	2301      	movs	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e001      	b.n	800702e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d102      	bne.n	800703a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007034:	f000 fe14 	bl	8007c60 <xTimerCreateTimerTask>
 8007038:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d116      	bne.n	800706e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	613b      	str	r3, [r7, #16]
}
 8007052:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007054:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <vTaskStartScheduler+0xc4>)
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800705c:	4b12      	ldr	r3, [pc, #72]	@ (80070a8 <vTaskStartScheduler+0xc8>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007062:	4b12      	ldr	r3, [pc, #72]	@ (80070ac <vTaskStartScheduler+0xcc>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007068:	f001 f9e2 	bl	8008430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800706c:	e00f      	b.n	800708e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d10b      	bne.n	800708e <vTaskStartScheduler+0xae>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60fb      	str	r3, [r7, #12]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <vTaskStartScheduler+0xaa>
}
 800708e:	bf00      	nop
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	0800c284 	.word	0x0800c284
 800709c:	080076d1 	.word	0x080076d1
 80070a0:	20001668 	.word	0x20001668
 80070a4:	20001664 	.word	0x20001664
 80070a8:	20001650 	.word	0x20001650
 80070ac:	20001648 	.word	0x20001648

080070b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070b4:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <vTaskSuspendAll+0x18>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	4a03      	ldr	r2, [pc, #12]	@ (80070c8 <vTaskSuspendAll+0x18>)
 80070bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80070be:	bf00      	nop
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	2000166c 	.word	0x2000166c

080070cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070da:	4b42      	ldr	r3, [pc, #264]	@ (80071e4 <xTaskResumeAll+0x118>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10b      	bne.n	80070fa <xTaskResumeAll+0x2e>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	603b      	str	r3, [r7, #0]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070fa:	f001 fa3d 	bl	8008578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070fe:	4b39      	ldr	r3, [pc, #228]	@ (80071e4 <xTaskResumeAll+0x118>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3b01      	subs	r3, #1
 8007104:	4a37      	ldr	r2, [pc, #220]	@ (80071e4 <xTaskResumeAll+0x118>)
 8007106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007108:	4b36      	ldr	r3, [pc, #216]	@ (80071e4 <xTaskResumeAll+0x118>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d162      	bne.n	80071d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007110:	4b35      	ldr	r3, [pc, #212]	@ (80071e8 <xTaskResumeAll+0x11c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d05e      	beq.n	80071d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007118:	e02f      	b.n	800717a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711a:	4b34      	ldr	r3, [pc, #208]	@ (80071ec <xTaskResumeAll+0x120>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3318      	adds	r3, #24
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fdbe 	bl	8005ca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fdb9 	bl	8005ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713a:	4b2d      	ldr	r3, [pc, #180]	@ (80071f0 <xTaskResumeAll+0x124>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d903      	bls.n	800714a <xTaskResumeAll+0x7e>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	4a2a      	ldr	r2, [pc, #168]	@ (80071f0 <xTaskResumeAll+0x124>)
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4a27      	ldr	r2, [pc, #156]	@ (80071f4 <xTaskResumeAll+0x128>)
 8007158:	441a      	add	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7fe fd44 	bl	8005bee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800716a:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <xTaskResumeAll+0x12c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	429a      	cmp	r2, r3
 8007172:	d302      	bcc.n	800717a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007174:	4b21      	ldr	r3, [pc, #132]	@ (80071fc <xTaskResumeAll+0x130>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800717a:	4b1c      	ldr	r3, [pc, #112]	@ (80071ec <xTaskResumeAll+0x120>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1cb      	bne.n	800711a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007188:	f000 fb58 	bl	800783c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800718c:	4b1c      	ldr	r3, [pc, #112]	@ (8007200 <xTaskResumeAll+0x134>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d010      	beq.n	80071ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007198:	f000 f846 	bl	8007228 <xTaskIncrementTick>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80071a2:	4b16      	ldr	r3, [pc, #88]	@ (80071fc <xTaskResumeAll+0x130>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f1      	bne.n	8007198 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80071b4:	4b12      	ldr	r3, [pc, #72]	@ (8007200 <xTaskResumeAll+0x134>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071ba:	4b10      	ldr	r3, [pc, #64]	@ (80071fc <xTaskResumeAll+0x130>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007204 <xTaskResumeAll+0x138>)
 80071c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 fa01 	bl	80085dc <vPortExitCritical>

	return xAlreadyYielded;
 80071da:	68bb      	ldr	r3, [r7, #8]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	2000166c 	.word	0x2000166c
 80071e8:	20001644 	.word	0x20001644
 80071ec:	20001604 	.word	0x20001604
 80071f0:	2000164c 	.word	0x2000164c
 80071f4:	20001174 	.word	0x20001174
 80071f8:	20001170 	.word	0x20001170
 80071fc:	20001658 	.word	0x20001658
 8007200:	20001654 	.word	0x20001654
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800720e:	4b05      	ldr	r3, [pc, #20]	@ (8007224 <xTaskGetTickCount+0x1c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007214:	687b      	ldr	r3, [r7, #4]
}
 8007216:	4618      	mov	r0, r3
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20001648 	.word	0x20001648

08007228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007232:	4b4f      	ldr	r3, [pc, #316]	@ (8007370 <xTaskIncrementTick+0x148>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f040 8090 	bne.w	800735c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800723c:	4b4d      	ldr	r3, [pc, #308]	@ (8007374 <xTaskIncrementTick+0x14c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007244:	4a4b      	ldr	r2, [pc, #300]	@ (8007374 <xTaskIncrementTick+0x14c>)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d121      	bne.n	8007294 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007250:	4b49      	ldr	r3, [pc, #292]	@ (8007378 <xTaskIncrementTick+0x150>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <xTaskIncrementTick+0x4a>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	603b      	str	r3, [r7, #0]
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	e7fd      	b.n	800726e <xTaskIncrementTick+0x46>
 8007272:	4b41      	ldr	r3, [pc, #260]	@ (8007378 <xTaskIncrementTick+0x150>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	4b40      	ldr	r3, [pc, #256]	@ (800737c <xTaskIncrementTick+0x154>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a3e      	ldr	r2, [pc, #248]	@ (8007378 <xTaskIncrementTick+0x150>)
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	4a3e      	ldr	r2, [pc, #248]	@ (800737c <xTaskIncrementTick+0x154>)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	4b3e      	ldr	r3, [pc, #248]	@ (8007380 <xTaskIncrementTick+0x158>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	4a3c      	ldr	r2, [pc, #240]	@ (8007380 <xTaskIncrementTick+0x158>)
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	f000 fad4 	bl	800783c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007294:	4b3b      	ldr	r3, [pc, #236]	@ (8007384 <xTaskIncrementTick+0x15c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	429a      	cmp	r2, r3
 800729c:	d349      	bcc.n	8007332 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729e:	4b36      	ldr	r3, [pc, #216]	@ (8007378 <xTaskIncrementTick+0x150>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a8:	4b36      	ldr	r3, [pc, #216]	@ (8007384 <xTaskIncrementTick+0x15c>)
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	601a      	str	r2, [r3, #0]
					break;
 80072b0:	e03f      	b.n	8007332 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4b31      	ldr	r3, [pc, #196]	@ (8007378 <xTaskIncrementTick+0x150>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d203      	bcs.n	80072d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007384 <xTaskIncrementTick+0x15c>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072d0:	e02f      	b.n	8007332 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fce6 	bl	8005ca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3318      	adds	r3, #24
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fcdd 	bl	8005ca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f2:	4b25      	ldr	r3, [pc, #148]	@ (8007388 <xTaskIncrementTick+0x160>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d903      	bls.n	8007302 <xTaskIncrementTick+0xda>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	4a22      	ldr	r2, [pc, #136]	@ (8007388 <xTaskIncrementTick+0x160>)
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4a1f      	ldr	r2, [pc, #124]	@ (800738c <xTaskIncrementTick+0x164>)
 8007310:	441a      	add	r2, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7fe fc68 	bl	8005bee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007322:	4b1b      	ldr	r3, [pc, #108]	@ (8007390 <xTaskIncrementTick+0x168>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	429a      	cmp	r2, r3
 800732a:	d3b8      	bcc.n	800729e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800732c:	2301      	movs	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007330:	e7b5      	b.n	800729e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007332:	4b17      	ldr	r3, [pc, #92]	@ (8007390 <xTaskIncrementTick+0x168>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007338:	4914      	ldr	r1, [pc, #80]	@ (800738c <xTaskIncrementTick+0x164>)
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d901      	bls.n	800734e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800734e:	4b11      	ldr	r3, [pc, #68]	@ (8007394 <xTaskIncrementTick+0x16c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007356:	2301      	movs	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	e004      	b.n	8007366 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800735c:	4b0e      	ldr	r3, [pc, #56]	@ (8007398 <xTaskIncrementTick+0x170>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	4a0d      	ldr	r2, [pc, #52]	@ (8007398 <xTaskIncrementTick+0x170>)
 8007364:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007366:	697b      	ldr	r3, [r7, #20]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	2000166c 	.word	0x2000166c
 8007374:	20001648 	.word	0x20001648
 8007378:	200015fc 	.word	0x200015fc
 800737c:	20001600 	.word	0x20001600
 8007380:	2000165c 	.word	0x2000165c
 8007384:	20001664 	.word	0x20001664
 8007388:	2000164c 	.word	0x2000164c
 800738c:	20001174 	.word	0x20001174
 8007390:	20001170 	.word	0x20001170
 8007394:	20001658 	.word	0x20001658
 8007398:	20001654 	.word	0x20001654

0800739c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073a2:	4b28      	ldr	r3, [pc, #160]	@ (8007444 <vTaskSwitchContext+0xa8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073aa:	4b27      	ldr	r3, [pc, #156]	@ (8007448 <vTaskSwitchContext+0xac>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073b0:	e042      	b.n	8007438 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80073b2:	4b25      	ldr	r3, [pc, #148]	@ (8007448 <vTaskSwitchContext+0xac>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b8:	4b24      	ldr	r3, [pc, #144]	@ (800744c <vTaskSwitchContext+0xb0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e011      	b.n	80073e4 <vTaskSwitchContext+0x48>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <vTaskSwitchContext+0x42>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	607b      	str	r3, [r7, #4]
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <vTaskSwitchContext+0x3e>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	491a      	ldr	r1, [pc, #104]	@ (8007450 <vTaskSwitchContext+0xb4>)
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0e3      	beq.n	80073c0 <vTaskSwitchContext+0x24>
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4a13      	ldr	r2, [pc, #76]	@ (8007450 <vTaskSwitchContext+0xb4>)
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3308      	adds	r3, #8
 800741a:	429a      	cmp	r2, r3
 800741c:	d104      	bne.n	8007428 <vTaskSwitchContext+0x8c>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	605a      	str	r2, [r3, #4]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	4a09      	ldr	r2, [pc, #36]	@ (8007454 <vTaskSwitchContext+0xb8>)
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	4a06      	ldr	r2, [pc, #24]	@ (800744c <vTaskSwitchContext+0xb0>)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6013      	str	r3, [r2, #0]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	2000166c 	.word	0x2000166c
 8007448:	20001658 	.word	0x20001658
 800744c:	2000164c 	.word	0x2000164c
 8007450:	20001174 	.word	0x20001174
 8007454:	20001170 	.word	0x20001170

08007458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <vTaskPlaceOnEventList+0x48>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3318      	adds	r3, #24
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fe fbd4 	bl	8005c36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800748e:	2101      	movs	r1, #1
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f000 fb91 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20001170 	.word	0x20001170

080074a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	617b      	str	r3, [r7, #20]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3318      	adds	r3, #24
 80074d4:	4619      	mov	r1, r3
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7fe fb89 	bl	8005bee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295
 80074e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f000 fb64 	bl	8007bb8 <prvAddCurrentTaskToDelayedList>
	}
 80074f0:	bf00      	nop
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20001170 	.word	0x20001170

080074fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10b      	bne.n	800752a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60fb      	str	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	3318      	adds	r3, #24
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe fbba 	bl	8005ca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007534:	4b1d      	ldr	r3, [pc, #116]	@ (80075ac <xTaskRemoveFromEventList+0xb0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d11d      	bne.n	8007578 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe fbb1 	bl	8005ca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754a:	4b19      	ldr	r3, [pc, #100]	@ (80075b0 <xTaskRemoveFromEventList+0xb4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d903      	bls.n	800755a <xTaskRemoveFromEventList+0x5e>
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007556:	4a16      	ldr	r2, [pc, #88]	@ (80075b0 <xTaskRemoveFromEventList+0xb4>)
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4a13      	ldr	r2, [pc, #76]	@ (80075b4 <xTaskRemoveFromEventList+0xb8>)
 8007568:	441a      	add	r2, r3
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3304      	adds	r3, #4
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f7fe fb3c 	bl	8005bee <vListInsertEnd>
 8007576:	e005      	b.n	8007584 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	3318      	adds	r3, #24
 800757c:	4619      	mov	r1, r3
 800757e:	480e      	ldr	r0, [pc, #56]	@ (80075b8 <xTaskRemoveFromEventList+0xbc>)
 8007580:	f7fe fb35 	bl	8005bee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007588:	4b0c      	ldr	r3, [pc, #48]	@ (80075bc <xTaskRemoveFromEventList+0xc0>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	429a      	cmp	r2, r3
 8007590:	d905      	bls.n	800759e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007596:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <xTaskRemoveFromEventList+0xc4>)
 8007598:	2201      	movs	r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e001      	b.n	80075a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075a2:	697b      	ldr	r3, [r7, #20]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	2000166c 	.word	0x2000166c
 80075b0:	2000164c 	.word	0x2000164c
 80075b4:	20001174 	.word	0x20001174
 80075b8:	20001604 	.word	0x20001604
 80075bc:	20001170 	.word	0x20001170
 80075c0:	20001658 	.word	0x20001658

080075c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <vTaskInternalSetTimeOutState+0x24>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <vTaskInternalSetTimeOutState+0x28>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	605a      	str	r2, [r3, #4]
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	2000165c 	.word	0x2000165c
 80075ec:	20001648 	.word	0x20001648

080075f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	613b      	str	r3, [r7, #16]
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	60fb      	str	r3, [r7, #12]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007636:	f000 ff9f 	bl	8008578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800763a:	4b1d      	ldr	r3, [pc, #116]	@ (80076b0 <xTaskCheckForTimeOut+0xc0>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d102      	bne.n	800765a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e023      	b.n	80076a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b15      	ldr	r3, [pc, #84]	@ (80076b4 <xTaskCheckForTimeOut+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d007      	beq.n	8007676 <xTaskCheckForTimeOut+0x86>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	429a      	cmp	r2, r3
 800766e:	d302      	bcc.n	8007676 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e015      	b.n	80076a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	429a      	cmp	r2, r3
 800767e:	d20b      	bcs.n	8007698 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ff99 	bl	80075c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	e004      	b.n	80076a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800769e:	2301      	movs	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076a2:	f000 ff9b 	bl	80085dc <vPortExitCritical>

	return xReturn;
 80076a6:	69fb      	ldr	r3, [r7, #28]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3720      	adds	r7, #32
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20001648 	.word	0x20001648
 80076b4:	2000165c 	.word	0x2000165c

080076b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076bc:	4b03      	ldr	r3, [pc, #12]	@ (80076cc <vTaskMissedYield+0x14>)
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20001658 	.word	0x20001658

080076d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076d8:	f000 f852 	bl	8007780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <prvIdleTask+0x28>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d9f9      	bls.n	80076d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <prvIdleTask+0x2c>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076f4:	e7f0      	b.n	80076d8 <prvIdleTask+0x8>
 80076f6:	bf00      	nop
 80076f8:	20001174 	.word	0x20001174
 80076fc:	e000ed04 	.word	0xe000ed04

08007700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	e00c      	b.n	8007726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a12      	ldr	r2, [pc, #72]	@ (8007760 <prvInitialiseTaskLists+0x60>)
 8007718:	4413      	add	r3, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fa3a 	bl	8005b94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3301      	adds	r3, #1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b37      	cmp	r3, #55	@ 0x37
 800772a:	d9ef      	bls.n	800770c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800772c:	480d      	ldr	r0, [pc, #52]	@ (8007764 <prvInitialiseTaskLists+0x64>)
 800772e:	f7fe fa31 	bl	8005b94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007732:	480d      	ldr	r0, [pc, #52]	@ (8007768 <prvInitialiseTaskLists+0x68>)
 8007734:	f7fe fa2e 	bl	8005b94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007738:	480c      	ldr	r0, [pc, #48]	@ (800776c <prvInitialiseTaskLists+0x6c>)
 800773a:	f7fe fa2b 	bl	8005b94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800773e:	480c      	ldr	r0, [pc, #48]	@ (8007770 <prvInitialiseTaskLists+0x70>)
 8007740:	f7fe fa28 	bl	8005b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007744:	480b      	ldr	r0, [pc, #44]	@ (8007774 <prvInitialiseTaskLists+0x74>)
 8007746:	f7fe fa25 	bl	8005b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800774a:	4b0b      	ldr	r3, [pc, #44]	@ (8007778 <prvInitialiseTaskLists+0x78>)
 800774c:	4a05      	ldr	r2, [pc, #20]	@ (8007764 <prvInitialiseTaskLists+0x64>)
 800774e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <prvInitialiseTaskLists+0x7c>)
 8007752:	4a05      	ldr	r2, [pc, #20]	@ (8007768 <prvInitialiseTaskLists+0x68>)
 8007754:	601a      	str	r2, [r3, #0]
}
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20001174 	.word	0x20001174
 8007764:	200015d4 	.word	0x200015d4
 8007768:	200015e8 	.word	0x200015e8
 800776c:	20001604 	.word	0x20001604
 8007770:	20001618 	.word	0x20001618
 8007774:	20001630 	.word	0x20001630
 8007778:	200015fc 	.word	0x200015fc
 800777c:	20001600 	.word	0x20001600

08007780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007786:	e019      	b.n	80077bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007788:	f000 fef6 	bl	8008578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778c:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <prvCheckTasksWaitingTermination+0x50>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe fa85 	bl	8005ca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800779e:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <prvCheckTasksWaitingTermination+0x54>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	4a0b      	ldr	r2, [pc, #44]	@ (80077d4 <prvCheckTasksWaitingTermination+0x54>)
 80077a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077a8:	4b0b      	ldr	r3, [pc, #44]	@ (80077d8 <prvCheckTasksWaitingTermination+0x58>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	4a0a      	ldr	r2, [pc, #40]	@ (80077d8 <prvCheckTasksWaitingTermination+0x58>)
 80077b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077b2:	f000 ff13 	bl	80085dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f810 	bl	80077dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077bc:	4b06      	ldr	r3, [pc, #24]	@ (80077d8 <prvCheckTasksWaitingTermination+0x58>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e1      	bne.n	8007788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20001618 	.word	0x20001618
 80077d4:	20001644 	.word	0x20001644
 80077d8:	2000162c 	.word	0x2000162c

080077dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d108      	bne.n	8007800 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 f8b0 	bl	8008958 <vPortFree>
				vPortFree( pxTCB );
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 f8ad 	bl	8008958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077fe:	e019      	b.n	8007834 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007806:	2b01      	cmp	r3, #1
 8007808:	d103      	bne.n	8007812 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 f8a4 	bl	8008958 <vPortFree>
	}
 8007810:	e010      	b.n	8007834 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007818:	2b02      	cmp	r3, #2
 800781a:	d00b      	beq.n	8007834 <prvDeleteTCB+0x58>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	60fb      	str	r3, [r7, #12]
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <prvDeleteTCB+0x54>
	}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007842:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <prvResetNextTaskUnblockTime+0x38>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <prvResetNextTaskUnblockTime+0x3c>)
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007854:	e008      	b.n	8007868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007856:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <prvResetNextTaskUnblockTime+0x38>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a04      	ldr	r2, [pc, #16]	@ (8007878 <prvResetNextTaskUnblockTime+0x3c>)
 8007866:	6013      	str	r3, [r2, #0]
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	200015fc 	.word	0x200015fc
 8007878:	20001664 	.word	0x20001664

0800787c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007882:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <xTaskGetCurrentTaskHandle+0x1c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007888:	687b      	ldr	r3, [r7, #4]
	}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20001170 	.word	0x20001170

0800789c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078a2:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <xTaskGetSchedulerState+0x34>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078aa:	2301      	movs	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e008      	b.n	80078c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b0:	4b08      	ldr	r3, [pc, #32]	@ (80078d4 <xTaskGetSchedulerState+0x38>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078b8:	2302      	movs	r3, #2
 80078ba:	607b      	str	r3, [r7, #4]
 80078bc:	e001      	b.n	80078c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078be:	2300      	movs	r3, #0
 80078c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078c2:	687b      	ldr	r3, [r7, #4]
	}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	20001650 	.word	0x20001650
 80078d4:	2000166c 	.word	0x2000166c

080078d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d051      	beq.n	8007992 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f2:	4b2a      	ldr	r3, [pc, #168]	@ (800799c <xTaskPriorityInherit+0xc4>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d241      	bcs.n	8007980 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	db06      	blt.n	8007912 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007904:	4b25      	ldr	r3, [pc, #148]	@ (800799c <xTaskPriorityInherit+0xc4>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6959      	ldr	r1, [r3, #20]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4a1f      	ldr	r2, [pc, #124]	@ (80079a0 <xTaskPriorityInherit+0xc8>)
 8007924:	4413      	add	r3, r2
 8007926:	4299      	cmp	r1, r3
 8007928:	d122      	bne.n	8007970 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3304      	adds	r3, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe f9ba 	bl	8005ca8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007934:	4b19      	ldr	r3, [pc, #100]	@ (800799c <xTaskPriorityInherit+0xc4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4b18      	ldr	r3, [pc, #96]	@ (80079a4 <xTaskPriorityInherit+0xcc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d903      	bls.n	8007952 <xTaskPriorityInherit+0x7a>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794e:	4a15      	ldr	r2, [pc, #84]	@ (80079a4 <xTaskPriorityInherit+0xcc>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4a10      	ldr	r2, [pc, #64]	@ (80079a0 <xTaskPriorityInherit+0xc8>)
 8007960:	441a      	add	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7fe f940 	bl	8005bee <vListInsertEnd>
 800796e:	e004      	b.n	800797a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <xTaskPriorityInherit+0xc4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800797a:	2301      	movs	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e008      	b.n	8007992 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <xTaskPriorityInherit+0xc4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	429a      	cmp	r2, r3
 800798c:	d201      	bcs.n	8007992 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007992:	68fb      	ldr	r3, [r7, #12]
	}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20001170 	.word	0x20001170
 80079a0:	20001174 	.word	0x20001174
 80079a4:	2000164c 	.word	0x2000164c

080079a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d058      	beq.n	8007a70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079be:	4b2f      	ldr	r3, [pc, #188]	@ (8007a7c <xTaskPriorityDisinherit+0xd4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d00b      	beq.n	80079e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	e7fd      	b.n	80079dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10b      	bne.n	8007a00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	60bb      	str	r3, [r7, #8]
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	e7fd      	b.n	80079fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d02c      	beq.n	8007a70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d128      	bne.n	8007a70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe f940 	bl	8005ca8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a40:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <xTaskPriorityDisinherit+0xd8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d903      	bls.n	8007a50 <xTaskPriorityDisinherit+0xa8>
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8007a80 <xTaskPriorityDisinherit+0xd8>)
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a09      	ldr	r2, [pc, #36]	@ (8007a84 <xTaskPriorityDisinherit+0xdc>)
 8007a5e:	441a      	add	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7fe f8c1 	bl	8005bee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a70:	697b      	ldr	r3, [r7, #20]
	}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20001170 	.word	0x20001170
 8007a80:	2000164c 	.word	0x2000164c
 8007a84:	20001174 	.word	0x20001174

08007a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a96:	2301      	movs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d06c      	beq.n	8007b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d902      	bls.n	8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	61fb      	str	r3, [r7, #28]
 8007ace:	e002      	b.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d04c      	beq.n	8007b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d147      	bne.n	8007b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007aea:	4b26      	ldr	r3, [pc, #152]	@ (8007b84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d10b      	bne.n	8007b0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	60bb      	str	r3, [r7, #8]
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	db04      	blt.n	8007b2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	6959      	ldr	r1, [r3, #20]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4a13      	ldr	r2, [pc, #76]	@ (8007b88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b3a:	4413      	add	r3, r2
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	d11c      	bne.n	8007b7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe f8af 	bl	8005ca8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d903      	bls.n	8007b5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007b8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4a07      	ldr	r2, [pc, #28]	@ (8007b88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b6c:	441a      	add	r2, r3
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7fe f83a 	bl	8005bee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b7a:	bf00      	nop
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20001170 	.word	0x20001170
 8007b88:	20001174 	.word	0x20001174
 8007b8c:	2000164c 	.word	0x2000164c

08007b90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b94:	4b07      	ldr	r3, [pc, #28]	@ (8007bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b9c:	4b05      	ldr	r3, [pc, #20]	@ (8007bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ba2:	3201      	adds	r2, #1
 8007ba4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007ba6:	4b03      	ldr	r3, [pc, #12]	@ (8007bb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
	}
 8007baa:	4618      	mov	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	20001170 	.word	0x20001170

08007bb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bc2:	4b21      	ldr	r3, [pc, #132]	@ (8007c48 <prvAddCurrentTaskToDelayedList+0x90>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc8:	4b20      	ldr	r3, [pc, #128]	@ (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe f86a 	bl	8005ca8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d10a      	bne.n	8007bf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d007      	beq.n	8007bf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4819      	ldr	r0, [pc, #100]	@ (8007c50 <prvAddCurrentTaskToDelayedList+0x98>)
 8007bec:	f7fd ffff 	bl	8005bee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bf0:	e026      	b.n	8007c40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bfa:	4b14      	ldr	r3, [pc, #80]	@ (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d209      	bcs.n	8007c1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c0a:	4b12      	ldr	r3, [pc, #72]	@ (8007c54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fe f80d 	bl	8005c36 <vListInsert>
}
 8007c1c:	e010      	b.n	8007c40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fe f803 	bl	8005c36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c30:	4b0a      	ldr	r3, [pc, #40]	@ (8007c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d202      	bcs.n	8007c40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c3a:	4a08      	ldr	r2, [pc, #32]	@ (8007c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20001648 	.word	0x20001648
 8007c4c:	20001170 	.word	0x20001170
 8007c50:	20001630 	.word	0x20001630
 8007c54:	20001600 	.word	0x20001600
 8007c58:	200015fc 	.word	0x200015fc
 8007c5c:	20001664 	.word	0x20001664

08007c60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	@ 0x28
 8007c64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c6a:	f000 fb13 	bl	8008294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce4 <xTimerCreateTimerTask+0x84>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d021      	beq.n	8007cba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c7e:	1d3a      	adds	r2, r7, #4
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fd ff69 	bl	8005b60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	4911      	ldr	r1, [pc, #68]	@ (8007ce8 <xTimerCreateTimerTask+0x88>)
 8007ca2:	4812      	ldr	r0, [pc, #72]	@ (8007cec <xTimerCreateTimerTask+0x8c>)
 8007ca4:	f7fe ff40 	bl	8006b28 <xTaskCreateStatic>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	4a11      	ldr	r2, [pc, #68]	@ (8007cf0 <xTimerCreateTimerTask+0x90>)
 8007cac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007cae:	4b10      	ldr	r3, [pc, #64]	@ (8007cf0 <xTimerCreateTimerTask+0x90>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	e7fd      	b.n	8007cd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007cd8:	697b      	ldr	r3, [r7, #20]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200016a0 	.word	0x200016a0
 8007ce8:	0800c28c 	.word	0x0800c28c
 8007cec:	08007e2d 	.word	0x08007e2d
 8007cf0:	200016a4 	.word	0x200016a4

08007cf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08a      	sub	sp, #40	@ 0x28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10b      	bne.n	8007d24 <xTimerGenericCommand+0x30>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	623b      	str	r3, [r7, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	e7fd      	b.n	8007d20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d24:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <xTimerGenericCommand+0x98>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02a      	beq.n	8007d82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b05      	cmp	r3, #5
 8007d3c:	dc18      	bgt.n	8007d70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d3e:	f7ff fdad 	bl	800789c <xTaskGetSchedulerState>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d109      	bne.n	8007d5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d48:	4b10      	ldr	r3, [pc, #64]	@ (8007d8c <xTimerGenericCommand+0x98>)
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	f107 0110 	add.w	r1, r7, #16
 8007d50:	2300      	movs	r3, #0
 8007d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d54:	f7fe f9d0 	bl	80060f8 <xQueueGenericSend>
 8007d58:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d5a:	e012      	b.n	8007d82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <xTimerGenericCommand+0x98>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	f107 0110 	add.w	r1, r7, #16
 8007d64:	2300      	movs	r3, #0
 8007d66:	2200      	movs	r2, #0
 8007d68:	f7fe f9c6 	bl	80060f8 <xQueueGenericSend>
 8007d6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d6e:	e008      	b.n	8007d82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d70:	4b06      	ldr	r3, [pc, #24]	@ (8007d8c <xTimerGenericCommand+0x98>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	f107 0110 	add.w	r1, r7, #16
 8007d78:	2300      	movs	r3, #0
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	f7fe fabe 	bl	80062fc <xQueueGenericSendFromISR>
 8007d80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3728      	adds	r7, #40	@ 0x28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200016a0 	.word	0x200016a0

08007d90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9a:	4b23      	ldr	r3, [pc, #140]	@ (8007e28 <prvProcessExpiredTimer+0x98>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd ff7d 	bl	8005ca8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d023      	beq.n	8007e04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	18d1      	adds	r1, r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	6978      	ldr	r0, [r7, #20]
 8007dca:	f000 f8d5 	bl	8007f78 <prvInsertTimerInActiveList>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d020      	beq.n	8007e16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6978      	ldr	r0, [r7, #20]
 8007de0:	f7ff ff88 	bl	8007cf4 <xTimerGenericCommand>
 8007de4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d114      	bne.n	8007e16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60fb      	str	r3, [r7, #12]
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	6978      	ldr	r0, [r7, #20]
 8007e1c:	4798      	blx	r3
}
 8007e1e:	bf00      	nop
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20001698 	.word	0x20001698

08007e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e34:	f107 0308 	add.w	r3, r7, #8
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f859 	bl	8007ef0 <prvGetNextExpireTime>
 8007e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f805 	bl	8007e54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e4a:	f000 f8d7 	bl	8007ffc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e4e:	bf00      	nop
 8007e50:	e7f0      	b.n	8007e34 <prvTimerTask+0x8>
	...

08007e54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e5e:	f7ff f927 	bl	80070b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e62:	f107 0308 	add.w	r3, r7, #8
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f866 	bl	8007f38 <prvSampleTimeNow>
 8007e6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d130      	bne.n	8007ed6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <prvProcessTimerOrBlockTask+0x3c>
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d806      	bhi.n	8007e90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e82:	f7ff f923 	bl	80070cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff81 	bl	8007d90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e8e:	e024      	b.n	8007eda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e96:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <prvProcessTimerOrBlockTask+0x90>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <prvProcessTimerOrBlockTask+0x50>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <prvProcessTimerOrBlockTask+0x52>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <prvProcessTimerOrBlockTask+0x94>)
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f7fe fe03 	bl	8006ac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007eba:	f7ff f907 	bl	80070cc <xTaskResumeAll>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ec4:	4b09      	ldr	r3, [pc, #36]	@ (8007eec <prvProcessTimerOrBlockTask+0x98>)
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	f3bf 8f6f 	isb	sy
}
 8007ed4:	e001      	b.n	8007eda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ed6:	f7ff f8f9 	bl	80070cc <xTaskResumeAll>
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	2000169c 	.word	0x2000169c
 8007ee8:	200016a0 	.word	0x200016a0
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f34 <prvGetNextExpireTime+0x44>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <prvGetNextExpireTime+0x16>
 8007f02:	2201      	movs	r2, #1
 8007f04:	e000      	b.n	8007f08 <prvGetNextExpireTime+0x18>
 8007f06:	2200      	movs	r2, #0
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d105      	bne.n	8007f20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f14:	4b07      	ldr	r3, [pc, #28]	@ (8007f34 <prvGetNextExpireTime+0x44>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	e001      	b.n	8007f24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f24:	68fb      	ldr	r3, [r7, #12]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20001698 	.word	0x20001698

08007f38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f40:	f7ff f962 	bl	8007208 <xTaskGetTickCount>
 8007f44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f46:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <prvSampleTimeNow+0x3c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d205      	bcs.n	8007f5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f50:	f000 f93a 	bl	80081c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	e002      	b.n	8007f62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f62:	4a04      	ldr	r2, [pc, #16]	@ (8007f74 <prvSampleTimeNow+0x3c>)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f68:	68fb      	ldr	r3, [r7, #12]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	200016a8 	.word	0x200016a8

08007f78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d812      	bhi.n	8007fc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d302      	bcc.n	8007fb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fac:	2301      	movs	r3, #1
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	e01b      	b.n	8007fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <prvInsertTimerInActiveList+0x7c>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	f7fd fe3a 	bl	8005c36 <vListInsert>
 8007fc2:	e012      	b.n	8007fea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d206      	bcs.n	8007fda <prvInsertTimerInActiveList+0x62>
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d302      	bcc.n	8007fda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e007      	b.n	8007fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fda:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <prvInsertTimerInActiveList+0x80>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f7fd fe26 	bl	8005c36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007fea:	697b      	ldr	r3, [r7, #20]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	2000169c 	.word	0x2000169c
 8007ff8:	20001698 	.word	0x20001698

08007ffc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08e      	sub	sp, #56	@ 0x38
 8008000:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008002:	e0ce      	b.n	80081a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	da19      	bge.n	800803e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800800a:	1d3b      	adds	r3, r7, #4
 800800c:	3304      	adds	r3, #4
 800800e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	61fb      	str	r3, [r7, #28]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800802e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008034:	6850      	ldr	r0, [r2, #4]
 8008036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008038:	6892      	ldr	r2, [r2, #8]
 800803a:	4611      	mov	r1, r2
 800803c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f2c0 80ae 	blt.w	80081a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	3304      	adds	r3, #4
 8008056:	4618      	mov	r0, r3
 8008058:	f7fd fe26 	bl	8005ca8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800805c:	463b      	mov	r3, r7
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff ff6a 	bl	8007f38 <prvSampleTimeNow>
 8008064:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b09      	cmp	r3, #9
 800806a:	f200 8097 	bhi.w	800819c <prvProcessReceivedCommands+0x1a0>
 800806e:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <prvProcessReceivedCommands+0x78>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	0800809d 	.word	0x0800809d
 8008078:	0800809d 	.word	0x0800809d
 800807c:	0800809d 	.word	0x0800809d
 8008080:	08008113 	.word	0x08008113
 8008084:	08008127 	.word	0x08008127
 8008088:	08008173 	.word	0x08008173
 800808c:	0800809d 	.word	0x0800809d
 8008090:	0800809d 	.word	0x0800809d
 8008094:	08008113 	.word	0x08008113
 8008098:	08008127 	.word	0x08008127
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080a2:	f043 0301 	orr.w	r3, r3, #1
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	18d1      	adds	r1, r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080bc:	f7ff ff5c 	bl	8007f78 <prvInsertTimerInActiveList>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d06c      	beq.n	80081a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d061      	beq.n	80081a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	441a      	add	r2, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	2300      	movs	r3, #0
 80080ea:	2100      	movs	r1, #0
 80080ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080ee:	f7ff fe01 	bl	8007cf4 <xTimerGenericCommand>
 80080f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d152      	bne.n	80081a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	61bb      	str	r3, [r7, #24]
}
 800810c:	bf00      	nop
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008120:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008124:	e03d      	b.n	80081a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	b2da      	uxtb	r2, r3
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	617b      	str	r3, [r7, #20]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	18d1      	adds	r1, r2, r3
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800816a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800816c:	f7ff ff04 	bl	8007f78 <prvInsertTimerInActiveList>
					break;
 8008170:	e017      	b.n	80081a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008182:	f000 fbe9 	bl	8008958 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008186:	e00c      	b.n	80081a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800818e:	f023 0301 	bic.w	r3, r3, #1
 8008192:	b2da      	uxtb	r2, r3
 8008194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800819a:	e002      	b.n	80081a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800819c:	bf00      	nop
 800819e:	e000      	b.n	80081a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80081a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081a2:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <prvProcessReceivedCommands+0x1c8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	1d39      	adds	r1, r7, #4
 80081a8:	2200      	movs	r2, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe f944 	bl	8006438 <xQueueReceive>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f47f af26 	bne.w	8008004 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	3730      	adds	r7, #48	@ 0x30
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	200016a0 	.word	0x200016a0

080081c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ce:	e049      	b.n	8008264 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081d0:	4b2e      	ldr	r3, [pc, #184]	@ (800828c <prvSwitchTimerLists+0xc4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081da:	4b2c      	ldr	r3, [pc, #176]	@ (800828c <prvSwitchTimerLists+0xc4>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fd fd5d 	bl	8005ca8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02f      	beq.n	8008264 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4413      	add	r3, r2
 800820c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	429a      	cmp	r2, r3
 8008214:	d90e      	bls.n	8008234 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008222:	4b1a      	ldr	r3, [pc, #104]	@ (800828c <prvSwitchTimerLists+0xc4>)
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7fd fd02 	bl	8005c36 <vListInsert>
 8008232:	e017      	b.n	8008264 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008234:	2300      	movs	r3, #0
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	2300      	movs	r3, #0
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff fd58 	bl	8007cf4 <xTimerGenericCommand>
 8008244:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	603b      	str	r3, [r7, #0]
}
 800825e:	bf00      	nop
 8008260:	bf00      	nop
 8008262:	e7fd      	b.n	8008260 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008264:	4b09      	ldr	r3, [pc, #36]	@ (800828c <prvSwitchTimerLists+0xc4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1b0      	bne.n	80081d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800826e:	4b07      	ldr	r3, [pc, #28]	@ (800828c <prvSwitchTimerLists+0xc4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008274:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <prvSwitchTimerLists+0xc8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a04      	ldr	r2, [pc, #16]	@ (800828c <prvSwitchTimerLists+0xc4>)
 800827a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800827c:	4a04      	ldr	r2, [pc, #16]	@ (8008290 <prvSwitchTimerLists+0xc8>)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6013      	str	r3, [r2, #0]
}
 8008282:	bf00      	nop
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20001698 	.word	0x20001698
 8008290:	2000169c 	.word	0x2000169c

08008294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800829a:	f000 f96d 	bl	8008578 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800829e:	4b15      	ldr	r3, [pc, #84]	@ (80082f4 <prvCheckForValidListAndQueue+0x60>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d120      	bne.n	80082e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082a6:	4814      	ldr	r0, [pc, #80]	@ (80082f8 <prvCheckForValidListAndQueue+0x64>)
 80082a8:	f7fd fc74 	bl	8005b94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082ac:	4813      	ldr	r0, [pc, #76]	@ (80082fc <prvCheckForValidListAndQueue+0x68>)
 80082ae:	f7fd fc71 	bl	8005b94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082b2:	4b13      	ldr	r3, [pc, #76]	@ (8008300 <prvCheckForValidListAndQueue+0x6c>)
 80082b4:	4a10      	ldr	r2, [pc, #64]	@ (80082f8 <prvCheckForValidListAndQueue+0x64>)
 80082b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082b8:	4b12      	ldr	r3, [pc, #72]	@ (8008304 <prvCheckForValidListAndQueue+0x70>)
 80082ba:	4a10      	ldr	r2, [pc, #64]	@ (80082fc <prvCheckForValidListAndQueue+0x68>)
 80082bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082be:	2300      	movs	r3, #0
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4b11      	ldr	r3, [pc, #68]	@ (8008308 <prvCheckForValidListAndQueue+0x74>)
 80082c4:	4a11      	ldr	r2, [pc, #68]	@ (800830c <prvCheckForValidListAndQueue+0x78>)
 80082c6:	2110      	movs	r1, #16
 80082c8:	200a      	movs	r0, #10
 80082ca:	f7fd fd81 	bl	8005dd0 <xQueueGenericCreateStatic>
 80082ce:	4603      	mov	r3, r0
 80082d0:	4a08      	ldr	r2, [pc, #32]	@ (80082f4 <prvCheckForValidListAndQueue+0x60>)
 80082d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082d4:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <prvCheckForValidListAndQueue+0x60>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082dc:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <prvCheckForValidListAndQueue+0x60>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	490b      	ldr	r1, [pc, #44]	@ (8008310 <prvCheckForValidListAndQueue+0x7c>)
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fbc2 	bl	8006a6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082e8:	f000 f978 	bl	80085dc <vPortExitCritical>
}
 80082ec:	bf00      	nop
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200016a0 	.word	0x200016a0
 80082f8:	20001670 	.word	0x20001670
 80082fc:	20001684 	.word	0x20001684
 8008300:	20001698 	.word	0x20001698
 8008304:	2000169c 	.word	0x2000169c
 8008308:	2000174c 	.word	0x2000174c
 800830c:	200016ac 	.word	0x200016ac
 8008310:	0800c294 	.word	0x0800c294

08008314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3b04      	subs	r3, #4
 8008324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800832c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3b04      	subs	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f023 0201 	bic.w	r2, r3, #1
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3b04      	subs	r3, #4
 8008342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008344:	4a0c      	ldr	r2, [pc, #48]	@ (8008378 <pxPortInitialiseStack+0x64>)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3b14      	subs	r3, #20
 800834e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3b04      	subs	r3, #4
 800835a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f06f 0202 	mvn.w	r2, #2
 8008362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3b20      	subs	r3, #32
 8008368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800836a:	68fb      	ldr	r3, [r7, #12]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	0800837d 	.word	0x0800837d

0800837c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <prvTaskExitError+0x58>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d00b      	beq.n	80083a8 <prvTaskExitError+0x2c>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	60fb      	str	r3, [r7, #12]
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <prvTaskExitError+0x28>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	60bb      	str	r3, [r7, #8]
}
 80083ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083bc:	bf00      	nop
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0fc      	beq.n	80083be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000014 	.word	0x20000014
	...

080083e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083e0:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <pxCurrentTCBConst2>)
 80083e2:	6819      	ldr	r1, [r3, #0]
 80083e4:	6808      	ldr	r0, [r1, #0]
 80083e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ea:	f380 8809 	msr	PSP, r0
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f380 8811 	msr	BASEPRI, r0
 80083fa:	4770      	bx	lr
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst2>:
 8008400:	20001170 	.word	0x20001170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008408:	4808      	ldr	r0, [pc, #32]	@ (800842c <prvPortStartFirstTask+0x24>)
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	6800      	ldr	r0, [r0, #0]
 800840e:	f380 8808 	msr	MSP, r0
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8814 	msr	CONTROL, r0
 800841a:	b662      	cpsie	i
 800841c:	b661      	cpsie	f
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	df00      	svc	0
 8008428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800842a:	bf00      	nop
 800842c:	e000ed08 	.word	0xe000ed08

08008430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008436:	4b47      	ldr	r3, [pc, #284]	@ (8008554 <xPortStartScheduler+0x124>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a47      	ldr	r2, [pc, #284]	@ (8008558 <xPortStartScheduler+0x128>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10b      	bne.n	8008458 <xPortStartScheduler+0x28>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	bf00      	nop
 8008456:	e7fd      	b.n	8008454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008458:	4b3e      	ldr	r3, [pc, #248]	@ (8008554 <xPortStartScheduler+0x124>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a3f      	ldr	r2, [pc, #252]	@ (800855c <xPortStartScheduler+0x12c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d10b      	bne.n	800847a <xPortStartScheduler+0x4a>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	613b      	str	r3, [r7, #16]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800847a:	4b39      	ldr	r3, [pc, #228]	@ (8008560 <xPortStartScheduler+0x130>)
 800847c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	22ff      	movs	r2, #255	@ 0xff
 800848a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800849c:	b2da      	uxtb	r2, r3
 800849e:	4b31      	ldr	r3, [pc, #196]	@ (8008564 <xPortStartScheduler+0x134>)
 80084a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084a2:	4b31      	ldr	r3, [pc, #196]	@ (8008568 <xPortStartScheduler+0x138>)
 80084a4:	2207      	movs	r2, #7
 80084a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084a8:	e009      	b.n	80084be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80084aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008568 <xPortStartScheduler+0x138>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008568 <xPortStartScheduler+0x138>)
 80084b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c6:	2b80      	cmp	r3, #128	@ 0x80
 80084c8:	d0ef      	beq.n	80084aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084ca:	4b27      	ldr	r3, [pc, #156]	@ (8008568 <xPortStartScheduler+0x138>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1c3 0307 	rsb	r3, r3, #7
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d00b      	beq.n	80084ee <xPortStartScheduler+0xbe>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60bb      	str	r3, [r7, #8]
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008568 <xPortStartScheduler+0x138>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008568 <xPortStartScheduler+0x138>)
 80084f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008568 <xPortStartScheduler+0x138>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008500:	4a19      	ldr	r2, [pc, #100]	@ (8008568 <xPortStartScheduler+0x138>)
 8008502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	b2da      	uxtb	r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800850c:	4b17      	ldr	r3, [pc, #92]	@ (800856c <xPortStartScheduler+0x13c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a16      	ldr	r2, [pc, #88]	@ (800856c <xPortStartScheduler+0x13c>)
 8008512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008518:	4b14      	ldr	r3, [pc, #80]	@ (800856c <xPortStartScheduler+0x13c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a13      	ldr	r2, [pc, #76]	@ (800856c <xPortStartScheduler+0x13c>)
 800851e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008524:	f000 f8da 	bl	80086dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008528:	4b11      	ldr	r3, [pc, #68]	@ (8008570 <xPortStartScheduler+0x140>)
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800852e:	f000 f8f9 	bl	8008724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008532:	4b10      	ldr	r3, [pc, #64]	@ (8008574 <xPortStartScheduler+0x144>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a0f      	ldr	r2, [pc, #60]	@ (8008574 <xPortStartScheduler+0x144>)
 8008538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800853c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800853e:	f7ff ff63 	bl	8008408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008542:	f7fe ff2b 	bl	800739c <vTaskSwitchContext>
	prvTaskExitError();
 8008546:	f7ff ff19 	bl	800837c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	e000ed00 	.word	0xe000ed00
 8008558:	410fc271 	.word	0x410fc271
 800855c:	410fc270 	.word	0x410fc270
 8008560:	e000e400 	.word	0xe000e400
 8008564:	2000179c 	.word	0x2000179c
 8008568:	200017a0 	.word	0x200017a0
 800856c:	e000ed20 	.word	0xe000ed20
 8008570:	20000014 	.word	0x20000014
 8008574:	e000ef34 	.word	0xe000ef34

08008578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
}
 8008590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <vPortEnterCritical+0x5c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	4a0e      	ldr	r2, [pc, #56]	@ (80085d4 <vPortEnterCritical+0x5c>)
 800859a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800859c:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <vPortEnterCritical+0x5c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d110      	bne.n	80085c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085a4:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <vPortEnterCritical+0x60>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	603b      	str	r3, [r7, #0]
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	e7fd      	b.n	80085c2 <vPortEnterCritical+0x4a>
	}
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000014 	.word	0x20000014
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085e2:	4b12      	ldr	r3, [pc, #72]	@ (800862c <vPortExitCritical+0x50>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <vPortExitCritical+0x26>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	607b      	str	r3, [r7, #4]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008602:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <vPortExitCritical+0x50>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3b01      	subs	r3, #1
 8008608:	4a08      	ldr	r2, [pc, #32]	@ (800862c <vPortExitCritical+0x50>)
 800860a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800860c:	4b07      	ldr	r3, [pc, #28]	@ (800862c <vPortExitCritical+0x50>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <vPortExitCritical+0x44>
 8008614:	2300      	movs	r3, #0
 8008616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f383 8811 	msr	BASEPRI, r3
}
 800861e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20000014 	.word	0x20000014

08008630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008630:	f3ef 8009 	mrs	r0, PSP
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	4b15      	ldr	r3, [pc, #84]	@ (8008690 <pxCurrentTCBConst>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	f01e 0f10 	tst.w	lr, #16
 8008640:	bf08      	it	eq
 8008642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	6010      	str	r0, [r2, #0]
 800864c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008654:	f380 8811 	msr	BASEPRI, r0
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f7fe fe9c 	bl	800739c <vTaskSwitchContext>
 8008664:	f04f 0000 	mov.w	r0, #0
 8008668:	f380 8811 	msr	BASEPRI, r0
 800866c:	bc09      	pop	{r0, r3}
 800866e:	6819      	ldr	r1, [r3, #0]
 8008670:	6808      	ldr	r0, [r1, #0]
 8008672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008676:	f01e 0f10 	tst.w	lr, #16
 800867a:	bf08      	it	eq
 800867c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008680:	f380 8809 	msr	PSP, r0
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst>:
 8008690:	20001170 	.word	0x20001170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086b2:	f7fe fdb9 	bl	8007228 <xTaskIncrementTick>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <xPortSysTickHandler+0x40>)
 80086be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f383 8811 	msr	BASEPRI, r3
}
 80086ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <vPortSetupTimerInterrupt+0x34>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <vPortSetupTimerInterrupt+0x38>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <vPortSetupTimerInterrupt+0x3c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a0a      	ldr	r2, [pc, #40]	@ (800871c <vPortSetupTimerInterrupt+0x40>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	099b      	lsrs	r3, r3, #6
 80086f8:	4a09      	ldr	r2, [pc, #36]	@ (8008720 <vPortSetupTimerInterrupt+0x44>)
 80086fa:	3b01      	subs	r3, #1
 80086fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086fe:	4b04      	ldr	r3, [pc, #16]	@ (8008710 <vPortSetupTimerInterrupt+0x34>)
 8008700:	2207      	movs	r2, #7
 8008702:	601a      	str	r2, [r3, #0]
}
 8008704:	bf00      	nop
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	e000e010 	.word	0xe000e010
 8008714:	e000e018 	.word	0xe000e018
 8008718:	20000008 	.word	0x20000008
 800871c:	10624dd3 	.word	0x10624dd3
 8008720:	e000e014 	.word	0xe000e014

08008724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008734 <vPortEnableVFP+0x10>
 8008728:	6801      	ldr	r1, [r0, #0]
 800872a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800872e:	6001      	str	r1, [r0, #0]
 8008730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008732:	bf00      	nop
 8008734:	e000ed88 	.word	0xe000ed88

08008738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800873e:	f3ef 8305 	mrs	r3, IPSR
 8008742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b0f      	cmp	r3, #15
 8008748:	d915      	bls.n	8008776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800874a:	4a18      	ldr	r2, [pc, #96]	@ (80087ac <vPortValidateInterruptPriority+0x74>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008754:	4b16      	ldr	r3, [pc, #88]	@ (80087b0 <vPortValidateInterruptPriority+0x78>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	7afa      	ldrb	r2, [r7, #11]
 800875a:	429a      	cmp	r2, r3
 800875c:	d20b      	bcs.n	8008776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008776:	4b0f      	ldr	r3, [pc, #60]	@ (80087b4 <vPortValidateInterruptPriority+0x7c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800877e:	4b0e      	ldr	r3, [pc, #56]	@ (80087b8 <vPortValidateInterruptPriority+0x80>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d90b      	bls.n	800879e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	603b      	str	r3, [r7, #0]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <vPortValidateInterruptPriority+0x62>
	}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	e000e3f0 	.word	0xe000e3f0
 80087b0:	2000179c 	.word	0x2000179c
 80087b4:	e000ed0c 	.word	0xe000ed0c
 80087b8:	200017a0 	.word	0x200017a0

080087bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	@ 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087c8:	f7fe fc72 	bl	80070b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008940 <pvPortMalloc+0x184>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087d4:	f000 f924 	bl	8008a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008944 <pvPortMalloc+0x188>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4013      	ands	r3, r2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f040 8095 	bne.w	8008910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01e      	beq.n	800882a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80087ec:	2208      	movs	r2, #8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d015      	beq.n	800882a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	3308      	adds	r3, #8
 8008806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <pvPortMalloc+0x6e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	617b      	str	r3, [r7, #20]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d06f      	beq.n	8008910 <pvPortMalloc+0x154>
 8008830:	4b45      	ldr	r3, [pc, #276]	@ (8008948 <pvPortMalloc+0x18c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	429a      	cmp	r2, r3
 8008838:	d86a      	bhi.n	8008910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800883a:	4b44      	ldr	r3, [pc, #272]	@ (800894c <pvPortMalloc+0x190>)
 800883c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800883e:	4b43      	ldr	r3, [pc, #268]	@ (800894c <pvPortMalloc+0x190>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008844:	e004      	b.n	8008850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <pvPortMalloc+0xa6>
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f1      	bne.n	8008846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008862:	4b37      	ldr	r3, [pc, #220]	@ (8008940 <pvPortMalloc+0x184>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008868:	429a      	cmp	r2, r3
 800886a:	d051      	beq.n	8008910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	4413      	add	r3, r2
 8008874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1ad2      	subs	r2, r2, r3
 8008886:	2308      	movs	r3, #8
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	429a      	cmp	r2, r3
 800888c:	d920      	bls.n	80088d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800888e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <pvPortMalloc+0xfc>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088ca:	69b8      	ldr	r0, [r7, #24]
 80088cc:	f000 f90a 	bl	8008ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008948 <pvPortMalloc+0x18c>)
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	4a1b      	ldr	r2, [pc, #108]	@ (8008948 <pvPortMalloc+0x18c>)
 80088dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088de:	4b1a      	ldr	r3, [pc, #104]	@ (8008948 <pvPortMalloc+0x18c>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <pvPortMalloc+0x194>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d203      	bcs.n	80088f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ea:	4b17      	ldr	r3, [pc, #92]	@ (8008948 <pvPortMalloc+0x18c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a18      	ldr	r2, [pc, #96]	@ (8008950 <pvPortMalloc+0x194>)
 80088f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	4b13      	ldr	r3, [pc, #76]	@ (8008944 <pvPortMalloc+0x188>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	431a      	orrs	r2, r3
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008906:	4b13      	ldr	r3, [pc, #76]	@ (8008954 <pvPortMalloc+0x198>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	4a11      	ldr	r2, [pc, #68]	@ (8008954 <pvPortMalloc+0x198>)
 800890e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008910:	f7fe fbdc 	bl	80070cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <pvPortMalloc+0x17a>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <pvPortMalloc+0x176>
	return pvReturn;
 8008936:	69fb      	ldr	r3, [r7, #28]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3728      	adds	r7, #40	@ 0x28
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	200053ac 	.word	0x200053ac
 8008944:	200053c0 	.word	0x200053c0
 8008948:	200053b0 	.word	0x200053b0
 800894c:	200053a4 	.word	0x200053a4
 8008950:	200053b4 	.word	0x200053b4
 8008954:	200053b8 	.word	0x200053b8

08008958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d04f      	beq.n	8008a0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800896a:	2308      	movs	r3, #8
 800896c:	425b      	negs	r3, r3
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	4b25      	ldr	r3, [pc, #148]	@ (8008a14 <vPortFree+0xbc>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4013      	ands	r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <vPortFree+0x46>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60fb      	str	r3, [r7, #12]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <vPortFree+0x66>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	4b14      	ldr	r3, [pc, #80]	@ (8008a14 <vPortFree+0xbc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4013      	ands	r3, r2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11a      	bne.n	8008a0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <vPortFree+0xbc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089e4:	f7fe fb64 	bl	80070b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008a18 <vPortFree+0xc0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	4a09      	ldr	r2, [pc, #36]	@ (8008a18 <vPortFree+0xc0>)
 80089f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089f6:	6938      	ldr	r0, [r7, #16]
 80089f8:	f000 f874 	bl	8008ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <vPortFree+0xc4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3301      	adds	r3, #1
 8008a02:	4a06      	ldr	r2, [pc, #24]	@ (8008a1c <vPortFree+0xc4>)
 8008a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a06:	f7fe fb61 	bl	80070cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	200053c0 	.word	0x200053c0
 8008a18:	200053b0 	.word	0x200053b0
 8008a1c:	200053bc 	.word	0x200053bc

08008a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a2c:	4b27      	ldr	r3, [pc, #156]	@ (8008acc <prvHeapInit+0xac>)
 8008a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00c      	beq.n	8008a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3307      	adds	r3, #7
 8008a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0307 	bic.w	r3, r3, #7
 8008a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008acc <prvHeapInit+0xac>)
 8008a50:	4413      	add	r3, r2
 8008a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a58:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad0 <prvHeapInit+0xb0>)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad0 <prvHeapInit+0xb0>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0307 	bic.w	r3, r3, #7
 8008a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4a15      	ldr	r2, [pc, #84]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a82:	4b14      	ldr	r3, [pc, #80]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2200      	movs	r2, #0
 8008a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a8a:	4b12      	ldr	r3, [pc, #72]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	1ad2      	subs	r2, r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad8 <prvHeapInit+0xb8>)
 8008aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	4a09      	ldr	r2, [pc, #36]	@ (8008adc <prvHeapInit+0xbc>)
 8008ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ab8:	4b09      	ldr	r3, [pc, #36]	@ (8008ae0 <prvHeapInit+0xc0>)
 8008aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008abe:	601a      	str	r2, [r3, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	200017a4 	.word	0x200017a4
 8008ad0:	200053a4 	.word	0x200053a4
 8008ad4:	200053ac 	.word	0x200053ac
 8008ad8:	200053b4 	.word	0x200053b4
 8008adc:	200053b0 	.word	0x200053b0
 8008ae0:	200053c0 	.word	0x200053c0

08008ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008aec:	4b28      	ldr	r3, [pc, #160]	@ (8008b90 <prvInsertBlockIntoFreeList+0xac>)
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e002      	b.n	8008af8 <prvInsertBlockIntoFreeList+0x14>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d8f7      	bhi.n	8008af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d108      	bne.n	8008b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d118      	bne.n	8008b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b15      	ldr	r3, [pc, #84]	@ (8008b94 <prvInsertBlockIntoFreeList+0xb0>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d00d      	beq.n	8008b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	441a      	add	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	e008      	b.n	8008b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b62:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <prvInsertBlockIntoFreeList+0xb0>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e003      	b.n	8008b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d002      	beq.n	8008b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b82:	bf00      	nop
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	200053a4 	.word	0x200053a4
 8008b94:	200053ac 	.word	0x200053ac

08008b98 <atoi>:
 8008b98:	220a      	movs	r2, #10
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	f000 b87c 	b.w	8008c98 <strtol>

08008ba0 <_strtol_l.isra.0>:
 8008ba0:	2b24      	cmp	r3, #36	@ 0x24
 8008ba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba6:	4686      	mov	lr, r0
 8008ba8:	4690      	mov	r8, r2
 8008baa:	d801      	bhi.n	8008bb0 <_strtol_l.isra.0+0x10>
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d106      	bne.n	8008bbe <_strtol_l.isra.0+0x1e>
 8008bb0:	f001 faaa 	bl	800a108 <__errno>
 8008bb4:	2316      	movs	r3, #22
 8008bb6:	6003      	str	r3, [r0, #0]
 8008bb8:	2000      	movs	r0, #0
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	4834      	ldr	r0, [pc, #208]	@ (8008c90 <_strtol_l.isra.0+0xf0>)
 8008bc0:	460d      	mov	r5, r1
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bc8:	5d06      	ldrb	r6, [r0, r4]
 8008bca:	f016 0608 	ands.w	r6, r6, #8
 8008bce:	d1f8      	bne.n	8008bc2 <_strtol_l.isra.0+0x22>
 8008bd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008bd2:	d110      	bne.n	8008bf6 <_strtol_l.isra.0+0x56>
 8008bd4:	782c      	ldrb	r4, [r5, #0]
 8008bd6:	2601      	movs	r6, #1
 8008bd8:	1c95      	adds	r5, r2, #2
 8008bda:	f033 0210 	bics.w	r2, r3, #16
 8008bde:	d115      	bne.n	8008c0c <_strtol_l.isra.0+0x6c>
 8008be0:	2c30      	cmp	r4, #48	@ 0x30
 8008be2:	d10d      	bne.n	8008c00 <_strtol_l.isra.0+0x60>
 8008be4:	782a      	ldrb	r2, [r5, #0]
 8008be6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008bea:	2a58      	cmp	r2, #88	@ 0x58
 8008bec:	d108      	bne.n	8008c00 <_strtol_l.isra.0+0x60>
 8008bee:	786c      	ldrb	r4, [r5, #1]
 8008bf0:	3502      	adds	r5, #2
 8008bf2:	2310      	movs	r3, #16
 8008bf4:	e00a      	b.n	8008c0c <_strtol_l.isra.0+0x6c>
 8008bf6:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bf8:	bf04      	itt	eq
 8008bfa:	782c      	ldrbeq	r4, [r5, #0]
 8008bfc:	1c95      	addeq	r5, r2, #2
 8008bfe:	e7ec      	b.n	8008bda <_strtol_l.isra.0+0x3a>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1f6      	bne.n	8008bf2 <_strtol_l.isra.0+0x52>
 8008c04:	2c30      	cmp	r4, #48	@ 0x30
 8008c06:	bf14      	ite	ne
 8008c08:	230a      	movne	r3, #10
 8008c0a:	2308      	moveq	r3, #8
 8008c0c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c10:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c14:	2200      	movs	r2, #0
 8008c16:	fbbc f9f3 	udiv	r9, ip, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c20:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008c24:	2f09      	cmp	r7, #9
 8008c26:	d80f      	bhi.n	8008c48 <_strtol_l.isra.0+0xa8>
 8008c28:	463c      	mov	r4, r7
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	dd1b      	ble.n	8008c66 <_strtol_l.isra.0+0xc6>
 8008c2e:	1c57      	adds	r7, r2, #1
 8008c30:	d007      	beq.n	8008c42 <_strtol_l.isra.0+0xa2>
 8008c32:	4581      	cmp	r9, r0
 8008c34:	d314      	bcc.n	8008c60 <_strtol_l.isra.0+0xc0>
 8008c36:	d101      	bne.n	8008c3c <_strtol_l.isra.0+0x9c>
 8008c38:	45a2      	cmp	sl, r4
 8008c3a:	db11      	blt.n	8008c60 <_strtol_l.isra.0+0xc0>
 8008c3c:	fb00 4003 	mla	r0, r0, r3, r4
 8008c40:	2201      	movs	r2, #1
 8008c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c46:	e7eb      	b.n	8008c20 <_strtol_l.isra.0+0x80>
 8008c48:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c4c:	2f19      	cmp	r7, #25
 8008c4e:	d801      	bhi.n	8008c54 <_strtol_l.isra.0+0xb4>
 8008c50:	3c37      	subs	r4, #55	@ 0x37
 8008c52:	e7ea      	b.n	8008c2a <_strtol_l.isra.0+0x8a>
 8008c54:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c58:	2f19      	cmp	r7, #25
 8008c5a:	d804      	bhi.n	8008c66 <_strtol_l.isra.0+0xc6>
 8008c5c:	3c57      	subs	r4, #87	@ 0x57
 8008c5e:	e7e4      	b.n	8008c2a <_strtol_l.isra.0+0x8a>
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295
 8008c64:	e7ed      	b.n	8008c42 <_strtol_l.isra.0+0xa2>
 8008c66:	1c53      	adds	r3, r2, #1
 8008c68:	d108      	bne.n	8008c7c <_strtol_l.isra.0+0xdc>
 8008c6a:	2322      	movs	r3, #34	@ 0x22
 8008c6c:	f8ce 3000 	str.w	r3, [lr]
 8008c70:	4660      	mov	r0, ip
 8008c72:	f1b8 0f00 	cmp.w	r8, #0
 8008c76:	d0a0      	beq.n	8008bba <_strtol_l.isra.0+0x1a>
 8008c78:	1e69      	subs	r1, r5, #1
 8008c7a:	e006      	b.n	8008c8a <_strtol_l.isra.0+0xea>
 8008c7c:	b106      	cbz	r6, 8008c80 <_strtol_l.isra.0+0xe0>
 8008c7e:	4240      	negs	r0, r0
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	d099      	beq.n	8008bba <_strtol_l.isra.0+0x1a>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d1f6      	bne.n	8008c78 <_strtol_l.isra.0+0xd8>
 8008c8a:	f8c8 1000 	str.w	r1, [r8]
 8008c8e:	e794      	b.n	8008bba <_strtol_l.isra.0+0x1a>
 8008c90:	0800c371 	.word	0x0800c371

08008c94 <_strtol_r>:
 8008c94:	f7ff bf84 	b.w	8008ba0 <_strtol_l.isra.0>

08008c98 <strtol>:
 8008c98:	4613      	mov	r3, r2
 8008c9a:	460a      	mov	r2, r1
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	4802      	ldr	r0, [pc, #8]	@ (8008ca8 <strtol+0x10>)
 8008ca0:	6800      	ldr	r0, [r0, #0]
 8008ca2:	f7ff bf7d 	b.w	8008ba0 <_strtol_l.isra.0>
 8008ca6:	bf00      	nop
 8008ca8:	2000002c 	.word	0x2000002c

08008cac <std>:
 8008cac:	2300      	movs	r3, #0
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cba:	6083      	str	r3, [r0, #8]
 8008cbc:	8181      	strh	r1, [r0, #12]
 8008cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cc0:	81c2      	strh	r2, [r0, #14]
 8008cc2:	6183      	str	r3, [r0, #24]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	2208      	movs	r2, #8
 8008cc8:	305c      	adds	r0, #92	@ 0x5c
 8008cca:	f000 faa1 	bl	8009210 <memset>
 8008cce:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <std+0x58>)
 8008cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <std+0x5c>)
 8008cd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d0c <std+0x60>)
 8008cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cda:	4b0d      	ldr	r3, [pc, #52]	@ (8008d10 <std+0x64>)
 8008cdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <std+0x68>)
 8008ce0:	6224      	str	r4, [r4, #32]
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d006      	beq.n	8008cf4 <std+0x48>
 8008ce6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cea:	4294      	cmp	r4, r2
 8008cec:	d002      	beq.n	8008cf4 <std+0x48>
 8008cee:	33d0      	adds	r3, #208	@ 0xd0
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	d105      	bne.n	8008d00 <std+0x54>
 8008cf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f001 ba2e 	b.w	800a15c <__retarget_lock_init_recursive>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	08009029 	.word	0x08009029
 8008d08:	0800904f 	.word	0x0800904f
 8008d0c:	08009087 	.word	0x08009087
 8008d10:	080090ab 	.word	0x080090ab
 8008d14:	200053c4 	.word	0x200053c4

08008d18 <stdio_exit_handler>:
 8008d18:	4a02      	ldr	r2, [pc, #8]	@ (8008d24 <stdio_exit_handler+0xc>)
 8008d1a:	4903      	ldr	r1, [pc, #12]	@ (8008d28 <stdio_exit_handler+0x10>)
 8008d1c:	4803      	ldr	r0, [pc, #12]	@ (8008d2c <stdio_exit_handler+0x14>)
 8008d1e:	f000 b869 	b.w	8008df4 <_fwalk_sglue>
 8008d22:	bf00      	nop
 8008d24:	20000018 	.word	0x20000018
 8008d28:	0800b4fd 	.word	0x0800b4fd
 8008d2c:	20000030 	.word	0x20000030

08008d30 <cleanup_stdio>:
 8008d30:	6841      	ldr	r1, [r0, #4]
 8008d32:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <cleanup_stdio+0x34>)
 8008d34:	4299      	cmp	r1, r3
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	d001      	beq.n	8008d40 <cleanup_stdio+0x10>
 8008d3c:	f002 fbde 	bl	800b4fc <_fflush_r>
 8008d40:	68a1      	ldr	r1, [r4, #8]
 8008d42:	4b09      	ldr	r3, [pc, #36]	@ (8008d68 <cleanup_stdio+0x38>)
 8008d44:	4299      	cmp	r1, r3
 8008d46:	d002      	beq.n	8008d4e <cleanup_stdio+0x1e>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f002 fbd7 	bl	800b4fc <_fflush_r>
 8008d4e:	68e1      	ldr	r1, [r4, #12]
 8008d50:	4b06      	ldr	r3, [pc, #24]	@ (8008d6c <cleanup_stdio+0x3c>)
 8008d52:	4299      	cmp	r1, r3
 8008d54:	d004      	beq.n	8008d60 <cleanup_stdio+0x30>
 8008d56:	4620      	mov	r0, r4
 8008d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5c:	f002 bbce 	b.w	800b4fc <_fflush_r>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	200053c4 	.word	0x200053c4
 8008d68:	2000542c 	.word	0x2000542c
 8008d6c:	20005494 	.word	0x20005494

08008d70 <global_stdio_init.part.0>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <global_stdio_init.part.0+0x30>)
 8008d74:	4c0b      	ldr	r4, [pc, #44]	@ (8008da4 <global_stdio_init.part.0+0x34>)
 8008d76:	4a0c      	ldr	r2, [pc, #48]	@ (8008da8 <global_stdio_init.part.0+0x38>)
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2104      	movs	r1, #4
 8008d80:	f7ff ff94 	bl	8008cac <std>
 8008d84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2109      	movs	r1, #9
 8008d8c:	f7ff ff8e 	bl	8008cac <std>
 8008d90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d94:	2202      	movs	r2, #2
 8008d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9a:	2112      	movs	r1, #18
 8008d9c:	f7ff bf86 	b.w	8008cac <std>
 8008da0:	200054fc 	.word	0x200054fc
 8008da4:	200053c4 	.word	0x200053c4
 8008da8:	08008d19 	.word	0x08008d19

08008dac <__sfp_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	@ (8008db4 <__sfp_lock_acquire+0x8>)
 8008dae:	f001 b9d7 	b.w	800a160 <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	2000552b 	.word	0x2000552b

08008db8 <__sfp_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__sfp_lock_release+0x8>)
 8008dba:	f001 b9d3 	b.w	800a164 <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	2000552b 	.word	0x2000552b

08008dc4 <__sinit>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7ff fff0 	bl	8008dac <__sfp_lock_acquire>
 8008dcc:	6a23      	ldr	r3, [r4, #32]
 8008dce:	b11b      	cbz	r3, 8008dd8 <__sinit+0x14>
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bff0 	b.w	8008db8 <__sfp_lock_release>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	@ (8008dec <__sinit+0x28>)
 8008dda:	6223      	str	r3, [r4, #32]
 8008ddc:	4b04      	ldr	r3, [pc, #16]	@ (8008df0 <__sinit+0x2c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f5      	bne.n	8008dd0 <__sinit+0xc>
 8008de4:	f7ff ffc4 	bl	8008d70 <global_stdio_init.part.0>
 8008de8:	e7f2      	b.n	8008dd0 <__sinit+0xc>
 8008dea:	bf00      	nop
 8008dec:	08008d31 	.word	0x08008d31
 8008df0:	200054fc 	.word	0x200054fc

08008df4 <_fwalk_sglue>:
 8008df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4607      	mov	r7, r0
 8008dfa:	4688      	mov	r8, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	2600      	movs	r6, #0
 8008e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e04:	f1b9 0901 	subs.w	r9, r9, #1
 8008e08:	d505      	bpl.n	8008e16 <_fwalk_sglue+0x22>
 8008e0a:	6824      	ldr	r4, [r4, #0]
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	d1f7      	bne.n	8008e00 <_fwalk_sglue+0xc>
 8008e10:	4630      	mov	r0, r6
 8008e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d907      	bls.n	8008e2c <_fwalk_sglue+0x38>
 8008e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e20:	3301      	adds	r3, #1
 8008e22:	d003      	beq.n	8008e2c <_fwalk_sglue+0x38>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4638      	mov	r0, r7
 8008e28:	47c0      	blx	r8
 8008e2a:	4306      	orrs	r6, r0
 8008e2c:	3568      	adds	r5, #104	@ 0x68
 8008e2e:	e7e9      	b.n	8008e04 <_fwalk_sglue+0x10>

08008e30 <iprintf>:
 8008e30:	b40f      	push	{r0, r1, r2, r3}
 8008e32:	b507      	push	{r0, r1, r2, lr}
 8008e34:	4906      	ldr	r1, [pc, #24]	@ (8008e50 <iprintf+0x20>)
 8008e36:	ab04      	add	r3, sp, #16
 8008e38:	6808      	ldr	r0, [r1, #0]
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	6881      	ldr	r1, [r0, #8]
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	f001 fee5 	bl	800ac10 <_vfiprintf_r>
 8008e46:	b003      	add	sp, #12
 8008e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e4c:	b004      	add	sp, #16
 8008e4e:	4770      	bx	lr
 8008e50:	2000002c 	.word	0x2000002c

08008e54 <putchar>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	@ (8008e60 <putchar+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	6882      	ldr	r2, [r0, #8]
 8008e5c:	f002 bbea 	b.w	800b634 <_putc_r>
 8008e60:	2000002c 	.word	0x2000002c

08008e64 <_puts_r>:
 8008e64:	6a03      	ldr	r3, [r0, #32]
 8008e66:	b570      	push	{r4, r5, r6, lr}
 8008e68:	6884      	ldr	r4, [r0, #8]
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	460e      	mov	r6, r1
 8008e6e:	b90b      	cbnz	r3, 8008e74 <_puts_r+0x10>
 8008e70:	f7ff ffa8 	bl	8008dc4 <__sinit>
 8008e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e76:	07db      	lsls	r3, r3, #31
 8008e78:	d405      	bmi.n	8008e86 <_puts_r+0x22>
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	0598      	lsls	r0, r3, #22
 8008e7e:	d402      	bmi.n	8008e86 <_puts_r+0x22>
 8008e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e82:	f001 f96d 	bl	800a160 <__retarget_lock_acquire_recursive>
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	0719      	lsls	r1, r3, #28
 8008e8a:	d502      	bpl.n	8008e92 <_puts_r+0x2e>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d135      	bne.n	8008efe <_puts_r+0x9a>
 8008e92:	4621      	mov	r1, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	f000 f94b 	bl	8009130 <__swsetup_r>
 8008e9a:	b380      	cbz	r0, 8008efe <_puts_r+0x9a>
 8008e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8008ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ea2:	07da      	lsls	r2, r3, #31
 8008ea4:	d405      	bmi.n	8008eb2 <_puts_r+0x4e>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	059b      	lsls	r3, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_puts_r+0x4e>
 8008eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eae:	f001 f959 	bl	800a164 <__retarget_lock_release_recursive>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	bd70      	pop	{r4, r5, r6, pc}
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da04      	bge.n	8008ec4 <_puts_r+0x60>
 8008eba:	69a2      	ldr	r2, [r4, #24]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	dc17      	bgt.n	8008ef0 <_puts_r+0x8c>
 8008ec0:	290a      	cmp	r1, #10
 8008ec2:	d015      	beq.n	8008ef0 <_puts_r+0x8c>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	7019      	strb	r1, [r3, #0]
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	d1ed      	bne.n	8008eb6 <_puts_r+0x52>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da11      	bge.n	8008f02 <_puts_r+0x9e>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	210a      	movs	r1, #10
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f8e5 	bl	80090b2 <__swbuf_r>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d0d7      	beq.n	8008e9c <_puts_r+0x38>
 8008eec:	250a      	movs	r5, #10
 8008eee:	e7d7      	b.n	8008ea0 <_puts_r+0x3c>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f8dd 	bl	80090b2 <__swbuf_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1e7      	bne.n	8008ecc <_puts_r+0x68>
 8008efc:	e7ce      	b.n	8008e9c <_puts_r+0x38>
 8008efe:	3e01      	subs	r6, #1
 8008f00:	e7e4      	b.n	8008ecc <_puts_r+0x68>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	6022      	str	r2, [r4, #0]
 8008f08:	220a      	movs	r2, #10
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	e7ee      	b.n	8008eec <_puts_r+0x88>
	...

08008f10 <puts>:
 8008f10:	4b02      	ldr	r3, [pc, #8]	@ (8008f1c <puts+0xc>)
 8008f12:	4601      	mov	r1, r0
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f7ff bfa5 	b.w	8008e64 <_puts_r>
 8008f1a:	bf00      	nop
 8008f1c:	2000002c 	.word	0x2000002c

08008f20 <sniprintf>:
 8008f20:	b40c      	push	{r2, r3}
 8008f22:	b530      	push	{r4, r5, lr}
 8008f24:	4b18      	ldr	r3, [pc, #96]	@ (8008f88 <sniprintf+0x68>)
 8008f26:	1e0c      	subs	r4, r1, #0
 8008f28:	681d      	ldr	r5, [r3, #0]
 8008f2a:	b09d      	sub	sp, #116	@ 0x74
 8008f2c:	da08      	bge.n	8008f40 <sniprintf+0x20>
 8008f2e:	238b      	movs	r3, #139	@ 0x8b
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	b01d      	add	sp, #116	@ 0x74
 8008f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f3c:	b002      	add	sp, #8
 8008f3e:	4770      	bx	lr
 8008f40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008f44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008f4e:	bf14      	ite	ne
 8008f50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f54:	4623      	moveq	r3, r4
 8008f56:	9304      	str	r3, [sp, #16]
 8008f58:	9307      	str	r3, [sp, #28]
 8008f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f5e:	9002      	str	r0, [sp, #8]
 8008f60:	9006      	str	r0, [sp, #24]
 8008f62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f66:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f68:	ab21      	add	r3, sp, #132	@ 0x84
 8008f6a:	a902      	add	r1, sp, #8
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	f001 fb58 	bl	800a624 <_svfiprintf_r>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	bfbc      	itt	lt
 8008f78:	238b      	movlt	r3, #139	@ 0x8b
 8008f7a:	602b      	strlt	r3, [r5, #0]
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	d0da      	beq.n	8008f36 <sniprintf+0x16>
 8008f80:	9b02      	ldr	r3, [sp, #8]
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	e7d6      	b.n	8008f36 <sniprintf+0x16>
 8008f88:	2000002c 	.word	0x2000002c

08008f8c <siprintf>:
 8008f8c:	b40e      	push	{r1, r2, r3}
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	b09d      	sub	sp, #116	@ 0x74
 8008f92:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008f94:	9002      	str	r0, [sp, #8]
 8008f96:	9006      	str	r0, [sp, #24]
 8008f98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f9c:	480a      	ldr	r0, [pc, #40]	@ (8008fc8 <siprintf+0x3c>)
 8008f9e:	9107      	str	r1, [sp, #28]
 8008fa0:	9104      	str	r1, [sp, #16]
 8008fa2:	490a      	ldr	r1, [pc, #40]	@ (8008fcc <siprintf+0x40>)
 8008fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	2400      	movs	r4, #0
 8008fac:	a902      	add	r1, sp, #8
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008fb4:	f001 fb36 	bl	800a624 <_svfiprintf_r>
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	701c      	strb	r4, [r3, #0]
 8008fbc:	b01d      	add	sp, #116	@ 0x74
 8008fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc2:	b003      	add	sp, #12
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	2000002c 	.word	0x2000002c
 8008fcc:	ffff0208 	.word	0xffff0208

08008fd0 <siscanf>:
 8008fd0:	b40e      	push	{r1, r2, r3}
 8008fd2:	b570      	push	{r4, r5, r6, lr}
 8008fd4:	b09d      	sub	sp, #116	@ 0x74
 8008fd6:	ac21      	add	r4, sp, #132	@ 0x84
 8008fd8:	2500      	movs	r5, #0
 8008fda:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008fde:	f854 6b04 	ldr.w	r6, [r4], #4
 8008fe2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008fe6:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008fe8:	9002      	str	r0, [sp, #8]
 8008fea:	9006      	str	r0, [sp, #24]
 8008fec:	f7f7 f902 	bl	80001f4 <strlen>
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <siscanf+0x50>)
 8008ff2:	9003      	str	r0, [sp, #12]
 8008ff4:	9007      	str	r0, [sp, #28]
 8008ff6:	480b      	ldr	r0, [pc, #44]	@ (8009024 <siscanf+0x54>)
 8008ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ffa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ffe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009002:	4632      	mov	r2, r6
 8009004:	4623      	mov	r3, r4
 8009006:	a902      	add	r1, sp, #8
 8009008:	6800      	ldr	r0, [r0, #0]
 800900a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800900c:	9514      	str	r5, [sp, #80]	@ 0x50
 800900e:	9401      	str	r4, [sp, #4]
 8009010:	f001 fc5e 	bl	800a8d0 <__ssvfiscanf_r>
 8009014:	b01d      	add	sp, #116	@ 0x74
 8009016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800901a:	b003      	add	sp, #12
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	0800904b 	.word	0x0800904b
 8009024:	2000002c 	.word	0x2000002c

08009028 <__sread>:
 8009028:	b510      	push	{r4, lr}
 800902a:	460c      	mov	r4, r1
 800902c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009030:	f001 f846 	bl	800a0c0 <_read_r>
 8009034:	2800      	cmp	r0, #0
 8009036:	bfab      	itete	ge
 8009038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800903a:	89a3      	ldrhlt	r3, [r4, #12]
 800903c:	181b      	addge	r3, r3, r0
 800903e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009042:	bfac      	ite	ge
 8009044:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009046:	81a3      	strhlt	r3, [r4, #12]
 8009048:	bd10      	pop	{r4, pc}

0800904a <__seofread>:
 800904a:	2000      	movs	r0, #0
 800904c:	4770      	bx	lr

0800904e <__swrite>:
 800904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009052:	461f      	mov	r7, r3
 8009054:	898b      	ldrh	r3, [r1, #12]
 8009056:	05db      	lsls	r3, r3, #23
 8009058:	4605      	mov	r5, r0
 800905a:	460c      	mov	r4, r1
 800905c:	4616      	mov	r6, r2
 800905e:	d505      	bpl.n	800906c <__swrite+0x1e>
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	2302      	movs	r3, #2
 8009066:	2200      	movs	r2, #0
 8009068:	f001 f818 	bl	800a09c <_lseek_r>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	4632      	mov	r2, r6
 800907a:	463b      	mov	r3, r7
 800907c:	4628      	mov	r0, r5
 800907e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	f001 b82f 	b.w	800a0e4 <_write_r>

08009086 <__sseek>:
 8009086:	b510      	push	{r4, lr}
 8009088:	460c      	mov	r4, r1
 800908a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908e:	f001 f805 	bl	800a09c <_lseek_r>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	bf15      	itete	ne
 8009098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800909a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800909e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090a2:	81a3      	strheq	r3, [r4, #12]
 80090a4:	bf18      	it	ne
 80090a6:	81a3      	strhne	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__sclose>:
 80090aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ae:	f000 bfe5 	b.w	800a07c <_close_r>

080090b2 <__swbuf_r>:
 80090b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b4:	460e      	mov	r6, r1
 80090b6:	4614      	mov	r4, r2
 80090b8:	4605      	mov	r5, r0
 80090ba:	b118      	cbz	r0, 80090c4 <__swbuf_r+0x12>
 80090bc:	6a03      	ldr	r3, [r0, #32]
 80090be:	b90b      	cbnz	r3, 80090c4 <__swbuf_r+0x12>
 80090c0:	f7ff fe80 	bl	8008dc4 <__sinit>
 80090c4:	69a3      	ldr	r3, [r4, #24]
 80090c6:	60a3      	str	r3, [r4, #8]
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	071a      	lsls	r2, r3, #28
 80090cc:	d501      	bpl.n	80090d2 <__swbuf_r+0x20>
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	b943      	cbnz	r3, 80090e4 <__swbuf_r+0x32>
 80090d2:	4621      	mov	r1, r4
 80090d4:	4628      	mov	r0, r5
 80090d6:	f000 f82b 	bl	8009130 <__swsetup_r>
 80090da:	b118      	cbz	r0, 80090e4 <__swbuf_r+0x32>
 80090dc:	f04f 37ff 	mov.w	r7, #4294967295
 80090e0:	4638      	mov	r0, r7
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	6922      	ldr	r2, [r4, #16]
 80090e8:	1a98      	subs	r0, r3, r2
 80090ea:	6963      	ldr	r3, [r4, #20]
 80090ec:	b2f6      	uxtb	r6, r6
 80090ee:	4283      	cmp	r3, r0
 80090f0:	4637      	mov	r7, r6
 80090f2:	dc05      	bgt.n	8009100 <__swbuf_r+0x4e>
 80090f4:	4621      	mov	r1, r4
 80090f6:	4628      	mov	r0, r5
 80090f8:	f002 fa00 	bl	800b4fc <_fflush_r>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d1ed      	bne.n	80090dc <__swbuf_r+0x2a>
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	3b01      	subs	r3, #1
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	6022      	str	r2, [r4, #0]
 800910c:	701e      	strb	r6, [r3, #0]
 800910e:	6962      	ldr	r2, [r4, #20]
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	429a      	cmp	r2, r3
 8009114:	d004      	beq.n	8009120 <__swbuf_r+0x6e>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	07db      	lsls	r3, r3, #31
 800911a:	d5e1      	bpl.n	80090e0 <__swbuf_r+0x2e>
 800911c:	2e0a      	cmp	r6, #10
 800911e:	d1df      	bne.n	80090e0 <__swbuf_r+0x2e>
 8009120:	4621      	mov	r1, r4
 8009122:	4628      	mov	r0, r5
 8009124:	f002 f9ea 	bl	800b4fc <_fflush_r>
 8009128:	2800      	cmp	r0, #0
 800912a:	d0d9      	beq.n	80090e0 <__swbuf_r+0x2e>
 800912c:	e7d6      	b.n	80090dc <__swbuf_r+0x2a>
	...

08009130 <__swsetup_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4b29      	ldr	r3, [pc, #164]	@ (80091d8 <__swsetup_r+0xa8>)
 8009134:	4605      	mov	r5, r0
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	460c      	mov	r4, r1
 800913a:	b118      	cbz	r0, 8009144 <__swsetup_r+0x14>
 800913c:	6a03      	ldr	r3, [r0, #32]
 800913e:	b90b      	cbnz	r3, 8009144 <__swsetup_r+0x14>
 8009140:	f7ff fe40 	bl	8008dc4 <__sinit>
 8009144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009148:	0719      	lsls	r1, r3, #28
 800914a:	d422      	bmi.n	8009192 <__swsetup_r+0x62>
 800914c:	06da      	lsls	r2, r3, #27
 800914e:	d407      	bmi.n	8009160 <__swsetup_r+0x30>
 8009150:	2209      	movs	r2, #9
 8009152:	602a      	str	r2, [r5, #0]
 8009154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	e033      	b.n	80091c8 <__swsetup_r+0x98>
 8009160:	0758      	lsls	r0, r3, #29
 8009162:	d512      	bpl.n	800918a <__swsetup_r+0x5a>
 8009164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009166:	b141      	cbz	r1, 800917a <__swsetup_r+0x4a>
 8009168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800916c:	4299      	cmp	r1, r3
 800916e:	d002      	beq.n	8009176 <__swsetup_r+0x46>
 8009170:	4628      	mov	r0, r5
 8009172:	f001 f835 	bl	800a1e0 <_free_r>
 8009176:	2300      	movs	r3, #0
 8009178:	6363      	str	r3, [r4, #52]	@ 0x34
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	2300      	movs	r3, #0
 8009184:	6063      	str	r3, [r4, #4]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f043 0308 	orr.w	r3, r3, #8
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	b94b      	cbnz	r3, 80091aa <__swsetup_r+0x7a>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800919c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a0:	d003      	beq.n	80091aa <__swsetup_r+0x7a>
 80091a2:	4621      	mov	r1, r4
 80091a4:	4628      	mov	r0, r5
 80091a6:	f002 fa09 	bl	800b5bc <__smakebuf_r>
 80091aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ae:	f013 0201 	ands.w	r2, r3, #1
 80091b2:	d00a      	beq.n	80091ca <__swsetup_r+0x9a>
 80091b4:	2200      	movs	r2, #0
 80091b6:	60a2      	str	r2, [r4, #8]
 80091b8:	6962      	ldr	r2, [r4, #20]
 80091ba:	4252      	negs	r2, r2
 80091bc:	61a2      	str	r2, [r4, #24]
 80091be:	6922      	ldr	r2, [r4, #16]
 80091c0:	b942      	cbnz	r2, 80091d4 <__swsetup_r+0xa4>
 80091c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091c6:	d1c5      	bne.n	8009154 <__swsetup_r+0x24>
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	0799      	lsls	r1, r3, #30
 80091cc:	bf58      	it	pl
 80091ce:	6962      	ldrpl	r2, [r4, #20]
 80091d0:	60a2      	str	r2, [r4, #8]
 80091d2:	e7f4      	b.n	80091be <__swsetup_r+0x8e>
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7f7      	b.n	80091c8 <__swsetup_r+0x98>
 80091d8:	2000002c 	.word	0x2000002c

080091dc <memmove>:
 80091dc:	4288      	cmp	r0, r1
 80091de:	b510      	push	{r4, lr}
 80091e0:	eb01 0402 	add.w	r4, r1, r2
 80091e4:	d902      	bls.n	80091ec <memmove+0x10>
 80091e6:	4284      	cmp	r4, r0
 80091e8:	4623      	mov	r3, r4
 80091ea:	d807      	bhi.n	80091fc <memmove+0x20>
 80091ec:	1e43      	subs	r3, r0, #1
 80091ee:	42a1      	cmp	r1, r4
 80091f0:	d008      	beq.n	8009204 <memmove+0x28>
 80091f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091fa:	e7f8      	b.n	80091ee <memmove+0x12>
 80091fc:	4402      	add	r2, r0
 80091fe:	4601      	mov	r1, r0
 8009200:	428a      	cmp	r2, r1
 8009202:	d100      	bne.n	8009206 <memmove+0x2a>
 8009204:	bd10      	pop	{r4, pc}
 8009206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800920a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800920e:	e7f7      	b.n	8009200 <memmove+0x24>

08009210 <memset>:
 8009210:	4402      	add	r2, r0
 8009212:	4603      	mov	r3, r0
 8009214:	4293      	cmp	r3, r2
 8009216:	d100      	bne.n	800921a <memset+0xa>
 8009218:	4770      	bx	lr
 800921a:	f803 1b01 	strb.w	r1, [r3], #1
 800921e:	e7f9      	b.n	8009214 <memset+0x4>

08009220 <strchr>:
 8009220:	b2c9      	uxtb	r1, r1
 8009222:	4603      	mov	r3, r0
 8009224:	4618      	mov	r0, r3
 8009226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800922a:	b112      	cbz	r2, 8009232 <strchr+0x12>
 800922c:	428a      	cmp	r2, r1
 800922e:	d1f9      	bne.n	8009224 <strchr+0x4>
 8009230:	4770      	bx	lr
 8009232:	2900      	cmp	r1, #0
 8009234:	bf18      	it	ne
 8009236:	2000      	movne	r0, #0
 8009238:	4770      	bx	lr

0800923a <strcspn>:
 800923a:	b570      	push	{r4, r5, r6, lr}
 800923c:	4603      	mov	r3, r0
 800923e:	461e      	mov	r6, r3
 8009240:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009244:	b144      	cbz	r4, 8009258 <strcspn+0x1e>
 8009246:	1e4a      	subs	r2, r1, #1
 8009248:	e001      	b.n	800924e <strcspn+0x14>
 800924a:	42a5      	cmp	r5, r4
 800924c:	d004      	beq.n	8009258 <strcspn+0x1e>
 800924e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009252:	2d00      	cmp	r5, #0
 8009254:	d1f9      	bne.n	800924a <strcspn+0x10>
 8009256:	e7f2      	b.n	800923e <strcspn+0x4>
 8009258:	1a30      	subs	r0, r6, r0
 800925a:	bd70      	pop	{r4, r5, r6, pc}

0800925c <strncpy>:
 800925c:	b510      	push	{r4, lr}
 800925e:	3901      	subs	r1, #1
 8009260:	4603      	mov	r3, r0
 8009262:	b132      	cbz	r2, 8009272 <strncpy+0x16>
 8009264:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009268:	f803 4b01 	strb.w	r4, [r3], #1
 800926c:	3a01      	subs	r2, #1
 800926e:	2c00      	cmp	r4, #0
 8009270:	d1f7      	bne.n	8009262 <strncpy+0x6>
 8009272:	441a      	add	r2, r3
 8009274:	2100      	movs	r1, #0
 8009276:	4293      	cmp	r3, r2
 8009278:	d100      	bne.n	800927c <strncpy+0x20>
 800927a:	bd10      	pop	{r4, pc}
 800927c:	f803 1b01 	strb.w	r1, [r3], #1
 8009280:	e7f9      	b.n	8009276 <strncpy+0x1a>
	...

08009284 <strtok>:
 8009284:	4b16      	ldr	r3, [pc, #88]	@ (80092e0 <strtok+0x5c>)
 8009286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928a:	681f      	ldr	r7, [r3, #0]
 800928c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800928e:	4605      	mov	r5, r0
 8009290:	460e      	mov	r6, r1
 8009292:	b9ec      	cbnz	r4, 80092d0 <strtok+0x4c>
 8009294:	2050      	movs	r0, #80	@ 0x50
 8009296:	f001 f831 	bl	800a2fc <malloc>
 800929a:	4602      	mov	r2, r0
 800929c:	6478      	str	r0, [r7, #68]	@ 0x44
 800929e:	b920      	cbnz	r0, 80092aa <strtok+0x26>
 80092a0:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <strtok+0x60>)
 80092a2:	4811      	ldr	r0, [pc, #68]	@ (80092e8 <strtok+0x64>)
 80092a4:	215b      	movs	r1, #91	@ 0x5b
 80092a6:	f000 ff75 	bl	800a194 <__assert_func>
 80092aa:	e9c0 4400 	strd	r4, r4, [r0]
 80092ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80092b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80092b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80092ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80092be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80092c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80092c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80092ca:	6184      	str	r4, [r0, #24]
 80092cc:	7704      	strb	r4, [r0, #28]
 80092ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80092d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092d2:	4631      	mov	r1, r6
 80092d4:	4628      	mov	r0, r5
 80092d6:	2301      	movs	r3, #1
 80092d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	f000 b806 	b.w	80092ec <__strtok_r>
 80092e0:	2000002c 	.word	0x2000002c
 80092e4:	0800c471 	.word	0x0800c471
 80092e8:	0800c488 	.word	0x0800c488

080092ec <__strtok_r>:
 80092ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	b908      	cbnz	r0, 80092f6 <__strtok_r+0xa>
 80092f2:	6814      	ldr	r4, [r2, #0]
 80092f4:	b144      	cbz	r4, 8009308 <__strtok_r+0x1c>
 80092f6:	4620      	mov	r0, r4
 80092f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80092fc:	460f      	mov	r7, r1
 80092fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009302:	b91e      	cbnz	r6, 800930c <__strtok_r+0x20>
 8009304:	b965      	cbnz	r5, 8009320 <__strtok_r+0x34>
 8009306:	6015      	str	r5, [r2, #0]
 8009308:	2000      	movs	r0, #0
 800930a:	e005      	b.n	8009318 <__strtok_r+0x2c>
 800930c:	42b5      	cmp	r5, r6
 800930e:	d1f6      	bne.n	80092fe <__strtok_r+0x12>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f0      	bne.n	80092f6 <__strtok_r+0xa>
 8009314:	6014      	str	r4, [r2, #0]
 8009316:	7003      	strb	r3, [r0, #0]
 8009318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931a:	461c      	mov	r4, r3
 800931c:	e00c      	b.n	8009338 <__strtok_r+0x4c>
 800931e:	b91d      	cbnz	r5, 8009328 <__strtok_r+0x3c>
 8009320:	4627      	mov	r7, r4
 8009322:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009326:	460e      	mov	r6, r1
 8009328:	f816 5b01 	ldrb.w	r5, [r6], #1
 800932c:	42ab      	cmp	r3, r5
 800932e:	d1f6      	bne.n	800931e <__strtok_r+0x32>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f2      	beq.n	800931a <__strtok_r+0x2e>
 8009334:	2300      	movs	r3, #0
 8009336:	703b      	strb	r3, [r7, #0]
 8009338:	6014      	str	r4, [r2, #0]
 800933a:	e7ed      	b.n	8009318 <__strtok_r+0x2c>

0800933c <strstr>:
 800933c:	780a      	ldrb	r2, [r1, #0]
 800933e:	b570      	push	{r4, r5, r6, lr}
 8009340:	b96a      	cbnz	r2, 800935e <strstr+0x22>
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	429a      	cmp	r2, r3
 8009346:	d109      	bne.n	800935c <strstr+0x20>
 8009348:	460c      	mov	r4, r1
 800934a:	4605      	mov	r5, r0
 800934c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0f6      	beq.n	8009342 <strstr+0x6>
 8009354:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009358:	429e      	cmp	r6, r3
 800935a:	d0f7      	beq.n	800934c <strstr+0x10>
 800935c:	3001      	adds	r0, #1
 800935e:	7803      	ldrb	r3, [r0, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1ef      	bne.n	8009344 <strstr+0x8>
 8009364:	4618      	mov	r0, r3
 8009366:	e7ec      	b.n	8009342 <strstr+0x6>

08009368 <ctime>:
 8009368:	b508      	push	{r3, lr}
 800936a:	f000 f805 	bl	8009378 <localtime>
 800936e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009372:	f002 ba19 	b.w	800b7a8 <asctime>
	...

08009378 <localtime>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4b0b      	ldr	r3, [pc, #44]	@ (80093a8 <localtime+0x30>)
 800937c:	681d      	ldr	r5, [r3, #0]
 800937e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009380:	4604      	mov	r4, r0
 8009382:	b953      	cbnz	r3, 800939a <localtime+0x22>
 8009384:	2024      	movs	r0, #36	@ 0x24
 8009386:	f000 ffb9 	bl	800a2fc <malloc>
 800938a:	4602      	mov	r2, r0
 800938c:	6368      	str	r0, [r5, #52]	@ 0x34
 800938e:	b920      	cbnz	r0, 800939a <localtime+0x22>
 8009390:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <localtime+0x34>)
 8009392:	4807      	ldr	r0, [pc, #28]	@ (80093b0 <localtime+0x38>)
 8009394:	2132      	movs	r1, #50	@ 0x32
 8009396:	f000 fefd 	bl	800a194 <__assert_func>
 800939a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800939c:	4620      	mov	r0, r4
 800939e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a2:	f000 b807 	b.w	80093b4 <localtime_r>
 80093a6:	bf00      	nop
 80093a8:	2000002c 	.word	0x2000002c
 80093ac:	0800c471 	.word	0x0800c471
 80093b0:	0800c4e2 	.word	0x0800c4e2

080093b4 <localtime_r>:
 80093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	460c      	mov	r4, r1
 80093ba:	4607      	mov	r7, r0
 80093bc:	f002 fa3c 	bl	800b838 <__gettzinfo>
 80093c0:	4621      	mov	r1, r4
 80093c2:	4605      	mov	r5, r0
 80093c4:	4638      	mov	r0, r7
 80093c6:	f002 fa3b 	bl	800b840 <gmtime_r>
 80093ca:	6943      	ldr	r3, [r0, #20]
 80093cc:	0799      	lsls	r1, r3, #30
 80093ce:	4604      	mov	r4, r0
 80093d0:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 80093d4:	d106      	bne.n	80093e4 <localtime_r+0x30>
 80093d6:	2264      	movs	r2, #100	@ 0x64
 80093d8:	fb98 f3f2 	sdiv	r3, r8, r2
 80093dc:	fb02 8313 	mls	r3, r2, r3, r8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d171      	bne.n	80094c8 <localtime_r+0x114>
 80093e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80093e8:	fb98 f3f2 	sdiv	r3, r8, r2
 80093ec:	fb02 8313 	mls	r3, r2, r3, r8
 80093f0:	fab3 f383 	clz	r3, r3
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	425e      	negs	r6, r3
 80093f8:	4b64      	ldr	r3, [pc, #400]	@ (800958c <localtime_r+0x1d8>)
 80093fa:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 80093fe:	441e      	add	r6, r3
 8009400:	f000 fc08 	bl	8009c14 <__tz_lock>
 8009404:	f000 fc12 	bl	8009c2c <_tzset_unlocked>
 8009408:	4b61      	ldr	r3, [pc, #388]	@ (8009590 <localtime_r+0x1dc>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d06a      	beq.n	80094e6 <localtime_r+0x132>
 8009410:	686b      	ldr	r3, [r5, #4]
 8009412:	4543      	cmp	r3, r8
 8009414:	d15a      	bne.n	80094cc <localtime_r+0x118>
 8009416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941a:	682f      	ldr	r7, [r5, #0]
 800941c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009420:	2f00      	cmp	r7, #0
 8009422:	d15b      	bne.n	80094dc <localtime_r+0x128>
 8009424:	4282      	cmp	r2, r0
 8009426:	eb73 0101 	sbcs.w	r1, r3, r1
 800942a:	db5e      	blt.n	80094ea <localtime_r+0x136>
 800942c:	2301      	movs	r3, #1
 800942e:	6223      	str	r3, [r4, #32]
 8009430:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8009432:	6861      	ldr	r1, [r4, #4]
 8009434:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009438:	fb93 f0f2 	sdiv	r0, r3, r2
 800943c:	fb02 3310 	mls	r3, r2, r0, r3
 8009440:	223c      	movs	r2, #60	@ 0x3c
 8009442:	fb93 f5f2 	sdiv	r5, r3, r2
 8009446:	fb02 3215 	mls	r2, r2, r5, r3
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	1a9b      	subs	r3, r3, r2
 800944e:	68a2      	ldr	r2, [r4, #8]
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	1b49      	subs	r1, r1, r5
 8009454:	1a12      	subs	r2, r2, r0
 8009456:	2b3b      	cmp	r3, #59	@ 0x3b
 8009458:	6061      	str	r1, [r4, #4]
 800945a:	60a2      	str	r2, [r4, #8]
 800945c:	dd51      	ble.n	8009502 <localtime_r+0x14e>
 800945e:	3101      	adds	r1, #1
 8009460:	6061      	str	r1, [r4, #4]
 8009462:	3b3c      	subs	r3, #60	@ 0x3c
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	6863      	ldr	r3, [r4, #4]
 8009468:	2b3b      	cmp	r3, #59	@ 0x3b
 800946a:	dd50      	ble.n	800950e <localtime_r+0x15a>
 800946c:	3201      	adds	r2, #1
 800946e:	60a2      	str	r2, [r4, #8]
 8009470:	3b3c      	subs	r3, #60	@ 0x3c
 8009472:	6063      	str	r3, [r4, #4]
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	2b17      	cmp	r3, #23
 8009478:	dd4f      	ble.n	800951a <localtime_r+0x166>
 800947a:	69e2      	ldr	r2, [r4, #28]
 800947c:	3201      	adds	r2, #1
 800947e:	61e2      	str	r2, [r4, #28]
 8009480:	69a2      	ldr	r2, [r4, #24]
 8009482:	3201      	adds	r2, #1
 8009484:	2a07      	cmp	r2, #7
 8009486:	bfa8      	it	ge
 8009488:	2200      	movge	r2, #0
 800948a:	61a2      	str	r2, [r4, #24]
 800948c:	68e2      	ldr	r2, [r4, #12]
 800948e:	3b18      	subs	r3, #24
 8009490:	3201      	adds	r2, #1
 8009492:	60a3      	str	r3, [r4, #8]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	60e2      	str	r2, [r4, #12]
 8009498:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800949c:	428a      	cmp	r2, r1
 800949e:	dd0e      	ble.n	80094be <localtime_r+0x10a>
 80094a0:	2b0b      	cmp	r3, #11
 80094a2:	eba2 0201 	sub.w	r2, r2, r1
 80094a6:	60e2      	str	r2, [r4, #12]
 80094a8:	f103 0201 	add.w	r2, r3, #1
 80094ac:	bf09      	itett	eq
 80094ae:	6963      	ldreq	r3, [r4, #20]
 80094b0:	6122      	strne	r2, [r4, #16]
 80094b2:	2200      	moveq	r2, #0
 80094b4:	3301      	addeq	r3, #1
 80094b6:	bf02      	ittt	eq
 80094b8:	6122      	streq	r2, [r4, #16]
 80094ba:	6163      	streq	r3, [r4, #20]
 80094bc:	61e2      	streq	r2, [r4, #28]
 80094be:	f000 fbaf 	bl	8009c20 <__tz_unlock>
 80094c2:	4620      	mov	r0, r4
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	2301      	movs	r3, #1
 80094ca:	e794      	b.n	80093f6 <localtime_r+0x42>
 80094cc:	4640      	mov	r0, r8
 80094ce:	f000 faed 	bl	8009aac <__tzcalc_limits>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d19f      	bne.n	8009416 <localtime_r+0x62>
 80094d6:	f04f 33ff 	mov.w	r3, #4294967295
 80094da:	e004      	b.n	80094e6 <localtime_r+0x132>
 80094dc:	4282      	cmp	r2, r0
 80094de:	eb73 0101 	sbcs.w	r1, r3, r1
 80094e2:	da02      	bge.n	80094ea <localtime_r+0x136>
 80094e4:	2300      	movs	r3, #0
 80094e6:	6223      	str	r3, [r4, #32]
 80094e8:	e009      	b.n	80094fe <localtime_r+0x14a>
 80094ea:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80094ee:	4282      	cmp	r2, r0
 80094f0:	418b      	sbcs	r3, r1
 80094f2:	bfb4      	ite	lt
 80094f4:	2301      	movlt	r3, #1
 80094f6:	2300      	movge	r3, #0
 80094f8:	6223      	str	r3, [r4, #32]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d198      	bne.n	8009430 <localtime_r+0x7c>
 80094fe:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009500:	e797      	b.n	8009432 <localtime_r+0x7e>
 8009502:	2b00      	cmp	r3, #0
 8009504:	daaf      	bge.n	8009466 <localtime_r+0xb2>
 8009506:	3901      	subs	r1, #1
 8009508:	6061      	str	r1, [r4, #4]
 800950a:	333c      	adds	r3, #60	@ 0x3c
 800950c:	e7aa      	b.n	8009464 <localtime_r+0xb0>
 800950e:	2b00      	cmp	r3, #0
 8009510:	dab0      	bge.n	8009474 <localtime_r+0xc0>
 8009512:	3a01      	subs	r2, #1
 8009514:	60a2      	str	r2, [r4, #8]
 8009516:	333c      	adds	r3, #60	@ 0x3c
 8009518:	e7ab      	b.n	8009472 <localtime_r+0xbe>
 800951a:	2b00      	cmp	r3, #0
 800951c:	dacf      	bge.n	80094be <localtime_r+0x10a>
 800951e:	69e2      	ldr	r2, [r4, #28]
 8009520:	3a01      	subs	r2, #1
 8009522:	61e2      	str	r2, [r4, #28]
 8009524:	69a2      	ldr	r2, [r4, #24]
 8009526:	3a01      	subs	r2, #1
 8009528:	bf48      	it	mi
 800952a:	2206      	movmi	r2, #6
 800952c:	61a2      	str	r2, [r4, #24]
 800952e:	68e2      	ldr	r2, [r4, #12]
 8009530:	3318      	adds	r3, #24
 8009532:	3a01      	subs	r2, #1
 8009534:	60e2      	str	r2, [r4, #12]
 8009536:	60a3      	str	r3, [r4, #8]
 8009538:	2a00      	cmp	r2, #0
 800953a:	d1c0      	bne.n	80094be <localtime_r+0x10a>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	3b01      	subs	r3, #1
 8009540:	d405      	bmi.n	800954e <localtime_r+0x19a>
 8009542:	6123      	str	r3, [r4, #16]
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800954a:	60e3      	str	r3, [r4, #12]
 800954c:	e7b7      	b.n	80094be <localtime_r+0x10a>
 800954e:	230b      	movs	r3, #11
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	6963      	ldr	r3, [r4, #20]
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	6162      	str	r2, [r4, #20]
 8009558:	0792      	lsls	r2, r2, #30
 800955a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800955e:	d105      	bne.n	800956c <localtime_r+0x1b8>
 8009560:	2164      	movs	r1, #100	@ 0x64
 8009562:	fb93 f2f1 	sdiv	r2, r3, r1
 8009566:	fb01 3212 	mls	r2, r1, r2, r3
 800956a:	b962      	cbnz	r2, 8009586 <localtime_r+0x1d2>
 800956c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009570:	fb93 f1f2 	sdiv	r1, r3, r2
 8009574:	fb02 3311 	mls	r3, r2, r1, r3
 8009578:	fab3 f383 	clz	r3, r3
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8009582:	61e3      	str	r3, [r4, #28]
 8009584:	e7de      	b.n	8009544 <localtime_r+0x190>
 8009586:	2301      	movs	r3, #1
 8009588:	e7f9      	b.n	800957e <localtime_r+0x1ca>
 800958a:	bf00      	nop
 800958c:	0800c6ec 	.word	0x0800c6ec
 8009590:	20005520 	.word	0x20005520

08009594 <validate_structure>:
 8009594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009596:	6801      	ldr	r1, [r0, #0]
 8009598:	293b      	cmp	r1, #59	@ 0x3b
 800959a:	4604      	mov	r4, r0
 800959c:	d911      	bls.n	80095c2 <validate_structure+0x2e>
 800959e:	223c      	movs	r2, #60	@ 0x3c
 80095a0:	4668      	mov	r0, sp
 80095a2:	f000 fe15 	bl	800a1d0 <div>
 80095a6:	9a01      	ldr	r2, [sp, #4]
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	9900      	ldr	r1, [sp, #0]
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	440b      	add	r3, r1
 80095b0:	6063      	str	r3, [r4, #4]
 80095b2:	bfbb      	ittet	lt
 80095b4:	323c      	addlt	r2, #60	@ 0x3c
 80095b6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80095ba:	6022      	strge	r2, [r4, #0]
 80095bc:	6022      	strlt	r2, [r4, #0]
 80095be:	bfb8      	it	lt
 80095c0:	6063      	strlt	r3, [r4, #4]
 80095c2:	6861      	ldr	r1, [r4, #4]
 80095c4:	293b      	cmp	r1, #59	@ 0x3b
 80095c6:	d911      	bls.n	80095ec <validate_structure+0x58>
 80095c8:	223c      	movs	r2, #60	@ 0x3c
 80095ca:	4668      	mov	r0, sp
 80095cc:	f000 fe00 	bl	800a1d0 <div>
 80095d0:	9a01      	ldr	r2, [sp, #4]
 80095d2:	68a3      	ldr	r3, [r4, #8]
 80095d4:	9900      	ldr	r1, [sp, #0]
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	440b      	add	r3, r1
 80095da:	60a3      	str	r3, [r4, #8]
 80095dc:	bfbb      	ittet	lt
 80095de:	323c      	addlt	r2, #60	@ 0x3c
 80095e0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80095e4:	6062      	strge	r2, [r4, #4]
 80095e6:	6062      	strlt	r2, [r4, #4]
 80095e8:	bfb8      	it	lt
 80095ea:	60a3      	strlt	r3, [r4, #8]
 80095ec:	68a1      	ldr	r1, [r4, #8]
 80095ee:	2917      	cmp	r1, #23
 80095f0:	d911      	bls.n	8009616 <validate_structure+0x82>
 80095f2:	2218      	movs	r2, #24
 80095f4:	4668      	mov	r0, sp
 80095f6:	f000 fdeb 	bl	800a1d0 <div>
 80095fa:	9a01      	ldr	r2, [sp, #4]
 80095fc:	68e3      	ldr	r3, [r4, #12]
 80095fe:	9900      	ldr	r1, [sp, #0]
 8009600:	2a00      	cmp	r2, #0
 8009602:	440b      	add	r3, r1
 8009604:	60e3      	str	r3, [r4, #12]
 8009606:	bfbb      	ittet	lt
 8009608:	3218      	addlt	r2, #24
 800960a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800960e:	60a2      	strge	r2, [r4, #8]
 8009610:	60a2      	strlt	r2, [r4, #8]
 8009612:	bfb8      	it	lt
 8009614:	60e3      	strlt	r3, [r4, #12]
 8009616:	6921      	ldr	r1, [r4, #16]
 8009618:	290b      	cmp	r1, #11
 800961a:	d911      	bls.n	8009640 <validate_structure+0xac>
 800961c:	220c      	movs	r2, #12
 800961e:	4668      	mov	r0, sp
 8009620:	f000 fdd6 	bl	800a1d0 <div>
 8009624:	9a01      	ldr	r2, [sp, #4]
 8009626:	6963      	ldr	r3, [r4, #20]
 8009628:	9900      	ldr	r1, [sp, #0]
 800962a:	2a00      	cmp	r2, #0
 800962c:	440b      	add	r3, r1
 800962e:	6163      	str	r3, [r4, #20]
 8009630:	bfbb      	ittet	lt
 8009632:	320c      	addlt	r2, #12
 8009634:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009638:	6122      	strge	r2, [r4, #16]
 800963a:	6122      	strlt	r2, [r4, #16]
 800963c:	bfb8      	it	lt
 800963e:	6163      	strlt	r3, [r4, #20]
 8009640:	6963      	ldr	r3, [r4, #20]
 8009642:	079a      	lsls	r2, r3, #30
 8009644:	d11c      	bne.n	8009680 <validate_structure+0xec>
 8009646:	2164      	movs	r1, #100	@ 0x64
 8009648:	fb93 f2f1 	sdiv	r2, r3, r1
 800964c:	fb01 3212 	mls	r2, r1, r2, r3
 8009650:	b9c2      	cbnz	r2, 8009684 <validate_structure+0xf0>
 8009652:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8009656:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800965a:	fb93 f1f2 	sdiv	r1, r3, r2
 800965e:	fb02 3311 	mls	r3, r2, r1, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	bf0c      	ite	eq
 8009666:	231d      	moveq	r3, #29
 8009668:	231c      	movne	r3, #28
 800966a:	68e2      	ldr	r2, [r4, #12]
 800966c:	2a00      	cmp	r2, #0
 800966e:	dc0b      	bgt.n	8009688 <validate_structure+0xf4>
 8009670:	4d31      	ldr	r5, [pc, #196]	@ (8009738 <validate_structure+0x1a4>)
 8009672:	200b      	movs	r0, #11
 8009674:	2164      	movs	r1, #100	@ 0x64
 8009676:	68e6      	ldr	r6, [r4, #12]
 8009678:	2e00      	cmp	r6, #0
 800967a:	dd30      	ble.n	80096de <validate_structure+0x14a>
 800967c:	b003      	add	sp, #12
 800967e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009680:	231c      	movs	r3, #28
 8009682:	e7f2      	b.n	800966a <validate_structure+0xd6>
 8009684:	231d      	movs	r3, #29
 8009686:	e7f0      	b.n	800966a <validate_structure+0xd6>
 8009688:	4d2b      	ldr	r5, [pc, #172]	@ (8009738 <validate_structure+0x1a4>)
 800968a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800968e:	2a01      	cmp	r2, #1
 8009690:	bf14      	ite	ne
 8009692:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8009696:	4618      	moveq	r0, r3
 8009698:	4281      	cmp	r1, r0
 800969a:	ddef      	ble.n	800967c <validate_structure+0xe8>
 800969c:	3201      	adds	r2, #1
 800969e:	1a09      	subs	r1, r1, r0
 80096a0:	2a0c      	cmp	r2, #12
 80096a2:	60e1      	str	r1, [r4, #12]
 80096a4:	6122      	str	r2, [r4, #16]
 80096a6:	d1f0      	bne.n	800968a <validate_structure+0xf6>
 80096a8:	6963      	ldr	r3, [r4, #20]
 80096aa:	2100      	movs	r1, #0
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	6121      	str	r1, [r4, #16]
 80096b0:	0791      	lsls	r1, r2, #30
 80096b2:	6162      	str	r2, [r4, #20]
 80096b4:	d13c      	bne.n	8009730 <validate_structure+0x19c>
 80096b6:	2164      	movs	r1, #100	@ 0x64
 80096b8:	fb92 f0f1 	sdiv	r0, r2, r1
 80096bc:	fb01 2210 	mls	r2, r1, r0, r2
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	d137      	bne.n	8009734 <validate_structure+0x1a0>
 80096c4:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80096c8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80096cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80096d0:	fb02 3311 	mls	r3, r2, r1, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bf0c      	ite	eq
 80096d8:	231d      	moveq	r3, #29
 80096da:	231c      	movne	r3, #28
 80096dc:	e7d5      	b.n	800968a <validate_structure+0xf6>
 80096de:	6922      	ldr	r2, [r4, #16]
 80096e0:	3a01      	subs	r2, #1
 80096e2:	6122      	str	r2, [r4, #16]
 80096e4:	3201      	adds	r2, #1
 80096e6:	d116      	bne.n	8009716 <validate_structure+0x182>
 80096e8:	6963      	ldr	r3, [r4, #20]
 80096ea:	1e5a      	subs	r2, r3, #1
 80096ec:	0797      	lsls	r7, r2, #30
 80096ee:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80096f2:	d119      	bne.n	8009728 <validate_structure+0x194>
 80096f4:	fb92 f7f1 	sdiv	r7, r2, r1
 80096f8:	fb01 2217 	mls	r2, r1, r7, r2
 80096fc:	b9b2      	cbnz	r2, 800972c <validate_structure+0x198>
 80096fe:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009702:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009706:	fb93 f7f2 	sdiv	r7, r3, r2
 800970a:	fb02 3317 	mls	r3, r2, r7, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf0c      	ite	eq
 8009712:	231d      	moveq	r3, #29
 8009714:	231c      	movne	r3, #28
 8009716:	6922      	ldr	r2, [r4, #16]
 8009718:	2a01      	cmp	r2, #1
 800971a:	bf14      	ite	ne
 800971c:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8009720:	461a      	moveq	r2, r3
 8009722:	4432      	add	r2, r6
 8009724:	60e2      	str	r2, [r4, #12]
 8009726:	e7a6      	b.n	8009676 <validate_structure+0xe2>
 8009728:	231c      	movs	r3, #28
 800972a:	e7f4      	b.n	8009716 <validate_structure+0x182>
 800972c:	231d      	movs	r3, #29
 800972e:	e7f2      	b.n	8009716 <validate_structure+0x182>
 8009730:	231c      	movs	r3, #28
 8009732:	e7aa      	b.n	800968a <validate_structure+0xf6>
 8009734:	231d      	movs	r3, #29
 8009736:	e7a8      	b.n	800968a <validate_structure+0xf6>
 8009738:	0800c6bc 	.word	0x0800c6bc

0800973c <mktime>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	b085      	sub	sp, #20
 8009742:	4607      	mov	r7, r0
 8009744:	f002 f878 	bl	800b838 <__gettzinfo>
 8009748:	4681      	mov	r9, r0
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ff22 	bl	8009594 <validate_structure>
 8009750:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009754:	223c      	movs	r2, #60	@ 0x3c
 8009756:	fb02 4403 	mla	r4, r2, r3, r4
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	697d      	ldr	r5, [r7, #20]
 800975e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009762:	fb02 4403 	mla	r4, r2, r3, r4
 8009766:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800976a:	4ac3      	ldr	r2, [pc, #780]	@ (8009a78 <mktime+0x33c>)
 800976c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009770:	3e01      	subs	r6, #1
 8009772:	2b01      	cmp	r3, #1
 8009774:	4416      	add	r6, r2
 8009776:	dd11      	ble.n	800979c <mktime+0x60>
 8009778:	07a9      	lsls	r1, r5, #30
 800977a:	d10f      	bne.n	800979c <mktime+0x60>
 800977c:	2264      	movs	r2, #100	@ 0x64
 800977e:	fb95 f3f2 	sdiv	r3, r5, r2
 8009782:	fb02 5313 	mls	r3, r2, r3, r5
 8009786:	b943      	cbnz	r3, 800979a <mktime+0x5e>
 8009788:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800978c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009790:	fb93 f1f2 	sdiv	r1, r3, r2
 8009794:	fb02 3311 	mls	r3, r2, r1, r3
 8009798:	b903      	cbnz	r3, 800979c <mktime+0x60>
 800979a:	3601      	adds	r6, #1
 800979c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80097a0:	3310      	adds	r3, #16
 80097a2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80097a6:	4293      	cmp	r3, r2
 80097a8:	61fe      	str	r6, [r7, #28]
 80097aa:	f200 8170 	bhi.w	8009a8e <mktime+0x352>
 80097ae:	2d46      	cmp	r5, #70	@ 0x46
 80097b0:	f340 80b6 	ble.w	8009920 <mktime+0x1e4>
 80097b4:	2346      	movs	r3, #70	@ 0x46
 80097b6:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80097ba:	2164      	movs	r1, #100	@ 0x64
 80097bc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80097c0:	079a      	lsls	r2, r3, #30
 80097c2:	f040 80a7 	bne.w	8009914 <mktime+0x1d8>
 80097c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80097ca:	fb01 3212 	mls	r2, r1, r2, r3
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	f040 80a3 	bne.w	800991a <mktime+0x1de>
 80097d4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80097d8:	fb92 fef0 	sdiv	lr, r2, r0
 80097dc:	fb00 221e 	mls	r2, r0, lr, r2
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	bf0c      	ite	eq
 80097e4:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80097e8:	4662      	movne	r2, ip
 80097ea:	3301      	adds	r3, #1
 80097ec:	429d      	cmp	r5, r3
 80097ee:	4416      	add	r6, r2
 80097f0:	d1e6      	bne.n	80097c0 <mktime+0x84>
 80097f2:	4ba2      	ldr	r3, [pc, #648]	@ (8009a7c <mktime+0x340>)
 80097f4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80097f8:	fbc6 4803 	smlal	r4, r8, r6, r3
 80097fc:	f000 fa0a 	bl	8009c14 <__tz_lock>
 8009800:	f000 fa14 	bl	8009c2c <_tzset_unlocked>
 8009804:	4b9e      	ldr	r3, [pc, #632]	@ (8009a80 <mktime+0x344>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8147 	beq.w	8009a9c <mktime+0x360>
 800980e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8009812:	6978      	ldr	r0, [r7, #20]
 8009814:	4653      	mov	r3, sl
 8009816:	2b01      	cmp	r3, #1
 8009818:	bfa8      	it	ge
 800981a:	2301      	movge	r3, #1
 800981c:	9301      	str	r3, [sp, #4]
 800981e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009822:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009826:	4283      	cmp	r3, r0
 8009828:	f040 80bd 	bne.w	80099a6 <mktime+0x26a>
 800982c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8009830:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8009834:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8009838:	1a13      	subs	r3, r2, r0
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8009840:	9302      	str	r3, [sp, #8]
 8009842:	9a02      	ldr	r2, [sp, #8]
 8009844:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009848:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800984c:	ebb2 0e03 	subs.w	lr, r2, r3
 8009850:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8009854:	4574      	cmp	r4, lr
 8009856:	eb78 0201 	sbcs.w	r2, r8, r1
 800985a:	f280 80c7 	bge.w	80099ec <mktime+0x2b0>
 800985e:	f8d9 2000 	ldr.w	r2, [r9]
 8009862:	2a00      	cmp	r2, #0
 8009864:	f000 80d0 	beq.w	8009a08 <mktime+0x2cc>
 8009868:	9a03      	ldr	r2, [sp, #12]
 800986a:	4294      	cmp	r4, r2
 800986c:	eb78 020b 	sbcs.w	r2, r8, fp
 8009870:	f2c0 8111 	blt.w	8009a96 <mktime+0x35a>
 8009874:	4574      	cmp	r4, lr
 8009876:	eb78 0101 	sbcs.w	r1, r8, r1
 800987a:	bfb4      	ite	lt
 800987c:	f04f 0b01 	movlt.w	fp, #1
 8009880:	f04f 0b00 	movge.w	fp, #0
 8009884:	f1ba 0f00 	cmp.w	sl, #0
 8009888:	f2c0 8094 	blt.w	80099b4 <mktime+0x278>
 800988c:	9a01      	ldr	r2, [sp, #4]
 800988e:	ea82 0a0b 	eor.w	sl, r2, fp
 8009892:	f1ba 0f01 	cmp.w	sl, #1
 8009896:	f040 808d 	bne.w	80099b4 <mktime+0x278>
 800989a:	f1bb 0f00 	cmp.w	fp, #0
 800989e:	f000 80c2 	beq.w	8009a26 <mktime+0x2ea>
 80098a2:	1a1b      	subs	r3, r3, r0
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	441a      	add	r2, r3
 80098a8:	191c      	adds	r4, r3, r4
 80098aa:	603a      	str	r2, [r7, #0]
 80098ac:	4638      	mov	r0, r7
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	9201      	str	r2, [sp, #4]
 80098b2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80098b6:	f7ff fe6d 	bl	8009594 <validate_structure>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	9a01      	ldr	r2, [sp, #4]
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	d078      	beq.n	80099b4 <mktime+0x278>
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	f300 80b1 	bgt.w	8009a2a <mktime+0x2ee>
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098cc:	bfa8      	it	ge
 80098ce:	469a      	movge	sl, r3
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	eb1a 0303 	adds.w	r3, sl, r3
 80098d6:	4456      	add	r6, sl
 80098d8:	f140 80b0 	bpl.w	8009a3c <mktime+0x300>
 80098dc:	1e6b      	subs	r3, r5, #1
 80098de:	0799      	lsls	r1, r3, #30
 80098e0:	f040 80a6 	bne.w	8009a30 <mktime+0x2f4>
 80098e4:	2264      	movs	r2, #100	@ 0x64
 80098e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80098ea:	fb02 3311 	mls	r3, r2, r1, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80a1 	bne.w	8009a36 <mktime+0x2fa>
 80098f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80098f8:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 80098fc:	fb95 f2f3 	sdiv	r2, r5, r3
 8009900:	fb03 5512 	mls	r5, r3, r2, r5
 8009904:	2d00      	cmp	r5, #0
 8009906:	f240 136d 	movw	r3, #365	@ 0x16d
 800990a:	bf18      	it	ne
 800990c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8009910:	61fb      	str	r3, [r7, #28]
 8009912:	e04f      	b.n	80099b4 <mktime+0x278>
 8009914:	f240 126d 	movw	r2, #365	@ 0x16d
 8009918:	e767      	b.n	80097ea <mktime+0xae>
 800991a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800991e:	e764      	b.n	80097ea <mktime+0xae>
 8009920:	f43f af67 	beq.w	80097f2 <mktime+0xb6>
 8009924:	2345      	movs	r3, #69	@ 0x45
 8009926:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800992a:	2164      	movs	r1, #100	@ 0x64
 800992c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009930:	e012      	b.n	8009958 <mktime+0x21c>
 8009932:	bb62      	cbnz	r2, 800998e <mktime+0x252>
 8009934:	fb93 f2f1 	sdiv	r2, r3, r1
 8009938:	fb01 3212 	mls	r2, r1, r2, r3
 800993c:	bb52      	cbnz	r2, 8009994 <mktime+0x258>
 800993e:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009942:	fb92 fef0 	sdiv	lr, r2, r0
 8009946:	fb00 221e 	mls	r2, r0, lr, r2
 800994a:	2a00      	cmp	r2, #0
 800994c:	bf0c      	ite	eq
 800994e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009952:	4662      	movne	r2, ip
 8009954:	1ab6      	subs	r6, r6, r2
 8009956:	3b01      	subs	r3, #1
 8009958:	429d      	cmp	r5, r3
 800995a:	f003 0203 	and.w	r2, r3, #3
 800995e:	dbe8      	blt.n	8009932 <mktime+0x1f6>
 8009960:	b9da      	cbnz	r2, 800999a <mktime+0x25e>
 8009962:	2264      	movs	r2, #100	@ 0x64
 8009964:	fb95 f3f2 	sdiv	r3, r5, r2
 8009968:	fb02 5313 	mls	r3, r2, r3, r5
 800996c:	b9c3      	cbnz	r3, 80099a0 <mktime+0x264>
 800996e:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009972:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009976:	fb93 f1f2 	sdiv	r1, r3, r2
 800997a:	fb02 3311 	mls	r3, r2, r1, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	f240 136d 	movw	r3, #365	@ 0x16d
 8009984:	bf08      	it	eq
 8009986:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800998a:	1af6      	subs	r6, r6, r3
 800998c:	e731      	b.n	80097f2 <mktime+0xb6>
 800998e:	f240 126d 	movw	r2, #365	@ 0x16d
 8009992:	e7df      	b.n	8009954 <mktime+0x218>
 8009994:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009998:	e7dc      	b.n	8009954 <mktime+0x218>
 800999a:	f240 136d 	movw	r3, #365	@ 0x16d
 800999e:	e7f4      	b.n	800998a <mktime+0x24e>
 80099a0:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80099a4:	e7f1      	b.n	800998a <mktime+0x24e>
 80099a6:	f000 f881 	bl	8009aac <__tzcalc_limits>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f47f af3e 	bne.w	800982c <mktime+0xf0>
 80099b0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80099b4:	f1bb 0f01 	cmp.w	fp, #1
 80099b8:	d172      	bne.n	8009aa0 <mktime+0x364>
 80099ba:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80099be:	191c      	adds	r4, r3, r4
 80099c0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80099c4:	f04f 0b01 	mov.w	fp, #1
 80099c8:	f000 f92a 	bl	8009c20 <__tz_unlock>
 80099cc:	3604      	adds	r6, #4
 80099ce:	2307      	movs	r3, #7
 80099d0:	fb96 f3f3 	sdiv	r3, r6, r3
 80099d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80099d8:	1af6      	subs	r6, r6, r3
 80099da:	d456      	bmi.n	8009a8a <mktime+0x34e>
 80099dc:	f8c7 b020 	str.w	fp, [r7, #32]
 80099e0:	61be      	str	r6, [r7, #24]
 80099e2:	4620      	mov	r0, r4
 80099e4:	4641      	mov	r1, r8
 80099e6:	b005      	add	sp, #20
 80099e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ec:	9a02      	ldr	r2, [sp, #8]
 80099ee:	1a12      	subs	r2, r2, r0
 80099f0:	9202      	str	r2, [sp, #8]
 80099f2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 80099f6:	eb6c 0c02 	sbc.w	ip, ip, r2
 80099fa:	9a02      	ldr	r2, [sp, #8]
 80099fc:	4294      	cmp	r4, r2
 80099fe:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8009a02:	f6bf af2c 	bge.w	800985e <mktime+0x122>
 8009a06:	e7d3      	b.n	80099b0 <mktime+0x274>
 8009a08:	9a03      	ldr	r2, [sp, #12]
 8009a0a:	4294      	cmp	r4, r2
 8009a0c:	eb78 020b 	sbcs.w	r2, r8, fp
 8009a10:	f6ff af30 	blt.w	8009874 <mktime+0x138>
 8009a14:	f1ba 0f00 	cmp.w	sl, #0
 8009a18:	dbcf      	blt.n	80099ba <mktime+0x27e>
 8009a1a:	f04f 0b01 	mov.w	fp, #1
 8009a1e:	e735      	b.n	800988c <mktime+0x150>
 8009a20:	f04f 0b00 	mov.w	fp, #0
 8009a24:	e732      	b.n	800988c <mktime+0x150>
 8009a26:	1ac3      	subs	r3, r0, r3
 8009a28:	e73c      	b.n	80098a4 <mktime+0x168>
 8009a2a:	f04f 3aff 	mov.w	sl, #4294967295
 8009a2e:	e74f      	b.n	80098d0 <mktime+0x194>
 8009a30:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8009a34:	e76c      	b.n	8009910 <mktime+0x1d4>
 8009a36:	f240 136d 	movw	r3, #365	@ 0x16d
 8009a3a:	e769      	b.n	8009910 <mktime+0x1d4>
 8009a3c:	07aa      	lsls	r2, r5, #30
 8009a3e:	d117      	bne.n	8009a70 <mktime+0x334>
 8009a40:	2164      	movs	r1, #100	@ 0x64
 8009a42:	fb95 f2f1 	sdiv	r2, r5, r1
 8009a46:	fb01 5212 	mls	r2, r1, r2, r5
 8009a4a:	b9da      	cbnz	r2, 8009a84 <mktime+0x348>
 8009a4c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009a50:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8009a54:	fb95 f1f2 	sdiv	r1, r5, r2
 8009a58:	fb02 5511 	mls	r5, r2, r1, r5
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	f240 126d 	movw	r2, #365	@ 0x16d
 8009a62:	bf08      	it	eq
 8009a64:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	bfa8      	it	ge
 8009a6c:	1a9b      	subge	r3, r3, r2
 8009a6e:	e74f      	b.n	8009910 <mktime+0x1d4>
 8009a70:	f240 126d 	movw	r2, #365	@ 0x16d
 8009a74:	e7f8      	b.n	8009a68 <mktime+0x32c>
 8009a76:	bf00      	nop
 8009a78:	0800c68c 	.word	0x0800c68c
 8009a7c:	00015180 	.word	0x00015180
 8009a80:	20005520 	.word	0x20005520
 8009a84:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009a88:	e7ee      	b.n	8009a68 <mktime+0x32c>
 8009a8a:	3607      	adds	r6, #7
 8009a8c:	e7a6      	b.n	80099dc <mktime+0x2a0>
 8009a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8009a92:	46a0      	mov	r8, r4
 8009a94:	e7a5      	b.n	80099e2 <mktime+0x2a6>
 8009a96:	f1ba 0f00 	cmp.w	sl, #0
 8009a9a:	dac1      	bge.n	8009a20 <mktime+0x2e4>
 8009a9c:	f04f 0b00 	mov.w	fp, #0
 8009aa0:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009aa4:	191c      	adds	r4, r3, r4
 8009aa6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009aaa:	e78d      	b.n	80099c8 <mktime+0x28c>

08009aac <__tzcalc_limits>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	f001 fec1 	bl	800b838 <__gettzinfo>
 8009ab6:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8009aba:	429c      	cmp	r4, r3
 8009abc:	f340 80a3 	ble.w	8009c06 <__tzcalc_limits+0x15a>
 8009ac0:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8009ac4:	1865      	adds	r5, r4, r1
 8009ac6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8009aca:	f240 126d 	movw	r2, #365	@ 0x16d
 8009ace:	10ad      	asrs	r5, r5, #2
 8009ad0:	fb02 5503 	mla	r5, r2, r3, r5
 8009ad4:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 8009ad8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8009adc:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8009ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ae4:	441d      	add	r5, r3
 8009ae6:	19a3      	adds	r3, r4, r6
 8009ae8:	4e48      	ldr	r6, [pc, #288]	@ (8009c0c <__tzcalc_limits+0x160>)
 8009aea:	6044      	str	r4, [r0, #4]
 8009aec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009af0:	4601      	mov	r1, r0
 8009af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af6:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 8009afa:	441d      	add	r5, r3
 8009afc:	7a0b      	ldrb	r3, [r1, #8]
 8009afe:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8009b02:	2b4a      	cmp	r3, #74	@ 0x4a
 8009b04:	d138      	bne.n	8009b78 <__tzcalc_limits+0xcc>
 8009b06:	07a2      	lsls	r2, r4, #30
 8009b08:	eb05 030c 	add.w	r3, r5, ip
 8009b0c:	d106      	bne.n	8009b1c <__tzcalc_limits+0x70>
 8009b0e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8009b12:	fb94 f2fe 	sdiv	r2, r4, lr
 8009b16:	fb0e 4212 	mls	r2, lr, r2, r4
 8009b1a:	b932      	cbnz	r2, 8009b2a <__tzcalc_limits+0x7e>
 8009b1c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8009b20:	fb94 f2fe 	sdiv	r2, r4, lr
 8009b24:	fb0e 4212 	mls	r2, lr, r2, r4
 8009b28:	bb1a      	cbnz	r2, 8009b72 <__tzcalc_limits+0xc6>
 8009b2a:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8009b2e:	bfd4      	ite	le
 8009b30:	f04f 0c00 	movle.w	ip, #0
 8009b34:	f04f 0c01 	movgt.w	ip, #1
 8009b38:	4463      	add	r3, ip
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	698a      	ldr	r2, [r1, #24]
 8009b3e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009b42:	fbc3 2c06 	smlal	r2, ip, r3, r6
 8009b46:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009b48:	18d2      	adds	r2, r2, r3
 8009b4a:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 8009b4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8009b52:	3128      	adds	r1, #40	@ 0x28
 8009b54:	428f      	cmp	r7, r1
 8009b56:	d1d1      	bne.n	8009afc <__tzcalc_limits+0x50>
 8009b58:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8009b5c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8009b60:	428c      	cmp	r4, r1
 8009b62:	4193      	sbcs	r3, r2
 8009b64:	bfb4      	ite	lt
 8009b66:	2301      	movlt	r3, #1
 8009b68:	2300      	movge	r3, #0
 8009b6a:	6003      	str	r3, [r0, #0]
 8009b6c:	2001      	movs	r0, #1
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	f04f 0c00 	mov.w	ip, #0
 8009b76:	e7df      	b.n	8009b38 <__tzcalc_limits+0x8c>
 8009b78:	2b44      	cmp	r3, #68	@ 0x44
 8009b7a:	d102      	bne.n	8009b82 <__tzcalc_limits+0xd6>
 8009b7c:	eb05 030c 	add.w	r3, r5, ip
 8009b80:	e7dc      	b.n	8009b3c <__tzcalc_limits+0x90>
 8009b82:	07a3      	lsls	r3, r4, #30
 8009b84:	d105      	bne.n	8009b92 <__tzcalc_limits+0xe6>
 8009b86:	2264      	movs	r2, #100	@ 0x64
 8009b88:	fb94 f3f2 	sdiv	r3, r4, r2
 8009b8c:	fb02 4313 	mls	r3, r2, r3, r4
 8009b90:	bb93      	cbnz	r3, 8009bf8 <__tzcalc_limits+0x14c>
 8009b92:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009b96:	fb94 f3f2 	sdiv	r3, r4, r2
 8009b9a:	fb02 4313 	mls	r3, r2, r3, r4
 8009b9e:	fab3 f383 	clz	r3, r3
 8009ba2:	095b      	lsrs	r3, r3, #5
 8009ba4:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8009c10 <__tzcalc_limits+0x164>
 8009ba8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8009bac:	425b      	negs	r3, r3
 8009bae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	f04f 0800 	mov.w	r8, #0
 8009bb8:	4473      	add	r3, lr
 8009bba:	f108 0801 	add.w	r8, r8, #1
 8009bbe:	45c1      	cmp	r9, r8
 8009bc0:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8009bc4:	dc1a      	bgt.n	8009bfc <__tzcalc_limits+0x150>
 8009bc6:	f102 0804 	add.w	r8, r2, #4
 8009bca:	2307      	movs	r3, #7
 8009bcc:	fb98 f3f3 	sdiv	r3, r8, r3
 8009bd0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009bd4:	eba8 0303 	sub.w	r3, r8, r3
 8009bd8:	ebbc 0c03 	subs.w	ip, ip, r3
 8009bdc:	690b      	ldr	r3, [r1, #16]
 8009bde:	f103 33ff 	add.w	r3, r3, #4294967295
 8009be2:	bf48      	it	mi
 8009be4:	f10c 0c07 	addmi.w	ip, ip, #7
 8009be8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009bec:	449c      	add	ip, r3
 8009bee:	45f4      	cmp	ip, lr
 8009bf0:	da06      	bge.n	8009c00 <__tzcalc_limits+0x154>
 8009bf2:	eb02 030c 	add.w	r3, r2, ip
 8009bf6:	e7a1      	b.n	8009b3c <__tzcalc_limits+0x90>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e7d3      	b.n	8009ba4 <__tzcalc_limits+0xf8>
 8009bfc:	4472      	add	r2, lr
 8009bfe:	e7dc      	b.n	8009bba <__tzcalc_limits+0x10e>
 8009c00:	f1ac 0c07 	sub.w	ip, ip, #7
 8009c04:	e7f3      	b.n	8009bee <__tzcalc_limits+0x142>
 8009c06:	2000      	movs	r0, #0
 8009c08:	e7b1      	b.n	8009b6e <__tzcalc_limits+0xc2>
 8009c0a:	bf00      	nop
 8009c0c:	00015180 	.word	0x00015180
 8009c10:	0800c6e8 	.word	0x0800c6e8

08009c14 <__tz_lock>:
 8009c14:	4801      	ldr	r0, [pc, #4]	@ (8009c1c <__tz_lock+0x8>)
 8009c16:	f000 baa2 	b.w	800a15e <__retarget_lock_acquire>
 8009c1a:	bf00      	nop
 8009c1c:	20005528 	.word	0x20005528

08009c20 <__tz_unlock>:
 8009c20:	4801      	ldr	r0, [pc, #4]	@ (8009c28 <__tz_unlock+0x8>)
 8009c22:	f000 ba9e 	b.w	800a162 <__retarget_lock_release>
 8009c26:	bf00      	nop
 8009c28:	20005528 	.word	0x20005528

08009c2c <_tzset_unlocked>:
 8009c2c:	4b01      	ldr	r3, [pc, #4]	@ (8009c34 <_tzset_unlocked+0x8>)
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	f000 b802 	b.w	8009c38 <_tzset_unlocked_r>
 8009c34:	2000002c 	.word	0x2000002c

08009c38 <_tzset_unlocked_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	b08d      	sub	sp, #52	@ 0x34
 8009c3e:	4607      	mov	r7, r0
 8009c40:	f001 fdfa 	bl	800b838 <__gettzinfo>
 8009c44:	49bc      	ldr	r1, [pc, #752]	@ (8009f38 <_tzset_unlocked_r+0x300>)
 8009c46:	4dbd      	ldr	r5, [pc, #756]	@ (8009f3c <_tzset_unlocked_r+0x304>)
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f000 fb4e 	bl	800a2ec <_getenv_r>
 8009c50:	4606      	mov	r6, r0
 8009c52:	bb10      	cbnz	r0, 8009c9a <_tzset_unlocked_r+0x62>
 8009c54:	4bba      	ldr	r3, [pc, #744]	@ (8009f40 <_tzset_unlocked_r+0x308>)
 8009c56:	4abb      	ldr	r2, [pc, #748]	@ (8009f44 <_tzset_unlocked_r+0x30c>)
 8009c58:	6018      	str	r0, [r3, #0]
 8009c5a:	4bbb      	ldr	r3, [pc, #748]	@ (8009f48 <_tzset_unlocked_r+0x310>)
 8009c5c:	62a0      	str	r0, [r4, #40]	@ 0x28
 8009c5e:	6018      	str	r0, [r3, #0]
 8009c60:	4bba      	ldr	r3, [pc, #744]	@ (8009f4c <_tzset_unlocked_r+0x314>)
 8009c62:	6520      	str	r0, [r4, #80]	@ 0x50
 8009c64:	e9c3 2200 	strd	r2, r2, [r3]
 8009c68:	214a      	movs	r1, #74	@ 0x4a
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8009c72:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8009c76:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8009c7a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009c7e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009c82:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8009c86:	6828      	ldr	r0, [r5, #0]
 8009c88:	7221      	strb	r1, [r4, #8]
 8009c8a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009c8e:	f000 fb3d 	bl	800a30c <free>
 8009c92:	602e      	str	r6, [r5, #0]
 8009c94:	b00d      	add	sp, #52	@ 0x34
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	6829      	ldr	r1, [r5, #0]
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	f040 808e 	bne.w	8009dbe <_tzset_unlocked_r+0x186>
 8009ca2:	6828      	ldr	r0, [r5, #0]
 8009ca4:	f000 fb32 	bl	800a30c <free>
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7f6 faa3 	bl	80001f4 <strlen>
 8009cae:	1c41      	adds	r1, r0, #1
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f000 fb55 	bl	800a360 <_malloc_r>
 8009cb6:	6028      	str	r0, [r5, #0]
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	f040 8086 	bne.w	8009dca <_tzset_unlocked_r+0x192>
 8009cbe:	4aa2      	ldr	r2, [pc, #648]	@ (8009f48 <_tzset_unlocked_r+0x310>)
 8009cc0:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8009f4c <_tzset_unlocked_r+0x314>
 8009cc4:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8009f40 <_tzset_unlocked_r+0x308>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	4aa0      	ldr	r2, [pc, #640]	@ (8009f50 <_tzset_unlocked_r+0x318>)
 8009cce:	f8ca 3000 	str.w	r3, [sl]
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	e9c8 2200 	strd	r2, r2, [r8]
 8009cda:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8009cde:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8009ce2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8009ce6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8009cea:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8009cee:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8009cf2:	224a      	movs	r2, #74	@ 0x4a
 8009cf4:	7222      	strb	r2, [r4, #8]
 8009cf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cf8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8009cfc:	6523      	str	r3, [r4, #80]	@ 0x50
 8009cfe:	7833      	ldrb	r3, [r6, #0]
 8009d00:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d02:	bf08      	it	eq
 8009d04:	3601      	addeq	r6, #1
 8009d06:	7833      	ldrb	r3, [r6, #0]
 8009d08:	2b3c      	cmp	r3, #60	@ 0x3c
 8009d0a:	d162      	bne.n	8009dd2 <_tzset_unlocked_r+0x19a>
 8009d0c:	1c75      	adds	r5, r6, #1
 8009d0e:	4a91      	ldr	r2, [pc, #580]	@ (8009f54 <_tzset_unlocked_r+0x31c>)
 8009d10:	4991      	ldr	r1, [pc, #580]	@ (8009f58 <_tzset_unlocked_r+0x320>)
 8009d12:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d14:	4628      	mov	r0, r5
 8009d16:	f7ff f95b 	bl	8008fd0 <siscanf>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	ddba      	ble.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009d1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d20:	1eda      	subs	r2, r3, #3
 8009d22:	2a07      	cmp	r2, #7
 8009d24:	d8b6      	bhi.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009d26:	5ceb      	ldrb	r3, [r5, r3]
 8009d28:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d2a:	d1b3      	bne.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009d2c:	3602      	adds	r6, #2
 8009d2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d30:	18f5      	adds	r5, r6, r3
 8009d32:	5cf3      	ldrb	r3, [r6, r3]
 8009d34:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d36:	d15a      	bne.n	8009dee <_tzset_unlocked_r+0x1b6>
 8009d38:	3501      	adds	r5, #1
 8009d3a:	f04f 39ff 	mov.w	r9, #4294967295
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009d44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009d48:	af08      	add	r7, sp, #32
 8009d4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d4c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	f10d 031e 	add.w	r3, sp, #30
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	4980      	ldr	r1, [pc, #512]	@ (8009f5c <_tzset_unlocked_r+0x324>)
 8009d5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d5c:	aa07      	add	r2, sp, #28
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f7ff f936 	bl	8008fd0 <siscanf>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	dd95      	ble.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009d68:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009d6c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8009d70:	223c      	movs	r2, #60	@ 0x3c
 8009d72:	fb02 6603 	mla	r6, r2, r3, r6
 8009d76:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009d7a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009d7e:	fb02 6603 	mla	r6, r2, r3, r6
 8009d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d84:	fb09 f606 	mul.w	r6, r9, r6
 8009d88:	eb05 0903 	add.w	r9, r5, r3
 8009d8c:	5ceb      	ldrb	r3, [r5, r3]
 8009d8e:	2b3c      	cmp	r3, #60	@ 0x3c
 8009d90:	f040 80ee 	bne.w	8009f70 <_tzset_unlocked_r+0x338>
 8009d94:	f109 0501 	add.w	r5, r9, #1
 8009d98:	4a71      	ldr	r2, [pc, #452]	@ (8009f60 <_tzset_unlocked_r+0x328>)
 8009d9a:	496f      	ldr	r1, [pc, #444]	@ (8009f58 <_tzset_unlocked_r+0x320>)
 8009d9c:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f7ff f916 	bl	8008fd0 <siscanf>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	dc28      	bgt.n	8009dfa <_tzset_unlocked_r+0x1c2>
 8009da8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009dac:	2b3e      	cmp	r3, #62	@ 0x3e
 8009dae:	d124      	bne.n	8009dfa <_tzset_unlocked_r+0x1c2>
 8009db0:	4b68      	ldr	r3, [pc, #416]	@ (8009f54 <_tzset_unlocked_r+0x31c>)
 8009db2:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009db4:	e9c8 3300 	strd	r3, r3, [r8]
 8009db8:	f8ca 6000 	str.w	r6, [sl]
 8009dbc:	e76a      	b.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009dbe:	f7f6 fa0f 	bl	80001e0 <strcmp>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	f47f af6d 	bne.w	8009ca2 <_tzset_unlocked_r+0x6a>
 8009dc8:	e764      	b.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009dca:	4631      	mov	r1, r6
 8009dcc:	f000 f9cb 	bl	800a166 <strcpy>
 8009dd0:	e775      	b.n	8009cbe <_tzset_unlocked_r+0x86>
 8009dd2:	4a60      	ldr	r2, [pc, #384]	@ (8009f54 <_tzset_unlocked_r+0x31c>)
 8009dd4:	4963      	ldr	r1, [pc, #396]	@ (8009f64 <_tzset_unlocked_r+0x32c>)
 8009dd6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff f8f9 	bl	8008fd0 <siscanf>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f77f af58 	ble.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de6:	3b03      	subs	r3, #3
 8009de8:	2b07      	cmp	r3, #7
 8009dea:	d9a0      	bls.n	8009d2e <_tzset_unlocked_r+0xf6>
 8009dec:	e752      	b.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009dee:	2b2b      	cmp	r3, #43	@ 0x2b
 8009df0:	bf08      	it	eq
 8009df2:	3501      	addeq	r5, #1
 8009df4:	f04f 0901 	mov.w	r9, #1
 8009df8:	e7a1      	b.n	8009d3e <_tzset_unlocked_r+0x106>
 8009dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dfc:	1eda      	subs	r2, r3, #3
 8009dfe:	2a07      	cmp	r2, #7
 8009e00:	f63f af48 	bhi.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009e04:	5ceb      	ldrb	r3, [r5, r3]
 8009e06:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e08:	f47f af44 	bne.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009e0c:	f109 0902 	add.w	r9, r9, #2
 8009e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e12:	eb09 0503 	add.w	r5, r9, r3
 8009e16:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009e1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e1c:	f040 80b7 	bne.w	8009f8e <_tzset_unlocked_r+0x356>
 8009e20:	3501      	adds	r5, #1
 8009e22:	f04f 39ff 	mov.w	r9, #4294967295
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009e2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009e30:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009e34:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e36:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e38:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	f10d 031e 	add.w	r3, sp, #30
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	4945      	ldr	r1, [pc, #276]	@ (8009f5c <_tzset_unlocked_r+0x324>)
 8009e46:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e48:	aa07      	add	r2, sp, #28
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f7ff f8c0 	bl	8008fd0 <siscanf>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	f300 80a2 	bgt.w	8009f9a <_tzset_unlocked_r+0x362>
 8009e56:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e5e:	4627      	mov	r7, r4
 8009e60:	441d      	add	r5, r3
 8009e62:	f04f 0b00 	mov.w	fp, #0
 8009e66:	782b      	ldrb	r3, [r5, #0]
 8009e68:	2b2c      	cmp	r3, #44	@ 0x2c
 8009e6a:	bf08      	it	eq
 8009e6c:	3501      	addeq	r5, #1
 8009e6e:	f895 9000 	ldrb.w	r9, [r5]
 8009e72:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8009e76:	f040 80a3 	bne.w	8009fc0 <_tzset_unlocked_r+0x388>
 8009e7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e7c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8009e80:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009e84:	aa09      	add	r2, sp, #36	@ 0x24
 8009e86:	9200      	str	r2, [sp, #0]
 8009e88:	4937      	ldr	r1, [pc, #220]	@ (8009f68 <_tzset_unlocked_r+0x330>)
 8009e8a:	9303      	str	r3, [sp, #12]
 8009e8c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8009e90:	4628      	mov	r0, r5
 8009e92:	f7ff f89d 	bl	8008fd0 <siscanf>
 8009e96:	2803      	cmp	r0, #3
 8009e98:	f47f aefc 	bne.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009e9c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8009ea0:	1e4b      	subs	r3, r1, #1
 8009ea2:	2b0b      	cmp	r3, #11
 8009ea4:	f63f aef6 	bhi.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009ea8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8009eac:	1e53      	subs	r3, r2, #1
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	f63f aef0 	bhi.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009eb4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8009eb8:	2b06      	cmp	r3, #6
 8009eba:	f63f aeeb 	bhi.w	8009c94 <_tzset_unlocked_r+0x5c>
 8009ebe:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009ec2:	f887 9008 	strb.w	r9, [r7, #8]
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eca:	eb05 0903 	add.w	r9, r5, r3
 8009ece:	2500      	movs	r5, #0
 8009ed0:	f04f 0302 	mov.w	r3, #2
 8009ed4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009ed8:	f8ad 501e 	strh.w	r5, [sp, #30]
 8009edc:	f8ad 5020 	strh.w	r5, [sp, #32]
 8009ee0:	950a      	str	r5, [sp, #40]	@ 0x28
 8009ee2:	f899 3000 	ldrb.w	r3, [r9]
 8009ee6:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ee8:	f040 8096 	bne.w	800a018 <_tzset_unlocked_r+0x3e0>
 8009eec:	ab0a      	add	r3, sp, #40	@ 0x28
 8009eee:	aa08      	add	r2, sp, #32
 8009ef0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009ef4:	f10d 021e 	add.w	r2, sp, #30
 8009ef8:	9200      	str	r2, [sp, #0]
 8009efa:	491c      	ldr	r1, [pc, #112]	@ (8009f6c <_tzset_unlocked_r+0x334>)
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	aa07      	add	r2, sp, #28
 8009f00:	4648      	mov	r0, r9
 8009f02:	f7ff f865 	bl	8008fd0 <siscanf>
 8009f06:	42a8      	cmp	r0, r5
 8009f08:	f300 8086 	bgt.w	800a018 <_tzset_unlocked_r+0x3e0>
 8009f0c:	214a      	movs	r1, #74	@ 0x4a
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2300      	movs	r3, #0
 8009f12:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8009f16:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009f1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009f1e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8009f22:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8009f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8009f2a:	7221      	strb	r1, [r4, #8]
 8009f2c:	62a5      	str	r5, [r4, #40]	@ 0x28
 8009f2e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009f32:	6525      	str	r5, [r4, #80]	@ 0x50
 8009f34:	e6ae      	b.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009f36:	bf00      	nop
 8009f38:	0800c53b 	.word	0x0800c53b
 8009f3c:	20005500 	.word	0x20005500
 8009f40:	2000551c 	.word	0x2000551c
 8009f44:	0800c53e 	.word	0x0800c53e
 8009f48:	20005520 	.word	0x20005520
 8009f4c:	20000024 	.word	0x20000024
 8009f50:	0800c68b 	.word	0x0800c68b
 8009f54:	20005510 	.word	0x20005510
 8009f58:	0800c542 	.word	0x0800c542
 8009f5c:	0800c577 	.word	0x0800c577
 8009f60:	20005504 	.word	0x20005504
 8009f64:	0800c555 	.word	0x0800c555
 8009f68:	0800c563 	.word	0x0800c563
 8009f6c:	0800c576 	.word	0x0800c576
 8009f70:	4a3e      	ldr	r2, [pc, #248]	@ (800a06c <_tzset_unlocked_r+0x434>)
 8009f72:	493f      	ldr	r1, [pc, #252]	@ (800a070 <_tzset_unlocked_r+0x438>)
 8009f74:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f76:	4648      	mov	r0, r9
 8009f78:	f7ff f82a 	bl	8008fd0 <siscanf>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f77f af17 	ble.w	8009db0 <_tzset_unlocked_r+0x178>
 8009f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f84:	3b03      	subs	r3, #3
 8009f86:	2b07      	cmp	r3, #7
 8009f88:	f67f af42 	bls.w	8009e10 <_tzset_unlocked_r+0x1d8>
 8009f8c:	e682      	b.n	8009c94 <_tzset_unlocked_r+0x5c>
 8009f8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f90:	bf08      	it	eq
 8009f92:	3501      	addeq	r5, #1
 8009f94:	f04f 0901 	mov.w	r9, #1
 8009f98:	e745      	b.n	8009e26 <_tzset_unlocked_r+0x1ee>
 8009f9a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009f9e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009fa2:	213c      	movs	r1, #60	@ 0x3c
 8009fa4:	fb01 3302 	mla	r3, r1, r2, r3
 8009fa8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009fac:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009fb0:	fb01 3302 	mla	r3, r1, r2, r3
 8009fb4:	fb09 f303 	mul.w	r3, r9, r3
 8009fb8:	e74f      	b.n	8009e5a <_tzset_unlocked_r+0x222>
 8009fba:	f04f 0b01 	mov.w	fp, #1
 8009fbe:	e752      	b.n	8009e66 <_tzset_unlocked_r+0x22e>
 8009fc0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8009fc4:	bf06      	itte	eq
 8009fc6:	3501      	addeq	r5, #1
 8009fc8:	464b      	moveq	r3, r9
 8009fca:	2344      	movne	r3, #68	@ 0x44
 8009fcc:	220a      	movs	r2, #10
 8009fce:	a90b      	add	r1, sp, #44	@ 0x2c
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	9305      	str	r3, [sp, #20]
 8009fd4:	f000 fac0 	bl	800a558 <strtoul>
 8009fd8:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8009fdc:	9b05      	ldr	r3, [sp, #20]
 8009fde:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8009fe2:	45a9      	cmp	r9, r5
 8009fe4:	d114      	bne.n	800a010 <_tzset_unlocked_r+0x3d8>
 8009fe6:	234d      	movs	r3, #77	@ 0x4d
 8009fe8:	f1bb 0f00 	cmp.w	fp, #0
 8009fec:	d107      	bne.n	8009ffe <_tzset_unlocked_r+0x3c6>
 8009fee:	7223      	strb	r3, [r4, #8]
 8009ff0:	2103      	movs	r1, #3
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8009ff8:	f8c4 b014 	str.w	fp, [r4, #20]
 8009ffc:	e767      	b.n	8009ece <_tzset_unlocked_r+0x296>
 8009ffe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800a002:	220b      	movs	r2, #11
 800a004:	2301      	movs	r3, #1
 800a006:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800a00a:	2300      	movs	r3, #0
 800a00c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a00e:	e75e      	b.n	8009ece <_tzset_unlocked_r+0x296>
 800a010:	b280      	uxth	r0, r0
 800a012:	723b      	strb	r3, [r7, #8]
 800a014:	6178      	str	r0, [r7, #20]
 800a016:	e75a      	b.n	8009ece <_tzset_unlocked_r+0x296>
 800a018:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a01c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a020:	213c      	movs	r1, #60	@ 0x3c
 800a022:	fb01 3302 	mla	r3, r1, r2, r3
 800a026:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a02a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a02e:	fb01 3302 	mla	r3, r1, r2, r3
 800a032:	61bb      	str	r3, [r7, #24]
 800a034:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a036:	3728      	adds	r7, #40	@ 0x28
 800a038:	444d      	add	r5, r9
 800a03a:	f1bb 0f00 	cmp.w	fp, #0
 800a03e:	d0bc      	beq.n	8009fba <_tzset_unlocked_r+0x382>
 800a040:	9b04      	ldr	r3, [sp, #16]
 800a042:	6523      	str	r3, [r4, #80]	@ 0x50
 800a044:	4b0b      	ldr	r3, [pc, #44]	@ (800a074 <_tzset_unlocked_r+0x43c>)
 800a046:	f8c8 3000 	str.w	r3, [r8]
 800a04a:	6860      	ldr	r0, [r4, #4]
 800a04c:	4b07      	ldr	r3, [pc, #28]	@ (800a06c <_tzset_unlocked_r+0x434>)
 800a04e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a050:	f8c8 3004 	str.w	r3, [r8, #4]
 800a054:	f7ff fd2a 	bl	8009aac <__tzcalc_limits>
 800a058:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a05a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a05c:	f8ca 2000 	str.w	r2, [sl]
 800a060:	1a9b      	subs	r3, r3, r2
 800a062:	4a05      	ldr	r2, [pc, #20]	@ (800a078 <_tzset_unlocked_r+0x440>)
 800a064:	bf18      	it	ne
 800a066:	2301      	movne	r3, #1
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	e613      	b.n	8009c94 <_tzset_unlocked_r+0x5c>
 800a06c:	20005504 	.word	0x20005504
 800a070:	0800c555 	.word	0x0800c555
 800a074:	20005510 	.word	0x20005510
 800a078:	20005520 	.word	0x20005520

0800a07c <_close_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	@ (800a098 <_close_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7f8 f892 	bl	80021b0 <_close>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_close_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_close_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20005524 	.word	0x20005524

0800a09c <_lseek_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	@ (800a0bc <_lseek_r+0x20>)
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f7f8 f8a7 	bl	80021fe <_lseek>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_lseek_r+0x1e>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_lseek_r+0x1e>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20005524 	.word	0x20005524

0800a0c0 <_read_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	@ (800a0e0 <_read_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f8 f835 	bl	800213e <_read>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_read_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_read_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20005524 	.word	0x20005524

0800a0e4 <_write_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	@ (800a104 <_write_r+0x20>)
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f8 f840 	bl	8002178 <_write>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_write_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_write_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20005524 	.word	0x20005524

0800a108 <__errno>:
 800a108:	4b01      	ldr	r3, [pc, #4]	@ (800a110 <__errno+0x8>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	2000002c 	.word	0x2000002c

0800a114 <__libc_init_array>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4d0d      	ldr	r5, [pc, #52]	@ (800a14c <__libc_init_array+0x38>)
 800a118:	4c0d      	ldr	r4, [pc, #52]	@ (800a150 <__libc_init_array+0x3c>)
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	2600      	movs	r6, #0
 800a120:	42a6      	cmp	r6, r4
 800a122:	d109      	bne.n	800a138 <__libc_init_array+0x24>
 800a124:	4d0b      	ldr	r5, [pc, #44]	@ (800a154 <__libc_init_array+0x40>)
 800a126:	4c0c      	ldr	r4, [pc, #48]	@ (800a158 <__libc_init_array+0x44>)
 800a128:	f001 fcf0 	bl	800bb0c <_init>
 800a12c:	1b64      	subs	r4, r4, r5
 800a12e:	10a4      	asrs	r4, r4, #2
 800a130:	2600      	movs	r6, #0
 800a132:	42a6      	cmp	r6, r4
 800a134:	d105      	bne.n	800a142 <__libc_init_array+0x2e>
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13c:	4798      	blx	r3
 800a13e:	3601      	adds	r6, #1
 800a140:	e7ee      	b.n	800a120 <__libc_init_array+0xc>
 800a142:	f855 3b04 	ldr.w	r3, [r5], #4
 800a146:	4798      	blx	r3
 800a148:	3601      	adds	r6, #1
 800a14a:	e7f2      	b.n	800a132 <__libc_init_array+0x1e>
 800a14c:	0800c790 	.word	0x0800c790
 800a150:	0800c790 	.word	0x0800c790
 800a154:	0800c790 	.word	0x0800c790
 800a158:	0800c794 	.word	0x0800c794

0800a15c <__retarget_lock_init_recursive>:
 800a15c:	4770      	bx	lr

0800a15e <__retarget_lock_acquire>:
 800a15e:	4770      	bx	lr

0800a160 <__retarget_lock_acquire_recursive>:
 800a160:	4770      	bx	lr

0800a162 <__retarget_lock_release>:
 800a162:	4770      	bx	lr

0800a164 <__retarget_lock_release_recursive>:
 800a164:	4770      	bx	lr

0800a166 <strcpy>:
 800a166:	4603      	mov	r3, r0
 800a168:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a16c:	f803 2b01 	strb.w	r2, [r3], #1
 800a170:	2a00      	cmp	r2, #0
 800a172:	d1f9      	bne.n	800a168 <strcpy+0x2>
 800a174:	4770      	bx	lr

0800a176 <memcpy>:
 800a176:	440a      	add	r2, r1
 800a178:	4291      	cmp	r1, r2
 800a17a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a17e:	d100      	bne.n	800a182 <memcpy+0xc>
 800a180:	4770      	bx	lr
 800a182:	b510      	push	{r4, lr}
 800a184:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a18c:	4291      	cmp	r1, r2
 800a18e:	d1f9      	bne.n	800a184 <memcpy+0xe>
 800a190:	bd10      	pop	{r4, pc}
	...

0800a194 <__assert_func>:
 800a194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a196:	4614      	mov	r4, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4b09      	ldr	r3, [pc, #36]	@ (800a1c0 <__assert_func+0x2c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4605      	mov	r5, r0
 800a1a0:	68d8      	ldr	r0, [r3, #12]
 800a1a2:	b14c      	cbz	r4, 800a1b8 <__assert_func+0x24>
 800a1a4:	4b07      	ldr	r3, [pc, #28]	@ (800a1c4 <__assert_func+0x30>)
 800a1a6:	9100      	str	r1, [sp, #0]
 800a1a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1ac:	4906      	ldr	r1, [pc, #24]	@ (800a1c8 <__assert_func+0x34>)
 800a1ae:	462b      	mov	r3, r5
 800a1b0:	f001 f9cc 	bl	800b54c <fiprintf>
 800a1b4:	f001 fc1c 	bl	800b9f0 <abort>
 800a1b8:	4b04      	ldr	r3, [pc, #16]	@ (800a1cc <__assert_func+0x38>)
 800a1ba:	461c      	mov	r4, r3
 800a1bc:	e7f3      	b.n	800a1a6 <__assert_func+0x12>
 800a1be:	bf00      	nop
 800a1c0:	2000002c 	.word	0x2000002c
 800a1c4:	0800c589 	.word	0x0800c589
 800a1c8:	0800c596 	.word	0x0800c596
 800a1cc:	0800c68b 	.word	0x0800c68b

0800a1d0 <div>:
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	fb91 f4f2 	sdiv	r4, r1, r2
 800a1d6:	fb02 1114 	mls	r1, r2, r4, r1
 800a1da:	6004      	str	r4, [r0, #0]
 800a1dc:	6041      	str	r1, [r0, #4]
 800a1de:	bd10      	pop	{r4, pc}

0800a1e0 <_free_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	d041      	beq.n	800a26c <_free_r+0x8c>
 800a1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ec:	1f0c      	subs	r4, r1, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfb8      	it	lt
 800a1f2:	18e4      	addlt	r4, r4, r3
 800a1f4:	f000 f934 	bl	800a460 <__malloc_lock>
 800a1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a270 <_free_r+0x90>)
 800a1fa:	6813      	ldr	r3, [r2, #0]
 800a1fc:	b933      	cbnz	r3, 800a20c <_free_r+0x2c>
 800a1fe:	6063      	str	r3, [r4, #4]
 800a200:	6014      	str	r4, [r2, #0]
 800a202:	4628      	mov	r0, r5
 800a204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a208:	f000 b930 	b.w	800a46c <__malloc_unlock>
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d908      	bls.n	800a222 <_free_r+0x42>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	1821      	adds	r1, r4, r0
 800a214:	428b      	cmp	r3, r1
 800a216:	bf01      	itttt	eq
 800a218:	6819      	ldreq	r1, [r3, #0]
 800a21a:	685b      	ldreq	r3, [r3, #4]
 800a21c:	1809      	addeq	r1, r1, r0
 800a21e:	6021      	streq	r1, [r4, #0]
 800a220:	e7ed      	b.n	800a1fe <_free_r+0x1e>
 800a222:	461a      	mov	r2, r3
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	b10b      	cbz	r3, 800a22c <_free_r+0x4c>
 800a228:	42a3      	cmp	r3, r4
 800a22a:	d9fa      	bls.n	800a222 <_free_r+0x42>
 800a22c:	6811      	ldr	r1, [r2, #0]
 800a22e:	1850      	adds	r0, r2, r1
 800a230:	42a0      	cmp	r0, r4
 800a232:	d10b      	bne.n	800a24c <_free_r+0x6c>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	4401      	add	r1, r0
 800a238:	1850      	adds	r0, r2, r1
 800a23a:	4283      	cmp	r3, r0
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	d1e0      	bne.n	800a202 <_free_r+0x22>
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	6053      	str	r3, [r2, #4]
 800a246:	4408      	add	r0, r1
 800a248:	6010      	str	r0, [r2, #0]
 800a24a:	e7da      	b.n	800a202 <_free_r+0x22>
 800a24c:	d902      	bls.n	800a254 <_free_r+0x74>
 800a24e:	230c      	movs	r3, #12
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	e7d6      	b.n	800a202 <_free_r+0x22>
 800a254:	6820      	ldr	r0, [r4, #0]
 800a256:	1821      	adds	r1, r4, r0
 800a258:	428b      	cmp	r3, r1
 800a25a:	bf04      	itt	eq
 800a25c:	6819      	ldreq	r1, [r3, #0]
 800a25e:	685b      	ldreq	r3, [r3, #4]
 800a260:	6063      	str	r3, [r4, #4]
 800a262:	bf04      	itt	eq
 800a264:	1809      	addeq	r1, r1, r0
 800a266:	6021      	streq	r1, [r4, #0]
 800a268:	6054      	str	r4, [r2, #4]
 800a26a:	e7ca      	b.n	800a202 <_free_r+0x22>
 800a26c:	bd38      	pop	{r3, r4, r5, pc}
 800a26e:	bf00      	nop
 800a270:	20005530 	.word	0x20005530

0800a274 <_findenv_r>:
 800a274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800a2e8 <_findenv_r+0x74>
 800a27c:	4606      	mov	r6, r0
 800a27e:	4689      	mov	r9, r1
 800a280:	4617      	mov	r7, r2
 800a282:	f001 fbbd 	bl	800ba00 <__env_lock>
 800a286:	f8da 4000 	ldr.w	r4, [sl]
 800a28a:	b134      	cbz	r4, 800a29a <_findenv_r+0x26>
 800a28c:	464b      	mov	r3, r9
 800a28e:	4698      	mov	r8, r3
 800a290:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a294:	b13a      	cbz	r2, 800a2a6 <_findenv_r+0x32>
 800a296:	2a3d      	cmp	r2, #61	@ 0x3d
 800a298:	d1f9      	bne.n	800a28e <_findenv_r+0x1a>
 800a29a:	4630      	mov	r0, r6
 800a29c:	f001 fbb6 	bl	800ba0c <__env_unlock>
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	eba8 0809 	sub.w	r8, r8, r9
 800a2aa:	46a3      	mov	fp, r4
 800a2ac:	f854 0b04 	ldr.w	r0, [r4], #4
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d0f2      	beq.n	800a29a <_findenv_r+0x26>
 800a2b4:	4642      	mov	r2, r8
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f001 fa63 	bl	800b782 <strncmp>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d1f4      	bne.n	800a2aa <_findenv_r+0x36>
 800a2c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a2c4:	eb03 0508 	add.w	r5, r3, r8
 800a2c8:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a2cc:	2b3d      	cmp	r3, #61	@ 0x3d
 800a2ce:	d1ec      	bne.n	800a2aa <_findenv_r+0x36>
 800a2d0:	f8da 3000 	ldr.w	r3, [sl]
 800a2d4:	ebab 0303 	sub.w	r3, fp, r3
 800a2d8:	109b      	asrs	r3, r3, #2
 800a2da:	4630      	mov	r0, r6
 800a2dc:	603b      	str	r3, [r7, #0]
 800a2de:	f001 fb95 	bl	800ba0c <__env_unlock>
 800a2e2:	1c68      	adds	r0, r5, #1
 800a2e4:	e7dd      	b.n	800a2a2 <_findenv_r+0x2e>
 800a2e6:	bf00      	nop
 800a2e8:	20000004 	.word	0x20000004

0800a2ec <_getenv_r>:
 800a2ec:	b507      	push	{r0, r1, r2, lr}
 800a2ee:	aa01      	add	r2, sp, #4
 800a2f0:	f7ff ffc0 	bl	800a274 <_findenv_r>
 800a2f4:	b003      	add	sp, #12
 800a2f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a2fc <malloc>:
 800a2fc:	4b02      	ldr	r3, [pc, #8]	@ (800a308 <malloc+0xc>)
 800a2fe:	4601      	mov	r1, r0
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	f000 b82d 	b.w	800a360 <_malloc_r>
 800a306:	bf00      	nop
 800a308:	2000002c 	.word	0x2000002c

0800a30c <free>:
 800a30c:	4b02      	ldr	r3, [pc, #8]	@ (800a318 <free+0xc>)
 800a30e:	4601      	mov	r1, r0
 800a310:	6818      	ldr	r0, [r3, #0]
 800a312:	f7ff bf65 	b.w	800a1e0 <_free_r>
 800a316:	bf00      	nop
 800a318:	2000002c 	.word	0x2000002c

0800a31c <sbrk_aligned>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	4e0f      	ldr	r6, [pc, #60]	@ (800a35c <sbrk_aligned+0x40>)
 800a320:	460c      	mov	r4, r1
 800a322:	6831      	ldr	r1, [r6, #0]
 800a324:	4605      	mov	r5, r0
 800a326:	b911      	cbnz	r1, 800a32e <sbrk_aligned+0x12>
 800a328:	f001 fb52 	bl	800b9d0 <_sbrk_r>
 800a32c:	6030      	str	r0, [r6, #0]
 800a32e:	4621      	mov	r1, r4
 800a330:	4628      	mov	r0, r5
 800a332:	f001 fb4d 	bl	800b9d0 <_sbrk_r>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d103      	bne.n	800a342 <sbrk_aligned+0x26>
 800a33a:	f04f 34ff 	mov.w	r4, #4294967295
 800a33e:	4620      	mov	r0, r4
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	1cc4      	adds	r4, r0, #3
 800a344:	f024 0403 	bic.w	r4, r4, #3
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d0f8      	beq.n	800a33e <sbrk_aligned+0x22>
 800a34c:	1a21      	subs	r1, r4, r0
 800a34e:	4628      	mov	r0, r5
 800a350:	f001 fb3e 	bl	800b9d0 <_sbrk_r>
 800a354:	3001      	adds	r0, #1
 800a356:	d1f2      	bne.n	800a33e <sbrk_aligned+0x22>
 800a358:	e7ef      	b.n	800a33a <sbrk_aligned+0x1e>
 800a35a:	bf00      	nop
 800a35c:	2000552c 	.word	0x2000552c

0800a360 <_malloc_r>:
 800a360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a364:	1ccd      	adds	r5, r1, #3
 800a366:	f025 0503 	bic.w	r5, r5, #3
 800a36a:	3508      	adds	r5, #8
 800a36c:	2d0c      	cmp	r5, #12
 800a36e:	bf38      	it	cc
 800a370:	250c      	movcc	r5, #12
 800a372:	2d00      	cmp	r5, #0
 800a374:	4606      	mov	r6, r0
 800a376:	db01      	blt.n	800a37c <_malloc_r+0x1c>
 800a378:	42a9      	cmp	r1, r5
 800a37a:	d904      	bls.n	800a386 <_malloc_r+0x26>
 800a37c:	230c      	movs	r3, #12
 800a37e:	6033      	str	r3, [r6, #0]
 800a380:	2000      	movs	r0, #0
 800a382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a386:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a45c <_malloc_r+0xfc>
 800a38a:	f000 f869 	bl	800a460 <__malloc_lock>
 800a38e:	f8d8 3000 	ldr.w	r3, [r8]
 800a392:	461c      	mov	r4, r3
 800a394:	bb44      	cbnz	r4, 800a3e8 <_malloc_r+0x88>
 800a396:	4629      	mov	r1, r5
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff ffbf 	bl	800a31c <sbrk_aligned>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	d158      	bne.n	800a456 <_malloc_r+0xf6>
 800a3a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3a8:	4627      	mov	r7, r4
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	d143      	bne.n	800a436 <_malloc_r+0xd6>
 800a3ae:	2c00      	cmp	r4, #0
 800a3b0:	d04b      	beq.n	800a44a <_malloc_r+0xea>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	eb04 0903 	add.w	r9, r4, r3
 800a3bc:	f001 fb08 	bl	800b9d0 <_sbrk_r>
 800a3c0:	4581      	cmp	r9, r0
 800a3c2:	d142      	bne.n	800a44a <_malloc_r+0xea>
 800a3c4:	6821      	ldr	r1, [r4, #0]
 800a3c6:	1a6d      	subs	r5, r5, r1
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ffa6 	bl	800a31c <sbrk_aligned>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d03a      	beq.n	800a44a <_malloc_r+0xea>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	442b      	add	r3, r5
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	f8d8 3000 	ldr.w	r3, [r8]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	bb62      	cbnz	r2, 800a43c <_malloc_r+0xdc>
 800a3e2:	f8c8 7000 	str.w	r7, [r8]
 800a3e6:	e00f      	b.n	800a408 <_malloc_r+0xa8>
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	1b52      	subs	r2, r2, r5
 800a3ec:	d420      	bmi.n	800a430 <_malloc_r+0xd0>
 800a3ee:	2a0b      	cmp	r2, #11
 800a3f0:	d917      	bls.n	800a422 <_malloc_r+0xc2>
 800a3f2:	1961      	adds	r1, r4, r5
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	6025      	str	r5, [r4, #0]
 800a3f8:	bf18      	it	ne
 800a3fa:	6059      	strne	r1, [r3, #4]
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	bf08      	it	eq
 800a400:	f8c8 1000 	streq.w	r1, [r8]
 800a404:	5162      	str	r2, [r4, r5]
 800a406:	604b      	str	r3, [r1, #4]
 800a408:	4630      	mov	r0, r6
 800a40a:	f000 f82f 	bl	800a46c <__malloc_unlock>
 800a40e:	f104 000b 	add.w	r0, r4, #11
 800a412:	1d23      	adds	r3, r4, #4
 800a414:	f020 0007 	bic.w	r0, r0, #7
 800a418:	1ac2      	subs	r2, r0, r3
 800a41a:	bf1c      	itt	ne
 800a41c:	1a1b      	subne	r3, r3, r0
 800a41e:	50a3      	strne	r3, [r4, r2]
 800a420:	e7af      	b.n	800a382 <_malloc_r+0x22>
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	42a3      	cmp	r3, r4
 800a426:	bf0c      	ite	eq
 800a428:	f8c8 2000 	streq.w	r2, [r8]
 800a42c:	605a      	strne	r2, [r3, #4]
 800a42e:	e7eb      	b.n	800a408 <_malloc_r+0xa8>
 800a430:	4623      	mov	r3, r4
 800a432:	6864      	ldr	r4, [r4, #4]
 800a434:	e7ae      	b.n	800a394 <_malloc_r+0x34>
 800a436:	463c      	mov	r4, r7
 800a438:	687f      	ldr	r7, [r7, #4]
 800a43a:	e7b6      	b.n	800a3aa <_malloc_r+0x4a>
 800a43c:	461a      	mov	r2, r3
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	42a3      	cmp	r3, r4
 800a442:	d1fb      	bne.n	800a43c <_malloc_r+0xdc>
 800a444:	2300      	movs	r3, #0
 800a446:	6053      	str	r3, [r2, #4]
 800a448:	e7de      	b.n	800a408 <_malloc_r+0xa8>
 800a44a:	230c      	movs	r3, #12
 800a44c:	6033      	str	r3, [r6, #0]
 800a44e:	4630      	mov	r0, r6
 800a450:	f000 f80c 	bl	800a46c <__malloc_unlock>
 800a454:	e794      	b.n	800a380 <_malloc_r+0x20>
 800a456:	6005      	str	r5, [r0, #0]
 800a458:	e7d6      	b.n	800a408 <_malloc_r+0xa8>
 800a45a:	bf00      	nop
 800a45c:	20005530 	.word	0x20005530

0800a460 <__malloc_lock>:
 800a460:	4801      	ldr	r0, [pc, #4]	@ (800a468 <__malloc_lock+0x8>)
 800a462:	f7ff be7d 	b.w	800a160 <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	2000552a 	.word	0x2000552a

0800a46c <__malloc_unlock>:
 800a46c:	4801      	ldr	r0, [pc, #4]	@ (800a474 <__malloc_unlock+0x8>)
 800a46e:	f7ff be79 	b.w	800a164 <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	2000552a 	.word	0x2000552a

0800a478 <_strtoul_l.isra.0>:
 800a478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4e34      	ldr	r6, [pc, #208]	@ (800a550 <_strtoul_l.isra.0+0xd8>)
 800a47e:	4686      	mov	lr, r0
 800a480:	460d      	mov	r5, r1
 800a482:	4628      	mov	r0, r5
 800a484:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a488:	5d37      	ldrb	r7, [r6, r4]
 800a48a:	f017 0708 	ands.w	r7, r7, #8
 800a48e:	d1f8      	bne.n	800a482 <_strtoul_l.isra.0+0xa>
 800a490:	2c2d      	cmp	r4, #45	@ 0x2d
 800a492:	d110      	bne.n	800a4b6 <_strtoul_l.isra.0+0x3e>
 800a494:	782c      	ldrb	r4, [r5, #0]
 800a496:	2701      	movs	r7, #1
 800a498:	1c85      	adds	r5, r0, #2
 800a49a:	f033 0010 	bics.w	r0, r3, #16
 800a49e:	d115      	bne.n	800a4cc <_strtoul_l.isra.0+0x54>
 800a4a0:	2c30      	cmp	r4, #48	@ 0x30
 800a4a2:	d10d      	bne.n	800a4c0 <_strtoul_l.isra.0+0x48>
 800a4a4:	7828      	ldrb	r0, [r5, #0]
 800a4a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a4aa:	2858      	cmp	r0, #88	@ 0x58
 800a4ac:	d108      	bne.n	800a4c0 <_strtoul_l.isra.0+0x48>
 800a4ae:	786c      	ldrb	r4, [r5, #1]
 800a4b0:	3502      	adds	r5, #2
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	e00a      	b.n	800a4cc <_strtoul_l.isra.0+0x54>
 800a4b6:	2c2b      	cmp	r4, #43	@ 0x2b
 800a4b8:	bf04      	itt	eq
 800a4ba:	782c      	ldrbeq	r4, [r5, #0]
 800a4bc:	1c85      	addeq	r5, r0, #2
 800a4be:	e7ec      	b.n	800a49a <_strtoul_l.isra.0+0x22>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f6      	bne.n	800a4b2 <_strtoul_l.isra.0+0x3a>
 800a4c4:	2c30      	cmp	r4, #48	@ 0x30
 800a4c6:	bf14      	ite	ne
 800a4c8:	230a      	movne	r3, #10
 800a4ca:	2308      	moveq	r3, #8
 800a4cc:	f04f 38ff 	mov.w	r8, #4294967295
 800a4d0:	2600      	movs	r6, #0
 800a4d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800a4d6:	fb03 f908 	mul.w	r9, r3, r8
 800a4da:	ea6f 0909 	mvn.w	r9, r9
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a4e4:	f1bc 0f09 	cmp.w	ip, #9
 800a4e8:	d810      	bhi.n	800a50c <_strtoul_l.isra.0+0x94>
 800a4ea:	4664      	mov	r4, ip
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	dd1e      	ble.n	800a52e <_strtoul_l.isra.0+0xb6>
 800a4f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a4f4:	d007      	beq.n	800a506 <_strtoul_l.isra.0+0x8e>
 800a4f6:	4580      	cmp	r8, r0
 800a4f8:	d316      	bcc.n	800a528 <_strtoul_l.isra.0+0xb0>
 800a4fa:	d101      	bne.n	800a500 <_strtoul_l.isra.0+0x88>
 800a4fc:	45a1      	cmp	r9, r4
 800a4fe:	db13      	blt.n	800a528 <_strtoul_l.isra.0+0xb0>
 800a500:	fb00 4003 	mla	r0, r0, r3, r4
 800a504:	2601      	movs	r6, #1
 800a506:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a50a:	e7e9      	b.n	800a4e0 <_strtoul_l.isra.0+0x68>
 800a50c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a510:	f1bc 0f19 	cmp.w	ip, #25
 800a514:	d801      	bhi.n	800a51a <_strtoul_l.isra.0+0xa2>
 800a516:	3c37      	subs	r4, #55	@ 0x37
 800a518:	e7e8      	b.n	800a4ec <_strtoul_l.isra.0+0x74>
 800a51a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a51e:	f1bc 0f19 	cmp.w	ip, #25
 800a522:	d804      	bhi.n	800a52e <_strtoul_l.isra.0+0xb6>
 800a524:	3c57      	subs	r4, #87	@ 0x57
 800a526:	e7e1      	b.n	800a4ec <_strtoul_l.isra.0+0x74>
 800a528:	f04f 36ff 	mov.w	r6, #4294967295
 800a52c:	e7eb      	b.n	800a506 <_strtoul_l.isra.0+0x8e>
 800a52e:	1c73      	adds	r3, r6, #1
 800a530:	d106      	bne.n	800a540 <_strtoul_l.isra.0+0xc8>
 800a532:	2322      	movs	r3, #34	@ 0x22
 800a534:	f8ce 3000 	str.w	r3, [lr]
 800a538:	4630      	mov	r0, r6
 800a53a:	b932      	cbnz	r2, 800a54a <_strtoul_l.isra.0+0xd2>
 800a53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a540:	b107      	cbz	r7, 800a544 <_strtoul_l.isra.0+0xcc>
 800a542:	4240      	negs	r0, r0
 800a544:	2a00      	cmp	r2, #0
 800a546:	d0f9      	beq.n	800a53c <_strtoul_l.isra.0+0xc4>
 800a548:	b106      	cbz	r6, 800a54c <_strtoul_l.isra.0+0xd4>
 800a54a:	1e69      	subs	r1, r5, #1
 800a54c:	6011      	str	r1, [r2, #0]
 800a54e:	e7f5      	b.n	800a53c <_strtoul_l.isra.0+0xc4>
 800a550:	0800c371 	.word	0x0800c371

0800a554 <_strtoul_r>:
 800a554:	f7ff bf90 	b.w	800a478 <_strtoul_l.isra.0>

0800a558 <strtoul>:
 800a558:	4613      	mov	r3, r2
 800a55a:	460a      	mov	r2, r1
 800a55c:	4601      	mov	r1, r0
 800a55e:	4802      	ldr	r0, [pc, #8]	@ (800a568 <strtoul+0x10>)
 800a560:	6800      	ldr	r0, [r0, #0]
 800a562:	f7ff bf89 	b.w	800a478 <_strtoul_l.isra.0>
 800a566:	bf00      	nop
 800a568:	2000002c 	.word	0x2000002c

0800a56c <__ssputs_r>:
 800a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	688e      	ldr	r6, [r1, #8]
 800a572:	461f      	mov	r7, r3
 800a574:	42be      	cmp	r6, r7
 800a576:	680b      	ldr	r3, [r1, #0]
 800a578:	4682      	mov	sl, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	4690      	mov	r8, r2
 800a57e:	d82d      	bhi.n	800a5dc <__ssputs_r+0x70>
 800a580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a584:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a588:	d026      	beq.n	800a5d8 <__ssputs_r+0x6c>
 800a58a:	6965      	ldr	r5, [r4, #20]
 800a58c:	6909      	ldr	r1, [r1, #16]
 800a58e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a592:	eba3 0901 	sub.w	r9, r3, r1
 800a596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a59a:	1c7b      	adds	r3, r7, #1
 800a59c:	444b      	add	r3, r9
 800a59e:	106d      	asrs	r5, r5, #1
 800a5a0:	429d      	cmp	r5, r3
 800a5a2:	bf38      	it	cc
 800a5a4:	461d      	movcc	r5, r3
 800a5a6:	0553      	lsls	r3, r2, #21
 800a5a8:	d527      	bpl.n	800a5fa <__ssputs_r+0x8e>
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7ff fed8 	bl	800a360 <_malloc_r>
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	b360      	cbz	r0, 800a60e <__ssputs_r+0xa2>
 800a5b4:	6921      	ldr	r1, [r4, #16]
 800a5b6:	464a      	mov	r2, r9
 800a5b8:	f7ff fddd 	bl	800a176 <memcpy>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5c6:	81a3      	strh	r3, [r4, #12]
 800a5c8:	6126      	str	r6, [r4, #16]
 800a5ca:	6165      	str	r5, [r4, #20]
 800a5cc:	444e      	add	r6, r9
 800a5ce:	eba5 0509 	sub.w	r5, r5, r9
 800a5d2:	6026      	str	r6, [r4, #0]
 800a5d4:	60a5      	str	r5, [r4, #8]
 800a5d6:	463e      	mov	r6, r7
 800a5d8:	42be      	cmp	r6, r7
 800a5da:	d900      	bls.n	800a5de <__ssputs_r+0x72>
 800a5dc:	463e      	mov	r6, r7
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	4641      	mov	r1, r8
 800a5e4:	f7fe fdfa 	bl	80091dc <memmove>
 800a5e8:	68a3      	ldr	r3, [r4, #8]
 800a5ea:	1b9b      	subs	r3, r3, r6
 800a5ec:	60a3      	str	r3, [r4, #8]
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	4433      	add	r3, r6
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	f001 fa0c 	bl	800ba18 <_realloc_r>
 800a600:	4606      	mov	r6, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	d1e0      	bne.n	800a5c8 <__ssputs_r+0x5c>
 800a606:	6921      	ldr	r1, [r4, #16]
 800a608:	4650      	mov	r0, sl
 800a60a:	f7ff fde9 	bl	800a1e0 <_free_r>
 800a60e:	230c      	movs	r3, #12
 800a610:	f8ca 3000 	str.w	r3, [sl]
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	e7e9      	b.n	800a5f6 <__ssputs_r+0x8a>
	...

0800a624 <_svfiprintf_r>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	4698      	mov	r8, r3
 800a62a:	898b      	ldrh	r3, [r1, #12]
 800a62c:	061b      	lsls	r3, r3, #24
 800a62e:	b09d      	sub	sp, #116	@ 0x74
 800a630:	4607      	mov	r7, r0
 800a632:	460d      	mov	r5, r1
 800a634:	4614      	mov	r4, r2
 800a636:	d510      	bpl.n	800a65a <_svfiprintf_r+0x36>
 800a638:	690b      	ldr	r3, [r1, #16]
 800a63a:	b973      	cbnz	r3, 800a65a <_svfiprintf_r+0x36>
 800a63c:	2140      	movs	r1, #64	@ 0x40
 800a63e:	f7ff fe8f 	bl	800a360 <_malloc_r>
 800a642:	6028      	str	r0, [r5, #0]
 800a644:	6128      	str	r0, [r5, #16]
 800a646:	b930      	cbnz	r0, 800a656 <_svfiprintf_r+0x32>
 800a648:	230c      	movs	r3, #12
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	b01d      	add	sp, #116	@ 0x74
 800a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a656:	2340      	movs	r3, #64	@ 0x40
 800a658:	616b      	str	r3, [r5, #20]
 800a65a:	2300      	movs	r3, #0
 800a65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a65e:	2320      	movs	r3, #32
 800a660:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a664:	f8cd 800c 	str.w	r8, [sp, #12]
 800a668:	2330      	movs	r3, #48	@ 0x30
 800a66a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a808 <_svfiprintf_r+0x1e4>
 800a66e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a672:	f04f 0901 	mov.w	r9, #1
 800a676:	4623      	mov	r3, r4
 800a678:	469a      	mov	sl, r3
 800a67a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a67e:	b10a      	cbz	r2, 800a684 <_svfiprintf_r+0x60>
 800a680:	2a25      	cmp	r2, #37	@ 0x25
 800a682:	d1f9      	bne.n	800a678 <_svfiprintf_r+0x54>
 800a684:	ebba 0b04 	subs.w	fp, sl, r4
 800a688:	d00b      	beq.n	800a6a2 <_svfiprintf_r+0x7e>
 800a68a:	465b      	mov	r3, fp
 800a68c:	4622      	mov	r2, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	4638      	mov	r0, r7
 800a692:	f7ff ff6b 	bl	800a56c <__ssputs_r>
 800a696:	3001      	adds	r0, #1
 800a698:	f000 80a7 	beq.w	800a7ea <_svfiprintf_r+0x1c6>
 800a69c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a69e:	445a      	add	r2, fp
 800a6a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 809f 	beq.w	800a7ea <_svfiprintf_r+0x1c6>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	9307      	str	r3, [sp, #28]
 800a6be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6c4:	4654      	mov	r4, sl
 800a6c6:	2205      	movs	r2, #5
 800a6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6cc:	484e      	ldr	r0, [pc, #312]	@ (800a808 <_svfiprintf_r+0x1e4>)
 800a6ce:	f7f5 fd9f 	bl	8000210 <memchr>
 800a6d2:	9a04      	ldr	r2, [sp, #16]
 800a6d4:	b9d8      	cbnz	r0, 800a70e <_svfiprintf_r+0xea>
 800a6d6:	06d0      	lsls	r0, r2, #27
 800a6d8:	bf44      	itt	mi
 800a6da:	2320      	movmi	r3, #32
 800a6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6e0:	0711      	lsls	r1, r2, #28
 800a6e2:	bf44      	itt	mi
 800a6e4:	232b      	movmi	r3, #43	@ 0x2b
 800a6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6f0:	d015      	beq.n	800a71e <_svfiprintf_r+0xfa>
 800a6f2:	9a07      	ldr	r2, [sp, #28]
 800a6f4:	4654      	mov	r4, sl
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f04f 0c0a 	mov.w	ip, #10
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a702:	3b30      	subs	r3, #48	@ 0x30
 800a704:	2b09      	cmp	r3, #9
 800a706:	d94b      	bls.n	800a7a0 <_svfiprintf_r+0x17c>
 800a708:	b1b0      	cbz	r0, 800a738 <_svfiprintf_r+0x114>
 800a70a:	9207      	str	r2, [sp, #28]
 800a70c:	e014      	b.n	800a738 <_svfiprintf_r+0x114>
 800a70e:	eba0 0308 	sub.w	r3, r0, r8
 800a712:	fa09 f303 	lsl.w	r3, r9, r3
 800a716:	4313      	orrs	r3, r2
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	46a2      	mov	sl, r4
 800a71c:	e7d2      	b.n	800a6c4 <_svfiprintf_r+0xa0>
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	1d19      	adds	r1, r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	9103      	str	r1, [sp, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfbb      	ittet	lt
 800a72a:	425b      	neglt	r3, r3
 800a72c:	f042 0202 	orrlt.w	r2, r2, #2
 800a730:	9307      	strge	r3, [sp, #28]
 800a732:	9307      	strlt	r3, [sp, #28]
 800a734:	bfb8      	it	lt
 800a736:	9204      	strlt	r2, [sp, #16]
 800a738:	7823      	ldrb	r3, [r4, #0]
 800a73a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a73c:	d10a      	bne.n	800a754 <_svfiprintf_r+0x130>
 800a73e:	7863      	ldrb	r3, [r4, #1]
 800a740:	2b2a      	cmp	r3, #42	@ 0x2a
 800a742:	d132      	bne.n	800a7aa <_svfiprintf_r+0x186>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	1d1a      	adds	r2, r3, #4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	9203      	str	r2, [sp, #12]
 800a74c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a750:	3402      	adds	r4, #2
 800a752:	9305      	str	r3, [sp, #20]
 800a754:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a818 <_svfiprintf_r+0x1f4>
 800a758:	7821      	ldrb	r1, [r4, #0]
 800a75a:	2203      	movs	r2, #3
 800a75c:	4650      	mov	r0, sl
 800a75e:	f7f5 fd57 	bl	8000210 <memchr>
 800a762:	b138      	cbz	r0, 800a774 <_svfiprintf_r+0x150>
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	eba0 000a 	sub.w	r0, r0, sl
 800a76a:	2240      	movs	r2, #64	@ 0x40
 800a76c:	4082      	lsls	r2, r0
 800a76e:	4313      	orrs	r3, r2
 800a770:	3401      	adds	r4, #1
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a778:	4824      	ldr	r0, [pc, #144]	@ (800a80c <_svfiprintf_r+0x1e8>)
 800a77a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a77e:	2206      	movs	r2, #6
 800a780:	f7f5 fd46 	bl	8000210 <memchr>
 800a784:	2800      	cmp	r0, #0
 800a786:	d036      	beq.n	800a7f6 <_svfiprintf_r+0x1d2>
 800a788:	4b21      	ldr	r3, [pc, #132]	@ (800a810 <_svfiprintf_r+0x1ec>)
 800a78a:	bb1b      	cbnz	r3, 800a7d4 <_svfiprintf_r+0x1b0>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	3307      	adds	r3, #7
 800a790:	f023 0307 	bic.w	r3, r3, #7
 800a794:	3308      	adds	r3, #8
 800a796:	9303      	str	r3, [sp, #12]
 800a798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a79a:	4433      	add	r3, r6
 800a79c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79e:	e76a      	b.n	800a676 <_svfiprintf_r+0x52>
 800a7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	e7a8      	b.n	800a6fc <_svfiprintf_r+0xd8>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	3401      	adds	r4, #1
 800a7ae:	9305      	str	r3, [sp, #20]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f04f 0c0a 	mov.w	ip, #10
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7bc:	3a30      	subs	r2, #48	@ 0x30
 800a7be:	2a09      	cmp	r2, #9
 800a7c0:	d903      	bls.n	800a7ca <_svfiprintf_r+0x1a6>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0c6      	beq.n	800a754 <_svfiprintf_r+0x130>
 800a7c6:	9105      	str	r1, [sp, #20]
 800a7c8:	e7c4      	b.n	800a754 <_svfiprintf_r+0x130>
 800a7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e7f0      	b.n	800a7b6 <_svfiprintf_r+0x192>
 800a7d4:	ab03      	add	r3, sp, #12
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	462a      	mov	r2, r5
 800a7da:	4b0e      	ldr	r3, [pc, #56]	@ (800a814 <_svfiprintf_r+0x1f0>)
 800a7dc:	a904      	add	r1, sp, #16
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f3af 8000 	nop.w
 800a7e4:	1c42      	adds	r2, r0, #1
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	d1d6      	bne.n	800a798 <_svfiprintf_r+0x174>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	065b      	lsls	r3, r3, #25
 800a7ee:	f53f af2d 	bmi.w	800a64c <_svfiprintf_r+0x28>
 800a7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7f4:	e72c      	b.n	800a650 <_svfiprintf_r+0x2c>
 800a7f6:	ab03      	add	r3, sp, #12
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <_svfiprintf_r+0x1f0>)
 800a7fe:	a904      	add	r1, sp, #16
 800a800:	4638      	mov	r0, r7
 800a802:	f000 fb8b 	bl	800af1c <_printf_i>
 800a806:	e7ed      	b.n	800a7e4 <_svfiprintf_r+0x1c0>
 800a808:	0800c5c5 	.word	0x0800c5c5
 800a80c:	0800c5cf 	.word	0x0800c5cf
 800a810:	00000000 	.word	0x00000000
 800a814:	0800a56d 	.word	0x0800a56d
 800a818:	0800c5cb 	.word	0x0800c5cb

0800a81c <_sungetc_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	1c4b      	adds	r3, r1, #1
 800a820:	4614      	mov	r4, r2
 800a822:	d103      	bne.n	800a82c <_sungetc_r+0x10>
 800a824:	f04f 35ff 	mov.w	r5, #4294967295
 800a828:	4628      	mov	r0, r5
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	8993      	ldrh	r3, [r2, #12]
 800a82e:	f023 0320 	bic.w	r3, r3, #32
 800a832:	8193      	strh	r3, [r2, #12]
 800a834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a836:	6852      	ldr	r2, [r2, #4]
 800a838:	b2cd      	uxtb	r5, r1
 800a83a:	b18b      	cbz	r3, 800a860 <_sungetc_r+0x44>
 800a83c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a83e:	4293      	cmp	r3, r2
 800a840:	dd08      	ble.n	800a854 <_sungetc_r+0x38>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	1e5a      	subs	r2, r3, #1
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a84c:	6863      	ldr	r3, [r4, #4]
 800a84e:	3301      	adds	r3, #1
 800a850:	6063      	str	r3, [r4, #4]
 800a852:	e7e9      	b.n	800a828 <_sungetc_r+0xc>
 800a854:	4621      	mov	r1, r4
 800a856:	f000 ff5a 	bl	800b70e <__submore>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d0f1      	beq.n	800a842 <_sungetc_r+0x26>
 800a85e:	e7e1      	b.n	800a824 <_sungetc_r+0x8>
 800a860:	6921      	ldr	r1, [r4, #16]
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	b151      	cbz	r1, 800a87c <_sungetc_r+0x60>
 800a866:	4299      	cmp	r1, r3
 800a868:	d208      	bcs.n	800a87c <_sungetc_r+0x60>
 800a86a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a86e:	42a9      	cmp	r1, r5
 800a870:	d104      	bne.n	800a87c <_sungetc_r+0x60>
 800a872:	3b01      	subs	r3, #1
 800a874:	3201      	adds	r2, #1
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	6062      	str	r2, [r4, #4]
 800a87a:	e7d5      	b.n	800a828 <_sungetc_r+0xc>
 800a87c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a884:	6363      	str	r3, [r4, #52]	@ 0x34
 800a886:	2303      	movs	r3, #3
 800a888:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a88a:	4623      	mov	r3, r4
 800a88c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	2301      	movs	r3, #1
 800a894:	e7dc      	b.n	800a850 <_sungetc_r+0x34>

0800a896 <__ssrefill_r>:
 800a896:	b510      	push	{r4, lr}
 800a898:	460c      	mov	r4, r1
 800a89a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a89c:	b169      	cbz	r1, 800a8ba <__ssrefill_r+0x24>
 800a89e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d001      	beq.n	800a8aa <__ssrefill_r+0x14>
 800a8a6:	f7ff fc9b 	bl	800a1e0 <_free_r>
 800a8aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ac:	6063      	str	r3, [r4, #4]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	6360      	str	r0, [r4, #52]	@ 0x34
 800a8b2:	b113      	cbz	r3, 800a8ba <__ssrefill_r+0x24>
 800a8b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	6063      	str	r3, [r4, #4]
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f043 0320 	orr.w	r3, r3, #32
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ce:	e7f3      	b.n	800a8b8 <__ssrefill_r+0x22>

0800a8d0 <__ssvfiscanf_r>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a8da:	2100      	movs	r1, #0
 800a8dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a8e0:	49a6      	ldr	r1, [pc, #664]	@ (800ab7c <__ssvfiscanf_r+0x2ac>)
 800a8e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a8e4:	f10d 0804 	add.w	r8, sp, #4
 800a8e8:	49a5      	ldr	r1, [pc, #660]	@ (800ab80 <__ssvfiscanf_r+0x2b0>)
 800a8ea:	4fa6      	ldr	r7, [pc, #664]	@ (800ab84 <__ssvfiscanf_r+0x2b4>)
 800a8ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	f892 9000 	ldrb.w	r9, [r2]
 800a8fa:	f1b9 0f00 	cmp.w	r9, #0
 800a8fe:	f000 8158 	beq.w	800abb2 <__ssvfiscanf_r+0x2e2>
 800a902:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a906:	f013 0308 	ands.w	r3, r3, #8
 800a90a:	f102 0501 	add.w	r5, r2, #1
 800a90e:	d019      	beq.n	800a944 <__ssvfiscanf_r+0x74>
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	dd0f      	ble.n	800a936 <__ssvfiscanf_r+0x66>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	781a      	ldrb	r2, [r3, #0]
 800a91a:	5cba      	ldrb	r2, [r7, r2]
 800a91c:	0712      	lsls	r2, r2, #28
 800a91e:	d401      	bmi.n	800a924 <__ssvfiscanf_r+0x54>
 800a920:	462a      	mov	r2, r5
 800a922:	e7e8      	b.n	800a8f6 <__ssvfiscanf_r+0x26>
 800a924:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a926:	3201      	adds	r2, #1
 800a928:	9245      	str	r2, [sp, #276]	@ 0x114
 800a92a:	6862      	ldr	r2, [r4, #4]
 800a92c:	3301      	adds	r3, #1
 800a92e:	3a01      	subs	r2, #1
 800a930:	6062      	str	r2, [r4, #4]
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	e7ec      	b.n	800a910 <__ssvfiscanf_r+0x40>
 800a936:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a938:	4621      	mov	r1, r4
 800a93a:	4630      	mov	r0, r6
 800a93c:	4798      	blx	r3
 800a93e:	2800      	cmp	r0, #0
 800a940:	d0e9      	beq.n	800a916 <__ssvfiscanf_r+0x46>
 800a942:	e7ed      	b.n	800a920 <__ssvfiscanf_r+0x50>
 800a944:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a948:	f040 8085 	bne.w	800aa56 <__ssvfiscanf_r+0x186>
 800a94c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a94e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a950:	7853      	ldrb	r3, [r2, #1]
 800a952:	2b2a      	cmp	r3, #42	@ 0x2a
 800a954:	bf02      	ittt	eq
 800a956:	2310      	moveq	r3, #16
 800a958:	1c95      	addeq	r5, r2, #2
 800a95a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a95c:	220a      	movs	r2, #10
 800a95e:	46aa      	mov	sl, r5
 800a960:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a964:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a968:	2b09      	cmp	r3, #9
 800a96a:	d91e      	bls.n	800a9aa <__ssvfiscanf_r+0xda>
 800a96c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800ab88 <__ssvfiscanf_r+0x2b8>
 800a970:	2203      	movs	r2, #3
 800a972:	4658      	mov	r0, fp
 800a974:	f7f5 fc4c 	bl	8000210 <memchr>
 800a978:	b138      	cbz	r0, 800a98a <__ssvfiscanf_r+0xba>
 800a97a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a97c:	eba0 000b 	sub.w	r0, r0, fp
 800a980:	2301      	movs	r3, #1
 800a982:	4083      	lsls	r3, r0
 800a984:	4313      	orrs	r3, r2
 800a986:	9341      	str	r3, [sp, #260]	@ 0x104
 800a988:	4655      	mov	r5, sl
 800a98a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a98e:	2b78      	cmp	r3, #120	@ 0x78
 800a990:	d806      	bhi.n	800a9a0 <__ssvfiscanf_r+0xd0>
 800a992:	2b57      	cmp	r3, #87	@ 0x57
 800a994:	d810      	bhi.n	800a9b8 <__ssvfiscanf_r+0xe8>
 800a996:	2b25      	cmp	r3, #37	@ 0x25
 800a998:	d05d      	beq.n	800aa56 <__ssvfiscanf_r+0x186>
 800a99a:	d857      	bhi.n	800aa4c <__ssvfiscanf_r+0x17c>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d075      	beq.n	800aa8c <__ssvfiscanf_r+0x1bc>
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a9a4:	230a      	movs	r3, #10
 800a9a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a9a8:	e088      	b.n	800aabc <__ssvfiscanf_r+0x1ec>
 800a9aa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a9ac:	fb02 1103 	mla	r1, r2, r3, r1
 800a9b0:	3930      	subs	r1, #48	@ 0x30
 800a9b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a9b4:	4655      	mov	r5, sl
 800a9b6:	e7d2      	b.n	800a95e <__ssvfiscanf_r+0x8e>
 800a9b8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a9bc:	2a20      	cmp	r2, #32
 800a9be:	d8ef      	bhi.n	800a9a0 <__ssvfiscanf_r+0xd0>
 800a9c0:	a101      	add	r1, pc, #4	@ (adr r1, 800a9c8 <__ssvfiscanf_r+0xf8>)
 800a9c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a9c6:	bf00      	nop
 800a9c8:	0800aa9b 	.word	0x0800aa9b
 800a9cc:	0800a9a1 	.word	0x0800a9a1
 800a9d0:	0800a9a1 	.word	0x0800a9a1
 800a9d4:	0800aaf5 	.word	0x0800aaf5
 800a9d8:	0800a9a1 	.word	0x0800a9a1
 800a9dc:	0800a9a1 	.word	0x0800a9a1
 800a9e0:	0800a9a1 	.word	0x0800a9a1
 800a9e4:	0800a9a1 	.word	0x0800a9a1
 800a9e8:	0800a9a1 	.word	0x0800a9a1
 800a9ec:	0800a9a1 	.word	0x0800a9a1
 800a9f0:	0800a9a1 	.word	0x0800a9a1
 800a9f4:	0800ab0b 	.word	0x0800ab0b
 800a9f8:	0800aaf1 	.word	0x0800aaf1
 800a9fc:	0800aa53 	.word	0x0800aa53
 800aa00:	0800aa53 	.word	0x0800aa53
 800aa04:	0800aa53 	.word	0x0800aa53
 800aa08:	0800a9a1 	.word	0x0800a9a1
 800aa0c:	0800aaad 	.word	0x0800aaad
 800aa10:	0800a9a1 	.word	0x0800a9a1
 800aa14:	0800a9a1 	.word	0x0800a9a1
 800aa18:	0800a9a1 	.word	0x0800a9a1
 800aa1c:	0800a9a1 	.word	0x0800a9a1
 800aa20:	0800ab1b 	.word	0x0800ab1b
 800aa24:	0800aab5 	.word	0x0800aab5
 800aa28:	0800aa93 	.word	0x0800aa93
 800aa2c:	0800a9a1 	.word	0x0800a9a1
 800aa30:	0800a9a1 	.word	0x0800a9a1
 800aa34:	0800ab17 	.word	0x0800ab17
 800aa38:	0800a9a1 	.word	0x0800a9a1
 800aa3c:	0800aaf1 	.word	0x0800aaf1
 800aa40:	0800a9a1 	.word	0x0800a9a1
 800aa44:	0800a9a1 	.word	0x0800a9a1
 800aa48:	0800aa9b 	.word	0x0800aa9b
 800aa4c:	3b45      	subs	r3, #69	@ 0x45
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d8a6      	bhi.n	800a9a0 <__ssvfiscanf_r+0xd0>
 800aa52:	2305      	movs	r3, #5
 800aa54:	e031      	b.n	800aaba <__ssvfiscanf_r+0x1ea>
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dd0d      	ble.n	800aa78 <__ssvfiscanf_r+0x1a8>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	454a      	cmp	r2, r9
 800aa62:	f040 80a6 	bne.w	800abb2 <__ssvfiscanf_r+0x2e2>
 800aa66:	3301      	adds	r3, #1
 800aa68:	6862      	ldr	r2, [r4, #4]
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800aa6e:	3a01      	subs	r2, #1
 800aa70:	3301      	adds	r3, #1
 800aa72:	6062      	str	r2, [r4, #4]
 800aa74:	9345      	str	r3, [sp, #276]	@ 0x114
 800aa76:	e753      	b.n	800a920 <__ssvfiscanf_r+0x50>
 800aa78:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4798      	blx	r3
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0eb      	beq.n	800aa5c <__ssvfiscanf_r+0x18c>
 800aa84:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f040 808b 	bne.w	800aba2 <__ssvfiscanf_r+0x2d2>
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	e08b      	b.n	800abaa <__ssvfiscanf_r+0x2da>
 800aa92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aa94:	f042 0220 	orr.w	r2, r2, #32
 800aa98:	9241      	str	r2, [sp, #260]	@ 0x104
 800aa9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aa9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaa0:	9241      	str	r2, [sp, #260]	@ 0x104
 800aaa2:	2210      	movs	r2, #16
 800aaa4:	2b6e      	cmp	r3, #110	@ 0x6e
 800aaa6:	9242      	str	r2, [sp, #264]	@ 0x108
 800aaa8:	d902      	bls.n	800aab0 <__ssvfiscanf_r+0x1e0>
 800aaaa:	e005      	b.n	800aab8 <__ssvfiscanf_r+0x1e8>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9342      	str	r3, [sp, #264]	@ 0x108
 800aab0:	2303      	movs	r3, #3
 800aab2:	e002      	b.n	800aaba <__ssvfiscanf_r+0x1ea>
 800aab4:	2308      	movs	r3, #8
 800aab6:	9342      	str	r3, [sp, #264]	@ 0x108
 800aab8:	2304      	movs	r3, #4
 800aaba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dd39      	ble.n	800ab36 <__ssvfiscanf_r+0x266>
 800aac2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800aac4:	0659      	lsls	r1, r3, #25
 800aac6:	d404      	bmi.n	800aad2 <__ssvfiscanf_r+0x202>
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	5cba      	ldrb	r2, [r7, r2]
 800aace:	0712      	lsls	r2, r2, #28
 800aad0:	d438      	bmi.n	800ab44 <__ssvfiscanf_r+0x274>
 800aad2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	dc47      	bgt.n	800ab68 <__ssvfiscanf_r+0x298>
 800aad8:	466b      	mov	r3, sp
 800aada:	4622      	mov	r2, r4
 800aadc:	a941      	add	r1, sp, #260	@ 0x104
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 fb3a 	bl	800b158 <_scanf_chars>
 800aae4:	2801      	cmp	r0, #1
 800aae6:	d064      	beq.n	800abb2 <__ssvfiscanf_r+0x2e2>
 800aae8:	2802      	cmp	r0, #2
 800aaea:	f47f af19 	bne.w	800a920 <__ssvfiscanf_r+0x50>
 800aaee:	e7c9      	b.n	800aa84 <__ssvfiscanf_r+0x1b4>
 800aaf0:	220a      	movs	r2, #10
 800aaf2:	e7d7      	b.n	800aaa4 <__ssvfiscanf_r+0x1d4>
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f000 fdd0 	bl	800b69c <__sccl>
 800aafc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800aafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab02:	9341      	str	r3, [sp, #260]	@ 0x104
 800ab04:	4605      	mov	r5, r0
 800ab06:	2301      	movs	r3, #1
 800ab08:	e7d7      	b.n	800aaba <__ssvfiscanf_r+0x1ea>
 800ab0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ab0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab10:	9341      	str	r3, [sp, #260]	@ 0x104
 800ab12:	2300      	movs	r3, #0
 800ab14:	e7d1      	b.n	800aaba <__ssvfiscanf_r+0x1ea>
 800ab16:	2302      	movs	r3, #2
 800ab18:	e7cf      	b.n	800aaba <__ssvfiscanf_r+0x1ea>
 800ab1a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ab1c:	06c3      	lsls	r3, r0, #27
 800ab1e:	f53f aeff 	bmi.w	800a920 <__ssvfiscanf_r+0x50>
 800ab22:	9b00      	ldr	r3, [sp, #0]
 800ab24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab26:	1d19      	adds	r1, r3, #4
 800ab28:	9100      	str	r1, [sp, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	07c0      	lsls	r0, r0, #31
 800ab2e:	bf4c      	ite	mi
 800ab30:	801a      	strhmi	r2, [r3, #0]
 800ab32:	601a      	strpl	r2, [r3, #0]
 800ab34:	e6f4      	b.n	800a920 <__ssvfiscanf_r+0x50>
 800ab36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4798      	blx	r3
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d0bf      	beq.n	800aac2 <__ssvfiscanf_r+0x1f2>
 800ab42:	e79f      	b.n	800aa84 <__ssvfiscanf_r+0x1b4>
 800ab44:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab46:	3201      	adds	r2, #1
 800ab48:	9245      	str	r2, [sp, #276]	@ 0x114
 800ab4a:	6862      	ldr	r2, [r4, #4]
 800ab4c:	3a01      	subs	r2, #1
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	6062      	str	r2, [r4, #4]
 800ab52:	dd02      	ble.n	800ab5a <__ssvfiscanf_r+0x28a>
 800ab54:	3301      	adds	r3, #1
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	e7b6      	b.n	800aac8 <__ssvfiscanf_r+0x1f8>
 800ab5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4630      	mov	r0, r6
 800ab60:	4798      	blx	r3
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d0b0      	beq.n	800aac8 <__ssvfiscanf_r+0x1f8>
 800ab66:	e78d      	b.n	800aa84 <__ssvfiscanf_r+0x1b4>
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	dc0f      	bgt.n	800ab8c <__ssvfiscanf_r+0x2bc>
 800ab6c:	466b      	mov	r3, sp
 800ab6e:	4622      	mov	r2, r4
 800ab70:	a941      	add	r1, sp, #260	@ 0x104
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 fb4a 	bl	800b20c <_scanf_i>
 800ab78:	e7b4      	b.n	800aae4 <__ssvfiscanf_r+0x214>
 800ab7a:	bf00      	nop
 800ab7c:	0800a81d 	.word	0x0800a81d
 800ab80:	0800a897 	.word	0x0800a897
 800ab84:	0800c371 	.word	0x0800c371
 800ab88:	0800c5cb 	.word	0x0800c5cb
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	@ (800abb8 <__ssvfiscanf_r+0x2e8>)
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f43f aec6 	beq.w	800a920 <__ssvfiscanf_r+0x50>
 800ab94:	466b      	mov	r3, sp
 800ab96:	4622      	mov	r2, r4
 800ab98:	a941      	add	r1, sp, #260	@ 0x104
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f3af 8000 	nop.w
 800aba0:	e7a0      	b.n	800aae4 <__ssvfiscanf_r+0x214>
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	065b      	lsls	r3, r3, #25
 800aba6:	f53f af71 	bmi.w	800aa8c <__ssvfiscanf_r+0x1bc>
 800abaa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800abb4:	e7f9      	b.n	800abaa <__ssvfiscanf_r+0x2da>
 800abb6:	bf00      	nop
 800abb8:	00000000 	.word	0x00000000

0800abbc <__sfputc_r>:
 800abbc:	6893      	ldr	r3, [r2, #8]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	b410      	push	{r4}
 800abc4:	6093      	str	r3, [r2, #8]
 800abc6:	da08      	bge.n	800abda <__sfputc_r+0x1e>
 800abc8:	6994      	ldr	r4, [r2, #24]
 800abca:	42a3      	cmp	r3, r4
 800abcc:	db01      	blt.n	800abd2 <__sfputc_r+0x16>
 800abce:	290a      	cmp	r1, #10
 800abd0:	d103      	bne.n	800abda <__sfputc_r+0x1e>
 800abd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abd6:	f7fe ba6c 	b.w	80090b2 <__swbuf_r>
 800abda:	6813      	ldr	r3, [r2, #0]
 800abdc:	1c58      	adds	r0, r3, #1
 800abde:	6010      	str	r0, [r2, #0]
 800abe0:	7019      	strb	r1, [r3, #0]
 800abe2:	4608      	mov	r0, r1
 800abe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <__sfputs_r>:
 800abea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	18d5      	adds	r5, r2, r3
 800abf4:	42ac      	cmp	r4, r5
 800abf6:	d101      	bne.n	800abfc <__sfputs_r+0x12>
 800abf8:	2000      	movs	r0, #0
 800abfa:	e007      	b.n	800ac0c <__sfputs_r+0x22>
 800abfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac00:	463a      	mov	r2, r7
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7ff ffda 	bl	800abbc <__sfputc_r>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d1f3      	bne.n	800abf4 <__sfputs_r+0xa>
 800ac0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac10 <_vfiprintf_r>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	460d      	mov	r5, r1
 800ac16:	b09d      	sub	sp, #116	@ 0x74
 800ac18:	4614      	mov	r4, r2
 800ac1a:	4698      	mov	r8, r3
 800ac1c:	4606      	mov	r6, r0
 800ac1e:	b118      	cbz	r0, 800ac28 <_vfiprintf_r+0x18>
 800ac20:	6a03      	ldr	r3, [r0, #32]
 800ac22:	b90b      	cbnz	r3, 800ac28 <_vfiprintf_r+0x18>
 800ac24:	f7fe f8ce 	bl	8008dc4 <__sinit>
 800ac28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac2a:	07d9      	lsls	r1, r3, #31
 800ac2c:	d405      	bmi.n	800ac3a <_vfiprintf_r+0x2a>
 800ac2e:	89ab      	ldrh	r3, [r5, #12]
 800ac30:	059a      	lsls	r2, r3, #22
 800ac32:	d402      	bmi.n	800ac3a <_vfiprintf_r+0x2a>
 800ac34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac36:	f7ff fa93 	bl	800a160 <__retarget_lock_acquire_recursive>
 800ac3a:	89ab      	ldrh	r3, [r5, #12]
 800ac3c:	071b      	lsls	r3, r3, #28
 800ac3e:	d501      	bpl.n	800ac44 <_vfiprintf_r+0x34>
 800ac40:	692b      	ldr	r3, [r5, #16]
 800ac42:	b99b      	cbnz	r3, 800ac6c <_vfiprintf_r+0x5c>
 800ac44:	4629      	mov	r1, r5
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7fe fa72 	bl	8009130 <__swsetup_r>
 800ac4c:	b170      	cbz	r0, 800ac6c <_vfiprintf_r+0x5c>
 800ac4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac50:	07dc      	lsls	r4, r3, #31
 800ac52:	d504      	bpl.n	800ac5e <_vfiprintf_r+0x4e>
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	b01d      	add	sp, #116	@ 0x74
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	89ab      	ldrh	r3, [r5, #12]
 800ac60:	0598      	lsls	r0, r3, #22
 800ac62:	d4f7      	bmi.n	800ac54 <_vfiprintf_r+0x44>
 800ac64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac66:	f7ff fa7d 	bl	800a164 <__retarget_lock_release_recursive>
 800ac6a:	e7f3      	b.n	800ac54 <_vfiprintf_r+0x44>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac70:	2320      	movs	r3, #32
 800ac72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac7a:	2330      	movs	r3, #48	@ 0x30
 800ac7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae2c <_vfiprintf_r+0x21c>
 800ac80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac84:	f04f 0901 	mov.w	r9, #1
 800ac88:	4623      	mov	r3, r4
 800ac8a:	469a      	mov	sl, r3
 800ac8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac90:	b10a      	cbz	r2, 800ac96 <_vfiprintf_r+0x86>
 800ac92:	2a25      	cmp	r2, #37	@ 0x25
 800ac94:	d1f9      	bne.n	800ac8a <_vfiprintf_r+0x7a>
 800ac96:	ebba 0b04 	subs.w	fp, sl, r4
 800ac9a:	d00b      	beq.n	800acb4 <_vfiprintf_r+0xa4>
 800ac9c:	465b      	mov	r3, fp
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4629      	mov	r1, r5
 800aca2:	4630      	mov	r0, r6
 800aca4:	f7ff ffa1 	bl	800abea <__sfputs_r>
 800aca8:	3001      	adds	r0, #1
 800acaa:	f000 80a7 	beq.w	800adfc <_vfiprintf_r+0x1ec>
 800acae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acb0:	445a      	add	r2, fp
 800acb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800acb4:	f89a 3000 	ldrb.w	r3, [sl]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 809f 	beq.w	800adfc <_vfiprintf_r+0x1ec>
 800acbe:	2300      	movs	r3, #0
 800acc0:	f04f 32ff 	mov.w	r2, #4294967295
 800acc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acc8:	f10a 0a01 	add.w	sl, sl, #1
 800accc:	9304      	str	r3, [sp, #16]
 800acce:	9307      	str	r3, [sp, #28]
 800acd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800acd6:	4654      	mov	r4, sl
 800acd8:	2205      	movs	r2, #5
 800acda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acde:	4853      	ldr	r0, [pc, #332]	@ (800ae2c <_vfiprintf_r+0x21c>)
 800ace0:	f7f5 fa96 	bl	8000210 <memchr>
 800ace4:	9a04      	ldr	r2, [sp, #16]
 800ace6:	b9d8      	cbnz	r0, 800ad20 <_vfiprintf_r+0x110>
 800ace8:	06d1      	lsls	r1, r2, #27
 800acea:	bf44      	itt	mi
 800acec:	2320      	movmi	r3, #32
 800acee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acf2:	0713      	lsls	r3, r2, #28
 800acf4:	bf44      	itt	mi
 800acf6:	232b      	movmi	r3, #43	@ 0x2b
 800acf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ad00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad02:	d015      	beq.n	800ad30 <_vfiprintf_r+0x120>
 800ad04:	9a07      	ldr	r2, [sp, #28]
 800ad06:	4654      	mov	r4, sl
 800ad08:	2000      	movs	r0, #0
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4621      	mov	r1, r4
 800ad10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad14:	3b30      	subs	r3, #48	@ 0x30
 800ad16:	2b09      	cmp	r3, #9
 800ad18:	d94b      	bls.n	800adb2 <_vfiprintf_r+0x1a2>
 800ad1a:	b1b0      	cbz	r0, 800ad4a <_vfiprintf_r+0x13a>
 800ad1c:	9207      	str	r2, [sp, #28]
 800ad1e:	e014      	b.n	800ad4a <_vfiprintf_r+0x13a>
 800ad20:	eba0 0308 	sub.w	r3, r0, r8
 800ad24:	fa09 f303 	lsl.w	r3, r9, r3
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	46a2      	mov	sl, r4
 800ad2e:	e7d2      	b.n	800acd6 <_vfiprintf_r+0xc6>
 800ad30:	9b03      	ldr	r3, [sp, #12]
 800ad32:	1d19      	adds	r1, r3, #4
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	9103      	str	r1, [sp, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	bfbb      	ittet	lt
 800ad3c:	425b      	neglt	r3, r3
 800ad3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad42:	9307      	strge	r3, [sp, #28]
 800ad44:	9307      	strlt	r3, [sp, #28]
 800ad46:	bfb8      	it	lt
 800ad48:	9204      	strlt	r2, [sp, #16]
 800ad4a:	7823      	ldrb	r3, [r4, #0]
 800ad4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad4e:	d10a      	bne.n	800ad66 <_vfiprintf_r+0x156>
 800ad50:	7863      	ldrb	r3, [r4, #1]
 800ad52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad54:	d132      	bne.n	800adbc <_vfiprintf_r+0x1ac>
 800ad56:	9b03      	ldr	r3, [sp, #12]
 800ad58:	1d1a      	adds	r2, r3, #4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	9203      	str	r2, [sp, #12]
 800ad5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad62:	3402      	adds	r4, #2
 800ad64:	9305      	str	r3, [sp, #20]
 800ad66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae3c <_vfiprintf_r+0x22c>
 800ad6a:	7821      	ldrb	r1, [r4, #0]
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	4650      	mov	r0, sl
 800ad70:	f7f5 fa4e 	bl	8000210 <memchr>
 800ad74:	b138      	cbz	r0, 800ad86 <_vfiprintf_r+0x176>
 800ad76:	9b04      	ldr	r3, [sp, #16]
 800ad78:	eba0 000a 	sub.w	r0, r0, sl
 800ad7c:	2240      	movs	r2, #64	@ 0x40
 800ad7e:	4082      	lsls	r2, r0
 800ad80:	4313      	orrs	r3, r2
 800ad82:	3401      	adds	r4, #1
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8a:	4829      	ldr	r0, [pc, #164]	@ (800ae30 <_vfiprintf_r+0x220>)
 800ad8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad90:	2206      	movs	r2, #6
 800ad92:	f7f5 fa3d 	bl	8000210 <memchr>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d03f      	beq.n	800ae1a <_vfiprintf_r+0x20a>
 800ad9a:	4b26      	ldr	r3, [pc, #152]	@ (800ae34 <_vfiprintf_r+0x224>)
 800ad9c:	bb1b      	cbnz	r3, 800ade6 <_vfiprintf_r+0x1d6>
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	3307      	adds	r3, #7
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	3308      	adds	r3, #8
 800ada8:	9303      	str	r3, [sp, #12]
 800adaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adac:	443b      	add	r3, r7
 800adae:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb0:	e76a      	b.n	800ac88 <_vfiprintf_r+0x78>
 800adb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800adb6:	460c      	mov	r4, r1
 800adb8:	2001      	movs	r0, #1
 800adba:	e7a8      	b.n	800ad0e <_vfiprintf_r+0xfe>
 800adbc:	2300      	movs	r3, #0
 800adbe:	3401      	adds	r4, #1
 800adc0:	9305      	str	r3, [sp, #20]
 800adc2:	4619      	mov	r1, r3
 800adc4:	f04f 0c0a 	mov.w	ip, #10
 800adc8:	4620      	mov	r0, r4
 800adca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adce:	3a30      	subs	r2, #48	@ 0x30
 800add0:	2a09      	cmp	r2, #9
 800add2:	d903      	bls.n	800addc <_vfiprintf_r+0x1cc>
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0c6      	beq.n	800ad66 <_vfiprintf_r+0x156>
 800add8:	9105      	str	r1, [sp, #20]
 800adda:	e7c4      	b.n	800ad66 <_vfiprintf_r+0x156>
 800addc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ade0:	4604      	mov	r4, r0
 800ade2:	2301      	movs	r3, #1
 800ade4:	e7f0      	b.n	800adc8 <_vfiprintf_r+0x1b8>
 800ade6:	ab03      	add	r3, sp, #12
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	462a      	mov	r2, r5
 800adec:	4b12      	ldr	r3, [pc, #72]	@ (800ae38 <_vfiprintf_r+0x228>)
 800adee:	a904      	add	r1, sp, #16
 800adf0:	4630      	mov	r0, r6
 800adf2:	f3af 8000 	nop.w
 800adf6:	4607      	mov	r7, r0
 800adf8:	1c78      	adds	r0, r7, #1
 800adfa:	d1d6      	bne.n	800adaa <_vfiprintf_r+0x19a>
 800adfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adfe:	07d9      	lsls	r1, r3, #31
 800ae00:	d405      	bmi.n	800ae0e <_vfiprintf_r+0x1fe>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	059a      	lsls	r2, r3, #22
 800ae06:	d402      	bmi.n	800ae0e <_vfiprintf_r+0x1fe>
 800ae08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae0a:	f7ff f9ab 	bl	800a164 <__retarget_lock_release_recursive>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	065b      	lsls	r3, r3, #25
 800ae12:	f53f af1f 	bmi.w	800ac54 <_vfiprintf_r+0x44>
 800ae16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae18:	e71e      	b.n	800ac58 <_vfiprintf_r+0x48>
 800ae1a:	ab03      	add	r3, sp, #12
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	462a      	mov	r2, r5
 800ae20:	4b05      	ldr	r3, [pc, #20]	@ (800ae38 <_vfiprintf_r+0x228>)
 800ae22:	a904      	add	r1, sp, #16
 800ae24:	4630      	mov	r0, r6
 800ae26:	f000 f879 	bl	800af1c <_printf_i>
 800ae2a:	e7e4      	b.n	800adf6 <_vfiprintf_r+0x1e6>
 800ae2c:	0800c5c5 	.word	0x0800c5c5
 800ae30:	0800c5cf 	.word	0x0800c5cf
 800ae34:	00000000 	.word	0x00000000
 800ae38:	0800abeb 	.word	0x0800abeb
 800ae3c:	0800c5cb 	.word	0x0800c5cb

0800ae40 <_printf_common>:
 800ae40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae44:	4616      	mov	r6, r2
 800ae46:	4698      	mov	r8, r3
 800ae48:	688a      	ldr	r2, [r1, #8]
 800ae4a:	690b      	ldr	r3, [r1, #16]
 800ae4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae50:	4293      	cmp	r3, r2
 800ae52:	bfb8      	it	lt
 800ae54:	4613      	movlt	r3, r2
 800ae56:	6033      	str	r3, [r6, #0]
 800ae58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	460c      	mov	r4, r1
 800ae60:	b10a      	cbz	r2, 800ae66 <_printf_common+0x26>
 800ae62:	3301      	adds	r3, #1
 800ae64:	6033      	str	r3, [r6, #0]
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	0699      	lsls	r1, r3, #26
 800ae6a:	bf42      	ittt	mi
 800ae6c:	6833      	ldrmi	r3, [r6, #0]
 800ae6e:	3302      	addmi	r3, #2
 800ae70:	6033      	strmi	r3, [r6, #0]
 800ae72:	6825      	ldr	r5, [r4, #0]
 800ae74:	f015 0506 	ands.w	r5, r5, #6
 800ae78:	d106      	bne.n	800ae88 <_printf_common+0x48>
 800ae7a:	f104 0a19 	add.w	sl, r4, #25
 800ae7e:	68e3      	ldr	r3, [r4, #12]
 800ae80:	6832      	ldr	r2, [r6, #0]
 800ae82:	1a9b      	subs	r3, r3, r2
 800ae84:	42ab      	cmp	r3, r5
 800ae86:	dc26      	bgt.n	800aed6 <_printf_common+0x96>
 800ae88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae8c:	6822      	ldr	r2, [r4, #0]
 800ae8e:	3b00      	subs	r3, #0
 800ae90:	bf18      	it	ne
 800ae92:	2301      	movne	r3, #1
 800ae94:	0692      	lsls	r2, r2, #26
 800ae96:	d42b      	bmi.n	800aef0 <_printf_common+0xb0>
 800ae98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	4638      	mov	r0, r7
 800aea0:	47c8      	blx	r9
 800aea2:	3001      	adds	r0, #1
 800aea4:	d01e      	beq.n	800aee4 <_printf_common+0xa4>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	6922      	ldr	r2, [r4, #16]
 800aeaa:	f003 0306 	and.w	r3, r3, #6
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	bf02      	ittt	eq
 800aeb2:	68e5      	ldreq	r5, [r4, #12]
 800aeb4:	6833      	ldreq	r3, [r6, #0]
 800aeb6:	1aed      	subeq	r5, r5, r3
 800aeb8:	68a3      	ldr	r3, [r4, #8]
 800aeba:	bf0c      	ite	eq
 800aebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aec0:	2500      	movne	r5, #0
 800aec2:	4293      	cmp	r3, r2
 800aec4:	bfc4      	itt	gt
 800aec6:	1a9b      	subgt	r3, r3, r2
 800aec8:	18ed      	addgt	r5, r5, r3
 800aeca:	2600      	movs	r6, #0
 800aecc:	341a      	adds	r4, #26
 800aece:	42b5      	cmp	r5, r6
 800aed0:	d11a      	bne.n	800af08 <_printf_common+0xc8>
 800aed2:	2000      	movs	r0, #0
 800aed4:	e008      	b.n	800aee8 <_printf_common+0xa8>
 800aed6:	2301      	movs	r3, #1
 800aed8:	4652      	mov	r2, sl
 800aeda:	4641      	mov	r1, r8
 800aedc:	4638      	mov	r0, r7
 800aede:	47c8      	blx	r9
 800aee0:	3001      	adds	r0, #1
 800aee2:	d103      	bne.n	800aeec <_printf_common+0xac>
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeec:	3501      	adds	r5, #1
 800aeee:	e7c6      	b.n	800ae7e <_printf_common+0x3e>
 800aef0:	18e1      	adds	r1, r4, r3
 800aef2:	1c5a      	adds	r2, r3, #1
 800aef4:	2030      	movs	r0, #48	@ 0x30
 800aef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aefa:	4422      	add	r2, r4
 800aefc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af04:	3302      	adds	r3, #2
 800af06:	e7c7      	b.n	800ae98 <_printf_common+0x58>
 800af08:	2301      	movs	r3, #1
 800af0a:	4622      	mov	r2, r4
 800af0c:	4641      	mov	r1, r8
 800af0e:	4638      	mov	r0, r7
 800af10:	47c8      	blx	r9
 800af12:	3001      	adds	r0, #1
 800af14:	d0e6      	beq.n	800aee4 <_printf_common+0xa4>
 800af16:	3601      	adds	r6, #1
 800af18:	e7d9      	b.n	800aece <_printf_common+0x8e>
	...

0800af1c <_printf_i>:
 800af1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af20:	7e0f      	ldrb	r7, [r1, #24]
 800af22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af24:	2f78      	cmp	r7, #120	@ 0x78
 800af26:	4691      	mov	r9, r2
 800af28:	4680      	mov	r8, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	469a      	mov	sl, r3
 800af2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af32:	d807      	bhi.n	800af44 <_printf_i+0x28>
 800af34:	2f62      	cmp	r7, #98	@ 0x62
 800af36:	d80a      	bhi.n	800af4e <_printf_i+0x32>
 800af38:	2f00      	cmp	r7, #0
 800af3a:	f000 80d1 	beq.w	800b0e0 <_printf_i+0x1c4>
 800af3e:	2f58      	cmp	r7, #88	@ 0x58
 800af40:	f000 80b8 	beq.w	800b0b4 <_printf_i+0x198>
 800af44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af4c:	e03a      	b.n	800afc4 <_printf_i+0xa8>
 800af4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af52:	2b15      	cmp	r3, #21
 800af54:	d8f6      	bhi.n	800af44 <_printf_i+0x28>
 800af56:	a101      	add	r1, pc, #4	@ (adr r1, 800af5c <_printf_i+0x40>)
 800af58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af5c:	0800afb5 	.word	0x0800afb5
 800af60:	0800afc9 	.word	0x0800afc9
 800af64:	0800af45 	.word	0x0800af45
 800af68:	0800af45 	.word	0x0800af45
 800af6c:	0800af45 	.word	0x0800af45
 800af70:	0800af45 	.word	0x0800af45
 800af74:	0800afc9 	.word	0x0800afc9
 800af78:	0800af45 	.word	0x0800af45
 800af7c:	0800af45 	.word	0x0800af45
 800af80:	0800af45 	.word	0x0800af45
 800af84:	0800af45 	.word	0x0800af45
 800af88:	0800b0c7 	.word	0x0800b0c7
 800af8c:	0800aff3 	.word	0x0800aff3
 800af90:	0800b081 	.word	0x0800b081
 800af94:	0800af45 	.word	0x0800af45
 800af98:	0800af45 	.word	0x0800af45
 800af9c:	0800b0e9 	.word	0x0800b0e9
 800afa0:	0800af45 	.word	0x0800af45
 800afa4:	0800aff3 	.word	0x0800aff3
 800afa8:	0800af45 	.word	0x0800af45
 800afac:	0800af45 	.word	0x0800af45
 800afb0:	0800b089 	.word	0x0800b089
 800afb4:	6833      	ldr	r3, [r6, #0]
 800afb6:	1d1a      	adds	r2, r3, #4
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6032      	str	r2, [r6, #0]
 800afbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afc4:	2301      	movs	r3, #1
 800afc6:	e09c      	b.n	800b102 <_printf_i+0x1e6>
 800afc8:	6833      	ldr	r3, [r6, #0]
 800afca:	6820      	ldr	r0, [r4, #0]
 800afcc:	1d19      	adds	r1, r3, #4
 800afce:	6031      	str	r1, [r6, #0]
 800afd0:	0606      	lsls	r6, r0, #24
 800afd2:	d501      	bpl.n	800afd8 <_printf_i+0xbc>
 800afd4:	681d      	ldr	r5, [r3, #0]
 800afd6:	e003      	b.n	800afe0 <_printf_i+0xc4>
 800afd8:	0645      	lsls	r5, r0, #25
 800afda:	d5fb      	bpl.n	800afd4 <_printf_i+0xb8>
 800afdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	da03      	bge.n	800afec <_printf_i+0xd0>
 800afe4:	232d      	movs	r3, #45	@ 0x2d
 800afe6:	426d      	negs	r5, r5
 800afe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afec:	4858      	ldr	r0, [pc, #352]	@ (800b150 <_printf_i+0x234>)
 800afee:	230a      	movs	r3, #10
 800aff0:	e011      	b.n	800b016 <_printf_i+0xfa>
 800aff2:	6821      	ldr	r1, [r4, #0]
 800aff4:	6833      	ldr	r3, [r6, #0]
 800aff6:	0608      	lsls	r0, r1, #24
 800aff8:	f853 5b04 	ldr.w	r5, [r3], #4
 800affc:	d402      	bmi.n	800b004 <_printf_i+0xe8>
 800affe:	0649      	lsls	r1, r1, #25
 800b000:	bf48      	it	mi
 800b002:	b2ad      	uxthmi	r5, r5
 800b004:	2f6f      	cmp	r7, #111	@ 0x6f
 800b006:	4852      	ldr	r0, [pc, #328]	@ (800b150 <_printf_i+0x234>)
 800b008:	6033      	str	r3, [r6, #0]
 800b00a:	bf14      	ite	ne
 800b00c:	230a      	movne	r3, #10
 800b00e:	2308      	moveq	r3, #8
 800b010:	2100      	movs	r1, #0
 800b012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b016:	6866      	ldr	r6, [r4, #4]
 800b018:	60a6      	str	r6, [r4, #8]
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	db05      	blt.n	800b02a <_printf_i+0x10e>
 800b01e:	6821      	ldr	r1, [r4, #0]
 800b020:	432e      	orrs	r6, r5
 800b022:	f021 0104 	bic.w	r1, r1, #4
 800b026:	6021      	str	r1, [r4, #0]
 800b028:	d04b      	beq.n	800b0c2 <_printf_i+0x1a6>
 800b02a:	4616      	mov	r6, r2
 800b02c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b030:	fb03 5711 	mls	r7, r3, r1, r5
 800b034:	5dc7      	ldrb	r7, [r0, r7]
 800b036:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b03a:	462f      	mov	r7, r5
 800b03c:	42bb      	cmp	r3, r7
 800b03e:	460d      	mov	r5, r1
 800b040:	d9f4      	bls.n	800b02c <_printf_i+0x110>
 800b042:	2b08      	cmp	r3, #8
 800b044:	d10b      	bne.n	800b05e <_printf_i+0x142>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	07df      	lsls	r7, r3, #31
 800b04a:	d508      	bpl.n	800b05e <_printf_i+0x142>
 800b04c:	6923      	ldr	r3, [r4, #16]
 800b04e:	6861      	ldr	r1, [r4, #4]
 800b050:	4299      	cmp	r1, r3
 800b052:	bfde      	ittt	le
 800b054:	2330      	movle	r3, #48	@ 0x30
 800b056:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b05a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b05e:	1b92      	subs	r2, r2, r6
 800b060:	6122      	str	r2, [r4, #16]
 800b062:	f8cd a000 	str.w	sl, [sp]
 800b066:	464b      	mov	r3, r9
 800b068:	aa03      	add	r2, sp, #12
 800b06a:	4621      	mov	r1, r4
 800b06c:	4640      	mov	r0, r8
 800b06e:	f7ff fee7 	bl	800ae40 <_printf_common>
 800b072:	3001      	adds	r0, #1
 800b074:	d14a      	bne.n	800b10c <_printf_i+0x1f0>
 800b076:	f04f 30ff 	mov.w	r0, #4294967295
 800b07a:	b004      	add	sp, #16
 800b07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	f043 0320 	orr.w	r3, r3, #32
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	4832      	ldr	r0, [pc, #200]	@ (800b154 <_printf_i+0x238>)
 800b08a:	2778      	movs	r7, #120	@ 0x78
 800b08c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	6831      	ldr	r1, [r6, #0]
 800b094:	061f      	lsls	r7, r3, #24
 800b096:	f851 5b04 	ldr.w	r5, [r1], #4
 800b09a:	d402      	bmi.n	800b0a2 <_printf_i+0x186>
 800b09c:	065f      	lsls	r7, r3, #25
 800b09e:	bf48      	it	mi
 800b0a0:	b2ad      	uxthmi	r5, r5
 800b0a2:	6031      	str	r1, [r6, #0]
 800b0a4:	07d9      	lsls	r1, r3, #31
 800b0a6:	bf44      	itt	mi
 800b0a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ac:	6023      	strmi	r3, [r4, #0]
 800b0ae:	b11d      	cbz	r5, 800b0b8 <_printf_i+0x19c>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	e7ad      	b.n	800b010 <_printf_i+0xf4>
 800b0b4:	4826      	ldr	r0, [pc, #152]	@ (800b150 <_printf_i+0x234>)
 800b0b6:	e7e9      	b.n	800b08c <_printf_i+0x170>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	f023 0320 	bic.w	r3, r3, #32
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	e7f6      	b.n	800b0b0 <_printf_i+0x194>
 800b0c2:	4616      	mov	r6, r2
 800b0c4:	e7bd      	b.n	800b042 <_printf_i+0x126>
 800b0c6:	6833      	ldr	r3, [r6, #0]
 800b0c8:	6825      	ldr	r5, [r4, #0]
 800b0ca:	6961      	ldr	r1, [r4, #20]
 800b0cc:	1d18      	adds	r0, r3, #4
 800b0ce:	6030      	str	r0, [r6, #0]
 800b0d0:	062e      	lsls	r6, r5, #24
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	d501      	bpl.n	800b0da <_printf_i+0x1be>
 800b0d6:	6019      	str	r1, [r3, #0]
 800b0d8:	e002      	b.n	800b0e0 <_printf_i+0x1c4>
 800b0da:	0668      	lsls	r0, r5, #25
 800b0dc:	d5fb      	bpl.n	800b0d6 <_printf_i+0x1ba>
 800b0de:	8019      	strh	r1, [r3, #0]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	e7bc      	b.n	800b062 <_printf_i+0x146>
 800b0e8:	6833      	ldr	r3, [r6, #0]
 800b0ea:	1d1a      	adds	r2, r3, #4
 800b0ec:	6032      	str	r2, [r6, #0]
 800b0ee:	681e      	ldr	r6, [r3, #0]
 800b0f0:	6862      	ldr	r2, [r4, #4]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7f5 f88b 	bl	8000210 <memchr>
 800b0fa:	b108      	cbz	r0, 800b100 <_printf_i+0x1e4>
 800b0fc:	1b80      	subs	r0, r0, r6
 800b0fe:	6060      	str	r0, [r4, #4]
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	2300      	movs	r3, #0
 800b106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b10a:	e7aa      	b.n	800b062 <_printf_i+0x146>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	4632      	mov	r2, r6
 800b110:	4649      	mov	r1, r9
 800b112:	4640      	mov	r0, r8
 800b114:	47d0      	blx	sl
 800b116:	3001      	adds	r0, #1
 800b118:	d0ad      	beq.n	800b076 <_printf_i+0x15a>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	079b      	lsls	r3, r3, #30
 800b11e:	d413      	bmi.n	800b148 <_printf_i+0x22c>
 800b120:	68e0      	ldr	r0, [r4, #12]
 800b122:	9b03      	ldr	r3, [sp, #12]
 800b124:	4298      	cmp	r0, r3
 800b126:	bfb8      	it	lt
 800b128:	4618      	movlt	r0, r3
 800b12a:	e7a6      	b.n	800b07a <_printf_i+0x15e>
 800b12c:	2301      	movs	r3, #1
 800b12e:	4632      	mov	r2, r6
 800b130:	4649      	mov	r1, r9
 800b132:	4640      	mov	r0, r8
 800b134:	47d0      	blx	sl
 800b136:	3001      	adds	r0, #1
 800b138:	d09d      	beq.n	800b076 <_printf_i+0x15a>
 800b13a:	3501      	adds	r5, #1
 800b13c:	68e3      	ldr	r3, [r4, #12]
 800b13e:	9903      	ldr	r1, [sp, #12]
 800b140:	1a5b      	subs	r3, r3, r1
 800b142:	42ab      	cmp	r3, r5
 800b144:	dcf2      	bgt.n	800b12c <_printf_i+0x210>
 800b146:	e7eb      	b.n	800b120 <_printf_i+0x204>
 800b148:	2500      	movs	r5, #0
 800b14a:	f104 0619 	add.w	r6, r4, #25
 800b14e:	e7f5      	b.n	800b13c <_printf_i+0x220>
 800b150:	0800c5d6 	.word	0x0800c5d6
 800b154:	0800c5e7 	.word	0x0800c5e7

0800b158 <_scanf_chars>:
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	4615      	mov	r5, r2
 800b15e:	688a      	ldr	r2, [r1, #8]
 800b160:	4680      	mov	r8, r0
 800b162:	460c      	mov	r4, r1
 800b164:	b932      	cbnz	r2, 800b174 <_scanf_chars+0x1c>
 800b166:	698a      	ldr	r2, [r1, #24]
 800b168:	2a00      	cmp	r2, #0
 800b16a:	bf14      	ite	ne
 800b16c:	f04f 32ff 	movne.w	r2, #4294967295
 800b170:	2201      	moveq	r2, #1
 800b172:	608a      	str	r2, [r1, #8]
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b208 <_scanf_chars+0xb0>
 800b17a:	06d1      	lsls	r1, r2, #27
 800b17c:	bf5f      	itttt	pl
 800b17e:	681a      	ldrpl	r2, [r3, #0]
 800b180:	1d11      	addpl	r1, r2, #4
 800b182:	6019      	strpl	r1, [r3, #0]
 800b184:	6816      	ldrpl	r6, [r2, #0]
 800b186:	2700      	movs	r7, #0
 800b188:	69a0      	ldr	r0, [r4, #24]
 800b18a:	b188      	cbz	r0, 800b1b0 <_scanf_chars+0x58>
 800b18c:	2801      	cmp	r0, #1
 800b18e:	d107      	bne.n	800b1a0 <_scanf_chars+0x48>
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	6963      	ldr	r3, [r4, #20]
 800b196:	5c9b      	ldrb	r3, [r3, r2]
 800b198:	b953      	cbnz	r3, 800b1b0 <_scanf_chars+0x58>
 800b19a:	2f00      	cmp	r7, #0
 800b19c:	d031      	beq.n	800b202 <_scanf_chars+0xaa>
 800b19e:	e022      	b.n	800b1e6 <_scanf_chars+0x8e>
 800b1a0:	2802      	cmp	r0, #2
 800b1a2:	d120      	bne.n	800b1e6 <_scanf_chars+0x8e>
 800b1a4:	682b      	ldr	r3, [r5, #0]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b1ac:	071b      	lsls	r3, r3, #28
 800b1ae:	d41a      	bmi.n	800b1e6 <_scanf_chars+0x8e>
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	06da      	lsls	r2, r3, #27
 800b1b4:	bf5e      	ittt	pl
 800b1b6:	682b      	ldrpl	r3, [r5, #0]
 800b1b8:	781b      	ldrbpl	r3, [r3, #0]
 800b1ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b1be:	682a      	ldr	r2, [r5, #0]
 800b1c0:	686b      	ldr	r3, [r5, #4]
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	602a      	str	r2, [r5, #0]
 800b1c6:	68a2      	ldr	r2, [r4, #8]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	3a01      	subs	r2, #1
 800b1cc:	606b      	str	r3, [r5, #4]
 800b1ce:	3701      	adds	r7, #1
 800b1d0:	60a2      	str	r2, [r4, #8]
 800b1d2:	b142      	cbz	r2, 800b1e6 <_scanf_chars+0x8e>
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dcd7      	bgt.n	800b188 <_scanf_chars+0x30>
 800b1d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4640      	mov	r0, r8
 800b1e0:	4798      	blx	r3
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d0d0      	beq.n	800b188 <_scanf_chars+0x30>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	f013 0310 	ands.w	r3, r3, #16
 800b1ec:	d105      	bne.n	800b1fa <_scanf_chars+0xa2>
 800b1ee:	68e2      	ldr	r2, [r4, #12]
 800b1f0:	3201      	adds	r2, #1
 800b1f2:	60e2      	str	r2, [r4, #12]
 800b1f4:	69a2      	ldr	r2, [r4, #24]
 800b1f6:	b102      	cbz	r2, 800b1fa <_scanf_chars+0xa2>
 800b1f8:	7033      	strb	r3, [r6, #0]
 800b1fa:	6923      	ldr	r3, [r4, #16]
 800b1fc:	443b      	add	r3, r7
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	2000      	movs	r0, #0
 800b202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b206:	bf00      	nop
 800b208:	0800c371 	.word	0x0800c371

0800b20c <_scanf_i>:
 800b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	4698      	mov	r8, r3
 800b212:	4b74      	ldr	r3, [pc, #464]	@ (800b3e4 <_scanf_i+0x1d8>)
 800b214:	460c      	mov	r4, r1
 800b216:	4682      	mov	sl, r0
 800b218:	4616      	mov	r6, r2
 800b21a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b21e:	b087      	sub	sp, #28
 800b220:	ab03      	add	r3, sp, #12
 800b222:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b226:	4b70      	ldr	r3, [pc, #448]	@ (800b3e8 <_scanf_i+0x1dc>)
 800b228:	69a1      	ldr	r1, [r4, #24]
 800b22a:	4a70      	ldr	r2, [pc, #448]	@ (800b3ec <_scanf_i+0x1e0>)
 800b22c:	2903      	cmp	r1, #3
 800b22e:	bf08      	it	eq
 800b230:	461a      	moveq	r2, r3
 800b232:	68a3      	ldr	r3, [r4, #8]
 800b234:	9201      	str	r2, [sp, #4]
 800b236:	1e5a      	subs	r2, r3, #1
 800b238:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b23c:	bf88      	it	hi
 800b23e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b242:	4627      	mov	r7, r4
 800b244:	bf82      	ittt	hi
 800b246:	eb03 0905 	addhi.w	r9, r3, r5
 800b24a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b24e:	60a3      	strhi	r3, [r4, #8]
 800b250:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b254:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b258:	bf98      	it	ls
 800b25a:	f04f 0900 	movls.w	r9, #0
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	463d      	mov	r5, r7
 800b262:	f04f 0b00 	mov.w	fp, #0
 800b266:	6831      	ldr	r1, [r6, #0]
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	7809      	ldrb	r1, [r1, #0]
 800b26c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b270:	2202      	movs	r2, #2
 800b272:	f7f4 ffcd 	bl	8000210 <memchr>
 800b276:	b328      	cbz	r0, 800b2c4 <_scanf_i+0xb8>
 800b278:	f1bb 0f01 	cmp.w	fp, #1
 800b27c:	d159      	bne.n	800b332 <_scanf_i+0x126>
 800b27e:	6862      	ldr	r2, [r4, #4]
 800b280:	b92a      	cbnz	r2, 800b28e <_scanf_i+0x82>
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	2108      	movs	r1, #8
 800b286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b28a:	6061      	str	r1, [r4, #4]
 800b28c:	6022      	str	r2, [r4, #0]
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b294:	6022      	str	r2, [r4, #0]
 800b296:	68a2      	ldr	r2, [r4, #8]
 800b298:	1e51      	subs	r1, r2, #1
 800b29a:	60a1      	str	r1, [r4, #8]
 800b29c:	b192      	cbz	r2, 800b2c4 <_scanf_i+0xb8>
 800b29e:	6832      	ldr	r2, [r6, #0]
 800b2a0:	1c51      	adds	r1, r2, #1
 800b2a2:	6031      	str	r1, [r6, #0]
 800b2a4:	7812      	ldrb	r2, [r2, #0]
 800b2a6:	f805 2b01 	strb.w	r2, [r5], #1
 800b2aa:	6872      	ldr	r2, [r6, #4]
 800b2ac:	3a01      	subs	r2, #1
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	6072      	str	r2, [r6, #4]
 800b2b2:	dc07      	bgt.n	800b2c4 <_scanf_i+0xb8>
 800b2b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4650      	mov	r0, sl
 800b2bc:	4790      	blx	r2
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f040 8085 	bne.w	800b3ce <_scanf_i+0x1c2>
 800b2c4:	f10b 0b01 	add.w	fp, fp, #1
 800b2c8:	f1bb 0f03 	cmp.w	fp, #3
 800b2cc:	d1cb      	bne.n	800b266 <_scanf_i+0x5a>
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	b90b      	cbnz	r3, 800b2d6 <_scanf_i+0xca>
 800b2d2:	230a      	movs	r3, #10
 800b2d4:	6063      	str	r3, [r4, #4]
 800b2d6:	6863      	ldr	r3, [r4, #4]
 800b2d8:	4945      	ldr	r1, [pc, #276]	@ (800b3f0 <_scanf_i+0x1e4>)
 800b2da:	6960      	ldr	r0, [r4, #20]
 800b2dc:	1ac9      	subs	r1, r1, r3
 800b2de:	f000 f9dd 	bl	800b69c <__sccl>
 800b2e2:	f04f 0b00 	mov.w	fp, #0
 800b2e6:	68a3      	ldr	r3, [r4, #8]
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d03d      	beq.n	800b36a <_scanf_i+0x15e>
 800b2ee:	6831      	ldr	r1, [r6, #0]
 800b2f0:	6960      	ldr	r0, [r4, #20]
 800b2f2:	f891 c000 	ldrb.w	ip, [r1]
 800b2f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d035      	beq.n	800b36a <_scanf_i+0x15e>
 800b2fe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b302:	d124      	bne.n	800b34e <_scanf_i+0x142>
 800b304:	0510      	lsls	r0, r2, #20
 800b306:	d522      	bpl.n	800b34e <_scanf_i+0x142>
 800b308:	f10b 0b01 	add.w	fp, fp, #1
 800b30c:	f1b9 0f00 	cmp.w	r9, #0
 800b310:	d003      	beq.n	800b31a <_scanf_i+0x10e>
 800b312:	3301      	adds	r3, #1
 800b314:	f109 39ff 	add.w	r9, r9, #4294967295
 800b318:	60a3      	str	r3, [r4, #8]
 800b31a:	6873      	ldr	r3, [r6, #4]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	6073      	str	r3, [r6, #4]
 800b322:	dd1b      	ble.n	800b35c <_scanf_i+0x150>
 800b324:	6833      	ldr	r3, [r6, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	6033      	str	r3, [r6, #0]
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	60a3      	str	r3, [r4, #8]
 800b330:	e7d9      	b.n	800b2e6 <_scanf_i+0xda>
 800b332:	f1bb 0f02 	cmp.w	fp, #2
 800b336:	d1ae      	bne.n	800b296 <_scanf_i+0x8a>
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b33e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b342:	d1c4      	bne.n	800b2ce <_scanf_i+0xc2>
 800b344:	2110      	movs	r1, #16
 800b346:	6061      	str	r1, [r4, #4]
 800b348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b34c:	e7a2      	b.n	800b294 <_scanf_i+0x88>
 800b34e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b352:	6022      	str	r2, [r4, #0]
 800b354:	780b      	ldrb	r3, [r1, #0]
 800b356:	f805 3b01 	strb.w	r3, [r5], #1
 800b35a:	e7de      	b.n	800b31a <_scanf_i+0x10e>
 800b35c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b360:	4631      	mov	r1, r6
 800b362:	4650      	mov	r0, sl
 800b364:	4798      	blx	r3
 800b366:	2800      	cmp	r0, #0
 800b368:	d0df      	beq.n	800b32a <_scanf_i+0x11e>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	05d9      	lsls	r1, r3, #23
 800b36e:	d50d      	bpl.n	800b38c <_scanf_i+0x180>
 800b370:	42bd      	cmp	r5, r7
 800b372:	d909      	bls.n	800b388 <_scanf_i+0x17c>
 800b374:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b378:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b37c:	4632      	mov	r2, r6
 800b37e:	4650      	mov	r0, sl
 800b380:	4798      	blx	r3
 800b382:	f105 39ff 	add.w	r9, r5, #4294967295
 800b386:	464d      	mov	r5, r9
 800b388:	42bd      	cmp	r5, r7
 800b38a:	d028      	beq.n	800b3de <_scanf_i+0x1d2>
 800b38c:	6822      	ldr	r2, [r4, #0]
 800b38e:	f012 0210 	ands.w	r2, r2, #16
 800b392:	d113      	bne.n	800b3bc <_scanf_i+0x1b0>
 800b394:	702a      	strb	r2, [r5, #0]
 800b396:	6863      	ldr	r3, [r4, #4]
 800b398:	9e01      	ldr	r6, [sp, #4]
 800b39a:	4639      	mov	r1, r7
 800b39c:	4650      	mov	r0, sl
 800b39e:	47b0      	blx	r6
 800b3a0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a4:	6821      	ldr	r1, [r4, #0]
 800b3a6:	1d1a      	adds	r2, r3, #4
 800b3a8:	f8c8 2000 	str.w	r2, [r8]
 800b3ac:	f011 0f20 	tst.w	r1, #32
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	d00f      	beq.n	800b3d4 <_scanf_i+0x1c8>
 800b3b4:	6018      	str	r0, [r3, #0]
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	60e3      	str	r3, [r4, #12]
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	1bed      	subs	r5, r5, r7
 800b3c0:	445d      	add	r5, fp
 800b3c2:	442b      	add	r3, r5
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	b007      	add	sp, #28
 800b3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ce:	f04f 0b00 	mov.w	fp, #0
 800b3d2:	e7ca      	b.n	800b36a <_scanf_i+0x15e>
 800b3d4:	07ca      	lsls	r2, r1, #31
 800b3d6:	bf4c      	ite	mi
 800b3d8:	8018      	strhmi	r0, [r3, #0]
 800b3da:	6018      	strpl	r0, [r3, #0]
 800b3dc:	e7eb      	b.n	800b3b6 <_scanf_i+0x1aa>
 800b3de:	2001      	movs	r0, #1
 800b3e0:	e7f2      	b.n	800b3c8 <_scanf_i+0x1bc>
 800b3e2:	bf00      	nop
 800b3e4:	0800c29c 	.word	0x0800c29c
 800b3e8:	08008c95 	.word	0x08008c95
 800b3ec:	0800a555 	.word	0x0800a555
 800b3f0:	0800c608 	.word	0x0800c608

0800b3f4 <__sflush_r>:
 800b3f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	0716      	lsls	r6, r2, #28
 800b3fe:	4605      	mov	r5, r0
 800b400:	460c      	mov	r4, r1
 800b402:	d454      	bmi.n	800b4ae <__sflush_r+0xba>
 800b404:	684b      	ldr	r3, [r1, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	dc02      	bgt.n	800b410 <__sflush_r+0x1c>
 800b40a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dd48      	ble.n	800b4a2 <__sflush_r+0xae>
 800b410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b412:	2e00      	cmp	r6, #0
 800b414:	d045      	beq.n	800b4a2 <__sflush_r+0xae>
 800b416:	2300      	movs	r3, #0
 800b418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b41c:	682f      	ldr	r7, [r5, #0]
 800b41e:	6a21      	ldr	r1, [r4, #32]
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	d030      	beq.n	800b486 <__sflush_r+0x92>
 800b424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	0759      	lsls	r1, r3, #29
 800b42a:	d505      	bpl.n	800b438 <__sflush_r+0x44>
 800b42c:	6863      	ldr	r3, [r4, #4]
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b432:	b10b      	cbz	r3, 800b438 <__sflush_r+0x44>
 800b434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b43c:	6a21      	ldr	r1, [r4, #32]
 800b43e:	4628      	mov	r0, r5
 800b440:	47b0      	blx	r6
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	d106      	bne.n	800b456 <__sflush_r+0x62>
 800b448:	6829      	ldr	r1, [r5, #0]
 800b44a:	291d      	cmp	r1, #29
 800b44c:	d82b      	bhi.n	800b4a6 <__sflush_r+0xb2>
 800b44e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f8 <__sflush_r+0x104>)
 800b450:	40ca      	lsrs	r2, r1
 800b452:	07d6      	lsls	r6, r2, #31
 800b454:	d527      	bpl.n	800b4a6 <__sflush_r+0xb2>
 800b456:	2200      	movs	r2, #0
 800b458:	6062      	str	r2, [r4, #4]
 800b45a:	04d9      	lsls	r1, r3, #19
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	6022      	str	r2, [r4, #0]
 800b460:	d504      	bpl.n	800b46c <__sflush_r+0x78>
 800b462:	1c42      	adds	r2, r0, #1
 800b464:	d101      	bne.n	800b46a <__sflush_r+0x76>
 800b466:	682b      	ldr	r3, [r5, #0]
 800b468:	b903      	cbnz	r3, 800b46c <__sflush_r+0x78>
 800b46a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b46c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b46e:	602f      	str	r7, [r5, #0]
 800b470:	b1b9      	cbz	r1, 800b4a2 <__sflush_r+0xae>
 800b472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b476:	4299      	cmp	r1, r3
 800b478:	d002      	beq.n	800b480 <__sflush_r+0x8c>
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7fe feb0 	bl	800a1e0 <_free_r>
 800b480:	2300      	movs	r3, #0
 800b482:	6363      	str	r3, [r4, #52]	@ 0x34
 800b484:	e00d      	b.n	800b4a2 <__sflush_r+0xae>
 800b486:	2301      	movs	r3, #1
 800b488:	4628      	mov	r0, r5
 800b48a:	47b0      	blx	r6
 800b48c:	4602      	mov	r2, r0
 800b48e:	1c50      	adds	r0, r2, #1
 800b490:	d1c9      	bne.n	800b426 <__sflush_r+0x32>
 800b492:	682b      	ldr	r3, [r5, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0c6      	beq.n	800b426 <__sflush_r+0x32>
 800b498:	2b1d      	cmp	r3, #29
 800b49a:	d001      	beq.n	800b4a0 <__sflush_r+0xac>
 800b49c:	2b16      	cmp	r3, #22
 800b49e:	d11e      	bne.n	800b4de <__sflush_r+0xea>
 800b4a0:	602f      	str	r7, [r5, #0]
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e022      	b.n	800b4ec <__sflush_r+0xf8>
 800b4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4aa:	b21b      	sxth	r3, r3
 800b4ac:	e01b      	b.n	800b4e6 <__sflush_r+0xf2>
 800b4ae:	690f      	ldr	r7, [r1, #16]
 800b4b0:	2f00      	cmp	r7, #0
 800b4b2:	d0f6      	beq.n	800b4a2 <__sflush_r+0xae>
 800b4b4:	0793      	lsls	r3, r2, #30
 800b4b6:	680e      	ldr	r6, [r1, #0]
 800b4b8:	bf08      	it	eq
 800b4ba:	694b      	ldreq	r3, [r1, #20]
 800b4bc:	600f      	str	r7, [r1, #0]
 800b4be:	bf18      	it	ne
 800b4c0:	2300      	movne	r3, #0
 800b4c2:	eba6 0807 	sub.w	r8, r6, r7
 800b4c6:	608b      	str	r3, [r1, #8]
 800b4c8:	f1b8 0f00 	cmp.w	r8, #0
 800b4cc:	dde9      	ble.n	800b4a2 <__sflush_r+0xae>
 800b4ce:	6a21      	ldr	r1, [r4, #32]
 800b4d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b4d2:	4643      	mov	r3, r8
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b0      	blx	r6
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	dc08      	bgt.n	800b4f0 <__sflush_r+0xfc>
 800b4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f0:	4407      	add	r7, r0
 800b4f2:	eba8 0800 	sub.w	r8, r8, r0
 800b4f6:	e7e7      	b.n	800b4c8 <__sflush_r+0xd4>
 800b4f8:	20400001 	.word	0x20400001

0800b4fc <_fflush_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	690b      	ldr	r3, [r1, #16]
 800b500:	4605      	mov	r5, r0
 800b502:	460c      	mov	r4, r1
 800b504:	b913      	cbnz	r3, 800b50c <_fflush_r+0x10>
 800b506:	2500      	movs	r5, #0
 800b508:	4628      	mov	r0, r5
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	b118      	cbz	r0, 800b516 <_fflush_r+0x1a>
 800b50e:	6a03      	ldr	r3, [r0, #32]
 800b510:	b90b      	cbnz	r3, 800b516 <_fflush_r+0x1a>
 800b512:	f7fd fc57 	bl	8008dc4 <__sinit>
 800b516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0f3      	beq.n	800b506 <_fflush_r+0xa>
 800b51e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b520:	07d0      	lsls	r0, r2, #31
 800b522:	d404      	bmi.n	800b52e <_fflush_r+0x32>
 800b524:	0599      	lsls	r1, r3, #22
 800b526:	d402      	bmi.n	800b52e <_fflush_r+0x32>
 800b528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b52a:	f7fe fe19 	bl	800a160 <__retarget_lock_acquire_recursive>
 800b52e:	4628      	mov	r0, r5
 800b530:	4621      	mov	r1, r4
 800b532:	f7ff ff5f 	bl	800b3f4 <__sflush_r>
 800b536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b538:	07da      	lsls	r2, r3, #31
 800b53a:	4605      	mov	r5, r0
 800b53c:	d4e4      	bmi.n	800b508 <_fflush_r+0xc>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	059b      	lsls	r3, r3, #22
 800b542:	d4e1      	bmi.n	800b508 <_fflush_r+0xc>
 800b544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b546:	f7fe fe0d 	bl	800a164 <__retarget_lock_release_recursive>
 800b54a:	e7dd      	b.n	800b508 <_fflush_r+0xc>

0800b54c <fiprintf>:
 800b54c:	b40e      	push	{r1, r2, r3}
 800b54e:	b503      	push	{r0, r1, lr}
 800b550:	4601      	mov	r1, r0
 800b552:	ab03      	add	r3, sp, #12
 800b554:	4805      	ldr	r0, [pc, #20]	@ (800b56c <fiprintf+0x20>)
 800b556:	f853 2b04 	ldr.w	r2, [r3], #4
 800b55a:	6800      	ldr	r0, [r0, #0]
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	f7ff fb57 	bl	800ac10 <_vfiprintf_r>
 800b562:	b002      	add	sp, #8
 800b564:	f85d eb04 	ldr.w	lr, [sp], #4
 800b568:	b003      	add	sp, #12
 800b56a:	4770      	bx	lr
 800b56c:	2000002c 	.word	0x2000002c

0800b570 <__swhatbuf_r>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	460c      	mov	r4, r1
 800b574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b578:	2900      	cmp	r1, #0
 800b57a:	b096      	sub	sp, #88	@ 0x58
 800b57c:	4615      	mov	r5, r2
 800b57e:	461e      	mov	r6, r3
 800b580:	da0d      	bge.n	800b59e <__swhatbuf_r+0x2e>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b588:	f04f 0100 	mov.w	r1, #0
 800b58c:	bf14      	ite	ne
 800b58e:	2340      	movne	r3, #64	@ 0x40
 800b590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b594:	2000      	movs	r0, #0
 800b596:	6031      	str	r1, [r6, #0]
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	b016      	add	sp, #88	@ 0x58
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	466a      	mov	r2, sp
 800b5a0:	f000 f9f4 	bl	800b98c <_fstat_r>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	dbec      	blt.n	800b582 <__swhatbuf_r+0x12>
 800b5a8:	9901      	ldr	r1, [sp, #4]
 800b5aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5b2:	4259      	negs	r1, r3
 800b5b4:	4159      	adcs	r1, r3
 800b5b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5ba:	e7eb      	b.n	800b594 <__swhatbuf_r+0x24>

0800b5bc <__smakebuf_r>:
 800b5bc:	898b      	ldrh	r3, [r1, #12]
 800b5be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5c0:	079d      	lsls	r5, r3, #30
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	d507      	bpl.n	800b5d8 <__smakebuf_r+0x1c>
 800b5c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	6123      	str	r3, [r4, #16]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	6163      	str	r3, [r4, #20]
 800b5d4:	b003      	add	sp, #12
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d8:	ab01      	add	r3, sp, #4
 800b5da:	466a      	mov	r2, sp
 800b5dc:	f7ff ffc8 	bl	800b570 <__swhatbuf_r>
 800b5e0:	9f00      	ldr	r7, [sp, #0]
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7fe feba 	bl	800a360 <_malloc_r>
 800b5ec:	b948      	cbnz	r0, 800b602 <__smakebuf_r+0x46>
 800b5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f2:	059a      	lsls	r2, r3, #22
 800b5f4:	d4ee      	bmi.n	800b5d4 <__smakebuf_r+0x18>
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	f043 0302 	orr.w	r3, r3, #2
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	e7e2      	b.n	800b5c8 <__smakebuf_r+0xc>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	6020      	str	r0, [r4, #0]
 800b606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	9b01      	ldr	r3, [sp, #4]
 800b60e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b612:	b15b      	cbz	r3, 800b62c <__smakebuf_r+0x70>
 800b614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b618:	4630      	mov	r0, r6
 800b61a:	f000 f9c9 	bl	800b9b0 <_isatty_r>
 800b61e:	b128      	cbz	r0, 800b62c <__smakebuf_r+0x70>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	f023 0303 	bic.w	r3, r3, #3
 800b626:	f043 0301 	orr.w	r3, r3, #1
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	431d      	orrs	r5, r3
 800b630:	81a5      	strh	r5, [r4, #12]
 800b632:	e7cf      	b.n	800b5d4 <__smakebuf_r+0x18>

0800b634 <_putc_r>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	460d      	mov	r5, r1
 800b638:	4614      	mov	r4, r2
 800b63a:	4606      	mov	r6, r0
 800b63c:	b118      	cbz	r0, 800b646 <_putc_r+0x12>
 800b63e:	6a03      	ldr	r3, [r0, #32]
 800b640:	b90b      	cbnz	r3, 800b646 <_putc_r+0x12>
 800b642:	f7fd fbbf 	bl	8008dc4 <__sinit>
 800b646:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b648:	07d8      	lsls	r0, r3, #31
 800b64a:	d405      	bmi.n	800b658 <_putc_r+0x24>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	0599      	lsls	r1, r3, #22
 800b650:	d402      	bmi.n	800b658 <_putc_r+0x24>
 800b652:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b654:	f7fe fd84 	bl	800a160 <__retarget_lock_acquire_recursive>
 800b658:	68a3      	ldr	r3, [r4, #8]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	60a3      	str	r3, [r4, #8]
 800b660:	da05      	bge.n	800b66e <_putc_r+0x3a>
 800b662:	69a2      	ldr	r2, [r4, #24]
 800b664:	4293      	cmp	r3, r2
 800b666:	db12      	blt.n	800b68e <_putc_r+0x5a>
 800b668:	b2eb      	uxtb	r3, r5
 800b66a:	2b0a      	cmp	r3, #10
 800b66c:	d00f      	beq.n	800b68e <_putc_r+0x5a>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	6022      	str	r2, [r4, #0]
 800b674:	701d      	strb	r5, [r3, #0]
 800b676:	b2ed      	uxtb	r5, r5
 800b678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b67a:	07da      	lsls	r2, r3, #31
 800b67c:	d405      	bmi.n	800b68a <_putc_r+0x56>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	059b      	lsls	r3, r3, #22
 800b682:	d402      	bmi.n	800b68a <_putc_r+0x56>
 800b684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b686:	f7fe fd6d 	bl	800a164 <__retarget_lock_release_recursive>
 800b68a:	4628      	mov	r0, r5
 800b68c:	bd70      	pop	{r4, r5, r6, pc}
 800b68e:	4629      	mov	r1, r5
 800b690:	4622      	mov	r2, r4
 800b692:	4630      	mov	r0, r6
 800b694:	f7fd fd0d 	bl	80090b2 <__swbuf_r>
 800b698:	4605      	mov	r5, r0
 800b69a:	e7ed      	b.n	800b678 <_putc_r+0x44>

0800b69c <__sccl>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	780b      	ldrb	r3, [r1, #0]
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	2b5e      	cmp	r3, #94	@ 0x5e
 800b6a4:	bf0b      	itete	eq
 800b6a6:	784b      	ldrbeq	r3, [r1, #1]
 800b6a8:	1c4a      	addne	r2, r1, #1
 800b6aa:	1c8a      	addeq	r2, r1, #2
 800b6ac:	2100      	movne	r1, #0
 800b6ae:	bf08      	it	eq
 800b6b0:	2101      	moveq	r1, #1
 800b6b2:	3801      	subs	r0, #1
 800b6b4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b6b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b6bc:	42a8      	cmp	r0, r5
 800b6be:	d1fb      	bne.n	800b6b8 <__sccl+0x1c>
 800b6c0:	b90b      	cbnz	r3, 800b6c6 <__sccl+0x2a>
 800b6c2:	1e50      	subs	r0, r2, #1
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	f081 0101 	eor.w	r1, r1, #1
 800b6ca:	54e1      	strb	r1, [r4, r3]
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b6d4:	2d2d      	cmp	r5, #45	@ 0x2d
 800b6d6:	d005      	beq.n	800b6e4 <__sccl+0x48>
 800b6d8:	2d5d      	cmp	r5, #93	@ 0x5d
 800b6da:	d016      	beq.n	800b70a <__sccl+0x6e>
 800b6dc:	2d00      	cmp	r5, #0
 800b6de:	d0f1      	beq.n	800b6c4 <__sccl+0x28>
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	e7f2      	b.n	800b6ca <__sccl+0x2e>
 800b6e4:	7846      	ldrb	r6, [r0, #1]
 800b6e6:	2e5d      	cmp	r6, #93	@ 0x5d
 800b6e8:	d0fa      	beq.n	800b6e0 <__sccl+0x44>
 800b6ea:	42b3      	cmp	r3, r6
 800b6ec:	dcf8      	bgt.n	800b6e0 <__sccl+0x44>
 800b6ee:	3002      	adds	r0, #2
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	3201      	adds	r2, #1
 800b6f4:	4296      	cmp	r6, r2
 800b6f6:	54a1      	strb	r1, [r4, r2]
 800b6f8:	dcfb      	bgt.n	800b6f2 <__sccl+0x56>
 800b6fa:	1af2      	subs	r2, r6, r3
 800b6fc:	3a01      	subs	r2, #1
 800b6fe:	1c5d      	adds	r5, r3, #1
 800b700:	42b3      	cmp	r3, r6
 800b702:	bfa8      	it	ge
 800b704:	2200      	movge	r2, #0
 800b706:	18ab      	adds	r3, r5, r2
 800b708:	e7e1      	b.n	800b6ce <__sccl+0x32>
 800b70a:	4610      	mov	r0, r2
 800b70c:	e7da      	b.n	800b6c4 <__sccl+0x28>

0800b70e <__submore>:
 800b70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	460c      	mov	r4, r1
 800b714:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b71a:	4299      	cmp	r1, r3
 800b71c:	d11d      	bne.n	800b75a <__submore+0x4c>
 800b71e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b722:	f7fe fe1d 	bl	800a360 <_malloc_r>
 800b726:	b918      	cbnz	r0, 800b730 <__submore+0x22>
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b730:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b734:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b736:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b73a:	6360      	str	r0, [r4, #52]	@ 0x34
 800b73c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b740:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b744:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b748:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b74c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b750:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b754:	6020      	str	r0, [r4, #0]
 800b756:	2000      	movs	r0, #0
 800b758:	e7e8      	b.n	800b72c <__submore+0x1e>
 800b75a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b75c:	0077      	lsls	r7, r6, #1
 800b75e:	463a      	mov	r2, r7
 800b760:	f000 f95a 	bl	800ba18 <_realloc_r>
 800b764:	4605      	mov	r5, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d0de      	beq.n	800b728 <__submore+0x1a>
 800b76a:	eb00 0806 	add.w	r8, r0, r6
 800b76e:	4601      	mov	r1, r0
 800b770:	4632      	mov	r2, r6
 800b772:	4640      	mov	r0, r8
 800b774:	f7fe fcff 	bl	800a176 <memcpy>
 800b778:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b77c:	f8c4 8000 	str.w	r8, [r4]
 800b780:	e7e9      	b.n	800b756 <__submore+0x48>

0800b782 <strncmp>:
 800b782:	b510      	push	{r4, lr}
 800b784:	b16a      	cbz	r2, 800b7a2 <strncmp+0x20>
 800b786:	3901      	subs	r1, #1
 800b788:	1884      	adds	r4, r0, r2
 800b78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b78e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b792:	429a      	cmp	r2, r3
 800b794:	d103      	bne.n	800b79e <strncmp+0x1c>
 800b796:	42a0      	cmp	r0, r4
 800b798:	d001      	beq.n	800b79e <strncmp+0x1c>
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	d1f5      	bne.n	800b78a <strncmp+0x8>
 800b79e:	1ad0      	subs	r0, r2, r3
 800b7a0:	bd10      	pop	{r4, pc}
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	e7fc      	b.n	800b7a0 <strncmp+0x1e>
	...

0800b7a8 <asctime>:
 800b7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <asctime+0x38>)
 800b7aa:	b570      	push	{r4, r5, r6, lr}
 800b7ac:	681d      	ldr	r5, [r3, #0]
 800b7ae:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	b976      	cbnz	r6, 800b7d2 <asctime+0x2a>
 800b7b4:	201a      	movs	r0, #26
 800b7b6:	f7fe fda1 	bl	800a2fc <malloc>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	63a8      	str	r0, [r5, #56]	@ 0x38
 800b7be:	b920      	cbnz	r0, 800b7ca <asctime+0x22>
 800b7c0:	4b08      	ldr	r3, [pc, #32]	@ (800b7e4 <asctime+0x3c>)
 800b7c2:	4809      	ldr	r0, [pc, #36]	@ (800b7e8 <asctime+0x40>)
 800b7c4:	213b      	movs	r1, #59	@ 0x3b
 800b7c6:	f7fe fce5 	bl	800a194 <__assert_func>
 800b7ca:	221a      	movs	r2, #26
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	f7fd fd1f 	bl	8009210 <memset>
 800b7d2:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7da:	f000 b807 	b.w	800b7ec <asctime_r>
 800b7de:	bf00      	nop
 800b7e0:	2000002c 	.word	0x2000002c
 800b7e4:	0800c471 	.word	0x0800c471
 800b7e8:	0800c613 	.word	0x0800c613

0800b7ec <asctime_r>:
 800b7ec:	b510      	push	{r4, lr}
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	6941      	ldr	r1, [r0, #20]
 800b7f2:	6903      	ldr	r3, [r0, #16]
 800b7f4:	6982      	ldr	r2, [r0, #24]
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 800b7fc:	9104      	str	r1, [sp, #16]
 800b7fe:	6801      	ldr	r1, [r0, #0]
 800b800:	9103      	str	r1, [sp, #12]
 800b802:	6841      	ldr	r1, [r0, #4]
 800b804:	9102      	str	r1, [sp, #8]
 800b806:	6881      	ldr	r1, [r0, #8]
 800b808:	9101      	str	r1, [sp, #4]
 800b80a:	68c1      	ldr	r1, [r0, #12]
 800b80c:	9100      	str	r1, [sp, #0]
 800b80e:	4907      	ldr	r1, [pc, #28]	@ (800b82c <asctime_r+0x40>)
 800b810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b814:	440b      	add	r3, r1
 800b816:	4906      	ldr	r1, [pc, #24]	@ (800b830 <asctime_r+0x44>)
 800b818:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b81c:	440a      	add	r2, r1
 800b81e:	4620      	mov	r0, r4
 800b820:	4904      	ldr	r1, [pc, #16]	@ (800b834 <asctime_r+0x48>)
 800b822:	f7fd fbb3 	bl	8008f8c <siprintf>
 800b826:	4620      	mov	r0, r4
 800b828:	b006      	add	sp, #24
 800b82a:	bd10      	pop	{r4, pc}
 800b82c:	0800c74c 	.word	0x0800c74c
 800b830:	0800c770 	.word	0x0800c770
 800b834:	0800c66c 	.word	0x0800c66c

0800b838 <__gettzinfo>:
 800b838:	4800      	ldr	r0, [pc, #0]	@ (800b83c <__gettzinfo+0x4>)
 800b83a:	4770      	bx	lr
 800b83c:	20000080 	.word	0x20000080

0800b840 <gmtime_r>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	4a4d      	ldr	r2, [pc, #308]	@ (800b97c <gmtime_r+0x13c>)
 800b846:	460c      	mov	r4, r1
 800b848:	2300      	movs	r3, #0
 800b84a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b84e:	f7f4 fd2f 	bl	80002b0 <__aeabi_ldivmod>
 800b852:	2a00      	cmp	r2, #0
 800b854:	bfbc      	itt	lt
 800b856:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800b85a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800b85e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b862:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800b866:	fbb2 f3f1 	udiv	r3, r2, r1
 800b86a:	fb01 2213 	mls	r2, r1, r3, r2
 800b86e:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800b872:	bfac      	ite	ge
 800b874:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800b878:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	fbb2 f3f1 	udiv	r3, r2, r1
 800b882:	fb01 2213 	mls	r2, r1, r3, r2
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	6022      	str	r2, [r4, #0]
 800b88a:	1cc3      	adds	r3, r0, #3
 800b88c:	2207      	movs	r2, #7
 800b88e:	fb93 f2f2 	sdiv	r2, r3, r2
 800b892:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b896:	1a9b      	subs	r3, r3, r2
 800b898:	4939      	ldr	r1, [pc, #228]	@ (800b980 <gmtime_r+0x140>)
 800b89a:	d555      	bpl.n	800b948 <gmtime_r+0x108>
 800b89c:	3307      	adds	r3, #7
 800b89e:	61a3      	str	r3, [r4, #24]
 800b8a0:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 800b8a4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800b8a8:	fb93 f1f1 	sdiv	r1, r3, r1
 800b8ac:	4b35      	ldr	r3, [pc, #212]	@ (800b984 <gmtime_r+0x144>)
 800b8ae:	fb03 0001 	mla	r0, r3, r1, r0
 800b8b2:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800b8b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8ba:	4403      	add	r3, r0
 800b8bc:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800b8c0:	fbb0 f2fc 	udiv	r2, r0, ip
 800b8c4:	1a9b      	subs	r3, r3, r2
 800b8c6:	f240 176d 	movw	r7, #365	@ 0x16d
 800b8ca:	4a2f      	ldr	r2, [pc, #188]	@ (800b988 <gmtime_r+0x148>)
 800b8cc:	fbb0 f2f2 	udiv	r2, r0, r2
 800b8d0:	2664      	movs	r6, #100	@ 0x64
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	fbb3 f2f7 	udiv	r2, r3, r7
 800b8d8:	fbb3 f3fc 	udiv	r3, r3, ip
 800b8dc:	fbb2 f5f6 	udiv	r5, r2, r6
 800b8e0:	1aeb      	subs	r3, r5, r3
 800b8e2:	4403      	add	r3, r0
 800b8e4:	fb07 3312 	mls	r3, r7, r2, r3
 800b8e8:	2099      	movs	r0, #153	@ 0x99
 800b8ea:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800b8ee:	3702      	adds	r7, #2
 800b8f0:	f103 0e01 	add.w	lr, r3, #1
 800b8f4:	fbb7 fcf0 	udiv	ip, r7, r0
 800b8f8:	fb00 f00c 	mul.w	r0, r0, ip
 800b8fc:	3002      	adds	r0, #2
 800b8fe:	f04f 0805 	mov.w	r8, #5
 800b902:	fbb0 f0f8 	udiv	r0, r0, r8
 800b906:	ebae 0000 	sub.w	r0, lr, r0
 800b90a:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800b90e:	4577      	cmp	r7, lr
 800b910:	bf8c      	ite	hi
 800b912:	f06f 0709 	mvnhi.w	r7, #9
 800b916:	2702      	movls	r7, #2
 800b918:	4467      	add	r7, ip
 800b91a:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800b91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b922:	2f01      	cmp	r7, #1
 800b924:	bf98      	it	ls
 800b926:	3101      	addls	r1, #1
 800b928:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800b92c:	d312      	bcc.n	800b954 <gmtime_r+0x114>
 800b92e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800b932:	61e3      	str	r3, [r4, #28]
 800b934:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800b938:	2300      	movs	r3, #0
 800b93a:	60e0      	str	r0, [r4, #12]
 800b93c:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800b940:	6223      	str	r3, [r4, #32]
 800b942:	4620      	mov	r0, r4
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	2800      	cmp	r0, #0
 800b94a:	61a3      	str	r3, [r4, #24]
 800b94c:	dba8      	blt.n	800b8a0 <gmtime_r+0x60>
 800b94e:	fb90 f1f1 	sdiv	r1, r0, r1
 800b952:	e7ab      	b.n	800b8ac <gmtime_r+0x6c>
 800b954:	f012 0f03 	tst.w	r2, #3
 800b958:	d102      	bne.n	800b960 <gmtime_r+0x120>
 800b95a:	fb06 2515 	mls	r5, r6, r5, r2
 800b95e:	b95d      	cbnz	r5, 800b978 <gmtime_r+0x138>
 800b960:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800b964:	fbb2 f6f5 	udiv	r6, r2, r5
 800b968:	fb05 2216 	mls	r2, r5, r6, r2
 800b96c:	fab2 f282 	clz	r2, r2
 800b970:	0952      	lsrs	r2, r2, #5
 800b972:	333b      	adds	r3, #59	@ 0x3b
 800b974:	4413      	add	r3, r2
 800b976:	e7dc      	b.n	800b932 <gmtime_r+0xf2>
 800b978:	2201      	movs	r2, #1
 800b97a:	e7fa      	b.n	800b972 <gmtime_r+0x132>
 800b97c:	00015180 	.word	0x00015180
 800b980:	00023ab1 	.word	0x00023ab1
 800b984:	fffdc54f 	.word	0xfffdc54f
 800b988:	00023ab0 	.word	0x00023ab0

0800b98c <_fstat_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	@ (800b9ac <_fstat_r+0x20>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	f7f6 fc15 	bl	80021c8 <_fstat>
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	d102      	bne.n	800b9a8 <_fstat_r+0x1c>
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	b103      	cbz	r3, 800b9a8 <_fstat_r+0x1c>
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	bd38      	pop	{r3, r4, r5, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20005524 	.word	0x20005524

0800b9b0 <_isatty_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d06      	ldr	r5, [pc, #24]	@ (800b9cc <_isatty_r+0x1c>)
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f6 fc14 	bl	80021e8 <_isatty>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_isatty_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_isatty_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	20005524 	.word	0x20005524

0800b9d0 <_sbrk_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4d06      	ldr	r5, [pc, #24]	@ (800b9ec <_sbrk_r+0x1c>)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	602b      	str	r3, [r5, #0]
 800b9dc:	f7f6 fc1c 	bl	8002218 <_sbrk>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_sbrk_r+0x1a>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_sbrk_r+0x1a>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	20005524 	.word	0x20005524

0800b9f0 <abort>:
 800b9f0:	b508      	push	{r3, lr}
 800b9f2:	2006      	movs	r0, #6
 800b9f4:	f000 f866 	bl	800bac4 <raise>
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f7f6 fb95 	bl	8002128 <_exit>
	...

0800ba00 <__env_lock>:
 800ba00:	4801      	ldr	r0, [pc, #4]	@ (800ba08 <__env_lock+0x8>)
 800ba02:	f7fe bbad 	b.w	800a160 <__retarget_lock_acquire_recursive>
 800ba06:	bf00      	nop
 800ba08:	20005529 	.word	0x20005529

0800ba0c <__env_unlock>:
 800ba0c:	4801      	ldr	r0, [pc, #4]	@ (800ba14 <__env_unlock+0x8>)
 800ba0e:	f7fe bba9 	b.w	800a164 <__retarget_lock_release_recursive>
 800ba12:	bf00      	nop
 800ba14:	20005529 	.word	0x20005529

0800ba18 <_realloc_r>:
 800ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	4614      	mov	r4, r2
 800ba20:	460d      	mov	r5, r1
 800ba22:	b921      	cbnz	r1, 800ba2e <_realloc_r+0x16>
 800ba24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba28:	4611      	mov	r1, r2
 800ba2a:	f7fe bc99 	b.w	800a360 <_malloc_r>
 800ba2e:	b92a      	cbnz	r2, 800ba3c <_realloc_r+0x24>
 800ba30:	f7fe fbd6 	bl	800a1e0 <_free_r>
 800ba34:	4625      	mov	r5, r4
 800ba36:	4628      	mov	r0, r5
 800ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3c:	f000 f85e 	bl	800bafc <_malloc_usable_size_r>
 800ba40:	4284      	cmp	r4, r0
 800ba42:	4606      	mov	r6, r0
 800ba44:	d802      	bhi.n	800ba4c <_realloc_r+0x34>
 800ba46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba4a:	d8f4      	bhi.n	800ba36 <_realloc_r+0x1e>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4638      	mov	r0, r7
 800ba50:	f7fe fc86 	bl	800a360 <_malloc_r>
 800ba54:	4680      	mov	r8, r0
 800ba56:	b908      	cbnz	r0, 800ba5c <_realloc_r+0x44>
 800ba58:	4645      	mov	r5, r8
 800ba5a:	e7ec      	b.n	800ba36 <_realloc_r+0x1e>
 800ba5c:	42b4      	cmp	r4, r6
 800ba5e:	4622      	mov	r2, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	bf28      	it	cs
 800ba64:	4632      	movcs	r2, r6
 800ba66:	f7fe fb86 	bl	800a176 <memcpy>
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	f7fe fbb7 	bl	800a1e0 <_free_r>
 800ba72:	e7f1      	b.n	800ba58 <_realloc_r+0x40>

0800ba74 <_raise_r>:
 800ba74:	291f      	cmp	r1, #31
 800ba76:	b538      	push	{r3, r4, r5, lr}
 800ba78:	4605      	mov	r5, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	d904      	bls.n	800ba88 <_raise_r+0x14>
 800ba7e:	2316      	movs	r3, #22
 800ba80:	6003      	str	r3, [r0, #0]
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba8a:	b112      	cbz	r2, 800ba92 <_raise_r+0x1e>
 800ba8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba90:	b94b      	cbnz	r3, 800baa6 <_raise_r+0x32>
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 f830 	bl	800baf8 <_getpid_r>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa2:	f000 b817 	b.w	800bad4 <_kill_r>
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d00a      	beq.n	800bac0 <_raise_r+0x4c>
 800baaa:	1c59      	adds	r1, r3, #1
 800baac:	d103      	bne.n	800bab6 <_raise_r+0x42>
 800baae:	2316      	movs	r3, #22
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	2001      	movs	r0, #1
 800bab4:	e7e7      	b.n	800ba86 <_raise_r+0x12>
 800bab6:	2100      	movs	r1, #0
 800bab8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800babc:	4620      	mov	r0, r4
 800babe:	4798      	blx	r3
 800bac0:	2000      	movs	r0, #0
 800bac2:	e7e0      	b.n	800ba86 <_raise_r+0x12>

0800bac4 <raise>:
 800bac4:	4b02      	ldr	r3, [pc, #8]	@ (800bad0 <raise+0xc>)
 800bac6:	4601      	mov	r1, r0
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	f7ff bfd3 	b.w	800ba74 <_raise_r>
 800bace:	bf00      	nop
 800bad0:	2000002c 	.word	0x2000002c

0800bad4 <_kill_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d07      	ldr	r5, [pc, #28]	@ (800baf4 <_kill_r+0x20>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	f7f6 fb11 	bl	8002108 <_kill>
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	d102      	bne.n	800baf0 <_kill_r+0x1c>
 800baea:	682b      	ldr	r3, [r5, #0]
 800baec:	b103      	cbz	r3, 800baf0 <_kill_r+0x1c>
 800baee:	6023      	str	r3, [r4, #0]
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop
 800baf4:	20005524 	.word	0x20005524

0800baf8 <_getpid_r>:
 800baf8:	f7f6 bafe 	b.w	80020f8 <_getpid>

0800bafc <_malloc_usable_size_r>:
 800bafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb00:	1f18      	subs	r0, r3, #4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bfbc      	itt	lt
 800bb06:	580b      	ldrlt	r3, [r1, r0]
 800bb08:	18c0      	addlt	r0, r0, r3
 800bb0a:	4770      	bx	lr

0800bb0c <_init>:
 800bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0e:	bf00      	nop
 800bb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb12:	bc08      	pop	{r3}
 800bb14:	469e      	mov	lr, r3
 800bb16:	4770      	bx	lr

0800bb18 <_fini>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	bf00      	nop
 800bb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1e:	bc08      	pop	{r3}
 800bb20:	469e      	mov	lr, r3
 800bb22:	4770      	bx	lr
