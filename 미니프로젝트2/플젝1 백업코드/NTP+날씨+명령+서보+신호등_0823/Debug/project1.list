
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010414  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000100c  080105b8  080105b8  000115b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115c4  080115c4  00013248  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080115c4  080115c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115cc  080115cc  00013248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115cc  080115cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115d0  080115d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  080115d4  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cbc  20000248  0801181c  00013248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006f04  0801181c  00013f04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8fb  00000000  00000000  00013278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049a7  00000000  00000000  00032b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  00037520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e4  00000000  00000000  00039100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c60e  00000000  00000000  0003a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a21  00000000  00000000  00056cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3e45  00000000  00000000  00079713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009394  00000000  00000000  0011d59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00126930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801059c 	.word	0x0801059c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0801059c 	.word	0x0801059c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 ba09 	b.w	80010ec <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9be 	b.w	80010ec <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <Aiot_Task>:
extern osMutexId_t ESP_MutexHandle;

int esp_is_wifi_ready(void);

void Aiot_Task(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 80010f8:	f001 fb64 	bl	80027c4 <AiotClient_Init>
    for(;;) {
        if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80010fc:	f001 fcd2 	bl	8002aa4 <esp_is_wifi_ready>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d104      	bne.n	8001110 <Aiot_Task+0x20>
 8001106:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800110a:	f007 fcf3 	bl	8008af4 <vTaskDelay>
 800110e:	e01c      	b.n	800114a <Aiot_Task+0x5a>
        if (esp_get_status()!=0) {
 8001110:	f001 f9ae 	bl	8002470 <esp_get_status>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d013      	beq.n	8001142 <Aiot_Task+0x52>
            printf("server connecting ...\r\n");
 800111a:	480c      	ldr	r0, [pc, #48]	@ (800114c <Aiot_Task+0x5c>)
 800111c:	f00a ff22 	bl	800bf64 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever)==osOK) {
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <Aiot_Task+0x60>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	4618      	mov	r0, r3
 800112a:	f006 fa36 	bl	800759a <osMutexAcquire>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <Aiot_Task+0x52>
                esp_client_conn();
 8001134:	f001 f91e 	bl	8002374 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <Aiot_Task+0x60>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f006 fa77 	bl	8007630 <osMutexRelease>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(10000));
 8001142:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001146:	f007 fcd5 	bl	8008af4 <vTaskDelay>
        if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 800114a:	e7d7      	b.n	80010fc <Aiot_Task+0xc>
 800114c:	080105b8 	.word	0x080105b8
 8001150:	2000242c 	.word	0x2000242c

08001154 <esp_event>:
   - 개행을 기다리지 말고 길이 기반으로 정확히 잘라내기
*/


void esp_event(const char *recvBuf)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0aa      	sub	sp, #168	@ 0xa8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	227f      	movs	r2, #127	@ 0x7f
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f00b f8ae 	bl	800c2d4 <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 8001178:	2300      	movs	r3, #0
 800117a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	210a      	movs	r1, #10
 8001184:	4618      	mov	r0, r3
 8001186:	f00b f875 	bl	800c274 <strchr>
 800118a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 800118e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <esp_event+0x4a>
 8001196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	210d      	movs	r1, #13
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00b f865 	bl	800c274 <strchr>
 80011aa:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 80011ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <esp_event+0x6a>
 80011b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4945      	ldr	r1, [pc, #276]	@ (80012e0 <esp_event+0x18c>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00b f896 	bl	800c2fc <strtok>
 80011d0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 80011d4:	e011      	b.n	80011fa <esp_event+0xa6>
    {
        pArray[idx++] = token;
 80011d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	33a8      	adds	r3, #168	@ 0xa8
 80011e4:	443b      	add	r3, r7
 80011e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80011ea:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 80011ee:	493c      	ldr	r1, [pc, #240]	@ (80012e0 <esp_event+0x18c>)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f00b f883 	bl	800c2fc <strtok>
 80011f6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 80011fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <esp_event+0xb6>
 8001202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001206:	2b03      	cmp	r3, #3
 8001208:	dde5      	ble.n	80011d6 <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d05c      	beq.n	80012ca <esp_event+0x176>
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d059      	beq.n	80012ca <esp_event+0x176>
    {
        if (strcmp(pArray[1], "LED") == 0)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4932      	ldr	r1, [pc, #200]	@ (80012e4 <esp_event+0x190>)
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffe0 	bl	80001e0 <strcmp>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <esp_event+0x116>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	492f      	ldr	r1, [pc, #188]	@ (80012e8 <esp_event+0x194>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7fe ffd8 	bl	80001e0 <strcmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d108      	bne.n	8001248 <esp_event+0xf4>
                LED_ON();
 8001236:	2201      	movs	r2, #1
 8001238:	2120      	movs	r1, #32
 800123a:	482c      	ldr	r0, [pc, #176]	@ (80012ec <esp_event+0x198>)
 800123c:	f002 fe58 	bl	8003ef0 <HAL_GPIO_WritePin>
                printf("LED turned ON\r\n");
 8001240:	482b      	ldr	r0, [pc, #172]	@ (80012f0 <esp_event+0x19c>)
 8001242:	f00a fe8f 	bl	800bf64 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001246:	e045      	b.n	80012d4 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	492a      	ldr	r1, [pc, #168]	@ (80012f4 <esp_event+0x1a0>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ffc7 	bl	80001e0 <strcmp>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d13d      	bne.n	80012d4 <esp_event+0x180>
                LED_OFF();
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	4823      	ldr	r0, [pc, #140]	@ (80012ec <esp_event+0x198>)
 800125e:	f002 fe47 	bl	8003ef0 <HAL_GPIO_WritePin>
                printf("LED turned OFF\r\n");
 8001262:	4825      	ldr	r0, [pc, #148]	@ (80012f8 <esp_event+0x1a4>)
 8001264:	f00a fe7e 	bl	800bf64 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001268:	e034      	b.n	80012d4 <esp_event+0x180>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4923      	ldr	r1, [pc, #140]	@ (80012fc <esp_event+0x1a8>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7fe ffb6 	bl	80001e0 <strcmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d121      	bne.n	80012be <esp_event+0x16a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	491a      	ldr	r1, [pc, #104]	@ (80012e8 <esp_event+0x194>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffae 	bl	80001e0 <strcmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <esp_event+0x148>
                FAN_ON();
 800128a:	2201      	movs	r2, #1
 800128c:	2110      	movs	r1, #16
 800128e:	481c      	ldr	r0, [pc, #112]	@ (8001300 <esp_event+0x1ac>)
 8001290:	f002 fe2e 	bl	8003ef0 <HAL_GPIO_WritePin>
                printf("FAN turned ON\r\n");
 8001294:	481b      	ldr	r0, [pc, #108]	@ (8001304 <esp_event+0x1b0>)
 8001296:	f00a fe65 	bl	800bf64 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800129a:	e01b      	b.n	80012d4 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	4915      	ldr	r1, [pc, #84]	@ (80012f4 <esp_event+0x1a0>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ff9d 	bl	80001e0 <strcmp>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d113      	bne.n	80012d4 <esp_event+0x180>
                FAN_OFF();
 80012ac:	2200      	movs	r2, #0
 80012ae:	2110      	movs	r1, #16
 80012b0:	4813      	ldr	r0, [pc, #76]	@ (8001300 <esp_event+0x1ac>)
 80012b2:	f002 fe1d 	bl	8003ef0 <HAL_GPIO_WritePin>
                printf("FAN turned OFF\r\n");
 80012b6:	4814      	ldr	r0, [pc, #80]	@ (8001308 <esp_event+0x1b4>)
 80012b8:	f00a fe54 	bl	800bf64 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80012bc:	e00a      	b.n	80012d4 <esp_event+0x180>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	@ (800130c <esp_event+0x1b8>)
 80012c4:	f00a fdde 	bl	800be84 <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 80012c8:	e004      	b.n	80012d4 <esp_event+0x180>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4810      	ldr	r0, [pc, #64]	@ (8001310 <esp_event+0x1bc>)
 80012ce:	f00a fdd9 	bl	800be84 <iprintf>
    }
}
 80012d2:	e000      	b.n	80012d6 <esp_event+0x182>
        if (strcmp(pArray[1], "LED") == 0)
 80012d4:	bf00      	nop
}
 80012d6:	bf00      	nop
 80012d8:	37a8      	adds	r7, #168	@ 0xa8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	080105d0 	.word	0x080105d0
 80012e4:	080105d8 	.word	0x080105d8
 80012e8:	080105dc 	.word	0x080105dc
 80012ec:	40020000 	.word	0x40020000
 80012f0:	080105e0 	.word	0x080105e0
 80012f4:	080105f0 	.word	0x080105f0
 80012f8:	080105f4 	.word	0x080105f4
 80012fc:	08010604 	.word	0x08010604
 8001300:	40020400 	.word	0x40020400
 8001304:	08010608 	.word	0x08010608
 8001308:	08010618 	.word	0x08010618
 800130c:	08010628 	.word	0x08010628
 8001310:	08010640 	.word	0x08010640

08001314 <try_extract_ipd_payload>:

// +IPD,<len>:...   (CIPMUX=0)
// +IPD,<id>,<len>:...  (CIPMUX=1)
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b092      	sub	sp, #72	@ 0x48
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    int copied = 0, consumed = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	647b      	str	r3, [r7, #68]	@ 0x44
 8001322:	2300      	movs	r3, #0
 8001324:	643b      	str	r3, [r7, #64]	@ 0x40

    taskENTER_CRITICAL();
 8001326:	f008 fee7 	bl	800a0f8 <vPortEnterCritical>
    int n = cb_data.length;
 800132a:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 800132c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001330:	623b      	str	r3, [r7, #32]
    if (n > 0) {
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f340 80d2 	ble.w	80014de <try_extract_ipd_payload+0x1ca>
        int start = -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i + 4 < n; ++i) {
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001344:	e023      	b.n	800138e <try_extract_ipd_payload+0x7a>
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 8001346:	4a69      	ldr	r2, [pc, #420]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 8001348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b2b      	cmp	r3, #43	@ 0x2b
 8001350:	d11a      	bne.n	8001388 <try_extract_ipd_payload+0x74>
 8001352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001354:	3301      	adds	r3, #1
 8001356:	4a65      	ldr	r2, [pc, #404]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	2b49      	cmp	r3, #73	@ 0x49
 800135c:	d114      	bne.n	8001388 <try_extract_ipd_payload+0x74>
 800135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001360:	3302      	adds	r3, #2
 8001362:	4a62      	ldr	r2, [pc, #392]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	2b50      	cmp	r3, #80	@ 0x50
 8001368:	d10e      	bne.n	8001388 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 800136a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800136c:	3303      	adds	r3, #3
 800136e:	4a5f      	ldr	r2, [pc, #380]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 8001372:	2b44      	cmp	r3, #68	@ 0x44
 8001374:	d108      	bne.n	8001388 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 8001376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001378:	3304      	adds	r3, #4
 800137a:	4a5c      	ldr	r2, [pc, #368]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001380:	d102      	bne.n	8001388 <try_extract_ipd_payload+0x74>
 8001382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001386:	e007      	b.n	8001398 <try_extract_ipd_payload+0x84>
        for (int i = 0; i + 4 < n; ++i) {
 8001388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800138a:	3301      	adds	r3, #1
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800138e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001390:	3304      	adds	r3, #4
 8001392:	6a3a      	ldr	r2, [r7, #32]
 8001394:	429a      	cmp	r2, r3
 8001396:	dcd6      	bgt.n	8001346 <try_extract_ipd_payload+0x32>
        }
        if (start >= 0) {
 8001398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800139a:	2b00      	cmp	r3, #0
 800139c:	f2c0 8088 	blt.w	80014b0 <try_extract_ipd_payload+0x19c>
            int p = start + 5;
 80013a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a2:	3305      	adds	r3, #5
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34

            // (1) optional link id
            int q = p;
 80013a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
            while (q < n && cb_data.buf[q]>='0' && cb_data.buf[q]<='9') q++;
 80013aa:	e002      	b.n	80013b2 <try_extract_ipd_payload+0x9e>
 80013ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ae:	3301      	adds	r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80013b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	da0b      	bge.n	80013d2 <try_extract_ipd_payload+0xbe>
 80013ba:	4a4c      	ldr	r2, [pc, #304]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80013c4:	d905      	bls.n	80013d2 <try_extract_ipd_payload+0xbe>
 80013c6:	4a49      	ldr	r2, [pc, #292]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80013c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ca:	4413      	add	r3, r2
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b39      	cmp	r3, #57	@ 0x39
 80013d0:	d9ec      	bls.n	80013ac <try_extract_ipd_payload+0x98>
            if (q < n && cb_data.buf[q] == ',') {
 80013d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	da08      	bge.n	80013ec <try_extract_ipd_payload+0xd8>
 80013da:	4a44      	ldr	r2, [pc, #272]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80013dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80013e4:	d102      	bne.n	80013ec <try_extract_ipd_payload+0xd8>
                p = q + 1; // had link id -> p now at len
 80013e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e8:	3301      	adds	r3, #1
 80013ea:	637b      	str	r3, [r7, #52]	@ 0x34
            } // else: single mode, p already at len

            // (2) parse length until ':'
            int len_start = p, colon = -1;
 80013ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 80013f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fa:	e01b      	b.n	8001434 <try_extract_ipd_payload+0x120>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 80013fc:	4a3b      	ldr	r2, [pc, #236]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b3a      	cmp	r3, #58	@ 0x3a
 8001406:	d102      	bne.n	800140e <try_extract_ipd_payload+0xfa>
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800140c:	e01b      	b.n	8001446 <try_extract_ipd_payload+0x132>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { len_start = -1; break; }
 800140e:	4a37      	ldr	r2, [pc, #220]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b2f      	cmp	r3, #47	@ 0x2f
 8001418:	d905      	bls.n	8001426 <try_extract_ipd_payload+0x112>
 800141a:	4a34      	ldr	r2, [pc, #208]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b39      	cmp	r3, #57	@ 0x39
 8001424:	d903      	bls.n	800142e <try_extract_ipd_payload+0x11a>
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142c:	e00b      	b.n	8001446 <try_extract_ipd_payload+0x132>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
 8001434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	429a      	cmp	r2, r3
 800143a:	da04      	bge.n	8001446 <try_extract_ipd_payload+0x132>
 800143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143e:	3309      	adds	r3, #9
 8001440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001442:	429a      	cmp	r2, r3
 8001444:	ddda      	ble.n	80013fc <try_extract_ipd_payload+0xe8>
            }
            if (len_start >= 0 && colon > 0) {
 8001446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	db31      	blt.n	80014b0 <try_extract_ipd_payload+0x19c>
 800144c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144e:	2b00      	cmp	r3, #0
 8001450:	dd2e      	ble.n	80014b0 <try_extract_ipd_payload+0x19c>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 8001452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001454:	4a25      	ldr	r2, [pc, #148]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 8001456:	4413      	add	r3, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f009 f960 	bl	800a71e <atoi>
 800145e:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 8001460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001462:	3301      	adds	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 8001466:	6a3a      	ldr	r2, [r7, #32]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd1d      	ble.n	80014b0 <try_extract_ipd_payload+0x19c>
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	db19      	blt.n	80014b0 <try_extract_ipd_payload+0x19c>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	3b01      	subs	r3, #1
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	4293      	cmp	r3, r2
 8001484:	bfa8      	it	ge
 8001486:	4613      	movge	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 800148e:	4413      	add	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f00b fedc 	bl	800d252 <memcpy>
                    dst[cpy] = 0;
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	647b      	str	r3, [r7, #68]	@ 0x44
                    consumed = payload_start + ipd_len;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }
        }
        if (consumed > 0) {
 80014b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd13      	ble.n	80014de <try_extract_ipd_payload+0x1ca>
            int left = n - consumed;
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove(cb_data.buf, &cb_data.buf[consumed], left);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd07      	ble.n	80014d4 <try_extract_ipd_payload+0x1c0>
 80014c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80014c8:	4413      	add	r3, r2
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80014d0:	f00a feae 	bl	800c230 <memmove>
            cb_data.length = left;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <try_extract_ipd_payload+0x1d8>)
 80014da:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
        }
    }
    taskEXIT_CRITICAL();
 80014de:	f008 fe3d 	bl	800a15c <vPortExitCritical>
    return copied;
 80014e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3748      	adds	r7, #72	@ 0x48
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20001abc 	.word	0x20001abc

080014f0 <Command_Task>:

void Command_Task(void *argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0c4      	sub	sp, #272	@ 0x110
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014fe:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <Command_Task+0x74>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f006 f847 	bl	800759a <osMutexAcquire>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d123      	bne.n	800155a <Command_Task+0x6a>
			int got = try_extract_ipd_payload(payload, sizeof(payload));
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fefa 	bl	8001314 <try_extract_ipd_payload>
 8001520:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
			osMutexRelease(ESP_MutexHandle);
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <Command_Task+0x74>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f006 f881 	bl	8007630 <osMutexRelease>
			if (got > 0) {
 800152e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001532:	2b00      	cmp	r3, #0
 8001534:	dd11      	ble.n	800155a <Command_Task+0x6a>
				// strip CR/LF
				payload[strcspn(payload, "\r\n")] = '\0';
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	490b      	ldr	r1, [pc, #44]	@ (8001568 <Command_Task+0x78>)
 800153c:	4618      	mov	r0, r3
 800153e:	f00a fea6 	bl	800c28e <strcspn>
 8001542:	4602      	mov	r2, r0
 8001544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]
				esp_event(payload);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fdfd 	bl	8001154 <esp_event>
			}
		}
        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 800155a:	200a      	movs	r0, #10
 800155c:	f007 faca 	bl	8008af4 <vTaskDelay>
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 8001560:	e7ce      	b.n	8001500 <Command_Task+0x10>
 8001562:	bf00      	nop
 8001564:	2000242c 	.word	0x2000242c
 8001568:	08010660 	.word	0x08010660

0800156c <NTP_Task>:
extern time_t ntp_time;

#define NTPTIME_TASK_PERIOD_MS 10000

void NTP_Task(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	827b      	strh	r3, [r7, #18]
    TickType_t last = xTaskGetTickCount();
 8001578:	f007 fc06 	bl	8008d88 <xTaskGetTickCount>
 800157c:	4603      	mov	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 8001580:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001584:	617b      	str	r3, [r7, #20]
    static int s_ntp_cfg_ok = 0;
    int toggle = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]

    for(;;)
    {
        if (esp_get_status() == 0) {
 800158a:	f000 ff71 	bl	8002470 <esp_get_status>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d174      	bne.n	800167e <NTP_Task+0x112>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001594:	4b3d      	ldr	r3, [pc, #244]	@ (800168c <NTP_Task+0x120>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	4618      	mov	r0, r3
 800159e:	f005 fffc 	bl	800759a <osMutexAcquire>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d16a      	bne.n	800167e <NTP_Task+0x112>
                if (!s_ntp_cfg_ok) {
 80015a8:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <NTP_Task+0x124>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <NTP_Task+0x54>
                    if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 80015b0:	f001 fa4e 	bl	8002a50 <esp_ntp_config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <NTP_Task+0x54>
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <NTP_Task+0x124>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
                	}
				if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 80015c0:	f107 0212 	add.w	r2, r7, #18
 80015c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015c8:	4932      	ldr	r1, [pc, #200]	@ (8001694 <NTP_Task+0x128>)
 80015ca:	4833      	ldr	r0, [pc, #204]	@ (8001698 <NTP_Task+0x12c>)
 80015cc:	f000 fdbe 	bl	800214c <esp_at_command>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d14e      	bne.n	8001674 <NTP_Task+0x108>
					char *p = strtok(response, "\r\n");
 80015d6:	4931      	ldr	r1, [pc, #196]	@ (800169c <NTP_Task+0x130>)
 80015d8:	482e      	ldr	r0, [pc, #184]	@ (8001694 <NTP_Task+0x128>)
 80015da:	f00a fe8f 	bl	800c2fc <strtok>
 80015de:	61b8      	str	r0, [r7, #24]
					printf("NTP connected!\r");
 80015e0:	482f      	ldr	r0, [pc, #188]	@ (80016a0 <NTP_Task+0x134>)
 80015e2:	f00a fc4f 	bl	800be84 <iprintf>
					while (p) {
 80015e6:	e040      	b.n	800166a <NTP_Task+0xfe>
						if (parse_cipsntptime_line(p, &epoch) == 0) {
 80015e8:	492e      	ldr	r1, [pc, #184]	@ (80016a4 <NTP_Task+0x138>)
 80015ea:	69b8      	ldr	r0, [r7, #24]
 80015ec:	f001 f934 	bl	8002858 <parse_cipsntptime_line>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d134      	bne.n	8001660 <NTP_Task+0xf4>
							printf("NTP Time (KST): %s\r", ctime(&epoch));
 80015f6:	482b      	ldr	r0, [pc, #172]	@ (80016a4 <NTP_Task+0x138>)
 80015f8:	f00a fef2 	bl	800c3e0 <ctime>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4619      	mov	r1, r3
 8001600:	4829      	ldr	r0, [pc, #164]	@ (80016a8 <NTP_Task+0x13c>)
 8001602:	f00a fc3f 	bl	800be84 <iprintf>
				            toggle = !toggle;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	61fb      	str	r3, [r7, #28]
				            if (toggle) {
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <NTP_Task+0xbc>
				                Servo_SetAngle(90);
 800161a:	205a      	movs	r0, #90	@ 0x5a
 800161c:	f000 f866 	bl	80016ec <Servo_SetAngle>
				                printf("[SERVO TEST] -> 90 deg\r\n");
 8001620:	4822      	ldr	r0, [pc, #136]	@ (80016ac <NTP_Task+0x140>)
 8001622:	f00a fc9f 	bl	800bf64 <puts>
 8001626:	e005      	b.n	8001634 <NTP_Task+0xc8>
				            } else {
				                Servo_SetAngle(0);
 8001628:	2000      	movs	r0, #0
 800162a:	f000 f85f 	bl	80016ec <Servo_SetAngle>
				                printf("[SERVO TEST] -> 0 deg\r\n");
 800162e:	4820      	ldr	r0, [pc, #128]	@ (80016b0 <NTP_Task+0x144>)
 8001630:	f00a fc98 	bl	800bf64 <puts>
				            }
							if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <NTP_Task+0x148>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	4618      	mov	r0, r3
 800163e:	f005 ffac 	bl	800759a <osMutexAcquire>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d114      	bne.n	8001672 <NTP_Task+0x106>
								ntp_time = epoch;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <NTP_Task+0x138>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	491a      	ldr	r1, [pc, #104]	@ (80016b8 <NTP_Task+0x14c>)
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
								osMutexRelease(NTP_MutexHandle);
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <NTP_Task+0x148>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f005 ffe9 	bl	8007630 <osMutexRelease>
							}
							break;
 800165e:	e008      	b.n	8001672 <NTP_Task+0x106>
						}
						p = strtok(NULL, "\r\n");
 8001660:	490e      	ldr	r1, [pc, #56]	@ (800169c <NTP_Task+0x130>)
 8001662:	2000      	movs	r0, #0
 8001664:	f00a fe4a 	bl	800c2fc <strtok>
 8001668:	61b8      	str	r0, [r7, #24]
					while (p) {
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1bb      	bne.n	80015e8 <NTP_Task+0x7c>
 8001670:	e000      	b.n	8001674 <NTP_Task+0x108>
							break;
 8001672:	bf00      	nop
					}
			}
                osMutexRelease(ESP_MutexHandle);
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <NTP_Task+0x120>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f005 ffd9 	bl	8007630 <osMutexRelease>
                esp_client_conn();
                osMutexRelease(ESP_MutexHandle);
            }
            */
        }
        vTaskDelayUntil(&last, period);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	6979      	ldr	r1, [r7, #20]
 8001684:	4618      	mov	r0, r3
 8001686:	f007 f9b5 	bl	80089f4 <vTaskDelayUntil>
        if (esp_get_status() == 0) {
 800168a:	e77e      	b.n	800158a <NTP_Task+0x1e>
 800168c:	2000242c 	.word	0x2000242c
 8001690:	20000264 	.word	0x20000264
 8001694:	20001284 	.word	0x20001284
 8001698:	08010664 	.word	0x08010664
 800169c:	08010678 	.word	0x08010678
 80016a0:	0801067c 	.word	0x0801067c
 80016a4:	20000268 	.word	0x20000268
 80016a8:	0801068c 	.word	0x0801068c
 80016ac:	080106a0 	.word	0x080106a0
 80016b0:	080106b8 	.word	0x080106b8
 80016b4:	20002430 	.word	0x20002430
 80016b8:	200022c8 	.word	0x200022c8

080016bc <Servo_Init>:
#define SERVO_MIN_US   500    // 0°
#define SERVO_MID_US   1500   // 90°
#define SERVO_MAX_US   2500   // 180°

void Servo_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4809      	ldr	r0, [pc, #36]	@ (80016e8 <Servo_Init+0x2c>)
 80016c4:	f003 ff80 	bl	80055c8 <HAL_TIM_PWM_Start>

    // 고급 타이머(TIM1/8)에서 출력이 안 나오면 MOE를 켜야 할 수 있음
    // (대부분 HAL_TIM_PWM_Start로 충분하지만, 안 나오면 아래 한 줄 추가)
    __HAL_TIM_MOE_ENABLE(&htim1);
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <Servo_Init+0x2c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <Servo_Init+0x2c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016d6:	645a      	str	r2, [r3, #68]	@ 0x44

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_MIN_US); // 초기 0°
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <Servo_Init+0x2c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20002344 	.word	0x20002344

080016ec <Servo_SetAngle>:

void Servo_SetAngle(int angle)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    if (angle < 0) angle = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da01      	bge.n	80016fe <Servo_SetAngle+0x12>
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
    if (angle > 180) angle = 180;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2bb4      	cmp	r3, #180	@ 0xb4
 8001702:	dd01      	ble.n	8001708 <Servo_SetAngle+0x1c>
 8001704:	23b4      	movs	r3, #180	@ 0xb4
 8001706:	607b      	str	r3, [r7, #4]

    uint32_t pulse = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US) / 180);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <Servo_SetAngle+0x50>)
 8001714:	fb82 1203 	smull	r1, r2, r2, r3
 8001718:	441a      	add	r2, r3
 800171a:	11d2      	asrs	r2, r2, #7
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001724:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <Servo_SetAngle+0x54>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	b60b60b7 	.word	0xb60b60b7
 8001740:	20002344 	.word	0x20002344

08001744 <set_ryg>:
// ★ esp.c 전역 버퍼 접근 (읽기 전용 용도)
extern cb_data_t cb_data;
extern char response[MAX_ESP_RX_BUFFER];

static void set_ryg(int r, int y, int g)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, r ? GPIO_PIN_SET : GPIO_PIN_RESET); // RED
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001762:	480f      	ldr	r0, [pc, #60]	@ (80017a0 <set_ryg+0x5c>)
 8001764:	f002 fbc4 	bl	8003ef0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, y ? GPIO_PIN_SET : GPIO_PIN_RESET); // YELLOW
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800177a:	4809      	ldr	r0, [pc, #36]	@ (80017a0 <set_ryg+0x5c>)
 800177c:	f002 fbb8 	bl	8003ef0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, g ? GPIO_PIN_SET : GPIO_PIN_RESET); // GREEN
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf14      	ite	ne
 8001786:	2301      	movne	r3, #1
 8001788:	2300      	moveq	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001792:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <set_ryg+0x5c>)
 8001794:	f002 fbac 	bl	8003ef0 <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020400 	.word	0x40020400

080017a4 <json_pick_value>:
// ★ esp.c에 추가한 프로브 함수 원형
int esp_link1_tcp_probe(const char *ip_or_host, int port);

// 간단 JSON 파서: "category":"T1H" ... "obsrValue": 27  또는 "obsrValue":"27"
static int json_pick_value(const char *json, const char *cat, char *out, int out_sz)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b098      	sub	sp, #96	@ 0x60
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
    char key[64];
    snprintf(key, sizeof(key), "\"category\":\"%s\"", cat);
 80017b2:	f107 0010 	add.w	r0, r7, #16
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4a3a      	ldr	r2, [pc, #232]	@ (80018a4 <json_pick_value+0x100>)
 80017ba:	2140      	movs	r1, #64	@ 0x40
 80017bc:	f00a fbda 	bl	800bf74 <sniprintf>
    const char *p = strstr(json, key);
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4619      	mov	r1, r3
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f00a fdf4 	bl	800c3b4 <strstr>
 80017cc:	6538      	str	r0, [r7, #80]	@ 0x50
    if (!p) return -1;
 80017ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <json_pick_value+0x36>
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	e05f      	b.n	800189a <json_pick_value+0xf6>

    const char *v = strstr(p, "\"obsrValue\"");
 80017da:	4933      	ldr	r1, [pc, #204]	@ (80018a8 <json_pick_value+0x104>)
 80017dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80017de:	f00a fde9 	bl	800c3b4 <strstr>
 80017e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 80017e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <json_pick_value+0x4c>
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e054      	b.n	800189a <json_pick_value+0xf6>
    v = strchr(v, ':');
 80017f0:	213a      	movs	r1, #58	@ 0x3a
 80017f2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80017f4:	f00a fd3e 	bl	800c274 <strchr>
 80017f8:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 80017fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <json_pick_value+0x62>
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	e049      	b.n	800189a <json_pick_value+0xf6>
    v++; // skip ':'
 8001806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001808:	3301      	adds	r3, #1
 800180a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // 공백/따옴표 스킵
    while (*v==' ' || *v=='\"') v++;
 800180c:	e002      	b.n	8001814 <json_pick_value+0x70>
 800180e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001810:	3301      	adds	r3, #1
 8001812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001814:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b20      	cmp	r3, #32
 800181a:	d0f8      	beq.n	800180e <json_pick_value+0x6a>
 800181c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b22      	cmp	r3, #34	@ 0x22
 8001822:	d0f4      	beq.n	800180e <json_pick_value+0x6a>

    // 숫자/텍스트 토큰 끝까지
    const char *e = v;
 8001824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001826:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*e && *e!='\"' && *e!='\r' && *e!='\n' && *e!=',' && *e!='}') e++;
 8001828:	e002      	b.n	8001830 <json_pick_value+0x8c>
 800182a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800182c:	3301      	adds	r3, #1
 800182e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <json_pick_value+0xbc>
 8001838:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b22      	cmp	r3, #34	@ 0x22
 800183e:	d00f      	beq.n	8001860 <json_pick_value+0xbc>
 8001840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b0d      	cmp	r3, #13
 8001846:	d00b      	beq.n	8001860 <json_pick_value+0xbc>
 8001848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d007      	beq.n	8001860 <json_pick_value+0xbc>
 8001850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b2c      	cmp	r3, #44	@ 0x2c
 8001856:	d003      	beq.n	8001860 <json_pick_value+0xbc>
 8001858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b7d      	cmp	r3, #125	@ 0x7d
 800185e:	d1e4      	bne.n	800182a <json_pick_value+0x86>

    int len = (int)(e - v);
 8001860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	657b      	str	r3, [r7, #84]	@ 0x54
    if (len <= 0) return -1;
 8001868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc02      	bgt.n	8001874 <json_pick_value+0xd0>
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e012      	b.n	800189a <json_pick_value+0xf6>
    if (len >= out_sz) len = out_sz - 1;
 8001874:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	db02      	blt.n	8001882 <json_pick_value+0xde>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	657b      	str	r3, [r7, #84]	@ 0x54
    memcpy(out, v, len);
 8001882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001884:	461a      	mov	r2, r3
 8001886:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f00b fce2 	bl	800d252 <memcpy>
    out[len] = 0;
 800188e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3760      	adds	r7, #96	@ 0x60
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	080106d0 	.word	0x080106d0
 80018a8:	080106e0 	.word	0x080106e0

080018ac <strip_ipd_markers>:

// ESP01 "+IPD,<link>,<len>:" 마커 제거 → 순수 HTTP/JSON만 남김
static int strip_ipd_markers(const char *in, char *out, int out_sz)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
    int w = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *p = in;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 80018c0:	e077      	b.n	80019b2 <strip_ipd_markers+0x106>
        const char *tag = strstr(p, "+IPD,");
 80018c2:	4946      	ldr	r1, [pc, #280]	@ (80019dc <strip_ipd_markers+0x130>)
 80018c4:	6a38      	ldr	r0, [r7, #32]
 80018c6:	f00a fd75 	bl	800c3b4 <strstr>
 80018ca:	6138      	str	r0, [r7, #16]
        if (!tag) {
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d11d      	bne.n	800190e <strip_ipd_markers+0x62>
            int remain = (int)strlen(p);
 80018d2:	6a38      	ldr	r0, [r7, #32]
 80018d4:	f7fe fce4 	bl	80002a0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	61fb      	str	r3, [r7, #28]
            if (remain > out_sz - 1 - w) remain = out_sz - 1 - w;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1e5a      	subs	r2, r3, #1
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dd04      	ble.n	80018f4 <strip_ipd_markers+0x48>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	61fb      	str	r3, [r7, #28]
            memcpy(out + w, p, remain);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	4618      	mov	r0, r3
 8001900:	f00b fca7 	bl	800d252 <memcpy>
            w += remain;
 8001904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800190c:	e05b      	b.n	80019c6 <strip_ipd_markers+0x11a>
        }
        int seg = (int)(tag - p);
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	61bb      	str	r3, [r7, #24]
        if (seg > 0) {
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dd17      	ble.n	800194c <strip_ipd_markers+0xa0>
            if (seg > out_sz - 1 - w) seg = out_sz - 1 - w;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	429a      	cmp	r2, r3
 8001928:	dd04      	ble.n	8001934 <strip_ipd_markers+0x88>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	61bb      	str	r3, [r7, #24]
            memcpy(out + w, p, seg);
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	4618      	mov	r0, r3
 8001940:	f00b fc87 	bl	800d252 <memcpy>
            w += seg;
 8001944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4413      	add	r3, r2
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        const char *q = tag + 5; // after "+IPD,"
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	3305      	adds	r3, #5
 8001950:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // link
 8001952:	e002      	b.n	800195a <strip_ipd_markers+0xae>
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <strip_ipd_markers+0xc6>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b2f      	cmp	r3, #47	@ 0x2f
 8001968:	d903      	bls.n	8001972 <strip_ipd_markers+0xc6>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b39      	cmp	r3, #57	@ 0x39
 8001970:	d9f0      	bls.n	8001954 <strip_ipd_markers+0xa8>
        if (*q==',') q++;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b2c      	cmp	r3, #44	@ 0x2c
 8001978:	d106      	bne.n	8001988 <strip_ipd_markers+0xdc>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // len
 8001980:	e002      	b.n	8001988 <strip_ipd_markers+0xdc>
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <strip_ipd_markers+0xf4>
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b2f      	cmp	r3, #47	@ 0x2f
 8001996:	d903      	bls.n	80019a0 <strip_ipd_markers+0xf4>
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b39      	cmp	r3, #57	@ 0x39
 800199e:	d9f0      	bls.n	8001982 <strip_ipd_markers+0xd6>
        if (*q==':') q++;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80019a6:	d102      	bne.n	80019ae <strip_ipd_markers+0x102>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
        p = q;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <strip_ipd_markers+0x11a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3b01      	subs	r3, #1
 80019be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f6ff af7e 	blt.w	80018c2 <strip_ipd_markers+0x16>
    }
    out[w] = 0;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	4413      	add	r3, r2
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
    return w;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3728      	adds	r7, #40	@ 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	080106ec 	.word	0x080106ec

080019e0 <dechunk_simple>:

// Transfer-Encoding: chunked 간단 디청크
static int dechunk_simple(const char *in, char *out, int out_sz)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
    int w = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    const char *p = in;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	61bb      	str	r3, [r7, #24]
    while (*p) {
 80019f4:	e044      	b.n	8001a80 <dechunk_simple+0xa0>
        int sz = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
        if (sscanf(p, "%x", &sz) != 1) break;
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	461a      	mov	r2, r3
 8001a00:	492a      	ldr	r1, [pc, #168]	@ (8001aac <dechunk_simple+0xcc>)
 8001a02:	69b8      	ldr	r0, [r7, #24]
 8001a04:	f00a fb0e 	bl	800c024 <siscanf>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d13d      	bne.n	8001a8a <dechunk_simple+0xaa>
        const char *nl = strstr(p, "\r\n");
 8001a0e:	4928      	ldr	r1, [pc, #160]	@ (8001ab0 <dechunk_simple+0xd0>)
 8001a10:	69b8      	ldr	r0, [r7, #24]
 8001a12:	f00a fccf 	bl	800c3b4 <strstr>
 8001a16:	6178      	str	r0, [r7, #20]
        if (!nl) break;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d037      	beq.n	8001a8e <dechunk_simple+0xae>
        p = nl + 2;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3302      	adds	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
        if (sz == 0) break;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d033      	beq.n	8001a92 <dechunk_simple+0xb2>
        if (w + sz > out_sz - 1) sz = out_sz - 1 - w;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4413      	add	r3, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dc04      	bgt.n	8001a40 <dechunk_simple+0x60>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	613b      	str	r3, [r7, #16]
        if (sz <= 0) break;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dd27      	ble.n	8001a96 <dechunk_simple+0xb6>
        memcpy(out + w, p, sz);
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00b fbfe 	bl	800d252 <memcpy>
        w += sz;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]
        p += sz;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	461a      	mov	r2, r3
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4413      	add	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if (p[0]=='\r' && p[1]=='\n') p += 2;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d107      	bne.n	8001a80 <dechunk_simple+0xa0>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	3301      	adds	r3, #1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d102      	bne.n	8001a80 <dechunk_simple+0xa0>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    while (*p) {
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1b6      	bne.n	80019f6 <dechunk_simple+0x16>
 8001a88:	e006      	b.n	8001a98 <dechunk_simple+0xb8>
        if (sscanf(p, "%x", &sz) != 1) break;
 8001a8a:	bf00      	nop
 8001a8c:	e004      	b.n	8001a98 <dechunk_simple+0xb8>
        if (!nl) break;
 8001a8e:	bf00      	nop
 8001a90:	e002      	b.n	8001a98 <dechunk_simple+0xb8>
        if (sz == 0) break;
 8001a92:	bf00      	nop
 8001a94:	e000      	b.n	8001a98 <dechunk_simple+0xb8>
        if (sz <= 0) break;
 8001a96:	bf00      	nop
    }
    out[w] = 0;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
    return w;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	080106f4 	.word	0x080106f4
 8001ab0:	080106f8 	.word	0x080106f8

08001ab4 <kma_ultra_fcst_base>:

static int kma_ultra_fcst_base(char *date8, char *time4)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	@ 0x30
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    time_t t;
    // NTP에서 얻은 epoch 사용
    if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8001abe:	4b2c      	ldr	r3, [pc, #176]	@ (8001b70 <kma_ultra_fcst_base+0xbc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f005 fd67 	bl	800759a <osMutexAcquire>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <kma_ultra_fcst_base+0x34>
        t = ntp_time;
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <kma_ultra_fcst_base+0xc0>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        osMutexRelease(NTP_MutexHandle);
 8001adc:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <kma_ultra_fcst_base+0xbc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fda5 	bl	8007630 <osMutexRelease>
 8001ae6:	e006      	b.n	8001af6 <kma_ultra_fcst_base+0x42>
    } else {
        t = time(NULL); // fallback
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f00b f81b 	bl	800cb24 <time>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    struct tm *k = localtime(&t);
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00a fc78 	bl	800c3f0 <localtime>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24
    int yyyy = k->tm_year + 1900;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8001b0a:	623b      	str	r3, [r7, #32]
    int mm   = k->tm_mon + 1;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
    int dd   = k->tm_mday;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
    int hh   = k->tm_hour;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	617b      	str	r3, [r7, #20]
    int mi   = k->tm_min;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]

    mi = (mi / 10) * 10; //10분단위로 내림
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4a13      	ldr	r2, [pc, #76]	@ (8001b78 <kma_ultra_fcst_base+0xc4>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	1092      	asrs	r2, r2, #2
 8001b30:	17db      	asrs	r3, r3, #31
 8001b32:	1ad2      	subs	r2, r2, r3
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	613b      	str	r3, [r7, #16]

    // 1시간 단위라서 분은 무시
    sprintf(date8, "%04d%02d%02d", yyyy, mm, dd);
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	6a3a      	ldr	r2, [r7, #32]
 8001b46:	490d      	ldr	r1, [pc, #52]	@ (8001b7c <kma_ultra_fcst_base+0xc8>)
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f00a fa49 	bl	800bfe0 <siprintf>
    sprintf(time4, "%02d%02d", hh, mi);   // hh시 정각
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	490b      	ldr	r1, [pc, #44]	@ (8001b80 <kma_ultra_fcst_base+0xcc>)
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f00a fa43 	bl	800bfe0 <siprintf>
    printf("%02d:%02d:00->", hh, mi);
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	6979      	ldr	r1, [r7, #20]
 8001b5e:	4809      	ldr	r0, [pc, #36]	@ (8001b84 <kma_ultra_fcst_base+0xd0>)
 8001b60:	f00a f990 	bl	800be84 <iprintf>
    return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20002430 	.word	0x20002430
 8001b74:	200022c8 	.word	0x200022c8
 8001b78:	66666667 	.word	0x66666667
 8001b7c:	080106fc 	.word	0x080106fc
 8001b80:	0801070c 	.word	0x0801070c
 8001b84:	08010718 	.word	0x08010718

08001b88 <pty_text>:

static const char* pty_text(int code)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    switch (code) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	d822      	bhi.n	8001bdc <pty_text+0x54>
 8001b96:	a201      	add	r2, pc, #4	@ (adr r2, 8001b9c <pty_text+0x14>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bbd 	.word	0x08001bbd
 8001ba0:	08001bc1 	.word	0x08001bc1
 8001ba4:	08001bc5 	.word	0x08001bc5
 8001ba8:	08001bc9 	.word	0x08001bc9
 8001bac:	08001bcd 	.word	0x08001bcd
 8001bb0:	08001bd1 	.word	0x08001bd1
 8001bb4:	08001bd5 	.word	0x08001bd5
 8001bb8:	08001bd9 	.word	0x08001bd9
        case 0: return "NO Rain";
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <pty_text+0x64>)
 8001bbe:	e00e      	b.n	8001bde <pty_text+0x56>
        case 1: return "Rain";
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <pty_text+0x68>)
 8001bc2:	e00c      	b.n	8001bde <pty_text+0x56>
        case 2: return "Rain/Snow";
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <pty_text+0x6c>)
 8001bc6:	e00a      	b.n	8001bde <pty_text+0x56>
        case 3: return "Snow";
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <pty_text+0x70>)
 8001bca:	e008      	b.n	8001bde <pty_text+0x56>
        case 4: return "Shower";
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <pty_text+0x74>)
 8001bce:	e006      	b.n	8001bde <pty_text+0x56>
        case 5: return "RainDrop";
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <pty_text+0x78>)
 8001bd2:	e004      	b.n	8001bde <pty_text+0x56>
        case 6: return "RainDrop/SnowFlying";
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <pty_text+0x7c>)
 8001bd6:	e002      	b.n	8001bde <pty_text+0x56>
        case 7: return "SnowFlying";
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <pty_text+0x80>)
 8001bda:	e000      	b.n	8001bde <pty_text+0x56>
        default: return "?";
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <pty_text+0x84>)
    }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	08010728 	.word	0x08010728
 8001bf0:	08010730 	.word	0x08010730
 8001bf4:	08010738 	.word	0x08010738
 8001bf8:	08010744 	.word	0x08010744
 8001bfc:	0801074c 	.word	0x0801074c
 8001c00:	08010754 	.word	0x08010754
 8001c04:	08010760 	.word	0x08010760
 8001c08:	08010774 	.word	0x08010774
 8001c0c:	08010780 	.word	0x08010780

08001c10 <Weather_Task>:


void Weather_Task(void *argument)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	f5ad 6d3b 	sub.w	sp, sp, #2992	@ 0xbb0
 8001c16:	af04      	add	r7, sp, #16
 8001c18:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 8001c1c:	f6a3 339c 	subw	r3, r3, #2972	@ 0xb9c
 8001c20:	6018      	str	r0, [r3, #0]
    const char *KMA_HOST = "apihub.kma.go.kr";
 8001c22:	4b77      	ldr	r3, [pc, #476]	@ (8001e00 <Weather_Task+0x1f0>)
 8001c24:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
    const char *KMA_IP   = "203.247.96.25";   // nslookup 결과
 8001c28:	4b76      	ldr	r3, [pc, #472]	@ (8001e04 <Weather_Task+0x1f4>)
 8001c2a:	f8c7 3b80 	str.w	r3, [r7, #2944]	@ 0xb80
    const int NX = 55, NY = 126;              // 격자 좌표(원하면 변경)
 8001c2e:	2337      	movs	r3, #55	@ 0x37
 8001c30:	f8c7 3b7c 	str.w	r3, [r7, #2940]	@ 0xb7c
 8001c34:	237e      	movs	r3, #126	@ 0x7e
 8001c36:	f8c7 3b78 	str.w	r3, [r7, #2936]	@ 0xb78
    int prev = -1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
    uint16_t length;

    for (;;)
    {
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001c42:	4b71      	ldr	r3, [pc, #452]	@ (8001e08 <Weather_Task+0x1f8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fca5 	bl	800759a <osMutexAcquire>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 8248 	bne.w	80020e8 <Weather_Task+0x4d8>
            // 1) 링크1 열기
            char cmd[128];
            sprintf(cmd, "AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", KMA_IP);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	f8d7 2b80 	ldr.w	r2, [r7, #2944]	@ 0xb80
 8001c60:	496a      	ldr	r1, [pc, #424]	@ (8001e0c <Weather_Task+0x1fc>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00a f9bc 	bl	800bfe0 <siprintf>
            if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) == 0) {
 8001c68:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8001c6c:	f107 0008 	add.w	r0, r7, #8
 8001c70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c74:	4966      	ldr	r1, [pc, #408]	@ (8001e10 <Weather_Task+0x200>)
 8001c76:	f000 fa69 	bl	800214c <esp_at_command>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 822b 	bne.w	80020d8 <Weather_Task+0x4c8>
                //printf("[WEATHER] Link1 TCP connect OK\r\n");

                // 2) HTTP GET 문자열 준비
                char http_req[640];
                char base_date[9], base_time[5];
                kma_ultra_fcst_base(base_date, base_time);
 8001c82:	f607 3248 	addw	r2, r7, #2888	@ 0xb48
 8001c86:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff11 	bl	8001ab4 <kma_ultra_fcst_base>

                sprintf(http_req,
 8001c92:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8001c96:	f507 6235 	add.w	r2, r7, #2896	@ 0xb50
 8001c9a:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001c9e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4958      	ldr	r1, [pc, #352]	@ (8001e14 <Weather_Task+0x204>)
 8001cb4:	f00a f994 	bl	800bfe0 <siprintf>
                    "Connection: close\r\n\r\n",
                    base_date, base_time, NX, NY, KMA_HOST);


                // 3) AT+CIPSEND=1,<len>
                sprintf(cmd, "AT+CIPSEND=1,%d\r\n", (int)strlen(http_req));
 8001cb8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe faef 	bl	80002a0 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4953      	ldr	r1, [pc, #332]	@ (8001e18 <Weather_Task+0x208>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00a f987 	bl	800bfe0 <siprintf>
                if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 2000) == 0) {
 8001cd2:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8001cd6:	f107 0008 	add.w	r0, r7, #8
 8001cda:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001cde:	494c      	ldr	r1, [pc, #304]	@ (8001e10 <Weather_Task+0x200>)
 8001ce0:	f000 fa34 	bl	800214c <esp_at_command>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 81ed 	bne.w	80020c6 <Weather_Task+0x4b6>
                    // (권장) 프롬프트 안정화
                    vTaskDelay(pdMS_TO_TICKS(50));
 8001cec:	2032      	movs	r0, #50	@ 0x32
 8001cee:	f006 ff01 	bl	8008af4 <vTaskDelay>

                    // 4) payload 송신 (단순 송신)
                    HAL_UART_Transmit(&huart6, (uint8_t*)http_req, strlen(http_req), 500);
 8001cf2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fad2 	bl	80002a0 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001d04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d08:	4844      	ldr	r0, [pc, #272]	@ (8001e1c <Weather_Task+0x20c>)
 8001d0a:	f004 fa79 	bl	8006200 <HAL_UART_Transmit>

                    // 5) 응답 수신: cb_data에서 rx로 누적 수집 (최대 8초, CLOSED 감지 시 조기 종료)
                    char rx[MAX_ESP_RX_BUFFER];
                    int  copied = 0, elapsed = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
                    memset(rx, 0, sizeof(rx));
 8001d1a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00a fa9d 	bl	800c264 <memset>

                    for (;;) {
                        // CLOSED 들어오면 서버가 응답 끝내고 소켓 닫았다는 의미
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8001d2a:	493d      	ldr	r1, [pc, #244]	@ (8001e20 <Weather_Task+0x210>)
 8001d2c:	483d      	ldr	r0, [pc, #244]	@ (8001e24 <Weather_Task+0x214>)
 8001d2e:	f00a fb41 	bl	800c3b4 <strstr>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d142      	bne.n	8001dbe <Weather_Task+0x1ae>

                        if (cb_data.length > 0) {
 8001d38:	4b3a      	ldr	r3, [pc, #232]	@ (8001e24 <Weather_Task+0x214>)
 8001d3a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02f      	beq.n	8001da2 <Weather_Task+0x192>
                            taskENTER_CRITICAL();
 8001d42:	f008 f9d9 	bl	800a0f8 <vPortEnterCritical>
                            int n = cb_data.length;
 8001d46:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <Weather_Task+0x214>)
 8001d48:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001d4c:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
                            if (n > (int)sizeof(rx) - 1 - copied) n = sizeof(rx) - 1 - copied;
 8001d50:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001d54:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8001d58:	3307      	adds	r3, #7
 8001d5a:	f8d7 2b90 	ldr.w	r2, [r7, #2960]	@ 0xb90
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dd06      	ble.n	8001d70 <Weather_Task+0x160>
 8001d62:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001d66:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8001d6a:	3307      	adds	r3, #7
 8001d6c:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
                            memcpy(rx + copied, cb_data.buf, n);
 8001d70:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001d74:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8001d78:	4413      	add	r3, r2
 8001d7a:	f8d7 2b90 	ldr.w	r2, [r7, #2960]	@ 0xb90
 8001d7e:	4929      	ldr	r1, [pc, #164]	@ (8001e24 <Weather_Task+0x214>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00b fa66 	bl	800d252 <memcpy>
                            cb_data.length = 0;   // 소비
 8001d86:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <Weather_Task+0x214>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
                            taskEXIT_CRITICAL();
 8001d8e:	f008 f9e5 	bl	800a15c <vPortExitCritical>
                            copied += n;
 8001d92:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	@ 0xb98
 8001d96:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
 8001da0:	e7c3      	b.n	8001d2a <Weather_Task+0x11a>
                        } else {
                            vTaskDelay(pdMS_TO_TICKS(20));
 8001da2:	2014      	movs	r0, #20
 8001da4:	f006 fea6 	bl	8008af4 <vTaskDelay>
                            elapsed += 20;
 8001da8:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8001dac:	3314      	adds	r3, #20
 8001dae:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8001db2:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8001db6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001dba:	da02      	bge.n	8001dc2 <Weather_Task+0x1b2>
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8001dbc:	e7b5      	b.n	8001d2a <Weather_Task+0x11a>
 8001dbe:	bf00      	nop
 8001dc0:	e000      	b.n	8001dc4 <Weather_Task+0x1b4>
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8001dc2:	bf00      	nop
                    // 디버그: 원본 앞머리
                   // { char head[200]={0}; snprintf(head,sizeof(head)-1,"%.*s",180,rx);
                   //   printf("[WEATHER] RAW head: %s\r\n", head); }

					// ---- HTTP 헤더/본문 분리 ----
					char *http = strstr(rx, "HTTP/1.1 ");
 8001dc4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001dc8:	4917      	ldr	r1, [pc, #92]	@ (8001e28 <Weather_Task+0x218>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f00a faf2 	bl	800c3b4 <strstr>
 8001dd0:	f8c7 0b74 	str.w	r0, [r7, #2932]	@ 0xb74
					char *hdr_end = http ? strstr(http, "\r\n\r\n") : NULL;
 8001dd4:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <Weather_Task+0x1da>
 8001ddc:	4913      	ldr	r1, [pc, #76]	@ (8001e2c <Weather_Task+0x21c>)
 8001dde:	f8d7 0b74 	ldr.w	r0, [r7, #2932]	@ 0xb74
 8001de2:	f00a fae7 	bl	800c3b4 <strstr>
 8001de6:	4603      	mov	r3, r0
 8001de8:	e000      	b.n	8001dec <Weather_Task+0x1dc>
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 3b70 	str.w	r3, [r7, #2928]	@ 0xb70
					char *body = hdr_end ? (hdr_end + 4) : rx;
 8001df0:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <Weather_Task+0x220>
 8001df8:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	e019      	b.n	8001e34 <Weather_Task+0x224>
 8001e00:	08010784 	.word	0x08010784
 8001e04:	08010798 	.word	0x08010798
 8001e08:	2000242c 	.word	0x2000242c
 8001e0c:	080107a8 	.word	0x080107a8
 8001e10:	20001284 	.word	0x20001284
 8001e14:	080107c8 	.word	0x080107c8
 8001e18:	0801089c 	.word	0x0801089c
 8001e1c:	200023d4 	.word	0x200023d4
 8001e20:	080108b0 	.word	0x080108b0
 8001e24:	20001abc 	.word	0x20001abc
 8001e28:	080108b8 	.word	0x080108b8
 8001e2c:	080108c4 	.word	0x080108c4
 8001e30:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001e34:	f8c7 3b6c 	str.w	r3, [r7, #2924]	@ 0xb6c

					// 헤더에서 chunked 여부 확인
					int is_chunked = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
					if (http && hdr_end) {
 8001e3e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01e      	beq.n	8001e84 <Weather_Task+0x274>
 8001e46:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01a      	beq.n	8001e84 <Weather_Task+0x274>
						char save = *hdr_end; *hdr_end = 0;
 8001e4e:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f887 3b6b 	strb.w	r3, [r7, #2923]	@ 0xb6b
 8001e58:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
						is_chunked = (strstr(http, "Transfer-Encoding: chunked") != NULL);
 8001e60:	49a4      	ldr	r1, [pc, #656]	@ (80020f4 <Weather_Task+0x4e4>)
 8001e62:	f8d7 0b74 	ldr.w	r0, [r7, #2932]	@ 0xb74
 8001e66:	f00a faa5 	bl	800c3b4 <strstr>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
						*hdr_end = save;
 8001e7a:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001e7e:	f897 2b6b 	ldrb.w	r2, [r7, #2923]	@ 0xb6b
 8001e82:	701a      	strb	r2, [r3, #0]
					}

					// 1) +IPD 마커 제거
					static char no_ipd[MAX_ESP_RX_BUFFER];
					strip_ipd_markers(body, no_ipd, sizeof(no_ipd));
 8001e84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e88:	499b      	ldr	r1, [pc, #620]	@ (80020f8 <Weather_Task+0x4e8>)
 8001e8a:	f8d7 0b6c 	ldr.w	r0, [r7, #2924]	@ 0xb6c
 8001e8e:	f7ff fd0d 	bl	80018ac <strip_ipd_markers>

					// 2) (필요시) 디청크
					static char json_buf[MAX_ESP_RX_BUFFER];
					const char *json_src = no_ipd;
 8001e92:	4b99      	ldr	r3, [pc, #612]	@ (80020f8 <Weather_Task+0x4e8>)
 8001e94:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
					if (is_chunked) {
 8001e98:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <Weather_Task+0x2a2>
						dechunk_simple(no_ipd, json_buf, sizeof(json_buf));
 8001ea0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ea4:	4995      	ldr	r1, [pc, #596]	@ (80020fc <Weather_Task+0x4ec>)
 8001ea6:	4894      	ldr	r0, [pc, #592]	@ (80020f8 <Weather_Task+0x4e8>)
 8001ea8:	f7ff fd9a 	bl	80019e0 <dechunk_simple>
						json_src = json_buf;
 8001eac:	4b93      	ldr	r3, [pc, #588]	@ (80020fc <Weather_Task+0x4ec>)
 8001eae:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
					}

                    if (strstr(rx, "HTTP/1.1 200")) {
 8001eb2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001eb6:	4992      	ldr	r1, [pc, #584]	@ (8002100 <Weather_Task+0x4f0>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00a fa7b 	bl	800c3b4 <strstr>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80fb 	beq.w	80020bc <Weather_Task+0x4ac>
                        char t1h[16] = "?", reh[16] = "?", pty[16] = "?", rn1[16] = "?";
 8001ec6:	233f      	movs	r3, #63	@ 0x3f
 8001ec8:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
 8001ecc:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	233f      	movs	r3, #63	@ 0x3f
 8001eda:	f8c7 3b28 	str.w	r3, [r7, #2856]	@ 0xb28
 8001ede:	f607 332c 	addw	r3, r7, #2860	@ 0xb2c
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	233f      	movs	r3, #63	@ 0x3f
 8001eec:	f8c7 3b18 	str.w	r3, [r7, #2840]	@ 0xb18
 8001ef0:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	233f      	movs	r3, #63	@ 0x3f
 8001efe:	f8c7 3b08 	str.w	r3, [r7, #2824]	@ 0xb08
 8001f02:	f607 330c 	addw	r3, r7, #2828	@ 0xb0c
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
                        json_pick_value(json_src, "T1H", t1h, sizeof(t1h));
 8001f0e:	f607 3238 	addw	r2, r7, #2872	@ 0xb38
 8001f12:	2310      	movs	r3, #16
 8001f14:	497b      	ldr	r1, [pc, #492]	@ (8002104 <Weather_Task+0x4f4>)
 8001f16:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001f1a:	f7ff fc43 	bl	80017a4 <json_pick_value>
                        json_pick_value(json_src, "REH", reh, sizeof(reh));
 8001f1e:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8001f22:	2310      	movs	r3, #16
 8001f24:	4978      	ldr	r1, [pc, #480]	@ (8002108 <Weather_Task+0x4f8>)
 8001f26:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001f2a:	f7ff fc3b 	bl	80017a4 <json_pick_value>
                        json_pick_value(json_src, "PTY", pty, sizeof(pty));
 8001f2e:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 8001f32:	2310      	movs	r3, #16
 8001f34:	4975      	ldr	r1, [pc, #468]	@ (800210c <Weather_Task+0x4fc>)
 8001f36:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001f3a:	f7ff fc33 	bl	80017a4 <json_pick_value>
                        json_pick_value(json_src, "RN1", rn1, sizeof(rn1));
 8001f3e:	f607 3208 	addw	r2, r7, #2824	@ 0xb08
 8001f42:	2310      	movs	r3, #16
 8001f44:	4972      	ldr	r1, [pc, #456]	@ (8002110 <Weather_Task+0x500>)
 8001f46:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001f4a:	f7ff fc2b 	bl	80017a4 <json_pick_value>

                        int pty_code = atoi(pty);
 8001f4e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8001f52:	4618      	mov	r0, r3
 8001f54:	f008 fbe3 	bl	800a71e <atoi>
 8001f58:	f8c7 0b64 	str.w	r0, [r7, #2916]	@ 0xb64
                        float temp_c  = atof(t1h);  // 현재기온
 8001f5c:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8001f60:	4618      	mov	r0, r3
 8001f62:	f008 fbd9 	bl	800a718 <atof>
 8001f66:	ec53 2b10 	vmov	r2, r3, d0
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f507 6236 	add.w	r2, r7, #2912	@ 0xb60
 8001f78:	6013      	str	r3, [r2, #0]

                        printf("[WEATHER][Gangseo-gu] T=%s°C, RH=%s%%, RAIN=%s, RN1=%smm\r\n",
 8001f7a:	f8d7 0b64 	ldr.w	r0, [r7, #2916]	@ 0xb64
 8001f7e:	f7ff fe03 	bl	8001b88 <pty_text>
 8001f82:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8001f86:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8001f8a:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	4860      	ldr	r0, [pc, #384]	@ (8002114 <Weather_Task+0x504>)
 8001f94:	f009 ff76 	bl	800be84 <iprintf>
                               t1h, reh, pty_text(pty_code), rn1);

                        if (prev != pty_code) {
 8001f98:	f8d7 2b9c 	ldr.w	r2, [r7, #2972]	@ 0xb9c
 8001f9c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d00d      	beq.n	8001fc0 <Weather_Task+0x3b0>
                             prev = pty_code;
 8001fa4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8001fa8:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
                             Servo_SetAngle(pty_code ? 90 : 0);
 8001fac:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <Weather_Task+0x3a8>
 8001fb4:	235a      	movs	r3, #90	@ 0x5a
 8001fb6:	e000      	b.n	8001fba <Weather_Task+0x3aa>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fb96 	bl	80016ec <Servo_SetAngle>
                         }

                        // ★ LCD용 공유 값 업데이트
                        if (osMutexAcquire(Weather_MutexHandle, osWaitForever) == osOK) {
 8001fc0:	4b55      	ldr	r3, [pc, #340]	@ (8002118 <Weather_Task+0x508>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fae6 	bl	800759a <osMutexAcquire>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11e      	bne.n	8002012 <Weather_Task+0x402>
                            g_t1h = (float)atof(t1h);
 8001fd4:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f008 fb9d 	bl	800a718 <atof>
 8001fde:	ec53 2b10 	vmov	r2, r3, d0
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fe17 	bl	8000c18 <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a4b      	ldr	r2, [pc, #300]	@ (800211c <Weather_Task+0x50c>)
 8001fee:	6013      	str	r3, [r2, #0]
                            g_reh = atoi(reh);
 8001ff0:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f008 fb92 	bl	800a71e <atoi>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a48      	ldr	r2, [pc, #288]	@ (8002120 <Weather_Task+0x510>)
 8001ffe:	6013      	str	r3, [r2, #0]
                            g_pty = pty_code;
 8002000:	4a48      	ldr	r2, [pc, #288]	@ (8002124 <Weather_Task+0x514>)
 8002002:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8002006:	6013      	str	r3, [r2, #0]
                            osMutexRelease(Weather_MutexHandle);
 8002008:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <Weather_Task+0x508>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f005 fb0f 	bl	8007630 <osMutexRelease>
                        }

                        int is_precip = (pty_code != 0);
 8002012:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c

                        if (is_precip || temp_c >= 35.0f) {
 8002024:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <Weather_Task+0x432>
 800202c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002128 <Weather_Task+0x518>
 8002038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002040:	db11      	blt.n	8002066 <Weather_Task+0x456>
                            set_ryg(1, 0, 0);  // RED
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2001      	movs	r0, #1
 8002048:	f7ff fb7c 	bl	8001744 <set_ryg>
                            printf("[RYG] RED ON (precip=%d, T=%.1f)\r\n", is_precip, temp_c);
 800204c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	f7fe fa91 	bl	8000578 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	f8d7 1b5c 	ldr.w	r1, [r7, #2908]	@ 0xb5c
 800205e:	4833      	ldr	r0, [pc, #204]	@ (800212c <Weather_Task+0x51c>)
 8002060:	f009 ff10 	bl	800be84 <iprintf>
 8002064:	e02f      	b.n	80020c6 <Weather_Task+0x4b6>
                        } else if (temp_c >= 30.0f) {
 8002066:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	db0f      	blt.n	800209c <Weather_Task+0x48c>
                            set_ryg(0, 1, 0);  // YELLOW
 800207c:	2200      	movs	r2, #0
 800207e:	2101      	movs	r1, #1
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fb5f 	bl	8001744 <set_ryg>
                            printf("[RYG] YELLOW ON (T=%.1f)\r\n", temp_c);
 8002086:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	f7fe fa74 	bl	8000578 <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4826      	ldr	r0, [pc, #152]	@ (8002130 <Weather_Task+0x520>)
 8002096:	f009 fef5 	bl	800be84 <iprintf>
 800209a:	e014      	b.n	80020c6 <Weather_Task+0x4b6>
                        } else {
                            set_ryg(0, 0, 1);  // GREEN
 800209c:	2201      	movs	r2, #1
 800209e:	2100      	movs	r1, #0
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fb4f 	bl	8001744 <set_ryg>
                            printf("[RYG] GREEN ON (T=%.1f)\r\n", temp_c);
 80020a6:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	f7fe fa64 	bl	8000578 <__aeabi_f2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	481f      	ldr	r0, [pc, #124]	@ (8002134 <Weather_Task+0x524>)
 80020b6:	f009 fee5 	bl	800be84 <iprintf>
 80020ba:	e004      	b.n	80020c6 <Weather_Task+0x4b6>
                        }

                    } else {
                        printf("[WEATHER] HTTP not 200 (len=%d)\r\n", copied);
 80020bc:	f8d7 1b98 	ldr.w	r1, [r7, #2968]	@ 0xb98
 80020c0:	481d      	ldr	r0, [pc, #116]	@ (8002138 <Weather_Task+0x528>)
 80020c2:	f009 fedf 	bl	800be84 <iprintf>
                    }
                }
                // 6) 링크1 닫기
                esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
 80020c6:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 80020ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ce:	491b      	ldr	r1, [pc, #108]	@ (800213c <Weather_Task+0x52c>)
 80020d0:	481b      	ldr	r0, [pc, #108]	@ (8002140 <Weather_Task+0x530>)
 80020d2:	f000 f83b 	bl	800214c <esp_at_command>
 80020d6:	e002      	b.n	80020de <Weather_Task+0x4ce>
            } else {
                printf("[WEATHER] Link1 TCP connect FAIL\r\n");
 80020d8:	481a      	ldr	r0, [pc, #104]	@ (8002144 <Weather_Task+0x534>)
 80020da:	f009 ff43 	bl	800bf64 <puts>
            }

            osMutexRelease(ESP_MutexHandle);
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <Weather_Task+0x538>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 faa4 	bl	8007630 <osMutexRelease>
        }

        vTaskDelay(pdMS_TO_TICKS(30000));  // 60초 주기
 80020e8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80020ec:	f006 fd02 	bl	8008af4 <vTaskDelay>
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 80020f0:	e5a7      	b.n	8001c42 <Weather_Task+0x32>
 80020f2:	bf00      	nop
 80020f4:	080108cc 	.word	0x080108cc
 80020f8:	20000274 	.word	0x20000274
 80020fc:	20000a74 	.word	0x20000a74
 8002100:	080108e8 	.word	0x080108e8
 8002104:	080108f8 	.word	0x080108f8
 8002108:	080108fc 	.word	0x080108fc
 800210c:	08010900 	.word	0x08010900
 8002110:	08010904 	.word	0x08010904
 8002114:	08010908 	.word	0x08010908
 8002118:	20002434 	.word	0x20002434
 800211c:	20000270 	.word	0x20000270
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004
 8002128:	420c0000 	.word	0x420c0000
 800212c:	08010944 	.word	0x08010944
 8002130:	08010968 	.word	0x08010968
 8002134:	08010984 	.word	0x08010984
 8002138:	080109a0 	.word	0x080109a0
 800213c:	20001284 	.word	0x20001284
 8002140:	080109c4 	.word	0x080109c4
 8002144:	080109d4 	.word	0x080109d4
 8002148:	2000242c 	.word	0x2000242c

0800214c <esp_at_command>:
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	807b      	strh	r3, [r7, #2]
	*length = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8002160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002164:	2100      	movs	r1, #0
 8002166:	68b8      	ldr	r0, [r7, #8]
 8002168:	f00a f87c 	bl	800c264 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 800216c:	f640 0204 	movw	r2, #2052	@ 0x804
 8002170:	2100      	movs	r1, #0
 8002172:	482f      	ldr	r0, [pc, #188]	@ (8002230 <esp_at_command+0xe4>)
 8002174:	f00a f876 	bl	800c264 <memset>
	cb_data.length = 0;
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <esp_at_command+0xe4>)
 800217a:	2200      	movs	r2, #0
 800217c:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7fe f88d 	bl	80002a0 <strlen>
 8002186:	4603      	mov	r3, r0
 8002188:	b29a      	uxth	r2, r3
 800218a:	2364      	movs	r3, #100	@ 0x64
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	4829      	ldr	r0, [pc, #164]	@ (8002234 <esp_at_command+0xe8>)
 8002190:	f004 f836 	bl	8006200 <HAL_UART_Transmit>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d03f      	beq.n	800221a <esp_at_command+0xce>
		return -1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e042      	b.n	8002226 <esp_at_command+0xda>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER) return -2;
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <esp_at_command+0xe4>)
 80021a2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021aa:	d302      	bcc.n	80021b2 <esp_at_command+0x66>
 80021ac:	f06f 0301 	mvn.w	r3, #1
 80021b0:	e039      	b.n	8002226 <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL) return -3;
 80021b2:	4921      	ldr	r1, [pc, #132]	@ (8002238 <esp_at_command+0xec>)
 80021b4:	481e      	ldr	r0, [pc, #120]	@ (8002230 <esp_at_command+0xe4>)
 80021b6:	f00a f8fd 	bl	800c3b4 <strstr>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <esp_at_command+0x7a>
 80021c0:	f06f 0302 	mvn.w	r3, #2
 80021c4:	e02f      	b.n	8002226 <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 80021c6:	491d      	ldr	r1, [pc, #116]	@ (800223c <esp_at_command+0xf0>)
 80021c8:	4819      	ldr	r0, [pc, #100]	@ (8002230 <esp_at_command+0xe4>)
 80021ca:	f00a f8f3 	bl	800c3b4 <strstr>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <esp_at_command+0x94>
		{
			printf("ESP: TCP connection closed.\r\n");
 80021d4:	481a      	ldr	r0, [pc, #104]	@ (8002240 <esp_at_command+0xf4>)
 80021d6:	f009 fec5 	bl	800bf64 <puts>
			//esp_client_conn();   // 자동 재연결
			return -5;
 80021da:	f06f 0304 	mvn.w	r3, #4
 80021de:	e022      	b.n	8002226 <esp_at_command+0xda>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 80021e0:	4918      	ldr	r1, [pc, #96]	@ (8002244 <esp_at_command+0xf8>)
 80021e2:	4813      	ldr	r0, [pc, #76]	@ (8002230 <esp_at_command+0xe4>)
 80021e4:	f00a f8e6 	bl	800c3b4 <strstr>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00e      	beq.n	800220c <esp_at_command+0xc0>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <esp_at_command+0xe4>)
 80021f0:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80021f4:	461a      	mov	r2, r3
 80021f6:	490e      	ldr	r1, [pc, #56]	@ (8002230 <esp_at_command+0xe4>)
 80021f8:	68b8      	ldr	r0, [r7, #8]
 80021fa:	f00b f82a 	bl	800d252 <memcpy>
			*length = cb_data.length;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <esp_at_command+0xe4>)
 8002200:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	@ 0x800
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	801a      	strh	r2, [r3, #0]
			return 0;
 8002208:	2300      	movs	r3, #0
 800220a:	e00c      	b.n	8002226 <esp_at_command+0xda>
		}

		time_out -= 10;
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	3b0a      	subs	r3, #10
 8002210:	b29b      	uxth	r3, r3
 8002212:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 8002214:	200a      	movs	r0, #10
 8002216:	f001 fb1f 	bl	8003858 <HAL_Delay>
	while (time_out > 0)
 800221a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800221e:	2b00      	cmp	r3, #0
 8002220:	dcbe      	bgt.n	80021a0 <esp_at_command+0x54>
	}
	return -4; // Timeout
 8002222:	f06f 0303 	mvn.w	r3, #3
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20001abc 	.word	0x20001abc
 8002234:	200023d4 	.word	0x200023d4
 8002238:	080109f8 	.word	0x080109f8
 800223c:	08010a00 	.word	0x08010a00
 8002240:	08010a08 	.word	0x08010a08
 8002244:	08010a28 	.word	0x08010a28

08002248 <esp_reset>:
    return 0; // 타임아웃
}


static int esp_reset(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002252:	1dba      	adds	r2, r7, #6
 8002254:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002258:	4909      	ldr	r1, [pc, #36]	@ (8002280 <esp_reset+0x38>)
 800225a:	480a      	ldr	r0, [pc, #40]	@ (8002284 <esp_reset+0x3c>)
 800225c:	f7ff ff76 	bl	800214c <esp_at_command>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <esp_reset+0x24>
    {
    	return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e004      	b.n	8002276 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 800226c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002270:	f001 faf2 	bl	8003858 <HAL_Delay>
    return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20001284 	.word	0x20001284
 8002284:	08010a2c 	.word	0x08010a2c

08002288 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002296:	f107 020a 	add.w	r2, r7, #10
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	492d      	ldr	r1, [pc, #180]	@ (8002354 <request_ip_addr+0xcc>)
 80022a0:	482d      	ldr	r0, [pc, #180]	@ (8002358 <request_ip_addr+0xd0>)
 80022a2:	f7ff ff53 	bl	800214c <esp_at_command>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80022ac:	482b      	ldr	r0, [pc, #172]	@ (800235c <request_ip_addr+0xd4>)
 80022ae:	f009 fe59 	bl	800bf64 <puts>
 80022b2:	e049      	b.n	8002348 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80022b4:	492a      	ldr	r1, [pc, #168]	@ (8002360 <request_ip_addr+0xd8>)
 80022b6:	4827      	ldr	r0, [pc, #156]	@ (8002354 <request_ip_addr+0xcc>)
 80022b8:	f00a f820 	bl	800c2fc <strtok>
 80022bc:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03e      	beq.n	8002342 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e009      	b.n	80022de <request_ip_addr+0x56>
                printf("%c", response[i]);
 80022ca:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <request_ip_addr+0xcc>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f009 fde8 	bl	800bea8 <putchar>
            for(int i = 0 ; i < length ; i++)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	3301      	adds	r3, #1
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	897b      	ldrh	r3, [r7, #10]
 80022e0:	461a      	mov	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	dbf0      	blt.n	80022ca <request_ip_addr+0x42>
        }

        while(line != NULL)
 80022e8:	e02b      	b.n	8002342 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80022ea:	491e      	ldr	r1, [pc, #120]	@ (8002364 <request_ip_addr+0xdc>)
 80022ec:	6978      	ldr	r0, [r7, #20]
 80022ee:	f00a f861 	bl	800c3b4 <strstr>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01f      	beq.n	8002338 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80022f8:	491b      	ldr	r1, [pc, #108]	@ (8002368 <request_ip_addr+0xe0>)
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f009 fffe 	bl	800c2fc <strtok>
                ip = strtok(NULL, "\"");
 8002300:	4919      	ldr	r1, [pc, #100]	@ (8002368 <request_ip_addr+0xe0>)
 8002302:	2000      	movs	r0, #0
 8002304:	f009 fffa 	bl	800c2fc <strtok>
 8002308:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800230a:	4918      	ldr	r1, [pc, #96]	@ (800236c <request_ip_addr+0xe4>)
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7fd ff67 	bl	80001e0 <strcmp>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00f      	beq.n	8002338 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8002318:	2210      	movs	r2, #16
 800231a:	2100      	movs	r1, #0
 800231c:	4814      	ldr	r0, [pc, #80]	@ (8002370 <request_ip_addr+0xe8>)
 800231e:	f009 ffa1 	bl	800c264 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7fd ffbc 	bl	80002a0 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	68f9      	ldr	r1, [r7, #12]
 800232e:	4810      	ldr	r0, [pc, #64]	@ (8002370 <request_ip_addr+0xe8>)
 8002330:	f00a ff8f 	bl	800d252 <memcpy>
                    return 0;
 8002334:	2300      	movs	r3, #0
 8002336:	e009      	b.n	800234c <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8002338:	4909      	ldr	r1, [pc, #36]	@ (8002360 <request_ip_addr+0xd8>)
 800233a:	2000      	movs	r0, #0
 800233c:	f009 ffde 	bl	800c2fc <strtok>
 8002340:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1d0      	bne.n	80022ea <request_ip_addr+0x62>
        }
    }
    return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20001284 	.word	0x20001284
 8002358:	08010a74 	.word	0x08010a74
 800235c:	08010a80 	.word	0x08010a80
 8002360:	08010a68 	.word	0x08010a68
 8002364:	08010aa0 	.word	0x08010aa0
 8002368:	08010a70 	.word	0x08010a70
 800236c:	08010a38 	.word	0x08010a38
 8002370:	20001274 	.word	0x20001274

08002374 <esp_client_conn>:

int esp_client_conn()
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0a4      	sub	sp, #144	@ 0x90
 8002378:	af02      	add	r7, sp, #8
    char at_cmd[MAX_ESP_COMMAND_LEN]={0}; uint16_t length=0;
 800237a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f009 ff6e 	bl	800c264 <memset>
 8002388:	2300      	movs	r3, #0
 800238a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // 1) TCP connect (여유 8초)
    sprintf(at_cmd, "AT+CIPSTART=0,\"TCP\",\"%s\",%d\r\n", DST_IP, DST_PORT);
 800238e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002392:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002396:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <esp_client_conn+0xd8>)
 8002398:	492d      	ldr	r1, [pc, #180]	@ (8002450 <esp_client_conn+0xdc>)
 800239a:	f009 fe21 	bl	800bfe0 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,8000)!=0) return -1;
 800239e:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80023a2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80023a6:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80023aa:	492a      	ldr	r1, [pc, #168]	@ (8002454 <esp_client_conn+0xe0>)
 80023ac:	f7ff fece 	bl	800214c <esp_at_command>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <esp_client_conn+0x48>
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e042      	b.n	8002442 <esp_client_conn+0xce>
    if (!strstr(response,"CONNECT") && !strstr(response,"ALREADY")) return -2;
 80023bc:	4926      	ldr	r1, [pc, #152]	@ (8002458 <esp_client_conn+0xe4>)
 80023be:	4825      	ldr	r0, [pc, #148]	@ (8002454 <esp_client_conn+0xe0>)
 80023c0:	f009 fff8 	bl	800c3b4 <strstr>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <esp_client_conn+0x6a>
 80023ca:	4924      	ldr	r1, [pc, #144]	@ (800245c <esp_client_conn+0xe8>)
 80023cc:	4821      	ldr	r0, [pc, #132]	@ (8002454 <esp_client_conn+0xe0>)
 80023ce:	f009 fff1 	bl	800c3b4 <strstr>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <esp_client_conn+0x6a>
 80023d8:	f06f 0301 	mvn.w	r3, #1
 80023dc:	e031      	b.n	8002442 <esp_client_conn+0xce>

    // 2) 로그인 페이로드 정확히 만들기
    char payload[64];
    snprintf(payload,sizeof(payload),"[%s:%s]", LOGID, PASSWD);
 80023de:	1d38      	adds	r0, r7, #4
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <esp_client_conn+0xec>)
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <esp_client_conn+0xf0>)
 80023e6:	4a20      	ldr	r2, [pc, #128]	@ (8002468 <esp_client_conn+0xf4>)
 80023e8:	2140      	movs	r1, #64	@ 0x40
 80023ea:	f009 fdc3 	bl	800bf74 <sniprintf>

    // 3) CIPSEND (여유 3초) → payload 전송 (여유 3초)
    sprintf(at_cmd,"AT+CIPSEND=0,%d\r\n",(int)strlen(payload));
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fd ff55 	bl	80002a0 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023fe:	491b      	ldr	r1, [pc, #108]	@ (800246c <esp_client_conn+0xf8>)
 8002400:	4618      	mov	r0, r3
 8002402:	f009 fded 	bl	800bfe0 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,3000)!=0) return -3;
 8002406:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 800240a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800240e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002412:	4910      	ldr	r1, [pc, #64]	@ (8002454 <esp_client_conn+0xe0>)
 8002414:	f7ff fe9a 	bl	800214c <esp_at_command>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <esp_client_conn+0xb0>
 800241e:	f06f 0302 	mvn.w	r3, #2
 8002422:	e00e      	b.n	8002442 <esp_client_conn+0xce>
    if (esp_at_command((uint8_t*)payload,(uint8_t*)response,&length,3000)!=0) return -4;
 8002424:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8002428:	1d38      	adds	r0, r7, #4
 800242a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800242e:	4909      	ldr	r1, [pc, #36]	@ (8002454 <esp_client_conn+0xe0>)
 8002430:	f7ff fe8c 	bl	800214c <esp_at_command>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <esp_client_conn+0xcc>
 800243a:	f06f 0303 	mvn.w	r3, #3
 800243e:	e000      	b.n	8002442 <esp_client_conn+0xce>

    return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3788      	adds	r7, #136	@ 0x88
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	08010aac 	.word	0x08010aac
 8002450:	08010ab8 	.word	0x08010ab8
 8002454:	20001284 	.word	0x20001284
 8002458:	08010ad8 	.word	0x08010ad8
 800245c:	08010ae0 	.word	0x08010ae0
 8002460:	08010af8 	.word	0x08010af8
 8002464:	08010ae8 	.word	0x08010ae8
 8002468:	08010af0 	.word	0x08010af0
 800246c:	08010b00 	.word	0x08010b00

08002470 <esp_get_status>:

int esp_get_status()
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 800247a:	1dba      	adds	r2, r7, #6
 800247c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002480:	4909      	ldr	r1, [pc, #36]	@ (80024a8 <esp_get_status+0x38>)
 8002482:	480a      	ldr	r0, [pc, #40]	@ (80024ac <esp_get_status+0x3c>)
 8002484:	f7ff fe62 	bl	800214c <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8002488:	4909      	ldr	r1, [pc, #36]	@ (80024b0 <esp_get_status+0x40>)
 800248a:	4807      	ldr	r0, [pc, #28]	@ (80024a8 <esp_get_status+0x38>)
 800248c:	f009 ff92 	bl	800c3b4 <strstr>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <esp_get_status+0x2a>
    {
    	return 0;
 8002496:	2300      	movs	r3, #0
 8002498:	e001      	b.n	800249e <esp_get_status+0x2e>
    }
	return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20001284 	.word	0x20001284
 80024ac:	08010b14 	.word	0x08010b14
 80024b0:	08010b24 	.word	0x08010b24

080024b4 <drv_esp_init>:

 int drv_esp_init(void)
 {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 80024ba:	2210      	movs	r2, #16
 80024bc:	2100      	movs	r1, #0
 80024be:	4817      	ldr	r0, [pc, #92]	@ (800251c <drv_esp_init+0x68>)
 80024c0:	f009 fed0 	bl	800c264 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 80024c4:	f640 0204 	movw	r2, #2052	@ 0x804
 80024c8:	2100      	movs	r1, #0
 80024ca:	4815      	ldr	r0, [pc, #84]	@ (8002520 <drv_esp_init+0x6c>)
 80024cc:	f009 feca 	bl	800c264 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 80024d0:	2201      	movs	r2, #1
 80024d2:	4914      	ldr	r1, [pc, #80]	@ (8002524 <drv_esp_init+0x70>)
 80024d4:	4814      	ldr	r0, [pc, #80]	@ (8002528 <drv_esp_init+0x74>)
 80024d6:	f003 ff1e 	bl	8006316 <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	e011      	b.n	8002504 <drv_esp_init+0x50>
         uint16_t len=0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 80024e4:	1cba      	adds	r2, r7, #2
 80024e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80024ea:	4910      	ldr	r1, [pc, #64]	@ (800252c <drv_esp_init+0x78>)
 80024ec:	4810      	ldr	r0, [pc, #64]	@ (8002530 <drv_esp_init+0x7c>)
 80024ee:	f7ff fe2d 	bl	800214c <esp_at_command>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <drv_esp_init+0x58>
         HAL_Delay(100);
 80024f8:	2064      	movs	r0, #100	@ 0x64
 80024fa:	f001 f9ad 	bl	8003858 <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3301      	adds	r3, #1
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	ddea      	ble.n	80024e0 <drv_esp_init+0x2c>
 800250a:	e000      	b.n	800250e <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 800250c:	bf00      	nop
     }
     return esp_reset();
 800250e:	f7ff fe9b 	bl	8002248 <esp_reset>
 8002512:	4603      	mov	r3, r0
 }
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20001274 	.word	0x20001274
 8002520:	20001abc 	.word	0x20001abc
 8002524:	20001abb 	.word	0x20001abb
 8002528:	200023d4 	.word	0x200023d4
 800252c:	20001284 	.word	0x20001284
 8002530:	08010b30 	.word	0x08010b30

08002534 <reset_func>:

void reset_func()
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8002538:	4808      	ldr	r0, [pc, #32]	@ (800255c <reset_func+0x28>)
 800253a:	f009 fca3 	bl	800be84 <iprintf>
	if(esp_reset() == 0)
 800253e:	f7ff fe83 	bl	8002248 <esp_reset>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <reset_func+0x1c>
			printf("OK\r\n");
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <reset_func+0x2c>)
 800254a:	f009 fd0b 	bl	800bf64 <puts>
	else
			printf("fail\r\n");
}
 800254e:	e002      	b.n	8002556 <reset_func+0x22>
			printf("fail\r\n");
 8002550:	4804      	ldr	r0, [pc, #16]	@ (8002564 <reset_func+0x30>)
 8002552:	f009 fd07 	bl	800bf64 <puts>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	08010b38 	.word	0x08010b38
 8002560:	08010b48 	.word	0x08010b48
 8002564:	08010b4c 	.word	0x08010b4c

08002568 <version_func>:

void version_func()
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 8002572:	4813      	ldr	r0, [pc, #76]	@ (80025c0 <version_func+0x58>)
 8002574:	f009 fcf6 	bl	800bf64 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002578:	1cba      	adds	r2, r7, #2
 800257a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800257e:	4911      	ldr	r1, [pc, #68]	@ (80025c4 <version_func+0x5c>)
 8002580:	4811      	ldr	r0, [pc, #68]	@ (80025c8 <version_func+0x60>)
 8002582:	f7ff fde3 	bl	800214c <esp_at_command>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <version_func+0x2c>
      printf("ap scan command fail\r\n");
 800258c:	480f      	ldr	r0, [pc, #60]	@ (80025cc <version_func+0x64>)
 800258e:	f009 fce9 	bl	800bf64 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 8002592:	e011      	b.n	80025b8 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e009      	b.n	80025ae <version_func+0x46>
          printf("%c", response[i]);
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <version_func+0x5c>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f009 fc80 	bl	800bea8 <putchar>
      for(int i = 0 ; i < length ; i++)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3301      	adds	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4293      	cmp	r3, r2
 80025b6:	dbf0      	blt.n	800259a <version_func+0x32>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	08010b54 	.word	0x08010b54
 80025c4:	20001284 	.word	0x20001284
 80025c8:	08010b6c 	.word	0x08010b6c
 80025cc:	08010b78 	.word	0x08010b78

080025d0 <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b096      	sub	sp, #88	@ 0x58
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint16_t length=0; char at_cmd[MAX_ESP_COMMAND_LEN]={0};
 80025da:	2300      	movs	r3, #0
 80025dc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	2240      	movs	r2, #64	@ 0x40
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f009 fe3b 	bl	800c264 <memset>
  if(!ssid || !passwd){ printf("invalid command : ap_conn <ssid> <passwd>\r\n"); return; }
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <ap_conn_func+0x2a>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <ap_conn_func+0x32>
 80025fa:	4838      	ldr	r0, [pc, #224]	@ (80026dc <ap_conn_func+0x10c>)
 80025fc:	f009 fcb2 	bl	800bf64 <puts>
 8002600:	e069      	b.n	80026d6 <ap_conn_func+0x106>

  esp_at_command((uint8_t*)"AT+CWMODE=1\r\n",(uint8_t*)response,&length,1500);
 8002602:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8002606:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800260a:	4935      	ldr	r1, [pc, #212]	@ (80026e0 <ap_conn_func+0x110>)
 800260c:	4835      	ldr	r0, [pc, #212]	@ (80026e4 <ap_conn_func+0x114>)
 800260e:	f7ff fd9d 	bl	800214c <esp_at_command>
  esp_at_command((uint8_t*)"AT+CWQAP\r\n",(uint8_t*)response,&length,1500); HAL_Delay(200);
 8002612:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8002616:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800261a:	4931      	ldr	r1, [pc, #196]	@ (80026e0 <ap_conn_func+0x110>)
 800261c:	4832      	ldr	r0, [pc, #200]	@ (80026e8 <ap_conn_func+0x118>)
 800261e:	f7ff fd95 	bl	800214c <esp_at_command>
 8002622:	20c8      	movs	r0, #200	@ 0xc8
 8002624:	f001 f918 	bl	8003858 <HAL_Delay>

  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, passwd);
 8002628:	f107 0008 	add.w	r0, r7, #8
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	492e      	ldr	r1, [pc, #184]	@ (80026ec <ap_conn_func+0x11c>)
 8002632:	f009 fcd5 	bl	800bfe0 <siprintf>
  int rc = esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,30000);
 8002636:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800263a:	f107 0008 	add.w	r0, r7, #8
 800263e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002642:	4927      	ldr	r1, [pc, #156]	@ (80026e0 <ap_conn_func+0x110>)
 8002644:	f7ff fd82 	bl	800214c <esp_at_command>
 8002648:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (rc!=0) {
 800264a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03f      	beq.n	80026d0 <ap_conn_func+0x100>
    int ok=0;
 8002650:	2300      	movs	r3, #0
 8002652:	657b      	str	r3, [r7, #84]	@ 0x54
    for (int i=0;i<10 && !ok;i++){
 8002654:	2300      	movs	r3, #0
 8002656:	653b      	str	r3, [r7, #80]	@ 0x50
 8002658:	e02d      	b.n	80026b6 <ap_conn_func+0xe6>
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800265a:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800265e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002662:	491f      	ldr	r1, [pc, #124]	@ (80026e0 <ap_conn_func+0x110>)
 8002664:	4822      	ldr	r0, [pc, #136]	@ (80026f0 <ap_conn_func+0x120>)
 8002666:	f7ff fd71 	bl	800214c <esp_at_command>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11b      	bne.n	80026a8 <ap_conn_func+0xd8>
          strstr(response, "+CWJAP:")) {
 8002670:	4920      	ldr	r1, [pc, #128]	@ (80026f4 <ap_conn_func+0x124>)
 8002672:	481b      	ldr	r0, [pc, #108]	@ (80026e0 <ap_conn_func+0x110>)
 8002674:	f009 fe9e 	bl	800c3b4 <strstr>
 8002678:	4603      	mov	r3, r0
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <ap_conn_func+0xd8>
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800267e:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8002682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002686:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <ap_conn_func+0x110>)
 8002688:	481b      	ldr	r0, [pc, #108]	@ (80026f8 <ap_conn_func+0x128>)
 800268a:	f7ff fd5f 	bl	800214c <esp_at_command>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 8002694:	4919      	ldr	r1, [pc, #100]	@ (80026fc <ap_conn_func+0x12c>)
 8002696:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <ap_conn_func+0x110>)
 8002698:	f009 fe8c 	bl	800c3b4 <strstr>
 800269c:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 80026a2:	2301      	movs	r3, #1
 80026a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80026a6:	e00c      	b.n	80026c2 <ap_conn_func+0xf2>
      }
      HAL_Delay(1000);
 80026a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ac:	f001 f8d4 	bl	8003858 <HAL_Delay>
    for (int i=0;i<10 && !ok;i++){
 80026b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b2:	3301      	adds	r3, #1
 80026b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80026b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	dc02      	bgt.n	80026c2 <ap_conn_func+0xf2>
 80026bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0cb      	beq.n	800265a <ap_conn_func+0x8a>
    }
    if (!ok){ printf("ap join failed (no SSID/IP)\r\n"); return; }
 80026c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <ap_conn_func+0x100>
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <ap_conn_func+0x130>)
 80026ca:	f009 fc4b 	bl	800bf64 <puts>
 80026ce:	e002      	b.n	80026d6 <ap_conn_func+0x106>
  }
  printf("WIFI GOT IP\r\n");
 80026d0:	480c      	ldr	r0, [pc, #48]	@ (8002704 <ap_conn_func+0x134>)
 80026d2:	f009 fc47 	bl	800bf64 <puts>
}
 80026d6:	3758      	adds	r7, #88	@ 0x58
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08010b90 	.word	0x08010b90
 80026e0:	20001284 	.word	0x20001284
 80026e4:	08010bbc 	.word	0x08010bbc
 80026e8:	08010bcc 	.word	0x08010bcc
 80026ec:	08010bd8 	.word	0x08010bd8
 80026f0:	08010bf0 	.word	0x08010bf0
 80026f4:	08010bfc 	.word	0x08010bfc
 80026f8:	08010a40 	.word	0x08010a40
 80026fc:	08010c04 	.word	0x08010c04
 8002700:	08010c14 	.word	0x08010c14
 8002704:	08010c34 	.word	0x08010c34

08002708 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <HAL_UART_RxCpltCallback+0x9c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d117      	bne.n	800274a <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800271a:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <HAL_UART_RxCpltCallback+0xa0>)
 800271c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002724:	d20c      	bcs.n	8002740 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_UART_RxCpltCallback+0xa0>)
 8002728:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	b291      	uxth	r1, r2
 8002730:	4a1d      	ldr	r2, [pc, #116]	@ (80027a8 <HAL_UART_RxCpltCallback+0xa0>)
 8002732:	f8a2 1800 	strh.w	r1, [r2, #2048]	@ 0x800
 8002736:	461a      	mov	r2, r3
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_UART_RxCpltCallback+0xa4>)
 800273a:	7819      	ldrb	r1, [r3, #0]
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_UART_RxCpltCallback+0xa0>)
 800273e:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 8002740:	2201      	movs	r2, #1
 8002742:	491a      	ldr	r1, [pc, #104]	@ (80027ac <HAL_UART_RxCpltCallback+0xa4>)
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f003 fde6 	bl	8006316 <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <HAL_UART_RxCpltCallback+0xa8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d122      	bne.n	800279a <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 8002754:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <HAL_UART_RxCpltCallback+0xac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a17      	ldr	r2, [pc, #92]	@ (80027b8 <HAL_UART_RxCpltCallback+0xb0>)
 800275a:	7811      	ldrb	r1, [r2, #0]
 800275c:	4a17      	ldr	r2, [pc, #92]	@ (80027bc <HAL_UART_RxCpltCallback+0xb4>)
 800275e:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_UART_RxCpltCallback+0xac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <HAL_UART_RxCpltCallback+0xb4>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b0d      	cmp	r3, #13
 800276c:	d10b      	bne.n	8002786 <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_UART_RxCpltCallback+0xac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a12      	ldr	r2, [pc, #72]	@ (80027bc <HAL_UART_RxCpltCallback+0xb4>)
 8002774:	2100      	movs	r1, #0
 8002776:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 8002778:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <HAL_UART_RxCpltCallback+0xb8>)
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
            i = 0;
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <HAL_UART_RxCpltCallback+0xac>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e004      	b.n	8002790 <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_UART_RxCpltCallback+0xac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_UART_RxCpltCallback+0xac>)
 800278e:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 8002790:	2201      	movs	r2, #1
 8002792:	4909      	ldr	r1, [pc, #36]	@ (80027b8 <HAL_UART_RxCpltCallback+0xb0>)
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f003 fdbe 	bl	8006316 <HAL_UART_Receive_IT>
    }
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40011400 	.word	0x40011400
 80027a8:	20001abc 	.word	0x20001abc
 80027ac:	20001abb 	.word	0x20001abb
 80027b0:	40004400 	.word	0x40004400
 80027b4:	200022c0 	.word	0x200022c0
 80027b8:	20001aba 	.word	0x20001aba
 80027bc:	20001a88 	.word	0x20001a88
 80027c0:	20001a84 	.word	0x20001a84

080027c4 <AiotClient_Init>:




void AiotClient_Init()
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
	reset_func();
 80027ca:	f7ff feb3 	bl	8002534 <reset_func>
	version_func();
 80027ce:	f7ff fecb 	bl	8002568 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 80027d2:	490a      	ldr	r1, [pc, #40]	@ (80027fc <AiotClient_Init+0x38>)
 80027d4:	480a      	ldr	r0, [pc, #40]	@ (8002800 <AiotClient_Init+0x3c>)
 80027d6:	f7ff fefb 	bl	80025d0 <ap_conn_func>
	request_ip_addr(1);
 80027da:	2001      	movs	r0, #1
 80027dc:	f7ff fd54 	bl	8002288 <request_ip_addr>

    // ★ 멀티커넥션 ON
	uint16_t length = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t*)"AT+CIPMUX=1\r\n", (uint8_t*)response, &length, 1000);
 80027e4:	1dba      	adds	r2, r7, #6
 80027e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ea:	4906      	ldr	r1, [pc, #24]	@ (8002804 <AiotClient_Init+0x40>)
 80027ec:	4806      	ldr	r0, [pc, #24]	@ (8002808 <AiotClient_Init+0x44>)
 80027ee:	f7ff fcad 	bl	800214c <esp_at_command>

	//esp_client_conn();
	//esp_get_status();
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	08010c7c 	.word	0x08010c7c
 8002800:	08010c88 	.word	0x08010c88
 8002804:	20001284 	.word	0x20001284
 8002808:	08010c90 	.word	0x08010c90

0800280c <drv_uart_init>:
}


//==================uart2=========================
int drv_uart_init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8002810:	2201      	movs	r2, #1
 8002812:	4903      	ldr	r1, [pc, #12]	@ (8002820 <drv_uart_init+0x14>)
 8002814:	4803      	ldr	r0, [pc, #12]	@ (8002824 <drv_uart_init+0x18>)
 8002816:	f003 fd7e 	bl	8006316 <HAL_UART_Receive_IT>
    return 0;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20001aba 	.word	0x20001aba
 8002824:	2000238c 	.word	0x2000238c

08002828 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8002830:	1d39      	adds	r1, r7, #4
 8002832:	230a      	movs	r3, #10
 8002834:	2201      	movs	r2, #1
 8002836:	4807      	ldr	r0, [pc, #28]	@ (8002854 <__io_putchar+0x2c>)
 8002838:	f003 fce2 	bl	8006200 <HAL_UART_Transmit>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <__io_putchar+0x1e>
        return ch;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	e001      	b.n	800284a <__io_putchar+0x22>
    return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000238c 	.word	0x2000238c

08002858 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b09a      	sub	sp, #104	@ 0x68
 800285c:	af06      	add	r7, sp, #24
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 8002862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002866:	2224      	movs	r2, #36	@ 0x24
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f009 fcfa 	bl	800c264 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 8002870:	4969      	ldr	r1, [pc, #420]	@ (8002a18 <parse_cipsntptime_line+0x1c0>)
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f009 fd9e 	bl	800c3b4 <strstr>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <parse_cipsntptime_line+0x2c>
        return -1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e0c5      	b.n	8002a10 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8002884:	f107 0120 	add.w	r1, r7, #32
 8002888:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800288c:	f107 0318 	add.w	r3, r7, #24
 8002890:	9304      	str	r3, [sp, #16]
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	9303      	str	r3, [sp, #12]
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	9302      	str	r3, [sp, #8]
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	460b      	mov	r3, r1
 80028ac:	495b      	ldr	r1, [pc, #364]	@ (8002a1c <parse_cipsntptime_line+0x1c4>)
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f009 fbb8 	bl	800c024 <siscanf>
 80028b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 80028b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028b8:	2b07      	cmp	r3, #7
 80028ba:	f040 80a7 	bne.w	8002a0c <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 80028be:	f107 0320 	add.w	r3, r7, #32
 80028c2:	4957      	ldr	r1, [pc, #348]	@ (8002a20 <parse_cipsntptime_line+0x1c8>)
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fc8b 	bl	80001e0 <strcmp>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <parse_cipsntptime_line+0x7e>
 80028d0:	2300      	movs	r3, #0
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028d4:	e082      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 80028d6:	f107 0320 	add.w	r3, r7, #32
 80028da:	4952      	ldr	r1, [pc, #328]	@ (8002a24 <parse_cipsntptime_line+0x1cc>)
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fc7f 	bl	80001e0 <strcmp>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <parse_cipsntptime_line+0x96>
 80028e8:	2301      	movs	r3, #1
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ec:	e076      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	494d      	ldr	r1, [pc, #308]	@ (8002a28 <parse_cipsntptime_line+0x1d0>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fc73 	bl	80001e0 <strcmp>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <parse_cipsntptime_line+0xae>
 8002900:	2302      	movs	r3, #2
 8002902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002904:	e06a      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	4948      	ldr	r1, [pc, #288]	@ (8002a2c <parse_cipsntptime_line+0x1d4>)
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fc67 	bl	80001e0 <strcmp>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <parse_cipsntptime_line+0xc6>
 8002918:	2303      	movs	r3, #3
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800291c:	e05e      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	4943      	ldr	r1, [pc, #268]	@ (8002a30 <parse_cipsntptime_line+0x1d8>)
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fc5b 	bl	80001e0 <strcmp>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <parse_cipsntptime_line+0xde>
 8002930:	2304      	movs	r3, #4
 8002932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002934:	e052      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 8002936:	f107 0320 	add.w	r3, r7, #32
 800293a:	493e      	ldr	r1, [pc, #248]	@ (8002a34 <parse_cipsntptime_line+0x1dc>)
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fc4f 	bl	80001e0 <strcmp>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <parse_cipsntptime_line+0xf6>
 8002948:	2305      	movs	r3, #5
 800294a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800294c:	e046      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 800294e:	f107 0320 	add.w	r3, r7, #32
 8002952:	4939      	ldr	r1, [pc, #228]	@ (8002a38 <parse_cipsntptime_line+0x1e0>)
 8002954:	4618      	mov	r0, r3
 8002956:	f7fd fc43 	bl	80001e0 <strcmp>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <parse_cipsntptime_line+0x10e>
 8002960:	2306      	movs	r3, #6
 8002962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002964:	e03a      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 8002966:	f107 0320 	add.w	r3, r7, #32
 800296a:	4934      	ldr	r1, [pc, #208]	@ (8002a3c <parse_cipsntptime_line+0x1e4>)
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fc37 	bl	80001e0 <strcmp>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <parse_cipsntptime_line+0x126>
 8002978:	2307      	movs	r3, #7
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800297c:	e02e      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 800297e:	f107 0320 	add.w	r3, r7, #32
 8002982:	492f      	ldr	r1, [pc, #188]	@ (8002a40 <parse_cipsntptime_line+0x1e8>)
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fc2b 	bl	80001e0 <strcmp>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <parse_cipsntptime_line+0x13e>
 8002990:	2308      	movs	r3, #8
 8002992:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002994:	e022      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	492a      	ldr	r1, [pc, #168]	@ (8002a44 <parse_cipsntptime_line+0x1ec>)
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fc1f 	bl	80001e0 <strcmp>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <parse_cipsntptime_line+0x156>
 80029a8:	2309      	movs	r3, #9
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ac:	e016      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 80029ae:	f107 0320 	add.w	r3, r7, #32
 80029b2:	4925      	ldr	r1, [pc, #148]	@ (8002a48 <parse_cipsntptime_line+0x1f0>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fc13 	bl	80001e0 <strcmp>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <parse_cipsntptime_line+0x16e>
 80029c0:	230a      	movs	r3, #10
 80029c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029c4:	e00a      	b.n	80029dc <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 80029c6:	f107 0320 	add.w	r3, r7, #32
 80029ca:	4920      	ldr	r1, [pc, #128]	@ (8002a4c <parse_cipsntptime_line+0x1f4>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fc07 	bl	80001e0 <strcmp>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <parse_cipsntptime_line+0x184>
 80029d8:	230b      	movs	r3, #11
 80029da:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80029f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 80029f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029f8:	4618      	mov	r0, r3
 80029fa:	f009 fedb 	bl	800c7b4 <mktime>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	6839      	ldr	r1, [r7, #0]
 8002a04:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e001      	b.n	8002a10 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3750      	adds	r7, #80	@ 0x50
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	08010ca0 	.word	0x08010ca0
 8002a1c:	08010cb0 	.word	0x08010cb0
 8002a20:	08010cd4 	.word	0x08010cd4
 8002a24:	08010cd8 	.word	0x08010cd8
 8002a28:	08010cdc 	.word	0x08010cdc
 8002a2c:	08010ce0 	.word	0x08010ce0
 8002a30:	08010ce4 	.word	0x08010ce4
 8002a34:	08010ce8 	.word	0x08010ce8
 8002a38:	08010cec 	.word	0x08010cec
 8002a3c:	08010cf0 	.word	0x08010cf0
 8002a40:	08010cf4 	.word	0x08010cf4
 8002a44:	08010cf8 	.word	0x08010cf8
 8002a48:	08010cfc 	.word	0x08010cfc
 8002a4c:	08010d00 	.word	0x08010d00

08002a50 <esp_ntp_config>:

int esp_ntp_config(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0a0      	sub	sp, #128	@ 0x80
 8002a54:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 8002a56:	463b      	mov	r3, r7
 8002a58:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <esp_ntp_config+0x48>)
 8002a5a:	4910      	ldr	r1, [pc, #64]	@ (8002a9c <esp_ntp_config+0x4c>)
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f009 fabf 	bl	800bfe0 <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 8002a62:	463b      	mov	r3, r7
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fc1b 	bl	80002a0 <strlen>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4639      	mov	r1, r7
 8002a70:	2364      	movs	r3, #100	@ 0x64
 8002a72:	480b      	ldr	r0, [pc, #44]	@ (8002aa0 <esp_ntp_config+0x50>)
 8002a74:	f003 fbc4 	bl	8006200 <HAL_UART_Transmit>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <esp_ntp_config+0x34>
        return -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e004      	b.n	8002a8e <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 8002a84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a88:	f006 f834 	bl	8008af4 <vTaskDelay>
    return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3780      	adds	r7, #128	@ 0x80
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	08010d04 	.word	0x08010d04
 8002a9c:	08010d18 	.word	0x08010d18
 8002aa0:	200023d4 	.word	0x200023d4

08002aa4 <esp_is_wifi_ready>:
    esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
    return 0;
}

int esp_is_wifi_ready(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
    uint16_t length=0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	80fb      	strh	r3, [r7, #6]
    if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)!=0) return 0;
 8002aae:	1dba      	adds	r2, r7, #6
 8002ab0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab4:	4915      	ldr	r1, [pc, #84]	@ (8002b0c <esp_is_wifi_ready+0x68>)
 8002ab6:	4816      	ldr	r0, [pc, #88]	@ (8002b10 <esp_is_wifi_ready+0x6c>)
 8002ab8:	f7ff fb48 	bl	800214c <esp_at_command>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <esp_is_wifi_ready+0x22>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e01e      	b.n	8002b04 <esp_is_wifi_ready+0x60>
    if (!strstr(response, "+CWJAP:")) return 0;
 8002ac6:	4913      	ldr	r1, [pc, #76]	@ (8002b14 <esp_is_wifi_ready+0x70>)
 8002ac8:	4810      	ldr	r0, [pc, #64]	@ (8002b0c <esp_is_wifi_ready+0x68>)
 8002aca:	f009 fc73 	bl	800c3b4 <strstr>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <esp_is_wifi_ready+0x34>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e015      	b.n	8002b04 <esp_is_wifi_ready+0x60>
    if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)!=0) return 0;
 8002ad8:	1dba      	adds	r2, r7, #6
 8002ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ade:	490b      	ldr	r1, [pc, #44]	@ (8002b0c <esp_is_wifi_ready+0x68>)
 8002ae0:	480d      	ldr	r0, [pc, #52]	@ (8002b18 <esp_is_wifi_ready+0x74>)
 8002ae2:	f7ff fb33 	bl	800214c <esp_at_command>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <esp_is_wifi_ready+0x4c>
 8002aec:	2300      	movs	r3, #0
 8002aee:	e009      	b.n	8002b04 <esp_is_wifi_ready+0x60>
    if (strstr(response, "ip:\"0.0.0.0\"")) return 0;
 8002af0:	490a      	ldr	r1, [pc, #40]	@ (8002b1c <esp_is_wifi_ready+0x78>)
 8002af2:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <esp_is_wifi_ready+0x68>)
 8002af4:	f009 fc5e 	bl	800c3b4 <strstr>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <esp_is_wifi_ready+0x5e>
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <esp_is_wifi_ready+0x60>
    return 1;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20001284 	.word	0x20001284
 8002b10:	08010bf0 	.word	0x08010bf0
 8002b14:	08010bfc 	.word	0x08010bfc
 8002b18:	08010a40 	.word	0x08010a40
 8002b1c:	08010c04 	.word	0x08010c04

08002b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b2a:	f000 fe23 	bl	8003774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b2e:	f000 f889 	bl	8002c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b32:	f000 faa3 	bl	800307c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002b36:	f000 fa4d 	bl	8002fd4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002b3a:	f000 fa75 	bl	8003028 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8002b3e:	f000 f91b 	bl	8002d78 <MX_RTC_Init>
  MX_I2C1_Init();
 8002b42:	f000 f8eb 	bl	8002d1c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002b46:	f000 f9a3 	bl	8002e90 <MX_TIM1_Init>
  Servo_Init();
 8002b4a:	f7fe fdb7 	bl	80016bc <Servo_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8002b4e:	4829      	ldr	r0, [pc, #164]	@ (8002bf4 <main+0xd4>)
 8002b50:	f009 fa08 	bl	800bf64 <puts>
  ret |= drv_uart_init();
 8002b54:	f7ff fe5a 	bl	800280c <drv_uart_init>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8002b60:	f7ff fca8 	bl	80024b4 <drv_esp_init>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <main+0x5c>
  {
	  printf("Esp response error\r\n");
 8002b72:	4821      	ldr	r0, [pc, #132]	@ (8002bf8 <main+0xd8>)
 8002b74:	f009 f9f6 	bl	800bf64 <puts>
	  Error_Handler();
 8002b78:	f000 fb06 	bl	8003188 <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002b7c:	f004 fb90 	bl	80072a0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 8002b80:	481e      	ldr	r0, [pc, #120]	@ (8002bfc <main+0xdc>)
 8002b82:	f004 fc84 	bl	800748e <osMutexNew>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <main+0xe0>)
 8002b8a:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 8002b8c:	481d      	ldr	r0, [pc, #116]	@ (8002c04 <main+0xe4>)
 8002b8e:	f004 fc7e 	bl	800748e <osMutexNew>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <main+0xe8>)
 8002b96:	6013      	str	r3, [r2, #0]

  /* creation of Weather_Mutex */
  Weather_MutexHandle = osMutexNew(&Weather_Mutex_attributes);
 8002b98:	481c      	ldr	r0, [pc, #112]	@ (8002c0c <main+0xec>)
 8002b9a:	f004 fc78 	bl	800748e <osMutexNew>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <main+0xf0>)
 8002ba2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c14 <main+0xf4>)
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	481b      	ldr	r0, [pc, #108]	@ (8002c18 <main+0xf8>)
 8002baa:	f004 fbc3 	bl	8007334 <osThreadNew>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <main+0xfc>)
 8002bb2:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c20 <main+0x100>)
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	481a      	ldr	r0, [pc, #104]	@ (8002c24 <main+0x104>)
 8002bba:	f004 fbbb 	bl	8007334 <osThreadNew>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a19      	ldr	r2, [pc, #100]	@ (8002c28 <main+0x108>)
 8002bc2:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 8002bc4:	4a19      	ldr	r2, [pc, #100]	@ (8002c2c <main+0x10c>)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4819      	ldr	r0, [pc, #100]	@ (8002c30 <main+0x110>)
 8002bca:	f004 fbb3 	bl	8007334 <osThreadNew>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <main+0x114>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 8002bd4:	4a18      	ldr	r2, [pc, #96]	@ (8002c38 <main+0x118>)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4818      	ldr	r0, [pc, #96]	@ (8002c3c <main+0x11c>)
 8002bda:	f004 fbab 	bl	8007334 <osThreadNew>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <main+0x120>)
 8002be2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002be4:	f004 fb80 	bl	80072e8 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8002be8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bec:	f004 fc34 	bl	8007458 <osDelay>
 8002bf0:	e7fa      	b.n	8002be8 <main+0xc8>
 8002bf2:	bf00      	nop
 8002bf4:	08010de8 	.word	0x08010de8
 8002bf8:	08010e00 	.word	0x08010e00
 8002bfc:	08010ec8 	.word	0x08010ec8
 8002c00:	2000242c 	.word	0x2000242c
 8002c04:	08010ed8 	.word	0x08010ed8
 8002c08:	20002430 	.word	0x20002430
 8002c0c:	08010ee8 	.word	0x08010ee8
 8002c10:	20002434 	.word	0x20002434
 8002c14:	08010e38 	.word	0x08010e38
 8002c18:	080010f1 	.word	0x080010f1
 8002c1c:	2000241c 	.word	0x2000241c
 8002c20:	08010e5c 	.word	0x08010e5c
 8002c24:	0800156d 	.word	0x0800156d
 8002c28:	20002420 	.word	0x20002420
 8002c2c:	08010e80 	.word	0x08010e80
 8002c30:	08001c11 	.word	0x08001c11
 8002c34:	20002424 	.word	0x20002424
 8002c38:	08010ea4 	.word	0x08010ea4
 8002c3c:	080014f1 	.word	0x080014f1
 8002c40:	20002428 	.word	0x20002428

08002c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b094      	sub	sp, #80	@ 0x50
 8002c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	2230      	movs	r2, #48	@ 0x30
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f009 fb06 	bl	800c264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <SystemClock_Config+0xd0>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	4a28      	ldr	r2, [pc, #160]	@ (8002d14 <SystemClock_Config+0xd0>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c78:	4b26      	ldr	r3, [pc, #152]	@ (8002d14 <SystemClock_Config+0xd0>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c84:	2300      	movs	r3, #0
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <SystemClock_Config+0xd4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a22      	ldr	r2, [pc, #136]	@ (8002d18 <SystemClock_Config+0xd4>)
 8002c8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <SystemClock_Config+0xd4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ca0:	2309      	movs	r3, #9
 8002ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002caa:	2301      	movs	r3, #1
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cbc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002cc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cca:	f107 0320 	add.w	r3, r7, #32
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fa6c 	bl	80041ac <HAL_RCC_OscConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002cda:	f000 fa55 	bl	8003188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cde:	230f      	movs	r3, #15
 8002ce0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fcce 	bl	800469c <HAL_RCC_ClockConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002d06:	f000 fa3f 	bl	8003188 <Error_Handler>
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3750      	adds	r7, #80	@ 0x50
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40007000 	.word	0x40007000

08002d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d22:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <MX_I2C1_Init+0x54>)
 8002d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d26:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d28:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <MX_I2C1_Init+0x58>)
 8002d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d4c:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d52:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d58:	4804      	ldr	r0, [pc, #16]	@ (8002d6c <MX_I2C1_Init+0x50>)
 8002d5a:	f001 f8e3 	bl	8003f24 <HAL_I2C_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d64:	f000 fa10 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200022d0 	.word	0x200022d0
 8002d70:	40005400 	.word	0x40005400
 8002d74:	000186a0 	.word	0x000186a0

08002d78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b090      	sub	sp, #64	@ 0x40
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002d92:	463b      	mov	r3, r7
 8002d94:	2228      	movs	r2, #40	@ 0x28
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f009 fa63 	bl	800c264 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002da0:	4a3a      	ldr	r2, [pc, #232]	@ (8002e8c <MX_RTC_Init+0x114>)
 8002da2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002da4:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002daa:	4b37      	ldr	r3, [pc, #220]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002dac:	227f      	movs	r2, #127	@ 0x7f
 8002dae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002db0:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002db2:	22ff      	movs	r2, #255	@ 0xff
 8002db4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002db6:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dbc:	4b32      	ldr	r3, [pc, #200]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dc2:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dc8:	482f      	ldr	r0, [pc, #188]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002dca:	f001 ff77 	bl	8004cbc <HAL_RTC_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002dd4:	f000 f9d8 	bl	8003188 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002df6:	2201      	movs	r2, #1
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4823      	ldr	r0, [pc, #140]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002dfc:	f001 ffdf 	bl	8004dbe <HAL_RTC_SetTime>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002e06:	f000 f9bf 	bl	8003188 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e26:	2201      	movs	r2, #1
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4817      	ldr	r0, [pc, #92]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002e2c:	f002 f861 	bl	8004ef2 <HAL_RTC_SetDate>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002e36:	f000 f9a7 	bl	8003188 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4805      	ldr	r0, [pc, #20]	@ (8002e88 <MX_RTC_Init+0x110>)
 8002e72:	f002 f8c3 	bl	8004ffc <HAL_RTC_SetAlarm_IT>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002e7c:	f000 f984 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	3740      	adds	r7, #64	@ 0x40
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20002324 	.word	0x20002324
 8002e8c:	40002800 	.word	0x40002800

08002e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b096      	sub	sp, #88	@ 0x58
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	611a      	str	r2, [r3, #16]
 8002ebe:	615a      	str	r2, [r3, #20]
 8002ec0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f009 f9cb 	bl	800c264 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ece:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd0 <MX_TIM1_Init+0x140>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002ed6:	2253      	movs	r2, #83	@ 0x53
 8002ed8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eda:	4b3c      	ldr	r3, [pc, #240]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002ee2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee8:	4b38      	ldr	r3, [pc, #224]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eee:	4b37      	ldr	r3, [pc, #220]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef4:	4b35      	ldr	r3, [pc, #212]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002ef6:	2280      	movs	r2, #128	@ 0x80
 8002ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002efa:	4834      	ldr	r0, [pc, #208]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002efc:	f002 fabc 	bl	8005478 <HAL_TIM_Base_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f06:	f000 f93f 	bl	8003188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f14:	4619      	mov	r1, r3
 8002f16:	482d      	ldr	r0, [pc, #180]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002f18:	f002 fcc8 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f22:	f000 f931 	bl	8003188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f26:	4829      	ldr	r0, [pc, #164]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002f28:	f002 faf5 	bl	8005516 <HAL_TIM_PWM_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f32:	f000 f929 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f42:	4619      	mov	r1, r3
 8002f44:	4821      	ldr	r0, [pc, #132]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002f46:	f003 f84b 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f50:	f000 f91a 	bl	8003188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f54:	2360      	movs	r3, #96	@ 0x60
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8002f58:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f76:	2200      	movs	r2, #0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4814      	ldr	r0, [pc, #80]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002f7c:	f002 fbd4 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002f86:	f000 f8ff 	bl	8003188 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	4807      	ldr	r0, [pc, #28]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002fae:	f003 f885 	bl	80060bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002fb8:	f000 f8e6 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fbc:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <MX_TIM1_Init+0x13c>)
 8002fbe:	f000 f9b3 	bl	8003328 <HAL_TIM_MspPostInit>

}
 8002fc2:	bf00      	nop
 8002fc4:	3758      	adds	r7, #88	@ 0x58
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20002344 	.word	0x20002344
 8002fd0:	40010000 	.word	0x40010000

08002fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <MX_USART2_UART_Init+0x50>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <MX_USART2_UART_Init+0x4c>)
 800300c:	f003 f8a8 	bl	8006160 <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003016:	f000 f8b7 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000238c 	.word	0x2000238c
 8003024:	40004400 	.word	0x40004400

08003028 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 800302e:	4a12      	ldr	r2, [pc, #72]	@ (8003078 <MX_USART6_UART_Init+0x50>)
 8003030:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 8003034:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003038:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003052:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800305e:	4805      	ldr	r0, [pc, #20]	@ (8003074 <MX_USART6_UART_Init+0x4c>)
 8003060:	f003 f87e 	bl	8006160 <HAL_UART_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800306a:	f000 f88d 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200023d4 	.word	0x200023d4
 8003078:	40011400 	.word	0x40011400

0800307c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	@ 0x28
 8003080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b38      	ldr	r3, [pc, #224]	@ (8003178 <MX_GPIO_Init+0xfc>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a37      	ldr	r2, [pc, #220]	@ (8003178 <MX_GPIO_Init+0xfc>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b35      	ldr	r3, [pc, #212]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	4a30      	ldr	r2, [pc, #192]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030be:	4b2e      	ldr	r3, [pc, #184]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030da:	4b27      	ldr	r3, [pc, #156]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	4b23      	ldr	r3, [pc, #140]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f6:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <MX_GPIO_Init+0xfc>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003102:	2200      	movs	r2, #0
 8003104:	2120      	movs	r1, #32
 8003106:	481d      	ldr	r0, [pc, #116]	@ (800317c <MX_GPIO_Init+0x100>)
 8003108:	f000 fef2 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8003112:	481b      	ldr	r0, [pc, #108]	@ (8003180 <MX_GPIO_Init+0x104>)
 8003114:	f000 feec 	bl	8003ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800311c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800311e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	4619      	mov	r1, r3
 800312e:	4815      	ldr	r0, [pc, #84]	@ (8003184 <MX_GPIO_Init+0x108>)
 8003130:	f000 fd5a 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003134:	2320      	movs	r3, #32
 8003136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003138:	2301      	movs	r3, #1
 800313a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	4619      	mov	r1, r3
 800314a:	480c      	ldr	r0, [pc, #48]	@ (800317c <MX_GPIO_Init+0x100>)
 800314c:	f000 fd4c 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 FAN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin;
 8003150:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8003154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	4805      	ldr	r0, [pc, #20]	@ (8003180 <MX_GPIO_Init+0x104>)
 800316a:	f000 fd3d 	bl	8003be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800316e:	bf00      	nop
 8003170:	3728      	adds	r7, #40	@ 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	40020800 	.word	0x40020800

08003188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800318c:	b672      	cpsid	i
}
 800318e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <Error_Handler+0x8>

08003194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <HAL_MspInit+0x54>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4a11      	ldr	r2, [pc, #68]	@ (80031e8 <HAL_MspInit+0x54>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031aa:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <HAL_MspInit+0x54>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_MspInit+0x54>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <HAL_MspInit+0x54>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c6:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_MspInit+0x54>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	210f      	movs	r1, #15
 80031d6:	f06f 0001 	mvn.w	r0, #1
 80031da:	f000 fc3c 	bl	8003a56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <HAL_I2C_MspInit+0x84>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12c      	bne.n	8003268 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b18      	ldr	r3, [pc, #96]	@ (8003274 <HAL_I2C_MspInit+0x88>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	4a17      	ldr	r2, [pc, #92]	@ (8003274 <HAL_I2C_MspInit+0x88>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	@ 0x30
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_I2C_MspInit+0x88>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800322a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800322e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003230:	2312      	movs	r3, #18
 8003232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800323c:	2304      	movs	r3, #4
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	480c      	ldr	r0, [pc, #48]	@ (8003278 <HAL_I2C_MspInit+0x8c>)
 8003248:	f000 fcce 	bl	8003be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <HAL_I2C_MspInit+0x88>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a07      	ldr	r2, [pc, #28]	@ (8003274 <HAL_I2C_MspInit+0x88>)
 8003256:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_I2C_MspInit+0x88>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003268:	bf00      	nop
 800326a:	3728      	adds	r7, #40	@ 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40005400 	.word	0x40005400
 8003274:	40023800 	.word	0x40023800
 8003278:	40020400 	.word	0x40020400

0800327c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
 8003294:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <HAL_RTC_MspInit+0x60>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d119      	bne.n	80032d4 <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032a0:	2302      	movs	r3, #2
 80032a2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80032a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fc14 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80032ba:	f7ff ff65 	bl	8003188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032be:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_RTC_MspInit+0x64>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2105      	movs	r1, #5
 80032c8:	2029      	movs	r0, #41	@ 0x29
 80032ca:	f000 fbc4 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80032ce:	2029      	movs	r0, #41	@ 0x29
 80032d0:	f000 fbdd 	bl	8003a8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80032d4:	bf00      	nop
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40002800 	.word	0x40002800
 80032e0:	42470e3c 	.word	0x42470e3c

080032e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003320 <HAL_TIM_Base_MspInit+0x3c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10d      	bne.n	8003312 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <HAL_TIM_Base_MspInit+0x40>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <HAL_TIM_Base_MspInit+0x40>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6453      	str	r3, [r2, #68]	@ 0x44
 8003306:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <HAL_TIM_Base_MspInit+0x40>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <HAL_TIM_MspPostInit+0x68>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d11e      	bne.n	8003388 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <HAL_TIM_MspPostInit+0x6c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4a10      	ldr	r2, [pc, #64]	@ (8003394 <HAL_TIM_MspPostInit+0x6c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <HAL_TIM_MspPostInit+0x6c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800336a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4619      	mov	r1, r3
 8003382:	4805      	ldr	r0, [pc, #20]	@ (8003398 <HAL_TIM_MspPostInit+0x70>)
 8003384:	f000 fc30 	bl	8003be8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40010000 	.word	0x40010000
 8003394:	40023800 	.word	0x40023800
 8003398:	40020000 	.word	0x40020000

0800339c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	@ 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3a      	ldr	r2, [pc, #232]	@ (80034a4 <HAL_UART_MspInit+0x108>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d134      	bne.n	8003428 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	4b39      	ldr	r3, [pc, #228]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	4a38      	ldr	r2, [pc, #224]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ce:	4b36      	ldr	r3, [pc, #216]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	4b32      	ldr	r3, [pc, #200]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b2f      	ldr	r3, [pc, #188]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f6:	230c      	movs	r3, #12
 80033f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003406:	2307      	movs	r3, #7
 8003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	4619      	mov	r1, r3
 8003410:	4826      	ldr	r0, [pc, #152]	@ (80034ac <HAL_UART_MspInit+0x110>)
 8003412:	f000 fbe9 	bl	8003be8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2105      	movs	r1, #5
 800341a:	2026      	movs	r0, #38	@ 0x26
 800341c:	f000 fb1b 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003420:	2026      	movs	r0, #38	@ 0x26
 8003422:	f000 fb34 	bl	8003a8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003426:	e038      	b.n	800349a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	@ (80034b0 <HAL_UART_MspInit+0x114>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d133      	bne.n	800349a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4b1c      	ldr	r3, [pc, #112]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 800343c:	f043 0320 	orr.w	r3, r3, #32
 8003440:	6453      	str	r3, [r2, #68]	@ 0x44
 8003442:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	4a14      	ldr	r2, [pc, #80]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6313      	str	r3, [r2, #48]	@ 0x30
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <HAL_UART_MspInit+0x10c>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800346a:	23c0      	movs	r3, #192	@ 0xc0
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800347a:	2308      	movs	r3, #8
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	480b      	ldr	r0, [pc, #44]	@ (80034b4 <HAL_UART_MspInit+0x118>)
 8003486:	f000 fbaf 	bl	8003be8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2105      	movs	r1, #5
 800348e:	2047      	movs	r0, #71	@ 0x47
 8003490:	f000 fae1 	bl	8003a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003494:	2047      	movs	r0, #71	@ 0x47
 8003496:	f000 fafa 	bl	8003a8e <HAL_NVIC_EnableIRQ>
}
 800349a:	bf00      	nop
 800349c:	3730      	adds	r7, #48	@ 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40004400 	.word	0x40004400
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40011400 	.word	0x40011400
 80034b4:	40020800 	.word	0x40020800

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <NMI_Handler+0x4>

080034c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <HardFault_Handler+0x4>

080034c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <MemManage_Handler+0x4>

080034d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <BusFault_Handler+0x4>

080034d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <UsageFault_Handler+0x4>

080034e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f2:	f000 f991 	bl	8003818 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80034f6:	f005 ff91 	bl	800941c <xTaskGetSchedulerState>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d001      	beq.n	8003504 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003500:	f006 fe8a 	bl	800a218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}

08003508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800350c:	4802      	ldr	r0, [pc, #8]	@ (8003518 <USART2_IRQHandler+0x10>)
 800350e:	f002 ff27 	bl	8006360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2000238c 	.word	0x2000238c

0800351c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003520:	4802      	ldr	r0, [pc, #8]	@ (800352c <RTC_Alarm_IRQHandler+0x10>)
 8003522:	f001 feaf 	bl	8005284 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20002324 	.word	0x20002324

08003530 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003534:	4802      	ldr	r0, [pc, #8]	@ (8003540 <USART6_IRQHandler+0x10>)
 8003536:	f002 ff13 	bl	8006360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200023d4 	.word	0x200023d4

08003544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return 1;
 8003548:	2301      	movs	r3, #1
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_kill>:

int _kill(int pid, int sig)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800355e:	f009 fe41 	bl	800d1e4 <__errno>
 8003562:	4603      	mov	r3, r0
 8003564:	2216      	movs	r2, #22
 8003566:	601a      	str	r2, [r3, #0]
  return -1;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_exit>:

void _exit (int status)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ffe7 	bl	8003554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <_exit+0x12>

0800358a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e00a      	b.n	80035b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800359c:	f3af 8000 	nop.w
 80035a0:	4601      	mov	r1, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	60ba      	str	r2, [r7, #8]
 80035a8:	b2ca      	uxtb	r2, r1
 80035aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	dbf0      	blt.n	800359c <_read+0x12>
  }

  return len;
 80035ba:	687b      	ldr	r3, [r7, #4]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e009      	b.n	80035ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	60ba      	str	r2, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f922 	bl	8002828 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3301      	adds	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	dbf1      	blt.n	80035d6 <_write+0x12>
  }
  return len;
 80035f2:	687b      	ldr	r3, [r7, #4]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_close>:

int _close(int file)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003624:	605a      	str	r2, [r3, #4]
  return 0;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_isatty>:

int _isatty(int file)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <_gettimeofday>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int _gettimeofday(struct timeval *tv, void *tzvp) {
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    tv->tv_sec = 0;
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9c1 2300 	strd	r2, r3, [r1]
    tv->tv_usec = 0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
    return 0;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003698:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <_sbrk+0x5c>)
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <_sbrk+0x60>)
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a4:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <_sbrk+0x64>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <_sbrk+0x64>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <_sbrk+0x68>)
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d207      	bcs.n	80036d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c0:	f009 fd90 	bl	800d1e4 <__errno>
 80036c4:	4603      	mov	r3, r0
 80036c6:	220c      	movs	r2, #12
 80036c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295
 80036ce:	e009      	b.n	80036e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d0:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <_sbrk+0x64>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036d6:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	4a05      	ldr	r2, [pc, #20]	@ (80036f4 <_sbrk+0x64>)
 80036e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20020000 	.word	0x20020000
 80036f0:	00000400 	.word	0x00000400
 80036f4:	2000243c 	.word	0x2000243c
 80036f8:	20006f08 	.word	0x20006f08

080036fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <SystemInit+0x20>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	4a05      	ldr	r2, [pc, #20]	@ (800371c <SystemInit+0x20>)
 8003708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800370c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003758 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003724:	f7ff ffea 	bl	80036fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003728:	480c      	ldr	r0, [pc, #48]	@ (800375c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800372a:	490d      	ldr	r1, [pc, #52]	@ (8003760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800372c:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003730:	e002      	b.n	8003738 <LoopCopyDataInit>

08003732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003736:	3304      	adds	r3, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800373c:	d3f9      	bcc.n	8003732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003740:	4c0a      	ldr	r4, [pc, #40]	@ (800376c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003744:	e001      	b.n	800374a <LoopFillZerobss>

08003746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003748:	3204      	adds	r2, #4

0800374a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800374c:	d3fb      	bcc.n	8003746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800374e:	f009 fd4f 	bl	800d1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003752:	f7ff f9e5 	bl	8002b20 <main>
  bx  lr    
 8003756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800375c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003760:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8003764:	080115d4 	.word	0x080115d4
  ldr r2, =_sbss
 8003768:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800376c:	20006f04 	.word	0x20006f04

08003770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003770:	e7fe      	b.n	8003770 <ADC_IRQHandler>
	...

08003774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003778:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <HAL_Init+0x40>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_Init+0x40>)
 800378a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800378e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003790:	4b08      	ldr	r3, [pc, #32]	@ (80037b4 <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <HAL_Init+0x40>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379c:	2003      	movs	r0, #3
 800379e:	f000 f94f 	bl	8003a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a2:	200f      	movs	r0, #15
 80037a4:	f000 f808 	bl	80037b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037a8:	f7ff fcf4 	bl	8003194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00

080037b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c0:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_InitTick+0x54>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <HAL_InitTick+0x58>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f967 	bl	8003aaa <HAL_SYSTICK_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00e      	b.n	8003804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d80a      	bhi.n	8003802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ec:	2200      	movs	r2, #0
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f000 f92f 	bl	8003a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037f8:	4a06      	ldr	r2, [pc, #24]	@ (8003814 <HAL_InitTick+0x5c>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2000000c 	.word	0x2000000c
 8003810:	20000014 	.word	0x20000014
 8003814:	20000010 	.word	0x20000010

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000014 	.word	0x20000014
 800383c:	20002440 	.word	0x20002440

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20002440 	.word	0x20002440

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff ffee 	bl	8003840 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_Delay+0x44>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800387e:	bf00      	nop
 8003880:	f7ff ffde 	bl	8003840 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000014 	.word	0x20000014

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d2:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	@ (800393c <__NVIC_EnableIRQ+0x38>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db0a      	blt.n	800396a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	490c      	ldr	r1, [pc, #48]	@ (800398c <__NVIC_SetPriority+0x4c>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	440b      	add	r3, r1
 8003964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003968:	e00a      	b.n	8003980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	4908      	ldr	r1, [pc, #32]	@ (8003990 <__NVIC_SetPriority+0x50>)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3b04      	subs	r3, #4
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	440b      	add	r3, r1
 800397e:	761a      	strb	r2, [r3, #24]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f1c3 0307 	rsb	r3, r3, #7
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf28      	it	cs
 80039b2:	2304      	movcs	r3, #4
 80039b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3304      	adds	r3, #4
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d902      	bls.n	80039c4 <NVIC_EncodePriority+0x30>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3b03      	subs	r3, #3
 80039c2:	e000      	b.n	80039c6 <NVIC_EncodePriority+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	401a      	ands	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039dc:	f04f 31ff 	mov.w	r1, #4294967295
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43d9      	mvns	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	4313      	orrs	r3, r2
         );
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	@ 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a0c:	d301      	bcc.n	8003a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00f      	b.n	8003a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <SysTick_Config+0x40>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1a:	210f      	movs	r1, #15
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	f7ff ff8e 	bl	8003940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <SysTick_Config+0x40>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2a:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <SysTick_Config+0x40>)
 8003a2c:	2207      	movs	r2, #7
 8003a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff29 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a68:	f7ff ff3e 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff ff8e 	bl	8003994 <NVIC_EncodePriority>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff5d 	bl	8003940 <__NVIC_SetPriority>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff ff31 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ffa2 	bl	80039fc <SysTick_Config>
 8003ab8:	4603      	mov	r3, r0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ad0:	f7ff feb6 	bl	8003840 <HAL_GetTick>
 8003ad4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d008      	beq.n	8003af4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	@ 0x80
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e052      	b.n	8003b9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0216 	bic.w	r2, r2, #22
 8003b02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <HAL_DMA_Abort+0x62>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0208 	bic.w	r2, r2, #8
 8003b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b44:	e013      	b.n	8003b6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b46:	f7ff fe7b 	bl	8003840 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d90c      	bls.n	8003b6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e015      	b.n	8003b9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e4      	bne.n	8003b46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	223f      	movs	r2, #63	@ 0x3f
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e00c      	b.n	8003bda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2205      	movs	r2, #5
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e159      	b.n	8003eb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c04:	2201      	movs	r2, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	f040 8148 	bne.w	8003eb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d005      	beq.n	8003c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d130      	bne.n	8003c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	2203      	movs	r2, #3
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c70:	2201      	movs	r2, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 0201 	and.w	r2, r3, #1
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d017      	beq.n	8003cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d123      	bne.n	8003d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	08da      	lsrs	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3208      	adds	r2, #8
 8003cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	220f      	movs	r2, #15
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	08da      	lsrs	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3208      	adds	r2, #8
 8003d26:	69b9      	ldr	r1, [r7, #24]
 8003d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2203      	movs	r2, #3
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0203 	and.w	r2, r3, #3
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a2 	beq.w	8003eb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	4b57      	ldr	r3, [pc, #348]	@ (8003ed0 <HAL_GPIO_Init+0x2e8>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	4a56      	ldr	r2, [pc, #344]	@ (8003ed0 <HAL_GPIO_Init+0x2e8>)
 8003d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d7e:	4b54      	ldr	r3, [pc, #336]	@ (8003ed0 <HAL_GPIO_Init+0x2e8>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d8a:	4a52      	ldr	r2, [pc, #328]	@ (8003ed4 <HAL_GPIO_Init+0x2ec>)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	220f      	movs	r2, #15
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a49      	ldr	r2, [pc, #292]	@ (8003ed8 <HAL_GPIO_Init+0x2f0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d019      	beq.n	8003dea <HAL_GPIO_Init+0x202>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a48      	ldr	r2, [pc, #288]	@ (8003edc <HAL_GPIO_Init+0x2f4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_GPIO_Init+0x1fe>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a47      	ldr	r2, [pc, #284]	@ (8003ee0 <HAL_GPIO_Init+0x2f8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00d      	beq.n	8003de2 <HAL_GPIO_Init+0x1fa>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a46      	ldr	r2, [pc, #280]	@ (8003ee4 <HAL_GPIO_Init+0x2fc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <HAL_GPIO_Init+0x1f6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a45      	ldr	r2, [pc, #276]	@ (8003ee8 <HAL_GPIO_Init+0x300>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <HAL_GPIO_Init+0x1f2>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e008      	b.n	8003dec <HAL_GPIO_Init+0x204>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e006      	b.n	8003dec <HAL_GPIO_Init+0x204>
 8003dde:	2303      	movs	r3, #3
 8003de0:	e004      	b.n	8003dec <HAL_GPIO_Init+0x204>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e002      	b.n	8003dec <HAL_GPIO_Init+0x204>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_GPIO_Init+0x204>
 8003dea:	2300      	movs	r3, #0
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	f002 0203 	and.w	r2, r2, #3
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	4093      	lsls	r3, r2
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfc:	4935      	ldr	r1, [pc, #212]	@ (8003ed4 <HAL_GPIO_Init+0x2ec>)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	3302      	adds	r3, #2
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e0a:	4b38      	ldr	r3, [pc, #224]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e34:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e58:	4a24      	ldr	r2, [pc, #144]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e5e:	4b23      	ldr	r3, [pc, #140]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e82:	4a1a      	ldr	r2, [pc, #104]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e88:	4b18      	ldr	r3, [pc, #96]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eac:	4a0f      	ldr	r2, [pc, #60]	@ (8003eec <HAL_GPIO_Init+0x304>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	f67f aea2 	bls.w	8003c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3724      	adds	r7, #36	@ 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40013800 	.word	0x40013800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	40020800 	.word	0x40020800
 8003ee4:	40020c00 	.word	0x40020c00
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40013c00 	.word	0x40013c00

08003ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
 8003efc:	4613      	mov	r3, r2
 8003efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f00:	787b      	ldrb	r3, [r7, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f0c:	e003      	b.n	8003f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	041a      	lsls	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	619a      	str	r2, [r3, #24]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e12b      	b.n	800418e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff f94e 	bl	80031ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	@ 0x24
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f88:	f000 fd80 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8003f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4a81      	ldr	r2, [pc, #516]	@ (8004198 <HAL_I2C_Init+0x274>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d807      	bhi.n	8003fa8 <HAL_I2C_Init+0x84>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a80      	ldr	r2, [pc, #512]	@ (800419c <HAL_I2C_Init+0x278>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	bf94      	ite	ls
 8003fa0:	2301      	movls	r3, #1
 8003fa2:	2300      	movhi	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e006      	b.n	8003fb6 <HAL_I2C_Init+0x92>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a7d      	ldr	r2, [pc, #500]	@ (80041a0 <HAL_I2C_Init+0x27c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	bf94      	ite	ls
 8003fb0:	2301      	movls	r3, #1
 8003fb2:	2300      	movhi	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0e7      	b.n	800418e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a78      	ldr	r2, [pc, #480]	@ (80041a4 <HAL_I2C_Init+0x280>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	0c9b      	lsrs	r3, r3, #18
 8003fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4a6a      	ldr	r2, [pc, #424]	@ (8004198 <HAL_I2C_Init+0x274>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d802      	bhi.n	8003ff8 <HAL_I2C_Init+0xd4>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	e009      	b.n	800400c <HAL_I2C_Init+0xe8>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	4a69      	ldr	r2, [pc, #420]	@ (80041a8 <HAL_I2C_Init+0x284>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	3301      	adds	r3, #1
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800401e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	495c      	ldr	r1, [pc, #368]	@ (8004198 <HAL_I2C_Init+0x274>)
 8004028:	428b      	cmp	r3, r1
 800402a:	d819      	bhi.n	8004060 <HAL_I2C_Init+0x13c>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1e59      	subs	r1, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fbb1 f3f3 	udiv	r3, r1, r3
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004040:	400b      	ands	r3, r1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_I2C_Init+0x138>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1e59      	subs	r1, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fbb1 f3f3 	udiv	r3, r1, r3
 8004054:	3301      	adds	r3, #1
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405a:	e051      	b.n	8004100 <HAL_I2C_Init+0x1dc>
 800405c:	2304      	movs	r3, #4
 800405e:	e04f      	b.n	8004100 <HAL_I2C_Init+0x1dc>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d111      	bne.n	800408c <HAL_I2C_Init+0x168>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1e58      	subs	r0, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	440b      	add	r3, r1
 8004076:	fbb0 f3f3 	udiv	r3, r0, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e012      	b.n	80040b2 <HAL_I2C_Init+0x18e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1e58      	subs	r0, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	0099      	lsls	r1, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Init+0x196>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e022      	b.n	8004100 <HAL_I2C_Init+0x1dc>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10e      	bne.n	80040e0 <HAL_I2C_Init+0x1bc>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1e58      	subs	r0, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	440b      	add	r3, r1
 80040d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040de:	e00f      	b.n	8004100 <HAL_I2C_Init+0x1dc>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1e58      	subs	r0, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	0099      	lsls	r1, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	6809      	ldr	r1, [r1, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800412e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6911      	ldr	r1, [r2, #16]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	430b      	orrs	r3, r1
 8004142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	000186a0 	.word	0x000186a0
 800419c:	001e847f 	.word	0x001e847f
 80041a0:	003d08ff 	.word	0x003d08ff
 80041a4:	431bde83 	.word	0x431bde83
 80041a8:	10624dd3 	.word	0x10624dd3

080041ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e267      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d075      	beq.n	80042b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041ca:	4b88      	ldr	r3, [pc, #544]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b85      	ldr	r3, [pc, #532]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d112      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e2:	4b82      	ldr	r3, [pc, #520]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b7e      	ldr	r3, [pc, #504]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05b      	beq.n	80042b4 <HAL_RCC_OscConfig+0x108>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d157      	bne.n	80042b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e242      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x74>
 8004212:	4b76      	ldr	r3, [pc, #472]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a75      	ldr	r2, [pc, #468]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x98>
 800422a:	4b70      	ldr	r3, [pc, #448]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6f      	ldr	r2, [pc, #444]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b6d      	ldr	r3, [pc, #436]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6c      	ldr	r2, [pc, #432]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004244:	4b69      	ldr	r3, [pc, #420]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a68      	ldr	r2, [pc, #416]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b66      	ldr	r3, [pc, #408]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a65      	ldr	r2, [pc, #404]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7ff faec 	bl	8003840 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7ff fae8 	bl	8003840 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	@ 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e207      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b5b      	ldr	r3, [pc, #364]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xc0>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7ff fad8 	bl	8003840 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7ff fad4 	bl	8003840 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	@ 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1f3      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b51      	ldr	r3, [pc, #324]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0xe8>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d063      	beq.n	800438a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042c2:	4b4a      	ldr	r3, [pc, #296]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b47      	ldr	r3, [pc, #284]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042da:	4b44      	ldr	r3, [pc, #272]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b41      	ldr	r3, [pc, #260]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x152>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1c7      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b3b      	ldr	r3, [pc, #236]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4937      	ldr	r1, [pc, #220]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e03a      	b.n	800438a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b34      	ldr	r3, [pc, #208]	@ (80043f0 <HAL_RCC_OscConfig+0x244>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7ff fa8d 	bl	8003840 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432a:	f7ff fa89 	bl	8003840 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e1a8      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	4b2b      	ldr	r3, [pc, #172]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4925      	ldr	r1, [pc, #148]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435e:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_RCC_OscConfig+0x244>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7ff fa6c 	bl	8003840 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436c:	f7ff fa68 	bl	8003840 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e187      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d036      	beq.n	8004404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439e:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <HAL_RCC_OscConfig+0x248>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7ff fa4c 	bl	8003840 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ac:	f7ff fa48 	bl	8003840 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e167      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_RCC_OscConfig+0x240>)
 80043c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x200>
 80043ca:	e01b      	b.n	8004404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <HAL_RCC_OscConfig+0x248>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7ff fa35 	bl	8003840 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	e00e      	b.n	80043f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043da:	f7ff fa31 	bl	8003840 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d907      	bls.n	80043f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e150      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470000 	.word	0x42470000
 80043f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	4b88      	ldr	r3, [pc, #544]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80043fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ea      	bne.n	80043da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8097 	beq.w	8004540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004416:	4b81      	ldr	r3, [pc, #516]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	4b7d      	ldr	r3, [pc, #500]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	4a7c      	ldr	r2, [pc, #496]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	@ 0x40
 8004432:	4b7a      	ldr	r3, [pc, #488]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	4b77      	ldr	r3, [pc, #476]	@ (8004620 <HAL_RCC_OscConfig+0x474>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d118      	bne.n	8004480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444e:	4b74      	ldr	r3, [pc, #464]	@ (8004620 <HAL_RCC_OscConfig+0x474>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a73      	ldr	r2, [pc, #460]	@ (8004620 <HAL_RCC_OscConfig+0x474>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445a:	f7ff f9f1 	bl	8003840 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7ff f9ed 	bl	8003840 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e10c      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	4b6a      	ldr	r3, [pc, #424]	@ (8004620 <HAL_RCC_OscConfig+0x474>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x2ea>
 8004488:	4b64      	ldr	r3, [pc, #400]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448c:	4a63      	ldr	r2, [pc, #396]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6713      	str	r3, [r2, #112]	@ 0x70
 8004494:	e01c      	b.n	80044d0 <HAL_RCC_OscConfig+0x324>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b05      	cmp	r3, #5
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x30c>
 800449e:	4b5f      	ldr	r3, [pc, #380]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a2:	4a5e      	ldr	r2, [pc, #376]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044aa:	4b5c      	ldr	r3, [pc, #368]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	4a5b      	ldr	r2, [pc, #364]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0x324>
 80044b8:	4b58      	ldr	r3, [pc, #352]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	4a57      	ldr	r2, [pc, #348]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c4:	4b55      	ldr	r3, [pc, #340]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c8:	4a54      	ldr	r2, [pc, #336]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 0304 	bic.w	r3, r3, #4
 80044ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7ff f9b2 	bl	8003840 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7ff f9ae 	bl	8003840 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0cb      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	4b49      	ldr	r3, [pc, #292]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ee      	beq.n	80044e0 <HAL_RCC_OscConfig+0x334>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7ff f99c 	bl	8003840 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7ff f998 	bl	8003840 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0b5      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	4b3e      	ldr	r3, [pc, #248]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ee      	bne.n	800450c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d105      	bne.n	8004540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004534:	4b39      	ldr	r3, [pc, #228]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	4a38      	ldr	r2, [pc, #224]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 800453a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800453e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80a1 	beq.w	800468c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800454a:	4b34      	ldr	r3, [pc, #208]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b08      	cmp	r3, #8
 8004554:	d05c      	beq.n	8004610 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d141      	bne.n	80045e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b31      	ldr	r3, [pc, #196]	@ (8004624 <HAL_RCC_OscConfig+0x478>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7ff f96c 	bl	8003840 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456c:	f7ff f968 	bl	8003840 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e087      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	4b27      	ldr	r3, [pc, #156]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	3b01      	subs	r3, #1
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	491b      	ldr	r1, [pc, #108]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCC_OscConfig+0x478>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7ff f941 	bl	8003840 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7ff f93d 	bl	8003840 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e05c      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x416>
 80045e0:	e054      	b.n	800468c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <HAL_RCC_OscConfig+0x478>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7ff f92a 	bl	8003840 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7ff f926 	bl	8003840 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e045      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_RCC_OscConfig+0x470>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x444>
 800460e:	e03d      	b.n	800468c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d107      	bne.n	8004628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e038      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000
 8004624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004628:	4b1b      	ldr	r3, [pc, #108]	@ (8004698 <HAL_RCC_OscConfig+0x4ec>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d028      	beq.n	8004688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d121      	bne.n	8004688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d11a      	bne.n	8004688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800465e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004660:	4293      	cmp	r3, r2
 8004662:	d111      	bne.n	8004688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	3b01      	subs	r3, #1
 8004672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d107      	bne.n	8004688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800

0800469c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0cc      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b0:	4b68      	ldr	r3, [pc, #416]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d90c      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b65      	ldr	r3, [pc, #404]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f0:	4b59      	ldr	r3, [pc, #356]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a58      	ldr	r2, [pc, #352]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a52      	ldr	r2, [pc, #328]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b50      	ldr	r3, [pc, #320]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d044      	beq.n	80047bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d119      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d003      	beq.n	800475a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004756:	2b03      	cmp	r3, #3
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	4b3f      	ldr	r3, [pc, #252]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e067      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4b37      	ldr	r3, [pc, #220]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f023 0203 	bic.w	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4934      	ldr	r1, [pc, #208]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800478c:	f7ff f858 	bl	8003840 <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004792:	e00a      	b.n	80047aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7ff f854 	bl	8003840 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e04f      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 020c 	and.w	r2, r3, #12
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d1eb      	bne.n	8004794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d20c      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b22      	ldr	r3, [pc, #136]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004822:	f000 f821 	bl	8004868 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	@ (800485c <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	@ (8004860 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe ffb8 	bl	80037b8 <HAL_InitTick>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023c00 	.word	0x40023c00
 8004858:	40023800 	.word	0x40023800
 800485c:	08010ef8 	.word	0x08010ef8
 8004860:	2000000c 	.word	0x2000000c
 8004864:	20000010 	.word	0x20000010

08004868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b094      	sub	sp, #80	@ 0x50
 800486e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004880:	4b79      	ldr	r3, [pc, #484]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d00d      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x40>
 800488c:	2b08      	cmp	r3, #8
 800488e:	f200 80e1 	bhi.w	8004a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x34>
 8004896:	2b04      	cmp	r3, #4
 8004898:	d003      	beq.n	80048a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800489a:	e0db      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800489c:	4b73      	ldr	r3, [pc, #460]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a0:	e0db      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048a2:	4b73      	ldr	r3, [pc, #460]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80048a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a6:	e0d8      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d063      	beq.n	8004986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048be:	4b6a      	ldr	r3, [pc, #424]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	2200      	movs	r2, #0
 80048c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048da:	4622      	mov	r2, r4
 80048dc:	462b      	mov	r3, r5
 80048de:	f04f 0000 	mov.w	r0, #0
 80048e2:	f04f 0100 	mov.w	r1, #0
 80048e6:	0159      	lsls	r1, r3, #5
 80048e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ec:	0150      	lsls	r0, r2, #5
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4621      	mov	r1, r4
 80048f4:	1a51      	subs	r1, r2, r1
 80048f6:	6139      	str	r1, [r7, #16]
 80048f8:	4629      	mov	r1, r5
 80048fa:	eb63 0301 	sbc.w	r3, r3, r1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800490c:	4659      	mov	r1, fp
 800490e:	018b      	lsls	r3, r1, #6
 8004910:	4651      	mov	r1, sl
 8004912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004916:	4651      	mov	r1, sl
 8004918:	018a      	lsls	r2, r1, #6
 800491a:	4651      	mov	r1, sl
 800491c:	ebb2 0801 	subs.w	r8, r2, r1
 8004920:	4659      	mov	r1, fp
 8004922:	eb63 0901 	sbc.w	r9, r3, r1
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800493a:	4690      	mov	r8, r2
 800493c:	4699      	mov	r9, r3
 800493e:	4623      	mov	r3, r4
 8004940:	eb18 0303 	adds.w	r3, r8, r3
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	462b      	mov	r3, r5
 8004948:	eb49 0303 	adc.w	r3, r9, r3
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800495a:	4629      	mov	r1, r5
 800495c:	024b      	lsls	r3, r1, #9
 800495e:	4621      	mov	r1, r4
 8004960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004964:	4621      	mov	r1, r4
 8004966:	024a      	lsls	r2, r1, #9
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496e:	2200      	movs	r2, #0
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004978:	f7fc f9ee 	bl	8000d58 <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4613      	mov	r3, r2
 8004982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004984:	e058      	b.n	8004a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004986:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	2200      	movs	r2, #0
 800498e:	4618      	mov	r0, r3
 8004990:	4611      	mov	r1, r2
 8004992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
 800499c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	f04f 0100 	mov.w	r1, #0
 80049ac:	0159      	lsls	r1, r3, #5
 80049ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b2:	0150      	lsls	r0, r2, #5
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4641      	mov	r1, r8
 80049ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80049be:	4649      	mov	r1, r9
 80049c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049d8:	ebb2 040a 	subs.w	r4, r2, sl
 80049dc:	eb63 050b 	sbc.w	r5, r3, fp
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	00eb      	lsls	r3, r5, #3
 80049ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ee:	00e2      	lsls	r2, r4, #3
 80049f0:	4614      	mov	r4, r2
 80049f2:	461d      	mov	r5, r3
 80049f4:	4643      	mov	r3, r8
 80049f6:	18e3      	adds	r3, r4, r3
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	464b      	mov	r3, r9
 80049fc:	eb45 0303 	adc.w	r3, r5, r3
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a0e:	4629      	mov	r1, r5
 8004a10:	028b      	lsls	r3, r1, #10
 8004a12:	4621      	mov	r1, r4
 8004a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a18:	4621      	mov	r1, r4
 8004a1a:	028a      	lsls	r2, r1, #10
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a22:	2200      	movs	r2, #0
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	61fa      	str	r2, [r7, #28]
 8004a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a2c:	f7fc f994 	bl	8000d58 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4613      	mov	r3, r2
 8004a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a38:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	3301      	adds	r3, #1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3750      	adds	r7, #80	@ 0x50
 8004a60:	46bd      	mov	sp, r7
 8004a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	00f42400 	.word	0x00f42400
 8004a70:	007a1200 	.word	0x007a1200

08004a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a78:	4b03      	ldr	r3, [pc, #12]	@ (8004a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	2000000c 	.word	0x2000000c

08004a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a90:	f7ff fff0 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	0a9b      	lsrs	r3, r3, #10
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4903      	ldr	r1, [pc, #12]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	08010f08 	.word	0x08010f08

08004ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab8:	f7ff ffdc 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	0b5b      	lsrs	r3, r3, #13
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4903      	ldr	r1, [pc, #12]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	08010f08 	.word	0x08010f08

08004adc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d038      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b04:	4b68      	ldr	r3, [pc, #416]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0a:	f7fe fe99 	bl	8003840 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b12:	f7fe fe95 	bl	8003840 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e0bd      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b24:	4b61      	ldr	r3, [pc, #388]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f0      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	019b      	lsls	r3, r3, #6
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	071b      	lsls	r3, r3, #28
 8004b42:	495a      	ldr	r1, [pc, #360]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b50:	f7fe fe76 	bl	8003840 <HAL_GetTick>
 8004b54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b58:	f7fe fe72 	bl	8003840 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e09a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b6a:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8083 	beq.w	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8c:	4a47      	ldr	r2, [pc, #284]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b94:	4b45      	ldr	r3, [pc, #276]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ba0:	4b43      	ldr	r3, [pc, #268]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a42      	ldr	r2, [pc, #264]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bac:	f7fe fe48 	bl	8003840 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb4:	f7fe fe44 	bl	8003840 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e06c      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bd2:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bda:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d02f      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d028      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c00:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c06:	4a29      	ldr	r2, [pc, #164]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c0c:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d114      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe fe12 	bl	8003840 <HAL_GetTick>
 8004c1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fe fe0e 	bl	8003840 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e034      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c36:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0ee      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004c50:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c64:	4911      	ldr	r1, [pc, #68]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
 8004c6a:	e005      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a0e      	ldr	r2, [pc, #56]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c76:	6093      	str	r3, [r2, #8]
 8004c78:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c84:	4909      	ldr	r1, [pc, #36]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7d1a      	ldrb	r2, [r3, #20]
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c9c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	42470068 	.word	0x42470068
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42470e40 	.word	0x42470e40
 8004cb8:	424711e0 	.word	0x424711e0

08004cbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e073      	b.n	8004db6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7f5b      	ldrb	r3, [r3, #29]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe facc 	bl	800327c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d055      	beq.n	8004da4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	22ca      	movs	r2, #202	@ 0xca
 8004cfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2253      	movs	r2, #83	@ 0x53
 8004d06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fb31 	bl	8005370 <RTC_EnterInitMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d12c      	bne.n	8004d72 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68d2      	ldr	r2, [r2, #12]
 8004d52:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6919      	ldr	r1, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	041a      	lsls	r2, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fb38 	bl	80053de <RTC_ExitInitMode>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d110      	bne.n	8004d9a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	22ff      	movs	r2, #255	@ 0xff
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24
 8004da2:	e001      	b.n	8004da8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004dbe:	b590      	push	{r4, r7, lr}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	7f1b      	ldrb	r3, [r3, #28]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_RTC_SetTime+0x1c>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e087      	b.n	8004eea <HAL_RTC_SetTime+0x12c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2202      	movs	r2, #2
 8004de4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d126      	bne.n	8004e3a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fb0f 	bl	8005428 <RTC_ByteToBcd2>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fb08 	bl	8005428 <RTC_ByteToBcd2>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e1c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	789b      	ldrb	r3, [r3, #2]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fb00 	bl	8005428 <RTC_ByteToBcd2>
 8004e28:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e2a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e018      	b.n	8004e6c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e5a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e60:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	78db      	ldrb	r3, [r3, #3]
 8004e66:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	22ca      	movs	r2, #202	@ 0xca
 8004e72:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2253      	movs	r2, #83	@ 0x53
 8004e7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fa77 	bl	8005370 <RTC_EnterInitMode>
 8004e82:	4603      	mov	r3, r0
 8004e84:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d120      	bne.n	8004ece <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004e96:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004eaa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fa8a 	bl	80053de <RTC_ExitInitMode>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	22ff      	movs	r2, #255	@ 0xff
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]

  return status;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}

08004ef2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ef2:	b590      	push	{r4, r7, lr}
 8004ef4:	b087      	sub	sp, #28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	7f1b      	ldrb	r3, [r3, #28]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_RTC_SetDate+0x1c>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e071      	b.n	8004ff2 <HAL_RTC_SetDate+0x100>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2202      	movs	r2, #2
 8004f18:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10e      	bne.n	8004f3e <HAL_RTC_SetDate+0x4c>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	f023 0310 	bic.w	r3, r3, #16
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	330a      	adds	r3, #10
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11c      	bne.n	8004f7e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	78db      	ldrb	r3, [r3, #3]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fa6d 	bl	8005428 <RTC_ByteToBcd2>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa66 	bl	8005428 <RTC_ByteToBcd2>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	789b      	ldrb	r3, [r3, #2]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fa5e 	bl	8005428 <RTC_ByteToBcd2>
 8004f6c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f6e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e00e      	b.n	8004f9c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	78db      	ldrb	r3, [r3, #3]
 8004f82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f8a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004f90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	22ca      	movs	r2, #202	@ 0xca
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2253      	movs	r2, #83	@ 0x53
 8004faa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f9df 	bl	8005370 <RTC_EnterInitMode>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fb6:	7cfb      	ldrb	r3, [r7, #19]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fc6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fca:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fa06 	bl	80053de <RTC_ExitInitMode>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004fd6:	7cfb      	ldrb	r3, [r7, #19]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	22ff      	movs	r2, #255	@ 0xff
 8004fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]

  return status;
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}
	...

08004ffc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b089      	sub	sp, #36	@ 0x24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005008:	4b9b      	ldr	r3, [pc, #620]	@ (8005278 <HAL_RTC_SetAlarm_IT+0x27c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a9b      	ldr	r2, [pc, #620]	@ (800527c <HAL_RTC_SetAlarm_IT+0x280>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	0adb      	lsrs	r3, r3, #11
 8005014:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	7f1b      	ldrb	r3, [r3, #28]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_RTC_SetAlarm_IT+0x36>
 800502e:	2302      	movs	r3, #2
 8005030:	e11e      	b.n	8005270 <HAL_RTC_SetAlarm_IT+0x274>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2202      	movs	r2, #2
 800503c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d137      	bne.n	80050b4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2200      	movs	r2, #0
 8005056:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f9e3 	bl	8005428 <RTC_ByteToBcd2>
 8005062:	4603      	mov	r3, r0
 8005064:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f9dc 	bl	8005428 <RTC_ByteToBcd2>
 8005070:	4603      	mov	r3, r0
 8005072:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005074:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	789b      	ldrb	r3, [r3, #2]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f9d4 	bl	8005428 <RTC_ByteToBcd2>
 8005080:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005082:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	78db      	ldrb	r3, [r3, #3]
 800508a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800508c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f9c6 	bl	8005428 <RTC_ByteToBcd2>
 800509c:	4603      	mov	r3, r0
 800509e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80050a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80050a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	e023      	b.n	80050fc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80050d4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80050da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	78db      	ldrb	r3, [r3, #3]
 80050e0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80050e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80050ec:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80050f2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	22ca      	movs	r2, #202	@ 0xca
 800510e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2253      	movs	r2, #83	@ 0x53
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005120:	d142      	bne.n	80051a8 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005130:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005142:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3b01      	subs	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	22ff      	movs	r2, #255	@ 0xff
 8005156:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2203      	movs	r2, #3
 800515c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e083      	b.n	8005270 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0e6      	beq.n	8005144 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005194:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	e04c      	b.n	8005242 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051b6:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80051c8:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80051ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005278 <HAL_RTC_SetAlarm_IT+0x27c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2b      	ldr	r2, [pc, #172]	@ (800527c <HAL_RTC_SetAlarm_IT+0x280>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	0adb      	lsrs	r3, r3, #11
 80051d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	22ff      	movs	r2, #255	@ 0xff
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2203      	movs	r2, #3
 80051f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e035      	b.n	8005270 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0e6      	beq.n	80051e0 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005230:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005242:	4b0f      	ldr	r3, [pc, #60]	@ (8005280 <HAL_RTC_SetAlarm_IT+0x284>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a0e      	ldr	r2, [pc, #56]	@ (8005280 <HAL_RTC_SetAlarm_IT+0x284>)
 8005248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800524e:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <HAL_RTC_SetAlarm_IT+0x284>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4a0b      	ldr	r2, [pc, #44]	@ (8005280 <HAL_RTC_SetAlarm_IT+0x284>)
 8005254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005258:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	22ff      	movs	r2, #255	@ 0xff
 8005260:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3724      	adds	r7, #36	@ 0x24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	2000000c 	.word	0x2000000c
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	40013c00 	.word	0x40013c00

08005284 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800528c:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <HAL_RTC_AlarmIRQHandler+0x88>)
 800528e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005292:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d012      	beq.n	80052c8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80052c0:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f824 	bl	8005310 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d012      	beq.n	80052fc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80052f4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8b4 	bl	8005464 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	775a      	strb	r2, [r3, #29]
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40013c00 	.word	0x40013c00

08005310 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0d      	ldr	r2, [pc, #52]	@ (800536c <HAL_RTC_WaitForSynchro+0x48>)
 8005336:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005338:	f7fe fa82 	bl	8003840 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800533e:	e009      	b.n	8005354 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005340:	f7fe fa7e 	bl	8003840 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800534e:	d901      	bls.n	8005354 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e007      	b.n	8005364 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ee      	beq.n	8005340 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00013f5f 	.word	0x00013f5f

08005370 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d122      	bne.n	80053d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800539c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800539e:	f7fe fa4f 	bl	8003840 <HAL_GetTick>
 80053a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053a4:	e00c      	b.n	80053c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053a6:	f7fe fa4b 	bl	8003840 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053b4:	d904      	bls.n	80053c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <RTC_EnterInitMode+0x64>
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d1e8      	bne.n	80053a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff8b 	bl	8005324 <HAL_RTC_WaitForSynchro>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2204      	movs	r2, #4
 8005418:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005436:	e005      	b.n	8005444 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	3b0a      	subs	r3, #10
 8005442:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	2b09      	cmp	r3, #9
 8005448:	d8f6      	bhi.n	8005438 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	b2da      	uxtb	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	4313      	orrs	r3, r2
 8005456:	b2db      	uxtb	r3, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e041      	b.n	800550e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fd ff20 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f000 fac0 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e041      	b.n	80055ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f839 	bl	80055b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f000 fa71 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_TIM_PWM_Start+0x24>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	e022      	b.n	8005632 <HAL_TIM_PWM_Start+0x6a>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d109      	bne.n	8005606 <HAL_TIM_PWM_Start+0x3e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e015      	b.n	8005632 <HAL_TIM_PWM_Start+0x6a>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d109      	bne.n	8005620 <HAL_TIM_PWM_Start+0x58>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e008      	b.n	8005632 <HAL_TIM_PWM_Start+0x6a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e068      	b.n	800570c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <HAL_TIM_PWM_Start+0x82>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005648:	e013      	b.n	8005672 <HAL_TIM_PWM_Start+0xaa>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b04      	cmp	r3, #4
 800564e:	d104      	bne.n	800565a <HAL_TIM_PWM_Start+0x92>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005658:	e00b      	b.n	8005672 <HAL_TIM_PWM_Start+0xaa>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0xa2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005668:	e003      	b.n	8005672 <HAL_TIM_PWM_Start+0xaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fc8a 	bl	8005f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a23      	ldr	r2, [pc, #140]	@ (8005714 <HAL_TIM_PWM_Start+0x14c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d107      	bne.n	800569a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1d      	ldr	r2, [pc, #116]	@ (8005714 <HAL_TIM_PWM_Start+0x14c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d018      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x10e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ac:	d013      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x10e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <HAL_TIM_PWM_Start+0x150>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00e      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x10e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a17      	ldr	r2, [pc, #92]	@ (800571c <HAL_TIM_PWM_Start+0x154>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d009      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x10e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a16      	ldr	r2, [pc, #88]	@ (8005720 <HAL_TIM_PWM_Start+0x158>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_TIM_PWM_Start+0x10e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a14      	ldr	r2, [pc, #80]	@ (8005724 <HAL_TIM_PWM_Start+0x15c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d111      	bne.n	80056fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d010      	beq.n	800570a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f8:	e007      	b.n	800570a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0201 	orr.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40010000 	.word	0x40010000
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40014000 	.word	0x40014000

08005728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005742:	2302      	movs	r3, #2
 8005744:	e0ae      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	f200 809f 	bhi.w	8005894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005756:	a201      	add	r2, pc, #4	@ (adr r2, 800575c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005791 	.word	0x08005791
 8005760:	08005895 	.word	0x08005895
 8005764:	08005895 	.word	0x08005895
 8005768:	08005895 	.word	0x08005895
 800576c:	080057d1 	.word	0x080057d1
 8005770:	08005895 	.word	0x08005895
 8005774:	08005895 	.word	0x08005895
 8005778:	08005895 	.word	0x08005895
 800577c:	08005813 	.word	0x08005813
 8005780:	08005895 	.word	0x08005895
 8005784:	08005895 	.word	0x08005895
 8005788:	08005895 	.word	0x08005895
 800578c:	08005853 	.word	0x08005853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f9d6 	bl	8005b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0208 	orr.w	r2, r2, #8
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
      break;
 80057ce:	e064      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fa1c 	bl	8005c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6999      	ldr	r1, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
      break;
 8005810:	e043      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fa67 	bl	8005cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0208 	orr.w	r2, r2, #8
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0204 	bic.w	r2, r2, #4
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	61da      	str	r2, [r3, #28]
      break;
 8005850:	e023      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fab1 	bl	8005dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69d9      	ldr	r1, [r3, #28]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	61da      	str	r2, [r3, #28]
      break;
 8005892:	e002      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
      break;
 8005898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0b4      	b.n	8005a32 <HAL_TIM_ConfigClockSource+0x186>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005900:	d03e      	beq.n	8005980 <HAL_TIM_ConfigClockSource+0xd4>
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005906:	f200 8087 	bhi.w	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590e:	f000 8086 	beq.w	8005a1e <HAL_TIM_ConfigClockSource+0x172>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005916:	d87f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b70      	cmp	r3, #112	@ 0x70
 800591a:	d01a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0xa6>
 800591c:	2b70      	cmp	r3, #112	@ 0x70
 800591e:	d87b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b60      	cmp	r3, #96	@ 0x60
 8005922:	d050      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005924:	2b60      	cmp	r3, #96	@ 0x60
 8005926:	d877      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b50      	cmp	r3, #80	@ 0x50
 800592a:	d03c      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0xfa>
 800592c:	2b50      	cmp	r3, #80	@ 0x50
 800592e:	d873      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b40      	cmp	r3, #64	@ 0x40
 8005932:	d058      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d86f      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b30      	cmp	r3, #48	@ 0x30
 800593a:	d064      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 800593c:	2b30      	cmp	r3, #48	@ 0x30
 800593e:	d86b      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d060      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d867      	bhi.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d05c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	2b10      	cmp	r3, #16
 800594e:	d05a      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x15a>
 8005950:	e062      	b.n	8005a18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005962:	f000 faf7 	bl	8005f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	609a      	str	r2, [r3, #8]
      break;
 800597e:	e04f      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005990:	f000 fae0 	bl	8005f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059a2:	609a      	str	r2, [r3, #8]
      break;
 80059a4:	e03c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b2:	461a      	mov	r2, r3
 80059b4:	f000 fa54 	bl	8005e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2150      	movs	r1, #80	@ 0x50
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 faad 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 80059c4:	e02c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d2:	461a      	mov	r2, r3
 80059d4:	f000 fa73 	bl	8005ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2160      	movs	r1, #96	@ 0x60
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fa9d 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 80059e4:	e01c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f2:	461a      	mov	r2, r3
 80059f4:	f000 fa34 	bl	8005e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2140      	movs	r1, #64	@ 0x40
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa8d 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 8005a04:	e00c      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f000 fa84 	bl	8005f1e <TIM_ITRx_SetConfig>
      break;
 8005a16:	e003      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e000      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a37      	ldr	r2, [pc, #220]	@ (8005b2c <TIM_Base_SetConfig+0xf0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00f      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a34      	ldr	r2, [pc, #208]	@ (8005b30 <TIM_Base_SetConfig+0xf4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a33      	ldr	r2, [pc, #204]	@ (8005b34 <TIM_Base_SetConfig+0xf8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a32      	ldr	r2, [pc, #200]	@ (8005b38 <TIM_Base_SetConfig+0xfc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a28      	ldr	r2, [pc, #160]	@ (8005b2c <TIM_Base_SetConfig+0xf0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01b      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a94:	d017      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a25      	ldr	r2, [pc, #148]	@ (8005b30 <TIM_Base_SetConfig+0xf4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <TIM_Base_SetConfig+0xf8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00f      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a23      	ldr	r2, [pc, #140]	@ (8005b38 <TIM_Base_SetConfig+0xfc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00b      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a22      	ldr	r2, [pc, #136]	@ (8005b3c <TIM_Base_SetConfig+0x100>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a21      	ldr	r2, [pc, #132]	@ (8005b40 <TIM_Base_SetConfig+0x104>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a20      	ldr	r2, [pc, #128]	@ (8005b44 <TIM_Base_SetConfig+0x108>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d108      	bne.n	8005ad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a0c      	ldr	r2, [pc, #48]	@ (8005b2c <TIM_Base_SetConfig+0xf0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d103      	bne.n	8005b06 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	601a      	str	r2, [r3, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800

08005b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f023 0201 	bic.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0302 	bic.w	r3, r3, #2
 8005b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <TIM_OC1_SetConfig+0xc8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10c      	bne.n	8005bbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0308 	bic.w	r3, r3, #8
 8005baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 0304 	bic.w	r3, r3, #4
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a13      	ldr	r2, [pc, #76]	@ (8005c10 <TIM_OC1_SetConfig+0xc8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d111      	bne.n	8005bea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40010000 	.word	0x40010000

08005c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f023 0210 	bic.w	r2, r3, #16
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0320 	bic.w	r3, r3, #32
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <TIM_OC2_SetConfig+0xd4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d10d      	bne.n	8005c90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <TIM_OC2_SetConfig+0xd4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d113      	bne.n	8005cc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000

08005cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1d      	ldr	r2, [pc, #116]	@ (8005dbc <TIM_OC3_SetConfig+0xd0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10d      	bne.n	8005d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a14      	ldr	r2, [pc, #80]	@ (8005dbc <TIM_OC3_SetConfig+0xd0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d113      	bne.n	8005d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	621a      	str	r2, [r3, #32]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40010000 	.word	0x40010000

08005dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	031b      	lsls	r3, r3, #12
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a10      	ldr	r2, [pc, #64]	@ (8005e5c <TIM_OC4_SetConfig+0x9c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d109      	bne.n	8005e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	019b      	lsls	r3, r3, #6
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40010000 	.word	0x40010000

08005e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f023 030a 	bic.w	r3, r3, #10
 8005e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b087      	sub	sp, #28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f023 0210 	bic.w	r2, r3, #16
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	031b      	lsls	r3, r3, #12
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005efa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f043 0307 	orr.w	r3, r3, #7
 8005f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	021a      	lsls	r2, r3, #8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1a      	ldr	r2, [r3, #32]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a1a      	ldr	r2, [r3, #32]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e050      	b.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1c      	ldr	r2, [pc, #112]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d013      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a18      	ldr	r2, [pc, #96]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a16      	ldr	r2, [pc, #88]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a13      	ldr	r2, [pc, #76]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10c      	bne.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	4313      	orrs	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40014000 	.word	0x40014000

080060bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e03d      	b.n	8006154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e042      	b.n	80061f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fd f908 	bl	800339c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2224      	movs	r2, #36	@ 0x24
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fdd3 	bl	8006d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	@ 0x28
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b20      	cmp	r3, #32
 800621e:	d175      	bne.n	800630c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_UART_Transmit+0x2c>
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e06e      	b.n	800630e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2221      	movs	r2, #33	@ 0x21
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800623e:	f7fd faff 	bl	8003840 <HAL_GetTick>
 8006242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006258:	d108      	bne.n	800626c <HAL_UART_Transmit+0x6c>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e003      	b.n	8006274 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006274:	e02e      	b.n	80062d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	@ 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fb37 	bl	80068f4 <UART_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e03a      	b.n	800630e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	3302      	adds	r3, #2
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e007      	b.n	80062c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	3301      	adds	r3, #1
 80062c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1cb      	bne.n	8006276 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2140      	movs	r1, #64	@ 0x40
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fb03 	bl	80068f4 <UART_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e006      	b.n	800630e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e000      	b.n	800630e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	4613      	mov	r3, r2
 8006322:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b20      	cmp	r3, #32
 800632e:	d112      	bne.n	8006356 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_UART_Receive_IT+0x26>
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e00b      	b.n	8006358 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	461a      	mov	r2, r3
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fb2a 	bl	80069a6 <UART_Start_Receive_IT>
 8006352:	4603      	mov	r3, r0
 8006354:	e000      	b.n	8006358 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b0ba      	sub	sp, #232	@ 0xe8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006386:	2300      	movs	r3, #0
 8006388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800638c:	2300      	movs	r3, #0
 800638e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800639e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10f      	bne.n	80063c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_UART_IRQHandler+0x66>
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fc07 	bl	8006bd2 <UART_Receive_IT>
      return;
 80063c4:	e273      	b.n	80068ae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80de 	beq.w	800658c <HAL_UART_IRQHandler+0x22c>
 80063d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80d1 	beq.w	800658c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <HAL_UART_IRQHandler+0xae>
 80063f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d005      	beq.n	800640e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006406:	f043 0201 	orr.w	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800640e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <HAL_UART_IRQHandler+0xd2>
 800641a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642a:	f043 0202 	orr.w	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <HAL_UART_IRQHandler+0xf6>
 800643e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f043 0204 	orr.w	r2, r3, #4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d011      	beq.n	8006486 <HAL_UART_IRQHandler+0x126>
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	f043 0208 	orr.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 820a 	beq.w	80068a4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x14e>
 800649c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb92 	bl	8006bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b8:	2b40      	cmp	r3, #64	@ 0x40
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <HAL_UART_IRQHandler+0x17a>
 80064d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d04f      	beq.n	800657a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa9d 	bl	8006a1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b40      	cmp	r3, #64	@ 0x40
 80064ec:	d141      	bne.n	8006572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800650c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800651a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800651e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1d9      	bne.n	80064ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d013      	beq.n	800656a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006546:	4a8a      	ldr	r2, [pc, #552]	@ (8006770 <HAL_UART_IRQHandler+0x410>)
 8006548:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fb27 	bl	8003ba2 <HAL_DMA_Abort_IT>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	e00e      	b.n	8006588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9ac 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	e00a      	b.n	8006588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f9a8 	bl	80068c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	e006      	b.n	8006588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9a4 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006586:	e18d      	b.n	80068a4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	bf00      	nop
    return;
 800658a:	e18b      	b.n	80068a4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	2b01      	cmp	r3, #1
 8006592:	f040 8167 	bne.w	8006864 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8160 	beq.w	8006864 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8159 	beq.w	8006864 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b40      	cmp	r3, #64	@ 0x40
 80065d4:	f040 80ce 	bne.w	8006774 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80a9 	beq.w	8006740 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065f6:	429a      	cmp	r2, r3
 80065f8:	f080 80a2 	bcs.w	8006740 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006602:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	f000 8088 	beq.w	8006722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800663e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800664a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1d9      	bne.n	8006612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800666e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006682:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006686:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800668a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e1      	bne.n	800665e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e3      	bne.n	800669a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330c      	adds	r3, #12
 8006700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006704:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006706:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800670a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e3      	bne.n	80066e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671c:	4618      	mov	r0, r3
 800671e:	f7fd f9d0 	bl	8003ac2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2202      	movs	r2, #2
 8006726:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006730:	b29b      	uxth	r3, r3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b29b      	uxth	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f8cf 	bl	80068dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800673e:	e0b3      	b.n	80068a8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006744:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006748:	429a      	cmp	r2, r3
 800674a:	f040 80ad 	bne.w	80068a8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006758:	f040 80a6 	bne.w	80068a8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8b7 	bl	80068dc <HAL_UARTEx_RxEventCallback>
      return;
 800676e:	e09b      	b.n	80068a8 <HAL_UART_IRQHandler+0x548>
 8006770:	08006ae1 	.word	0x08006ae1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800677c:	b29b      	uxth	r3, r3
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 808e 	beq.w	80068ac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8089 	beq.w	80068ac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067be:	647a      	str	r2, [r7, #68]	@ 0x44
 80067c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e3      	bne.n	800679a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	623b      	str	r3, [r7, #32]
   return(result);
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80067f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e3      	bne.n	80067d2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60fb      	str	r3, [r7, #12]
   return(result);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800683c:	61fa      	str	r2, [r7, #28]
 800683e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	69b9      	ldr	r1, [r7, #24]
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	617b      	str	r3, [r7, #20]
   return(result);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e3      	bne.n	8006818 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f83d 	bl	80068dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006862:	e023      	b.n	80068ac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <HAL_UART_IRQHandler+0x524>
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f940 	bl	8006b02 <UART_Transmit_IT>
    return;
 8006882:	e014      	b.n	80068ae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00e      	beq.n	80068ae <HAL_UART_IRQHandler+0x54e>
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f980 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 80068a2:	e004      	b.n	80068ae <HAL_UART_IRQHandler+0x54e>
    return;
 80068a4:	bf00      	nop
 80068a6:	e002      	b.n	80068ae <HAL_UART_IRQHandler+0x54e>
      return;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <HAL_UART_IRQHandler+0x54e>
      return;
 80068ac:	bf00      	nop
  }
}
 80068ae:	37e8      	adds	r7, #232	@ 0xe8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006904:	e03b      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d037      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fc ff97 	bl	8003840 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <UART_WaitOnFlagUntilTimeout+0x30>
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e03a      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d023      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b80      	cmp	r3, #128	@ 0x80
 800693a:	d020      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x8a>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b40      	cmp	r3, #64	@ 0x40
 8006940:	d01d      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b08      	cmp	r3, #8
 800694e:	d116      	bne.n	800697e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f857 	bl	8006a1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2208      	movs	r2, #8
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e00f      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	429a      	cmp	r2, r3
 800699a:	d0b4      	beq.n	8006906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	4613      	mov	r3, r2
 80069b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2222      	movs	r2, #34	@ 0x22
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0220 	orr.w	r2, r2, #32
 8006a0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b095      	sub	sp, #84	@ 0x54
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a42:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d119      	bne.n	8006ac6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 0310 	bic.w	r3, r3, #16
 8006aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab2:	61ba      	str	r2, [r7, #24]
 8006ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e5      	bne.n	8006a92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ad4:	bf00      	nop
 8006ad6:	3754      	adds	r7, #84	@ 0x54
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fee7 	bl	80068c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	@ 0x21
 8006b14:	d13e      	bne.n	8006b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b1e:	d114      	bne.n	8006b4a <UART_Transmit_IT+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e008      	b.n	8006b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6211      	str	r1, [r2, #32]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fe76 	bl	80068b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	@ 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b22      	cmp	r3, #34	@ 0x22
 8006bec:	f040 80aa 	bne.w	8006d44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf8:	d115      	bne.n	8006c26 <UART_Receive_IT+0x54>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d111      	bne.n	8006c26 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c24:	e024      	b.n	8006c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c34:	d007      	beq.n	8006c46 <UART_Receive_IT+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d15d      	bne.n	8006d40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0220 	bic.w	r2, r2, #32
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d135      	bne.n	8006d36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf0:	623a      	str	r2, [r7, #32]
 8006cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	69f9      	ldr	r1, [r7, #28]
 8006cf6:	6a3a      	ldr	r2, [r7, #32]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d10a      	bne.n	8006d28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fdd4 	bl	80068dc <HAL_UARTEx_RxEventCallback>
 8006d34:	e002      	b.n	8006d3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fb fce6 	bl	8002708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e002      	b.n	8006d46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e000      	b.n	8006d46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d44:	2302      	movs	r3, #2
  }
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	@ 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d54:	b0c0      	sub	sp, #256	@ 0x100
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6c:	68d9      	ldr	r1, [r3, #12]
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	ea40 0301 	orr.w	r3, r0, r1
 8006d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006da8:	f021 010c 	bic.w	r1, r1, #12
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006db6:	430b      	orrs	r3, r1
 8006db8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dca:	6999      	ldr	r1, [r3, #24]
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	ea40 0301 	orr.w	r3, r0, r1
 8006dd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b8f      	ldr	r3, [pc, #572]	@ (800701c <UART_SetConfig+0x2cc>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d005      	beq.n	8006df0 <UART_SetConfig+0xa0>
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b8d      	ldr	r3, [pc, #564]	@ (8007020 <UART_SetConfig+0x2d0>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d104      	bne.n	8006dfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006df0:	f7fd fe60 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 8006df4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006df8:	e003      	b.n	8006e02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dfa:	f7fd fe47 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8006dfe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0c:	f040 810c 	bne.w	8007028 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	1891      	adds	r1, r2, r2
 8006e28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e2a:	415b      	adcs	r3, r3
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e32:	4621      	mov	r1, r4
 8006e34:	eb12 0801 	adds.w	r8, r2, r1
 8006e38:	4629      	mov	r1, r5
 8006e3a:	eb43 0901 	adc.w	r9, r3, r1
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e52:	4690      	mov	r8, r2
 8006e54:	4699      	mov	r9, r3
 8006e56:	4623      	mov	r3, r4
 8006e58:	eb18 0303 	adds.w	r3, r8, r3
 8006e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e60:	462b      	mov	r3, r5
 8006e62:	eb49 0303 	adc.w	r3, r9, r3
 8006e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e7e:	460b      	mov	r3, r1
 8006e80:	18db      	adds	r3, r3, r3
 8006e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e84:	4613      	mov	r3, r2
 8006e86:	eb42 0303 	adc.w	r3, r2, r3
 8006e8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e94:	f7f9 ff60 	bl	8000d58 <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4b61      	ldr	r3, [pc, #388]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	011c      	lsls	r4, r3, #4
 8006ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006eb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	1891      	adds	r1, r2, r2
 8006ebe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ec0:	415b      	adcs	r3, r3
 8006ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ec8:	4641      	mov	r1, r8
 8006eca:	eb12 0a01 	adds.w	sl, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ee0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ee4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee8:	4692      	mov	sl, r2
 8006eea:	469b      	mov	fp, r3
 8006eec:	4643      	mov	r3, r8
 8006eee:	eb1a 0303 	adds.w	r3, sl, r3
 8006ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	eb4b 0303 	adc.w	r3, fp, r3
 8006efc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f14:	460b      	mov	r3, r1
 8006f16:	18db      	adds	r3, r3, r3
 8006f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	eb42 0303 	adc.w	r3, r2, r3
 8006f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f2a:	f7f9 ff15 	bl	8000d58 <__aeabi_uldivmod>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	4b3b      	ldr	r3, [pc, #236]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006f36:	fba3 2301 	umull	r2, r3, r3, r1
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	2264      	movs	r2, #100	@ 0x64
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	1acb      	subs	r3, r1, r3
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f4a:	4b36      	ldr	r3, [pc, #216]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f58:	441c      	add	r4, r3
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	1891      	adds	r1, r2, r2
 8006f72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f74:	415b      	adcs	r3, r3
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	1851      	adds	r1, r2, r1
 8006f80:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f82:	4649      	mov	r1, r9
 8006f84:	414b      	adcs	r3, r1
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f94:	4659      	mov	r1, fp
 8006f96:	00cb      	lsls	r3, r1, #3
 8006f98:	4651      	mov	r1, sl
 8006f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	00ca      	lsls	r2, r1, #3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4642      	mov	r2, r8
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	eb42 0303 	adc.w	r3, r2, r3
 8006fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	18db      	adds	r3, r3, r3
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	eb42 0303 	adc.w	r3, r2, r3
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fe2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006fe6:	f7f9 feb7 	bl	8000d58 <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <UART_SetConfig+0x2d4>)
 8006ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	2164      	movs	r1, #100	@ 0x64
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	3332      	adds	r3, #50	@ 0x32
 8007002:	4a08      	ldr	r2, [pc, #32]	@ (8007024 <UART_SetConfig+0x2d4>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f003 0207 	and.w	r2, r3, #7
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4422      	add	r2, r4
 8007016:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007018:	e106      	b.n	8007228 <UART_SetConfig+0x4d8>
 800701a:	bf00      	nop
 800701c:	40011000 	.word	0x40011000
 8007020:	40011400 	.word	0x40011400
 8007024:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702c:	2200      	movs	r2, #0
 800702e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007032:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007036:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800703a:	4642      	mov	r2, r8
 800703c:	464b      	mov	r3, r9
 800703e:	1891      	adds	r1, r2, r2
 8007040:	6239      	str	r1, [r7, #32]
 8007042:	415b      	adcs	r3, r3
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
 8007046:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800704a:	4641      	mov	r1, r8
 800704c:	1854      	adds	r4, r2, r1
 800704e:	4649      	mov	r1, r9
 8007050:	eb43 0501 	adc.w	r5, r3, r1
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	00eb      	lsls	r3, r5, #3
 800705e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007062:	00e2      	lsls	r2, r4, #3
 8007064:	4614      	mov	r4, r2
 8007066:	461d      	mov	r5, r3
 8007068:	4643      	mov	r3, r8
 800706a:	18e3      	adds	r3, r4, r3
 800706c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007070:	464b      	mov	r3, r9
 8007072:	eb45 0303 	adc.w	r3, r5, r3
 8007076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007096:	4629      	mov	r1, r5
 8007098:	008b      	lsls	r3, r1, #2
 800709a:	4621      	mov	r1, r4
 800709c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a0:	4621      	mov	r1, r4
 80070a2:	008a      	lsls	r2, r1, #2
 80070a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070a8:	f7f9 fe56 	bl	8000d58 <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4b60      	ldr	r3, [pc, #384]	@ (8007234 <UART_SetConfig+0x4e4>)
 80070b2:	fba3 2302 	umull	r2, r3, r3, r2
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	011c      	lsls	r4, r3, #4
 80070ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	1891      	adds	r1, r2, r2
 80070d2:	61b9      	str	r1, [r7, #24]
 80070d4:	415b      	adcs	r3, r3
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070dc:	4641      	mov	r1, r8
 80070de:	1851      	adds	r1, r2, r1
 80070e0:	6139      	str	r1, [r7, #16]
 80070e2:	4649      	mov	r1, r9
 80070e4:	414b      	adcs	r3, r1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070f4:	4659      	mov	r1, fp
 80070f6:	00cb      	lsls	r3, r1, #3
 80070f8:	4651      	mov	r1, sl
 80070fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fe:	4651      	mov	r1, sl
 8007100:	00ca      	lsls	r2, r1, #3
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	4603      	mov	r3, r0
 8007108:	4642      	mov	r2, r8
 800710a:	189b      	adds	r3, r3, r2
 800710c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007110:	464b      	mov	r3, r9
 8007112:	460a      	mov	r2, r1
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007126:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007134:	4649      	mov	r1, r9
 8007136:	008b      	lsls	r3, r1, #2
 8007138:	4641      	mov	r1, r8
 800713a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800713e:	4641      	mov	r1, r8
 8007140:	008a      	lsls	r2, r1, #2
 8007142:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007146:	f7f9 fe07 	bl	8000d58 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4611      	mov	r1, r2
 8007150:	4b38      	ldr	r3, [pc, #224]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007152:	fba3 2301 	umull	r2, r3, r3, r1
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	2264      	movs	r2, #100	@ 0x64
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	1acb      	subs	r3, r1, r3
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	3332      	adds	r3, #50	@ 0x32
 8007164:	4a33      	ldr	r2, [pc, #204]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007170:	441c      	add	r4, r3
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	673b      	str	r3, [r7, #112]	@ 0x70
 800717a:	677a      	str	r2, [r7, #116]	@ 0x74
 800717c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007180:	4642      	mov	r2, r8
 8007182:	464b      	mov	r3, r9
 8007184:	1891      	adds	r1, r2, r2
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	415b      	adcs	r3, r3
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007190:	4641      	mov	r1, r8
 8007192:	1851      	adds	r1, r2, r1
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	4649      	mov	r1, r9
 8007198:	414b      	adcs	r3, r1
 800719a:	607b      	str	r3, [r7, #4]
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071a8:	4659      	mov	r1, fp
 80071aa:	00cb      	lsls	r3, r1, #3
 80071ac:	4651      	mov	r1, sl
 80071ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b2:	4651      	mov	r1, sl
 80071b4:	00ca      	lsls	r2, r1, #3
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	4642      	mov	r2, r8
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071c2:	464b      	mov	r3, r9
 80071c4:	460a      	mov	r2, r1
 80071c6:	eb42 0303 	adc.w	r3, r2, r3
 80071ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80071d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071e4:	4649      	mov	r1, r9
 80071e6:	008b      	lsls	r3, r1, #2
 80071e8:	4641      	mov	r1, r8
 80071ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ee:	4641      	mov	r1, r8
 80071f0:	008a      	lsls	r2, r1, #2
 80071f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071f6:	f7f9 fdaf 	bl	8000d58 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007200:	fba3 1302 	umull	r1, r3, r3, r2
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2164      	movs	r1, #100	@ 0x64
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	3332      	adds	r3, #50	@ 0x32
 8007212:	4a08      	ldr	r2, [pc, #32]	@ (8007234 <UART_SetConfig+0x4e4>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4422      	add	r2, r4
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800722e:	46bd      	mov	sp, r7
 8007230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007234:	51eb851f 	.word	0x51eb851f

08007238 <__NVIC_SetPriority>:
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007248:	2b00      	cmp	r3, #0
 800724a:	db0a      	blt.n	8007262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	490c      	ldr	r1, [pc, #48]	@ (8007284 <__NVIC_SetPriority+0x4c>)
 8007252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007256:	0112      	lsls	r2, r2, #4
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	440b      	add	r3, r1
 800725c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007260:	e00a      	b.n	8007278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	4908      	ldr	r1, [pc, #32]	@ (8007288 <__NVIC_SetPriority+0x50>)
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	3b04      	subs	r3, #4
 8007270:	0112      	lsls	r2, r2, #4
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	440b      	add	r3, r1
 8007276:	761a      	strb	r2, [r3, #24]
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	e000e100 	.word	0xe000e100
 8007288:	e000ed00 	.word	0xe000ed00

0800728c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007290:	2100      	movs	r1, #0
 8007292:	f06f 0004 	mvn.w	r0, #4
 8007296:	f7ff ffcf 	bl	8007238 <__NVIC_SetPriority>
#endif
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a6:	f3ef 8305 	mrs	r3, IPSR
 80072aa:	603b      	str	r3, [r7, #0]
  return(result);
 80072ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80072b2:	f06f 0305 	mvn.w	r3, #5
 80072b6:	607b      	str	r3, [r7, #4]
 80072b8:	e00c      	b.n	80072d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80072ba:	4b0a      	ldr	r3, [pc, #40]	@ (80072e4 <osKernelInitialize+0x44>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80072c2:	4b08      	ldr	r3, [pc, #32]	@ (80072e4 <osKernelInitialize+0x44>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	607b      	str	r3, [r7, #4]
 80072cc:	e002      	b.n	80072d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80072ce:	f04f 33ff 	mov.w	r3, #4294967295
 80072d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072d4:	687b      	ldr	r3, [r7, #4]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20002444 	.word	0x20002444

080072e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ee:	f3ef 8305 	mrs	r3, IPSR
 80072f2:	603b      	str	r3, [r7, #0]
  return(result);
 80072f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <osKernelStart+0x1a>
    stat = osErrorISR;
 80072fa:	f06f 0305 	mvn.w	r3, #5
 80072fe:	607b      	str	r3, [r7, #4]
 8007300:	e010      	b.n	8007324 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007302:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <osKernelStart+0x48>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d109      	bne.n	800731e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800730a:	f7ff ffbf 	bl	800728c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800730e:	4b08      	ldr	r3, [pc, #32]	@ (8007330 <osKernelStart+0x48>)
 8007310:	2202      	movs	r2, #2
 8007312:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007314:	f001 fc24 	bl	8008b60 <vTaskStartScheduler>
      stat = osOK;
 8007318:	2300      	movs	r3, #0
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	e002      	b.n	8007324 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800731e:	f04f 33ff 	mov.w	r3, #4294967295
 8007322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007324:	687b      	ldr	r3, [r7, #4]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20002444 	.word	0x20002444

08007334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	@ 0x38
 8007338:	af04      	add	r7, sp, #16
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007344:	f3ef 8305 	mrs	r3, IPSR
 8007348:	617b      	str	r3, [r7, #20]
  return(result);
 800734a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800734c:	2b00      	cmp	r3, #0
 800734e:	d17e      	bne.n	800744e <osThreadNew+0x11a>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d07b      	beq.n	800744e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007356:	2380      	movs	r3, #128	@ 0x80
 8007358:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800735a:	2318      	movs	r3, #24
 800735c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007362:	f04f 33ff 	mov.w	r3, #4294967295
 8007366:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d045      	beq.n	80073fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <osThreadNew+0x48>
        name = attr->name;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d008      	beq.n	80073a2 <osThreadNew+0x6e>
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	2b38      	cmp	r3, #56	@ 0x38
 8007394:	d805      	bhi.n	80073a2 <osThreadNew+0x6e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <osThreadNew+0x72>
        return (NULL);
 80073a2:	2300      	movs	r3, #0
 80073a4:	e054      	b.n	8007450 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	089b      	lsrs	r3, r3, #2
 80073b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <osThreadNew+0xa8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80073c4:	d90a      	bls.n	80073dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d006      	beq.n	80073dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <osThreadNew+0xa8>
        mem = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	e010      	b.n	80073fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10c      	bne.n	80073fe <osThreadNew+0xca>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <osThreadNew+0xca>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <osThreadNew+0xca>
          mem = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e001      	b.n	80073fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d110      	bne.n	8007426 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6a3a      	ldr	r2, [r7, #32]
 8007418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f001 f944 	bl	80086a8 <xTaskCreateStatic>
 8007420:	4603      	mov	r3, r0
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	e013      	b.n	800744e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d110      	bne.n	800744e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	b29a      	uxth	r2, r3
 8007430:	f107 0310 	add.w	r3, r7, #16
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f001 f992 	bl	8008768 <xTaskCreate>
 8007444:	4603      	mov	r3, r0
 8007446:	2b01      	cmp	r3, #1
 8007448:	d001      	beq.n	800744e <osThreadNew+0x11a>
            hTask = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800744e:	693b      	ldr	r3, [r7, #16]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3728      	adds	r7, #40	@ 0x28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007460:	f3ef 8305 	mrs	r3, IPSR
 8007464:	60bb      	str	r3, [r7, #8]
  return(result);
 8007466:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <osDelay+0x1c>
    stat = osErrorISR;
 800746c:	f06f 0305 	mvn.w	r3, #5
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e007      	b.n	8007484 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <osDelay+0x2c>
      vTaskDelay(ticks);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fb38 	bl	8008af4 <vTaskDelay>
    }
  }

  return (stat);
 8007484:	68fb      	ldr	r3, [r7, #12]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800749a:	f3ef 8305 	mrs	r3, IPSR
 800749e:	60bb      	str	r3, [r7, #8]
  return(result);
 80074a0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d174      	bne.n	8007590 <osMutexNew+0x102>
    if (attr != NULL) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e001      	b.n	80074b8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <osMutexNew+0x3a>
      rmtx = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e001      	b.n	80074cc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d15c      	bne.n	8007590 <osMutexNew+0x102>
      mem = -1;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295
 80074da:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <osMutexNew+0x6a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80074f0:	d902      	bls.n	80074f8 <osMutexNew+0x6a>
          mem = 1;
 80074f2:	2301      	movs	r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	e00c      	b.n	8007512 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d108      	bne.n	8007512 <osMutexNew+0x84>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <osMutexNew+0x84>
            mem = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	e001      	b.n	8007512 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d112      	bne.n	800753e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4619      	mov	r1, r3
 8007524:	2004      	movs	r0, #4
 8007526:	f000 fb20 	bl	8007b6a <xQueueCreateMutexStatic>
 800752a:	61f8      	str	r0, [r7, #28]
 800752c:	e016      	b.n	800755c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4619      	mov	r1, r3
 8007534:	2001      	movs	r0, #1
 8007536:	f000 fb18 	bl	8007b6a <xQueueCreateMutexStatic>
 800753a:	61f8      	str	r0, [r7, #28]
 800753c:	e00e      	b.n	800755c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800754a:	2004      	movs	r0, #4
 800754c:	f000 faf5 	bl	8007b3a <xQueueCreateMutex>
 8007550:	61f8      	str	r0, [r7, #28]
 8007552:	e003      	b.n	800755c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007554:	2001      	movs	r0, #1
 8007556:	f000 faf0 	bl	8007b3a <xQueueCreateMutex>
 800755a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <osMutexNew+0xee>
        if (attr != NULL) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <osMutexNew+0xe2>
          name = attr->name;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	e001      	b.n	8007574 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	69f8      	ldr	r0, [r7, #28]
 8007578:	f001 f838 	bl	80085ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <osMutexNew+0x102>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007590:	69fb      	ldr	r3, [r7, #28]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b8:	f3ef 8305 	mrs	r3, IPSR
 80075bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80075be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80075c4:	f06f 0305 	mvn.w	r3, #5
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e02c      	b.n	8007626 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80075d2:	f06f 0303 	mvn.w	r3, #3
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e025      	b.n	8007626 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d011      	beq.n	8007604 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6938      	ldr	r0, [r7, #16]
 80075e4:	f000 fb11 	bl	8007c0a <xQueueTakeMutexRecursive>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d01b      	beq.n	8007626 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80075f4:	f06f 0301 	mvn.w	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e014      	b.n	8007626 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80075fc:	f06f 0302 	mvn.w	r3, #2
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	e010      	b.n	8007626 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6938      	ldr	r0, [r7, #16]
 8007608:	f000 fdb8 	bl	800817c <xQueueSemaphoreTake>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d009      	beq.n	8007626 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007618:	f06f 0301 	mvn.w	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	e002      	b.n	8007626 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007620:	f06f 0302 	mvn.w	r3, #2
 8007624:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007626:	697b      	ldr	r3, [r7, #20]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800764c:	f3ef 8305 	mrs	r3, IPSR
 8007650:	60bb      	str	r3, [r7, #8]
  return(result);
 8007652:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007658:	f06f 0305 	mvn.w	r3, #5
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e01f      	b.n	80076a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007666:	f06f 0303 	mvn.w	r3, #3
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	e018      	b.n	80076a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007674:	6938      	ldr	r0, [r7, #16]
 8007676:	f000 fa93 	bl	8007ba0 <xQueueGiveMutexRecursive>
 800767a:	4603      	mov	r3, r0
 800767c:	2b01      	cmp	r3, #1
 800767e:	d00f      	beq.n	80076a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007680:	f06f 0302 	mvn.w	r3, #2
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e00b      	b.n	80076a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007688:	2300      	movs	r3, #0
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	6938      	ldr	r0, [r7, #16]
 8007690:	f000 faf2 	bl	8007c78 <xQueueGenericSend>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d002      	beq.n	80076a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800769a:	f06f 0302 	mvn.w	r3, #2
 800769e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80076a0:	697b      	ldr	r3, [r7, #20]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4a07      	ldr	r2, [pc, #28]	@ (80076d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80076bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4a06      	ldr	r2, [pc, #24]	@ (80076dc <vApplicationGetIdleTaskMemory+0x30>)
 80076c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2280      	movs	r2, #128	@ 0x80
 80076c8:	601a      	str	r2, [r3, #0]
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20002448 	.word	0x20002448
 80076dc:	200024a4 	.word	0x200024a4

080076e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a07      	ldr	r2, [pc, #28]	@ (800770c <vApplicationGetTimerTaskMemory+0x2c>)
 80076f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4a06      	ldr	r2, [pc, #24]	@ (8007710 <vApplicationGetTimerTaskMemory+0x30>)
 80076f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076fe:	601a      	str	r2, [r3, #0]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	200026a4 	.word	0x200026a4
 8007710:	20002700 	.word	0x20002700

08007714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0208 	add.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 0208 	add.w	r2, r3, #8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0208 	add.w	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d103      	bne.n	80077d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e00c      	b.n	80077f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3308      	adds	r3, #8
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e002      	b.n	80077e4 <vListInsert+0x2e>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d2f6      	bcs.n	80077de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6892      	ldr	r2, [r2, #8]
 800783e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6852      	ldr	r2, [r2, #4]
 8007848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d103      	bne.n	800785c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1e5a      	subs	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078a8:	f002 fc26 	bl	800a0f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	68f9      	ldr	r1, [r7, #12]
 80078b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	441a      	add	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	3b01      	subs	r3, #1
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	441a      	add	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	22ff      	movs	r2, #255	@ 0xff
 80078ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	22ff      	movs	r2, #255	@ 0xff
 80078f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d114      	bne.n	8007928 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01a      	beq.n	800793c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3310      	adds	r3, #16
 800790a:	4618      	mov	r0, r3
 800790c:	f001 fbb6 	bl	800907c <xTaskRemoveFromEventList>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d012      	beq.n	800793c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007916:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <xQueueGenericReset+0xd0>)
 8007918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	e009      	b.n	800793c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3310      	adds	r3, #16
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff fef1 	bl	8007714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3324      	adds	r3, #36	@ 0x24
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff feec 	bl	8007714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800793c:	f002 fc0e 	bl	800a15c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007940:	2301      	movs	r3, #1
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	@ 0x38
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <xQueueGenericCreateStatic+0x56>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <xQueueGenericCreateStatic+0x5a>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <xQueueGenericCreateStatic+0x5c>
 80079aa:	2300      	movs	r3, #0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10b      	bne.n	80079c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	623b      	str	r3, [r7, #32]
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	e7fd      	b.n	80079c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <xQueueGenericCreateStatic+0x84>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <xQueueGenericCreateStatic+0x88>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <xQueueGenericCreateStatic+0x8a>
 80079d8:	2300      	movs	r3, #0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61fb      	str	r3, [r7, #28]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079f6:	2350      	movs	r3, #80	@ 0x50
 80079f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b50      	cmp	r3, #80	@ 0x50
 80079fe:	d00b      	beq.n	8007a18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	61bb      	str	r3, [r7, #24]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00d      	beq.n	8007a40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f840 	bl	8007ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3730      	adds	r7, #48	@ 0x30
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b08a      	sub	sp, #40	@ 0x28
 8007a4e:	af02      	add	r7, sp, #8
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	4613      	mov	r3, r2
 8007a56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10b      	bne.n	8007a76 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	613b      	str	r3, [r7, #16]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	3350      	adds	r3, #80	@ 0x50
 8007a84:	4618      	mov	r0, r3
 8007a86:	f002 fc59 	bl	800a33c <pvPortMalloc>
 8007a8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d011      	beq.n	8007ab6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	3350      	adds	r3, #80	@ 0x50
 8007a9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aa4:	79fa      	ldrb	r2, [r7, #7]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f805 	bl	8007ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e002      	b.n	8007ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007aee:	2101      	movs	r1, #1
 8007af0:	69b8      	ldr	r0, [r7, #24]
 8007af2:	f7ff fec3 	bl	800787c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00e      	beq.n	8007b32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b26:	2300      	movs	r3, #0
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8a3 	bl	8007c78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b086      	sub	sp, #24
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	4603      	mov	r3, r0
 8007b42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6939      	ldr	r1, [r7, #16]
 8007b52:	6978      	ldr	r0, [r7, #20]
 8007b54:	f7ff ff79 	bl	8007a4a <xQueueGenericCreate>
 8007b58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff ffd3 	bl	8007b06 <prvInitialiseMutex>

		return xNewQueue;
 8007b60:	68fb      	ldr	r3, [r7, #12]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b088      	sub	sp, #32
 8007b6e:	af02      	add	r7, sp, #8
 8007b70:	4603      	mov	r3, r0
 8007b72:	6039      	str	r1, [r7, #0]
 8007b74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2200      	movs	r2, #0
 8007b86:	6939      	ldr	r1, [r7, #16]
 8007b88:	6978      	ldr	r0, [r7, #20]
 8007b8a:	f7ff fee1 	bl	8007950 <xQueueGenericCreateStatic>
 8007b8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff ffb8 	bl	8007b06 <prvInitialiseMutex>

		return xNewQueue;
 8007b96:	68fb      	ldr	r3, [r7, #12]
	}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	60fb      	str	r3, [r7, #12]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	689c      	ldr	r4, [r3, #8]
 8007bce:	f001 fc15 	bl	80093fc <xTaskGetCurrentTaskHandle>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d111      	bne.n	8007bfc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6938      	ldr	r0, [r7, #16]
 8007bf2:	f000 f841 	bl	8007c78 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	e001      	b.n	8007c00 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007c00:	697b      	ldr	r3, [r7, #20]
	}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd90      	pop	{r4, r7, pc}

08007c0a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007c0a:	b590      	push	{r4, r7, lr}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	689c      	ldr	r4, [r3, #8]
 8007c3a:	f001 fbdf 	bl	80093fc <xTaskGetCurrentTaskHandle>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d107      	bne.n	8007c54 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e00c      	b.n	8007c6e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6938      	ldr	r0, [r7, #16]
 8007c58:	f000 fa90 	bl	800817c <xQueueSemaphoreTake>
 8007c5c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c6e:	697b      	ldr	r3, [r7, #20]
	}
 8007c70:	4618      	mov	r0, r3
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd90      	pop	{r4, r7, pc}

08007c78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08e      	sub	sp, #56	@ 0x38
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <xQueueGenericSend+0x34>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <xQueueGenericSend+0x42>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericSend+0x46>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueGenericSend+0x48>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10b      	bne.n	8007cdc <xQueueGenericSend+0x64>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <xQueueGenericSend+0x72>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <xQueueGenericSend+0x76>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueGenericSend+0x78>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <xQueueGenericSend+0x94>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	623b      	str	r3, [r7, #32]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d0c:	f001 fb86 	bl	800941c <xTaskGetSchedulerState>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <xQueueGenericSend+0xa4>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <xQueueGenericSend+0xa8>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <xQueueGenericSend+0xaa>
 8007d20:	2300      	movs	r3, #0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <xQueueGenericSend+0xc6>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	61fb      	str	r3, [r7, #28]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3e:	f002 f9db 	bl	800a0f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d302      	bcc.n	8007d54 <xQueueGenericSend+0xdc>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d129      	bne.n	8007da8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d5a:	f000 fb37 	bl	80083cc <prvCopyDataToQueue>
 8007d5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d010      	beq.n	8007d8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	3324      	adds	r3, #36	@ 0x24
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 f985 	bl	800907c <xTaskRemoveFromEventList>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d78:	4b3f      	ldr	r3, [pc, #252]	@ (8007e78 <xQueueGenericSend+0x200>)
 8007d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	e00a      	b.n	8007da0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d90:	4b39      	ldr	r3, [pc, #228]	@ (8007e78 <xQueueGenericSend+0x200>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007da0:	f002 f9dc 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e063      	b.n	8007e70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dae:	f002 f9d5 	bl	800a15c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e05c      	b.n	8007e70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dbc:	f107 0314 	add.w	r3, r7, #20
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f001 f9bf 	bl	8009144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dca:	f002 f9c7 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dce:	f000 ff2f 	bl	8008c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dd2:	f002 f991 	bl	800a0f8 <vPortEnterCritical>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d103      	bne.n	8007dec <xQueueGenericSend+0x174>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericSend+0x18a>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e02:	f002 f9ab 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e06:	1d3a      	adds	r2, r7, #4
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 f9ae 	bl	8009170 <xTaskCheckForTimeOut>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d124      	bne.n	8007e64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e1c:	f000 fbce 	bl	80085bc <prvIsQueueFull>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d018      	beq.n	8007e58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e28:	3310      	adds	r3, #16
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 f8d2 	bl	8008fd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e36:	f000 fb59 	bl	80084ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e3a:	f000 ff07 	bl	8008c4c <xTaskResumeAll>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f47f af7c 	bne.w	8007d3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e46:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <xQueueGenericSend+0x200>)
 8007e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	e772      	b.n	8007d3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e5a:	f000 fb47 	bl	80084ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e5e:	f000 fef5 	bl	8008c4c <xTaskResumeAll>
 8007e62:	e76c      	b.n	8007d3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e66:	f000 fb41 	bl	80084ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e6a:	f000 feef 	bl	8008c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3738      	adds	r7, #56	@ 0x38
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b090      	sub	sp, #64	@ 0x40
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d103      	bne.n	8007eba <xQueueGenericSendFromISR+0x3e>
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <xQueueGenericSendFromISR+0x42>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <xQueueGenericSendFromISR+0x44>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10b      	bne.n	8007edc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ed6:	bf00      	nop
 8007ed8:	bf00      	nop
 8007eda:	e7fd      	b.n	8007ed8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d103      	bne.n	8007eea <xQueueGenericSendFromISR+0x6e>
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <xQueueGenericSendFromISR+0x72>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xQueueGenericSendFromISR+0x74>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f0c:	f002 f9d4 	bl	800a2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f10:	f3ef 8211 	mrs	r2, BASEPRI
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	61fa      	str	r2, [r7, #28]
 8007f26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d302      	bcc.n	8007f3e <xQueueGenericSendFromISR+0xc2>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d12f      	bne.n	8007f9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f54:	f000 fa3a 	bl	80083cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f60:	d112      	bne.n	8007f88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d016      	beq.n	8007f98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	3324      	adds	r3, #36	@ 0x24
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 f884 	bl	800907c <xTaskRemoveFromEventList>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	e007      	b.n	8007f98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	b25a      	sxtb	r2, r3
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f9c:	e001      	b.n	8007fa2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3740      	adds	r7, #64	@ 0x40
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08c      	sub	sp, #48	@ 0x30
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <xQueueReceive+0x32>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	623b      	str	r3, [r7, #32]
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <xQueueReceive+0x40>
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <xQueueReceive+0x44>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <xQueueReceive+0x46>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <xQueueReceive+0x62>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	61fb      	str	r3, [r7, #28]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800801a:	f001 f9ff 	bl	800941c <xTaskGetSchedulerState>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <xQueueReceive+0x72>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <xQueueReceive+0x76>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <xQueueReceive+0x78>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10b      	bne.n	800804c <xQueueReceive+0x94>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	61bb      	str	r3, [r7, #24]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800804c:	f002 f854 	bl	800a0f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008054:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01f      	beq.n	800809c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008060:	f000 fa1e 	bl	80084a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	1e5a      	subs	r2, r3, #1
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800806c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00f      	beq.n	8008094 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008076:	3310      	adds	r3, #16
 8008078:	4618      	mov	r0, r3
 800807a:	f000 ffff 	bl	800907c <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d007      	beq.n	8008094 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008084:	4b3c      	ldr	r3, [pc, #240]	@ (8008178 <xQueueReceive+0x1c0>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008094:	f002 f862 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8008098:	2301      	movs	r3, #1
 800809a:	e069      	b.n	8008170 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080a2:	f002 f85b 	bl	800a15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e062      	b.n	8008170 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b0:	f107 0310 	add.w	r3, r7, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	f001 f845 	bl	8009144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080be:	f002 f84d 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080c2:	f000 fdb5 	bl	8008c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080c6:	f002 f817 	bl	800a0f8 <vPortEnterCritical>
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d6:	d103      	bne.n	80080e0 <xQueueReceive+0x128>
 80080d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080e6:	b25b      	sxtb	r3, r3
 80080e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ec:	d103      	bne.n	80080f6 <xQueueReceive+0x13e>
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f6:	f002 f831 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080fa:	1d3a      	adds	r2, r7, #4
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f834 	bl	8009170 <xTaskCheckForTimeOut>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d123      	bne.n	8008156 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800810e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008110:	f000 fa3e 	bl	8008590 <prvIsQueueEmpty>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d017      	beq.n	800814a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	3324      	adds	r3, #36	@ 0x24
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f000 ff58 	bl	8008fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812a:	f000 f9df 	bl	80084ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800812e:	f000 fd8d 	bl	8008c4c <xTaskResumeAll>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d189      	bne.n	800804c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008138:	4b0f      	ldr	r3, [pc, #60]	@ (8008178 <xQueueReceive+0x1c0>)
 800813a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	e780      	b.n	800804c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800814a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800814c:	f000 f9ce 	bl	80084ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008150:	f000 fd7c 	bl	8008c4c <xTaskResumeAll>
 8008154:	e77a      	b.n	800804c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008158:	f000 f9c8 	bl	80084ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800815c:	f000 fd76 	bl	8008c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008162:	f000 fa15 	bl	8008590 <prvIsQueueEmpty>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	f43f af6f 	beq.w	800804c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800816e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008170:	4618      	mov	r0, r3
 8008172:	3730      	adds	r7, #48	@ 0x30
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08e      	sub	sp, #56	@ 0x38
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10b      	bne.n	80081b0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	623b      	str	r3, [r7, #32]
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	e7fd      	b.n	80081ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	61fb      	str	r3, [r7, #28]
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081d0:	f001 f924 	bl	800941c <xTaskGetSchedulerState>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <xQueueSemaphoreTake+0x64>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <xQueueSemaphoreTake+0x68>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <xQueueSemaphoreTake+0x6a>
 80081e4:	2300      	movs	r3, #0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	61bb      	str	r3, [r7, #24]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008202:	f001 ff79 	bl	800a0f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d024      	beq.n	800825c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008222:	f001 fa75 	bl	8009710 <pvTaskIncrementMutexHeldCount>
 8008226:	4602      	mov	r2, r0
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00f      	beq.n	8008254 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	3310      	adds	r3, #16
 8008238:	4618      	mov	r0, r3
 800823a:	f000 ff1f 	bl	800907c <xTaskRemoveFromEventList>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d007      	beq.n	8008254 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008244:	4b54      	ldr	r3, [pc, #336]	@ (8008398 <xQueueSemaphoreTake+0x21c>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008254:	f001 ff82 	bl	800a15c <vPortExitCritical>
				return pdPASS;
 8008258:	2301      	movs	r3, #1
 800825a:	e098      	b.n	800838e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d112      	bne.n	8008288 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	617b      	str	r3, [r7, #20]
}
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008280:	f001 ff6c 	bl	800a15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008284:	2300      	movs	r3, #0
 8008286:	e082      	b.n	800838e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800828e:	f107 030c 	add.w	r3, r7, #12
 8008292:	4618      	mov	r0, r3
 8008294:	f000 ff56 	bl	8009144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008298:	2301      	movs	r3, #1
 800829a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800829c:	f001 ff5e 	bl	800a15c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082a0:	f000 fcc6 	bl	8008c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082a4:	f001 ff28 	bl	800a0f8 <vPortEnterCritical>
 80082a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ae:	b25b      	sxtb	r3, r3
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b4:	d103      	bne.n	80082be <xQueueSemaphoreTake+0x142>
 80082b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	d103      	bne.n	80082d4 <xQueueSemaphoreTake+0x158>
 80082cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082d4:	f001 ff42 	bl	800a15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082d8:	463a      	mov	r2, r7
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 ff45 	bl	8009170 <xTaskCheckForTimeOut>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d132      	bne.n	8008352 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082ee:	f000 f94f 	bl	8008590 <prvIsQueueEmpty>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d026      	beq.n	8008346 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d109      	bne.n	8008314 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008300:	f001 fefa 	bl	800a0f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	4618      	mov	r0, r3
 800830a:	f001 f8a5 	bl	8009458 <xTaskPriorityInherit>
 800830e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008310:	f001 ff24 	bl	800a15c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	3324      	adds	r3, #36	@ 0x24
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fe5b 	bl	8008fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008322:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008324:	f000 f8e2 	bl	80084ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008328:	f000 fc90 	bl	8008c4c <xTaskResumeAll>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	f47f af67 	bne.w	8008202 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008334:	4b18      	ldr	r3, [pc, #96]	@ (8008398 <xQueueSemaphoreTake+0x21c>)
 8008336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	e75d      	b.n	8008202 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008346:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008348:	f000 f8d0 	bl	80084ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800834c:	f000 fc7e 	bl	8008c4c <xTaskResumeAll>
 8008350:	e757      	b.n	8008202 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008354:	f000 f8ca 	bl	80084ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008358:	f000 fc78 	bl	8008c4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800835c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800835e:	f000 f917 	bl	8008590 <prvIsQueueEmpty>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	f43f af4c 	beq.w	8008202 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00d      	beq.n	800838c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008370:	f001 fec2 	bl	800a0f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008374:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008376:	f000 f811 	bl	800839c <prvGetDisinheritPriorityAfterTimeout>
 800837a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800837c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008382:	4618      	mov	r0, r3
 8008384:	f001 f940 	bl	8009608 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008388:	f001 fee8 	bl	800a15c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800838c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800838e:	4618      	mov	r0, r3
 8008390:	3738      	adds	r7, #56	@ 0x38
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d006      	beq.n	80083ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e001      	b.n	80083be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083be:	68fb      	ldr	r3, [r7, #12]
	}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10d      	bne.n	8008406 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d14d      	bne.n	800848e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 f896 	bl	8009528 <xTaskPriorityDisinherit>
 80083fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	609a      	str	r2, [r3, #8]
 8008404:	e043      	b.n	800848e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d119      	bne.n	8008440 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6858      	ldr	r0, [r3, #4]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	461a      	mov	r2, r3
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	f004 ff1b 	bl	800d252 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008424:	441a      	add	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	429a      	cmp	r2, r3
 8008434:	d32b      	bcc.n	800848e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	e026      	b.n	800848e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68d8      	ldr	r0, [r3, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	461a      	mov	r2, r3
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	f004 ff01 	bl	800d252 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008458:	425b      	negs	r3, r3
 800845a:	441a      	add	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d207      	bcs.n	800847c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	425b      	negs	r3, r3
 8008476:	441a      	add	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d105      	bne.n	800848e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	3b01      	subs	r3, #1
 800848c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008496:	697b      	ldr	r3, [r7, #20]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d018      	beq.n	80084e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ba:	441a      	add	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d303      	bcc.n	80084d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68d9      	ldr	r1, [r3, #12]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084dc:	461a      	mov	r2, r3
 80084de:	6838      	ldr	r0, [r7, #0]
 80084e0:	f004 feb7 	bl	800d252 <memcpy>
	}
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084f4:	f001 fe00 	bl	800a0f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008500:	e011      	b.n	8008526 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d012      	beq.n	8008530 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3324      	adds	r3, #36	@ 0x24
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fdb4 	bl	800907c <xTaskRemoveFromEventList>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800851a:	f000 fe8d 	bl	8009238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	3b01      	subs	r3, #1
 8008522:	b2db      	uxtb	r3, r3
 8008524:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	dce9      	bgt.n	8008502 <prvUnlockQueue+0x16>
 800852e:	e000      	b.n	8008532 <prvUnlockQueue+0x46>
					break;
 8008530:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	22ff      	movs	r2, #255	@ 0xff
 8008536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800853a:	f001 fe0f 	bl	800a15c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800853e:	f001 fddb 	bl	800a0f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008548:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800854a:	e011      	b.n	8008570 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d012      	beq.n	800857a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3310      	adds	r3, #16
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fd8f 	bl	800907c <xTaskRemoveFromEventList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008564:	f000 fe68 	bl	8009238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	3b01      	subs	r3, #1
 800856c:	b2db      	uxtb	r3, r3
 800856e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	dce9      	bgt.n	800854c <prvUnlockQueue+0x60>
 8008578:	e000      	b.n	800857c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800857a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	22ff      	movs	r2, #255	@ 0xff
 8008580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008584:	f001 fdea 	bl	800a15c <vPortExitCritical>
}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008598:	f001 fdae 	bl	800a0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	e001      	b.n	80085ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085ae:	f001 fdd5 	bl	800a15c <vPortExitCritical>

	return xReturn;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c4:	f001 fd98 	bl	800a0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d102      	bne.n	80085da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e001      	b.n	80085de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085de:	f001 fdbd 	bl	800a15c <vPortExitCritical>

	return xReturn;
 80085e2:	68fb      	ldr	r3, [r7, #12]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e014      	b.n	8008626 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085fc:	4a0f      	ldr	r2, [pc, #60]	@ (800863c <vQueueAddToRegistry+0x50>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10b      	bne.n	8008620 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008608:	490c      	ldr	r1, [pc, #48]	@ (800863c <vQueueAddToRegistry+0x50>)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008612:	4a0a      	ldr	r2, [pc, #40]	@ (800863c <vQueueAddToRegistry+0x50>)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	4413      	add	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800861e:	e006      	b.n	800862e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b07      	cmp	r3, #7
 800862a:	d9e7      	bls.n	80085fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20002b00 	.word	0x20002b00

08008640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008650:	f001 fd52 	bl	800a0f8 <vPortEnterCritical>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800865a:	b25b      	sxtb	r3, r3
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d103      	bne.n	800866a <vQueueWaitForMessageRestricted+0x2a>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008670:	b25b      	sxtb	r3, r3
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d103      	bne.n	8008680 <vQueueWaitForMessageRestricted+0x40>
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008680:	f001 fd6c 	bl	800a15c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	3324      	adds	r3, #36	@ 0x24
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fcc5 	bl	8009024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800869a:	6978      	ldr	r0, [r7, #20]
 800869c:	f7ff ff26 	bl	80084ec <prvUnlockQueue>
	}
 80086a0:	bf00      	nop
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08e      	sub	sp, #56	@ 0x38
 80086ac:	af04      	add	r7, sp, #16
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10b      	bne.n	80086d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	623b      	str	r3, [r7, #32]
}
 80086ce:	bf00      	nop
 80086d0:	bf00      	nop
 80086d2:	e7fd      	b.n	80086d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	61fb      	str	r3, [r7, #28]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086f2:	235c      	movs	r3, #92	@ 0x5c
 80086f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80086fa:	d00b      	beq.n	8008714 <xTaskCreateStatic+0x6c>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	61bb      	str	r3, [r7, #24]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008714:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01e      	beq.n	800875a <xTaskCreateStatic+0xb2>
 800871c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01b      	beq.n	800875a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	2202      	movs	r2, #2
 8008730:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008734:	2300      	movs	r3, #0
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	f107 0314 	add.w	r3, r7, #20
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f850 	bl	80087f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008754:	f000 f8de 	bl	8008914 <prvAddNewTaskToReadyList>
 8008758:	e001      	b.n	800875e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800875a:	2300      	movs	r3, #0
 800875c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800875e:	697b      	ldr	r3, [r7, #20]
	}
 8008760:	4618      	mov	r0, r3
 8008762:	3728      	adds	r7, #40	@ 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08c      	sub	sp, #48	@ 0x30
 800876c:	af04      	add	r7, sp, #16
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4618      	mov	r0, r3
 800877e:	f001 fddd 	bl	800a33c <pvPortMalloc>
 8008782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00e      	beq.n	80087a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800878a:	205c      	movs	r0, #92	@ 0x5c
 800878c:	f001 fdd6 	bl	800a33c <pvPortMalloc>
 8008790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	631a      	str	r2, [r3, #48]	@ 0x30
 800879e:	e005      	b.n	80087ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087a0:	6978      	ldr	r0, [r7, #20]
 80087a2:	f001 fe99 	bl	800a4d8 <vPortFree>
 80087a6:	e001      	b.n	80087ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087a8:	2300      	movs	r3, #0
 80087aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d017      	beq.n	80087e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087ba:	88fa      	ldrh	r2, [r7, #6]
 80087bc:	2300      	movs	r3, #0
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	9302      	str	r3, [sp, #8]
 80087c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f80e 	bl	80087f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087d6:	69f8      	ldr	r0, [r7, #28]
 80087d8:	f000 f89c 	bl	8008914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087dc:	2301      	movs	r3, #1
 80087de:	61bb      	str	r3, [r7, #24]
 80087e0:	e002      	b.n	80087e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087e8:	69bb      	ldr	r3, [r7, #24]
	}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3720      	adds	r7, #32
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b088      	sub	sp, #32
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	461a      	mov	r2, r3
 800880a:	21a5      	movs	r1, #165	@ 0xa5
 800880c:	f003 fd2a 	bl	800c264 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800881a:	3b01      	subs	r3, #1
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f023 0307 	bic.w	r3, r3, #7
 8008828:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	617b      	str	r3, [r7, #20]
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	e7fd      	b.n	8008848 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d01f      	beq.n	8008892 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008852:	2300      	movs	r3, #0
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	e012      	b.n	800887e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	7819      	ldrb	r1, [r3, #0]
 8008860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	3334      	adds	r3, #52	@ 0x34
 8008868:	460a      	mov	r2, r1
 800886a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d006      	beq.n	8008886 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	3301      	adds	r3, #1
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	2b0f      	cmp	r3, #15
 8008882:	d9e9      	bls.n	8008858 <prvInitialiseNewTask+0x66>
 8008884:	e000      	b.n	8008888 <prvInitialiseNewTask+0x96>
			{
				break;
 8008886:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008890:	e003      	b.n	800889a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	2b37      	cmp	r3, #55	@ 0x37
 800889e:	d901      	bls.n	80088a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088a0:	2337      	movs	r3, #55	@ 0x37
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	2200      	movs	r2, #0
 80088b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	3304      	adds	r3, #4
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe ff4a 	bl	8007754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	3318      	adds	r3, #24
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe ff45 	bl	8007754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	68f9      	ldr	r1, [r7, #12]
 80088f2:	69b8      	ldr	r0, [r7, #24]
 80088f4:	f001 face 	bl	8009e94 <pxPortInitialiseStack>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890a:	bf00      	nop
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800891c:	f001 fbec 	bl	800a0f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008920:	4b2d      	ldr	r3, [pc, #180]	@ (80089d8 <prvAddNewTaskToReadyList+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	4a2c      	ldr	r2, [pc, #176]	@ (80089d8 <prvAddNewTaskToReadyList+0xc4>)
 8008928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800892a:	4b2c      	ldr	r3, [pc, #176]	@ (80089dc <prvAddNewTaskToReadyList+0xc8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d109      	bne.n	8008946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008932:	4a2a      	ldr	r2, [pc, #168]	@ (80089dc <prvAddNewTaskToReadyList+0xc8>)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008938:	4b27      	ldr	r3, [pc, #156]	@ (80089d8 <prvAddNewTaskToReadyList+0xc4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d110      	bne.n	8008962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008940:	f000 fc9e 	bl	8009280 <prvInitialiseTaskLists>
 8008944:	e00d      	b.n	8008962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008946:	4b26      	ldr	r3, [pc, #152]	@ (80089e0 <prvAddNewTaskToReadyList+0xcc>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800894e:	4b23      	ldr	r3, [pc, #140]	@ (80089dc <prvAddNewTaskToReadyList+0xc8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008958:	429a      	cmp	r2, r3
 800895a:	d802      	bhi.n	8008962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800895c:	4a1f      	ldr	r2, [pc, #124]	@ (80089dc <prvAddNewTaskToReadyList+0xc8>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008962:	4b20      	ldr	r3, [pc, #128]	@ (80089e4 <prvAddNewTaskToReadyList+0xd0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	4a1e      	ldr	r2, [pc, #120]	@ (80089e4 <prvAddNewTaskToReadyList+0xd0>)
 800896a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800896c:	4b1d      	ldr	r3, [pc, #116]	@ (80089e4 <prvAddNewTaskToReadyList+0xd0>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008978:	4b1b      	ldr	r3, [pc, #108]	@ (80089e8 <prvAddNewTaskToReadyList+0xd4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d903      	bls.n	8008988 <prvAddNewTaskToReadyList+0x74>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008984:	4a18      	ldr	r2, [pc, #96]	@ (80089e8 <prvAddNewTaskToReadyList+0xd4>)
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898c:	4613      	mov	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4a15      	ldr	r2, [pc, #84]	@ (80089ec <prvAddNewTaskToReadyList+0xd8>)
 8008996:	441a      	add	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3304      	adds	r3, #4
 800899c:	4619      	mov	r1, r3
 800899e:	4610      	mov	r0, r2
 80089a0:	f7fe fee5 	bl	800776e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089a4:	f001 fbda 	bl	800a15c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089a8:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <prvAddNewTaskToReadyList+0xcc>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00e      	beq.n	80089ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089b0:	4b0a      	ldr	r3, [pc, #40]	@ (80089dc <prvAddNewTaskToReadyList+0xc8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d207      	bcs.n	80089ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089be:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <prvAddNewTaskToReadyList+0xdc>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20003014 	.word	0x20003014
 80089dc:	20002b40 	.word	0x20002b40
 80089e0:	20003020 	.word	0x20003020
 80089e4:	20003030 	.word	0x20003030
 80089e8:	2000301c 	.word	0x2000301c
 80089ec:	20002b44 	.word	0x20002b44
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08a      	sub	sp, #40	@ 0x28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10b      	bne.n	8008a20 <vTaskDelayUntil+0x2c>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	617b      	str	r3, [r7, #20]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <vTaskDelayUntil+0x4a>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	613b      	str	r3, [r7, #16]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8008a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae8 <vTaskDelayUntil+0xf4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <vTaskDelayUntil+0x6a>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60fb      	str	r3, [r7, #12]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8008a5e:	f000 f8e7 	bl	8008c30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008a62:	4b22      	ldr	r3, [pc, #136]	@ (8008aec <vTaskDelayUntil+0xf8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	4413      	add	r3, r2
 8008a70:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6a3a      	ldr	r2, [r7, #32]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d20b      	bcs.n	8008a94 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d211      	bcs.n	8008aaa <vTaskDelayUntil+0xb6>
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d90d      	bls.n	8008aaa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a92:	e00a      	b.n	8008aaa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69fa      	ldr	r2, [r7, #28]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d303      	bcc.n	8008aa6 <vTaskDelayUntil+0xb2>
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d901      	bls.n	8008aaa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d006      	beq.n	8008ac4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2100      	movs	r1, #0
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fe3a 	bl	8009738 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008ac4:	f000 f8c2 	bl	8008c4c <xTaskResumeAll>
 8008ac8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d107      	bne.n	8008ae0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008ad0:	4b07      	ldr	r3, [pc, #28]	@ (8008af0 <vTaskDelayUntil+0xfc>)
 8008ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ae0:	bf00      	nop
 8008ae2:	3728      	adds	r7, #40	@ 0x28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	2000303c 	.word	0x2000303c
 8008aec:	20003018 	.word	0x20003018
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d018      	beq.n	8008b38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b06:	4b14      	ldr	r3, [pc, #80]	@ (8008b58 <vTaskDelay+0x64>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <vTaskDelay+0x32>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60bb      	str	r3, [r7, #8]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b26:	f000 f883 	bl	8008c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fe03 	bl	8009738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b32:	f000 f88b 	bl	8008c4c <xTaskResumeAll>
 8008b36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d107      	bne.n	8008b4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b3e:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <vTaskDelay+0x68>)
 8008b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2000303c 	.word	0x2000303c
 8008b5c:	e000ed04 	.word	0xe000ed04

08008b60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b6e:	463a      	mov	r2, r7
 8008b70:	1d39      	adds	r1, r7, #4
 8008b72:	f107 0308 	add.w	r3, r7, #8
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fd98 	bl	80076ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	9202      	str	r2, [sp, #8]
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	2300      	movs	r3, #0
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	4922      	ldr	r1, [pc, #136]	@ (8008c18 <vTaskStartScheduler+0xb8>)
 8008b90:	4822      	ldr	r0, [pc, #136]	@ (8008c1c <vTaskStartScheduler+0xbc>)
 8008b92:	f7ff fd89 	bl	80086a8 <xTaskCreateStatic>
 8008b96:	4603      	mov	r3, r0
 8008b98:	4a21      	ldr	r2, [pc, #132]	@ (8008c20 <vTaskStartScheduler+0xc0>)
 8008b9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b9c:	4b20      	ldr	r3, [pc, #128]	@ (8008c20 <vTaskStartScheduler+0xc0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e001      	b.n	8008bae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d102      	bne.n	8008bba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bb4:	f000 fe14 	bl	80097e0 <xTimerCreateTimerTask>
 8008bb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d116      	bne.n	8008bee <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd4:	4b13      	ldr	r3, [pc, #76]	@ (8008c24 <vTaskStartScheduler+0xc4>)
 8008bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bdc:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <vTaskStartScheduler+0xc8>)
 8008bde:	2201      	movs	r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008be2:	4b12      	ldr	r3, [pc, #72]	@ (8008c2c <vTaskStartScheduler+0xcc>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008be8:	f001 f9e2 	bl	8009fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bec:	e00f      	b.n	8008c0e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf4:	d10b      	bne.n	8008c0e <vTaskStartScheduler+0xae>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60fb      	str	r3, [r7, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <vTaskStartScheduler+0xaa>
}
 8008c0e:	bf00      	nop
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	08010e14 	.word	0x08010e14
 8008c1c:	08009251 	.word	0x08009251
 8008c20:	20003038 	.word	0x20003038
 8008c24:	20003034 	.word	0x20003034
 8008c28:	20003020 	.word	0x20003020
 8008c2c:	20003018 	.word	0x20003018

08008c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c34:	4b04      	ldr	r3, [pc, #16]	@ (8008c48 <vTaskSuspendAll+0x18>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a03      	ldr	r2, [pc, #12]	@ (8008c48 <vTaskSuspendAll+0x18>)
 8008c3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c3e:	bf00      	nop
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	2000303c 	.word	0x2000303c

08008c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c5a:	4b42      	ldr	r3, [pc, #264]	@ (8008d64 <xTaskResumeAll+0x118>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10b      	bne.n	8008c7a <xTaskResumeAll+0x2e>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	603b      	str	r3, [r7, #0]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c7a:	f001 fa3d 	bl	800a0f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c7e:	4b39      	ldr	r3, [pc, #228]	@ (8008d64 <xTaskResumeAll+0x118>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	4a37      	ldr	r2, [pc, #220]	@ (8008d64 <xTaskResumeAll+0x118>)
 8008c86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c88:	4b36      	ldr	r3, [pc, #216]	@ (8008d64 <xTaskResumeAll+0x118>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d162      	bne.n	8008d56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c90:	4b35      	ldr	r3, [pc, #212]	@ (8008d68 <xTaskResumeAll+0x11c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d05e      	beq.n	8008d56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c98:	e02f      	b.n	8008cfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9a:	4b34      	ldr	r3, [pc, #208]	@ (8008d6c <xTaskResumeAll+0x120>)
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fdbe 	bl	8007828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe fdb9 	bl	8007828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cba:	4b2d      	ldr	r3, [pc, #180]	@ (8008d70 <xTaskResumeAll+0x124>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d903      	bls.n	8008cca <xTaskResumeAll+0x7e>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d70 <xTaskResumeAll+0x124>)
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4a27      	ldr	r2, [pc, #156]	@ (8008d74 <xTaskResumeAll+0x128>)
 8008cd8:	441a      	add	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7fe fd44 	bl	800776e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cea:	4b23      	ldr	r3, [pc, #140]	@ (8008d78 <xTaskResumeAll+0x12c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008cf4:	4b21      	ldr	r3, [pc, #132]	@ (8008d7c <xTaskResumeAll+0x130>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8008d6c <xTaskResumeAll+0x120>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1cb      	bne.n	8008c9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d08:	f000 fb58 	bl	80093bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008d80 <xTaskResumeAll+0x134>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d010      	beq.n	8008d3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d18:	f000 f846 	bl	8008da8 <xTaskIncrementTick>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008d22:	4b16      	ldr	r3, [pc, #88]	@ (8008d7c <xTaskResumeAll+0x130>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1f1      	bne.n	8008d18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008d34:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <xTaskResumeAll+0x134>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d3a:	4b10      	ldr	r3, [pc, #64]	@ (8008d7c <xTaskResumeAll+0x130>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d46:	4b0f      	ldr	r3, [pc, #60]	@ (8008d84 <xTaskResumeAll+0x138>)
 8008d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d56:	f001 fa01 	bl	800a15c <vPortExitCritical>

	return xAlreadyYielded;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	2000303c 	.word	0x2000303c
 8008d68:	20003014 	.word	0x20003014
 8008d6c:	20002fd4 	.word	0x20002fd4
 8008d70:	2000301c 	.word	0x2000301c
 8008d74:	20002b44 	.word	0x20002b44
 8008d78:	20002b40 	.word	0x20002b40
 8008d7c:	20003028 	.word	0x20003028
 8008d80:	20003024 	.word	0x20003024
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d8e:	4b05      	ldr	r3, [pc, #20]	@ (8008da4 <xTaskGetTickCount+0x1c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d94:	687b      	ldr	r3, [r7, #4]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20003018 	.word	0x20003018

08008da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef0 <xTaskIncrementTick+0x148>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f040 8090 	bne.w	8008edc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8008ef4 <xTaskIncrementTick+0x14c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8008ef4 <xTaskIncrementTick+0x14c>)
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d121      	bne.n	8008e14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dd0:	4b49      	ldr	r3, [pc, #292]	@ (8008ef8 <xTaskIncrementTick+0x150>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	603b      	str	r3, [r7, #0]
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	e7fd      	b.n	8008dee <xTaskIncrementTick+0x46>
 8008df2:	4b41      	ldr	r3, [pc, #260]	@ (8008ef8 <xTaskIncrementTick+0x150>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	4b40      	ldr	r3, [pc, #256]	@ (8008efc <xTaskIncrementTick+0x154>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8008ef8 <xTaskIncrementTick+0x150>)
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	4a3e      	ldr	r2, [pc, #248]	@ (8008efc <xTaskIncrementTick+0x154>)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	4b3e      	ldr	r3, [pc, #248]	@ (8008f00 <xTaskIncrementTick+0x158>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f00 <xTaskIncrementTick+0x158>)
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	f000 fad4 	bl	80093bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e14:	4b3b      	ldr	r3, [pc, #236]	@ (8008f04 <xTaskIncrementTick+0x15c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d349      	bcc.n	8008eb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e1e:	4b36      	ldr	r3, [pc, #216]	@ (8008ef8 <xTaskIncrementTick+0x150>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d104      	bne.n	8008e32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e28:	4b36      	ldr	r3, [pc, #216]	@ (8008f04 <xTaskIncrementTick+0x15c>)
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2e:	601a      	str	r2, [r3, #0]
					break;
 8008e30:	e03f      	b.n	8008eb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e32:	4b31      	ldr	r3, [pc, #196]	@ (8008ef8 <xTaskIncrementTick+0x150>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d203      	bcs.n	8008e52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8008f04 <xTaskIncrementTick+0x15c>)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e50:	e02f      	b.n	8008eb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fce6 	bl	8007828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	3318      	adds	r3, #24
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fcdd 	bl	8007828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e72:	4b25      	ldr	r3, [pc, #148]	@ (8008f08 <xTaskIncrementTick+0x160>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d903      	bls.n	8008e82 <xTaskIncrementTick+0xda>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7e:	4a22      	ldr	r2, [pc, #136]	@ (8008f08 <xTaskIncrementTick+0x160>)
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008f0c <xTaskIncrementTick+0x164>)
 8008e90:	441a      	add	r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f7fe fc68 	bl	800776e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f10 <xTaskIncrementTick+0x168>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d3b8      	bcc.n	8008e1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008eac:	2301      	movs	r3, #1
 8008eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eb0:	e7b5      	b.n	8008e1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eb2:	4b17      	ldr	r3, [pc, #92]	@ (8008f10 <xTaskIncrementTick+0x168>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb8:	4914      	ldr	r1, [pc, #80]	@ (8008f0c <xTaskIncrementTick+0x164>)
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d901      	bls.n	8008ece <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ece:	4b11      	ldr	r3, [pc, #68]	@ (8008f14 <xTaskIncrementTick+0x16c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d007      	beq.n	8008ee6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e004      	b.n	8008ee6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008edc:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <xTaskIncrementTick+0x170>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8008f18 <xTaskIncrementTick+0x170>)
 8008ee4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ee6:	697b      	ldr	r3, [r7, #20]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	2000303c 	.word	0x2000303c
 8008ef4:	20003018 	.word	0x20003018
 8008ef8:	20002fcc 	.word	0x20002fcc
 8008efc:	20002fd0 	.word	0x20002fd0
 8008f00:	2000302c 	.word	0x2000302c
 8008f04:	20003034 	.word	0x20003034
 8008f08:	2000301c 	.word	0x2000301c
 8008f0c:	20002b44 	.word	0x20002b44
 8008f10:	20002b40 	.word	0x20002b40
 8008f14:	20003028 	.word	0x20003028
 8008f18:	20003024 	.word	0x20003024

08008f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f22:	4b28      	ldr	r3, [pc, #160]	@ (8008fc4 <vTaskSwitchContext+0xa8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f2a:	4b27      	ldr	r3, [pc, #156]	@ (8008fc8 <vTaskSwitchContext+0xac>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f30:	e042      	b.n	8008fb8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008f32:	4b25      	ldr	r3, [pc, #148]	@ (8008fc8 <vTaskSwitchContext+0xac>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f38:	4b24      	ldr	r3, [pc, #144]	@ (8008fcc <vTaskSwitchContext+0xb0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	e011      	b.n	8008f64 <vTaskSwitchContext+0x48>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10b      	bne.n	8008f5e <vTaskSwitchContext+0x42>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	607b      	str	r3, [r7, #4]
}
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	e7fd      	b.n	8008f5a <vTaskSwitchContext+0x3e>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	491a      	ldr	r1, [pc, #104]	@ (8008fd0 <vTaskSwitchContext+0xb4>)
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0e3      	beq.n	8008f40 <vTaskSwitchContext+0x24>
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4a13      	ldr	r2, [pc, #76]	@ (8008fd0 <vTaskSwitchContext+0xb4>)
 8008f84:	4413      	add	r3, r2
 8008f86:	60bb      	str	r3, [r7, #8]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d104      	bne.n	8008fa8 <vTaskSwitchContext+0x8c>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	605a      	str	r2, [r3, #4]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	4a09      	ldr	r2, [pc, #36]	@ (8008fd4 <vTaskSwitchContext+0xb8>)
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	4a06      	ldr	r2, [pc, #24]	@ (8008fcc <vTaskSwitchContext+0xb0>)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6013      	str	r3, [r2, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	2000303c 	.word	0x2000303c
 8008fc8:	20003028 	.word	0x20003028
 8008fcc:	2000301c 	.word	0x2000301c
 8008fd0:	20002b44 	.word	0x20002b44
 8008fd4:	20002b40 	.word	0x20002b40

08008fd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10b      	bne.n	8009000 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
}
 8008ffa:	bf00      	nop
 8008ffc:	bf00      	nop
 8008ffe:	e7fd      	b.n	8008ffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <vTaskPlaceOnEventList+0x48>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3318      	adds	r3, #24
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fe fbd4 	bl	80077b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800900e:	2101      	movs	r1, #1
 8009010:	6838      	ldr	r0, [r7, #0]
 8009012:	f000 fb91 	bl	8009738 <prvAddCurrentTaskToDelayedList>
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20002b40 	.word	0x20002b40

08009024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	617b      	str	r3, [r7, #20]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800904e:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <vTaskPlaceOnEventListRestricted+0x54>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3318      	adds	r3, #24
 8009054:	4619      	mov	r1, r3
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7fe fb89 	bl	800776e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
 8009066:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	68b8      	ldr	r0, [r7, #8]
 800906c:	f000 fb64 	bl	8009738 <prvAddCurrentTaskToDelayedList>
	}
 8009070:	bf00      	nop
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20002b40 	.word	0x20002b40

0800907c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10b      	bne.n	80090aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60fb      	str	r3, [r7, #12]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3318      	adds	r3, #24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fbba 	bl	8007828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090b4:	4b1d      	ldr	r3, [pc, #116]	@ (800912c <xTaskRemoveFromEventList+0xb0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d11d      	bne.n	80090f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	3304      	adds	r3, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fbb1 	bl	8007828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ca:	4b19      	ldr	r3, [pc, #100]	@ (8009130 <xTaskRemoveFromEventList+0xb4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d903      	bls.n	80090da <xTaskRemoveFromEventList+0x5e>
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d6:	4a16      	ldr	r2, [pc, #88]	@ (8009130 <xTaskRemoveFromEventList+0xb4>)
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4a13      	ldr	r2, [pc, #76]	@ (8009134 <xTaskRemoveFromEventList+0xb8>)
 80090e8:	441a      	add	r2, r3
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f7fe fb3c 	bl	800776e <vListInsertEnd>
 80090f6:	e005      	b.n	8009104 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3318      	adds	r3, #24
 80090fc:	4619      	mov	r1, r3
 80090fe:	480e      	ldr	r0, [pc, #56]	@ (8009138 <xTaskRemoveFromEventList+0xbc>)
 8009100:	f7fe fb35 	bl	800776e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009108:	4b0c      	ldr	r3, [pc, #48]	@ (800913c <xTaskRemoveFromEventList+0xc0>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	429a      	cmp	r2, r3
 8009110:	d905      	bls.n	800911e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009116:	4b0a      	ldr	r3, [pc, #40]	@ (8009140 <xTaskRemoveFromEventList+0xc4>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	e001      	b.n	8009122 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009122:	697b      	ldr	r3, [r7, #20]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	2000303c 	.word	0x2000303c
 8009130:	2000301c 	.word	0x2000301c
 8009134:	20002b44 	.word	0x20002b44
 8009138:	20002fd4 	.word	0x20002fd4
 800913c:	20002b40 	.word	0x20002b40
 8009140:	20003028 	.word	0x20003028

08009144 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <vTaskInternalSetTimeOutState+0x24>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009154:	4b05      	ldr	r3, [pc, #20]	@ (800916c <vTaskInternalSetTimeOutState+0x28>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	605a      	str	r2, [r3, #4]
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	2000302c 	.word	0x2000302c
 800916c:	20003018 	.word	0x20003018

08009170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10b      	bne.n	8009198 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	613b      	str	r3, [r7, #16]
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	e7fd      	b.n	8009194 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80091b6:	f000 ff9f 	bl	800a0f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009230 <xTaskCheckForTimeOut+0xc0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d2:	d102      	bne.n	80091da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	e023      	b.n	8009222 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b15      	ldr	r3, [pc, #84]	@ (8009234 <xTaskCheckForTimeOut+0xc4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d007      	beq.n	80091f6 <xTaskCheckForTimeOut+0x86>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d302      	bcc.n	80091f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091f0:	2301      	movs	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
 80091f4:	e015      	b.n	8009222 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d20b      	bcs.n	8009218 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff ff99 	bl	8009144 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
 8009216:	e004      	b.n	8009222 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800921e:	2301      	movs	r3, #1
 8009220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009222:	f000 ff9b 	bl	800a15c <vPortExitCritical>

	return xReturn;
 8009226:	69fb      	ldr	r3, [r7, #28]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20003018 	.word	0x20003018
 8009234:	2000302c 	.word	0x2000302c

08009238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009238:	b480      	push	{r7}
 800923a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800923c:	4b03      	ldr	r3, [pc, #12]	@ (800924c <vTaskMissedYield+0x14>)
 800923e:	2201      	movs	r2, #1
 8009240:	601a      	str	r2, [r3, #0]
}
 8009242:	bf00      	nop
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	20003028 	.word	0x20003028

08009250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009258:	f000 f852 	bl	8009300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800925c:	4b06      	ldr	r3, [pc, #24]	@ (8009278 <prvIdleTask+0x28>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d9f9      	bls.n	8009258 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009264:	4b05      	ldr	r3, [pc, #20]	@ (800927c <prvIdleTask+0x2c>)
 8009266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009274:	e7f0      	b.n	8009258 <prvIdleTask+0x8>
 8009276:	bf00      	nop
 8009278:	20002b44 	.word	0x20002b44
 800927c:	e000ed04 	.word	0xe000ed04

08009280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009286:	2300      	movs	r3, #0
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	e00c      	b.n	80092a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4a12      	ldr	r2, [pc, #72]	@ (80092e0 <prvInitialiseTaskLists+0x60>)
 8009298:	4413      	add	r3, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fa3a 	bl	8007714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3301      	adds	r3, #1
 80092a4:	607b      	str	r3, [r7, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b37      	cmp	r3, #55	@ 0x37
 80092aa:	d9ef      	bls.n	800928c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092ac:	480d      	ldr	r0, [pc, #52]	@ (80092e4 <prvInitialiseTaskLists+0x64>)
 80092ae:	f7fe fa31 	bl	8007714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092b2:	480d      	ldr	r0, [pc, #52]	@ (80092e8 <prvInitialiseTaskLists+0x68>)
 80092b4:	f7fe fa2e 	bl	8007714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092b8:	480c      	ldr	r0, [pc, #48]	@ (80092ec <prvInitialiseTaskLists+0x6c>)
 80092ba:	f7fe fa2b 	bl	8007714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092be:	480c      	ldr	r0, [pc, #48]	@ (80092f0 <prvInitialiseTaskLists+0x70>)
 80092c0:	f7fe fa28 	bl	8007714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092c4:	480b      	ldr	r0, [pc, #44]	@ (80092f4 <prvInitialiseTaskLists+0x74>)
 80092c6:	f7fe fa25 	bl	8007714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ca:	4b0b      	ldr	r3, [pc, #44]	@ (80092f8 <prvInitialiseTaskLists+0x78>)
 80092cc:	4a05      	ldr	r2, [pc, #20]	@ (80092e4 <prvInitialiseTaskLists+0x64>)
 80092ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092d0:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <prvInitialiseTaskLists+0x7c>)
 80092d2:	4a05      	ldr	r2, [pc, #20]	@ (80092e8 <prvInitialiseTaskLists+0x68>)
 80092d4:	601a      	str	r2, [r3, #0]
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20002b44 	.word	0x20002b44
 80092e4:	20002fa4 	.word	0x20002fa4
 80092e8:	20002fb8 	.word	0x20002fb8
 80092ec:	20002fd4 	.word	0x20002fd4
 80092f0:	20002fe8 	.word	0x20002fe8
 80092f4:	20003000 	.word	0x20003000
 80092f8:	20002fcc 	.word	0x20002fcc
 80092fc:	20002fd0 	.word	0x20002fd0

08009300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009306:	e019      	b.n	800933c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009308:	f000 fef6 	bl	800a0f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930c:	4b10      	ldr	r3, [pc, #64]	@ (8009350 <prvCheckTasksWaitingTermination+0x50>)
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3304      	adds	r3, #4
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fa85 	bl	8007828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800931e:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <prvCheckTasksWaitingTermination+0x54>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3b01      	subs	r3, #1
 8009324:	4a0b      	ldr	r2, [pc, #44]	@ (8009354 <prvCheckTasksWaitingTermination+0x54>)
 8009326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009328:	4b0b      	ldr	r3, [pc, #44]	@ (8009358 <prvCheckTasksWaitingTermination+0x58>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3b01      	subs	r3, #1
 800932e:	4a0a      	ldr	r2, [pc, #40]	@ (8009358 <prvCheckTasksWaitingTermination+0x58>)
 8009330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009332:	f000 ff13 	bl	800a15c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f810 	bl	800935c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800933c:	4b06      	ldr	r3, [pc, #24]	@ (8009358 <prvCheckTasksWaitingTermination+0x58>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e1      	bne.n	8009308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20002fe8 	.word	0x20002fe8
 8009354:	20003014 	.word	0x20003014
 8009358:	20002ffc 	.word	0x20002ffc

0800935c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800936a:	2b00      	cmp	r3, #0
 800936c:	d108      	bne.n	8009380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009372:	4618      	mov	r0, r3
 8009374:	f001 f8b0 	bl	800a4d8 <vPortFree>
				vPortFree( pxTCB );
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 f8ad 	bl	800a4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800937e:	e019      	b.n	80093b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009386:	2b01      	cmp	r3, #1
 8009388:	d103      	bne.n	8009392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 f8a4 	bl	800a4d8 <vPortFree>
	}
 8009390:	e010      	b.n	80093b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009398:	2b02      	cmp	r3, #2
 800939a:	d00b      	beq.n	80093b4 <prvDeleteTCB+0x58>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60fb      	str	r3, [r7, #12]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <prvDeleteTCB+0x54>
	}
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <prvResetNextTaskUnblockTime+0x38>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093cc:	4b0a      	ldr	r3, [pc, #40]	@ (80093f8 <prvResetNextTaskUnblockTime+0x3c>)
 80093ce:	f04f 32ff 	mov.w	r2, #4294967295
 80093d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093d4:	e008      	b.n	80093e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d6:	4b07      	ldr	r3, [pc, #28]	@ (80093f4 <prvResetNextTaskUnblockTime+0x38>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	4a04      	ldr	r2, [pc, #16]	@ (80093f8 <prvResetNextTaskUnblockTime+0x3c>)
 80093e6:	6013      	str	r3, [r2, #0]
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20002fcc 	.word	0x20002fcc
 80093f8:	20003034 	.word	0x20003034

080093fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009402:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <xTaskGetCurrentTaskHandle+0x1c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009408:	687b      	ldr	r3, [r7, #4]
	}
 800940a:	4618      	mov	r0, r3
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	20002b40 	.word	0x20002b40

0800941c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009422:	4b0b      	ldr	r3, [pc, #44]	@ (8009450 <xTaskGetSchedulerState+0x34>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d102      	bne.n	8009430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800942a:	2301      	movs	r3, #1
 800942c:	607b      	str	r3, [r7, #4]
 800942e:	e008      	b.n	8009442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009430:	4b08      	ldr	r3, [pc, #32]	@ (8009454 <xTaskGetSchedulerState+0x38>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009438:	2302      	movs	r3, #2
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	e001      	b.n	8009442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009442:	687b      	ldr	r3, [r7, #4]
	}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20003020 	.word	0x20003020
 8009454:	2000303c 	.word	0x2000303c

08009458 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d051      	beq.n	8009512 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009472:	4b2a      	ldr	r3, [pc, #168]	@ (800951c <xTaskPriorityInherit+0xc4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009478:	429a      	cmp	r2, r3
 800947a:	d241      	bcs.n	8009500 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	db06      	blt.n	8009492 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009484:	4b25      	ldr	r3, [pc, #148]	@ (800951c <xTaskPriorityInherit+0xc4>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6959      	ldr	r1, [r3, #20]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009520 <xTaskPriorityInherit+0xc8>)
 80094a4:	4413      	add	r3, r2
 80094a6:	4299      	cmp	r1, r3
 80094a8:	d122      	bne.n	80094f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe f9ba 	bl	8007828 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094b4:	4b19      	ldr	r3, [pc, #100]	@ (800951c <xTaskPriorityInherit+0xc4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c2:	4b18      	ldr	r3, [pc, #96]	@ (8009524 <xTaskPriorityInherit+0xcc>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d903      	bls.n	80094d2 <xTaskPriorityInherit+0x7a>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <xTaskPriorityInherit+0xcc>)
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4a10      	ldr	r2, [pc, #64]	@ (8009520 <xTaskPriorityInherit+0xc8>)
 80094e0:	441a      	add	r2, r3
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	3304      	adds	r3, #4
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f7fe f940 	bl	800776e <vListInsertEnd>
 80094ee:	e004      	b.n	80094fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094f0:	4b0a      	ldr	r3, [pc, #40]	@ (800951c <xTaskPriorityInherit+0xc4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e008      	b.n	8009512 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009504:	4b05      	ldr	r3, [pc, #20]	@ (800951c <xTaskPriorityInherit+0xc4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950a:	429a      	cmp	r2, r3
 800950c:	d201      	bcs.n	8009512 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009512:	68fb      	ldr	r3, [r7, #12]
	}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20002b40 	.word	0x20002b40
 8009520:	20002b44 	.word	0x20002b44
 8009524:	2000301c 	.word	0x2000301c

08009528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d058      	beq.n	80095f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800953e:	4b2f      	ldr	r3, [pc, #188]	@ (80095fc <xTaskPriorityDisinherit+0xd4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	429a      	cmp	r2, r3
 8009546:	d00b      	beq.n	8009560 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	60fb      	str	r3, [r7, #12]
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	e7fd      	b.n	800955c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	60bb      	str	r3, [r7, #8]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009584:	1e5a      	subs	r2, r3, #1
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009592:	429a      	cmp	r2, r3
 8009594:	d02c      	beq.n	80095f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959a:	2b00      	cmp	r3, #0
 800959c:	d128      	bne.n	80095f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe f940 	bl	8007828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009600 <xTaskPriorityDisinherit+0xd8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d903      	bls.n	80095d0 <xTaskPriorityDisinherit+0xa8>
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009600 <xTaskPriorityDisinherit+0xd8>)
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4a09      	ldr	r2, [pc, #36]	@ (8009604 <xTaskPriorityDisinherit+0xdc>)
 80095de:	441a      	add	r2, r3
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe f8c1 	bl	800776e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095f0:	697b      	ldr	r3, [r7, #20]
	}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20002b40 	.word	0x20002b40
 8009600:	2000301c 	.word	0x2000301c
 8009604:	20002b44 	.word	0x20002b44

08009608 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009616:	2301      	movs	r3, #1
 8009618:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d06c      	beq.n	80096fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60fb      	str	r3, [r7, #12]
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d902      	bls.n	8009650 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	e002      	b.n	8009656 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009654:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	429a      	cmp	r2, r3
 800965e:	d04c      	beq.n	80096fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	429a      	cmp	r2, r3
 8009668:	d147      	bne.n	80096fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800966a:	4b26      	ldr	r3, [pc, #152]	@ (8009704 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	429a      	cmp	r2, r3
 8009672:	d10b      	bne.n	800968c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60bb      	str	r3, [r7, #8]
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	e7fd      	b.n	8009688 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009690:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	69fa      	ldr	r2, [r7, #28]
 8009696:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	db04      	blt.n	80096aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	6959      	ldr	r1, [r3, #20]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4a13      	ldr	r2, [pc, #76]	@ (8009708 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80096ba:	4413      	add	r3, r2
 80096bc:	4299      	cmp	r1, r3
 80096be:	d11c      	bne.n	80096fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	3304      	adds	r3, #4
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe f8af 	bl	8007828 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ce:	4b0f      	ldr	r3, [pc, #60]	@ (800970c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d903      	bls.n	80096de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	4a0c      	ldr	r2, [pc, #48]	@ (800970c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4a07      	ldr	r2, [pc, #28]	@ (8009708 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80096ec:	441a      	add	r2, r3
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7fe f83a 	bl	800776e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096fa:	bf00      	nop
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20002b40 	.word	0x20002b40
 8009708:	20002b44 	.word	0x20002b44
 800970c:	2000301c 	.word	0x2000301c

08009710 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009714:	4b07      	ldr	r3, [pc, #28]	@ (8009734 <pvTaskIncrementMutexHeldCount+0x24>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800971c:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <pvTaskIncrementMutexHeldCount+0x24>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009722:	3201      	adds	r2, #1
 8009724:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009726:	4b03      	ldr	r3, [pc, #12]	@ (8009734 <pvTaskIncrementMutexHeldCount+0x24>)
 8009728:	681b      	ldr	r3, [r3, #0]
	}
 800972a:	4618      	mov	r0, r3
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20002b40 	.word	0x20002b40

08009738 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009742:	4b21      	ldr	r3, [pc, #132]	@ (80097c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009748:	4b20      	ldr	r3, [pc, #128]	@ (80097cc <prvAddCurrentTaskToDelayedList+0x94>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3304      	adds	r3, #4
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe f86a 	bl	8007828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d10a      	bne.n	8009772 <prvAddCurrentTaskToDelayedList+0x3a>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009762:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3304      	adds	r3, #4
 8009768:	4619      	mov	r1, r3
 800976a:	4819      	ldr	r0, [pc, #100]	@ (80097d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800976c:	f7fd ffff 	bl	800776e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009770:	e026      	b.n	80097c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4413      	add	r3, r2
 8009778:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800977a:	4b14      	ldr	r3, [pc, #80]	@ (80097cc <prvAddCurrentTaskToDelayedList+0x94>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	429a      	cmp	r2, r3
 8009788:	d209      	bcs.n	800979e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800978a:	4b12      	ldr	r3, [pc, #72]	@ (80097d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4b0f      	ldr	r3, [pc, #60]	@ (80097cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3304      	adds	r3, #4
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7fe f80d 	bl	80077b6 <vListInsert>
}
 800979c:	e010      	b.n	80097c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800979e:	4b0e      	ldr	r3, [pc, #56]	@ (80097d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b0a      	ldr	r3, [pc, #40]	@ (80097cc <prvAddCurrentTaskToDelayedList+0x94>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3304      	adds	r3, #4
 80097a8:	4619      	mov	r1, r3
 80097aa:	4610      	mov	r0, r2
 80097ac:	f7fe f803 	bl	80077b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097b0:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d202      	bcs.n	80097c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097ba:	4a08      	ldr	r2, [pc, #32]	@ (80097dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6013      	str	r3, [r2, #0]
}
 80097c0:	bf00      	nop
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20003018 	.word	0x20003018
 80097cc:	20002b40 	.word	0x20002b40
 80097d0:	20003000 	.word	0x20003000
 80097d4:	20002fd0 	.word	0x20002fd0
 80097d8:	20002fcc 	.word	0x20002fcc
 80097dc:	20003034 	.word	0x20003034

080097e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	@ 0x28
 80097e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097ea:	f000 fb13 	bl	8009e14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009864 <xTimerCreateTimerTask+0x84>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d021      	beq.n	800983a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097fe:	1d3a      	adds	r2, r7, #4
 8009800:	f107 0108 	add.w	r1, r7, #8
 8009804:	f107 030c 	add.w	r3, r7, #12
 8009808:	4618      	mov	r0, r3
 800980a:	f7fd ff69 	bl	80076e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	9202      	str	r2, [sp, #8]
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	2302      	movs	r3, #2
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2300      	movs	r3, #0
 800981e:	460a      	mov	r2, r1
 8009820:	4911      	ldr	r1, [pc, #68]	@ (8009868 <xTimerCreateTimerTask+0x88>)
 8009822:	4812      	ldr	r0, [pc, #72]	@ (800986c <xTimerCreateTimerTask+0x8c>)
 8009824:	f7fe ff40 	bl	80086a8 <xTaskCreateStatic>
 8009828:	4603      	mov	r3, r0
 800982a:	4a11      	ldr	r2, [pc, #68]	@ (8009870 <xTimerCreateTimerTask+0x90>)
 800982c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800982e:	4b10      	ldr	r3, [pc, #64]	@ (8009870 <xTimerCreateTimerTask+0x90>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009836:	2301      	movs	r3, #1
 8009838:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10b      	bne.n	8009858 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	613b      	str	r3, [r7, #16]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009858:	697b      	ldr	r3, [r7, #20]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20003070 	.word	0x20003070
 8009868:	08010e1c 	.word	0x08010e1c
 800986c:	080099ad 	.word	0x080099ad
 8009870:	20003074 	.word	0x20003074

08009874 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	@ 0x28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	623b      	str	r3, [r7, #32]
}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098a4:	4b19      	ldr	r3, [pc, #100]	@ (800990c <xTimerGenericCommand+0x98>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d02a      	beq.n	8009902 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	dc18      	bgt.n	80098f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098be:	f7ff fdad 	bl	800941c <xTaskGetSchedulerState>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d109      	bne.n	80098dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098c8:	4b10      	ldr	r3, [pc, #64]	@ (800990c <xTimerGenericCommand+0x98>)
 80098ca:	6818      	ldr	r0, [r3, #0]
 80098cc:	f107 0110 	add.w	r1, r7, #16
 80098d0:	2300      	movs	r3, #0
 80098d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098d4:	f7fe f9d0 	bl	8007c78 <xQueueGenericSend>
 80098d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80098da:	e012      	b.n	8009902 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098dc:	4b0b      	ldr	r3, [pc, #44]	@ (800990c <xTimerGenericCommand+0x98>)
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	f107 0110 	add.w	r1, r7, #16
 80098e4:	2300      	movs	r3, #0
 80098e6:	2200      	movs	r2, #0
 80098e8:	f7fe f9c6 	bl	8007c78 <xQueueGenericSend>
 80098ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80098ee:	e008      	b.n	8009902 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098f0:	4b06      	ldr	r3, [pc, #24]	@ (800990c <xTimerGenericCommand+0x98>)
 80098f2:	6818      	ldr	r0, [r3, #0]
 80098f4:	f107 0110 	add.w	r1, r7, #16
 80098f8:	2300      	movs	r3, #0
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	f7fe fabe 	bl	8007e7c <xQueueGenericSendFromISR>
 8009900:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009904:	4618      	mov	r0, r3
 8009906:	3728      	adds	r7, #40	@ 0x28
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20003070 	.word	0x20003070

08009910 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af02      	add	r7, sp, #8
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991a:	4b23      	ldr	r3, [pc, #140]	@ (80099a8 <prvProcessExpiredTimer+0x98>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	3304      	adds	r3, #4
 8009928:	4618      	mov	r0, r3
 800992a:	f7fd ff7d 	bl	8007828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d023      	beq.n	8009984 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	18d1      	adds	r1, r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	6978      	ldr	r0, [r7, #20]
 800994a:	f000 f8d5 	bl	8009af8 <prvInsertTimerInActiveList>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d020      	beq.n	8009996 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009954:	2300      	movs	r3, #0
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	2100      	movs	r1, #0
 800995e:	6978      	ldr	r0, [r7, #20]
 8009960:	f7ff ff88 	bl	8009874 <xTimerGenericCommand>
 8009964:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d114      	bne.n	8009996 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	60fb      	str	r3, [r7, #12]
}
 800997e:	bf00      	nop
 8009980:	bf00      	nop
 8009982:	e7fd      	b.n	8009980 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	6978      	ldr	r0, [r7, #20]
 800999c:	4798      	blx	r3
}
 800999e:	bf00      	nop
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20003068 	.word	0x20003068

080099ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 f859 	bl	8009a70 <prvGetNextExpireTime>
 80099be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4619      	mov	r1, r3
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f805 	bl	80099d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099ca:	f000 f8d7 	bl	8009b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099ce:	bf00      	nop
 80099d0:	e7f0      	b.n	80099b4 <prvTimerTask+0x8>
	...

080099d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099de:	f7ff f927 	bl	8008c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099e2:	f107 0308 	add.w	r3, r7, #8
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 f866 	bl	8009ab8 <prvSampleTimeNow>
 80099ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d130      	bne.n	8009a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <prvProcessTimerOrBlockTask+0x3c>
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d806      	bhi.n	8009a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a02:	f7ff f923 	bl	8008c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a06:	68f9      	ldr	r1, [r7, #12]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff ff81 	bl	8009910 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a0e:	e024      	b.n	8009a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d008      	beq.n	8009a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <prvProcessTimerOrBlockTask+0x90>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <prvProcessTimerOrBlockTask+0x50>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e000      	b.n	8009a26 <prvProcessTimerOrBlockTask+0x52>
 8009a24:	2300      	movs	r3, #0
 8009a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a28:	4b0f      	ldr	r3, [pc, #60]	@ (8009a68 <prvProcessTimerOrBlockTask+0x94>)
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4619      	mov	r1, r3
 8009a36:	f7fe fe03 	bl	8008640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a3a:	f7ff f907 	bl	8008c4c <xTaskResumeAll>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a44:	4b09      	ldr	r3, [pc, #36]	@ (8009a6c <prvProcessTimerOrBlockTask+0x98>)
 8009a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	f3bf 8f6f 	isb	sy
}
 8009a54:	e001      	b.n	8009a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a56:	f7ff f8f9 	bl	8008c4c <xTaskResumeAll>
}
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	2000306c 	.word	0x2000306c
 8009a68:	20003070 	.word	0x20003070
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a78:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab4 <prvGetNextExpireTime+0x44>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <prvGetNextExpireTime+0x16>
 8009a82:	2201      	movs	r2, #1
 8009a84:	e000      	b.n	8009a88 <prvGetNextExpireTime+0x18>
 8009a86:	2200      	movs	r2, #0
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a94:	4b07      	ldr	r3, [pc, #28]	@ (8009ab4 <prvGetNextExpireTime+0x44>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	e001      	b.n	8009aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20003068 	.word	0x20003068

08009ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ac0:	f7ff f962 	bl	8008d88 <xTaskGetTickCount>
 8009ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8009af4 <prvSampleTimeNow+0x3c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d205      	bcs.n	8009adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ad0:	f000 f93a 	bl	8009d48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	e002      	b.n	8009ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ae2:	4a04      	ldr	r2, [pc, #16]	@ (8009af4 <prvSampleTimeNow+0x3c>)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20003078 	.word	0x20003078

08009af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b06:	2300      	movs	r3, #0
 8009b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d812      	bhi.n	8009b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	1ad2      	subs	r2, r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e01b      	b.n	8009b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <prvInsertTimerInActiveList+0x7c>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f7fd fe3a 	bl	80077b6 <vListInsert>
 8009b42:	e012      	b.n	8009b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d206      	bcs.n	8009b5a <prvInsertTimerInActiveList+0x62>
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d302      	bcc.n	8009b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	e007      	b.n	8009b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b5a:	4b07      	ldr	r3, [pc, #28]	@ (8009b78 <prvInsertTimerInActiveList+0x80>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3304      	adds	r3, #4
 8009b62:	4619      	mov	r1, r3
 8009b64:	4610      	mov	r0, r2
 8009b66:	f7fd fe26 	bl	80077b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	2000306c 	.word	0x2000306c
 8009b78:	20003068 	.word	0x20003068

08009b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08e      	sub	sp, #56	@ 0x38
 8009b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b82:	e0ce      	b.n	8009d22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da19      	bge.n	8009bbe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b8a:	1d3b      	adds	r3, r7, #4
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	61fb      	str	r3, [r7, #28]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bb4:	6850      	ldr	r0, [r2, #4]
 8009bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bb8:	6892      	ldr	r2, [r2, #8]
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f2c0 80ae 	blt.w	8009d22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fd fe26 	bl	8007828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bdc:	463b      	mov	r3, r7
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff ff6a 	bl	8009ab8 <prvSampleTimeNow>
 8009be4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b09      	cmp	r3, #9
 8009bea:	f200 8097 	bhi.w	8009d1c <prvProcessReceivedCommands+0x1a0>
 8009bee:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <prvProcessReceivedCommands+0x78>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c1d 	.word	0x08009c1d
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c1d 	.word	0x08009c1d
 8009c00:	08009c93 	.word	0x08009c93
 8009c04:	08009ca7 	.word	0x08009ca7
 8009c08:	08009cf3 	.word	0x08009cf3
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c1d 	.word	0x08009c1d
 8009c14:	08009c93 	.word	0x08009c93
 8009c18:	08009ca7 	.word	0x08009ca7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c22:	f043 0301 	orr.w	r3, r3, #1
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	18d1      	adds	r1, r2, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c3c:	f7ff ff5c 	bl	8009af8 <prvInsertTimerInActiveList>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d06c      	beq.n	8009d20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d061      	beq.n	8009d20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	441a      	add	r2, r3
 8009c64:	2300      	movs	r3, #0
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c6e:	f7ff fe01 	bl	8009874 <xTimerGenericCommand>
 8009c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d152      	bne.n	8009d20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	61bb      	str	r3, [r7, #24]
}
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	e7fd      	b.n	8009c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c98:	f023 0301 	bic.w	r3, r3, #1
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ca4:	e03d      	b.n	8009d22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cac:	f043 0301 	orr.w	r3, r3, #1
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	617b      	str	r3, [r7, #20]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce4:	18d1      	adds	r1, r2, r3
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cec:	f7ff ff04 	bl	8009af8 <prvInsertTimerInActiveList>
					break;
 8009cf0:	e017      	b.n	8009d22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d02:	f000 fbe9 	bl	800a4d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d06:	e00c      	b.n	8009d22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d1a:	e002      	b.n	8009d22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009d1c:	bf00      	nop
 8009d1e:	e000      	b.n	8009d22 <prvProcessReceivedCommands+0x1a6>
					break;
 8009d20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d22:	4b08      	ldr	r3, [pc, #32]	@ (8009d44 <prvProcessReceivedCommands+0x1c8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	1d39      	adds	r1, r7, #4
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe f944 	bl	8007fb8 <xQueueReceive>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f47f af26 	bne.w	8009b84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	3730      	adds	r7, #48	@ 0x30
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20003070 	.word	0x20003070

08009d48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d4e:	e049      	b.n	8009de4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d50:	4b2e      	ldr	r3, [pc, #184]	@ (8009e0c <prvSwitchTimerLists+0xc4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8009e0c <prvSwitchTimerLists+0xc4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fd fd5d 	bl	8007828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d02f      	beq.n	8009de4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d90e      	bls.n	8009db4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009da2:	4b1a      	ldr	r3, [pc, #104]	@ (8009e0c <prvSwitchTimerLists+0xc4>)
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3304      	adds	r3, #4
 8009daa:	4619      	mov	r1, r3
 8009dac:	4610      	mov	r0, r2
 8009dae:	f7fd fd02 	bl	80077b6 <vListInsert>
 8009db2:	e017      	b.n	8009de4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db4:	2300      	movs	r3, #0
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2300      	movs	r3, #0
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff fd58 	bl	8009874 <xTimerGenericCommand>
 8009dc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10b      	bne.n	8009de4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	603b      	str	r3, [r7, #0]
}
 8009dde:	bf00      	nop
 8009de0:	bf00      	nop
 8009de2:	e7fd      	b.n	8009de0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009de4:	4b09      	ldr	r3, [pc, #36]	@ (8009e0c <prvSwitchTimerLists+0xc4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1b0      	bne.n	8009d50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009dee:	4b07      	ldr	r3, [pc, #28]	@ (8009e0c <prvSwitchTimerLists+0xc4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009df4:	4b06      	ldr	r3, [pc, #24]	@ (8009e10 <prvSwitchTimerLists+0xc8>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a04      	ldr	r2, [pc, #16]	@ (8009e0c <prvSwitchTimerLists+0xc4>)
 8009dfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dfc:	4a04      	ldr	r2, [pc, #16]	@ (8009e10 <prvSwitchTimerLists+0xc8>)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	6013      	str	r3, [r2, #0]
}
 8009e02:	bf00      	nop
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20003068 	.word	0x20003068
 8009e10:	2000306c 	.word	0x2000306c

08009e14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e1a:	f000 f96d 	bl	800a0f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e1e:	4b15      	ldr	r3, [pc, #84]	@ (8009e74 <prvCheckForValidListAndQueue+0x60>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d120      	bne.n	8009e68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e26:	4814      	ldr	r0, [pc, #80]	@ (8009e78 <prvCheckForValidListAndQueue+0x64>)
 8009e28:	f7fd fc74 	bl	8007714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e2c:	4813      	ldr	r0, [pc, #76]	@ (8009e7c <prvCheckForValidListAndQueue+0x68>)
 8009e2e:	f7fd fc71 	bl	8007714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e32:	4b13      	ldr	r3, [pc, #76]	@ (8009e80 <prvCheckForValidListAndQueue+0x6c>)
 8009e34:	4a10      	ldr	r2, [pc, #64]	@ (8009e78 <prvCheckForValidListAndQueue+0x64>)
 8009e36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e38:	4b12      	ldr	r3, [pc, #72]	@ (8009e84 <prvCheckForValidListAndQueue+0x70>)
 8009e3a:	4a10      	ldr	r2, [pc, #64]	@ (8009e7c <prvCheckForValidListAndQueue+0x68>)
 8009e3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	4b11      	ldr	r3, [pc, #68]	@ (8009e88 <prvCheckForValidListAndQueue+0x74>)
 8009e44:	4a11      	ldr	r2, [pc, #68]	@ (8009e8c <prvCheckForValidListAndQueue+0x78>)
 8009e46:	2110      	movs	r1, #16
 8009e48:	200a      	movs	r0, #10
 8009e4a:	f7fd fd81 	bl	8007950 <xQueueGenericCreateStatic>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	4a08      	ldr	r2, [pc, #32]	@ (8009e74 <prvCheckForValidListAndQueue+0x60>)
 8009e52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e54:	4b07      	ldr	r3, [pc, #28]	@ (8009e74 <prvCheckForValidListAndQueue+0x60>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d005      	beq.n	8009e68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <prvCheckForValidListAndQueue+0x60>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	490b      	ldr	r1, [pc, #44]	@ (8009e90 <prvCheckForValidListAndQueue+0x7c>)
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fbc2 	bl	80085ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e68:	f000 f978 	bl	800a15c <vPortExitCritical>
}
 8009e6c:	bf00      	nop
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20003070 	.word	0x20003070
 8009e78:	20003040 	.word	0x20003040
 8009e7c:	20003054 	.word	0x20003054
 8009e80:	20003068 	.word	0x20003068
 8009e84:	2000306c 	.word	0x2000306c
 8009e88:	2000311c 	.word	0x2000311c
 8009e8c:	2000307c 	.word	0x2000307c
 8009e90:	08010e24 	.word	0x08010e24

08009e94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3b04      	subs	r3, #4
 8009ea4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3b04      	subs	r3, #4
 8009eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f023 0201 	bic.w	r2, r3, #1
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef8 <pxPortInitialiseStack+0x64>)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3b14      	subs	r3, #20
 8009ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f06f 0202 	mvn.w	r2, #2
 8009ee2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3b20      	subs	r3, #32
 8009ee8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	08009efd 	.word	0x08009efd

08009efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f06:	4b13      	ldr	r3, [pc, #76]	@ (8009f54 <prvTaskExitError+0x58>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0e:	d00b      	beq.n	8009f28 <prvTaskExitError+0x2c>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <prvTaskExitError+0x28>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	60bb      	str	r3, [r7, #8]
}
 8009f3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f3c:	bf00      	nop
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0fc      	beq.n	8009f3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	20000018 	.word	0x20000018
	...

08009f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f60:	4b07      	ldr	r3, [pc, #28]	@ (8009f80 <pxCurrentTCBConst2>)
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6808      	ldr	r0, [r1, #0]
 8009f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f380 8809 	msr	PSP, r0
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f380 8811 	msr	BASEPRI, r0
 8009f7a:	4770      	bx	lr
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst2>:
 8009f80:	20002b40 	.word	0x20002b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f88:	4808      	ldr	r0, [pc, #32]	@ (8009fac <prvPortStartFirstTask+0x24>)
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	f380 8808 	msr	MSP, r0
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8814 	msr	CONTROL, r0
 8009f9a:	b662      	cpsie	i
 8009f9c:	b661      	cpsie	f
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	df00      	svc	0
 8009fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009faa:	bf00      	nop
 8009fac:	e000ed08 	.word	0xe000ed08

08009fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fb6:	4b47      	ldr	r3, [pc, #284]	@ (800a0d4 <xPortStartScheduler+0x124>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a47      	ldr	r2, [pc, #284]	@ (800a0d8 <xPortStartScheduler+0x128>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10b      	bne.n	8009fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60fb      	str	r3, [r7, #12]
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	e7fd      	b.n	8009fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fd8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0d4 <xPortStartScheduler+0x124>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a3f      	ldr	r2, [pc, #252]	@ (800a0dc <xPortStartScheduler+0x12c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d10b      	bne.n	8009ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8009fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	613b      	str	r3, [r7, #16]
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	e7fd      	b.n	8009ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ffa:	4b39      	ldr	r3, [pc, #228]	@ (800a0e0 <xPortStartScheduler+0x130>)
 8009ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	22ff      	movs	r2, #255	@ 0xff
 800a00a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	4b31      	ldr	r3, [pc, #196]	@ (800a0e4 <xPortStartScheduler+0x134>)
 800a020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a022:	4b31      	ldr	r3, [pc, #196]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a024:	2207      	movs	r2, #7
 800a026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a028:	e009      	b.n	800a03e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a02a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3b01      	subs	r3, #1
 800a030:	4a2d      	ldr	r2, [pc, #180]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a034:	78fb      	ldrb	r3, [r7, #3]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a046:	2b80      	cmp	r3, #128	@ 0x80
 800a048:	d0ef      	beq.n	800a02a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a04a:	4b27      	ldr	r3, [pc, #156]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1c3 0307 	rsb	r3, r3, #7
 800a052:	2b04      	cmp	r3, #4
 800a054:	d00b      	beq.n	800a06e <xPortStartScheduler+0xbe>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60bb      	str	r3, [r7, #8]
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	e7fd      	b.n	800a06a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a06e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a078:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a080:	4a19      	ldr	r2, [pc, #100]	@ (800a0e8 <xPortStartScheduler+0x138>)
 800a082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a08c:	4b17      	ldr	r3, [pc, #92]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a16      	ldr	r2, [pc, #88]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a098:	4b14      	ldr	r3, [pc, #80]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a13      	ldr	r2, [pc, #76]	@ (800a0ec <xPortStartScheduler+0x13c>)
 800a09e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0a4:	f000 f8da 	bl	800a25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0a8:	4b11      	ldr	r3, [pc, #68]	@ (800a0f0 <xPortStartScheduler+0x140>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ae:	f000 f8f9 	bl	800a2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0b2:	4b10      	ldr	r3, [pc, #64]	@ (800a0f4 <xPortStartScheduler+0x144>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a0f4 <xPortStartScheduler+0x144>)
 800a0b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0be:	f7ff ff63 	bl	8009f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0c2:	f7fe ff2b 	bl	8008f1c <vTaskSwitchContext>
	prvTaskExitError();
 800a0c6:	f7ff ff19 	bl	8009efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	e000ed00 	.word	0xe000ed00
 800a0d8:	410fc271 	.word	0x410fc271
 800a0dc:	410fc270 	.word	0x410fc270
 800a0e0:	e000e400 	.word	0xe000e400
 800a0e4:	2000316c 	.word	0x2000316c
 800a0e8:	20003170 	.word	0x20003170
 800a0ec:	e000ed20 	.word	0xe000ed20
 800a0f0:	20000018 	.word	0x20000018
 800a0f4:	e000ef34 	.word	0xe000ef34

0800a0f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	607b      	str	r3, [r7, #4]
}
 800a110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a112:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3301      	adds	r3, #1
 800a118:	4a0e      	ldr	r2, [pc, #56]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a11a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <vPortEnterCritical+0x5c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a124:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <vPortEnterCritical+0x60>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <vPortEnterCritical+0x4e>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	603b      	str	r3, [r7, #0]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <vPortEnterCritical+0x4a>
	}
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000018 	.word	0x20000018
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a162:	4b12      	ldr	r3, [pc, #72]	@ (800a1ac <vPortExitCritical+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <vPortExitCritical+0x26>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	607b      	str	r3, [r7, #4]
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	e7fd      	b.n	800a17e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <vPortExitCritical+0x50>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3b01      	subs	r3, #1
 800a188:	4a08      	ldr	r2, [pc, #32]	@ (800a1ac <vPortExitCritical+0x50>)
 800a18a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a18c:	4b07      	ldr	r3, [pc, #28]	@ (800a1ac <vPortExitCritical+0x50>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <vPortExitCritical+0x44>
 800a194:	2300      	movs	r3, #0
 800a196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	f383 8811 	msr	BASEPRI, r3
}
 800a19e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	20000018 	.word	0x20000018

0800a1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1b0:	f3ef 8009 	mrs	r0, PSP
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	4b15      	ldr	r3, [pc, #84]	@ (800a210 <pxCurrentTCBConst>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	f01e 0f10 	tst.w	lr, #16
 800a1c0:	bf08      	it	eq
 800a1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ca:	6010      	str	r0, [r2, #0]
 800a1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1d4:	f380 8811 	msr	BASEPRI, r0
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f7fe fe9c 	bl	8008f1c <vTaskSwitchContext>
 800a1e4:	f04f 0000 	mov.w	r0, #0
 800a1e8:	f380 8811 	msr	BASEPRI, r0
 800a1ec:	bc09      	pop	{r0, r3}
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	6808      	ldr	r0, [r1, #0]
 800a1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f6:	f01e 0f10 	tst.w	lr, #16
 800a1fa:	bf08      	it	eq
 800a1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a200:	f380 8809 	msr	PSP, r0
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w

0800a210 <pxCurrentTCBConst>:
 800a210:	20002b40 	.word	0x20002b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop

0800a218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a232:	f7fe fdb9 	bl	8008da8 <xTaskIncrementTick>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a23c:	4b06      	ldr	r3, [pc, #24]	@ (800a258 <xPortSysTickHandler+0x40>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f383 8811 	msr	BASEPRI, r3
}
 800a24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	e000ed04 	.word	0xe000ed04

0800a25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a260:	4b0b      	ldr	r3, [pc, #44]	@ (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a266:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <vPortSetupTimerInterrupt+0x38>)
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a26c:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <vPortSetupTimerInterrupt+0x3c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a0a      	ldr	r2, [pc, #40]	@ (800a29c <vPortSetupTimerInterrupt+0x40>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	099b      	lsrs	r3, r3, #6
 800a278:	4a09      	ldr	r2, [pc, #36]	@ (800a2a0 <vPortSetupTimerInterrupt+0x44>)
 800a27a:	3b01      	subs	r3, #1
 800a27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a27e:	4b04      	ldr	r3, [pc, #16]	@ (800a290 <vPortSetupTimerInterrupt+0x34>)
 800a280:	2207      	movs	r2, #7
 800a282:	601a      	str	r2, [r3, #0]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	e000e010 	.word	0xe000e010
 800a294:	e000e018 	.word	0xe000e018
 800a298:	2000000c 	.word	0x2000000c
 800a29c:	10624dd3 	.word	0x10624dd3
 800a2a0:	e000e014 	.word	0xe000e014

0800a2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2b4 <vPortEnableVFP+0x10>
 800a2a8:	6801      	ldr	r1, [r0, #0]
 800a2aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ae:	6001      	str	r1, [r0, #0]
 800a2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2b2:	bf00      	nop
 800a2b4:	e000ed88 	.word	0xe000ed88

0800a2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2be:	f3ef 8305 	mrs	r3, IPSR
 800a2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b0f      	cmp	r3, #15
 800a2c8:	d915      	bls.n	800a2f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ca:	4a18      	ldr	r2, [pc, #96]	@ (800a32c <vPortValidateInterruptPriority+0x74>)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2d4:	4b16      	ldr	r3, [pc, #88]	@ (800a330 <vPortValidateInterruptPriority+0x78>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	7afa      	ldrb	r2, [r7, #11]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d20b      	bcs.n	800a2f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	e7fd      	b.n	800a2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a334 <vPortValidateInterruptPriority+0x7c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a338 <vPortValidateInterruptPriority+0x80>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d90b      	bls.n	800a31e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	603b      	str	r3, [r7, #0]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <vPortValidateInterruptPriority+0x62>
	}
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	e000e3f0 	.word	0xe000e3f0
 800a330:	2000316c 	.word	0x2000316c
 800a334:	e000ed0c 	.word	0xe000ed0c
 800a338:	20003170 	.word	0x20003170

0800a33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	@ 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a344:	2300      	movs	r3, #0
 800a346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a348:	f7fe fc72 	bl	8008c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a34c:	4b5c      	ldr	r3, [pc, #368]	@ (800a4c0 <pvPortMalloc+0x184>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a354:	f000 f924 	bl	800a5a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a358:	4b5a      	ldr	r3, [pc, #360]	@ (800a4c4 <pvPortMalloc+0x188>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 8095 	bne.w	800a490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01e      	beq.n	800a3aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a36c:	2208      	movs	r2, #8
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d015      	beq.n	800a3aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f023 0307 	bic.w	r3, r3, #7
 800a384:	3308      	adds	r3, #8
 800a386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <pvPortMalloc+0x6e>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	617b      	str	r3, [r7, #20]
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop
 800a3a8:	e7fd      	b.n	800a3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d06f      	beq.n	800a490 <pvPortMalloc+0x154>
 800a3b0:	4b45      	ldr	r3, [pc, #276]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d86a      	bhi.n	800a490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3ba:	4b44      	ldr	r3, [pc, #272]	@ (800a4cc <pvPortMalloc+0x190>)
 800a3bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3be:	4b43      	ldr	r3, [pc, #268]	@ (800a4cc <pvPortMalloc+0x190>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3c4:	e004      	b.n	800a3d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d903      	bls.n	800a3e2 <pvPortMalloc+0xa6>
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1f1      	bne.n	800a3c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3e2:	4b37      	ldr	r3, [pc, #220]	@ (800a4c0 <pvPortMalloc+0x184>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d051      	beq.n	800a490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	4413      	add	r3, r2
 800a3f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	685a      	ldr	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	1ad2      	subs	r2, r2, r3
 800a406:	2308      	movs	r3, #8
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d920      	bls.n	800a450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	f003 0307 	and.w	r3, r3, #7
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <pvPortMalloc+0xfc>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	613b      	str	r3, [r7, #16]
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	1ad2      	subs	r2, r2, r3
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a44a:	69b8      	ldr	r0, [r7, #24]
 800a44c:	f000 f90a 	bl	800a664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a45c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a45e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <pvPortMalloc+0x194>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d203      	bcs.n	800a472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a46a:	4b17      	ldr	r3, [pc, #92]	@ (800a4c8 <pvPortMalloc+0x18c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a18      	ldr	r2, [pc, #96]	@ (800a4d0 <pvPortMalloc+0x194>)
 800a470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <pvPortMalloc+0x188>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	431a      	orrs	r2, r3
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a486:	4b13      	ldr	r3, [pc, #76]	@ (800a4d4 <pvPortMalloc+0x198>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3301      	adds	r3, #1
 800a48c:	4a11      	ldr	r2, [pc, #68]	@ (800a4d4 <pvPortMalloc+0x198>)
 800a48e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a490:	f7fe fbdc 	bl	8008c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	60fb      	str	r3, [r7, #12]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4b6:	69fb      	ldr	r3, [r7, #28]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3728      	adds	r7, #40	@ 0x28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20006d7c 	.word	0x20006d7c
 800a4c4:	20006d90 	.word	0x20006d90
 800a4c8:	20006d80 	.word	0x20006d80
 800a4cc:	20006d74 	.word	0x20006d74
 800a4d0:	20006d84 	.word	0x20006d84
 800a4d4:	20006d88 	.word	0x20006d88

0800a4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d04f      	beq.n	800a58a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	425b      	negs	r3, r3
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b25      	ldr	r3, [pc, #148]	@ (800a594 <vPortFree+0xbc>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <vPortFree+0x46>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00b      	beq.n	800a53e <vPortFree+0x66>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60bb      	str	r3, [r7, #8]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <vPortFree+0xbc>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11a      	bne.n	800a58a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	4b0e      	ldr	r3, [pc, #56]	@ (800a594 <vPortFree+0xbc>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	43db      	mvns	r3, r3
 800a55e:	401a      	ands	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a564:	f7fe fb64 	bl	8008c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <vPortFree+0xc0>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4413      	add	r3, r2
 800a572:	4a09      	ldr	r2, [pc, #36]	@ (800a598 <vPortFree+0xc0>)
 800a574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a576:	6938      	ldr	r0, [r7, #16]
 800a578:	f000 f874 	bl	800a664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a57c:	4b07      	ldr	r3, [pc, #28]	@ (800a59c <vPortFree+0xc4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	4a06      	ldr	r2, [pc, #24]	@ (800a59c <vPortFree+0xc4>)
 800a584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a586:	f7fe fb61 	bl	8008c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a58a:	bf00      	nop
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20006d90 	.word	0x20006d90
 800a598:	20006d80 	.word	0x20006d80
 800a59c:	20006d8c 	.word	0x20006d8c

0800a5a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a5aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5ac:	4b27      	ldr	r3, [pc, #156]	@ (800a64c <prvHeapInit+0xac>)
 800a5ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00c      	beq.n	800a5d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3307      	adds	r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a64c <prvHeapInit+0xac>)
 800a5d0:	4413      	add	r3, r2
 800a5d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a650 <prvHeapInit+0xb0>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5de:	4b1c      	ldr	r3, [pc, #112]	@ (800a650 <prvHeapInit+0xb0>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4a15      	ldr	r2, [pc, #84]	@ (800a654 <prvHeapInit+0xb4>)
 800a600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a602:	4b14      	ldr	r3, [pc, #80]	@ (800a654 <prvHeapInit+0xb4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a60a:	4b12      	ldr	r3, [pc, #72]	@ (800a654 <prvHeapInit+0xb4>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a620:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <prvHeapInit+0xb4>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4a0a      	ldr	r2, [pc, #40]	@ (800a658 <prvHeapInit+0xb8>)
 800a62e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4a09      	ldr	r2, [pc, #36]	@ (800a65c <prvHeapInit+0xbc>)
 800a636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a638:	4b09      	ldr	r3, [pc, #36]	@ (800a660 <prvHeapInit+0xc0>)
 800a63a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a63e:	601a      	str	r2, [r3, #0]
}
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20003174 	.word	0x20003174
 800a650:	20006d74 	.word	0x20006d74
 800a654:	20006d7c 	.word	0x20006d7c
 800a658:	20006d84 	.word	0x20006d84
 800a65c:	20006d80 	.word	0x20006d80
 800a660:	20006d90 	.word	0x20006d90

0800a664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a66c:	4b28      	ldr	r3, [pc, #160]	@ (800a710 <prvInsertBlockIntoFreeList+0xac>)
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e002      	b.n	800a678 <prvInsertBlockIntoFreeList+0x14>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d8f7      	bhi.n	800a672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d108      	bne.n	800a6a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	441a      	add	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d118      	bne.n	800a6ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	4b15      	ldr	r3, [pc, #84]	@ (800a714 <prvInsertBlockIntoFreeList+0xb0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d00d      	beq.n	800a6e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	441a      	add	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	e008      	b.n	800a6f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a714 <prvInsertBlockIntoFreeList+0xb0>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e003      	b.n	800a6f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d002      	beq.n	800a702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a702:	bf00      	nop
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	20006d74 	.word	0x20006d74
 800a714:	20006d7c 	.word	0x20006d7c

0800a718 <atof>:
 800a718:	2100      	movs	r1, #0
 800a71a:	f000 be09 	b.w	800b330 <strtod>

0800a71e <atoi>:
 800a71e:	220a      	movs	r2, #10
 800a720:	2100      	movs	r1, #0
 800a722:	f000 be8d 	b.w	800b440 <strtol>

0800a726 <sulp>:
 800a726:	b570      	push	{r4, r5, r6, lr}
 800a728:	4604      	mov	r4, r0
 800a72a:	460d      	mov	r5, r1
 800a72c:	ec45 4b10 	vmov	d0, r4, r5
 800a730:	4616      	mov	r6, r2
 800a732:	f004 fc29 	bl	800ef88 <__ulp>
 800a736:	ec51 0b10 	vmov	r0, r1, d0
 800a73a:	b17e      	cbz	r6, 800a75c <sulp+0x36>
 800a73c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a740:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a744:	2b00      	cmp	r3, #0
 800a746:	dd09      	ble.n	800a75c <sulp+0x36>
 800a748:	051b      	lsls	r3, r3, #20
 800a74a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a74e:	2400      	movs	r4, #0
 800a750:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a754:	4622      	mov	r2, r4
 800a756:	462b      	mov	r3, r5
 800a758:	f7f5 ff66 	bl	8000628 <__aeabi_dmul>
 800a75c:	ec41 0b10 	vmov	d0, r0, r1
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	0000      	movs	r0, r0
 800a764:	0000      	movs	r0, r0
	...

0800a768 <_strtod_l>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	b09f      	sub	sp, #124	@ 0x7c
 800a76e:	460c      	mov	r4, r1
 800a770:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a772:	2200      	movs	r2, #0
 800a774:	921a      	str	r2, [sp, #104]	@ 0x68
 800a776:	9005      	str	r0, [sp, #20]
 800a778:	f04f 0a00 	mov.w	sl, #0
 800a77c:	f04f 0b00 	mov.w	fp, #0
 800a780:	460a      	mov	r2, r1
 800a782:	9219      	str	r2, [sp, #100]	@ 0x64
 800a784:	7811      	ldrb	r1, [r2, #0]
 800a786:	292b      	cmp	r1, #43	@ 0x2b
 800a788:	d04a      	beq.n	800a820 <_strtod_l+0xb8>
 800a78a:	d838      	bhi.n	800a7fe <_strtod_l+0x96>
 800a78c:	290d      	cmp	r1, #13
 800a78e:	d832      	bhi.n	800a7f6 <_strtod_l+0x8e>
 800a790:	2908      	cmp	r1, #8
 800a792:	d832      	bhi.n	800a7fa <_strtod_l+0x92>
 800a794:	2900      	cmp	r1, #0
 800a796:	d03b      	beq.n	800a810 <_strtod_l+0xa8>
 800a798:	2200      	movs	r2, #0
 800a79a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a79c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a79e:	782a      	ldrb	r2, [r5, #0]
 800a7a0:	2a30      	cmp	r2, #48	@ 0x30
 800a7a2:	f040 80b2 	bne.w	800a90a <_strtod_l+0x1a2>
 800a7a6:	786a      	ldrb	r2, [r5, #1]
 800a7a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a7ac:	2a58      	cmp	r2, #88	@ 0x58
 800a7ae:	d16e      	bne.n	800a88e <_strtod_l+0x126>
 800a7b0:	9302      	str	r3, [sp, #8]
 800a7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4a8f      	ldr	r2, [pc, #572]	@ (800a9f8 <_strtod_l+0x290>)
 800a7bc:	9805      	ldr	r0, [sp, #20]
 800a7be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a7c0:	a919      	add	r1, sp, #100	@ 0x64
 800a7c2:	f003 fc8f 	bl	800e0e4 <__gethex>
 800a7c6:	f010 060f 	ands.w	r6, r0, #15
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	d005      	beq.n	800a7da <_strtod_l+0x72>
 800a7ce:	2e06      	cmp	r6, #6
 800a7d0:	d128      	bne.n	800a824 <_strtod_l+0xbc>
 800a7d2:	3501      	adds	r5, #1
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a7d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a7da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f040 858e 	bne.w	800b2fe <_strtod_l+0xb96>
 800a7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e4:	b1cb      	cbz	r3, 800a81a <_strtod_l+0xb2>
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a7ec:	ec43 2b10 	vmov	d0, r2, r3
 800a7f0:	b01f      	add	sp, #124	@ 0x7c
 800a7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f6:	2920      	cmp	r1, #32
 800a7f8:	d1ce      	bne.n	800a798 <_strtod_l+0x30>
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	e7c1      	b.n	800a782 <_strtod_l+0x1a>
 800a7fe:	292d      	cmp	r1, #45	@ 0x2d
 800a800:	d1ca      	bne.n	800a798 <_strtod_l+0x30>
 800a802:	2101      	movs	r1, #1
 800a804:	910e      	str	r1, [sp, #56]	@ 0x38
 800a806:	1c51      	adds	r1, r2, #1
 800a808:	9119      	str	r1, [sp, #100]	@ 0x64
 800a80a:	7852      	ldrb	r2, [r2, #1]
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	d1c5      	bne.n	800a79c <_strtod_l+0x34>
 800a810:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a812:	9419      	str	r4, [sp, #100]	@ 0x64
 800a814:	2b00      	cmp	r3, #0
 800a816:	f040 8570 	bne.w	800b2fa <_strtod_l+0xb92>
 800a81a:	4652      	mov	r2, sl
 800a81c:	465b      	mov	r3, fp
 800a81e:	e7e5      	b.n	800a7ec <_strtod_l+0x84>
 800a820:	2100      	movs	r1, #0
 800a822:	e7ef      	b.n	800a804 <_strtod_l+0x9c>
 800a824:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a826:	b13a      	cbz	r2, 800a838 <_strtod_l+0xd0>
 800a828:	2135      	movs	r1, #53	@ 0x35
 800a82a:	a81c      	add	r0, sp, #112	@ 0x70
 800a82c:	f004 fca6 	bl	800f17c <__copybits>
 800a830:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a832:	9805      	ldr	r0, [sp, #20]
 800a834:	f004 f87c 	bl	800e930 <_Bfree>
 800a838:	3e01      	subs	r6, #1
 800a83a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a83c:	2e04      	cmp	r6, #4
 800a83e:	d806      	bhi.n	800a84e <_strtod_l+0xe6>
 800a840:	e8df f006 	tbb	[pc, r6]
 800a844:	201d0314 	.word	0x201d0314
 800a848:	14          	.byte	0x14
 800a849:	00          	.byte	0x00
 800a84a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a84e:	05e1      	lsls	r1, r4, #23
 800a850:	bf48      	it	mi
 800a852:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a856:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a85a:	0d1b      	lsrs	r3, r3, #20
 800a85c:	051b      	lsls	r3, r3, #20
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1bb      	bne.n	800a7da <_strtod_l+0x72>
 800a862:	f002 fcbf 	bl	800d1e4 <__errno>
 800a866:	2322      	movs	r3, #34	@ 0x22
 800a868:	6003      	str	r3, [r0, #0]
 800a86a:	e7b6      	b.n	800a7da <_strtod_l+0x72>
 800a86c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a870:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a874:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a878:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a87c:	e7e7      	b.n	800a84e <_strtod_l+0xe6>
 800a87e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800aa00 <_strtod_l+0x298>
 800a882:	e7e4      	b.n	800a84e <_strtod_l+0xe6>
 800a884:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a888:	f04f 3aff 	mov.w	sl, #4294967295
 800a88c:	e7df      	b.n	800a84e <_strtod_l+0xe6>
 800a88e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	9219      	str	r2, [sp, #100]	@ 0x64
 800a894:	785b      	ldrb	r3, [r3, #1]
 800a896:	2b30      	cmp	r3, #48	@ 0x30
 800a898:	d0f9      	beq.n	800a88e <_strtod_l+0x126>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d09d      	beq.n	800a7da <_strtod_l+0x72>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	2700      	movs	r7, #0
 800a8a2:	9308      	str	r3, [sp, #32]
 800a8a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a8aa:	46b9      	mov	r9, r7
 800a8ac:	220a      	movs	r2, #10
 800a8ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a8b0:	7805      	ldrb	r5, [r0, #0]
 800a8b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a8b6:	b2d9      	uxtb	r1, r3
 800a8b8:	2909      	cmp	r1, #9
 800a8ba:	d928      	bls.n	800a90e <_strtod_l+0x1a6>
 800a8bc:	494f      	ldr	r1, [pc, #316]	@ (800a9fc <_strtod_l+0x294>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f001 fcf6 	bl	800c2b0 <strncmp>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d032      	beq.n	800a92e <_strtod_l+0x1c6>
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8ce:	464d      	mov	r5, r9
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2a65      	cmp	r2, #101	@ 0x65
 800a8d4:	d001      	beq.n	800a8da <_strtod_l+0x172>
 800a8d6:	2a45      	cmp	r2, #69	@ 0x45
 800a8d8:	d114      	bne.n	800a904 <_strtod_l+0x19c>
 800a8da:	b91d      	cbnz	r5, 800a8e4 <_strtod_l+0x17c>
 800a8dc:	9a08      	ldr	r2, [sp, #32]
 800a8de:	4302      	orrs	r2, r0
 800a8e0:	d096      	beq.n	800a810 <_strtod_l+0xa8>
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a8e6:	1c62      	adds	r2, r4, #1
 800a8e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8ea:	7862      	ldrb	r2, [r4, #1]
 800a8ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800a8ee:	d07a      	beq.n	800a9e6 <_strtod_l+0x27e>
 800a8f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a8f2:	d07e      	beq.n	800a9f2 <_strtod_l+0x28a>
 800a8f4:	f04f 0c00 	mov.w	ip, #0
 800a8f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a8fc:	2909      	cmp	r1, #9
 800a8fe:	f240 8085 	bls.w	800aa0c <_strtod_l+0x2a4>
 800a902:	9419      	str	r4, [sp, #100]	@ 0x64
 800a904:	f04f 0800 	mov.w	r8, #0
 800a908:	e0a5      	b.n	800aa56 <_strtod_l+0x2ee>
 800a90a:	2300      	movs	r3, #0
 800a90c:	e7c8      	b.n	800a8a0 <_strtod_l+0x138>
 800a90e:	f1b9 0f08 	cmp.w	r9, #8
 800a912:	bfd8      	it	le
 800a914:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a916:	f100 0001 	add.w	r0, r0, #1
 800a91a:	bfda      	itte	le
 800a91c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a920:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a922:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a926:	f109 0901 	add.w	r9, r9, #1
 800a92a:	9019      	str	r0, [sp, #100]	@ 0x64
 800a92c:	e7bf      	b.n	800a8ae <_strtod_l+0x146>
 800a92e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	9219      	str	r2, [sp, #100]	@ 0x64
 800a934:	785a      	ldrb	r2, [r3, #1]
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	d03b      	beq.n	800a9b4 <_strtod_l+0x24c>
 800a93c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a93e:	464d      	mov	r5, r9
 800a940:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a944:	2b09      	cmp	r3, #9
 800a946:	d912      	bls.n	800a96e <_strtod_l+0x206>
 800a948:	2301      	movs	r3, #1
 800a94a:	e7c2      	b.n	800a8d2 <_strtod_l+0x16a>
 800a94c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	9219      	str	r2, [sp, #100]	@ 0x64
 800a952:	785a      	ldrb	r2, [r3, #1]
 800a954:	3001      	adds	r0, #1
 800a956:	2a30      	cmp	r2, #48	@ 0x30
 800a958:	d0f8      	beq.n	800a94c <_strtod_l+0x1e4>
 800a95a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a95e:	2b08      	cmp	r3, #8
 800a960:	f200 84d2 	bhi.w	800b308 <_strtod_l+0xba0>
 800a964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a966:	900a      	str	r0, [sp, #40]	@ 0x28
 800a968:	2000      	movs	r0, #0
 800a96a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a96c:	4605      	mov	r5, r0
 800a96e:	3a30      	subs	r2, #48	@ 0x30
 800a970:	f100 0301 	add.w	r3, r0, #1
 800a974:	d018      	beq.n	800a9a8 <_strtod_l+0x240>
 800a976:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a978:	4419      	add	r1, r3
 800a97a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a97c:	462e      	mov	r6, r5
 800a97e:	f04f 0e0a 	mov.w	lr, #10
 800a982:	1c71      	adds	r1, r6, #1
 800a984:	eba1 0c05 	sub.w	ip, r1, r5
 800a988:	4563      	cmp	r3, ip
 800a98a:	dc15      	bgt.n	800a9b8 <_strtod_l+0x250>
 800a98c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a990:	182b      	adds	r3, r5, r0
 800a992:	2b08      	cmp	r3, #8
 800a994:	f105 0501 	add.w	r5, r5, #1
 800a998:	4405      	add	r5, r0
 800a99a:	dc1a      	bgt.n	800a9d2 <_strtod_l+0x26a>
 800a99c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a99e:	230a      	movs	r3, #10
 800a9a0:	fb03 2301 	mla	r3, r3, r1, r2
 800a9a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a9aa:	1c51      	adds	r1, r2, #1
 800a9ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800a9ae:	7852      	ldrb	r2, [r2, #1]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	e7c5      	b.n	800a940 <_strtod_l+0x1d8>
 800a9b4:	4648      	mov	r0, r9
 800a9b6:	e7ce      	b.n	800a956 <_strtod_l+0x1ee>
 800a9b8:	2e08      	cmp	r6, #8
 800a9ba:	dc05      	bgt.n	800a9c8 <_strtod_l+0x260>
 800a9bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a9be:	fb0e f606 	mul.w	r6, lr, r6
 800a9c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a9c4:	460e      	mov	r6, r1
 800a9c6:	e7dc      	b.n	800a982 <_strtod_l+0x21a>
 800a9c8:	2910      	cmp	r1, #16
 800a9ca:	bfd8      	it	le
 800a9cc:	fb0e f707 	mulle.w	r7, lr, r7
 800a9d0:	e7f8      	b.n	800a9c4 <_strtod_l+0x25c>
 800a9d2:	2b0f      	cmp	r3, #15
 800a9d4:	bfdc      	itt	le
 800a9d6:	230a      	movle	r3, #10
 800a9d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800a9dc:	e7e3      	b.n	800a9a6 <_strtod_l+0x23e>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e77a      	b.n	800a8dc <_strtod_l+0x174>
 800a9e6:	f04f 0c00 	mov.w	ip, #0
 800a9ea:	1ca2      	adds	r2, r4, #2
 800a9ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9ee:	78a2      	ldrb	r2, [r4, #2]
 800a9f0:	e782      	b.n	800a8f8 <_strtod_l+0x190>
 800a9f2:	f04f 0c01 	mov.w	ip, #1
 800a9f6:	e7f8      	b.n	800a9ea <_strtod_l+0x282>
 800a9f8:	08011288 	.word	0x08011288
 800a9fc:	08010f10 	.word	0x08010f10
 800aa00:	7ff00000 	.word	0x7ff00000
 800aa04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa06:	1c51      	adds	r1, r2, #1
 800aa08:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa0a:	7852      	ldrb	r2, [r2, #1]
 800aa0c:	2a30      	cmp	r2, #48	@ 0x30
 800aa0e:	d0f9      	beq.n	800aa04 <_strtod_l+0x29c>
 800aa10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aa14:	2908      	cmp	r1, #8
 800aa16:	f63f af75 	bhi.w	800a904 <_strtod_l+0x19c>
 800aa1a:	3a30      	subs	r2, #48	@ 0x30
 800aa1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa20:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aa22:	f04f 080a 	mov.w	r8, #10
 800aa26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa28:	1c56      	adds	r6, r2, #1
 800aa2a:	9619      	str	r6, [sp, #100]	@ 0x64
 800aa2c:	7852      	ldrb	r2, [r2, #1]
 800aa2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aa32:	f1be 0f09 	cmp.w	lr, #9
 800aa36:	d939      	bls.n	800aaac <_strtod_l+0x344>
 800aa38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aa3a:	1a76      	subs	r6, r6, r1
 800aa3c:	2e08      	cmp	r6, #8
 800aa3e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aa42:	dc03      	bgt.n	800aa4c <_strtod_l+0x2e4>
 800aa44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa46:	4588      	cmp	r8, r1
 800aa48:	bfa8      	it	ge
 800aa4a:	4688      	movge	r8, r1
 800aa4c:	f1bc 0f00 	cmp.w	ip, #0
 800aa50:	d001      	beq.n	800aa56 <_strtod_l+0x2ee>
 800aa52:	f1c8 0800 	rsb	r8, r8, #0
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	d14e      	bne.n	800aaf8 <_strtod_l+0x390>
 800aa5a:	9908      	ldr	r1, [sp, #32]
 800aa5c:	4308      	orrs	r0, r1
 800aa5e:	f47f aebc 	bne.w	800a7da <_strtod_l+0x72>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f47f aed4 	bne.w	800a810 <_strtod_l+0xa8>
 800aa68:	2a69      	cmp	r2, #105	@ 0x69
 800aa6a:	d028      	beq.n	800aabe <_strtod_l+0x356>
 800aa6c:	dc25      	bgt.n	800aaba <_strtod_l+0x352>
 800aa6e:	2a49      	cmp	r2, #73	@ 0x49
 800aa70:	d025      	beq.n	800aabe <_strtod_l+0x356>
 800aa72:	2a4e      	cmp	r2, #78	@ 0x4e
 800aa74:	f47f aecc 	bne.w	800a810 <_strtod_l+0xa8>
 800aa78:	499a      	ldr	r1, [pc, #616]	@ (800ace4 <_strtod_l+0x57c>)
 800aa7a:	a819      	add	r0, sp, #100	@ 0x64
 800aa7c:	f003 fd54 	bl	800e528 <__match>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f43f aec5 	beq.w	800a810 <_strtod_l+0xa8>
 800aa86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b28      	cmp	r3, #40	@ 0x28
 800aa8c:	d12e      	bne.n	800aaec <_strtod_l+0x384>
 800aa8e:	4996      	ldr	r1, [pc, #600]	@ (800ace8 <_strtod_l+0x580>)
 800aa90:	aa1c      	add	r2, sp, #112	@ 0x70
 800aa92:	a819      	add	r0, sp, #100	@ 0x64
 800aa94:	f003 fd5c 	bl	800e550 <__hexnan>
 800aa98:	2805      	cmp	r0, #5
 800aa9a:	d127      	bne.n	800aaec <_strtod_l+0x384>
 800aa9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aaa2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aaa6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aaaa:	e696      	b.n	800a7da <_strtod_l+0x72>
 800aaac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aaae:	fb08 2101 	mla	r1, r8, r1, r2
 800aab2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aab6:	9209      	str	r2, [sp, #36]	@ 0x24
 800aab8:	e7b5      	b.n	800aa26 <_strtod_l+0x2be>
 800aaba:	2a6e      	cmp	r2, #110	@ 0x6e
 800aabc:	e7da      	b.n	800aa74 <_strtod_l+0x30c>
 800aabe:	498b      	ldr	r1, [pc, #556]	@ (800acec <_strtod_l+0x584>)
 800aac0:	a819      	add	r0, sp, #100	@ 0x64
 800aac2:	f003 fd31 	bl	800e528 <__match>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f aea2 	beq.w	800a810 <_strtod_l+0xa8>
 800aacc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aace:	4988      	ldr	r1, [pc, #544]	@ (800acf0 <_strtod_l+0x588>)
 800aad0:	3b01      	subs	r3, #1
 800aad2:	a819      	add	r0, sp, #100	@ 0x64
 800aad4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aad6:	f003 fd27 	bl	800e528 <__match>
 800aada:	b910      	cbnz	r0, 800aae2 <_strtod_l+0x37a>
 800aadc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aade:	3301      	adds	r3, #1
 800aae0:	9319      	str	r3, [sp, #100]	@ 0x64
 800aae2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ad00 <_strtod_l+0x598>
 800aae6:	f04f 0a00 	mov.w	sl, #0
 800aaea:	e676      	b.n	800a7da <_strtod_l+0x72>
 800aaec:	4881      	ldr	r0, [pc, #516]	@ (800acf4 <_strtod_l+0x58c>)
 800aaee:	f002 fbbf 	bl	800d270 <nan>
 800aaf2:	ec5b ab10 	vmov	sl, fp, d0
 800aaf6:	e670      	b.n	800a7da <_strtod_l+0x72>
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aafa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aafc:	eba8 0303 	sub.w	r3, r8, r3
 800ab00:	f1b9 0f00 	cmp.w	r9, #0
 800ab04:	bf08      	it	eq
 800ab06:	46a9      	moveq	r9, r5
 800ab08:	2d10      	cmp	r5, #16
 800ab0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab0c:	462c      	mov	r4, r5
 800ab0e:	bfa8      	it	ge
 800ab10:	2410      	movge	r4, #16
 800ab12:	f7f5 fd0f 	bl	8000534 <__aeabi_ui2d>
 800ab16:	2d09      	cmp	r5, #9
 800ab18:	4682      	mov	sl, r0
 800ab1a:	468b      	mov	fp, r1
 800ab1c:	dc13      	bgt.n	800ab46 <_strtod_l+0x3de>
 800ab1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f43f ae5a 	beq.w	800a7da <_strtod_l+0x72>
 800ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab28:	dd78      	ble.n	800ac1c <_strtod_l+0x4b4>
 800ab2a:	2b16      	cmp	r3, #22
 800ab2c:	dc5f      	bgt.n	800abee <_strtod_l+0x486>
 800ab2e:	4972      	ldr	r1, [pc, #456]	@ (800acf8 <_strtod_l+0x590>)
 800ab30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab38:	4652      	mov	r2, sl
 800ab3a:	465b      	mov	r3, fp
 800ab3c:	f7f5 fd74 	bl	8000628 <__aeabi_dmul>
 800ab40:	4682      	mov	sl, r0
 800ab42:	468b      	mov	fp, r1
 800ab44:	e649      	b.n	800a7da <_strtod_l+0x72>
 800ab46:	4b6c      	ldr	r3, [pc, #432]	@ (800acf8 <_strtod_l+0x590>)
 800ab48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ab50:	f7f5 fd6a 	bl	8000628 <__aeabi_dmul>
 800ab54:	4682      	mov	sl, r0
 800ab56:	4638      	mov	r0, r7
 800ab58:	468b      	mov	fp, r1
 800ab5a:	f7f5 fceb 	bl	8000534 <__aeabi_ui2d>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4650      	mov	r0, sl
 800ab64:	4659      	mov	r1, fp
 800ab66:	f7f5 fba9 	bl	80002bc <__adddf3>
 800ab6a:	2d0f      	cmp	r5, #15
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	468b      	mov	fp, r1
 800ab70:	ddd5      	ble.n	800ab1e <_strtod_l+0x3b6>
 800ab72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab74:	1b2c      	subs	r4, r5, r4
 800ab76:	441c      	add	r4, r3
 800ab78:	2c00      	cmp	r4, #0
 800ab7a:	f340 8093 	ble.w	800aca4 <_strtod_l+0x53c>
 800ab7e:	f014 030f 	ands.w	r3, r4, #15
 800ab82:	d00a      	beq.n	800ab9a <_strtod_l+0x432>
 800ab84:	495c      	ldr	r1, [pc, #368]	@ (800acf8 <_strtod_l+0x590>)
 800ab86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab8a:	4652      	mov	r2, sl
 800ab8c:	465b      	mov	r3, fp
 800ab8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab92:	f7f5 fd49 	bl	8000628 <__aeabi_dmul>
 800ab96:	4682      	mov	sl, r0
 800ab98:	468b      	mov	fp, r1
 800ab9a:	f034 040f 	bics.w	r4, r4, #15
 800ab9e:	d073      	beq.n	800ac88 <_strtod_l+0x520>
 800aba0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aba4:	dd49      	ble.n	800ac3a <_strtod_l+0x4d2>
 800aba6:	2400      	movs	r4, #0
 800aba8:	46a0      	mov	r8, r4
 800abaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abac:	46a1      	mov	r9, r4
 800abae:	9a05      	ldr	r2, [sp, #20]
 800abb0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ad00 <_strtod_l+0x598>
 800abb4:	2322      	movs	r3, #34	@ 0x22
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	f04f 0a00 	mov.w	sl, #0
 800abbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f43f ae0b 	beq.w	800a7da <_strtod_l+0x72>
 800abc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abc6:	9805      	ldr	r0, [sp, #20]
 800abc8:	f003 feb2 	bl	800e930 <_Bfree>
 800abcc:	9805      	ldr	r0, [sp, #20]
 800abce:	4649      	mov	r1, r9
 800abd0:	f003 feae 	bl	800e930 <_Bfree>
 800abd4:	9805      	ldr	r0, [sp, #20]
 800abd6:	4641      	mov	r1, r8
 800abd8:	f003 feaa 	bl	800e930 <_Bfree>
 800abdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abde:	9805      	ldr	r0, [sp, #20]
 800abe0:	f003 fea6 	bl	800e930 <_Bfree>
 800abe4:	9805      	ldr	r0, [sp, #20]
 800abe6:	4621      	mov	r1, r4
 800abe8:	f003 fea2 	bl	800e930 <_Bfree>
 800abec:	e5f5      	b.n	800a7da <_strtod_l+0x72>
 800abee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800abf4:	4293      	cmp	r3, r2
 800abf6:	dbbc      	blt.n	800ab72 <_strtod_l+0x40a>
 800abf8:	4c3f      	ldr	r4, [pc, #252]	@ (800acf8 <_strtod_l+0x590>)
 800abfa:	f1c5 050f 	rsb	r5, r5, #15
 800abfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac02:	4652      	mov	r2, sl
 800ac04:	465b      	mov	r3, fp
 800ac06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0a:	f7f5 fd0d 	bl	8000628 <__aeabi_dmul>
 800ac0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac10:	1b5d      	subs	r5, r3, r5
 800ac12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac1a:	e78f      	b.n	800ab3c <_strtod_l+0x3d4>
 800ac1c:	3316      	adds	r3, #22
 800ac1e:	dba8      	blt.n	800ab72 <_strtod_l+0x40a>
 800ac20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac22:	eba3 0808 	sub.w	r8, r3, r8
 800ac26:	4b34      	ldr	r3, [pc, #208]	@ (800acf8 <_strtod_l+0x590>)
 800ac28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ac2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ac30:	4650      	mov	r0, sl
 800ac32:	4659      	mov	r1, fp
 800ac34:	f7f5 fe22 	bl	800087c <__aeabi_ddiv>
 800ac38:	e782      	b.n	800ab40 <_strtod_l+0x3d8>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	4f2f      	ldr	r7, [pc, #188]	@ (800acfc <_strtod_l+0x594>)
 800ac3e:	1124      	asrs	r4, r4, #4
 800ac40:	4650      	mov	r0, sl
 800ac42:	4659      	mov	r1, fp
 800ac44:	461e      	mov	r6, r3
 800ac46:	2c01      	cmp	r4, #1
 800ac48:	dc21      	bgt.n	800ac8e <_strtod_l+0x526>
 800ac4a:	b10b      	cbz	r3, 800ac50 <_strtod_l+0x4e8>
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	468b      	mov	fp, r1
 800ac50:	492a      	ldr	r1, [pc, #168]	@ (800acfc <_strtod_l+0x594>)
 800ac52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ac56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ac5a:	4652      	mov	r2, sl
 800ac5c:	465b      	mov	r3, fp
 800ac5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac62:	f7f5 fce1 	bl	8000628 <__aeabi_dmul>
 800ac66:	4b26      	ldr	r3, [pc, #152]	@ (800ad00 <_strtod_l+0x598>)
 800ac68:	460a      	mov	r2, r1
 800ac6a:	400b      	ands	r3, r1
 800ac6c:	4925      	ldr	r1, [pc, #148]	@ (800ad04 <_strtod_l+0x59c>)
 800ac6e:	428b      	cmp	r3, r1
 800ac70:	4682      	mov	sl, r0
 800ac72:	d898      	bhi.n	800aba6 <_strtod_l+0x43e>
 800ac74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ac78:	428b      	cmp	r3, r1
 800ac7a:	bf86      	itte	hi
 800ac7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ad08 <_strtod_l+0x5a0>
 800ac80:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9308      	str	r3, [sp, #32]
 800ac8c:	e076      	b.n	800ad7c <_strtod_l+0x614>
 800ac8e:	07e2      	lsls	r2, r4, #31
 800ac90:	d504      	bpl.n	800ac9c <_strtod_l+0x534>
 800ac92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac96:	f7f5 fcc7 	bl	8000628 <__aeabi_dmul>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	1064      	asrs	r4, r4, #1
 800aca0:	3708      	adds	r7, #8
 800aca2:	e7d0      	b.n	800ac46 <_strtod_l+0x4de>
 800aca4:	d0f0      	beq.n	800ac88 <_strtod_l+0x520>
 800aca6:	4264      	negs	r4, r4
 800aca8:	f014 020f 	ands.w	r2, r4, #15
 800acac:	d00a      	beq.n	800acc4 <_strtod_l+0x55c>
 800acae:	4b12      	ldr	r3, [pc, #72]	@ (800acf8 <_strtod_l+0x590>)
 800acb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acb4:	4650      	mov	r0, sl
 800acb6:	4659      	mov	r1, fp
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fdde 	bl	800087c <__aeabi_ddiv>
 800acc0:	4682      	mov	sl, r0
 800acc2:	468b      	mov	fp, r1
 800acc4:	1124      	asrs	r4, r4, #4
 800acc6:	d0df      	beq.n	800ac88 <_strtod_l+0x520>
 800acc8:	2c1f      	cmp	r4, #31
 800acca:	dd1f      	ble.n	800ad0c <_strtod_l+0x5a4>
 800accc:	2400      	movs	r4, #0
 800acce:	46a0      	mov	r8, r4
 800acd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800acd2:	46a1      	mov	r9, r4
 800acd4:	9a05      	ldr	r2, [sp, #20]
 800acd6:	2322      	movs	r3, #34	@ 0x22
 800acd8:	f04f 0a00 	mov.w	sl, #0
 800acdc:	f04f 0b00 	mov.w	fp, #0
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	e76b      	b.n	800abbc <_strtod_l+0x454>
 800ace4:	08010f1f 	.word	0x08010f1f
 800ace8:	08011274 	.word	0x08011274
 800acec:	08010f17 	.word	0x08010f17
 800acf0:	080110a3 	.word	0x080110a3
 800acf4:	08011273 	.word	0x08011273
 800acf8:	080114c0 	.word	0x080114c0
 800acfc:	08011498 	.word	0x08011498
 800ad00:	7ff00000 	.word	0x7ff00000
 800ad04:	7ca00000 	.word	0x7ca00000
 800ad08:	7fefffff 	.word	0x7fefffff
 800ad0c:	f014 0310 	ands.w	r3, r4, #16
 800ad10:	bf18      	it	ne
 800ad12:	236a      	movne	r3, #106	@ 0x6a
 800ad14:	4ea9      	ldr	r6, [pc, #676]	@ (800afbc <_strtod_l+0x854>)
 800ad16:	9308      	str	r3, [sp, #32]
 800ad18:	4650      	mov	r0, sl
 800ad1a:	4659      	mov	r1, fp
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	07e7      	lsls	r7, r4, #31
 800ad20:	d504      	bpl.n	800ad2c <_strtod_l+0x5c4>
 800ad22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad26:	f7f5 fc7f 	bl	8000628 <__aeabi_dmul>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	1064      	asrs	r4, r4, #1
 800ad2e:	f106 0608 	add.w	r6, r6, #8
 800ad32:	d1f4      	bne.n	800ad1e <_strtod_l+0x5b6>
 800ad34:	b10b      	cbz	r3, 800ad3a <_strtod_l+0x5d2>
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	b1b3      	cbz	r3, 800ad6c <_strtod_l+0x604>
 800ad3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ad42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	4659      	mov	r1, fp
 800ad4a:	dd0f      	ble.n	800ad6c <_strtod_l+0x604>
 800ad4c:	2b1f      	cmp	r3, #31
 800ad4e:	dd56      	ble.n	800adfe <_strtod_l+0x696>
 800ad50:	2b34      	cmp	r3, #52	@ 0x34
 800ad52:	bfde      	ittt	le
 800ad54:	f04f 33ff 	movle.w	r3, #4294967295
 800ad58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ad5c:	4093      	lslle	r3, r2
 800ad5e:	f04f 0a00 	mov.w	sl, #0
 800ad62:	bfcc      	ite	gt
 800ad64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ad68:	ea03 0b01 	andle.w	fp, r3, r1
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2300      	movs	r3, #0
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	f7f5 fec0 	bl	8000af8 <__aeabi_dcmpeq>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d1a7      	bne.n	800accc <_strtod_l+0x564>
 800ad7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ad82:	9805      	ldr	r0, [sp, #20]
 800ad84:	462b      	mov	r3, r5
 800ad86:	464a      	mov	r2, r9
 800ad88:	f003 fe3a 	bl	800ea00 <__s2b>
 800ad8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f43f af09 	beq.w	800aba6 <_strtod_l+0x43e>
 800ad94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	eba3 0308 	sub.w	r3, r3, r8
 800ad9e:	bfa8      	it	ge
 800ada0:	2300      	movge	r3, #0
 800ada2:	9312      	str	r3, [sp, #72]	@ 0x48
 800ada4:	2400      	movs	r4, #0
 800ada6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800adaa:	9316      	str	r3, [sp, #88]	@ 0x58
 800adac:	46a0      	mov	r8, r4
 800adae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb0:	9805      	ldr	r0, [sp, #20]
 800adb2:	6859      	ldr	r1, [r3, #4]
 800adb4:	f003 fd7c 	bl	800e8b0 <_Balloc>
 800adb8:	4681      	mov	r9, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f aef7 	beq.w	800abae <_strtod_l+0x446>
 800adc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	3202      	adds	r2, #2
 800adc6:	f103 010c 	add.w	r1, r3, #12
 800adca:	0092      	lsls	r2, r2, #2
 800adcc:	300c      	adds	r0, #12
 800adce:	f002 fa40 	bl	800d252 <memcpy>
 800add2:	ec4b ab10 	vmov	d0, sl, fp
 800add6:	9805      	ldr	r0, [sp, #20]
 800add8:	aa1c      	add	r2, sp, #112	@ 0x70
 800adda:	a91b      	add	r1, sp, #108	@ 0x6c
 800addc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ade0:	f004 f942 	bl	800f068 <__d2b>
 800ade4:	901a      	str	r0, [sp, #104]	@ 0x68
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f aee1 	beq.w	800abae <_strtod_l+0x446>
 800adec:	9805      	ldr	r0, [sp, #20]
 800adee:	2101      	movs	r1, #1
 800adf0:	f003 fe9c 	bl	800eb2c <__i2b>
 800adf4:	4680      	mov	r8, r0
 800adf6:	b948      	cbnz	r0, 800ae0c <_strtod_l+0x6a4>
 800adf8:	f04f 0800 	mov.w	r8, #0
 800adfc:	e6d7      	b.n	800abae <_strtod_l+0x446>
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	ea03 0a0a 	and.w	sl, r3, sl
 800ae0a:	e7af      	b.n	800ad6c <_strtod_l+0x604>
 800ae0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ae0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ae10:	2d00      	cmp	r5, #0
 800ae12:	bfab      	itete	ge
 800ae14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ae16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ae18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ae1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ae1c:	bfac      	ite	ge
 800ae1e:	18ef      	addge	r7, r5, r3
 800ae20:	1b5e      	sublt	r6, r3, r5
 800ae22:	9b08      	ldr	r3, [sp, #32]
 800ae24:	1aed      	subs	r5, r5, r3
 800ae26:	4415      	add	r5, r2
 800ae28:	4b65      	ldr	r3, [pc, #404]	@ (800afc0 <_strtod_l+0x858>)
 800ae2a:	3d01      	subs	r5, #1
 800ae2c:	429d      	cmp	r5, r3
 800ae2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ae32:	da50      	bge.n	800aed6 <_strtod_l+0x76e>
 800ae34:	1b5b      	subs	r3, r3, r5
 800ae36:	2b1f      	cmp	r3, #31
 800ae38:	eba2 0203 	sub.w	r2, r2, r3
 800ae3c:	f04f 0101 	mov.w	r1, #1
 800ae40:	dc3d      	bgt.n	800aebe <_strtod_l+0x756>
 800ae42:	fa01 f303 	lsl.w	r3, r1, r3
 800ae46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae4c:	18bd      	adds	r5, r7, r2
 800ae4e:	9b08      	ldr	r3, [sp, #32]
 800ae50:	42af      	cmp	r7, r5
 800ae52:	4416      	add	r6, r2
 800ae54:	441e      	add	r6, r3
 800ae56:	463b      	mov	r3, r7
 800ae58:	bfa8      	it	ge
 800ae5a:	462b      	movge	r3, r5
 800ae5c:	42b3      	cmp	r3, r6
 800ae5e:	bfa8      	it	ge
 800ae60:	4633      	movge	r3, r6
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	bfc2      	ittt	gt
 800ae66:	1aed      	subgt	r5, r5, r3
 800ae68:	1af6      	subgt	r6, r6, r3
 800ae6a:	1aff      	subgt	r7, r7, r3
 800ae6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dd16      	ble.n	800aea0 <_strtod_l+0x738>
 800ae72:	4641      	mov	r1, r8
 800ae74:	9805      	ldr	r0, [sp, #20]
 800ae76:	461a      	mov	r2, r3
 800ae78:	f003 ff10 	bl	800ec9c <__pow5mult>
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0ba      	beq.n	800adf8 <_strtod_l+0x690>
 800ae82:	4601      	mov	r1, r0
 800ae84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ae86:	9805      	ldr	r0, [sp, #20]
 800ae88:	f003 fe66 	bl	800eb58 <__multiply>
 800ae8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	f43f ae8d 	beq.w	800abae <_strtod_l+0x446>
 800ae94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae96:	9805      	ldr	r0, [sp, #20]
 800ae98:	f003 fd4a 	bl	800e930 <_Bfree>
 800ae9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800aea0:	2d00      	cmp	r5, #0
 800aea2:	dc1d      	bgt.n	800aee0 <_strtod_l+0x778>
 800aea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	dd23      	ble.n	800aef2 <_strtod_l+0x78a>
 800aeaa:	4649      	mov	r1, r9
 800aeac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aeae:	9805      	ldr	r0, [sp, #20]
 800aeb0:	f003 fef4 	bl	800ec9c <__pow5mult>
 800aeb4:	4681      	mov	r9, r0
 800aeb6:	b9e0      	cbnz	r0, 800aef2 <_strtod_l+0x78a>
 800aeb8:	f04f 0900 	mov.w	r9, #0
 800aebc:	e677      	b.n	800abae <_strtod_l+0x446>
 800aebe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aec2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aec6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aeca:	35e2      	adds	r5, #226	@ 0xe2
 800aecc:	fa01 f305 	lsl.w	r3, r1, r5
 800aed0:	9310      	str	r3, [sp, #64]	@ 0x40
 800aed2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aed4:	e7ba      	b.n	800ae4c <_strtod_l+0x6e4>
 800aed6:	2300      	movs	r3, #0
 800aed8:	9310      	str	r3, [sp, #64]	@ 0x40
 800aeda:	2301      	movs	r3, #1
 800aedc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aede:	e7b5      	b.n	800ae4c <_strtod_l+0x6e4>
 800aee0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aee2:	9805      	ldr	r0, [sp, #20]
 800aee4:	462a      	mov	r2, r5
 800aee6:	f003 ff33 	bl	800ed50 <__lshift>
 800aeea:	901a      	str	r0, [sp, #104]	@ 0x68
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d1d9      	bne.n	800aea4 <_strtod_l+0x73c>
 800aef0:	e65d      	b.n	800abae <_strtod_l+0x446>
 800aef2:	2e00      	cmp	r6, #0
 800aef4:	dd07      	ble.n	800af06 <_strtod_l+0x79e>
 800aef6:	4649      	mov	r1, r9
 800aef8:	9805      	ldr	r0, [sp, #20]
 800aefa:	4632      	mov	r2, r6
 800aefc:	f003 ff28 	bl	800ed50 <__lshift>
 800af00:	4681      	mov	r9, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	d0d8      	beq.n	800aeb8 <_strtod_l+0x750>
 800af06:	2f00      	cmp	r7, #0
 800af08:	dd08      	ble.n	800af1c <_strtod_l+0x7b4>
 800af0a:	4641      	mov	r1, r8
 800af0c:	9805      	ldr	r0, [sp, #20]
 800af0e:	463a      	mov	r2, r7
 800af10:	f003 ff1e 	bl	800ed50 <__lshift>
 800af14:	4680      	mov	r8, r0
 800af16:	2800      	cmp	r0, #0
 800af18:	f43f ae49 	beq.w	800abae <_strtod_l+0x446>
 800af1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af1e:	9805      	ldr	r0, [sp, #20]
 800af20:	464a      	mov	r2, r9
 800af22:	f003 ff9d 	bl	800ee60 <__mdiff>
 800af26:	4604      	mov	r4, r0
 800af28:	2800      	cmp	r0, #0
 800af2a:	f43f ae40 	beq.w	800abae <_strtod_l+0x446>
 800af2e:	68c3      	ldr	r3, [r0, #12]
 800af30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af32:	2300      	movs	r3, #0
 800af34:	60c3      	str	r3, [r0, #12]
 800af36:	4641      	mov	r1, r8
 800af38:	f003 ff76 	bl	800ee28 <__mcmp>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	da45      	bge.n	800afcc <_strtod_l+0x864>
 800af40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af42:	ea53 030a 	orrs.w	r3, r3, sl
 800af46:	d16b      	bne.n	800b020 <_strtod_l+0x8b8>
 800af48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d167      	bne.n	800b020 <_strtod_l+0x8b8>
 800af50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af54:	0d1b      	lsrs	r3, r3, #20
 800af56:	051b      	lsls	r3, r3, #20
 800af58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800af5c:	d960      	bls.n	800b020 <_strtod_l+0x8b8>
 800af5e:	6963      	ldr	r3, [r4, #20]
 800af60:	b913      	cbnz	r3, 800af68 <_strtod_l+0x800>
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	2b01      	cmp	r3, #1
 800af66:	dd5b      	ble.n	800b020 <_strtod_l+0x8b8>
 800af68:	4621      	mov	r1, r4
 800af6a:	2201      	movs	r2, #1
 800af6c:	9805      	ldr	r0, [sp, #20]
 800af6e:	f003 feef 	bl	800ed50 <__lshift>
 800af72:	4641      	mov	r1, r8
 800af74:	4604      	mov	r4, r0
 800af76:	f003 ff57 	bl	800ee28 <__mcmp>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	dd50      	ble.n	800b020 <_strtod_l+0x8b8>
 800af7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af82:	9a08      	ldr	r2, [sp, #32]
 800af84:	0d1b      	lsrs	r3, r3, #20
 800af86:	051b      	lsls	r3, r3, #20
 800af88:	2a00      	cmp	r2, #0
 800af8a:	d06a      	beq.n	800b062 <_strtod_l+0x8fa>
 800af8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800af90:	d867      	bhi.n	800b062 <_strtod_l+0x8fa>
 800af92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800af96:	f67f ae9d 	bls.w	800acd4 <_strtod_l+0x56c>
 800af9a:	4b0a      	ldr	r3, [pc, #40]	@ (800afc4 <_strtod_l+0x85c>)
 800af9c:	4650      	mov	r0, sl
 800af9e:	4659      	mov	r1, fp
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 fb41 	bl	8000628 <__aeabi_dmul>
 800afa6:	4b08      	ldr	r3, [pc, #32]	@ (800afc8 <_strtod_l+0x860>)
 800afa8:	400b      	ands	r3, r1
 800afaa:	4682      	mov	sl, r0
 800afac:	468b      	mov	fp, r1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f47f ae08 	bne.w	800abc4 <_strtod_l+0x45c>
 800afb4:	9a05      	ldr	r2, [sp, #20]
 800afb6:	2322      	movs	r3, #34	@ 0x22
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	e603      	b.n	800abc4 <_strtod_l+0x45c>
 800afbc:	080112a0 	.word	0x080112a0
 800afc0:	fffffc02 	.word	0xfffffc02
 800afc4:	39500000 	.word	0x39500000
 800afc8:	7ff00000 	.word	0x7ff00000
 800afcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800afd0:	d165      	bne.n	800b09e <_strtod_l+0x936>
 800afd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800afd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afd8:	b35a      	cbz	r2, 800b032 <_strtod_l+0x8ca>
 800afda:	4a9f      	ldr	r2, [pc, #636]	@ (800b258 <_strtod_l+0xaf0>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d12b      	bne.n	800b038 <_strtod_l+0x8d0>
 800afe0:	9b08      	ldr	r3, [sp, #32]
 800afe2:	4651      	mov	r1, sl
 800afe4:	b303      	cbz	r3, 800b028 <_strtod_l+0x8c0>
 800afe6:	4b9d      	ldr	r3, [pc, #628]	@ (800b25c <_strtod_l+0xaf4>)
 800afe8:	465a      	mov	r2, fp
 800afea:	4013      	ands	r3, r2
 800afec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aff0:	f04f 32ff 	mov.w	r2, #4294967295
 800aff4:	d81b      	bhi.n	800b02e <_strtod_l+0x8c6>
 800aff6:	0d1b      	lsrs	r3, r3, #20
 800aff8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800affc:	fa02 f303 	lsl.w	r3, r2, r3
 800b000:	4299      	cmp	r1, r3
 800b002:	d119      	bne.n	800b038 <_strtod_l+0x8d0>
 800b004:	4b96      	ldr	r3, [pc, #600]	@ (800b260 <_strtod_l+0xaf8>)
 800b006:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b008:	429a      	cmp	r2, r3
 800b00a:	d102      	bne.n	800b012 <_strtod_l+0x8aa>
 800b00c:	3101      	adds	r1, #1
 800b00e:	f43f adce 	beq.w	800abae <_strtod_l+0x446>
 800b012:	4b92      	ldr	r3, [pc, #584]	@ (800b25c <_strtod_l+0xaf4>)
 800b014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b016:	401a      	ands	r2, r3
 800b018:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b01c:	f04f 0a00 	mov.w	sl, #0
 800b020:	9b08      	ldr	r3, [sp, #32]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1b9      	bne.n	800af9a <_strtod_l+0x832>
 800b026:	e5cd      	b.n	800abc4 <_strtod_l+0x45c>
 800b028:	f04f 33ff 	mov.w	r3, #4294967295
 800b02c:	e7e8      	b.n	800b000 <_strtod_l+0x898>
 800b02e:	4613      	mov	r3, r2
 800b030:	e7e6      	b.n	800b000 <_strtod_l+0x898>
 800b032:	ea53 030a 	orrs.w	r3, r3, sl
 800b036:	d0a2      	beq.n	800af7e <_strtod_l+0x816>
 800b038:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b03a:	b1db      	cbz	r3, 800b074 <_strtod_l+0x90c>
 800b03c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b03e:	4213      	tst	r3, r2
 800b040:	d0ee      	beq.n	800b020 <_strtod_l+0x8b8>
 800b042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b044:	9a08      	ldr	r2, [sp, #32]
 800b046:	4650      	mov	r0, sl
 800b048:	4659      	mov	r1, fp
 800b04a:	b1bb      	cbz	r3, 800b07c <_strtod_l+0x914>
 800b04c:	f7ff fb6b 	bl	800a726 <sulp>
 800b050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b054:	ec53 2b10 	vmov	r2, r3, d0
 800b058:	f7f5 f930 	bl	80002bc <__adddf3>
 800b05c:	4682      	mov	sl, r0
 800b05e:	468b      	mov	fp, r1
 800b060:	e7de      	b.n	800b020 <_strtod_l+0x8b8>
 800b062:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b066:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b06a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b06e:	f04f 3aff 	mov.w	sl, #4294967295
 800b072:	e7d5      	b.n	800b020 <_strtod_l+0x8b8>
 800b074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b076:	ea13 0f0a 	tst.w	r3, sl
 800b07a:	e7e1      	b.n	800b040 <_strtod_l+0x8d8>
 800b07c:	f7ff fb53 	bl	800a726 <sulp>
 800b080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b084:	ec53 2b10 	vmov	r2, r3, d0
 800b088:	f7f5 f916 	bl	80002b8 <__aeabi_dsub>
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4682      	mov	sl, r0
 800b092:	468b      	mov	fp, r1
 800b094:	f7f5 fd30 	bl	8000af8 <__aeabi_dcmpeq>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d0c1      	beq.n	800b020 <_strtod_l+0x8b8>
 800b09c:	e61a      	b.n	800acd4 <_strtod_l+0x56c>
 800b09e:	4641      	mov	r1, r8
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f004 f839 	bl	800f118 <__ratio>
 800b0a6:	ec57 6b10 	vmov	r6, r7, d0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fd34 	bl	8000b20 <__aeabi_dcmple>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d06f      	beq.n	800b19c <_strtod_l+0xa34>
 800b0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d17a      	bne.n	800b1b8 <_strtod_l+0xa50>
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	d158      	bne.n	800b17a <_strtod_l+0xa12>
 800b0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d15a      	bne.n	800b188 <_strtod_l+0xa20>
 800b0d2:	4b64      	ldr	r3, [pc, #400]	@ (800b264 <_strtod_l+0xafc>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	4639      	mov	r1, r7
 800b0da:	f7f5 fd17 	bl	8000b0c <__aeabi_dcmplt>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d159      	bne.n	800b196 <_strtod_l+0xa2e>
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	4b60      	ldr	r3, [pc, #384]	@ (800b268 <_strtod_l+0xb00>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f7f5 fa9d 	bl	8000628 <__aeabi_dmul>
 800b0ee:	4606      	mov	r6, r0
 800b0f0:	460f      	mov	r7, r1
 800b0f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b0f6:	9606      	str	r6, [sp, #24]
 800b0f8:	9307      	str	r3, [sp, #28]
 800b0fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0fe:	4d57      	ldr	r5, [pc, #348]	@ (800b25c <_strtod_l+0xaf4>)
 800b100:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b106:	401d      	ands	r5, r3
 800b108:	4b58      	ldr	r3, [pc, #352]	@ (800b26c <_strtod_l+0xb04>)
 800b10a:	429d      	cmp	r5, r3
 800b10c:	f040 80b2 	bne.w	800b274 <_strtod_l+0xb0c>
 800b110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b112:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b116:	ec4b ab10 	vmov	d0, sl, fp
 800b11a:	f003 ff35 	bl	800ef88 <__ulp>
 800b11e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b122:	ec51 0b10 	vmov	r0, r1, d0
 800b126:	f7f5 fa7f 	bl	8000628 <__aeabi_dmul>
 800b12a:	4652      	mov	r2, sl
 800b12c:	465b      	mov	r3, fp
 800b12e:	f7f5 f8c5 	bl	80002bc <__adddf3>
 800b132:	460b      	mov	r3, r1
 800b134:	4949      	ldr	r1, [pc, #292]	@ (800b25c <_strtod_l+0xaf4>)
 800b136:	4a4e      	ldr	r2, [pc, #312]	@ (800b270 <_strtod_l+0xb08>)
 800b138:	4019      	ands	r1, r3
 800b13a:	4291      	cmp	r1, r2
 800b13c:	4682      	mov	sl, r0
 800b13e:	d942      	bls.n	800b1c6 <_strtod_l+0xa5e>
 800b140:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b142:	4b47      	ldr	r3, [pc, #284]	@ (800b260 <_strtod_l+0xaf8>)
 800b144:	429a      	cmp	r2, r3
 800b146:	d103      	bne.n	800b150 <_strtod_l+0x9e8>
 800b148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b14a:	3301      	adds	r3, #1
 800b14c:	f43f ad2f 	beq.w	800abae <_strtod_l+0x446>
 800b150:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b260 <_strtod_l+0xaf8>
 800b154:	f04f 3aff 	mov.w	sl, #4294967295
 800b158:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b15a:	9805      	ldr	r0, [sp, #20]
 800b15c:	f003 fbe8 	bl	800e930 <_Bfree>
 800b160:	9805      	ldr	r0, [sp, #20]
 800b162:	4649      	mov	r1, r9
 800b164:	f003 fbe4 	bl	800e930 <_Bfree>
 800b168:	9805      	ldr	r0, [sp, #20]
 800b16a:	4641      	mov	r1, r8
 800b16c:	f003 fbe0 	bl	800e930 <_Bfree>
 800b170:	9805      	ldr	r0, [sp, #20]
 800b172:	4621      	mov	r1, r4
 800b174:	f003 fbdc 	bl	800e930 <_Bfree>
 800b178:	e619      	b.n	800adae <_strtod_l+0x646>
 800b17a:	f1ba 0f01 	cmp.w	sl, #1
 800b17e:	d103      	bne.n	800b188 <_strtod_l+0xa20>
 800b180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b182:	2b00      	cmp	r3, #0
 800b184:	f43f ada6 	beq.w	800acd4 <_strtod_l+0x56c>
 800b188:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b238 <_strtod_l+0xad0>
 800b18c:	4f35      	ldr	r7, [pc, #212]	@ (800b264 <_strtod_l+0xafc>)
 800b18e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b192:	2600      	movs	r6, #0
 800b194:	e7b1      	b.n	800b0fa <_strtod_l+0x992>
 800b196:	4f34      	ldr	r7, [pc, #208]	@ (800b268 <_strtod_l+0xb00>)
 800b198:	2600      	movs	r6, #0
 800b19a:	e7aa      	b.n	800b0f2 <_strtod_l+0x98a>
 800b19c:	4b32      	ldr	r3, [pc, #200]	@ (800b268 <_strtod_l+0xb00>)
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f7f5 fa40 	bl	8000628 <__aeabi_dmul>
 800b1a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d09f      	beq.n	800b0f2 <_strtod_l+0x98a>
 800b1b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b1b6:	e7a0      	b.n	800b0fa <_strtod_l+0x992>
 800b1b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b240 <_strtod_l+0xad8>
 800b1bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1c0:	ec57 6b17 	vmov	r6, r7, d7
 800b1c4:	e799      	b.n	800b0fa <_strtod_l+0x992>
 800b1c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b1ca:	9b08      	ldr	r3, [sp, #32]
 800b1cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1c1      	bne.n	800b158 <_strtod_l+0x9f0>
 800b1d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1d8:	0d1b      	lsrs	r3, r3, #20
 800b1da:	051b      	lsls	r3, r3, #20
 800b1dc:	429d      	cmp	r5, r3
 800b1de:	d1bb      	bne.n	800b158 <_strtod_l+0x9f0>
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	f7f5 fdd0 	bl	8000d88 <__aeabi_d2lz>
 800b1e8:	f7f5 f9f0 	bl	80005cc <__aeabi_l2d>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	f7f5 f860 	bl	80002b8 <__aeabi_dsub>
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b200:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b206:	ea46 060a 	orr.w	r6, r6, sl
 800b20a:	431e      	orrs	r6, r3
 800b20c:	d06f      	beq.n	800b2ee <_strtod_l+0xb86>
 800b20e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b248 <_strtod_l+0xae0>)
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	f7f5 fc7a 	bl	8000b0c <__aeabi_dcmplt>
 800b218:	2800      	cmp	r0, #0
 800b21a:	f47f acd3 	bne.w	800abc4 <_strtod_l+0x45c>
 800b21e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b250 <_strtod_l+0xae8>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b228:	f7f5 fc8e 	bl	8000b48 <__aeabi_dcmpgt>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d093      	beq.n	800b158 <_strtod_l+0x9f0>
 800b230:	e4c8      	b.n	800abc4 <_strtod_l+0x45c>
 800b232:	bf00      	nop
 800b234:	f3af 8000 	nop.w
 800b238:	00000000 	.word	0x00000000
 800b23c:	bff00000 	.word	0xbff00000
 800b240:	00000000 	.word	0x00000000
 800b244:	3ff00000 	.word	0x3ff00000
 800b248:	94a03595 	.word	0x94a03595
 800b24c:	3fdfffff 	.word	0x3fdfffff
 800b250:	35afe535 	.word	0x35afe535
 800b254:	3fe00000 	.word	0x3fe00000
 800b258:	000fffff 	.word	0x000fffff
 800b25c:	7ff00000 	.word	0x7ff00000
 800b260:	7fefffff 	.word	0x7fefffff
 800b264:	3ff00000 	.word	0x3ff00000
 800b268:	3fe00000 	.word	0x3fe00000
 800b26c:	7fe00000 	.word	0x7fe00000
 800b270:	7c9fffff 	.word	0x7c9fffff
 800b274:	9b08      	ldr	r3, [sp, #32]
 800b276:	b323      	cbz	r3, 800b2c2 <_strtod_l+0xb5a>
 800b278:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b27c:	d821      	bhi.n	800b2c2 <_strtod_l+0xb5a>
 800b27e:	a328      	add	r3, pc, #160	@ (adr r3, 800b320 <_strtod_l+0xbb8>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	4630      	mov	r0, r6
 800b286:	4639      	mov	r1, r7
 800b288:	f7f5 fc4a 	bl	8000b20 <__aeabi_dcmple>
 800b28c:	b1a0      	cbz	r0, 800b2b8 <_strtod_l+0xb50>
 800b28e:	4639      	mov	r1, r7
 800b290:	4630      	mov	r0, r6
 800b292:	f7f5 fca1 	bl	8000bd8 <__aeabi_d2uiz>
 800b296:	2801      	cmp	r0, #1
 800b298:	bf38      	it	cc
 800b29a:	2001      	movcc	r0, #1
 800b29c:	f7f5 f94a 	bl	8000534 <__aeabi_ui2d>
 800b2a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	b9fb      	cbnz	r3, 800b2e8 <_strtod_l+0xb80>
 800b2a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800b2ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b2b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b2b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b2be:	1b5b      	subs	r3, r3, r5
 800b2c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b2ca:	f003 fe5d 	bl	800ef88 <__ulp>
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	ec53 2b10 	vmov	r2, r3, d0
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	f7f5 f9a7 	bl	8000628 <__aeabi_dmul>
 800b2da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b2de:	f7f4 ffed 	bl	80002bc <__adddf3>
 800b2e2:	4682      	mov	sl, r0
 800b2e4:	468b      	mov	fp, r1
 800b2e6:	e770      	b.n	800b1ca <_strtod_l+0xa62>
 800b2e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b2ec:	e7e0      	b.n	800b2b0 <_strtod_l+0xb48>
 800b2ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b328 <_strtod_l+0xbc0>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f7f5 fc0a 	bl	8000b0c <__aeabi_dcmplt>
 800b2f8:	e798      	b.n	800b22c <_strtod_l+0xac4>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b2fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	f7ff ba6d 	b.w	800a7e2 <_strtod_l+0x7a>
 800b308:	2a65      	cmp	r2, #101	@ 0x65
 800b30a:	f43f ab68 	beq.w	800a9de <_strtod_l+0x276>
 800b30e:	2a45      	cmp	r2, #69	@ 0x45
 800b310:	f43f ab65 	beq.w	800a9de <_strtod_l+0x276>
 800b314:	2301      	movs	r3, #1
 800b316:	f7ff bba0 	b.w	800aa5a <_strtod_l+0x2f2>
 800b31a:	bf00      	nop
 800b31c:	f3af 8000 	nop.w
 800b320:	ffc00000 	.word	0xffc00000
 800b324:	41dfffff 	.word	0x41dfffff
 800b328:	94a03595 	.word	0x94a03595
 800b32c:	3fcfffff 	.word	0x3fcfffff

0800b330 <strtod>:
 800b330:	460a      	mov	r2, r1
 800b332:	4601      	mov	r1, r0
 800b334:	4802      	ldr	r0, [pc, #8]	@ (800b340 <strtod+0x10>)
 800b336:	4b03      	ldr	r3, [pc, #12]	@ (800b344 <strtod+0x14>)
 800b338:	6800      	ldr	r0, [r0, #0]
 800b33a:	f7ff ba15 	b.w	800a768 <_strtod_l>
 800b33e:	bf00      	nop
 800b340:	2000019c 	.word	0x2000019c
 800b344:	20000030 	.word	0x20000030

0800b348 <_strtol_l.isra.0>:
 800b348:	2b24      	cmp	r3, #36	@ 0x24
 800b34a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b34e:	4686      	mov	lr, r0
 800b350:	4690      	mov	r8, r2
 800b352:	d801      	bhi.n	800b358 <_strtol_l.isra.0+0x10>
 800b354:	2b01      	cmp	r3, #1
 800b356:	d106      	bne.n	800b366 <_strtol_l.isra.0+0x1e>
 800b358:	f001 ff44 	bl	800d1e4 <__errno>
 800b35c:	2316      	movs	r3, #22
 800b35e:	6003      	str	r3, [r0, #0]
 800b360:	2000      	movs	r0, #0
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	4834      	ldr	r0, [pc, #208]	@ (800b438 <_strtol_l.isra.0+0xf0>)
 800b368:	460d      	mov	r5, r1
 800b36a:	462a      	mov	r2, r5
 800b36c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b370:	5d06      	ldrb	r6, [r0, r4]
 800b372:	f016 0608 	ands.w	r6, r6, #8
 800b376:	d1f8      	bne.n	800b36a <_strtol_l.isra.0+0x22>
 800b378:	2c2d      	cmp	r4, #45	@ 0x2d
 800b37a:	d110      	bne.n	800b39e <_strtol_l.isra.0+0x56>
 800b37c:	782c      	ldrb	r4, [r5, #0]
 800b37e:	2601      	movs	r6, #1
 800b380:	1c95      	adds	r5, r2, #2
 800b382:	f033 0210 	bics.w	r2, r3, #16
 800b386:	d115      	bne.n	800b3b4 <_strtol_l.isra.0+0x6c>
 800b388:	2c30      	cmp	r4, #48	@ 0x30
 800b38a:	d10d      	bne.n	800b3a8 <_strtol_l.isra.0+0x60>
 800b38c:	782a      	ldrb	r2, [r5, #0]
 800b38e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b392:	2a58      	cmp	r2, #88	@ 0x58
 800b394:	d108      	bne.n	800b3a8 <_strtol_l.isra.0+0x60>
 800b396:	786c      	ldrb	r4, [r5, #1]
 800b398:	3502      	adds	r5, #2
 800b39a:	2310      	movs	r3, #16
 800b39c:	e00a      	b.n	800b3b4 <_strtol_l.isra.0+0x6c>
 800b39e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b3a0:	bf04      	itt	eq
 800b3a2:	782c      	ldrbeq	r4, [r5, #0]
 800b3a4:	1c95      	addeq	r5, r2, #2
 800b3a6:	e7ec      	b.n	800b382 <_strtol_l.isra.0+0x3a>
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1f6      	bne.n	800b39a <_strtol_l.isra.0+0x52>
 800b3ac:	2c30      	cmp	r4, #48	@ 0x30
 800b3ae:	bf14      	ite	ne
 800b3b0:	230a      	movne	r3, #10
 800b3b2:	2308      	moveq	r3, #8
 800b3b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b3b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b3bc:	2200      	movs	r2, #0
 800b3be:	fbbc f9f3 	udiv	r9, ip, r3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b3cc:	2f09      	cmp	r7, #9
 800b3ce:	d80f      	bhi.n	800b3f0 <_strtol_l.isra.0+0xa8>
 800b3d0:	463c      	mov	r4, r7
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	dd1b      	ble.n	800b40e <_strtol_l.isra.0+0xc6>
 800b3d6:	1c57      	adds	r7, r2, #1
 800b3d8:	d007      	beq.n	800b3ea <_strtol_l.isra.0+0xa2>
 800b3da:	4581      	cmp	r9, r0
 800b3dc:	d314      	bcc.n	800b408 <_strtol_l.isra.0+0xc0>
 800b3de:	d101      	bne.n	800b3e4 <_strtol_l.isra.0+0x9c>
 800b3e0:	45a2      	cmp	sl, r4
 800b3e2:	db11      	blt.n	800b408 <_strtol_l.isra.0+0xc0>
 800b3e4:	fb00 4003 	mla	r0, r0, r3, r4
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3ee:	e7eb      	b.n	800b3c8 <_strtol_l.isra.0+0x80>
 800b3f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b3f4:	2f19      	cmp	r7, #25
 800b3f6:	d801      	bhi.n	800b3fc <_strtol_l.isra.0+0xb4>
 800b3f8:	3c37      	subs	r4, #55	@ 0x37
 800b3fa:	e7ea      	b.n	800b3d2 <_strtol_l.isra.0+0x8a>
 800b3fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b400:	2f19      	cmp	r7, #25
 800b402:	d804      	bhi.n	800b40e <_strtol_l.isra.0+0xc6>
 800b404:	3c57      	subs	r4, #87	@ 0x57
 800b406:	e7e4      	b.n	800b3d2 <_strtol_l.isra.0+0x8a>
 800b408:	f04f 32ff 	mov.w	r2, #4294967295
 800b40c:	e7ed      	b.n	800b3ea <_strtol_l.isra.0+0xa2>
 800b40e:	1c53      	adds	r3, r2, #1
 800b410:	d108      	bne.n	800b424 <_strtol_l.isra.0+0xdc>
 800b412:	2322      	movs	r3, #34	@ 0x22
 800b414:	f8ce 3000 	str.w	r3, [lr]
 800b418:	4660      	mov	r0, ip
 800b41a:	f1b8 0f00 	cmp.w	r8, #0
 800b41e:	d0a0      	beq.n	800b362 <_strtol_l.isra.0+0x1a>
 800b420:	1e69      	subs	r1, r5, #1
 800b422:	e006      	b.n	800b432 <_strtol_l.isra.0+0xea>
 800b424:	b106      	cbz	r6, 800b428 <_strtol_l.isra.0+0xe0>
 800b426:	4240      	negs	r0, r0
 800b428:	f1b8 0f00 	cmp.w	r8, #0
 800b42c:	d099      	beq.n	800b362 <_strtol_l.isra.0+0x1a>
 800b42e:	2a00      	cmp	r2, #0
 800b430:	d1f6      	bne.n	800b420 <_strtol_l.isra.0+0xd8>
 800b432:	f8c8 1000 	str.w	r1, [r8]
 800b436:	e794      	b.n	800b362 <_strtol_l.isra.0+0x1a>
 800b438:	080112c9 	.word	0x080112c9

0800b43c <_strtol_r>:
 800b43c:	f7ff bf84 	b.w	800b348 <_strtol_l.isra.0>

0800b440 <strtol>:
 800b440:	4613      	mov	r3, r2
 800b442:	460a      	mov	r2, r1
 800b444:	4601      	mov	r1, r0
 800b446:	4802      	ldr	r0, [pc, #8]	@ (800b450 <strtol+0x10>)
 800b448:	6800      	ldr	r0, [r0, #0]
 800b44a:	f7ff bf7d 	b.w	800b348 <_strtol_l.isra.0>
 800b44e:	bf00      	nop
 800b450:	2000019c 	.word	0x2000019c

0800b454 <__cvt>:
 800b454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	ec57 6b10 	vmov	r6, r7, d0
 800b45c:	2f00      	cmp	r7, #0
 800b45e:	460c      	mov	r4, r1
 800b460:	4619      	mov	r1, r3
 800b462:	463b      	mov	r3, r7
 800b464:	bfbb      	ittet	lt
 800b466:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b46a:	461f      	movlt	r7, r3
 800b46c:	2300      	movge	r3, #0
 800b46e:	232d      	movlt	r3, #45	@ 0x2d
 800b470:	700b      	strb	r3, [r1, #0]
 800b472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b474:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b478:	4691      	mov	r9, r2
 800b47a:	f023 0820 	bic.w	r8, r3, #32
 800b47e:	bfbc      	itt	lt
 800b480:	4632      	movlt	r2, r6
 800b482:	4616      	movlt	r6, r2
 800b484:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b488:	d005      	beq.n	800b496 <__cvt+0x42>
 800b48a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b48e:	d100      	bne.n	800b492 <__cvt+0x3e>
 800b490:	3401      	adds	r4, #1
 800b492:	2102      	movs	r1, #2
 800b494:	e000      	b.n	800b498 <__cvt+0x44>
 800b496:	2103      	movs	r1, #3
 800b498:	ab03      	add	r3, sp, #12
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	ab02      	add	r3, sp, #8
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	ec47 6b10 	vmov	d0, r6, r7
 800b4a4:	4653      	mov	r3, sl
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	f001 ff9a 	bl	800d3e0 <_dtoa_r>
 800b4ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	d119      	bne.n	800b4e8 <__cvt+0x94>
 800b4b4:	f019 0f01 	tst.w	r9, #1
 800b4b8:	d00e      	beq.n	800b4d8 <__cvt+0x84>
 800b4ba:	eb00 0904 	add.w	r9, r0, r4
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	f7f5 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 800b4ca:	b108      	cbz	r0, 800b4d0 <__cvt+0x7c>
 800b4cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4d0:	2230      	movs	r2, #48	@ 0x30
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	454b      	cmp	r3, r9
 800b4d6:	d31e      	bcc.n	800b516 <__cvt+0xc2>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4dc:	1b5b      	subs	r3, r3, r5
 800b4de:	4628      	mov	r0, r5
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	b004      	add	sp, #16
 800b4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4ec:	eb00 0904 	add.w	r9, r0, r4
 800b4f0:	d1e5      	bne.n	800b4be <__cvt+0x6a>
 800b4f2:	7803      	ldrb	r3, [r0, #0]
 800b4f4:	2b30      	cmp	r3, #48	@ 0x30
 800b4f6:	d10a      	bne.n	800b50e <__cvt+0xba>
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f7f5 fafa 	bl	8000af8 <__aeabi_dcmpeq>
 800b504:	b918      	cbnz	r0, 800b50e <__cvt+0xba>
 800b506:	f1c4 0401 	rsb	r4, r4, #1
 800b50a:	f8ca 4000 	str.w	r4, [sl]
 800b50e:	f8da 3000 	ldr.w	r3, [sl]
 800b512:	4499      	add	r9, r3
 800b514:	e7d3      	b.n	800b4be <__cvt+0x6a>
 800b516:	1c59      	adds	r1, r3, #1
 800b518:	9103      	str	r1, [sp, #12]
 800b51a:	701a      	strb	r2, [r3, #0]
 800b51c:	e7d9      	b.n	800b4d2 <__cvt+0x7e>

0800b51e <__exponent>:
 800b51e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b520:	2900      	cmp	r1, #0
 800b522:	bfba      	itte	lt
 800b524:	4249      	neglt	r1, r1
 800b526:	232d      	movlt	r3, #45	@ 0x2d
 800b528:	232b      	movge	r3, #43	@ 0x2b
 800b52a:	2909      	cmp	r1, #9
 800b52c:	7002      	strb	r2, [r0, #0]
 800b52e:	7043      	strb	r3, [r0, #1]
 800b530:	dd29      	ble.n	800b586 <__exponent+0x68>
 800b532:	f10d 0307 	add.w	r3, sp, #7
 800b536:	461d      	mov	r5, r3
 800b538:	270a      	movs	r7, #10
 800b53a:	461a      	mov	r2, r3
 800b53c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b540:	fb07 1416 	mls	r4, r7, r6, r1
 800b544:	3430      	adds	r4, #48	@ 0x30
 800b546:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b54a:	460c      	mov	r4, r1
 800b54c:	2c63      	cmp	r4, #99	@ 0x63
 800b54e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b552:	4631      	mov	r1, r6
 800b554:	dcf1      	bgt.n	800b53a <__exponent+0x1c>
 800b556:	3130      	adds	r1, #48	@ 0x30
 800b558:	1e94      	subs	r4, r2, #2
 800b55a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b55e:	1c41      	adds	r1, r0, #1
 800b560:	4623      	mov	r3, r4
 800b562:	42ab      	cmp	r3, r5
 800b564:	d30a      	bcc.n	800b57c <__exponent+0x5e>
 800b566:	f10d 0309 	add.w	r3, sp, #9
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	42ac      	cmp	r4, r5
 800b56e:	bf88      	it	hi
 800b570:	2300      	movhi	r3, #0
 800b572:	3302      	adds	r3, #2
 800b574:	4403      	add	r3, r0
 800b576:	1a18      	subs	r0, r3, r0
 800b578:	b003      	add	sp, #12
 800b57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b57c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b580:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b584:	e7ed      	b.n	800b562 <__exponent+0x44>
 800b586:	2330      	movs	r3, #48	@ 0x30
 800b588:	3130      	adds	r1, #48	@ 0x30
 800b58a:	7083      	strb	r3, [r0, #2]
 800b58c:	70c1      	strb	r1, [r0, #3]
 800b58e:	1d03      	adds	r3, r0, #4
 800b590:	e7f1      	b.n	800b576 <__exponent+0x58>
	...

0800b594 <_printf_float>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	b08d      	sub	sp, #52	@ 0x34
 800b59a:	460c      	mov	r4, r1
 800b59c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	461f      	mov	r7, r3
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	f001 fdc1 	bl	800d12c <_localeconv_r>
 800b5aa:	6803      	ldr	r3, [r0, #0]
 800b5ac:	9304      	str	r3, [sp, #16]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f4 fe76 	bl	80002a0 <strlen>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5bc:	9005      	str	r0, [sp, #20]
 800b5be:	3307      	adds	r3, #7
 800b5c0:	f023 0307 	bic.w	r3, r3, #7
 800b5c4:	f103 0208 	add.w	r2, r3, #8
 800b5c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b5cc:	f8d4 b000 	ldr.w	fp, [r4]
 800b5d0:	f8c8 2000 	str.w	r2, [r8]
 800b5d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b5dc:	9307      	str	r3, [sp, #28]
 800b5de:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b5e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5ea:	4b9c      	ldr	r3, [pc, #624]	@ (800b85c <_printf_float+0x2c8>)
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	f7f5 fab4 	bl	8000b5c <__aeabi_dcmpun>
 800b5f4:	bb70      	cbnz	r0, 800b654 <_printf_float+0xc0>
 800b5f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5fa:	4b98      	ldr	r3, [pc, #608]	@ (800b85c <_printf_float+0x2c8>)
 800b5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b600:	f7f5 fa8e 	bl	8000b20 <__aeabi_dcmple>
 800b604:	bb30      	cbnz	r0, 800b654 <_printf_float+0xc0>
 800b606:	2200      	movs	r2, #0
 800b608:	2300      	movs	r3, #0
 800b60a:	4640      	mov	r0, r8
 800b60c:	4649      	mov	r1, r9
 800b60e:	f7f5 fa7d 	bl	8000b0c <__aeabi_dcmplt>
 800b612:	b110      	cbz	r0, 800b61a <_printf_float+0x86>
 800b614:	232d      	movs	r3, #45	@ 0x2d
 800b616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b61a:	4a91      	ldr	r2, [pc, #580]	@ (800b860 <_printf_float+0x2cc>)
 800b61c:	4b91      	ldr	r3, [pc, #580]	@ (800b864 <_printf_float+0x2d0>)
 800b61e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b622:	bf8c      	ite	hi
 800b624:	4690      	movhi	r8, r2
 800b626:	4698      	movls	r8, r3
 800b628:	2303      	movs	r3, #3
 800b62a:	6123      	str	r3, [r4, #16]
 800b62c:	f02b 0304 	bic.w	r3, fp, #4
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	f04f 0900 	mov.w	r9, #0
 800b636:	9700      	str	r7, [sp, #0]
 800b638:	4633      	mov	r3, r6
 800b63a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b63c:	4621      	mov	r1, r4
 800b63e:	4628      	mov	r0, r5
 800b640:	f000 f9d2 	bl	800b9e8 <_printf_common>
 800b644:	3001      	adds	r0, #1
 800b646:	f040 808d 	bne.w	800b764 <_printf_float+0x1d0>
 800b64a:	f04f 30ff 	mov.w	r0, #4294967295
 800b64e:	b00d      	add	sp, #52	@ 0x34
 800b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b654:	4642      	mov	r2, r8
 800b656:	464b      	mov	r3, r9
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7f5 fa7e 	bl	8000b5c <__aeabi_dcmpun>
 800b660:	b140      	cbz	r0, 800b674 <_printf_float+0xe0>
 800b662:	464b      	mov	r3, r9
 800b664:	2b00      	cmp	r3, #0
 800b666:	bfbc      	itt	lt
 800b668:	232d      	movlt	r3, #45	@ 0x2d
 800b66a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b66e:	4a7e      	ldr	r2, [pc, #504]	@ (800b868 <_printf_float+0x2d4>)
 800b670:	4b7e      	ldr	r3, [pc, #504]	@ (800b86c <_printf_float+0x2d8>)
 800b672:	e7d4      	b.n	800b61e <_printf_float+0x8a>
 800b674:	6863      	ldr	r3, [r4, #4]
 800b676:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b67a:	9206      	str	r2, [sp, #24]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	d13b      	bne.n	800b6f8 <_printf_float+0x164>
 800b680:	2306      	movs	r3, #6
 800b682:	6063      	str	r3, [r4, #4]
 800b684:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b688:	2300      	movs	r3, #0
 800b68a:	6022      	str	r2, [r4, #0]
 800b68c:	9303      	str	r3, [sp, #12]
 800b68e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b690:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b694:	ab09      	add	r3, sp, #36	@ 0x24
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	6861      	ldr	r1, [r4, #4]
 800b69a:	ec49 8b10 	vmov	d0, r8, r9
 800b69e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f7ff fed6 	bl	800b454 <__cvt>
 800b6a8:	9b06      	ldr	r3, [sp, #24]
 800b6aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6ac:	2b47      	cmp	r3, #71	@ 0x47
 800b6ae:	4680      	mov	r8, r0
 800b6b0:	d129      	bne.n	800b706 <_printf_float+0x172>
 800b6b2:	1cc8      	adds	r0, r1, #3
 800b6b4:	db02      	blt.n	800b6bc <_printf_float+0x128>
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	dd41      	ble.n	800b740 <_printf_float+0x1ac>
 800b6bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6c0:	fa5f fa8a 	uxtb.w	sl, sl
 800b6c4:	3901      	subs	r1, #1
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b6cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6ce:	f7ff ff26 	bl	800b51e <__exponent>
 800b6d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6d4:	1813      	adds	r3, r2, r0
 800b6d6:	2a01      	cmp	r2, #1
 800b6d8:	4681      	mov	r9, r0
 800b6da:	6123      	str	r3, [r4, #16]
 800b6dc:	dc02      	bgt.n	800b6e4 <_printf_float+0x150>
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	07d2      	lsls	r2, r2, #31
 800b6e2:	d501      	bpl.n	800b6e8 <_printf_float+0x154>
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	6123      	str	r3, [r4, #16]
 800b6e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0a2      	beq.n	800b636 <_printf_float+0xa2>
 800b6f0:	232d      	movs	r3, #45	@ 0x2d
 800b6f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6f6:	e79e      	b.n	800b636 <_printf_float+0xa2>
 800b6f8:	9a06      	ldr	r2, [sp, #24]
 800b6fa:	2a47      	cmp	r2, #71	@ 0x47
 800b6fc:	d1c2      	bne.n	800b684 <_printf_float+0xf0>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1c0      	bne.n	800b684 <_printf_float+0xf0>
 800b702:	2301      	movs	r3, #1
 800b704:	e7bd      	b.n	800b682 <_printf_float+0xee>
 800b706:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b70a:	d9db      	bls.n	800b6c4 <_printf_float+0x130>
 800b70c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b710:	d118      	bne.n	800b744 <_printf_float+0x1b0>
 800b712:	2900      	cmp	r1, #0
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	dd0b      	ble.n	800b730 <_printf_float+0x19c>
 800b718:	6121      	str	r1, [r4, #16]
 800b71a:	b913      	cbnz	r3, 800b722 <_printf_float+0x18e>
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	07d0      	lsls	r0, r2, #31
 800b720:	d502      	bpl.n	800b728 <_printf_float+0x194>
 800b722:	3301      	adds	r3, #1
 800b724:	440b      	add	r3, r1
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b72a:	f04f 0900 	mov.w	r9, #0
 800b72e:	e7db      	b.n	800b6e8 <_printf_float+0x154>
 800b730:	b913      	cbnz	r3, 800b738 <_printf_float+0x1a4>
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	07d2      	lsls	r2, r2, #31
 800b736:	d501      	bpl.n	800b73c <_printf_float+0x1a8>
 800b738:	3302      	adds	r3, #2
 800b73a:	e7f4      	b.n	800b726 <_printf_float+0x192>
 800b73c:	2301      	movs	r3, #1
 800b73e:	e7f2      	b.n	800b726 <_printf_float+0x192>
 800b740:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b746:	4299      	cmp	r1, r3
 800b748:	db05      	blt.n	800b756 <_printf_float+0x1c2>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	6121      	str	r1, [r4, #16]
 800b74e:	07d8      	lsls	r0, r3, #31
 800b750:	d5ea      	bpl.n	800b728 <_printf_float+0x194>
 800b752:	1c4b      	adds	r3, r1, #1
 800b754:	e7e7      	b.n	800b726 <_printf_float+0x192>
 800b756:	2900      	cmp	r1, #0
 800b758:	bfd4      	ite	le
 800b75a:	f1c1 0202 	rsble	r2, r1, #2
 800b75e:	2201      	movgt	r2, #1
 800b760:	4413      	add	r3, r2
 800b762:	e7e0      	b.n	800b726 <_printf_float+0x192>
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	055a      	lsls	r2, r3, #21
 800b768:	d407      	bmi.n	800b77a <_printf_float+0x1e6>
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	4642      	mov	r2, r8
 800b76e:	4631      	mov	r1, r6
 800b770:	4628      	mov	r0, r5
 800b772:	47b8      	blx	r7
 800b774:	3001      	adds	r0, #1
 800b776:	d12b      	bne.n	800b7d0 <_printf_float+0x23c>
 800b778:	e767      	b.n	800b64a <_printf_float+0xb6>
 800b77a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b77e:	f240 80dd 	bls.w	800b93c <_printf_float+0x3a8>
 800b782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b786:	2200      	movs	r2, #0
 800b788:	2300      	movs	r3, #0
 800b78a:	f7f5 f9b5 	bl	8000af8 <__aeabi_dcmpeq>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d033      	beq.n	800b7fa <_printf_float+0x266>
 800b792:	4a37      	ldr	r2, [pc, #220]	@ (800b870 <_printf_float+0x2dc>)
 800b794:	2301      	movs	r3, #1
 800b796:	4631      	mov	r1, r6
 800b798:	4628      	mov	r0, r5
 800b79a:	47b8      	blx	r7
 800b79c:	3001      	adds	r0, #1
 800b79e:	f43f af54 	beq.w	800b64a <_printf_float+0xb6>
 800b7a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b7a6:	4543      	cmp	r3, r8
 800b7a8:	db02      	blt.n	800b7b0 <_printf_float+0x21c>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	07d8      	lsls	r0, r3, #31
 800b7ae:	d50f      	bpl.n	800b7d0 <_printf_float+0x23c>
 800b7b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	47b8      	blx	r7
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f43f af45 	beq.w	800b64a <_printf_float+0xb6>
 800b7c0:	f04f 0900 	mov.w	r9, #0
 800b7c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7c8:	f104 0a1a 	add.w	sl, r4, #26
 800b7cc:	45c8      	cmp	r8, r9
 800b7ce:	dc09      	bgt.n	800b7e4 <_printf_float+0x250>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	079b      	lsls	r3, r3, #30
 800b7d4:	f100 8103 	bmi.w	800b9de <_printf_float+0x44a>
 800b7d8:	68e0      	ldr	r0, [r4, #12]
 800b7da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7dc:	4298      	cmp	r0, r3
 800b7de:	bfb8      	it	lt
 800b7e0:	4618      	movlt	r0, r3
 800b7e2:	e734      	b.n	800b64e <_printf_float+0xba>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	4652      	mov	r2, sl
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	47b8      	blx	r7
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	f43f af2b 	beq.w	800b64a <_printf_float+0xb6>
 800b7f4:	f109 0901 	add.w	r9, r9, #1
 800b7f8:	e7e8      	b.n	800b7cc <_printf_float+0x238>
 800b7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dc39      	bgt.n	800b874 <_printf_float+0x2e0>
 800b800:	4a1b      	ldr	r2, [pc, #108]	@ (800b870 <_printf_float+0x2dc>)
 800b802:	2301      	movs	r3, #1
 800b804:	4631      	mov	r1, r6
 800b806:	4628      	mov	r0, r5
 800b808:	47b8      	blx	r7
 800b80a:	3001      	adds	r0, #1
 800b80c:	f43f af1d 	beq.w	800b64a <_printf_float+0xb6>
 800b810:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b814:	ea59 0303 	orrs.w	r3, r9, r3
 800b818:	d102      	bne.n	800b820 <_printf_float+0x28c>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	07d9      	lsls	r1, r3, #31
 800b81e:	d5d7      	bpl.n	800b7d0 <_printf_float+0x23c>
 800b820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b824:	4631      	mov	r1, r6
 800b826:	4628      	mov	r0, r5
 800b828:	47b8      	blx	r7
 800b82a:	3001      	adds	r0, #1
 800b82c:	f43f af0d 	beq.w	800b64a <_printf_float+0xb6>
 800b830:	f04f 0a00 	mov.w	sl, #0
 800b834:	f104 0b1a 	add.w	fp, r4, #26
 800b838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83a:	425b      	negs	r3, r3
 800b83c:	4553      	cmp	r3, sl
 800b83e:	dc01      	bgt.n	800b844 <_printf_float+0x2b0>
 800b840:	464b      	mov	r3, r9
 800b842:	e793      	b.n	800b76c <_printf_float+0x1d8>
 800b844:	2301      	movs	r3, #1
 800b846:	465a      	mov	r2, fp
 800b848:	4631      	mov	r1, r6
 800b84a:	4628      	mov	r0, r5
 800b84c:	47b8      	blx	r7
 800b84e:	3001      	adds	r0, #1
 800b850:	f43f aefb 	beq.w	800b64a <_printf_float+0xb6>
 800b854:	f10a 0a01 	add.w	sl, sl, #1
 800b858:	e7ee      	b.n	800b838 <_printf_float+0x2a4>
 800b85a:	bf00      	nop
 800b85c:	7fefffff 	.word	0x7fefffff
 800b860:	08010f16 	.word	0x08010f16
 800b864:	08010f12 	.word	0x08010f12
 800b868:	08010f1e 	.word	0x08010f1e
 800b86c:	08010f1a 	.word	0x08010f1a
 800b870:	080111f6 	.word	0x080111f6
 800b874:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b876:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b87a:	4553      	cmp	r3, sl
 800b87c:	bfa8      	it	ge
 800b87e:	4653      	movge	r3, sl
 800b880:	2b00      	cmp	r3, #0
 800b882:	4699      	mov	r9, r3
 800b884:	dc36      	bgt.n	800b8f4 <_printf_float+0x360>
 800b886:	f04f 0b00 	mov.w	fp, #0
 800b88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b88e:	f104 021a 	add.w	r2, r4, #26
 800b892:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b894:	9306      	str	r3, [sp, #24]
 800b896:	eba3 0309 	sub.w	r3, r3, r9
 800b89a:	455b      	cmp	r3, fp
 800b89c:	dc31      	bgt.n	800b902 <_printf_float+0x36e>
 800b89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a0:	459a      	cmp	sl, r3
 800b8a2:	dc3a      	bgt.n	800b91a <_printf_float+0x386>
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	07da      	lsls	r2, r3, #31
 800b8a8:	d437      	bmi.n	800b91a <_printf_float+0x386>
 800b8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ac:	ebaa 0903 	sub.w	r9, sl, r3
 800b8b0:	9b06      	ldr	r3, [sp, #24]
 800b8b2:	ebaa 0303 	sub.w	r3, sl, r3
 800b8b6:	4599      	cmp	r9, r3
 800b8b8:	bfa8      	it	ge
 800b8ba:	4699      	movge	r9, r3
 800b8bc:	f1b9 0f00 	cmp.w	r9, #0
 800b8c0:	dc33      	bgt.n	800b92a <_printf_float+0x396>
 800b8c2:	f04f 0800 	mov.w	r8, #0
 800b8c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8ca:	f104 0b1a 	add.w	fp, r4, #26
 800b8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d0:	ebaa 0303 	sub.w	r3, sl, r3
 800b8d4:	eba3 0309 	sub.w	r3, r3, r9
 800b8d8:	4543      	cmp	r3, r8
 800b8da:	f77f af79 	ble.w	800b7d0 <_printf_float+0x23c>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	465a      	mov	r2, fp
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b8      	blx	r7
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	f43f aeae 	beq.w	800b64a <_printf_float+0xb6>
 800b8ee:	f108 0801 	add.w	r8, r8, #1
 800b8f2:	e7ec      	b.n	800b8ce <_printf_float+0x33a>
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	47b8      	blx	r7
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d1c2      	bne.n	800b886 <_printf_float+0x2f2>
 800b900:	e6a3      	b.n	800b64a <_printf_float+0xb6>
 800b902:	2301      	movs	r3, #1
 800b904:	4631      	mov	r1, r6
 800b906:	4628      	mov	r0, r5
 800b908:	9206      	str	r2, [sp, #24]
 800b90a:	47b8      	blx	r7
 800b90c:	3001      	adds	r0, #1
 800b90e:	f43f ae9c 	beq.w	800b64a <_printf_float+0xb6>
 800b912:	9a06      	ldr	r2, [sp, #24]
 800b914:	f10b 0b01 	add.w	fp, fp, #1
 800b918:	e7bb      	b.n	800b892 <_printf_float+0x2fe>
 800b91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b91e:	4631      	mov	r1, r6
 800b920:	4628      	mov	r0, r5
 800b922:	47b8      	blx	r7
 800b924:	3001      	adds	r0, #1
 800b926:	d1c0      	bne.n	800b8aa <_printf_float+0x316>
 800b928:	e68f      	b.n	800b64a <_printf_float+0xb6>
 800b92a:	9a06      	ldr	r2, [sp, #24]
 800b92c:	464b      	mov	r3, r9
 800b92e:	4442      	add	r2, r8
 800b930:	4631      	mov	r1, r6
 800b932:	4628      	mov	r0, r5
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	d1c3      	bne.n	800b8c2 <_printf_float+0x32e>
 800b93a:	e686      	b.n	800b64a <_printf_float+0xb6>
 800b93c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b940:	f1ba 0f01 	cmp.w	sl, #1
 800b944:	dc01      	bgt.n	800b94a <_printf_float+0x3b6>
 800b946:	07db      	lsls	r3, r3, #31
 800b948:	d536      	bpl.n	800b9b8 <_printf_float+0x424>
 800b94a:	2301      	movs	r3, #1
 800b94c:	4642      	mov	r2, r8
 800b94e:	4631      	mov	r1, r6
 800b950:	4628      	mov	r0, r5
 800b952:	47b8      	blx	r7
 800b954:	3001      	adds	r0, #1
 800b956:	f43f ae78 	beq.w	800b64a <_printf_float+0xb6>
 800b95a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b95e:	4631      	mov	r1, r6
 800b960:	4628      	mov	r0, r5
 800b962:	47b8      	blx	r7
 800b964:	3001      	adds	r0, #1
 800b966:	f43f ae70 	beq.w	800b64a <_printf_float+0xb6>
 800b96a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b96e:	2200      	movs	r2, #0
 800b970:	2300      	movs	r3, #0
 800b972:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b976:	f7f5 f8bf 	bl	8000af8 <__aeabi_dcmpeq>
 800b97a:	b9c0      	cbnz	r0, 800b9ae <_printf_float+0x41a>
 800b97c:	4653      	mov	r3, sl
 800b97e:	f108 0201 	add.w	r2, r8, #1
 800b982:	4631      	mov	r1, r6
 800b984:	4628      	mov	r0, r5
 800b986:	47b8      	blx	r7
 800b988:	3001      	adds	r0, #1
 800b98a:	d10c      	bne.n	800b9a6 <_printf_float+0x412>
 800b98c:	e65d      	b.n	800b64a <_printf_float+0xb6>
 800b98e:	2301      	movs	r3, #1
 800b990:	465a      	mov	r2, fp
 800b992:	4631      	mov	r1, r6
 800b994:	4628      	mov	r0, r5
 800b996:	47b8      	blx	r7
 800b998:	3001      	adds	r0, #1
 800b99a:	f43f ae56 	beq.w	800b64a <_printf_float+0xb6>
 800b99e:	f108 0801 	add.w	r8, r8, #1
 800b9a2:	45d0      	cmp	r8, sl
 800b9a4:	dbf3      	blt.n	800b98e <_printf_float+0x3fa>
 800b9a6:	464b      	mov	r3, r9
 800b9a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b9ac:	e6df      	b.n	800b76e <_printf_float+0x1da>
 800b9ae:	f04f 0800 	mov.w	r8, #0
 800b9b2:	f104 0b1a 	add.w	fp, r4, #26
 800b9b6:	e7f4      	b.n	800b9a2 <_printf_float+0x40e>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	4642      	mov	r2, r8
 800b9bc:	e7e1      	b.n	800b982 <_printf_float+0x3ee>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	464a      	mov	r2, r9
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	47b8      	blx	r7
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	f43f ae3e 	beq.w	800b64a <_printf_float+0xb6>
 800b9ce:	f108 0801 	add.w	r8, r8, #1
 800b9d2:	68e3      	ldr	r3, [r4, #12]
 800b9d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9d6:	1a5b      	subs	r3, r3, r1
 800b9d8:	4543      	cmp	r3, r8
 800b9da:	dcf0      	bgt.n	800b9be <_printf_float+0x42a>
 800b9dc:	e6fc      	b.n	800b7d8 <_printf_float+0x244>
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	f104 0919 	add.w	r9, r4, #25
 800b9e6:	e7f4      	b.n	800b9d2 <_printf_float+0x43e>

0800b9e8 <_printf_common>:
 800b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	4698      	mov	r8, r3
 800b9f0:	688a      	ldr	r2, [r1, #8]
 800b9f2:	690b      	ldr	r3, [r1, #16]
 800b9f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	bfb8      	it	lt
 800b9fc:	4613      	movlt	r3, r2
 800b9fe:	6033      	str	r3, [r6, #0]
 800ba00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba04:	4607      	mov	r7, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	b10a      	cbz	r2, 800ba0e <_printf_common+0x26>
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	6033      	str	r3, [r6, #0]
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	0699      	lsls	r1, r3, #26
 800ba12:	bf42      	ittt	mi
 800ba14:	6833      	ldrmi	r3, [r6, #0]
 800ba16:	3302      	addmi	r3, #2
 800ba18:	6033      	strmi	r3, [r6, #0]
 800ba1a:	6825      	ldr	r5, [r4, #0]
 800ba1c:	f015 0506 	ands.w	r5, r5, #6
 800ba20:	d106      	bne.n	800ba30 <_printf_common+0x48>
 800ba22:	f104 0a19 	add.w	sl, r4, #25
 800ba26:	68e3      	ldr	r3, [r4, #12]
 800ba28:	6832      	ldr	r2, [r6, #0]
 800ba2a:	1a9b      	subs	r3, r3, r2
 800ba2c:	42ab      	cmp	r3, r5
 800ba2e:	dc26      	bgt.n	800ba7e <_printf_common+0x96>
 800ba30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba34:	6822      	ldr	r2, [r4, #0]
 800ba36:	3b00      	subs	r3, #0
 800ba38:	bf18      	it	ne
 800ba3a:	2301      	movne	r3, #1
 800ba3c:	0692      	lsls	r2, r2, #26
 800ba3e:	d42b      	bmi.n	800ba98 <_printf_common+0xb0>
 800ba40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba44:	4641      	mov	r1, r8
 800ba46:	4638      	mov	r0, r7
 800ba48:	47c8      	blx	r9
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	d01e      	beq.n	800ba8c <_printf_common+0xa4>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	6922      	ldr	r2, [r4, #16]
 800ba52:	f003 0306 	and.w	r3, r3, #6
 800ba56:	2b04      	cmp	r3, #4
 800ba58:	bf02      	ittt	eq
 800ba5a:	68e5      	ldreq	r5, [r4, #12]
 800ba5c:	6833      	ldreq	r3, [r6, #0]
 800ba5e:	1aed      	subeq	r5, r5, r3
 800ba60:	68a3      	ldr	r3, [r4, #8]
 800ba62:	bf0c      	ite	eq
 800ba64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba68:	2500      	movne	r5, #0
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	bfc4      	itt	gt
 800ba6e:	1a9b      	subgt	r3, r3, r2
 800ba70:	18ed      	addgt	r5, r5, r3
 800ba72:	2600      	movs	r6, #0
 800ba74:	341a      	adds	r4, #26
 800ba76:	42b5      	cmp	r5, r6
 800ba78:	d11a      	bne.n	800bab0 <_printf_common+0xc8>
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	e008      	b.n	800ba90 <_printf_common+0xa8>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	4652      	mov	r2, sl
 800ba82:	4641      	mov	r1, r8
 800ba84:	4638      	mov	r0, r7
 800ba86:	47c8      	blx	r9
 800ba88:	3001      	adds	r0, #1
 800ba8a:	d103      	bne.n	800ba94 <_printf_common+0xac>
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba94:	3501      	adds	r5, #1
 800ba96:	e7c6      	b.n	800ba26 <_printf_common+0x3e>
 800ba98:	18e1      	adds	r1, r4, r3
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	2030      	movs	r0, #48	@ 0x30
 800ba9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baa2:	4422      	add	r2, r4
 800baa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800baa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baac:	3302      	adds	r3, #2
 800baae:	e7c7      	b.n	800ba40 <_printf_common+0x58>
 800bab0:	2301      	movs	r3, #1
 800bab2:	4622      	mov	r2, r4
 800bab4:	4641      	mov	r1, r8
 800bab6:	4638      	mov	r0, r7
 800bab8:	47c8      	blx	r9
 800baba:	3001      	adds	r0, #1
 800babc:	d0e6      	beq.n	800ba8c <_printf_common+0xa4>
 800babe:	3601      	adds	r6, #1
 800bac0:	e7d9      	b.n	800ba76 <_printf_common+0x8e>
	...

0800bac4 <_printf_i>:
 800bac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bac8:	7e0f      	ldrb	r7, [r1, #24]
 800baca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bacc:	2f78      	cmp	r7, #120	@ 0x78
 800bace:	4691      	mov	r9, r2
 800bad0:	4680      	mov	r8, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	469a      	mov	sl, r3
 800bad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bada:	d807      	bhi.n	800baec <_printf_i+0x28>
 800badc:	2f62      	cmp	r7, #98	@ 0x62
 800bade:	d80a      	bhi.n	800baf6 <_printf_i+0x32>
 800bae0:	2f00      	cmp	r7, #0
 800bae2:	f000 80d1 	beq.w	800bc88 <_printf_i+0x1c4>
 800bae6:	2f58      	cmp	r7, #88	@ 0x58
 800bae8:	f000 80b8 	beq.w	800bc5c <_printf_i+0x198>
 800baec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800baf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800baf4:	e03a      	b.n	800bb6c <_printf_i+0xa8>
 800baf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bafa:	2b15      	cmp	r3, #21
 800bafc:	d8f6      	bhi.n	800baec <_printf_i+0x28>
 800bafe:	a101      	add	r1, pc, #4	@ (adr r1, 800bb04 <_printf_i+0x40>)
 800bb00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb04:	0800bb5d 	.word	0x0800bb5d
 800bb08:	0800bb71 	.word	0x0800bb71
 800bb0c:	0800baed 	.word	0x0800baed
 800bb10:	0800baed 	.word	0x0800baed
 800bb14:	0800baed 	.word	0x0800baed
 800bb18:	0800baed 	.word	0x0800baed
 800bb1c:	0800bb71 	.word	0x0800bb71
 800bb20:	0800baed 	.word	0x0800baed
 800bb24:	0800baed 	.word	0x0800baed
 800bb28:	0800baed 	.word	0x0800baed
 800bb2c:	0800baed 	.word	0x0800baed
 800bb30:	0800bc6f 	.word	0x0800bc6f
 800bb34:	0800bb9b 	.word	0x0800bb9b
 800bb38:	0800bc29 	.word	0x0800bc29
 800bb3c:	0800baed 	.word	0x0800baed
 800bb40:	0800baed 	.word	0x0800baed
 800bb44:	0800bc91 	.word	0x0800bc91
 800bb48:	0800baed 	.word	0x0800baed
 800bb4c:	0800bb9b 	.word	0x0800bb9b
 800bb50:	0800baed 	.word	0x0800baed
 800bb54:	0800baed 	.word	0x0800baed
 800bb58:	0800bc31 	.word	0x0800bc31
 800bb5c:	6833      	ldr	r3, [r6, #0]
 800bb5e:	1d1a      	adds	r2, r3, #4
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6032      	str	r2, [r6, #0]
 800bb64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e09c      	b.n	800bcaa <_printf_i+0x1e6>
 800bb70:	6833      	ldr	r3, [r6, #0]
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	1d19      	adds	r1, r3, #4
 800bb76:	6031      	str	r1, [r6, #0]
 800bb78:	0606      	lsls	r6, r0, #24
 800bb7a:	d501      	bpl.n	800bb80 <_printf_i+0xbc>
 800bb7c:	681d      	ldr	r5, [r3, #0]
 800bb7e:	e003      	b.n	800bb88 <_printf_i+0xc4>
 800bb80:	0645      	lsls	r5, r0, #25
 800bb82:	d5fb      	bpl.n	800bb7c <_printf_i+0xb8>
 800bb84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb88:	2d00      	cmp	r5, #0
 800bb8a:	da03      	bge.n	800bb94 <_printf_i+0xd0>
 800bb8c:	232d      	movs	r3, #45	@ 0x2d
 800bb8e:	426d      	negs	r5, r5
 800bb90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb94:	4858      	ldr	r0, [pc, #352]	@ (800bcf8 <_printf_i+0x234>)
 800bb96:	230a      	movs	r3, #10
 800bb98:	e011      	b.n	800bbbe <_printf_i+0xfa>
 800bb9a:	6821      	ldr	r1, [r4, #0]
 800bb9c:	6833      	ldr	r3, [r6, #0]
 800bb9e:	0608      	lsls	r0, r1, #24
 800bba0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bba4:	d402      	bmi.n	800bbac <_printf_i+0xe8>
 800bba6:	0649      	lsls	r1, r1, #25
 800bba8:	bf48      	it	mi
 800bbaa:	b2ad      	uxthmi	r5, r5
 800bbac:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbae:	4852      	ldr	r0, [pc, #328]	@ (800bcf8 <_printf_i+0x234>)
 800bbb0:	6033      	str	r3, [r6, #0]
 800bbb2:	bf14      	ite	ne
 800bbb4:	230a      	movne	r3, #10
 800bbb6:	2308      	moveq	r3, #8
 800bbb8:	2100      	movs	r1, #0
 800bbba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbbe:	6866      	ldr	r6, [r4, #4]
 800bbc0:	60a6      	str	r6, [r4, #8]
 800bbc2:	2e00      	cmp	r6, #0
 800bbc4:	db05      	blt.n	800bbd2 <_printf_i+0x10e>
 800bbc6:	6821      	ldr	r1, [r4, #0]
 800bbc8:	432e      	orrs	r6, r5
 800bbca:	f021 0104 	bic.w	r1, r1, #4
 800bbce:	6021      	str	r1, [r4, #0]
 800bbd0:	d04b      	beq.n	800bc6a <_printf_i+0x1a6>
 800bbd2:	4616      	mov	r6, r2
 800bbd4:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbd8:	fb03 5711 	mls	r7, r3, r1, r5
 800bbdc:	5dc7      	ldrb	r7, [r0, r7]
 800bbde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbe2:	462f      	mov	r7, r5
 800bbe4:	42bb      	cmp	r3, r7
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	d9f4      	bls.n	800bbd4 <_printf_i+0x110>
 800bbea:	2b08      	cmp	r3, #8
 800bbec:	d10b      	bne.n	800bc06 <_printf_i+0x142>
 800bbee:	6823      	ldr	r3, [r4, #0]
 800bbf0:	07df      	lsls	r7, r3, #31
 800bbf2:	d508      	bpl.n	800bc06 <_printf_i+0x142>
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	6861      	ldr	r1, [r4, #4]
 800bbf8:	4299      	cmp	r1, r3
 800bbfa:	bfde      	ittt	le
 800bbfc:	2330      	movle	r3, #48	@ 0x30
 800bbfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc02:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc06:	1b92      	subs	r2, r2, r6
 800bc08:	6122      	str	r2, [r4, #16]
 800bc0a:	f8cd a000 	str.w	sl, [sp]
 800bc0e:	464b      	mov	r3, r9
 800bc10:	aa03      	add	r2, sp, #12
 800bc12:	4621      	mov	r1, r4
 800bc14:	4640      	mov	r0, r8
 800bc16:	f7ff fee7 	bl	800b9e8 <_printf_common>
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	d14a      	bne.n	800bcb4 <_printf_i+0x1f0>
 800bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc22:	b004      	add	sp, #16
 800bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	f043 0320 	orr.w	r3, r3, #32
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	4832      	ldr	r0, [pc, #200]	@ (800bcfc <_printf_i+0x238>)
 800bc32:	2778      	movs	r7, #120	@ 0x78
 800bc34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	6831      	ldr	r1, [r6, #0]
 800bc3c:	061f      	lsls	r7, r3, #24
 800bc3e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc42:	d402      	bmi.n	800bc4a <_printf_i+0x186>
 800bc44:	065f      	lsls	r7, r3, #25
 800bc46:	bf48      	it	mi
 800bc48:	b2ad      	uxthmi	r5, r5
 800bc4a:	6031      	str	r1, [r6, #0]
 800bc4c:	07d9      	lsls	r1, r3, #31
 800bc4e:	bf44      	itt	mi
 800bc50:	f043 0320 	orrmi.w	r3, r3, #32
 800bc54:	6023      	strmi	r3, [r4, #0]
 800bc56:	b11d      	cbz	r5, 800bc60 <_printf_i+0x19c>
 800bc58:	2310      	movs	r3, #16
 800bc5a:	e7ad      	b.n	800bbb8 <_printf_i+0xf4>
 800bc5c:	4826      	ldr	r0, [pc, #152]	@ (800bcf8 <_printf_i+0x234>)
 800bc5e:	e7e9      	b.n	800bc34 <_printf_i+0x170>
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	f023 0320 	bic.w	r3, r3, #32
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	e7f6      	b.n	800bc58 <_printf_i+0x194>
 800bc6a:	4616      	mov	r6, r2
 800bc6c:	e7bd      	b.n	800bbea <_printf_i+0x126>
 800bc6e:	6833      	ldr	r3, [r6, #0]
 800bc70:	6825      	ldr	r5, [r4, #0]
 800bc72:	6961      	ldr	r1, [r4, #20]
 800bc74:	1d18      	adds	r0, r3, #4
 800bc76:	6030      	str	r0, [r6, #0]
 800bc78:	062e      	lsls	r6, r5, #24
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	d501      	bpl.n	800bc82 <_printf_i+0x1be>
 800bc7e:	6019      	str	r1, [r3, #0]
 800bc80:	e002      	b.n	800bc88 <_printf_i+0x1c4>
 800bc82:	0668      	lsls	r0, r5, #25
 800bc84:	d5fb      	bpl.n	800bc7e <_printf_i+0x1ba>
 800bc86:	8019      	strh	r1, [r3, #0]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	6123      	str	r3, [r4, #16]
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	e7bc      	b.n	800bc0a <_printf_i+0x146>
 800bc90:	6833      	ldr	r3, [r6, #0]
 800bc92:	1d1a      	adds	r2, r3, #4
 800bc94:	6032      	str	r2, [r6, #0]
 800bc96:	681e      	ldr	r6, [r3, #0]
 800bc98:	6862      	ldr	r2, [r4, #4]
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	f7f4 faaf 	bl	8000200 <memchr>
 800bca2:	b108      	cbz	r0, 800bca8 <_printf_i+0x1e4>
 800bca4:	1b80      	subs	r0, r0, r6
 800bca6:	6060      	str	r0, [r4, #4]
 800bca8:	6863      	ldr	r3, [r4, #4]
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	2300      	movs	r3, #0
 800bcae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcb2:	e7aa      	b.n	800bc0a <_printf_i+0x146>
 800bcb4:	6923      	ldr	r3, [r4, #16]
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	4649      	mov	r1, r9
 800bcba:	4640      	mov	r0, r8
 800bcbc:	47d0      	blx	sl
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d0ad      	beq.n	800bc1e <_printf_i+0x15a>
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	079b      	lsls	r3, r3, #30
 800bcc6:	d413      	bmi.n	800bcf0 <_printf_i+0x22c>
 800bcc8:	68e0      	ldr	r0, [r4, #12]
 800bcca:	9b03      	ldr	r3, [sp, #12]
 800bccc:	4298      	cmp	r0, r3
 800bcce:	bfb8      	it	lt
 800bcd0:	4618      	movlt	r0, r3
 800bcd2:	e7a6      	b.n	800bc22 <_printf_i+0x15e>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	4649      	mov	r1, r9
 800bcda:	4640      	mov	r0, r8
 800bcdc:	47d0      	blx	sl
 800bcde:	3001      	adds	r0, #1
 800bce0:	d09d      	beq.n	800bc1e <_printf_i+0x15a>
 800bce2:	3501      	adds	r5, #1
 800bce4:	68e3      	ldr	r3, [r4, #12]
 800bce6:	9903      	ldr	r1, [sp, #12]
 800bce8:	1a5b      	subs	r3, r3, r1
 800bcea:	42ab      	cmp	r3, r5
 800bcec:	dcf2      	bgt.n	800bcd4 <_printf_i+0x210>
 800bcee:	e7eb      	b.n	800bcc8 <_printf_i+0x204>
 800bcf0:	2500      	movs	r5, #0
 800bcf2:	f104 0619 	add.w	r6, r4, #25
 800bcf6:	e7f5      	b.n	800bce4 <_printf_i+0x220>
 800bcf8:	08010f22 	.word	0x08010f22
 800bcfc:	08010f33 	.word	0x08010f33

0800bd00 <std>:
 800bd00:	2300      	movs	r3, #0
 800bd02:	b510      	push	{r4, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	e9c0 3300 	strd	r3, r3, [r0]
 800bd0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd0e:	6083      	str	r3, [r0, #8]
 800bd10:	8181      	strh	r1, [r0, #12]
 800bd12:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd14:	81c2      	strh	r2, [r0, #14]
 800bd16:	6183      	str	r3, [r0, #24]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	305c      	adds	r0, #92	@ 0x5c
 800bd1e:	f000 faa1 	bl	800c264 <memset>
 800bd22:	4b0d      	ldr	r3, [pc, #52]	@ (800bd58 <std+0x58>)
 800bd24:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd26:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <std+0x5c>)
 800bd28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd60 <std+0x60>)
 800bd2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <std+0x64>)
 800bd30:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <std+0x68>)
 800bd34:	6224      	str	r4, [r4, #32]
 800bd36:	429c      	cmp	r4, r3
 800bd38:	d006      	beq.n	800bd48 <std+0x48>
 800bd3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd3e:	4294      	cmp	r4, r2
 800bd40:	d002      	beq.n	800bd48 <std+0x48>
 800bd42:	33d0      	adds	r3, #208	@ 0xd0
 800bd44:	429c      	cmp	r4, r3
 800bd46:	d105      	bne.n	800bd54 <std+0x54>
 800bd48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd50:	f001 ba72 	b.w	800d238 <__retarget_lock_init_recursive>
 800bd54:	bd10      	pop	{r4, pc}
 800bd56:	bf00      	nop
 800bd58:	0800c07d 	.word	0x0800c07d
 800bd5c:	0800c0a3 	.word	0x0800c0a3
 800bd60:	0800c0db 	.word	0x0800c0db
 800bd64:	0800c0ff 	.word	0x0800c0ff
 800bd68:	20006d94 	.word	0x20006d94

0800bd6c <stdio_exit_handler>:
 800bd6c:	4a02      	ldr	r2, [pc, #8]	@ (800bd78 <stdio_exit_handler+0xc>)
 800bd6e:	4903      	ldr	r1, [pc, #12]	@ (800bd7c <stdio_exit_handler+0x10>)
 800bd70:	4803      	ldr	r0, [pc, #12]	@ (800bd80 <stdio_exit_handler+0x14>)
 800bd72:	f000 b869 	b.w	800be48 <_fwalk_sglue>
 800bd76:	bf00      	nop
 800bd78:	2000001c 	.word	0x2000001c
 800bd7c:	0800ff89 	.word	0x0800ff89
 800bd80:	200001a0 	.word	0x200001a0

0800bd84 <cleanup_stdio>:
 800bd84:	6841      	ldr	r1, [r0, #4]
 800bd86:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <cleanup_stdio+0x34>)
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	d001      	beq.n	800bd94 <cleanup_stdio+0x10>
 800bd90:	f004 f8fa 	bl	800ff88 <_fflush_r>
 800bd94:	68a1      	ldr	r1, [r4, #8]
 800bd96:	4b09      	ldr	r3, [pc, #36]	@ (800bdbc <cleanup_stdio+0x38>)
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	d002      	beq.n	800bda2 <cleanup_stdio+0x1e>
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f004 f8f3 	bl	800ff88 <_fflush_r>
 800bda2:	68e1      	ldr	r1, [r4, #12]
 800bda4:	4b06      	ldr	r3, [pc, #24]	@ (800bdc0 <cleanup_stdio+0x3c>)
 800bda6:	4299      	cmp	r1, r3
 800bda8:	d004      	beq.n	800bdb4 <cleanup_stdio+0x30>
 800bdaa:	4620      	mov	r0, r4
 800bdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb0:	f004 b8ea 	b.w	800ff88 <_fflush_r>
 800bdb4:	bd10      	pop	{r4, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20006d94 	.word	0x20006d94
 800bdbc:	20006dfc 	.word	0x20006dfc
 800bdc0:	20006e64 	.word	0x20006e64

0800bdc4 <global_stdio_init.part.0>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bdf4 <global_stdio_init.part.0+0x30>)
 800bdc8:	4c0b      	ldr	r4, [pc, #44]	@ (800bdf8 <global_stdio_init.part.0+0x34>)
 800bdca:	4a0c      	ldr	r2, [pc, #48]	@ (800bdfc <global_stdio_init.part.0+0x38>)
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2104      	movs	r1, #4
 800bdd4:	f7ff ff94 	bl	800bd00 <std>
 800bdd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bddc:	2201      	movs	r2, #1
 800bdde:	2109      	movs	r1, #9
 800bde0:	f7ff ff8e 	bl	800bd00 <std>
 800bde4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bde8:	2202      	movs	r2, #2
 800bdea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdee:	2112      	movs	r1, #18
 800bdf0:	f7ff bf86 	b.w	800bd00 <std>
 800bdf4:	20006ecc 	.word	0x20006ecc
 800bdf8:	20006d94 	.word	0x20006d94
 800bdfc:	0800bd6d 	.word	0x0800bd6d

0800be00 <__sfp_lock_acquire>:
 800be00:	4801      	ldr	r0, [pc, #4]	@ (800be08 <__sfp_lock_acquire+0x8>)
 800be02:	f001 ba1b 	b.w	800d23c <__retarget_lock_acquire_recursive>
 800be06:	bf00      	nop
 800be08:	20006efb 	.word	0x20006efb

0800be0c <__sfp_lock_release>:
 800be0c:	4801      	ldr	r0, [pc, #4]	@ (800be14 <__sfp_lock_release+0x8>)
 800be0e:	f001 ba17 	b.w	800d240 <__retarget_lock_release_recursive>
 800be12:	bf00      	nop
 800be14:	20006efb 	.word	0x20006efb

0800be18 <__sinit>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	4604      	mov	r4, r0
 800be1c:	f7ff fff0 	bl	800be00 <__sfp_lock_acquire>
 800be20:	6a23      	ldr	r3, [r4, #32]
 800be22:	b11b      	cbz	r3, 800be2c <__sinit+0x14>
 800be24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be28:	f7ff bff0 	b.w	800be0c <__sfp_lock_release>
 800be2c:	4b04      	ldr	r3, [pc, #16]	@ (800be40 <__sinit+0x28>)
 800be2e:	6223      	str	r3, [r4, #32]
 800be30:	4b04      	ldr	r3, [pc, #16]	@ (800be44 <__sinit+0x2c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f5      	bne.n	800be24 <__sinit+0xc>
 800be38:	f7ff ffc4 	bl	800bdc4 <global_stdio_init.part.0>
 800be3c:	e7f2      	b.n	800be24 <__sinit+0xc>
 800be3e:	bf00      	nop
 800be40:	0800bd85 	.word	0x0800bd85
 800be44:	20006ecc 	.word	0x20006ecc

0800be48 <_fwalk_sglue>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	4607      	mov	r7, r0
 800be4e:	4688      	mov	r8, r1
 800be50:	4614      	mov	r4, r2
 800be52:	2600      	movs	r6, #0
 800be54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be58:	f1b9 0901 	subs.w	r9, r9, #1
 800be5c:	d505      	bpl.n	800be6a <_fwalk_sglue+0x22>
 800be5e:	6824      	ldr	r4, [r4, #0]
 800be60:	2c00      	cmp	r4, #0
 800be62:	d1f7      	bne.n	800be54 <_fwalk_sglue+0xc>
 800be64:	4630      	mov	r0, r6
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	89ab      	ldrh	r3, [r5, #12]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d907      	bls.n	800be80 <_fwalk_sglue+0x38>
 800be70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be74:	3301      	adds	r3, #1
 800be76:	d003      	beq.n	800be80 <_fwalk_sglue+0x38>
 800be78:	4629      	mov	r1, r5
 800be7a:	4638      	mov	r0, r7
 800be7c:	47c0      	blx	r8
 800be7e:	4306      	orrs	r6, r0
 800be80:	3568      	adds	r5, #104	@ 0x68
 800be82:	e7e9      	b.n	800be58 <_fwalk_sglue+0x10>

0800be84 <iprintf>:
 800be84:	b40f      	push	{r0, r1, r2, r3}
 800be86:	b507      	push	{r0, r1, r2, lr}
 800be88:	4906      	ldr	r1, [pc, #24]	@ (800bea4 <iprintf+0x20>)
 800be8a:	ab04      	add	r3, sp, #16
 800be8c:	6808      	ldr	r0, [r1, #0]
 800be8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be92:	6881      	ldr	r1, [r0, #8]
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	f003 fd8d 	bl	800f9b4 <_vfiprintf_r>
 800be9a:	b003      	add	sp, #12
 800be9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bea0:	b004      	add	sp, #16
 800bea2:	4770      	bx	lr
 800bea4:	2000019c 	.word	0x2000019c

0800bea8 <putchar>:
 800bea8:	4b02      	ldr	r3, [pc, #8]	@ (800beb4 <putchar+0xc>)
 800beaa:	4601      	mov	r1, r0
 800beac:	6818      	ldr	r0, [r3, #0]
 800beae:	6882      	ldr	r2, [r0, #8]
 800beb0:	f004 b906 	b.w	80100c0 <_putc_r>
 800beb4:	2000019c 	.word	0x2000019c

0800beb8 <_puts_r>:
 800beb8:	6a03      	ldr	r3, [r0, #32]
 800beba:	b570      	push	{r4, r5, r6, lr}
 800bebc:	6884      	ldr	r4, [r0, #8]
 800bebe:	4605      	mov	r5, r0
 800bec0:	460e      	mov	r6, r1
 800bec2:	b90b      	cbnz	r3, 800bec8 <_puts_r+0x10>
 800bec4:	f7ff ffa8 	bl	800be18 <__sinit>
 800bec8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800beca:	07db      	lsls	r3, r3, #31
 800becc:	d405      	bmi.n	800beda <_puts_r+0x22>
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	0598      	lsls	r0, r3, #22
 800bed2:	d402      	bmi.n	800beda <_puts_r+0x22>
 800bed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bed6:	f001 f9b1 	bl	800d23c <__retarget_lock_acquire_recursive>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	0719      	lsls	r1, r3, #28
 800bede:	d502      	bpl.n	800bee6 <_puts_r+0x2e>
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d135      	bne.n	800bf52 <_puts_r+0x9a>
 800bee6:	4621      	mov	r1, r4
 800bee8:	4628      	mov	r0, r5
 800beea:	f000 f94b 	bl	800c184 <__swsetup_r>
 800beee:	b380      	cbz	r0, 800bf52 <_puts_r+0x9a>
 800bef0:	f04f 35ff 	mov.w	r5, #4294967295
 800bef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bef6:	07da      	lsls	r2, r3, #31
 800bef8:	d405      	bmi.n	800bf06 <_puts_r+0x4e>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	059b      	lsls	r3, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_puts_r+0x4e>
 800bf00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf02:	f001 f99d 	bl	800d240 <__retarget_lock_release_recursive>
 800bf06:	4628      	mov	r0, r5
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da04      	bge.n	800bf18 <_puts_r+0x60>
 800bf0e:	69a2      	ldr	r2, [r4, #24]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	dc17      	bgt.n	800bf44 <_puts_r+0x8c>
 800bf14:	290a      	cmp	r1, #10
 800bf16:	d015      	beq.n	800bf44 <_puts_r+0x8c>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	6022      	str	r2, [r4, #0]
 800bf1e:	7019      	strb	r1, [r3, #0]
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf26:	3b01      	subs	r3, #1
 800bf28:	60a3      	str	r3, [r4, #8]
 800bf2a:	2900      	cmp	r1, #0
 800bf2c:	d1ed      	bne.n	800bf0a <_puts_r+0x52>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	da11      	bge.n	800bf56 <_puts_r+0x9e>
 800bf32:	4622      	mov	r2, r4
 800bf34:	210a      	movs	r1, #10
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 f8e5 	bl	800c106 <__swbuf_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d0d7      	beq.n	800bef0 <_puts_r+0x38>
 800bf40:	250a      	movs	r5, #10
 800bf42:	e7d7      	b.n	800bef4 <_puts_r+0x3c>
 800bf44:	4622      	mov	r2, r4
 800bf46:	4628      	mov	r0, r5
 800bf48:	f000 f8dd 	bl	800c106 <__swbuf_r>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	d1e7      	bne.n	800bf20 <_puts_r+0x68>
 800bf50:	e7ce      	b.n	800bef0 <_puts_r+0x38>
 800bf52:	3e01      	subs	r6, #1
 800bf54:	e7e4      	b.n	800bf20 <_puts_r+0x68>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	6022      	str	r2, [r4, #0]
 800bf5c:	220a      	movs	r2, #10
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	e7ee      	b.n	800bf40 <_puts_r+0x88>
	...

0800bf64 <puts>:
 800bf64:	4b02      	ldr	r3, [pc, #8]	@ (800bf70 <puts+0xc>)
 800bf66:	4601      	mov	r1, r0
 800bf68:	6818      	ldr	r0, [r3, #0]
 800bf6a:	f7ff bfa5 	b.w	800beb8 <_puts_r>
 800bf6e:	bf00      	nop
 800bf70:	2000019c 	.word	0x2000019c

0800bf74 <sniprintf>:
 800bf74:	b40c      	push	{r2, r3}
 800bf76:	b530      	push	{r4, r5, lr}
 800bf78:	4b18      	ldr	r3, [pc, #96]	@ (800bfdc <sniprintf+0x68>)
 800bf7a:	1e0c      	subs	r4, r1, #0
 800bf7c:	681d      	ldr	r5, [r3, #0]
 800bf7e:	b09d      	sub	sp, #116	@ 0x74
 800bf80:	da08      	bge.n	800bf94 <sniprintf+0x20>
 800bf82:	238b      	movs	r3, #139	@ 0x8b
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8a:	b01d      	add	sp, #116	@ 0x74
 800bf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf90:	b002      	add	sp, #8
 800bf92:	4770      	bx	lr
 800bf94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bf98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bfa2:	bf14      	ite	ne
 800bfa4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfa8:	4623      	moveq	r3, r4
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	9307      	str	r3, [sp, #28]
 800bfae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bfb2:	9002      	str	r0, [sp, #8]
 800bfb4:	9006      	str	r0, [sp, #24]
 800bfb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfbc:	ab21      	add	r3, sp, #132	@ 0x84
 800bfbe:	a902      	add	r1, sp, #8
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	f003 fa00 	bl	800f3c8 <_svfiprintf_r>
 800bfc8:	1c43      	adds	r3, r0, #1
 800bfca:	bfbc      	itt	lt
 800bfcc:	238b      	movlt	r3, #139	@ 0x8b
 800bfce:	602b      	strlt	r3, [r5, #0]
 800bfd0:	2c00      	cmp	r4, #0
 800bfd2:	d0da      	beq.n	800bf8a <sniprintf+0x16>
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
 800bfda:	e7d6      	b.n	800bf8a <sniprintf+0x16>
 800bfdc:	2000019c 	.word	0x2000019c

0800bfe0 <siprintf>:
 800bfe0:	b40e      	push	{r1, r2, r3}
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	b09d      	sub	sp, #116	@ 0x74
 800bfe6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bfe8:	9002      	str	r0, [sp, #8]
 800bfea:	9006      	str	r0, [sp, #24]
 800bfec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bff0:	480a      	ldr	r0, [pc, #40]	@ (800c01c <siprintf+0x3c>)
 800bff2:	9107      	str	r1, [sp, #28]
 800bff4:	9104      	str	r1, [sp, #16]
 800bff6:	490a      	ldr	r1, [pc, #40]	@ (800c020 <siprintf+0x40>)
 800bff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bffc:	9105      	str	r1, [sp, #20]
 800bffe:	2400      	movs	r4, #0
 800c000:	a902      	add	r1, sp, #8
 800c002:	6800      	ldr	r0, [r0, #0]
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c008:	f003 f9de 	bl	800f3c8 <_svfiprintf_r>
 800c00c:	9b02      	ldr	r3, [sp, #8]
 800c00e:	701c      	strb	r4, [r3, #0]
 800c010:	b01d      	add	sp, #116	@ 0x74
 800c012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c016:	b003      	add	sp, #12
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	2000019c 	.word	0x2000019c
 800c020:	ffff0208 	.word	0xffff0208

0800c024 <siscanf>:
 800c024:	b40e      	push	{r1, r2, r3}
 800c026:	b570      	push	{r4, r5, r6, lr}
 800c028:	b09d      	sub	sp, #116	@ 0x74
 800c02a:	ac21      	add	r4, sp, #132	@ 0x84
 800c02c:	2500      	movs	r5, #0
 800c02e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c032:	f854 6b04 	ldr.w	r6, [r4], #4
 800c036:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c03a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800c03c:	9002      	str	r0, [sp, #8]
 800c03e:	9006      	str	r0, [sp, #24]
 800c040:	f7f4 f92e 	bl	80002a0 <strlen>
 800c044:	4b0b      	ldr	r3, [pc, #44]	@ (800c074 <siscanf+0x50>)
 800c046:	9003      	str	r0, [sp, #12]
 800c048:	9007      	str	r0, [sp, #28]
 800c04a:	480b      	ldr	r0, [pc, #44]	@ (800c078 <siscanf+0x54>)
 800c04c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c04e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c052:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c056:	4632      	mov	r2, r6
 800c058:	4623      	mov	r3, r4
 800c05a:	a902      	add	r1, sp, #8
 800c05c:	6800      	ldr	r0, [r0, #0]
 800c05e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c060:	9514      	str	r5, [sp, #80]	@ 0x50
 800c062:	9401      	str	r4, [sp, #4]
 800c064:	f003 fb06 	bl	800f674 <__ssvfiscanf_r>
 800c068:	b01d      	add	sp, #116	@ 0x74
 800c06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c06e:	b003      	add	sp, #12
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	0800c09f 	.word	0x0800c09f
 800c078:	2000019c 	.word	0x2000019c

0800c07c <__sread>:
 800c07c:	b510      	push	{r4, lr}
 800c07e:	460c      	mov	r4, r1
 800c080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c084:	f001 f88a 	bl	800d19c <_read_r>
 800c088:	2800      	cmp	r0, #0
 800c08a:	bfab      	itete	ge
 800c08c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c08e:	89a3      	ldrhlt	r3, [r4, #12]
 800c090:	181b      	addge	r3, r3, r0
 800c092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c096:	bfac      	ite	ge
 800c098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c09a:	81a3      	strhlt	r3, [r4, #12]
 800c09c:	bd10      	pop	{r4, pc}

0800c09e <__seofread>:
 800c09e:	2000      	movs	r0, #0
 800c0a0:	4770      	bx	lr

0800c0a2 <__swrite>:
 800c0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a6:	461f      	mov	r7, r3
 800c0a8:	898b      	ldrh	r3, [r1, #12]
 800c0aa:	05db      	lsls	r3, r3, #23
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	4616      	mov	r6, r2
 800c0b2:	d505      	bpl.n	800c0c0 <__swrite+0x1e>
 800c0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f001 f85c 	bl	800d178 <_lseek_r>
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0ca:	81a3      	strh	r3, [r4, #12]
 800c0cc:	4632      	mov	r2, r6
 800c0ce:	463b      	mov	r3, r7
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d6:	f001 b873 	b.w	800d1c0 <_write_r>

0800c0da <__sseek>:
 800c0da:	b510      	push	{r4, lr}
 800c0dc:	460c      	mov	r4, r1
 800c0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e2:	f001 f849 	bl	800d178 <_lseek_r>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	bf15      	itete	ne
 800c0ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0f6:	81a3      	strheq	r3, [r4, #12]
 800c0f8:	bf18      	it	ne
 800c0fa:	81a3      	strhne	r3, [r4, #12]
 800c0fc:	bd10      	pop	{r4, pc}

0800c0fe <__sclose>:
 800c0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c102:	f001 b817 	b.w	800d134 <_close_r>

0800c106 <__swbuf_r>:
 800c106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c108:	460e      	mov	r6, r1
 800c10a:	4614      	mov	r4, r2
 800c10c:	4605      	mov	r5, r0
 800c10e:	b118      	cbz	r0, 800c118 <__swbuf_r+0x12>
 800c110:	6a03      	ldr	r3, [r0, #32]
 800c112:	b90b      	cbnz	r3, 800c118 <__swbuf_r+0x12>
 800c114:	f7ff fe80 	bl	800be18 <__sinit>
 800c118:	69a3      	ldr	r3, [r4, #24]
 800c11a:	60a3      	str	r3, [r4, #8]
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	071a      	lsls	r2, r3, #28
 800c120:	d501      	bpl.n	800c126 <__swbuf_r+0x20>
 800c122:	6923      	ldr	r3, [r4, #16]
 800c124:	b943      	cbnz	r3, 800c138 <__swbuf_r+0x32>
 800c126:	4621      	mov	r1, r4
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 f82b 	bl	800c184 <__swsetup_r>
 800c12e:	b118      	cbz	r0, 800c138 <__swbuf_r+0x32>
 800c130:	f04f 37ff 	mov.w	r7, #4294967295
 800c134:	4638      	mov	r0, r7
 800c136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	6922      	ldr	r2, [r4, #16]
 800c13c:	1a98      	subs	r0, r3, r2
 800c13e:	6963      	ldr	r3, [r4, #20]
 800c140:	b2f6      	uxtb	r6, r6
 800c142:	4283      	cmp	r3, r0
 800c144:	4637      	mov	r7, r6
 800c146:	dc05      	bgt.n	800c154 <__swbuf_r+0x4e>
 800c148:	4621      	mov	r1, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f003 ff1c 	bl	800ff88 <_fflush_r>
 800c150:	2800      	cmp	r0, #0
 800c152:	d1ed      	bne.n	800c130 <__swbuf_r+0x2a>
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	3b01      	subs	r3, #1
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	701e      	strb	r6, [r3, #0]
 800c162:	6962      	ldr	r2, [r4, #20]
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	429a      	cmp	r2, r3
 800c168:	d004      	beq.n	800c174 <__swbuf_r+0x6e>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	07db      	lsls	r3, r3, #31
 800c16e:	d5e1      	bpl.n	800c134 <__swbuf_r+0x2e>
 800c170:	2e0a      	cmp	r6, #10
 800c172:	d1df      	bne.n	800c134 <__swbuf_r+0x2e>
 800c174:	4621      	mov	r1, r4
 800c176:	4628      	mov	r0, r5
 800c178:	f003 ff06 	bl	800ff88 <_fflush_r>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d0d9      	beq.n	800c134 <__swbuf_r+0x2e>
 800c180:	e7d6      	b.n	800c130 <__swbuf_r+0x2a>
	...

0800c184 <__swsetup_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4b29      	ldr	r3, [pc, #164]	@ (800c22c <__swsetup_r+0xa8>)
 800c188:	4605      	mov	r5, r0
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	460c      	mov	r4, r1
 800c18e:	b118      	cbz	r0, 800c198 <__swsetup_r+0x14>
 800c190:	6a03      	ldr	r3, [r0, #32]
 800c192:	b90b      	cbnz	r3, 800c198 <__swsetup_r+0x14>
 800c194:	f7ff fe40 	bl	800be18 <__sinit>
 800c198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19c:	0719      	lsls	r1, r3, #28
 800c19e:	d422      	bmi.n	800c1e6 <__swsetup_r+0x62>
 800c1a0:	06da      	lsls	r2, r3, #27
 800c1a2:	d407      	bmi.n	800c1b4 <__swsetup_r+0x30>
 800c1a4:	2209      	movs	r2, #9
 800c1a6:	602a      	str	r2, [r5, #0]
 800c1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b2:	e033      	b.n	800c21c <__swsetup_r+0x98>
 800c1b4:	0758      	lsls	r0, r3, #29
 800c1b6:	d512      	bpl.n	800c1de <__swsetup_r+0x5a>
 800c1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1ba:	b141      	cbz	r1, 800c1ce <__swsetup_r+0x4a>
 800c1bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1c0:	4299      	cmp	r1, r3
 800c1c2:	d002      	beq.n	800c1ca <__swsetup_r+0x46>
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f001 fedb 	bl	800df80 <_free_r>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	6063      	str	r3, [r4, #4]
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	f043 0308 	orr.w	r3, r3, #8
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	b94b      	cbnz	r3, 800c1fe <__swsetup_r+0x7a>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1f4:	d003      	beq.n	800c1fe <__swsetup_r+0x7a>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f003 ff25 	bl	8010048 <__smakebuf_r>
 800c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c202:	f013 0201 	ands.w	r2, r3, #1
 800c206:	d00a      	beq.n	800c21e <__swsetup_r+0x9a>
 800c208:	2200      	movs	r2, #0
 800c20a:	60a2      	str	r2, [r4, #8]
 800c20c:	6962      	ldr	r2, [r4, #20]
 800c20e:	4252      	negs	r2, r2
 800c210:	61a2      	str	r2, [r4, #24]
 800c212:	6922      	ldr	r2, [r4, #16]
 800c214:	b942      	cbnz	r2, 800c228 <__swsetup_r+0xa4>
 800c216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c21a:	d1c5      	bne.n	800c1a8 <__swsetup_r+0x24>
 800c21c:	bd38      	pop	{r3, r4, r5, pc}
 800c21e:	0799      	lsls	r1, r3, #30
 800c220:	bf58      	it	pl
 800c222:	6962      	ldrpl	r2, [r4, #20]
 800c224:	60a2      	str	r2, [r4, #8]
 800c226:	e7f4      	b.n	800c212 <__swsetup_r+0x8e>
 800c228:	2000      	movs	r0, #0
 800c22a:	e7f7      	b.n	800c21c <__swsetup_r+0x98>
 800c22c:	2000019c 	.word	0x2000019c

0800c230 <memmove>:
 800c230:	4288      	cmp	r0, r1
 800c232:	b510      	push	{r4, lr}
 800c234:	eb01 0402 	add.w	r4, r1, r2
 800c238:	d902      	bls.n	800c240 <memmove+0x10>
 800c23a:	4284      	cmp	r4, r0
 800c23c:	4623      	mov	r3, r4
 800c23e:	d807      	bhi.n	800c250 <memmove+0x20>
 800c240:	1e43      	subs	r3, r0, #1
 800c242:	42a1      	cmp	r1, r4
 800c244:	d008      	beq.n	800c258 <memmove+0x28>
 800c246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c24a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c24e:	e7f8      	b.n	800c242 <memmove+0x12>
 800c250:	4402      	add	r2, r0
 800c252:	4601      	mov	r1, r0
 800c254:	428a      	cmp	r2, r1
 800c256:	d100      	bne.n	800c25a <memmove+0x2a>
 800c258:	bd10      	pop	{r4, pc}
 800c25a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c25e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c262:	e7f7      	b.n	800c254 <memmove+0x24>

0800c264 <memset>:
 800c264:	4402      	add	r2, r0
 800c266:	4603      	mov	r3, r0
 800c268:	4293      	cmp	r3, r2
 800c26a:	d100      	bne.n	800c26e <memset+0xa>
 800c26c:	4770      	bx	lr
 800c26e:	f803 1b01 	strb.w	r1, [r3], #1
 800c272:	e7f9      	b.n	800c268 <memset+0x4>

0800c274 <strchr>:
 800c274:	b2c9      	uxtb	r1, r1
 800c276:	4603      	mov	r3, r0
 800c278:	4618      	mov	r0, r3
 800c27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27e:	b112      	cbz	r2, 800c286 <strchr+0x12>
 800c280:	428a      	cmp	r2, r1
 800c282:	d1f9      	bne.n	800c278 <strchr+0x4>
 800c284:	4770      	bx	lr
 800c286:	2900      	cmp	r1, #0
 800c288:	bf18      	it	ne
 800c28a:	2000      	movne	r0, #0
 800c28c:	4770      	bx	lr

0800c28e <strcspn>:
 800c28e:	b570      	push	{r4, r5, r6, lr}
 800c290:	4603      	mov	r3, r0
 800c292:	461e      	mov	r6, r3
 800c294:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c298:	b144      	cbz	r4, 800c2ac <strcspn+0x1e>
 800c29a:	1e4a      	subs	r2, r1, #1
 800c29c:	e001      	b.n	800c2a2 <strcspn+0x14>
 800c29e:	42a5      	cmp	r5, r4
 800c2a0:	d004      	beq.n	800c2ac <strcspn+0x1e>
 800c2a2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c2a6:	2d00      	cmp	r5, #0
 800c2a8:	d1f9      	bne.n	800c29e <strcspn+0x10>
 800c2aa:	e7f2      	b.n	800c292 <strcspn+0x4>
 800c2ac:	1a30      	subs	r0, r6, r0
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}

0800c2b0 <strncmp>:
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	b16a      	cbz	r2, 800c2d0 <strncmp+0x20>
 800c2b4:	3901      	subs	r1, #1
 800c2b6:	1884      	adds	r4, r0, r2
 800c2b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d103      	bne.n	800c2cc <strncmp+0x1c>
 800c2c4:	42a0      	cmp	r0, r4
 800c2c6:	d001      	beq.n	800c2cc <strncmp+0x1c>
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	d1f5      	bne.n	800c2b8 <strncmp+0x8>
 800c2cc:	1ad0      	subs	r0, r2, r3
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	e7fc      	b.n	800c2ce <strncmp+0x1e>

0800c2d4 <strncpy>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	3901      	subs	r1, #1
 800c2d8:	4603      	mov	r3, r0
 800c2da:	b132      	cbz	r2, 800c2ea <strncpy+0x16>
 800c2dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c2e0:	f803 4b01 	strb.w	r4, [r3], #1
 800c2e4:	3a01      	subs	r2, #1
 800c2e6:	2c00      	cmp	r4, #0
 800c2e8:	d1f7      	bne.n	800c2da <strncpy+0x6>
 800c2ea:	441a      	add	r2, r3
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d100      	bne.n	800c2f4 <strncpy+0x20>
 800c2f2:	bd10      	pop	{r4, pc}
 800c2f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c2f8:	e7f9      	b.n	800c2ee <strncpy+0x1a>
	...

0800c2fc <strtok>:
 800c2fc:	4b16      	ldr	r3, [pc, #88]	@ (800c358 <strtok+0x5c>)
 800c2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c302:	681f      	ldr	r7, [r3, #0]
 800c304:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c306:	4605      	mov	r5, r0
 800c308:	460e      	mov	r6, r1
 800c30a:	b9ec      	cbnz	r4, 800c348 <strtok+0x4c>
 800c30c:	2050      	movs	r0, #80	@ 0x50
 800c30e:	f002 f9ff 	bl	800e710 <malloc>
 800c312:	4602      	mov	r2, r0
 800c314:	6478      	str	r0, [r7, #68]	@ 0x44
 800c316:	b920      	cbnz	r0, 800c322 <strtok+0x26>
 800c318:	4b10      	ldr	r3, [pc, #64]	@ (800c35c <strtok+0x60>)
 800c31a:	4811      	ldr	r0, [pc, #68]	@ (800c360 <strtok+0x64>)
 800c31c:	215b      	movs	r1, #91	@ 0x5b
 800c31e:	f000 ffaf 	bl	800d280 <__assert_func>
 800c322:	e9c0 4400 	strd	r4, r4, [r0]
 800c326:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c32a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c32e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c332:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c336:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c33a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c33e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c342:	6184      	str	r4, [r0, #24]
 800c344:	7704      	strb	r4, [r0, #28]
 800c346:	6244      	str	r4, [r0, #36]	@ 0x24
 800c348:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	2301      	movs	r3, #1
 800c350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c354:	f000 b806 	b.w	800c364 <__strtok_r>
 800c358:	2000019c 	.word	0x2000019c
 800c35c:	08010f44 	.word	0x08010f44
 800c360:	08010f5b 	.word	0x08010f5b

0800c364 <__strtok_r>:
 800c364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c366:	4604      	mov	r4, r0
 800c368:	b908      	cbnz	r0, 800c36e <__strtok_r+0xa>
 800c36a:	6814      	ldr	r4, [r2, #0]
 800c36c:	b144      	cbz	r4, 800c380 <__strtok_r+0x1c>
 800c36e:	4620      	mov	r0, r4
 800c370:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c374:	460f      	mov	r7, r1
 800c376:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c37a:	b91e      	cbnz	r6, 800c384 <__strtok_r+0x20>
 800c37c:	b965      	cbnz	r5, 800c398 <__strtok_r+0x34>
 800c37e:	6015      	str	r5, [r2, #0]
 800c380:	2000      	movs	r0, #0
 800c382:	e005      	b.n	800c390 <__strtok_r+0x2c>
 800c384:	42b5      	cmp	r5, r6
 800c386:	d1f6      	bne.n	800c376 <__strtok_r+0x12>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1f0      	bne.n	800c36e <__strtok_r+0xa>
 800c38c:	6014      	str	r4, [r2, #0]
 800c38e:	7003      	strb	r3, [r0, #0]
 800c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c392:	461c      	mov	r4, r3
 800c394:	e00c      	b.n	800c3b0 <__strtok_r+0x4c>
 800c396:	b91d      	cbnz	r5, 800c3a0 <__strtok_r+0x3c>
 800c398:	4627      	mov	r7, r4
 800c39a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c39e:	460e      	mov	r6, r1
 800c3a0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c3a4:	42ab      	cmp	r3, r5
 800c3a6:	d1f6      	bne.n	800c396 <__strtok_r+0x32>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d0f2      	beq.n	800c392 <__strtok_r+0x2e>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	703b      	strb	r3, [r7, #0]
 800c3b0:	6014      	str	r4, [r2, #0]
 800c3b2:	e7ed      	b.n	800c390 <__strtok_r+0x2c>

0800c3b4 <strstr>:
 800c3b4:	780a      	ldrb	r2, [r1, #0]
 800c3b6:	b570      	push	{r4, r5, r6, lr}
 800c3b8:	b96a      	cbnz	r2, 800c3d6 <strstr+0x22>
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d109      	bne.n	800c3d4 <strstr+0x20>
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0f6      	beq.n	800c3ba <strstr+0x6>
 800c3cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c3d0:	429e      	cmp	r6, r3
 800c3d2:	d0f7      	beq.n	800c3c4 <strstr+0x10>
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	7803      	ldrb	r3, [r0, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1ef      	bne.n	800c3bc <strstr+0x8>
 800c3dc:	4618      	mov	r0, r3
 800c3de:	e7ec      	b.n	800c3ba <strstr+0x6>

0800c3e0 <ctime>:
 800c3e0:	b508      	push	{r3, lr}
 800c3e2:	f000 f805 	bl	800c3f0 <localtime>
 800c3e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c3ea:	f003 bf11 	b.w	8010210 <asctime>
	...

0800c3f0 <localtime>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <localtime+0x30>)
 800c3f4:	681d      	ldr	r5, [r3, #0]
 800c3f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	b953      	cbnz	r3, 800c412 <localtime+0x22>
 800c3fc:	2024      	movs	r0, #36	@ 0x24
 800c3fe:	f002 f987 	bl	800e710 <malloc>
 800c402:	4602      	mov	r2, r0
 800c404:	6368      	str	r0, [r5, #52]	@ 0x34
 800c406:	b920      	cbnz	r0, 800c412 <localtime+0x22>
 800c408:	4b06      	ldr	r3, [pc, #24]	@ (800c424 <localtime+0x34>)
 800c40a:	4807      	ldr	r0, [pc, #28]	@ (800c428 <localtime+0x38>)
 800c40c:	2132      	movs	r1, #50	@ 0x32
 800c40e:	f000 ff37 	bl	800d280 <__assert_func>
 800c412:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800c414:	4620      	mov	r0, r4
 800c416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c41a:	f000 b807 	b.w	800c42c <localtime_r>
 800c41e:	bf00      	nop
 800c420:	2000019c 	.word	0x2000019c
 800c424:	08010f44 	.word	0x08010f44
 800c428:	08010fb5 	.word	0x08010fb5

0800c42c <localtime_r>:
 800c42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c430:	460c      	mov	r4, r1
 800c432:	4607      	mov	r7, r0
 800c434:	f003 ff34 	bl	80102a0 <__gettzinfo>
 800c438:	4621      	mov	r1, r4
 800c43a:	4605      	mov	r5, r0
 800c43c:	4638      	mov	r0, r7
 800c43e:	f003 ff33 	bl	80102a8 <gmtime_r>
 800c442:	6943      	ldr	r3, [r0, #20]
 800c444:	0799      	lsls	r1, r3, #30
 800c446:	4604      	mov	r4, r0
 800c448:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800c44c:	d106      	bne.n	800c45c <localtime_r+0x30>
 800c44e:	2264      	movs	r2, #100	@ 0x64
 800c450:	fb98 f3f2 	sdiv	r3, r8, r2
 800c454:	fb02 8313 	mls	r3, r2, r3, r8
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d171      	bne.n	800c540 <localtime_r+0x114>
 800c45c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c460:	fb98 f3f2 	sdiv	r3, r8, r2
 800c464:	fb02 8313 	mls	r3, r2, r3, r8
 800c468:	fab3 f383 	clz	r3, r3
 800c46c:	095b      	lsrs	r3, r3, #5
 800c46e:	425e      	negs	r6, r3
 800c470:	4b64      	ldr	r3, [pc, #400]	@ (800c604 <localtime_r+0x1d8>)
 800c472:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 800c476:	441e      	add	r6, r3
 800c478:	f000 fc24 	bl	800ccc4 <__tz_lock>
 800c47c:	f000 fc2e 	bl	800ccdc <_tzset_unlocked>
 800c480:	4b61      	ldr	r3, [pc, #388]	@ (800c608 <localtime_r+0x1dc>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d06a      	beq.n	800c55e <localtime_r+0x132>
 800c488:	686b      	ldr	r3, [r5, #4]
 800c48a:	4543      	cmp	r3, r8
 800c48c:	d15a      	bne.n	800c544 <localtime_r+0x118>
 800c48e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c492:	682f      	ldr	r7, [r5, #0]
 800c494:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800c498:	2f00      	cmp	r7, #0
 800c49a:	d15b      	bne.n	800c554 <localtime_r+0x128>
 800c49c:	4282      	cmp	r2, r0
 800c49e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c4a2:	db5e      	blt.n	800c562 <localtime_r+0x136>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	6223      	str	r3, [r4, #32]
 800c4a8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c4aa:	6861      	ldr	r1, [r4, #4]
 800c4ac:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c4b0:	fb93 f0f2 	sdiv	r0, r3, r2
 800c4b4:	fb02 3310 	mls	r3, r2, r0, r3
 800c4b8:	223c      	movs	r2, #60	@ 0x3c
 800c4ba:	fb93 f5f2 	sdiv	r5, r3, r2
 800c4be:	fb02 3215 	mls	r2, r2, r5, r3
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	68a2      	ldr	r2, [r4, #8]
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	1b49      	subs	r1, r1, r5
 800c4cc:	1a12      	subs	r2, r2, r0
 800c4ce:	2b3b      	cmp	r3, #59	@ 0x3b
 800c4d0:	6061      	str	r1, [r4, #4]
 800c4d2:	60a2      	str	r2, [r4, #8]
 800c4d4:	dd51      	ble.n	800c57a <localtime_r+0x14e>
 800c4d6:	3101      	adds	r1, #1
 800c4d8:	6061      	str	r1, [r4, #4]
 800c4da:	3b3c      	subs	r3, #60	@ 0x3c
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	6863      	ldr	r3, [r4, #4]
 800c4e0:	2b3b      	cmp	r3, #59	@ 0x3b
 800c4e2:	dd50      	ble.n	800c586 <localtime_r+0x15a>
 800c4e4:	3201      	adds	r2, #1
 800c4e6:	60a2      	str	r2, [r4, #8]
 800c4e8:	3b3c      	subs	r3, #60	@ 0x3c
 800c4ea:	6063      	str	r3, [r4, #4]
 800c4ec:	68a3      	ldr	r3, [r4, #8]
 800c4ee:	2b17      	cmp	r3, #23
 800c4f0:	dd4f      	ble.n	800c592 <localtime_r+0x166>
 800c4f2:	69e2      	ldr	r2, [r4, #28]
 800c4f4:	3201      	adds	r2, #1
 800c4f6:	61e2      	str	r2, [r4, #28]
 800c4f8:	69a2      	ldr	r2, [r4, #24]
 800c4fa:	3201      	adds	r2, #1
 800c4fc:	2a07      	cmp	r2, #7
 800c4fe:	bfa8      	it	ge
 800c500:	2200      	movge	r2, #0
 800c502:	61a2      	str	r2, [r4, #24]
 800c504:	68e2      	ldr	r2, [r4, #12]
 800c506:	3b18      	subs	r3, #24
 800c508:	3201      	adds	r2, #1
 800c50a:	60a3      	str	r3, [r4, #8]
 800c50c:	6923      	ldr	r3, [r4, #16]
 800c50e:	60e2      	str	r2, [r4, #12]
 800c510:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c514:	428a      	cmp	r2, r1
 800c516:	dd0e      	ble.n	800c536 <localtime_r+0x10a>
 800c518:	2b0b      	cmp	r3, #11
 800c51a:	eba2 0201 	sub.w	r2, r2, r1
 800c51e:	60e2      	str	r2, [r4, #12]
 800c520:	f103 0201 	add.w	r2, r3, #1
 800c524:	bf09      	itett	eq
 800c526:	6963      	ldreq	r3, [r4, #20]
 800c528:	6122      	strne	r2, [r4, #16]
 800c52a:	2200      	moveq	r2, #0
 800c52c:	3301      	addeq	r3, #1
 800c52e:	bf02      	ittt	eq
 800c530:	6122      	streq	r2, [r4, #16]
 800c532:	6163      	streq	r3, [r4, #20]
 800c534:	61e2      	streq	r2, [r4, #28]
 800c536:	f000 fbcb 	bl	800ccd0 <__tz_unlock>
 800c53a:	4620      	mov	r0, r4
 800c53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c540:	2301      	movs	r3, #1
 800c542:	e794      	b.n	800c46e <localtime_r+0x42>
 800c544:	4640      	mov	r0, r8
 800c546:	f000 fb09 	bl	800cb5c <__tzcalc_limits>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d19f      	bne.n	800c48e <localtime_r+0x62>
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
 800c552:	e004      	b.n	800c55e <localtime_r+0x132>
 800c554:	4282      	cmp	r2, r0
 800c556:	eb73 0101 	sbcs.w	r1, r3, r1
 800c55a:	da02      	bge.n	800c562 <localtime_r+0x136>
 800c55c:	2300      	movs	r3, #0
 800c55e:	6223      	str	r3, [r4, #32]
 800c560:	e009      	b.n	800c576 <localtime_r+0x14a>
 800c562:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800c566:	4282      	cmp	r2, r0
 800c568:	418b      	sbcs	r3, r1
 800c56a:	bfb4      	ite	lt
 800c56c:	2301      	movlt	r3, #1
 800c56e:	2300      	movge	r3, #0
 800c570:	6223      	str	r3, [r4, #32]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d198      	bne.n	800c4a8 <localtime_r+0x7c>
 800c576:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800c578:	e797      	b.n	800c4aa <localtime_r+0x7e>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	daaf      	bge.n	800c4de <localtime_r+0xb2>
 800c57e:	3901      	subs	r1, #1
 800c580:	6061      	str	r1, [r4, #4]
 800c582:	333c      	adds	r3, #60	@ 0x3c
 800c584:	e7aa      	b.n	800c4dc <localtime_r+0xb0>
 800c586:	2b00      	cmp	r3, #0
 800c588:	dab0      	bge.n	800c4ec <localtime_r+0xc0>
 800c58a:	3a01      	subs	r2, #1
 800c58c:	60a2      	str	r2, [r4, #8]
 800c58e:	333c      	adds	r3, #60	@ 0x3c
 800c590:	e7ab      	b.n	800c4ea <localtime_r+0xbe>
 800c592:	2b00      	cmp	r3, #0
 800c594:	dacf      	bge.n	800c536 <localtime_r+0x10a>
 800c596:	69e2      	ldr	r2, [r4, #28]
 800c598:	3a01      	subs	r2, #1
 800c59a:	61e2      	str	r2, [r4, #28]
 800c59c:	69a2      	ldr	r2, [r4, #24]
 800c59e:	3a01      	subs	r2, #1
 800c5a0:	bf48      	it	mi
 800c5a2:	2206      	movmi	r2, #6
 800c5a4:	61a2      	str	r2, [r4, #24]
 800c5a6:	68e2      	ldr	r2, [r4, #12]
 800c5a8:	3318      	adds	r3, #24
 800c5aa:	3a01      	subs	r2, #1
 800c5ac:	60e2      	str	r2, [r4, #12]
 800c5ae:	60a3      	str	r3, [r4, #8]
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	d1c0      	bne.n	800c536 <localtime_r+0x10a>
 800c5b4:	6923      	ldr	r3, [r4, #16]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	d405      	bmi.n	800c5c6 <localtime_r+0x19a>
 800c5ba:	6123      	str	r3, [r4, #16]
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c5c2:	60e3      	str	r3, [r4, #12]
 800c5c4:	e7b7      	b.n	800c536 <localtime_r+0x10a>
 800c5c6:	230b      	movs	r3, #11
 800c5c8:	6123      	str	r3, [r4, #16]
 800c5ca:	6963      	ldr	r3, [r4, #20]
 800c5cc:	1e5a      	subs	r2, r3, #1
 800c5ce:	6162      	str	r2, [r4, #20]
 800c5d0:	0792      	lsls	r2, r2, #30
 800c5d2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800c5d6:	d105      	bne.n	800c5e4 <localtime_r+0x1b8>
 800c5d8:	2164      	movs	r1, #100	@ 0x64
 800c5da:	fb93 f2f1 	sdiv	r2, r3, r1
 800c5de:	fb01 3212 	mls	r2, r1, r2, r3
 800c5e2:	b962      	cbnz	r2, 800c5fe <localtime_r+0x1d2>
 800c5e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c5e8:	fb93 f1f2 	sdiv	r1, r3, r2
 800c5ec:	fb02 3311 	mls	r3, r2, r1, r3
 800c5f0:	fab3 f383 	clz	r3, r3
 800c5f4:	095b      	lsrs	r3, r3, #5
 800c5f6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800c5fa:	61e3      	str	r3, [r4, #28]
 800c5fc:	e7de      	b.n	800c5bc <localtime_r+0x190>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e7f9      	b.n	800c5f6 <localtime_r+0x1ca>
 800c602:	bf00      	nop
 800c604:	0801142c 	.word	0x0801142c
 800c608:	20006ef0 	.word	0x20006ef0

0800c60c <validate_structure>:
 800c60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c60e:	6801      	ldr	r1, [r0, #0]
 800c610:	293b      	cmp	r1, #59	@ 0x3b
 800c612:	4604      	mov	r4, r0
 800c614:	d911      	bls.n	800c63a <validate_structure+0x2e>
 800c616:	223c      	movs	r2, #60	@ 0x3c
 800c618:	4668      	mov	r0, sp
 800c61a:	f000 fe4f 	bl	800d2bc <div>
 800c61e:	9a01      	ldr	r2, [sp, #4]
 800c620:	6863      	ldr	r3, [r4, #4]
 800c622:	9900      	ldr	r1, [sp, #0]
 800c624:	2a00      	cmp	r2, #0
 800c626:	440b      	add	r3, r1
 800c628:	6063      	str	r3, [r4, #4]
 800c62a:	bfbb      	ittet	lt
 800c62c:	323c      	addlt	r2, #60	@ 0x3c
 800c62e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c632:	6022      	strge	r2, [r4, #0]
 800c634:	6022      	strlt	r2, [r4, #0]
 800c636:	bfb8      	it	lt
 800c638:	6063      	strlt	r3, [r4, #4]
 800c63a:	6861      	ldr	r1, [r4, #4]
 800c63c:	293b      	cmp	r1, #59	@ 0x3b
 800c63e:	d911      	bls.n	800c664 <validate_structure+0x58>
 800c640:	223c      	movs	r2, #60	@ 0x3c
 800c642:	4668      	mov	r0, sp
 800c644:	f000 fe3a 	bl	800d2bc <div>
 800c648:	9a01      	ldr	r2, [sp, #4]
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	9900      	ldr	r1, [sp, #0]
 800c64e:	2a00      	cmp	r2, #0
 800c650:	440b      	add	r3, r1
 800c652:	60a3      	str	r3, [r4, #8]
 800c654:	bfbb      	ittet	lt
 800c656:	323c      	addlt	r2, #60	@ 0x3c
 800c658:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c65c:	6062      	strge	r2, [r4, #4]
 800c65e:	6062      	strlt	r2, [r4, #4]
 800c660:	bfb8      	it	lt
 800c662:	60a3      	strlt	r3, [r4, #8]
 800c664:	68a1      	ldr	r1, [r4, #8]
 800c666:	2917      	cmp	r1, #23
 800c668:	d911      	bls.n	800c68e <validate_structure+0x82>
 800c66a:	2218      	movs	r2, #24
 800c66c:	4668      	mov	r0, sp
 800c66e:	f000 fe25 	bl	800d2bc <div>
 800c672:	9a01      	ldr	r2, [sp, #4]
 800c674:	68e3      	ldr	r3, [r4, #12]
 800c676:	9900      	ldr	r1, [sp, #0]
 800c678:	2a00      	cmp	r2, #0
 800c67a:	440b      	add	r3, r1
 800c67c:	60e3      	str	r3, [r4, #12]
 800c67e:	bfbb      	ittet	lt
 800c680:	3218      	addlt	r2, #24
 800c682:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c686:	60a2      	strge	r2, [r4, #8]
 800c688:	60a2      	strlt	r2, [r4, #8]
 800c68a:	bfb8      	it	lt
 800c68c:	60e3      	strlt	r3, [r4, #12]
 800c68e:	6921      	ldr	r1, [r4, #16]
 800c690:	290b      	cmp	r1, #11
 800c692:	d911      	bls.n	800c6b8 <validate_structure+0xac>
 800c694:	220c      	movs	r2, #12
 800c696:	4668      	mov	r0, sp
 800c698:	f000 fe10 	bl	800d2bc <div>
 800c69c:	9a01      	ldr	r2, [sp, #4]
 800c69e:	6963      	ldr	r3, [r4, #20]
 800c6a0:	9900      	ldr	r1, [sp, #0]
 800c6a2:	2a00      	cmp	r2, #0
 800c6a4:	440b      	add	r3, r1
 800c6a6:	6163      	str	r3, [r4, #20]
 800c6a8:	bfbb      	ittet	lt
 800c6aa:	320c      	addlt	r2, #12
 800c6ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c6b0:	6122      	strge	r2, [r4, #16]
 800c6b2:	6122      	strlt	r2, [r4, #16]
 800c6b4:	bfb8      	it	lt
 800c6b6:	6163      	strlt	r3, [r4, #20]
 800c6b8:	6963      	ldr	r3, [r4, #20]
 800c6ba:	079a      	lsls	r2, r3, #30
 800c6bc:	d11c      	bne.n	800c6f8 <validate_structure+0xec>
 800c6be:	2164      	movs	r1, #100	@ 0x64
 800c6c0:	fb93 f2f1 	sdiv	r2, r3, r1
 800c6c4:	fb01 3212 	mls	r2, r1, r2, r3
 800c6c8:	b9c2      	cbnz	r2, 800c6fc <validate_structure+0xf0>
 800c6ca:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800c6ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c6d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800c6d6:	fb02 3311 	mls	r3, r2, r1, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bf0c      	ite	eq
 800c6de:	231d      	moveq	r3, #29
 800c6e0:	231c      	movne	r3, #28
 800c6e2:	68e2      	ldr	r2, [r4, #12]
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	dc0b      	bgt.n	800c700 <validate_structure+0xf4>
 800c6e8:	4d31      	ldr	r5, [pc, #196]	@ (800c7b0 <validate_structure+0x1a4>)
 800c6ea:	200b      	movs	r0, #11
 800c6ec:	2164      	movs	r1, #100	@ 0x64
 800c6ee:	68e6      	ldr	r6, [r4, #12]
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	dd30      	ble.n	800c756 <validate_structure+0x14a>
 800c6f4:	b003      	add	sp, #12
 800c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f8:	231c      	movs	r3, #28
 800c6fa:	e7f2      	b.n	800c6e2 <validate_structure+0xd6>
 800c6fc:	231d      	movs	r3, #29
 800c6fe:	e7f0      	b.n	800c6e2 <validate_structure+0xd6>
 800c700:	4d2b      	ldr	r5, [pc, #172]	@ (800c7b0 <validate_structure+0x1a4>)
 800c702:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c706:	2a01      	cmp	r2, #1
 800c708:	bf14      	ite	ne
 800c70a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800c70e:	4618      	moveq	r0, r3
 800c710:	4281      	cmp	r1, r0
 800c712:	ddef      	ble.n	800c6f4 <validate_structure+0xe8>
 800c714:	3201      	adds	r2, #1
 800c716:	1a09      	subs	r1, r1, r0
 800c718:	2a0c      	cmp	r2, #12
 800c71a:	60e1      	str	r1, [r4, #12]
 800c71c:	6122      	str	r2, [r4, #16]
 800c71e:	d1f0      	bne.n	800c702 <validate_structure+0xf6>
 800c720:	6963      	ldr	r3, [r4, #20]
 800c722:	2100      	movs	r1, #0
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	6121      	str	r1, [r4, #16]
 800c728:	0791      	lsls	r1, r2, #30
 800c72a:	6162      	str	r2, [r4, #20]
 800c72c:	d13c      	bne.n	800c7a8 <validate_structure+0x19c>
 800c72e:	2164      	movs	r1, #100	@ 0x64
 800c730:	fb92 f0f1 	sdiv	r0, r2, r1
 800c734:	fb01 2210 	mls	r2, r1, r0, r2
 800c738:	2a00      	cmp	r2, #0
 800c73a:	d137      	bne.n	800c7ac <validate_structure+0x1a0>
 800c73c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800c740:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c744:	fb93 f1f2 	sdiv	r1, r3, r2
 800c748:	fb02 3311 	mls	r3, r2, r1, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	bf0c      	ite	eq
 800c750:	231d      	moveq	r3, #29
 800c752:	231c      	movne	r3, #28
 800c754:	e7d5      	b.n	800c702 <validate_structure+0xf6>
 800c756:	6922      	ldr	r2, [r4, #16]
 800c758:	3a01      	subs	r2, #1
 800c75a:	6122      	str	r2, [r4, #16]
 800c75c:	3201      	adds	r2, #1
 800c75e:	d116      	bne.n	800c78e <validate_structure+0x182>
 800c760:	6963      	ldr	r3, [r4, #20]
 800c762:	1e5a      	subs	r2, r3, #1
 800c764:	0797      	lsls	r7, r2, #30
 800c766:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800c76a:	d119      	bne.n	800c7a0 <validate_structure+0x194>
 800c76c:	fb92 f7f1 	sdiv	r7, r2, r1
 800c770:	fb01 2217 	mls	r2, r1, r7, r2
 800c774:	b9b2      	cbnz	r2, 800c7a4 <validate_structure+0x198>
 800c776:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800c77a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c77e:	fb93 f7f2 	sdiv	r7, r3, r2
 800c782:	fb02 3317 	mls	r3, r2, r7, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf0c      	ite	eq
 800c78a:	231d      	moveq	r3, #29
 800c78c:	231c      	movne	r3, #28
 800c78e:	6922      	ldr	r2, [r4, #16]
 800c790:	2a01      	cmp	r2, #1
 800c792:	bf14      	ite	ne
 800c794:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800c798:	461a      	moveq	r2, r3
 800c79a:	4432      	add	r2, r6
 800c79c:	60e2      	str	r2, [r4, #12]
 800c79e:	e7a6      	b.n	800c6ee <validate_structure+0xe2>
 800c7a0:	231c      	movs	r3, #28
 800c7a2:	e7f4      	b.n	800c78e <validate_structure+0x182>
 800c7a4:	231d      	movs	r3, #29
 800c7a6:	e7f2      	b.n	800c78e <validate_structure+0x182>
 800c7a8:	231c      	movs	r3, #28
 800c7aa:	e7aa      	b.n	800c702 <validate_structure+0xf6>
 800c7ac:	231d      	movs	r3, #29
 800c7ae:	e7a8      	b.n	800c702 <validate_structure+0xf6>
 800c7b0:	080113fc 	.word	0x080113fc

0800c7b4 <mktime>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	4607      	mov	r7, r0
 800c7bc:	f003 fd70 	bl	80102a0 <__gettzinfo>
 800c7c0:	4681      	mov	r9, r0
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f7ff ff22 	bl	800c60c <validate_structure>
 800c7c8:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c7cc:	223c      	movs	r2, #60	@ 0x3c
 800c7ce:	fb02 4403 	mla	r4, r2, r3, r4
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	697d      	ldr	r5, [r7, #20]
 800c7d6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c7da:	fb02 4403 	mla	r4, r2, r3, r4
 800c7de:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800c7e2:	4ac3      	ldr	r2, [pc, #780]	@ (800caf0 <mktime+0x33c>)
 800c7e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c7e8:	3e01      	subs	r6, #1
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	4416      	add	r6, r2
 800c7ee:	dd11      	ble.n	800c814 <mktime+0x60>
 800c7f0:	07a9      	lsls	r1, r5, #30
 800c7f2:	d10f      	bne.n	800c814 <mktime+0x60>
 800c7f4:	2264      	movs	r2, #100	@ 0x64
 800c7f6:	fb95 f3f2 	sdiv	r3, r5, r2
 800c7fa:	fb02 5313 	mls	r3, r2, r3, r5
 800c7fe:	b943      	cbnz	r3, 800c812 <mktime+0x5e>
 800c800:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c804:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c808:	fb93 f1f2 	sdiv	r1, r3, r2
 800c80c:	fb02 3311 	mls	r3, r2, r1, r3
 800c810:	b903      	cbnz	r3, 800c814 <mktime+0x60>
 800c812:	3601      	adds	r6, #1
 800c814:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800c818:	3310      	adds	r3, #16
 800c81a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800c81e:	4293      	cmp	r3, r2
 800c820:	61fe      	str	r6, [r7, #28]
 800c822:	f200 8170 	bhi.w	800cb06 <mktime+0x352>
 800c826:	2d46      	cmp	r5, #70	@ 0x46
 800c828:	f340 80b6 	ble.w	800c998 <mktime+0x1e4>
 800c82c:	2346      	movs	r3, #70	@ 0x46
 800c82e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c832:	2164      	movs	r1, #100	@ 0x64
 800c834:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c838:	079a      	lsls	r2, r3, #30
 800c83a:	f040 80a7 	bne.w	800c98c <mktime+0x1d8>
 800c83e:	fb93 f2f1 	sdiv	r2, r3, r1
 800c842:	fb01 3212 	mls	r2, r1, r2, r3
 800c846:	2a00      	cmp	r2, #0
 800c848:	f040 80a3 	bne.w	800c992 <mktime+0x1de>
 800c84c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c850:	fb92 fef0 	sdiv	lr, r2, r0
 800c854:	fb00 221e 	mls	r2, r0, lr, r2
 800c858:	2a00      	cmp	r2, #0
 800c85a:	bf0c      	ite	eq
 800c85c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c860:	4662      	movne	r2, ip
 800c862:	3301      	adds	r3, #1
 800c864:	429d      	cmp	r5, r3
 800c866:	4416      	add	r6, r2
 800c868:	d1e6      	bne.n	800c838 <mktime+0x84>
 800c86a:	4ba2      	ldr	r3, [pc, #648]	@ (800caf4 <mktime+0x340>)
 800c86c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c870:	fbc6 4803 	smlal	r4, r8, r6, r3
 800c874:	f000 fa26 	bl	800ccc4 <__tz_lock>
 800c878:	f000 fa30 	bl	800ccdc <_tzset_unlocked>
 800c87c:	4b9e      	ldr	r3, [pc, #632]	@ (800caf8 <mktime+0x344>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8147 	beq.w	800cb14 <mktime+0x360>
 800c886:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800c88a:	6978      	ldr	r0, [r7, #20]
 800c88c:	4653      	mov	r3, sl
 800c88e:	2b01      	cmp	r3, #1
 800c890:	bfa8      	it	ge
 800c892:	2301      	movge	r3, #1
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c89a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800c89e:	4283      	cmp	r3, r0
 800c8a0:	f040 80bd 	bne.w	800ca1e <mktime+0x26a>
 800c8a4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c8a8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800c8ac:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800c8b0:	1a13      	subs	r3, r2, r0
 800c8b2:	9303      	str	r3, [sp, #12]
 800c8b4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800c8b8:	9302      	str	r3, [sp, #8]
 800c8ba:	9a02      	ldr	r2, [sp, #8]
 800c8bc:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c8c0:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800c8c4:	ebb2 0e03 	subs.w	lr, r2, r3
 800c8c8:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c8cc:	4574      	cmp	r4, lr
 800c8ce:	eb78 0201 	sbcs.w	r2, r8, r1
 800c8d2:	f280 80c7 	bge.w	800ca64 <mktime+0x2b0>
 800c8d6:	f8d9 2000 	ldr.w	r2, [r9]
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	f000 80d0 	beq.w	800ca80 <mktime+0x2cc>
 800c8e0:	9a03      	ldr	r2, [sp, #12]
 800c8e2:	4294      	cmp	r4, r2
 800c8e4:	eb78 020b 	sbcs.w	r2, r8, fp
 800c8e8:	f2c0 8111 	blt.w	800cb0e <mktime+0x35a>
 800c8ec:	4574      	cmp	r4, lr
 800c8ee:	eb78 0101 	sbcs.w	r1, r8, r1
 800c8f2:	bfb4      	ite	lt
 800c8f4:	f04f 0b01 	movlt.w	fp, #1
 800c8f8:	f04f 0b00 	movge.w	fp, #0
 800c8fc:	f1ba 0f00 	cmp.w	sl, #0
 800c900:	f2c0 8094 	blt.w	800ca2c <mktime+0x278>
 800c904:	9a01      	ldr	r2, [sp, #4]
 800c906:	ea82 0a0b 	eor.w	sl, r2, fp
 800c90a:	f1ba 0f01 	cmp.w	sl, #1
 800c90e:	f040 808d 	bne.w	800ca2c <mktime+0x278>
 800c912:	f1bb 0f00 	cmp.w	fp, #0
 800c916:	f000 80c2 	beq.w	800ca9e <mktime+0x2ea>
 800c91a:	1a1b      	subs	r3, r3, r0
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	441a      	add	r2, r3
 800c920:	191c      	adds	r4, r3, r4
 800c922:	603a      	str	r2, [r7, #0]
 800c924:	4638      	mov	r0, r7
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	9201      	str	r2, [sp, #4]
 800c92a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c92e:	f7ff fe6d 	bl	800c60c <validate_structure>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	9a01      	ldr	r2, [sp, #4]
 800c936:	1a9b      	subs	r3, r3, r2
 800c938:	d078      	beq.n	800ca2c <mktime+0x278>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	f300 80b1 	bgt.w	800caa2 <mktime+0x2ee>
 800c940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c944:	bfa8      	it	ge
 800c946:	469a      	movge	sl, r3
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	eb1a 0303 	adds.w	r3, sl, r3
 800c94e:	4456      	add	r6, sl
 800c950:	f140 80b0 	bpl.w	800cab4 <mktime+0x300>
 800c954:	1e6b      	subs	r3, r5, #1
 800c956:	0799      	lsls	r1, r3, #30
 800c958:	f040 80a6 	bne.w	800caa8 <mktime+0x2f4>
 800c95c:	2264      	movs	r2, #100	@ 0x64
 800c95e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c962:	fb02 3311 	mls	r3, r2, r1, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	f040 80a1 	bne.w	800caae <mktime+0x2fa>
 800c96c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c970:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800c974:	fb95 f2f3 	sdiv	r2, r5, r3
 800c978:	fb03 5512 	mls	r5, r3, r2, r5
 800c97c:	2d00      	cmp	r5, #0
 800c97e:	f240 136d 	movw	r3, #365	@ 0x16d
 800c982:	bf18      	it	ne
 800c984:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800c988:	61fb      	str	r3, [r7, #28]
 800c98a:	e04f      	b.n	800ca2c <mktime+0x278>
 800c98c:	f240 126d 	movw	r2, #365	@ 0x16d
 800c990:	e767      	b.n	800c862 <mktime+0xae>
 800c992:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c996:	e764      	b.n	800c862 <mktime+0xae>
 800c998:	f43f af67 	beq.w	800c86a <mktime+0xb6>
 800c99c:	2345      	movs	r3, #69	@ 0x45
 800c99e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c9a2:	2164      	movs	r1, #100	@ 0x64
 800c9a4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c9a8:	e012      	b.n	800c9d0 <mktime+0x21c>
 800c9aa:	bb62      	cbnz	r2, 800ca06 <mktime+0x252>
 800c9ac:	fb93 f2f1 	sdiv	r2, r3, r1
 800c9b0:	fb01 3212 	mls	r2, r1, r2, r3
 800c9b4:	bb52      	cbnz	r2, 800ca0c <mktime+0x258>
 800c9b6:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c9ba:	fb92 fef0 	sdiv	lr, r2, r0
 800c9be:	fb00 221e 	mls	r2, r0, lr, r2
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	bf0c      	ite	eq
 800c9c6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c9ca:	4662      	movne	r2, ip
 800c9cc:	1ab6      	subs	r6, r6, r2
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	429d      	cmp	r5, r3
 800c9d2:	f003 0203 	and.w	r2, r3, #3
 800c9d6:	dbe8      	blt.n	800c9aa <mktime+0x1f6>
 800c9d8:	b9da      	cbnz	r2, 800ca12 <mktime+0x25e>
 800c9da:	2264      	movs	r2, #100	@ 0x64
 800c9dc:	fb95 f3f2 	sdiv	r3, r5, r2
 800c9e0:	fb02 5313 	mls	r3, r2, r3, r5
 800c9e4:	b9c3      	cbnz	r3, 800ca18 <mktime+0x264>
 800c9e6:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c9ea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c9ee:	fb93 f1f2 	sdiv	r1, r3, r2
 800c9f2:	fb02 3311 	mls	r3, r2, r1, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f240 136d 	movw	r3, #365	@ 0x16d
 800c9fc:	bf08      	it	eq
 800c9fe:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800ca02:	1af6      	subs	r6, r6, r3
 800ca04:	e731      	b.n	800c86a <mktime+0xb6>
 800ca06:	f240 126d 	movw	r2, #365	@ 0x16d
 800ca0a:	e7df      	b.n	800c9cc <mktime+0x218>
 800ca0c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ca10:	e7dc      	b.n	800c9cc <mktime+0x218>
 800ca12:	f240 136d 	movw	r3, #365	@ 0x16d
 800ca16:	e7f4      	b.n	800ca02 <mktime+0x24e>
 800ca18:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800ca1c:	e7f1      	b.n	800ca02 <mktime+0x24e>
 800ca1e:	f000 f89d 	bl	800cb5c <__tzcalc_limits>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	f47f af3e 	bne.w	800c8a4 <mktime+0xf0>
 800ca28:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ca2c:	f1bb 0f01 	cmp.w	fp, #1
 800ca30:	d172      	bne.n	800cb18 <mktime+0x364>
 800ca32:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ca36:	191c      	adds	r4, r3, r4
 800ca38:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ca3c:	f04f 0b01 	mov.w	fp, #1
 800ca40:	f000 f946 	bl	800ccd0 <__tz_unlock>
 800ca44:	3604      	adds	r6, #4
 800ca46:	2307      	movs	r3, #7
 800ca48:	fb96 f3f3 	sdiv	r3, r6, r3
 800ca4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ca50:	1af6      	subs	r6, r6, r3
 800ca52:	d456      	bmi.n	800cb02 <mktime+0x34e>
 800ca54:	f8c7 b020 	str.w	fp, [r7, #32]
 800ca58:	61be      	str	r6, [r7, #24]
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	4641      	mov	r1, r8
 800ca5e:	b005      	add	sp, #20
 800ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	9a02      	ldr	r2, [sp, #8]
 800ca66:	1a12      	subs	r2, r2, r0
 800ca68:	9202      	str	r2, [sp, #8]
 800ca6a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800ca6e:	eb6c 0c02 	sbc.w	ip, ip, r2
 800ca72:	9a02      	ldr	r2, [sp, #8]
 800ca74:	4294      	cmp	r4, r2
 800ca76:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800ca7a:	f6bf af2c 	bge.w	800c8d6 <mktime+0x122>
 800ca7e:	e7d3      	b.n	800ca28 <mktime+0x274>
 800ca80:	9a03      	ldr	r2, [sp, #12]
 800ca82:	4294      	cmp	r4, r2
 800ca84:	eb78 020b 	sbcs.w	r2, r8, fp
 800ca88:	f6ff af30 	blt.w	800c8ec <mktime+0x138>
 800ca8c:	f1ba 0f00 	cmp.w	sl, #0
 800ca90:	dbcf      	blt.n	800ca32 <mktime+0x27e>
 800ca92:	f04f 0b01 	mov.w	fp, #1
 800ca96:	e735      	b.n	800c904 <mktime+0x150>
 800ca98:	f04f 0b00 	mov.w	fp, #0
 800ca9c:	e732      	b.n	800c904 <mktime+0x150>
 800ca9e:	1ac3      	subs	r3, r0, r3
 800caa0:	e73c      	b.n	800c91c <mktime+0x168>
 800caa2:	f04f 3aff 	mov.w	sl, #4294967295
 800caa6:	e74f      	b.n	800c948 <mktime+0x194>
 800caa8:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800caac:	e76c      	b.n	800c988 <mktime+0x1d4>
 800caae:	f240 136d 	movw	r3, #365	@ 0x16d
 800cab2:	e769      	b.n	800c988 <mktime+0x1d4>
 800cab4:	07aa      	lsls	r2, r5, #30
 800cab6:	d117      	bne.n	800cae8 <mktime+0x334>
 800cab8:	2164      	movs	r1, #100	@ 0x64
 800caba:	fb95 f2f1 	sdiv	r2, r5, r1
 800cabe:	fb01 5212 	mls	r2, r1, r2, r5
 800cac2:	b9da      	cbnz	r2, 800cafc <mktime+0x348>
 800cac4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800cac8:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800cacc:	fb95 f1f2 	sdiv	r1, r5, r2
 800cad0:	fb02 5511 	mls	r5, r2, r1, r5
 800cad4:	2d00      	cmp	r5, #0
 800cad6:	f240 126d 	movw	r2, #365	@ 0x16d
 800cada:	bf08      	it	eq
 800cadc:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800cae0:	4293      	cmp	r3, r2
 800cae2:	bfa8      	it	ge
 800cae4:	1a9b      	subge	r3, r3, r2
 800cae6:	e74f      	b.n	800c988 <mktime+0x1d4>
 800cae8:	f240 126d 	movw	r2, #365	@ 0x16d
 800caec:	e7f8      	b.n	800cae0 <mktime+0x32c>
 800caee:	bf00      	nop
 800caf0:	080113cc 	.word	0x080113cc
 800caf4:	00015180 	.word	0x00015180
 800caf8:	20006ef0 	.word	0x20006ef0
 800cafc:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800cb00:	e7ee      	b.n	800cae0 <mktime+0x32c>
 800cb02:	3607      	adds	r6, #7
 800cb04:	e7a6      	b.n	800ca54 <mktime+0x2a0>
 800cb06:	f04f 34ff 	mov.w	r4, #4294967295
 800cb0a:	46a0      	mov	r8, r4
 800cb0c:	e7a5      	b.n	800ca5a <mktime+0x2a6>
 800cb0e:	f1ba 0f00 	cmp.w	sl, #0
 800cb12:	dac1      	bge.n	800ca98 <mktime+0x2e4>
 800cb14:	f04f 0b00 	mov.w	fp, #0
 800cb18:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800cb1c:	191c      	adds	r4, r3, r4
 800cb1e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800cb22:	e78d      	b.n	800ca40 <mktime+0x28c>

0800cb24 <time>:
 800cb24:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800cb26:	4b0c      	ldr	r3, [pc, #48]	@ (800cb58 <time+0x34>)
 800cb28:	f04f 36ff 	mov.w	r6, #4294967295
 800cb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb30:	4669      	mov	r1, sp
 800cb32:	4604      	mov	r4, r0
 800cb34:	2200      	movs	r2, #0
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	e9cd 6700 	strd	r6, r7, [sp]
 800cb3c:	f000 fb0a 	bl	800d154 <_gettimeofday_r>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	bfb8      	it	lt
 800cb44:	e9cd 6700 	strdlt	r6, r7, [sp]
 800cb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb4c:	b10c      	cbz	r4, 800cb52 <time+0x2e>
 800cb4e:	e9c4 0100 	strd	r0, r1, [r4]
 800cb52:	b004      	add	sp, #16
 800cb54:	bdd0      	pop	{r4, r6, r7, pc}
 800cb56:	bf00      	nop
 800cb58:	2000019c 	.word	0x2000019c

0800cb5c <__tzcalc_limits>:
 800cb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	4604      	mov	r4, r0
 800cb62:	f003 fb9d 	bl	80102a0 <__gettzinfo>
 800cb66:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800cb6a:	429c      	cmp	r4, r3
 800cb6c:	f340 80a3 	ble.w	800ccb6 <__tzcalc_limits+0x15a>
 800cb70:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800cb74:	1865      	adds	r5, r4, r1
 800cb76:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800cb7a:	f240 126d 	movw	r2, #365	@ 0x16d
 800cb7e:	10ad      	asrs	r5, r5, #2
 800cb80:	fb02 5503 	mla	r5, r2, r3, r5
 800cb84:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800cb88:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800cb8c:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800cb90:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb94:	441d      	add	r5, r3
 800cb96:	19a3      	adds	r3, r4, r6
 800cb98:	4e48      	ldr	r6, [pc, #288]	@ (800ccbc <__tzcalc_limits+0x160>)
 800cb9a:	6044      	str	r4, [r0, #4]
 800cb9c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800cba0:	4601      	mov	r1, r0
 800cba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cba6:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800cbaa:	441d      	add	r5, r3
 800cbac:	7a0b      	ldrb	r3, [r1, #8]
 800cbae:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800cbb2:	2b4a      	cmp	r3, #74	@ 0x4a
 800cbb4:	d138      	bne.n	800cc28 <__tzcalc_limits+0xcc>
 800cbb6:	07a2      	lsls	r2, r4, #30
 800cbb8:	eb05 030c 	add.w	r3, r5, ip
 800cbbc:	d106      	bne.n	800cbcc <__tzcalc_limits+0x70>
 800cbbe:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800cbc2:	fb94 f2fe 	sdiv	r2, r4, lr
 800cbc6:	fb0e 4212 	mls	r2, lr, r2, r4
 800cbca:	b932      	cbnz	r2, 800cbda <__tzcalc_limits+0x7e>
 800cbcc:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800cbd0:	fb94 f2fe 	sdiv	r2, r4, lr
 800cbd4:	fb0e 4212 	mls	r2, lr, r2, r4
 800cbd8:	bb1a      	cbnz	r2, 800cc22 <__tzcalc_limits+0xc6>
 800cbda:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800cbde:	bfd4      	ite	le
 800cbe0:	f04f 0c00 	movle.w	ip, #0
 800cbe4:	f04f 0c01 	movgt.w	ip, #1
 800cbe8:	4463      	add	r3, ip
 800cbea:	3b01      	subs	r3, #1
 800cbec:	698a      	ldr	r2, [r1, #24]
 800cbee:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800cbf2:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800cbf6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800cbf8:	18d2      	adds	r2, r2, r3
 800cbfa:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800cbfe:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800cc02:	3128      	adds	r1, #40	@ 0x28
 800cc04:	428f      	cmp	r7, r1
 800cc06:	d1d1      	bne.n	800cbac <__tzcalc_limits+0x50>
 800cc08:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800cc0c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800cc10:	428c      	cmp	r4, r1
 800cc12:	4193      	sbcs	r3, r2
 800cc14:	bfb4      	ite	lt
 800cc16:	2301      	movlt	r3, #1
 800cc18:	2300      	movge	r3, #0
 800cc1a:	6003      	str	r3, [r0, #0]
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc22:	f04f 0c00 	mov.w	ip, #0
 800cc26:	e7df      	b.n	800cbe8 <__tzcalc_limits+0x8c>
 800cc28:	2b44      	cmp	r3, #68	@ 0x44
 800cc2a:	d102      	bne.n	800cc32 <__tzcalc_limits+0xd6>
 800cc2c:	eb05 030c 	add.w	r3, r5, ip
 800cc30:	e7dc      	b.n	800cbec <__tzcalc_limits+0x90>
 800cc32:	07a3      	lsls	r3, r4, #30
 800cc34:	d105      	bne.n	800cc42 <__tzcalc_limits+0xe6>
 800cc36:	2264      	movs	r2, #100	@ 0x64
 800cc38:	fb94 f3f2 	sdiv	r3, r4, r2
 800cc3c:	fb02 4313 	mls	r3, r2, r3, r4
 800cc40:	bb93      	cbnz	r3, 800cca8 <__tzcalc_limits+0x14c>
 800cc42:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800cc46:	fb94 f3f2 	sdiv	r3, r4, r2
 800cc4a:	fb02 4313 	mls	r3, r2, r3, r4
 800cc4e:	fab3 f383 	clz	r3, r3
 800cc52:	095b      	lsrs	r3, r3, #5
 800cc54:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800ccc0 <__tzcalc_limits+0x164>
 800cc58:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800cc5c:	425b      	negs	r3, r3
 800cc5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cc62:	462a      	mov	r2, r5
 800cc64:	f04f 0800 	mov.w	r8, #0
 800cc68:	4473      	add	r3, lr
 800cc6a:	f108 0801 	add.w	r8, r8, #1
 800cc6e:	45c1      	cmp	r9, r8
 800cc70:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800cc74:	dc1a      	bgt.n	800ccac <__tzcalc_limits+0x150>
 800cc76:	f102 0804 	add.w	r8, r2, #4
 800cc7a:	2307      	movs	r3, #7
 800cc7c:	fb98 f3f3 	sdiv	r3, r8, r3
 800cc80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cc84:	eba8 0303 	sub.w	r3, r8, r3
 800cc88:	ebbc 0c03 	subs.w	ip, ip, r3
 800cc8c:	690b      	ldr	r3, [r1, #16]
 800cc8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc92:	bf48      	it	mi
 800cc94:	f10c 0c07 	addmi.w	ip, ip, #7
 800cc98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cc9c:	449c      	add	ip, r3
 800cc9e:	45f4      	cmp	ip, lr
 800cca0:	da06      	bge.n	800ccb0 <__tzcalc_limits+0x154>
 800cca2:	eb02 030c 	add.w	r3, r2, ip
 800cca6:	e7a1      	b.n	800cbec <__tzcalc_limits+0x90>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7d3      	b.n	800cc54 <__tzcalc_limits+0xf8>
 800ccac:	4472      	add	r2, lr
 800ccae:	e7dc      	b.n	800cc6a <__tzcalc_limits+0x10e>
 800ccb0:	f1ac 0c07 	sub.w	ip, ip, #7
 800ccb4:	e7f3      	b.n	800cc9e <__tzcalc_limits+0x142>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e7b1      	b.n	800cc1e <__tzcalc_limits+0xc2>
 800ccba:	bf00      	nop
 800ccbc:	00015180 	.word	0x00015180
 800ccc0:	08011428 	.word	0x08011428

0800ccc4 <__tz_lock>:
 800ccc4:	4801      	ldr	r0, [pc, #4]	@ (800cccc <__tz_lock+0x8>)
 800ccc6:	f000 bab8 	b.w	800d23a <__retarget_lock_acquire>
 800ccca:	bf00      	nop
 800cccc:	20006ef8 	.word	0x20006ef8

0800ccd0 <__tz_unlock>:
 800ccd0:	4801      	ldr	r0, [pc, #4]	@ (800ccd8 <__tz_unlock+0x8>)
 800ccd2:	f000 bab4 	b.w	800d23e <__retarget_lock_release>
 800ccd6:	bf00      	nop
 800ccd8:	20006ef8 	.word	0x20006ef8

0800ccdc <_tzset_unlocked>:
 800ccdc:	4b01      	ldr	r3, [pc, #4]	@ (800cce4 <_tzset_unlocked+0x8>)
 800ccde:	6818      	ldr	r0, [r3, #0]
 800cce0:	f000 b802 	b.w	800cce8 <_tzset_unlocked_r>
 800cce4:	2000019c 	.word	0x2000019c

0800cce8 <_tzset_unlocked_r>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	b08d      	sub	sp, #52	@ 0x34
 800ccee:	4607      	mov	r7, r0
 800ccf0:	f003 fad6 	bl	80102a0 <__gettzinfo>
 800ccf4:	49bc      	ldr	r1, [pc, #752]	@ (800cfe8 <_tzset_unlocked_r+0x300>)
 800ccf6:	4dbd      	ldr	r5, [pc, #756]	@ (800cfec <_tzset_unlocked_r+0x304>)
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f001 fd00 	bl	800e700 <_getenv_r>
 800cd00:	4606      	mov	r6, r0
 800cd02:	bb10      	cbnz	r0, 800cd4a <_tzset_unlocked_r+0x62>
 800cd04:	4bba      	ldr	r3, [pc, #744]	@ (800cff0 <_tzset_unlocked_r+0x308>)
 800cd06:	4abb      	ldr	r2, [pc, #748]	@ (800cff4 <_tzset_unlocked_r+0x30c>)
 800cd08:	6018      	str	r0, [r3, #0]
 800cd0a:	4bbb      	ldr	r3, [pc, #748]	@ (800cff8 <_tzset_unlocked_r+0x310>)
 800cd0c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800cd0e:	6018      	str	r0, [r3, #0]
 800cd10:	4bba      	ldr	r3, [pc, #744]	@ (800cffc <_tzset_unlocked_r+0x314>)
 800cd12:	6520      	str	r0, [r4, #80]	@ 0x50
 800cd14:	e9c3 2200 	strd	r2, r2, [r3]
 800cd18:	214a      	movs	r1, #74	@ 0x4a
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800cd22:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800cd26:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800cd2a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800cd2e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cd32:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800cd36:	6828      	ldr	r0, [r5, #0]
 800cd38:	7221      	strb	r1, [r4, #8]
 800cd3a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800cd3e:	f001 fcef 	bl	800e720 <free>
 800cd42:	602e      	str	r6, [r5, #0]
 800cd44:	b00d      	add	sp, #52	@ 0x34
 800cd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4a:	6829      	ldr	r1, [r5, #0]
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	f040 808e 	bne.w	800ce6e <_tzset_unlocked_r+0x186>
 800cd52:	6828      	ldr	r0, [r5, #0]
 800cd54:	f001 fce4 	bl	800e720 <free>
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f7f3 faa1 	bl	80002a0 <strlen>
 800cd5e:	1c41      	adds	r1, r0, #1
 800cd60:	4638      	mov	r0, r7
 800cd62:	f001 fd07 	bl	800e774 <_malloc_r>
 800cd66:	6028      	str	r0, [r5, #0]
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	f040 8086 	bne.w	800ce7a <_tzset_unlocked_r+0x192>
 800cd6e:	4aa2      	ldr	r2, [pc, #648]	@ (800cff8 <_tzset_unlocked_r+0x310>)
 800cd70:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800cffc <_tzset_unlocked_r+0x314>
 800cd74:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800cff0 <_tzset_unlocked_r+0x308>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	4aa0      	ldr	r2, [pc, #640]	@ (800d000 <_tzset_unlocked_r+0x318>)
 800cd7e:	f8ca 3000 	str.w	r3, [sl]
 800cd82:	2000      	movs	r0, #0
 800cd84:	2100      	movs	r1, #0
 800cd86:	e9c8 2200 	strd	r2, r2, [r8]
 800cd8a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800cd8e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800cd92:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800cd96:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800cd9a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800cd9e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800cda2:	224a      	movs	r2, #74	@ 0x4a
 800cda4:	7222      	strb	r2, [r4, #8]
 800cda6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cda8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800cdac:	6523      	str	r3, [r4, #80]	@ 0x50
 800cdae:	7833      	ldrb	r3, [r6, #0]
 800cdb0:	2b3a      	cmp	r3, #58	@ 0x3a
 800cdb2:	bf08      	it	eq
 800cdb4:	3601      	addeq	r6, #1
 800cdb6:	7833      	ldrb	r3, [r6, #0]
 800cdb8:	2b3c      	cmp	r3, #60	@ 0x3c
 800cdba:	d162      	bne.n	800ce82 <_tzset_unlocked_r+0x19a>
 800cdbc:	1c75      	adds	r5, r6, #1
 800cdbe:	4a91      	ldr	r2, [pc, #580]	@ (800d004 <_tzset_unlocked_r+0x31c>)
 800cdc0:	4991      	ldr	r1, [pc, #580]	@ (800d008 <_tzset_unlocked_r+0x320>)
 800cdc2:	ab0a      	add	r3, sp, #40	@ 0x28
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	f7ff f92d 	bl	800c024 <siscanf>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	ddba      	ble.n	800cd44 <_tzset_unlocked_r+0x5c>
 800cdce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdd0:	1eda      	subs	r2, r3, #3
 800cdd2:	2a07      	cmp	r2, #7
 800cdd4:	d8b6      	bhi.n	800cd44 <_tzset_unlocked_r+0x5c>
 800cdd6:	5ceb      	ldrb	r3, [r5, r3]
 800cdd8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cdda:	d1b3      	bne.n	800cd44 <_tzset_unlocked_r+0x5c>
 800cddc:	3602      	adds	r6, #2
 800cdde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cde0:	18f5      	adds	r5, r6, r3
 800cde2:	5cf3      	ldrb	r3, [r6, r3]
 800cde4:	2b2d      	cmp	r3, #45	@ 0x2d
 800cde6:	d15a      	bne.n	800ce9e <_tzset_unlocked_r+0x1b6>
 800cde8:	3501      	adds	r5, #1
 800cdea:	f04f 39ff 	mov.w	r9, #4294967295
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cdf4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cdf8:	af08      	add	r7, sp, #32
 800cdfa:	ab0a      	add	r3, sp, #40	@ 0x28
 800cdfc:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ce00:	9303      	str	r3, [sp, #12]
 800ce02:	f10d 031e 	add.w	r3, sp, #30
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	4980      	ldr	r1, [pc, #512]	@ (800d00c <_tzset_unlocked_r+0x324>)
 800ce0a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce0c:	aa07      	add	r2, sp, #28
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f7ff f908 	bl	800c024 <siscanf>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	dd95      	ble.n	800cd44 <_tzset_unlocked_r+0x5c>
 800ce18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ce1c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800ce20:	223c      	movs	r2, #60	@ 0x3c
 800ce22:	fb02 6603 	mla	r6, r2, r3, r6
 800ce26:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ce2a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800ce2e:	fb02 6603 	mla	r6, r2, r3, r6
 800ce32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce34:	fb09 f606 	mul.w	r6, r9, r6
 800ce38:	eb05 0903 	add.w	r9, r5, r3
 800ce3c:	5ceb      	ldrb	r3, [r5, r3]
 800ce3e:	2b3c      	cmp	r3, #60	@ 0x3c
 800ce40:	f040 80ee 	bne.w	800d020 <_tzset_unlocked_r+0x338>
 800ce44:	f109 0501 	add.w	r5, r9, #1
 800ce48:	4a71      	ldr	r2, [pc, #452]	@ (800d010 <_tzset_unlocked_r+0x328>)
 800ce4a:	496f      	ldr	r1, [pc, #444]	@ (800d008 <_tzset_unlocked_r+0x320>)
 800ce4c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f7ff f8e8 	bl	800c024 <siscanf>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dc28      	bgt.n	800ceaa <_tzset_unlocked_r+0x1c2>
 800ce58:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ce5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce5e:	d124      	bne.n	800ceaa <_tzset_unlocked_r+0x1c2>
 800ce60:	4b68      	ldr	r3, [pc, #416]	@ (800d004 <_tzset_unlocked_r+0x31c>)
 800ce62:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ce64:	e9c8 3300 	strd	r3, r3, [r8]
 800ce68:	f8ca 6000 	str.w	r6, [sl]
 800ce6c:	e76a      	b.n	800cd44 <_tzset_unlocked_r+0x5c>
 800ce6e:	f7f3 f9b7 	bl	80001e0 <strcmp>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	f47f af6d 	bne.w	800cd52 <_tzset_unlocked_r+0x6a>
 800ce78:	e764      	b.n	800cd44 <_tzset_unlocked_r+0x5c>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	f000 f9e1 	bl	800d242 <strcpy>
 800ce80:	e775      	b.n	800cd6e <_tzset_unlocked_r+0x86>
 800ce82:	4a60      	ldr	r2, [pc, #384]	@ (800d004 <_tzset_unlocked_r+0x31c>)
 800ce84:	4963      	ldr	r1, [pc, #396]	@ (800d014 <_tzset_unlocked_r+0x32c>)
 800ce86:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f7ff f8cb 	bl	800c024 <siscanf>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f77f af58 	ble.w	800cd44 <_tzset_unlocked_r+0x5c>
 800ce94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce96:	3b03      	subs	r3, #3
 800ce98:	2b07      	cmp	r3, #7
 800ce9a:	d9a0      	bls.n	800cdde <_tzset_unlocked_r+0xf6>
 800ce9c:	e752      	b.n	800cd44 <_tzset_unlocked_r+0x5c>
 800ce9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cea0:	bf08      	it	eq
 800cea2:	3501      	addeq	r5, #1
 800cea4:	f04f 0901 	mov.w	r9, #1
 800cea8:	e7a1      	b.n	800cdee <_tzset_unlocked_r+0x106>
 800ceaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceac:	1eda      	subs	r2, r3, #3
 800ceae:	2a07      	cmp	r2, #7
 800ceb0:	f63f af48 	bhi.w	800cd44 <_tzset_unlocked_r+0x5c>
 800ceb4:	5ceb      	ldrb	r3, [r5, r3]
 800ceb6:	2b3e      	cmp	r3, #62	@ 0x3e
 800ceb8:	f47f af44 	bne.w	800cd44 <_tzset_unlocked_r+0x5c>
 800cebc:	f109 0902 	add.w	r9, r9, #2
 800cec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cec2:	eb09 0503 	add.w	r5, r9, r3
 800cec6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ceca:	2b2d      	cmp	r3, #45	@ 0x2d
 800cecc:	f040 80b7 	bne.w	800d03e <_tzset_unlocked_r+0x356>
 800ced0:	3501      	adds	r5, #1
 800ced2:	f04f 39ff 	mov.w	r9, #4294967295
 800ced6:	2300      	movs	r3, #0
 800ced8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cedc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cee0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cee4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cee6:	ab0a      	add	r3, sp, #40	@ 0x28
 800cee8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	f10d 031e 	add.w	r3, sp, #30
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	4945      	ldr	r1, [pc, #276]	@ (800d00c <_tzset_unlocked_r+0x324>)
 800cef6:	ab0a      	add	r3, sp, #40	@ 0x28
 800cef8:	aa07      	add	r2, sp, #28
 800cefa:	4628      	mov	r0, r5
 800cefc:	f7ff f892 	bl	800c024 <siscanf>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	f300 80a2 	bgt.w	800d04a <_tzset_unlocked_r+0x362>
 800cf06:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800cf0a:	9304      	str	r3, [sp, #16]
 800cf0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf0e:	4627      	mov	r7, r4
 800cf10:	441d      	add	r5, r3
 800cf12:	f04f 0b00 	mov.w	fp, #0
 800cf16:	782b      	ldrb	r3, [r5, #0]
 800cf18:	2b2c      	cmp	r3, #44	@ 0x2c
 800cf1a:	bf08      	it	eq
 800cf1c:	3501      	addeq	r5, #1
 800cf1e:	f895 9000 	ldrb.w	r9, [r5]
 800cf22:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800cf26:	f040 80a3 	bne.w	800d070 <_tzset_unlocked_r+0x388>
 800cf2a:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf2c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800cf30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cf34:	aa09      	add	r2, sp, #36	@ 0x24
 800cf36:	9200      	str	r2, [sp, #0]
 800cf38:	4937      	ldr	r1, [pc, #220]	@ (800d018 <_tzset_unlocked_r+0x330>)
 800cf3a:	9303      	str	r3, [sp, #12]
 800cf3c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800cf40:	4628      	mov	r0, r5
 800cf42:	f7ff f86f 	bl	800c024 <siscanf>
 800cf46:	2803      	cmp	r0, #3
 800cf48:	f47f aefc 	bne.w	800cd44 <_tzset_unlocked_r+0x5c>
 800cf4c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800cf50:	1e4b      	subs	r3, r1, #1
 800cf52:	2b0b      	cmp	r3, #11
 800cf54:	f63f aef6 	bhi.w	800cd44 <_tzset_unlocked_r+0x5c>
 800cf58:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800cf5c:	1e53      	subs	r3, r2, #1
 800cf5e:	2b04      	cmp	r3, #4
 800cf60:	f63f aef0 	bhi.w	800cd44 <_tzset_unlocked_r+0x5c>
 800cf64:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800cf68:	2b06      	cmp	r3, #6
 800cf6a:	f63f aeeb 	bhi.w	800cd44 <_tzset_unlocked_r+0x5c>
 800cf6e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800cf72:	f887 9008 	strb.w	r9, [r7, #8]
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf7a:	eb05 0903 	add.w	r9, r5, r3
 800cf7e:	2500      	movs	r5, #0
 800cf80:	f04f 0302 	mov.w	r3, #2
 800cf84:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cf88:	f8ad 501e 	strh.w	r5, [sp, #30]
 800cf8c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800cf90:	950a      	str	r5, [sp, #40]	@ 0x28
 800cf92:	f899 3000 	ldrb.w	r3, [r9]
 800cf96:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf98:	f040 8096 	bne.w	800d0c8 <_tzset_unlocked_r+0x3e0>
 800cf9c:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf9e:	aa08      	add	r2, sp, #32
 800cfa0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cfa4:	f10d 021e 	add.w	r2, sp, #30
 800cfa8:	9200      	str	r2, [sp, #0]
 800cfaa:	491c      	ldr	r1, [pc, #112]	@ (800d01c <_tzset_unlocked_r+0x334>)
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	aa07      	add	r2, sp, #28
 800cfb0:	4648      	mov	r0, r9
 800cfb2:	f7ff f837 	bl	800c024 <siscanf>
 800cfb6:	42a8      	cmp	r0, r5
 800cfb8:	f300 8086 	bgt.w	800d0c8 <_tzset_unlocked_r+0x3e0>
 800cfbc:	214a      	movs	r1, #74	@ 0x4a
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800cfc6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cfca:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cfce:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800cfd2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800cfd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800cfda:	7221      	strb	r1, [r4, #8]
 800cfdc:	62a5      	str	r5, [r4, #40]	@ 0x28
 800cfde:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800cfe2:	6525      	str	r5, [r4, #80]	@ 0x50
 800cfe4:	e6ae      	b.n	800cd44 <_tzset_unlocked_r+0x5c>
 800cfe6:	bf00      	nop
 800cfe8:	0801100e 	.word	0x0801100e
 800cfec:	20006ed0 	.word	0x20006ed0
 800cff0:	20006eec 	.word	0x20006eec
 800cff4:	08011011 	.word	0x08011011
 800cff8:	20006ef0 	.word	0x20006ef0
 800cffc:	20000028 	.word	0x20000028
 800d000:	08011273 	.word	0x08011273
 800d004:	20006ee0 	.word	0x20006ee0
 800d008:	08011015 	.word	0x08011015
 800d00c:	0801104a 	.word	0x0801104a
 800d010:	20006ed4 	.word	0x20006ed4
 800d014:	08011028 	.word	0x08011028
 800d018:	08011036 	.word	0x08011036
 800d01c:	08011049 	.word	0x08011049
 800d020:	4a3e      	ldr	r2, [pc, #248]	@ (800d11c <_tzset_unlocked_r+0x434>)
 800d022:	493f      	ldr	r1, [pc, #252]	@ (800d120 <_tzset_unlocked_r+0x438>)
 800d024:	ab0a      	add	r3, sp, #40	@ 0x28
 800d026:	4648      	mov	r0, r9
 800d028:	f7fe fffc 	bl	800c024 <siscanf>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	f77f af17 	ble.w	800ce60 <_tzset_unlocked_r+0x178>
 800d032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d034:	3b03      	subs	r3, #3
 800d036:	2b07      	cmp	r3, #7
 800d038:	f67f af42 	bls.w	800cec0 <_tzset_unlocked_r+0x1d8>
 800d03c:	e682      	b.n	800cd44 <_tzset_unlocked_r+0x5c>
 800d03e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d040:	bf08      	it	eq
 800d042:	3501      	addeq	r5, #1
 800d044:	f04f 0901 	mov.w	r9, #1
 800d048:	e745      	b.n	800ced6 <_tzset_unlocked_r+0x1ee>
 800d04a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d04e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d052:	213c      	movs	r1, #60	@ 0x3c
 800d054:	fb01 3302 	mla	r3, r1, r2, r3
 800d058:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d05c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800d060:	fb01 3302 	mla	r3, r1, r2, r3
 800d064:	fb09 f303 	mul.w	r3, r9, r3
 800d068:	e74f      	b.n	800cf0a <_tzset_unlocked_r+0x222>
 800d06a:	f04f 0b01 	mov.w	fp, #1
 800d06e:	e752      	b.n	800cf16 <_tzset_unlocked_r+0x22e>
 800d070:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800d074:	bf06      	itte	eq
 800d076:	3501      	addeq	r5, #1
 800d078:	464b      	moveq	r3, r9
 800d07a:	2344      	movne	r3, #68	@ 0x44
 800d07c:	220a      	movs	r2, #10
 800d07e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d080:	4628      	mov	r0, r5
 800d082:	9305      	str	r3, [sp, #20]
 800d084:	f002 f92e 	bl	800f2e4 <strtoul>
 800d088:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800d08c:	9b05      	ldr	r3, [sp, #20]
 800d08e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800d092:	45a9      	cmp	r9, r5
 800d094:	d114      	bne.n	800d0c0 <_tzset_unlocked_r+0x3d8>
 800d096:	234d      	movs	r3, #77	@ 0x4d
 800d098:	f1bb 0f00 	cmp.w	fp, #0
 800d09c:	d107      	bne.n	800d0ae <_tzset_unlocked_r+0x3c6>
 800d09e:	7223      	strb	r3, [r4, #8]
 800d0a0:	2103      	movs	r1, #3
 800d0a2:	2302      	movs	r3, #2
 800d0a4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800d0a8:	f8c4 b014 	str.w	fp, [r4, #20]
 800d0ac:	e767      	b.n	800cf7e <_tzset_unlocked_r+0x296>
 800d0ae:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800d0b2:	220b      	movs	r2, #11
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d0be:	e75e      	b.n	800cf7e <_tzset_unlocked_r+0x296>
 800d0c0:	b280      	uxth	r0, r0
 800d0c2:	723b      	strb	r3, [r7, #8]
 800d0c4:	6178      	str	r0, [r7, #20]
 800d0c6:	e75a      	b.n	800cf7e <_tzset_unlocked_r+0x296>
 800d0c8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d0cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d0d0:	213c      	movs	r1, #60	@ 0x3c
 800d0d2:	fb01 3302 	mla	r3, r1, r2, r3
 800d0d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d0da:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800d0de:	fb01 3302 	mla	r3, r1, r2, r3
 800d0e2:	61bb      	str	r3, [r7, #24]
 800d0e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d0e6:	3728      	adds	r7, #40	@ 0x28
 800d0e8:	444d      	add	r5, r9
 800d0ea:	f1bb 0f00 	cmp.w	fp, #0
 800d0ee:	d0bc      	beq.n	800d06a <_tzset_unlocked_r+0x382>
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	6523      	str	r3, [r4, #80]	@ 0x50
 800d0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d124 <_tzset_unlocked_r+0x43c>)
 800d0f6:	f8c8 3000 	str.w	r3, [r8]
 800d0fa:	6860      	ldr	r0, [r4, #4]
 800d0fc:	4b07      	ldr	r3, [pc, #28]	@ (800d11c <_tzset_unlocked_r+0x434>)
 800d0fe:	62a6      	str	r6, [r4, #40]	@ 0x28
 800d100:	f8c8 3004 	str.w	r3, [r8, #4]
 800d104:	f7ff fd2a 	bl	800cb5c <__tzcalc_limits>
 800d108:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d10a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d10c:	f8ca 2000 	str.w	r2, [sl]
 800d110:	1a9b      	subs	r3, r3, r2
 800d112:	4a05      	ldr	r2, [pc, #20]	@ (800d128 <_tzset_unlocked_r+0x440>)
 800d114:	bf18      	it	ne
 800d116:	2301      	movne	r3, #1
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	e613      	b.n	800cd44 <_tzset_unlocked_r+0x5c>
 800d11c:	20006ed4 	.word	0x20006ed4
 800d120:	08011028 	.word	0x08011028
 800d124:	20006ee0 	.word	0x20006ee0
 800d128:	20006ef0 	.word	0x20006ef0

0800d12c <_localeconv_r>:
 800d12c:	4800      	ldr	r0, [pc, #0]	@ (800d130 <_localeconv_r+0x4>)
 800d12e:	4770      	bx	lr
 800d130:	20000120 	.word	0x20000120

0800d134 <_close_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d06      	ldr	r5, [pc, #24]	@ (800d150 <_close_r+0x1c>)
 800d138:	2300      	movs	r3, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	f7f6 fa5c 	bl	80035fc <_close>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d102      	bne.n	800d14e <_close_r+0x1a>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	b103      	cbz	r3, 800d14e <_close_r+0x1a>
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	20006ef4 	.word	0x20006ef4

0800d154 <_gettimeofday_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d07      	ldr	r5, [pc, #28]	@ (800d174 <_gettimeofday_r+0x20>)
 800d158:	2300      	movs	r3, #0
 800d15a:	4604      	mov	r4, r0
 800d15c:	4608      	mov	r0, r1
 800d15e:	4611      	mov	r1, r2
 800d160:	602b      	str	r3, [r5, #0]
 800d162:	f7f6 fa7f 	bl	8003664 <_gettimeofday>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	d102      	bne.n	800d170 <_gettimeofday_r+0x1c>
 800d16a:	682b      	ldr	r3, [r5, #0]
 800d16c:	b103      	cbz	r3, 800d170 <_gettimeofday_r+0x1c>
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	bd38      	pop	{r3, r4, r5, pc}
 800d172:	bf00      	nop
 800d174:	20006ef4 	.word	0x20006ef4

0800d178 <_lseek_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d07      	ldr	r5, [pc, #28]	@ (800d198 <_lseek_r+0x20>)
 800d17c:	4604      	mov	r4, r0
 800d17e:	4608      	mov	r0, r1
 800d180:	4611      	mov	r1, r2
 800d182:	2200      	movs	r2, #0
 800d184:	602a      	str	r2, [r5, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	f7f6 fa5f 	bl	800364a <_lseek>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_lseek_r+0x1e>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_lseek_r+0x1e>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	20006ef4 	.word	0x20006ef4

0800d19c <_read_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d07      	ldr	r5, [pc, #28]	@ (800d1bc <_read_r+0x20>)
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	4608      	mov	r0, r1
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	602a      	str	r2, [r5, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f7f6 f9ed 	bl	800358a <_read>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_read_r+0x1e>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_read_r+0x1e>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	20006ef4 	.word	0x20006ef4

0800d1c0 <_write_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d07      	ldr	r5, [pc, #28]	@ (800d1e0 <_write_r+0x20>)
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	4608      	mov	r0, r1
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	602a      	str	r2, [r5, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f7f6 f9f8 	bl	80035c4 <_write>
 800d1d4:	1c43      	adds	r3, r0, #1
 800d1d6:	d102      	bne.n	800d1de <_write_r+0x1e>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	b103      	cbz	r3, 800d1de <_write_r+0x1e>
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	20006ef4 	.word	0x20006ef4

0800d1e4 <__errno>:
 800d1e4:	4b01      	ldr	r3, [pc, #4]	@ (800d1ec <__errno+0x8>)
 800d1e6:	6818      	ldr	r0, [r3, #0]
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	2000019c 	.word	0x2000019c

0800d1f0 <__libc_init_array>:
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d228 <__libc_init_array+0x38>)
 800d1f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d22c <__libc_init_array+0x3c>)
 800d1f6:	1b64      	subs	r4, r4, r5
 800d1f8:	10a4      	asrs	r4, r4, #2
 800d1fa:	2600      	movs	r6, #0
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	d109      	bne.n	800d214 <__libc_init_array+0x24>
 800d200:	4d0b      	ldr	r5, [pc, #44]	@ (800d230 <__libc_init_array+0x40>)
 800d202:	4c0c      	ldr	r4, [pc, #48]	@ (800d234 <__libc_init_array+0x44>)
 800d204:	f003 f9ca 	bl	801059c <_init>
 800d208:	1b64      	subs	r4, r4, r5
 800d20a:	10a4      	asrs	r4, r4, #2
 800d20c:	2600      	movs	r6, #0
 800d20e:	42a6      	cmp	r6, r4
 800d210:	d105      	bne.n	800d21e <__libc_init_array+0x2e>
 800d212:	bd70      	pop	{r4, r5, r6, pc}
 800d214:	f855 3b04 	ldr.w	r3, [r5], #4
 800d218:	4798      	blx	r3
 800d21a:	3601      	adds	r6, #1
 800d21c:	e7ee      	b.n	800d1fc <__libc_init_array+0xc>
 800d21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d222:	4798      	blx	r3
 800d224:	3601      	adds	r6, #1
 800d226:	e7f2      	b.n	800d20e <__libc_init_array+0x1e>
 800d228:	080115cc 	.word	0x080115cc
 800d22c:	080115cc 	.word	0x080115cc
 800d230:	080115cc 	.word	0x080115cc
 800d234:	080115d0 	.word	0x080115d0

0800d238 <__retarget_lock_init_recursive>:
 800d238:	4770      	bx	lr

0800d23a <__retarget_lock_acquire>:
 800d23a:	4770      	bx	lr

0800d23c <__retarget_lock_acquire_recursive>:
 800d23c:	4770      	bx	lr

0800d23e <__retarget_lock_release>:
 800d23e:	4770      	bx	lr

0800d240 <__retarget_lock_release_recursive>:
 800d240:	4770      	bx	lr

0800d242 <strcpy>:
 800d242:	4603      	mov	r3, r0
 800d244:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d248:	f803 2b01 	strb.w	r2, [r3], #1
 800d24c:	2a00      	cmp	r2, #0
 800d24e:	d1f9      	bne.n	800d244 <strcpy+0x2>
 800d250:	4770      	bx	lr

0800d252 <memcpy>:
 800d252:	440a      	add	r2, r1
 800d254:	4291      	cmp	r1, r2
 800d256:	f100 33ff 	add.w	r3, r0, #4294967295
 800d25a:	d100      	bne.n	800d25e <memcpy+0xc>
 800d25c:	4770      	bx	lr
 800d25e:	b510      	push	{r4, lr}
 800d260:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d264:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d268:	4291      	cmp	r1, r2
 800d26a:	d1f9      	bne.n	800d260 <memcpy+0xe>
 800d26c:	bd10      	pop	{r4, pc}
	...

0800d270 <nan>:
 800d270:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d278 <nan+0x8>
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	00000000 	.word	0x00000000
 800d27c:	7ff80000 	.word	0x7ff80000

0800d280 <__assert_func>:
 800d280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d282:	4614      	mov	r4, r2
 800d284:	461a      	mov	r2, r3
 800d286:	4b09      	ldr	r3, [pc, #36]	@ (800d2ac <__assert_func+0x2c>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4605      	mov	r5, r0
 800d28c:	68d8      	ldr	r0, [r3, #12]
 800d28e:	b14c      	cbz	r4, 800d2a4 <__assert_func+0x24>
 800d290:	4b07      	ldr	r3, [pc, #28]	@ (800d2b0 <__assert_func+0x30>)
 800d292:	9100      	str	r1, [sp, #0]
 800d294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d298:	4906      	ldr	r1, [pc, #24]	@ (800d2b4 <__assert_func+0x34>)
 800d29a:	462b      	mov	r3, r5
 800d29c:	f002 fe9c 	bl	800ffd8 <fiprintf>
 800d2a0:	f003 f8da 	bl	8010458 <abort>
 800d2a4:	4b04      	ldr	r3, [pc, #16]	@ (800d2b8 <__assert_func+0x38>)
 800d2a6:	461c      	mov	r4, r3
 800d2a8:	e7f3      	b.n	800d292 <__assert_func+0x12>
 800d2aa:	bf00      	nop
 800d2ac:	2000019c 	.word	0x2000019c
 800d2b0:	08011064 	.word	0x08011064
 800d2b4:	08011071 	.word	0x08011071
 800d2b8:	08011273 	.word	0x08011273

0800d2bc <div>:
 800d2bc:	b510      	push	{r4, lr}
 800d2be:	fb91 f4f2 	sdiv	r4, r1, r2
 800d2c2:	fb02 1114 	mls	r1, r2, r4, r1
 800d2c6:	6004      	str	r4, [r0, #0]
 800d2c8:	6041      	str	r1, [r0, #4]
 800d2ca:	bd10      	pop	{r4, pc}

0800d2cc <quorem>:
 800d2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d0:	6903      	ldr	r3, [r0, #16]
 800d2d2:	690c      	ldr	r4, [r1, #16]
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	db7e      	blt.n	800d3d8 <quorem+0x10c>
 800d2da:	3c01      	subs	r4, #1
 800d2dc:	f101 0814 	add.w	r8, r1, #20
 800d2e0:	00a3      	lsls	r3, r4, #2
 800d2e2:	f100 0514 	add.w	r5, r0, #20
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800d302:	d32e      	bcc.n	800d362 <quorem+0x96>
 800d304:	f04f 0a00 	mov.w	sl, #0
 800d308:	46c4      	mov	ip, r8
 800d30a:	46ae      	mov	lr, r5
 800d30c:	46d3      	mov	fp, sl
 800d30e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d312:	b298      	uxth	r0, r3
 800d314:	fb06 a000 	mla	r0, r6, r0, sl
 800d318:	0c02      	lsrs	r2, r0, #16
 800d31a:	0c1b      	lsrs	r3, r3, #16
 800d31c:	fb06 2303 	mla	r3, r6, r3, r2
 800d320:	f8de 2000 	ldr.w	r2, [lr]
 800d324:	b280      	uxth	r0, r0
 800d326:	b292      	uxth	r2, r2
 800d328:	1a12      	subs	r2, r2, r0
 800d32a:	445a      	add	r2, fp
 800d32c:	f8de 0000 	ldr.w	r0, [lr]
 800d330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d334:	b29b      	uxth	r3, r3
 800d336:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d33a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d33e:	b292      	uxth	r2, r2
 800d340:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d344:	45e1      	cmp	r9, ip
 800d346:	f84e 2b04 	str.w	r2, [lr], #4
 800d34a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d34e:	d2de      	bcs.n	800d30e <quorem+0x42>
 800d350:	9b00      	ldr	r3, [sp, #0]
 800d352:	58eb      	ldr	r3, [r5, r3]
 800d354:	b92b      	cbnz	r3, 800d362 <quorem+0x96>
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	3b04      	subs	r3, #4
 800d35a:	429d      	cmp	r5, r3
 800d35c:	461a      	mov	r2, r3
 800d35e:	d32f      	bcc.n	800d3c0 <quorem+0xf4>
 800d360:	613c      	str	r4, [r7, #16]
 800d362:	4638      	mov	r0, r7
 800d364:	f001 fd60 	bl	800ee28 <__mcmp>
 800d368:	2800      	cmp	r0, #0
 800d36a:	db25      	blt.n	800d3b8 <quorem+0xec>
 800d36c:	4629      	mov	r1, r5
 800d36e:	2000      	movs	r0, #0
 800d370:	f858 2b04 	ldr.w	r2, [r8], #4
 800d374:	f8d1 c000 	ldr.w	ip, [r1]
 800d378:	fa1f fe82 	uxth.w	lr, r2
 800d37c:	fa1f f38c 	uxth.w	r3, ip
 800d380:	eba3 030e 	sub.w	r3, r3, lr
 800d384:	4403      	add	r3, r0
 800d386:	0c12      	lsrs	r2, r2, #16
 800d388:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d38c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d390:	b29b      	uxth	r3, r3
 800d392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d396:	45c1      	cmp	r9, r8
 800d398:	f841 3b04 	str.w	r3, [r1], #4
 800d39c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3a0:	d2e6      	bcs.n	800d370 <quorem+0xa4>
 800d3a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3aa:	b922      	cbnz	r2, 800d3b6 <quorem+0xea>
 800d3ac:	3b04      	subs	r3, #4
 800d3ae:	429d      	cmp	r5, r3
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	d30b      	bcc.n	800d3cc <quorem+0x100>
 800d3b4:	613c      	str	r4, [r7, #16]
 800d3b6:	3601      	adds	r6, #1
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	b003      	add	sp, #12
 800d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c0:	6812      	ldr	r2, [r2, #0]
 800d3c2:	3b04      	subs	r3, #4
 800d3c4:	2a00      	cmp	r2, #0
 800d3c6:	d1cb      	bne.n	800d360 <quorem+0x94>
 800d3c8:	3c01      	subs	r4, #1
 800d3ca:	e7c6      	b.n	800d35a <quorem+0x8e>
 800d3cc:	6812      	ldr	r2, [r2, #0]
 800d3ce:	3b04      	subs	r3, #4
 800d3d0:	2a00      	cmp	r2, #0
 800d3d2:	d1ef      	bne.n	800d3b4 <quorem+0xe8>
 800d3d4:	3c01      	subs	r4, #1
 800d3d6:	e7ea      	b.n	800d3ae <quorem+0xe2>
 800d3d8:	2000      	movs	r0, #0
 800d3da:	e7ee      	b.n	800d3ba <quorem+0xee>
 800d3dc:	0000      	movs	r0, r0
	...

0800d3e0 <_dtoa_r>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	69c7      	ldr	r7, [r0, #28]
 800d3e6:	b097      	sub	sp, #92	@ 0x5c
 800d3e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d3ec:	ec55 4b10 	vmov	r4, r5, d0
 800d3f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d3f2:	9107      	str	r1, [sp, #28]
 800d3f4:	4681      	mov	r9, r0
 800d3f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d3fa:	b97f      	cbnz	r7, 800d41c <_dtoa_r+0x3c>
 800d3fc:	2010      	movs	r0, #16
 800d3fe:	f001 f987 	bl	800e710 <malloc>
 800d402:	4602      	mov	r2, r0
 800d404:	f8c9 001c 	str.w	r0, [r9, #28]
 800d408:	b920      	cbnz	r0, 800d414 <_dtoa_r+0x34>
 800d40a:	4ba9      	ldr	r3, [pc, #676]	@ (800d6b0 <_dtoa_r+0x2d0>)
 800d40c:	21ef      	movs	r1, #239	@ 0xef
 800d40e:	48a9      	ldr	r0, [pc, #676]	@ (800d6b4 <_dtoa_r+0x2d4>)
 800d410:	f7ff ff36 	bl	800d280 <__assert_func>
 800d414:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d418:	6007      	str	r7, [r0, #0]
 800d41a:	60c7      	str	r7, [r0, #12]
 800d41c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d420:	6819      	ldr	r1, [r3, #0]
 800d422:	b159      	cbz	r1, 800d43c <_dtoa_r+0x5c>
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	604a      	str	r2, [r1, #4]
 800d428:	2301      	movs	r3, #1
 800d42a:	4093      	lsls	r3, r2
 800d42c:	608b      	str	r3, [r1, #8]
 800d42e:	4648      	mov	r0, r9
 800d430:	f001 fa7e 	bl	800e930 <_Bfree>
 800d434:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	1e2b      	subs	r3, r5, #0
 800d43e:	bfb9      	ittee	lt
 800d440:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d444:	9305      	strlt	r3, [sp, #20]
 800d446:	2300      	movge	r3, #0
 800d448:	6033      	strge	r3, [r6, #0]
 800d44a:	9f05      	ldr	r7, [sp, #20]
 800d44c:	4b9a      	ldr	r3, [pc, #616]	@ (800d6b8 <_dtoa_r+0x2d8>)
 800d44e:	bfbc      	itt	lt
 800d450:	2201      	movlt	r2, #1
 800d452:	6032      	strlt	r2, [r6, #0]
 800d454:	43bb      	bics	r3, r7
 800d456:	d112      	bne.n	800d47e <_dtoa_r+0x9e>
 800d458:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d45a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d45e:	6013      	str	r3, [r2, #0]
 800d460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d464:	4323      	orrs	r3, r4
 800d466:	f000 855a 	beq.w	800df1e <_dtoa_r+0xb3e>
 800d46a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d46c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d6cc <_dtoa_r+0x2ec>
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 855c 	beq.w	800df2e <_dtoa_r+0xb4e>
 800d476:	f10a 0303 	add.w	r3, sl, #3
 800d47a:	f000 bd56 	b.w	800df2a <_dtoa_r+0xb4a>
 800d47e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d482:	2200      	movs	r2, #0
 800d484:	ec51 0b17 	vmov	r0, r1, d7
 800d488:	2300      	movs	r3, #0
 800d48a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d48e:	f7f3 fb33 	bl	8000af8 <__aeabi_dcmpeq>
 800d492:	4680      	mov	r8, r0
 800d494:	b158      	cbz	r0, 800d4ae <_dtoa_r+0xce>
 800d496:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d498:	2301      	movs	r3, #1
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d49e:	b113      	cbz	r3, 800d4a6 <_dtoa_r+0xc6>
 800d4a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d4a2:	4b86      	ldr	r3, [pc, #536]	@ (800d6bc <_dtoa_r+0x2dc>)
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d6d0 <_dtoa_r+0x2f0>
 800d4aa:	f000 bd40 	b.w	800df2e <_dtoa_r+0xb4e>
 800d4ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d4b2:	aa14      	add	r2, sp, #80	@ 0x50
 800d4b4:	a915      	add	r1, sp, #84	@ 0x54
 800d4b6:	4648      	mov	r0, r9
 800d4b8:	f001 fdd6 	bl	800f068 <__d2b>
 800d4bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d4c0:	9002      	str	r0, [sp, #8]
 800d4c2:	2e00      	cmp	r6, #0
 800d4c4:	d078      	beq.n	800d5b8 <_dtoa_r+0x1d8>
 800d4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d4d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d4dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4b76      	ldr	r3, [pc, #472]	@ (800d6c0 <_dtoa_r+0x2e0>)
 800d4e6:	f7f2 fee7 	bl	80002b8 <__aeabi_dsub>
 800d4ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800d698 <_dtoa_r+0x2b8>)
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	f7f3 f89a 	bl	8000628 <__aeabi_dmul>
 800d4f4:	a36a      	add	r3, pc, #424	@ (adr r3, 800d6a0 <_dtoa_r+0x2c0>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f2 fedf 	bl	80002bc <__adddf3>
 800d4fe:	4604      	mov	r4, r0
 800d500:	4630      	mov	r0, r6
 800d502:	460d      	mov	r5, r1
 800d504:	f7f3 f826 	bl	8000554 <__aeabi_i2d>
 800d508:	a367      	add	r3, pc, #412	@ (adr r3, 800d6a8 <_dtoa_r+0x2c8>)
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	f7f3 f88b 	bl	8000628 <__aeabi_dmul>
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	4620      	mov	r0, r4
 800d518:	4629      	mov	r1, r5
 800d51a:	f7f2 fecf 	bl	80002bc <__adddf3>
 800d51e:	4604      	mov	r4, r0
 800d520:	460d      	mov	r5, r1
 800d522:	f7f3 fb31 	bl	8000b88 <__aeabi_d2iz>
 800d526:	2200      	movs	r2, #0
 800d528:	4607      	mov	r7, r0
 800d52a:	2300      	movs	r3, #0
 800d52c:	4620      	mov	r0, r4
 800d52e:	4629      	mov	r1, r5
 800d530:	f7f3 faec 	bl	8000b0c <__aeabi_dcmplt>
 800d534:	b140      	cbz	r0, 800d548 <_dtoa_r+0x168>
 800d536:	4638      	mov	r0, r7
 800d538:	f7f3 f80c 	bl	8000554 <__aeabi_i2d>
 800d53c:	4622      	mov	r2, r4
 800d53e:	462b      	mov	r3, r5
 800d540:	f7f3 fada 	bl	8000af8 <__aeabi_dcmpeq>
 800d544:	b900      	cbnz	r0, 800d548 <_dtoa_r+0x168>
 800d546:	3f01      	subs	r7, #1
 800d548:	2f16      	cmp	r7, #22
 800d54a:	d852      	bhi.n	800d5f2 <_dtoa_r+0x212>
 800d54c:	4b5d      	ldr	r3, [pc, #372]	@ (800d6c4 <_dtoa_r+0x2e4>)
 800d54e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d55a:	f7f3 fad7 	bl	8000b0c <__aeabi_dcmplt>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d049      	beq.n	800d5f6 <_dtoa_r+0x216>
 800d562:	3f01      	subs	r7, #1
 800d564:	2300      	movs	r3, #0
 800d566:	9310      	str	r3, [sp, #64]	@ 0x40
 800d568:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d56a:	1b9b      	subs	r3, r3, r6
 800d56c:	1e5a      	subs	r2, r3, #1
 800d56e:	bf45      	ittet	mi
 800d570:	f1c3 0301 	rsbmi	r3, r3, #1
 800d574:	9300      	strmi	r3, [sp, #0]
 800d576:	2300      	movpl	r3, #0
 800d578:	2300      	movmi	r3, #0
 800d57a:	9206      	str	r2, [sp, #24]
 800d57c:	bf54      	ite	pl
 800d57e:	9300      	strpl	r3, [sp, #0]
 800d580:	9306      	strmi	r3, [sp, #24]
 800d582:	2f00      	cmp	r7, #0
 800d584:	db39      	blt.n	800d5fa <_dtoa_r+0x21a>
 800d586:	9b06      	ldr	r3, [sp, #24]
 800d588:	970d      	str	r7, [sp, #52]	@ 0x34
 800d58a:	443b      	add	r3, r7
 800d58c:	9306      	str	r3, [sp, #24]
 800d58e:	2300      	movs	r3, #0
 800d590:	9308      	str	r3, [sp, #32]
 800d592:	9b07      	ldr	r3, [sp, #28]
 800d594:	2b09      	cmp	r3, #9
 800d596:	d863      	bhi.n	800d660 <_dtoa_r+0x280>
 800d598:	2b05      	cmp	r3, #5
 800d59a:	bfc4      	itt	gt
 800d59c:	3b04      	subgt	r3, #4
 800d59e:	9307      	strgt	r3, [sp, #28]
 800d5a0:	9b07      	ldr	r3, [sp, #28]
 800d5a2:	f1a3 0302 	sub.w	r3, r3, #2
 800d5a6:	bfcc      	ite	gt
 800d5a8:	2400      	movgt	r4, #0
 800d5aa:	2401      	movle	r4, #1
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d863      	bhi.n	800d678 <_dtoa_r+0x298>
 800d5b0:	e8df f003 	tbb	[pc, r3]
 800d5b4:	2b375452 	.word	0x2b375452
 800d5b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d5bc:	441e      	add	r6, r3
 800d5be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d5c2:	2b20      	cmp	r3, #32
 800d5c4:	bfc1      	itttt	gt
 800d5c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d5ca:	409f      	lslgt	r7, r3
 800d5cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d5d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d5d4:	bfd6      	itet	le
 800d5d6:	f1c3 0320 	rsble	r3, r3, #32
 800d5da:	ea47 0003 	orrgt.w	r0, r7, r3
 800d5de:	fa04 f003 	lslle.w	r0, r4, r3
 800d5e2:	f7f2 ffa7 	bl	8000534 <__aeabi_ui2d>
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d5ec:	3e01      	subs	r6, #1
 800d5ee:	9212      	str	r2, [sp, #72]	@ 0x48
 800d5f0:	e776      	b.n	800d4e0 <_dtoa_r+0x100>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e7b7      	b.n	800d566 <_dtoa_r+0x186>
 800d5f6:	9010      	str	r0, [sp, #64]	@ 0x40
 800d5f8:	e7b6      	b.n	800d568 <_dtoa_r+0x188>
 800d5fa:	9b00      	ldr	r3, [sp, #0]
 800d5fc:	1bdb      	subs	r3, r3, r7
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	427b      	negs	r3, r7
 800d602:	9308      	str	r3, [sp, #32]
 800d604:	2300      	movs	r3, #0
 800d606:	930d      	str	r3, [sp, #52]	@ 0x34
 800d608:	e7c3      	b.n	800d592 <_dtoa_r+0x1b2>
 800d60a:	2301      	movs	r3, #1
 800d60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d60e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d610:	eb07 0b03 	add.w	fp, r7, r3
 800d614:	f10b 0301 	add.w	r3, fp, #1
 800d618:	2b01      	cmp	r3, #1
 800d61a:	9303      	str	r3, [sp, #12]
 800d61c:	bfb8      	it	lt
 800d61e:	2301      	movlt	r3, #1
 800d620:	e006      	b.n	800d630 <_dtoa_r+0x250>
 800d622:	2301      	movs	r3, #1
 800d624:	9309      	str	r3, [sp, #36]	@ 0x24
 800d626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d628:	2b00      	cmp	r3, #0
 800d62a:	dd28      	ble.n	800d67e <_dtoa_r+0x29e>
 800d62c:	469b      	mov	fp, r3
 800d62e:	9303      	str	r3, [sp, #12]
 800d630:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d634:	2100      	movs	r1, #0
 800d636:	2204      	movs	r2, #4
 800d638:	f102 0514 	add.w	r5, r2, #20
 800d63c:	429d      	cmp	r5, r3
 800d63e:	d926      	bls.n	800d68e <_dtoa_r+0x2ae>
 800d640:	6041      	str	r1, [r0, #4]
 800d642:	4648      	mov	r0, r9
 800d644:	f001 f934 	bl	800e8b0 <_Balloc>
 800d648:	4682      	mov	sl, r0
 800d64a:	2800      	cmp	r0, #0
 800d64c:	d142      	bne.n	800d6d4 <_dtoa_r+0x2f4>
 800d64e:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c8 <_dtoa_r+0x2e8>)
 800d650:	4602      	mov	r2, r0
 800d652:	f240 11af 	movw	r1, #431	@ 0x1af
 800d656:	e6da      	b.n	800d40e <_dtoa_r+0x2e>
 800d658:	2300      	movs	r3, #0
 800d65a:	e7e3      	b.n	800d624 <_dtoa_r+0x244>
 800d65c:	2300      	movs	r3, #0
 800d65e:	e7d5      	b.n	800d60c <_dtoa_r+0x22c>
 800d660:	2401      	movs	r4, #1
 800d662:	2300      	movs	r3, #0
 800d664:	9307      	str	r3, [sp, #28]
 800d666:	9409      	str	r4, [sp, #36]	@ 0x24
 800d668:	f04f 3bff 	mov.w	fp, #4294967295
 800d66c:	2200      	movs	r2, #0
 800d66e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d672:	2312      	movs	r3, #18
 800d674:	920c      	str	r2, [sp, #48]	@ 0x30
 800d676:	e7db      	b.n	800d630 <_dtoa_r+0x250>
 800d678:	2301      	movs	r3, #1
 800d67a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d67c:	e7f4      	b.n	800d668 <_dtoa_r+0x288>
 800d67e:	f04f 0b01 	mov.w	fp, #1
 800d682:	f8cd b00c 	str.w	fp, [sp, #12]
 800d686:	465b      	mov	r3, fp
 800d688:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d68c:	e7d0      	b.n	800d630 <_dtoa_r+0x250>
 800d68e:	3101      	adds	r1, #1
 800d690:	0052      	lsls	r2, r2, #1
 800d692:	e7d1      	b.n	800d638 <_dtoa_r+0x258>
 800d694:	f3af 8000 	nop.w
 800d698:	636f4361 	.word	0x636f4361
 800d69c:	3fd287a7 	.word	0x3fd287a7
 800d6a0:	8b60c8b3 	.word	0x8b60c8b3
 800d6a4:	3fc68a28 	.word	0x3fc68a28
 800d6a8:	509f79fb 	.word	0x509f79fb
 800d6ac:	3fd34413 	.word	0x3fd34413
 800d6b0:	08010f44 	.word	0x08010f44
 800d6b4:	080110ad 	.word	0x080110ad
 800d6b8:	7ff00000 	.word	0x7ff00000
 800d6bc:	080111f7 	.word	0x080111f7
 800d6c0:	3ff80000 	.word	0x3ff80000
 800d6c4:	080114c0 	.word	0x080114c0
 800d6c8:	08011105 	.word	0x08011105
 800d6cc:	080110a9 	.word	0x080110a9
 800d6d0:	080111f6 	.word	0x080111f6
 800d6d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d6d8:	6018      	str	r0, [r3, #0]
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	2b0e      	cmp	r3, #14
 800d6de:	f200 80a1 	bhi.w	800d824 <_dtoa_r+0x444>
 800d6e2:	2c00      	cmp	r4, #0
 800d6e4:	f000 809e 	beq.w	800d824 <_dtoa_r+0x444>
 800d6e8:	2f00      	cmp	r7, #0
 800d6ea:	dd33      	ble.n	800d754 <_dtoa_r+0x374>
 800d6ec:	4b9c      	ldr	r3, [pc, #624]	@ (800d960 <_dtoa_r+0x580>)
 800d6ee:	f007 020f 	and.w	r2, r7, #15
 800d6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6f6:	ed93 7b00 	vldr	d7, [r3]
 800d6fa:	05f8      	lsls	r0, r7, #23
 800d6fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d700:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d704:	d516      	bpl.n	800d734 <_dtoa_r+0x354>
 800d706:	4b97      	ldr	r3, [pc, #604]	@ (800d964 <_dtoa_r+0x584>)
 800d708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d70c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d710:	f7f3 f8b4 	bl	800087c <__aeabi_ddiv>
 800d714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d718:	f004 040f 	and.w	r4, r4, #15
 800d71c:	2603      	movs	r6, #3
 800d71e:	4d91      	ldr	r5, [pc, #580]	@ (800d964 <_dtoa_r+0x584>)
 800d720:	b954      	cbnz	r4, 800d738 <_dtoa_r+0x358>
 800d722:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d72a:	f7f3 f8a7 	bl	800087c <__aeabi_ddiv>
 800d72e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d732:	e028      	b.n	800d786 <_dtoa_r+0x3a6>
 800d734:	2602      	movs	r6, #2
 800d736:	e7f2      	b.n	800d71e <_dtoa_r+0x33e>
 800d738:	07e1      	lsls	r1, r4, #31
 800d73a:	d508      	bpl.n	800d74e <_dtoa_r+0x36e>
 800d73c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d740:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d744:	f7f2 ff70 	bl	8000628 <__aeabi_dmul>
 800d748:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d74c:	3601      	adds	r6, #1
 800d74e:	1064      	asrs	r4, r4, #1
 800d750:	3508      	adds	r5, #8
 800d752:	e7e5      	b.n	800d720 <_dtoa_r+0x340>
 800d754:	f000 80af 	beq.w	800d8b6 <_dtoa_r+0x4d6>
 800d758:	427c      	negs	r4, r7
 800d75a:	4b81      	ldr	r3, [pc, #516]	@ (800d960 <_dtoa_r+0x580>)
 800d75c:	4d81      	ldr	r5, [pc, #516]	@ (800d964 <_dtoa_r+0x584>)
 800d75e:	f004 020f 	and.w	r2, r4, #15
 800d762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d76e:	f7f2 ff5b 	bl	8000628 <__aeabi_dmul>
 800d772:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d776:	1124      	asrs	r4, r4, #4
 800d778:	2300      	movs	r3, #0
 800d77a:	2602      	movs	r6, #2
 800d77c:	2c00      	cmp	r4, #0
 800d77e:	f040 808f 	bne.w	800d8a0 <_dtoa_r+0x4c0>
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1d3      	bne.n	800d72e <_dtoa_r+0x34e>
 800d786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d788:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 8094 	beq.w	800d8ba <_dtoa_r+0x4da>
 800d792:	4b75      	ldr	r3, [pc, #468]	@ (800d968 <_dtoa_r+0x588>)
 800d794:	2200      	movs	r2, #0
 800d796:	4620      	mov	r0, r4
 800d798:	4629      	mov	r1, r5
 800d79a:	f7f3 f9b7 	bl	8000b0c <__aeabi_dcmplt>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	f000 808b 	beq.w	800d8ba <_dtoa_r+0x4da>
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 8087 	beq.w	800d8ba <_dtoa_r+0x4da>
 800d7ac:	f1bb 0f00 	cmp.w	fp, #0
 800d7b0:	dd34      	ble.n	800d81c <_dtoa_r+0x43c>
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4b6d      	ldr	r3, [pc, #436]	@ (800d96c <_dtoa_r+0x58c>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f2 ff35 	bl	8000628 <__aeabi_dmul>
 800d7be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7c2:	f107 38ff 	add.w	r8, r7, #4294967295
 800d7c6:	3601      	adds	r6, #1
 800d7c8:	465c      	mov	r4, fp
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f7f2 fec2 	bl	8000554 <__aeabi_i2d>
 800d7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7d4:	f7f2 ff28 	bl	8000628 <__aeabi_dmul>
 800d7d8:	4b65      	ldr	r3, [pc, #404]	@ (800d970 <_dtoa_r+0x590>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f7f2 fd6e 	bl	80002bc <__adddf3>
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	d16a      	bne.n	800d8c0 <_dtoa_r+0x4e0>
 800d7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7ee:	4b61      	ldr	r3, [pc, #388]	@ (800d974 <_dtoa_r+0x594>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f7f2 fd61 	bl	80002b8 <__aeabi_dsub>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7fe:	462a      	mov	r2, r5
 800d800:	4633      	mov	r3, r6
 800d802:	f7f3 f9a1 	bl	8000b48 <__aeabi_dcmpgt>
 800d806:	2800      	cmp	r0, #0
 800d808:	f040 8298 	bne.w	800dd3c <_dtoa_r+0x95c>
 800d80c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d810:	462a      	mov	r2, r5
 800d812:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d816:	f7f3 f979 	bl	8000b0c <__aeabi_dcmplt>
 800d81a:	bb38      	cbnz	r0, 800d86c <_dtoa_r+0x48c>
 800d81c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d820:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d824:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d826:	2b00      	cmp	r3, #0
 800d828:	f2c0 8157 	blt.w	800dada <_dtoa_r+0x6fa>
 800d82c:	2f0e      	cmp	r7, #14
 800d82e:	f300 8154 	bgt.w	800dada <_dtoa_r+0x6fa>
 800d832:	4b4b      	ldr	r3, [pc, #300]	@ (800d960 <_dtoa_r+0x580>)
 800d834:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d838:	ed93 7b00 	vldr	d7, [r3]
 800d83c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d83e:	2b00      	cmp	r3, #0
 800d840:	ed8d 7b00 	vstr	d7, [sp]
 800d844:	f280 80e5 	bge.w	800da12 <_dtoa_r+0x632>
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f300 80e1 	bgt.w	800da12 <_dtoa_r+0x632>
 800d850:	d10c      	bne.n	800d86c <_dtoa_r+0x48c>
 800d852:	4b48      	ldr	r3, [pc, #288]	@ (800d974 <_dtoa_r+0x594>)
 800d854:	2200      	movs	r2, #0
 800d856:	ec51 0b17 	vmov	r0, r1, d7
 800d85a:	f7f2 fee5 	bl	8000628 <__aeabi_dmul>
 800d85e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d862:	f7f3 f967 	bl	8000b34 <__aeabi_dcmpge>
 800d866:	2800      	cmp	r0, #0
 800d868:	f000 8266 	beq.w	800dd38 <_dtoa_r+0x958>
 800d86c:	2400      	movs	r4, #0
 800d86e:	4625      	mov	r5, r4
 800d870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d872:	4656      	mov	r6, sl
 800d874:	ea6f 0803 	mvn.w	r8, r3
 800d878:	2700      	movs	r7, #0
 800d87a:	4621      	mov	r1, r4
 800d87c:	4648      	mov	r0, r9
 800d87e:	f001 f857 	bl	800e930 <_Bfree>
 800d882:	2d00      	cmp	r5, #0
 800d884:	f000 80bd 	beq.w	800da02 <_dtoa_r+0x622>
 800d888:	b12f      	cbz	r7, 800d896 <_dtoa_r+0x4b6>
 800d88a:	42af      	cmp	r7, r5
 800d88c:	d003      	beq.n	800d896 <_dtoa_r+0x4b6>
 800d88e:	4639      	mov	r1, r7
 800d890:	4648      	mov	r0, r9
 800d892:	f001 f84d 	bl	800e930 <_Bfree>
 800d896:	4629      	mov	r1, r5
 800d898:	4648      	mov	r0, r9
 800d89a:	f001 f849 	bl	800e930 <_Bfree>
 800d89e:	e0b0      	b.n	800da02 <_dtoa_r+0x622>
 800d8a0:	07e2      	lsls	r2, r4, #31
 800d8a2:	d505      	bpl.n	800d8b0 <_dtoa_r+0x4d0>
 800d8a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8a8:	f7f2 febe 	bl	8000628 <__aeabi_dmul>
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	1064      	asrs	r4, r4, #1
 800d8b2:	3508      	adds	r5, #8
 800d8b4:	e762      	b.n	800d77c <_dtoa_r+0x39c>
 800d8b6:	2602      	movs	r6, #2
 800d8b8:	e765      	b.n	800d786 <_dtoa_r+0x3a6>
 800d8ba:	9c03      	ldr	r4, [sp, #12]
 800d8bc:	46b8      	mov	r8, r7
 800d8be:	e784      	b.n	800d7ca <_dtoa_r+0x3ea>
 800d8c0:	4b27      	ldr	r3, [pc, #156]	@ (800d960 <_dtoa_r+0x580>)
 800d8c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8cc:	4454      	add	r4, sl
 800d8ce:	2900      	cmp	r1, #0
 800d8d0:	d054      	beq.n	800d97c <_dtoa_r+0x59c>
 800d8d2:	4929      	ldr	r1, [pc, #164]	@ (800d978 <_dtoa_r+0x598>)
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f7f2 ffd1 	bl	800087c <__aeabi_ddiv>
 800d8da:	4633      	mov	r3, r6
 800d8dc:	462a      	mov	r2, r5
 800d8de:	f7f2 fceb 	bl	80002b8 <__aeabi_dsub>
 800d8e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d8e6:	4656      	mov	r6, sl
 800d8e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8ec:	f7f3 f94c 	bl	8000b88 <__aeabi_d2iz>
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	f7f2 fe2f 	bl	8000554 <__aeabi_i2d>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8fe:	f7f2 fcdb 	bl	80002b8 <__aeabi_dsub>
 800d902:	3530      	adds	r5, #48	@ 0x30
 800d904:	4602      	mov	r2, r0
 800d906:	460b      	mov	r3, r1
 800d908:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d90c:	f806 5b01 	strb.w	r5, [r6], #1
 800d910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d914:	f7f3 f8fa 	bl	8000b0c <__aeabi_dcmplt>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d172      	bne.n	800da02 <_dtoa_r+0x622>
 800d91c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d920:	4911      	ldr	r1, [pc, #68]	@ (800d968 <_dtoa_r+0x588>)
 800d922:	2000      	movs	r0, #0
 800d924:	f7f2 fcc8 	bl	80002b8 <__aeabi_dsub>
 800d928:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d92c:	f7f3 f8ee 	bl	8000b0c <__aeabi_dcmplt>
 800d930:	2800      	cmp	r0, #0
 800d932:	f040 80b4 	bne.w	800da9e <_dtoa_r+0x6be>
 800d936:	42a6      	cmp	r6, r4
 800d938:	f43f af70 	beq.w	800d81c <_dtoa_r+0x43c>
 800d93c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d940:	4b0a      	ldr	r3, [pc, #40]	@ (800d96c <_dtoa_r+0x58c>)
 800d942:	2200      	movs	r2, #0
 800d944:	f7f2 fe70 	bl	8000628 <__aeabi_dmul>
 800d948:	4b08      	ldr	r3, [pc, #32]	@ (800d96c <_dtoa_r+0x58c>)
 800d94a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d94e:	2200      	movs	r2, #0
 800d950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d954:	f7f2 fe68 	bl	8000628 <__aeabi_dmul>
 800d958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d95c:	e7c4      	b.n	800d8e8 <_dtoa_r+0x508>
 800d95e:	bf00      	nop
 800d960:	080114c0 	.word	0x080114c0
 800d964:	08011498 	.word	0x08011498
 800d968:	3ff00000 	.word	0x3ff00000
 800d96c:	40240000 	.word	0x40240000
 800d970:	401c0000 	.word	0x401c0000
 800d974:	40140000 	.word	0x40140000
 800d978:	3fe00000 	.word	0x3fe00000
 800d97c:	4631      	mov	r1, r6
 800d97e:	4628      	mov	r0, r5
 800d980:	f7f2 fe52 	bl	8000628 <__aeabi_dmul>
 800d984:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d988:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d98a:	4656      	mov	r6, sl
 800d98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d990:	f7f3 f8fa 	bl	8000b88 <__aeabi_d2iz>
 800d994:	4605      	mov	r5, r0
 800d996:	f7f2 fddd 	bl	8000554 <__aeabi_i2d>
 800d99a:	4602      	mov	r2, r0
 800d99c:	460b      	mov	r3, r1
 800d99e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9a2:	f7f2 fc89 	bl	80002b8 <__aeabi_dsub>
 800d9a6:	3530      	adds	r5, #48	@ 0x30
 800d9a8:	f806 5b01 	strb.w	r5, [r6], #1
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	42a6      	cmp	r6, r4
 800d9b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d9b6:	f04f 0200 	mov.w	r2, #0
 800d9ba:	d124      	bne.n	800da06 <_dtoa_r+0x626>
 800d9bc:	4baf      	ldr	r3, [pc, #700]	@ (800dc7c <_dtoa_r+0x89c>)
 800d9be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d9c2:	f7f2 fc7b 	bl	80002bc <__adddf3>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9ce:	f7f3 f8bb 	bl	8000b48 <__aeabi_dcmpgt>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d163      	bne.n	800da9e <_dtoa_r+0x6be>
 800d9d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d9da:	49a8      	ldr	r1, [pc, #672]	@ (800dc7c <_dtoa_r+0x89c>)
 800d9dc:	2000      	movs	r0, #0
 800d9de:	f7f2 fc6b 	bl	80002b8 <__aeabi_dsub>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9ea:	f7f3 f88f 	bl	8000b0c <__aeabi_dcmplt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f af14 	beq.w	800d81c <_dtoa_r+0x43c>
 800d9f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d9f6:	1e73      	subs	r3, r6, #1
 800d9f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d9fe:	2b30      	cmp	r3, #48	@ 0x30
 800da00:	d0f8      	beq.n	800d9f4 <_dtoa_r+0x614>
 800da02:	4647      	mov	r7, r8
 800da04:	e03b      	b.n	800da7e <_dtoa_r+0x69e>
 800da06:	4b9e      	ldr	r3, [pc, #632]	@ (800dc80 <_dtoa_r+0x8a0>)
 800da08:	f7f2 fe0e 	bl	8000628 <__aeabi_dmul>
 800da0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da10:	e7bc      	b.n	800d98c <_dtoa_r+0x5ac>
 800da12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800da16:	4656      	mov	r6, sl
 800da18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da1c:	4620      	mov	r0, r4
 800da1e:	4629      	mov	r1, r5
 800da20:	f7f2 ff2c 	bl	800087c <__aeabi_ddiv>
 800da24:	f7f3 f8b0 	bl	8000b88 <__aeabi_d2iz>
 800da28:	4680      	mov	r8, r0
 800da2a:	f7f2 fd93 	bl	8000554 <__aeabi_i2d>
 800da2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da32:	f7f2 fdf9 	bl	8000628 <__aeabi_dmul>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4620      	mov	r0, r4
 800da3c:	4629      	mov	r1, r5
 800da3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800da42:	f7f2 fc39 	bl	80002b8 <__aeabi_dsub>
 800da46:	f806 4b01 	strb.w	r4, [r6], #1
 800da4a:	9d03      	ldr	r5, [sp, #12]
 800da4c:	eba6 040a 	sub.w	r4, r6, sl
 800da50:	42a5      	cmp	r5, r4
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	d133      	bne.n	800dac0 <_dtoa_r+0x6e0>
 800da58:	f7f2 fc30 	bl	80002bc <__adddf3>
 800da5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da60:	4604      	mov	r4, r0
 800da62:	460d      	mov	r5, r1
 800da64:	f7f3 f870 	bl	8000b48 <__aeabi_dcmpgt>
 800da68:	b9c0      	cbnz	r0, 800da9c <_dtoa_r+0x6bc>
 800da6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da6e:	4620      	mov	r0, r4
 800da70:	4629      	mov	r1, r5
 800da72:	f7f3 f841 	bl	8000af8 <__aeabi_dcmpeq>
 800da76:	b110      	cbz	r0, 800da7e <_dtoa_r+0x69e>
 800da78:	f018 0f01 	tst.w	r8, #1
 800da7c:	d10e      	bne.n	800da9c <_dtoa_r+0x6bc>
 800da7e:	9902      	ldr	r1, [sp, #8]
 800da80:	4648      	mov	r0, r9
 800da82:	f000 ff55 	bl	800e930 <_Bfree>
 800da86:	2300      	movs	r3, #0
 800da88:	7033      	strb	r3, [r6, #0]
 800da8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da8c:	3701      	adds	r7, #1
 800da8e:	601f      	str	r7, [r3, #0]
 800da90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da92:	2b00      	cmp	r3, #0
 800da94:	f000 824b 	beq.w	800df2e <_dtoa_r+0xb4e>
 800da98:	601e      	str	r6, [r3, #0]
 800da9a:	e248      	b.n	800df2e <_dtoa_r+0xb4e>
 800da9c:	46b8      	mov	r8, r7
 800da9e:	4633      	mov	r3, r6
 800daa0:	461e      	mov	r6, r3
 800daa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daa6:	2a39      	cmp	r2, #57	@ 0x39
 800daa8:	d106      	bne.n	800dab8 <_dtoa_r+0x6d8>
 800daaa:	459a      	cmp	sl, r3
 800daac:	d1f8      	bne.n	800daa0 <_dtoa_r+0x6c0>
 800daae:	2230      	movs	r2, #48	@ 0x30
 800dab0:	f108 0801 	add.w	r8, r8, #1
 800dab4:	f88a 2000 	strb.w	r2, [sl]
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	3201      	adds	r2, #1
 800dabc:	701a      	strb	r2, [r3, #0]
 800dabe:	e7a0      	b.n	800da02 <_dtoa_r+0x622>
 800dac0:	4b6f      	ldr	r3, [pc, #444]	@ (800dc80 <_dtoa_r+0x8a0>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	f7f2 fdb0 	bl	8000628 <__aeabi_dmul>
 800dac8:	2200      	movs	r2, #0
 800daca:	2300      	movs	r3, #0
 800dacc:	4604      	mov	r4, r0
 800dace:	460d      	mov	r5, r1
 800dad0:	f7f3 f812 	bl	8000af8 <__aeabi_dcmpeq>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d09f      	beq.n	800da18 <_dtoa_r+0x638>
 800dad8:	e7d1      	b.n	800da7e <_dtoa_r+0x69e>
 800dada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dadc:	2a00      	cmp	r2, #0
 800dade:	f000 80ea 	beq.w	800dcb6 <_dtoa_r+0x8d6>
 800dae2:	9a07      	ldr	r2, [sp, #28]
 800dae4:	2a01      	cmp	r2, #1
 800dae6:	f300 80cd 	bgt.w	800dc84 <_dtoa_r+0x8a4>
 800daea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800daec:	2a00      	cmp	r2, #0
 800daee:	f000 80c1 	beq.w	800dc74 <_dtoa_r+0x894>
 800daf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800daf6:	9c08      	ldr	r4, [sp, #32]
 800daf8:	9e00      	ldr	r6, [sp, #0]
 800dafa:	9a00      	ldr	r2, [sp, #0]
 800dafc:	441a      	add	r2, r3
 800dafe:	9200      	str	r2, [sp, #0]
 800db00:	9a06      	ldr	r2, [sp, #24]
 800db02:	2101      	movs	r1, #1
 800db04:	441a      	add	r2, r3
 800db06:	4648      	mov	r0, r9
 800db08:	9206      	str	r2, [sp, #24]
 800db0a:	f001 f80f 	bl	800eb2c <__i2b>
 800db0e:	4605      	mov	r5, r0
 800db10:	b166      	cbz	r6, 800db2c <_dtoa_r+0x74c>
 800db12:	9b06      	ldr	r3, [sp, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	dd09      	ble.n	800db2c <_dtoa_r+0x74c>
 800db18:	42b3      	cmp	r3, r6
 800db1a:	9a00      	ldr	r2, [sp, #0]
 800db1c:	bfa8      	it	ge
 800db1e:	4633      	movge	r3, r6
 800db20:	1ad2      	subs	r2, r2, r3
 800db22:	9200      	str	r2, [sp, #0]
 800db24:	9a06      	ldr	r2, [sp, #24]
 800db26:	1af6      	subs	r6, r6, r3
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	9306      	str	r3, [sp, #24]
 800db2c:	9b08      	ldr	r3, [sp, #32]
 800db2e:	b30b      	cbz	r3, 800db74 <_dtoa_r+0x794>
 800db30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 80c6 	beq.w	800dcc4 <_dtoa_r+0x8e4>
 800db38:	2c00      	cmp	r4, #0
 800db3a:	f000 80c0 	beq.w	800dcbe <_dtoa_r+0x8de>
 800db3e:	4629      	mov	r1, r5
 800db40:	4622      	mov	r2, r4
 800db42:	4648      	mov	r0, r9
 800db44:	f001 f8aa 	bl	800ec9c <__pow5mult>
 800db48:	9a02      	ldr	r2, [sp, #8]
 800db4a:	4601      	mov	r1, r0
 800db4c:	4605      	mov	r5, r0
 800db4e:	4648      	mov	r0, r9
 800db50:	f001 f802 	bl	800eb58 <__multiply>
 800db54:	9902      	ldr	r1, [sp, #8]
 800db56:	4680      	mov	r8, r0
 800db58:	4648      	mov	r0, r9
 800db5a:	f000 fee9 	bl	800e930 <_Bfree>
 800db5e:	9b08      	ldr	r3, [sp, #32]
 800db60:	1b1b      	subs	r3, r3, r4
 800db62:	9308      	str	r3, [sp, #32]
 800db64:	f000 80b1 	beq.w	800dcca <_dtoa_r+0x8ea>
 800db68:	9a08      	ldr	r2, [sp, #32]
 800db6a:	4641      	mov	r1, r8
 800db6c:	4648      	mov	r0, r9
 800db6e:	f001 f895 	bl	800ec9c <__pow5mult>
 800db72:	9002      	str	r0, [sp, #8]
 800db74:	2101      	movs	r1, #1
 800db76:	4648      	mov	r0, r9
 800db78:	f000 ffd8 	bl	800eb2c <__i2b>
 800db7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db7e:	4604      	mov	r4, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 81d8 	beq.w	800df36 <_dtoa_r+0xb56>
 800db86:	461a      	mov	r2, r3
 800db88:	4601      	mov	r1, r0
 800db8a:	4648      	mov	r0, r9
 800db8c:	f001 f886 	bl	800ec9c <__pow5mult>
 800db90:	9b07      	ldr	r3, [sp, #28]
 800db92:	2b01      	cmp	r3, #1
 800db94:	4604      	mov	r4, r0
 800db96:	f300 809f 	bgt.w	800dcd8 <_dtoa_r+0x8f8>
 800db9a:	9b04      	ldr	r3, [sp, #16]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f040 8097 	bne.w	800dcd0 <_dtoa_r+0x8f0>
 800dba2:	9b05      	ldr	r3, [sp, #20]
 800dba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f040 8093 	bne.w	800dcd4 <_dtoa_r+0x8f4>
 800dbae:	9b05      	ldr	r3, [sp, #20]
 800dbb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dbb4:	0d1b      	lsrs	r3, r3, #20
 800dbb6:	051b      	lsls	r3, r3, #20
 800dbb8:	b133      	cbz	r3, 800dbc8 <_dtoa_r+0x7e8>
 800dbba:	9b00      	ldr	r3, [sp, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	9b06      	ldr	r3, [sp, #24]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9306      	str	r3, [sp, #24]
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	9308      	str	r3, [sp, #32]
 800dbca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f000 81b8 	beq.w	800df42 <_dtoa_r+0xb62>
 800dbd2:	6923      	ldr	r3, [r4, #16]
 800dbd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbd8:	6918      	ldr	r0, [r3, #16]
 800dbda:	f000 ff5b 	bl	800ea94 <__hi0bits>
 800dbde:	f1c0 0020 	rsb	r0, r0, #32
 800dbe2:	9b06      	ldr	r3, [sp, #24]
 800dbe4:	4418      	add	r0, r3
 800dbe6:	f010 001f 	ands.w	r0, r0, #31
 800dbea:	f000 8082 	beq.w	800dcf2 <_dtoa_r+0x912>
 800dbee:	f1c0 0320 	rsb	r3, r0, #32
 800dbf2:	2b04      	cmp	r3, #4
 800dbf4:	dd73      	ble.n	800dcde <_dtoa_r+0x8fe>
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	f1c0 001c 	rsb	r0, r0, #28
 800dbfc:	4403      	add	r3, r0
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	9b06      	ldr	r3, [sp, #24]
 800dc02:	4403      	add	r3, r0
 800dc04:	4406      	add	r6, r0
 800dc06:	9306      	str	r3, [sp, #24]
 800dc08:	9b00      	ldr	r3, [sp, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	dd05      	ble.n	800dc1a <_dtoa_r+0x83a>
 800dc0e:	9902      	ldr	r1, [sp, #8]
 800dc10:	461a      	mov	r2, r3
 800dc12:	4648      	mov	r0, r9
 800dc14:	f001 f89c 	bl	800ed50 <__lshift>
 800dc18:	9002      	str	r0, [sp, #8]
 800dc1a:	9b06      	ldr	r3, [sp, #24]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	dd05      	ble.n	800dc2c <_dtoa_r+0x84c>
 800dc20:	4621      	mov	r1, r4
 800dc22:	461a      	mov	r2, r3
 800dc24:	4648      	mov	r0, r9
 800dc26:	f001 f893 	bl	800ed50 <__lshift>
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d061      	beq.n	800dcf6 <_dtoa_r+0x916>
 800dc32:	9802      	ldr	r0, [sp, #8]
 800dc34:	4621      	mov	r1, r4
 800dc36:	f001 f8f7 	bl	800ee28 <__mcmp>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	da5b      	bge.n	800dcf6 <_dtoa_r+0x916>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	9902      	ldr	r1, [sp, #8]
 800dc42:	220a      	movs	r2, #10
 800dc44:	4648      	mov	r0, r9
 800dc46:	f000 fe95 	bl	800e974 <__multadd>
 800dc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc4c:	9002      	str	r0, [sp, #8]
 800dc4e:	f107 38ff 	add.w	r8, r7, #4294967295
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 8177 	beq.w	800df46 <_dtoa_r+0xb66>
 800dc58:	4629      	mov	r1, r5
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	220a      	movs	r2, #10
 800dc5e:	4648      	mov	r0, r9
 800dc60:	f000 fe88 	bl	800e974 <__multadd>
 800dc64:	f1bb 0f00 	cmp.w	fp, #0
 800dc68:	4605      	mov	r5, r0
 800dc6a:	dc6f      	bgt.n	800dd4c <_dtoa_r+0x96c>
 800dc6c:	9b07      	ldr	r3, [sp, #28]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	dc49      	bgt.n	800dd06 <_dtoa_r+0x926>
 800dc72:	e06b      	b.n	800dd4c <_dtoa_r+0x96c>
 800dc74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dc76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc7a:	e73c      	b.n	800daf6 <_dtoa_r+0x716>
 800dc7c:	3fe00000 	.word	0x3fe00000
 800dc80:	40240000 	.word	0x40240000
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	1e5c      	subs	r4, r3, #1
 800dc88:	9b08      	ldr	r3, [sp, #32]
 800dc8a:	42a3      	cmp	r3, r4
 800dc8c:	db09      	blt.n	800dca2 <_dtoa_r+0x8c2>
 800dc8e:	1b1c      	subs	r4, r3, r4
 800dc90:	9b03      	ldr	r3, [sp, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f6bf af30 	bge.w	800daf8 <_dtoa_r+0x718>
 800dc98:	9b00      	ldr	r3, [sp, #0]
 800dc9a:	9a03      	ldr	r2, [sp, #12]
 800dc9c:	1a9e      	subs	r6, r3, r2
 800dc9e:	2300      	movs	r3, #0
 800dca0:	e72b      	b.n	800dafa <_dtoa_r+0x71a>
 800dca2:	9b08      	ldr	r3, [sp, #32]
 800dca4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dca6:	9408      	str	r4, [sp, #32]
 800dca8:	1ae3      	subs	r3, r4, r3
 800dcaa:	441a      	add	r2, r3
 800dcac:	9e00      	ldr	r6, [sp, #0]
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	920d      	str	r2, [sp, #52]	@ 0x34
 800dcb2:	2400      	movs	r4, #0
 800dcb4:	e721      	b.n	800dafa <_dtoa_r+0x71a>
 800dcb6:	9c08      	ldr	r4, [sp, #32]
 800dcb8:	9e00      	ldr	r6, [sp, #0]
 800dcba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dcbc:	e728      	b.n	800db10 <_dtoa_r+0x730>
 800dcbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dcc2:	e751      	b.n	800db68 <_dtoa_r+0x788>
 800dcc4:	9a08      	ldr	r2, [sp, #32]
 800dcc6:	9902      	ldr	r1, [sp, #8]
 800dcc8:	e750      	b.n	800db6c <_dtoa_r+0x78c>
 800dcca:	f8cd 8008 	str.w	r8, [sp, #8]
 800dcce:	e751      	b.n	800db74 <_dtoa_r+0x794>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e779      	b.n	800dbc8 <_dtoa_r+0x7e8>
 800dcd4:	9b04      	ldr	r3, [sp, #16]
 800dcd6:	e777      	b.n	800dbc8 <_dtoa_r+0x7e8>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9308      	str	r3, [sp, #32]
 800dcdc:	e779      	b.n	800dbd2 <_dtoa_r+0x7f2>
 800dcde:	d093      	beq.n	800dc08 <_dtoa_r+0x828>
 800dce0:	9a00      	ldr	r2, [sp, #0]
 800dce2:	331c      	adds	r3, #28
 800dce4:	441a      	add	r2, r3
 800dce6:	9200      	str	r2, [sp, #0]
 800dce8:	9a06      	ldr	r2, [sp, #24]
 800dcea:	441a      	add	r2, r3
 800dcec:	441e      	add	r6, r3
 800dcee:	9206      	str	r2, [sp, #24]
 800dcf0:	e78a      	b.n	800dc08 <_dtoa_r+0x828>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	e7f4      	b.n	800dce0 <_dtoa_r+0x900>
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	46b8      	mov	r8, r7
 800dcfc:	dc20      	bgt.n	800dd40 <_dtoa_r+0x960>
 800dcfe:	469b      	mov	fp, r3
 800dd00:	9b07      	ldr	r3, [sp, #28]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	dd1e      	ble.n	800dd44 <_dtoa_r+0x964>
 800dd06:	f1bb 0f00 	cmp.w	fp, #0
 800dd0a:	f47f adb1 	bne.w	800d870 <_dtoa_r+0x490>
 800dd0e:	4621      	mov	r1, r4
 800dd10:	465b      	mov	r3, fp
 800dd12:	2205      	movs	r2, #5
 800dd14:	4648      	mov	r0, r9
 800dd16:	f000 fe2d 	bl	800e974 <__multadd>
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	9802      	ldr	r0, [sp, #8]
 800dd20:	f001 f882 	bl	800ee28 <__mcmp>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	f77f ada3 	ble.w	800d870 <_dtoa_r+0x490>
 800dd2a:	4656      	mov	r6, sl
 800dd2c:	2331      	movs	r3, #49	@ 0x31
 800dd2e:	f806 3b01 	strb.w	r3, [r6], #1
 800dd32:	f108 0801 	add.w	r8, r8, #1
 800dd36:	e59f      	b.n	800d878 <_dtoa_r+0x498>
 800dd38:	9c03      	ldr	r4, [sp, #12]
 800dd3a:	46b8      	mov	r8, r7
 800dd3c:	4625      	mov	r5, r4
 800dd3e:	e7f4      	b.n	800dd2a <_dtoa_r+0x94a>
 800dd40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 8101 	beq.w	800df4e <_dtoa_r+0xb6e>
 800dd4c:	2e00      	cmp	r6, #0
 800dd4e:	dd05      	ble.n	800dd5c <_dtoa_r+0x97c>
 800dd50:	4629      	mov	r1, r5
 800dd52:	4632      	mov	r2, r6
 800dd54:	4648      	mov	r0, r9
 800dd56:	f000 fffb 	bl	800ed50 <__lshift>
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	9b08      	ldr	r3, [sp, #32]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d05c      	beq.n	800de1c <_dtoa_r+0xa3c>
 800dd62:	6869      	ldr	r1, [r5, #4]
 800dd64:	4648      	mov	r0, r9
 800dd66:	f000 fda3 	bl	800e8b0 <_Balloc>
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	b928      	cbnz	r0, 800dd7a <_dtoa_r+0x99a>
 800dd6e:	4b82      	ldr	r3, [pc, #520]	@ (800df78 <_dtoa_r+0xb98>)
 800dd70:	4602      	mov	r2, r0
 800dd72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd76:	f7ff bb4a 	b.w	800d40e <_dtoa_r+0x2e>
 800dd7a:	692a      	ldr	r2, [r5, #16]
 800dd7c:	3202      	adds	r2, #2
 800dd7e:	0092      	lsls	r2, r2, #2
 800dd80:	f105 010c 	add.w	r1, r5, #12
 800dd84:	300c      	adds	r0, #12
 800dd86:	f7ff fa64 	bl	800d252 <memcpy>
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4648      	mov	r0, r9
 800dd90:	f000 ffde 	bl	800ed50 <__lshift>
 800dd94:	f10a 0301 	add.w	r3, sl, #1
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	eb0a 030b 	add.w	r3, sl, fp
 800dd9e:	9308      	str	r3, [sp, #32]
 800dda0:	9b04      	ldr	r3, [sp, #16]
 800dda2:	f003 0301 	and.w	r3, r3, #1
 800dda6:	462f      	mov	r7, r5
 800dda8:	9306      	str	r3, [sp, #24]
 800ddaa:	4605      	mov	r5, r0
 800ddac:	9b00      	ldr	r3, [sp, #0]
 800ddae:	9802      	ldr	r0, [sp, #8]
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	f103 3bff 	add.w	fp, r3, #4294967295
 800ddb6:	f7ff fa89 	bl	800d2cc <quorem>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	3330      	adds	r3, #48	@ 0x30
 800ddbe:	9003      	str	r0, [sp, #12]
 800ddc0:	4639      	mov	r1, r7
 800ddc2:	9802      	ldr	r0, [sp, #8]
 800ddc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddc6:	f001 f82f 	bl	800ee28 <__mcmp>
 800ddca:	462a      	mov	r2, r5
 800ddcc:	9004      	str	r0, [sp, #16]
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4648      	mov	r0, r9
 800ddd2:	f001 f845 	bl	800ee60 <__mdiff>
 800ddd6:	68c2      	ldr	r2, [r0, #12]
 800ddd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddda:	4606      	mov	r6, r0
 800dddc:	bb02      	cbnz	r2, 800de20 <_dtoa_r+0xa40>
 800ddde:	4601      	mov	r1, r0
 800dde0:	9802      	ldr	r0, [sp, #8]
 800dde2:	f001 f821 	bl	800ee28 <__mcmp>
 800dde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde8:	4602      	mov	r2, r0
 800ddea:	4631      	mov	r1, r6
 800ddec:	4648      	mov	r0, r9
 800ddee:	920c      	str	r2, [sp, #48]	@ 0x30
 800ddf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddf2:	f000 fd9d 	bl	800e930 <_Bfree>
 800ddf6:	9b07      	ldr	r3, [sp, #28]
 800ddf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ddfa:	9e00      	ldr	r6, [sp, #0]
 800ddfc:	ea42 0103 	orr.w	r1, r2, r3
 800de00:	9b06      	ldr	r3, [sp, #24]
 800de02:	4319      	orrs	r1, r3
 800de04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de06:	d10d      	bne.n	800de24 <_dtoa_r+0xa44>
 800de08:	2b39      	cmp	r3, #57	@ 0x39
 800de0a:	d027      	beq.n	800de5c <_dtoa_r+0xa7c>
 800de0c:	9a04      	ldr	r2, [sp, #16]
 800de0e:	2a00      	cmp	r2, #0
 800de10:	dd01      	ble.n	800de16 <_dtoa_r+0xa36>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	3331      	adds	r3, #49	@ 0x31
 800de16:	f88b 3000 	strb.w	r3, [fp]
 800de1a:	e52e      	b.n	800d87a <_dtoa_r+0x49a>
 800de1c:	4628      	mov	r0, r5
 800de1e:	e7b9      	b.n	800dd94 <_dtoa_r+0x9b4>
 800de20:	2201      	movs	r2, #1
 800de22:	e7e2      	b.n	800ddea <_dtoa_r+0xa0a>
 800de24:	9904      	ldr	r1, [sp, #16]
 800de26:	2900      	cmp	r1, #0
 800de28:	db04      	blt.n	800de34 <_dtoa_r+0xa54>
 800de2a:	9807      	ldr	r0, [sp, #28]
 800de2c:	4301      	orrs	r1, r0
 800de2e:	9806      	ldr	r0, [sp, #24]
 800de30:	4301      	orrs	r1, r0
 800de32:	d120      	bne.n	800de76 <_dtoa_r+0xa96>
 800de34:	2a00      	cmp	r2, #0
 800de36:	ddee      	ble.n	800de16 <_dtoa_r+0xa36>
 800de38:	9902      	ldr	r1, [sp, #8]
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	2201      	movs	r2, #1
 800de3e:	4648      	mov	r0, r9
 800de40:	f000 ff86 	bl	800ed50 <__lshift>
 800de44:	4621      	mov	r1, r4
 800de46:	9002      	str	r0, [sp, #8]
 800de48:	f000 ffee 	bl	800ee28 <__mcmp>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	9b00      	ldr	r3, [sp, #0]
 800de50:	dc02      	bgt.n	800de58 <_dtoa_r+0xa78>
 800de52:	d1e0      	bne.n	800de16 <_dtoa_r+0xa36>
 800de54:	07da      	lsls	r2, r3, #31
 800de56:	d5de      	bpl.n	800de16 <_dtoa_r+0xa36>
 800de58:	2b39      	cmp	r3, #57	@ 0x39
 800de5a:	d1da      	bne.n	800de12 <_dtoa_r+0xa32>
 800de5c:	2339      	movs	r3, #57	@ 0x39
 800de5e:	f88b 3000 	strb.w	r3, [fp]
 800de62:	4633      	mov	r3, r6
 800de64:	461e      	mov	r6, r3
 800de66:	3b01      	subs	r3, #1
 800de68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de6c:	2a39      	cmp	r2, #57	@ 0x39
 800de6e:	d04e      	beq.n	800df0e <_dtoa_r+0xb2e>
 800de70:	3201      	adds	r2, #1
 800de72:	701a      	strb	r2, [r3, #0]
 800de74:	e501      	b.n	800d87a <_dtoa_r+0x49a>
 800de76:	2a00      	cmp	r2, #0
 800de78:	dd03      	ble.n	800de82 <_dtoa_r+0xaa2>
 800de7a:	2b39      	cmp	r3, #57	@ 0x39
 800de7c:	d0ee      	beq.n	800de5c <_dtoa_r+0xa7c>
 800de7e:	3301      	adds	r3, #1
 800de80:	e7c9      	b.n	800de16 <_dtoa_r+0xa36>
 800de82:	9a00      	ldr	r2, [sp, #0]
 800de84:	9908      	ldr	r1, [sp, #32]
 800de86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800de8a:	428a      	cmp	r2, r1
 800de8c:	d028      	beq.n	800dee0 <_dtoa_r+0xb00>
 800de8e:	9902      	ldr	r1, [sp, #8]
 800de90:	2300      	movs	r3, #0
 800de92:	220a      	movs	r2, #10
 800de94:	4648      	mov	r0, r9
 800de96:	f000 fd6d 	bl	800e974 <__multadd>
 800de9a:	42af      	cmp	r7, r5
 800de9c:	9002      	str	r0, [sp, #8]
 800de9e:	f04f 0300 	mov.w	r3, #0
 800dea2:	f04f 020a 	mov.w	r2, #10
 800dea6:	4639      	mov	r1, r7
 800dea8:	4648      	mov	r0, r9
 800deaa:	d107      	bne.n	800debc <_dtoa_r+0xadc>
 800deac:	f000 fd62 	bl	800e974 <__multadd>
 800deb0:	4607      	mov	r7, r0
 800deb2:	4605      	mov	r5, r0
 800deb4:	9b00      	ldr	r3, [sp, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	e777      	b.n	800ddac <_dtoa_r+0x9cc>
 800debc:	f000 fd5a 	bl	800e974 <__multadd>
 800dec0:	4629      	mov	r1, r5
 800dec2:	4607      	mov	r7, r0
 800dec4:	2300      	movs	r3, #0
 800dec6:	220a      	movs	r2, #10
 800dec8:	4648      	mov	r0, r9
 800deca:	f000 fd53 	bl	800e974 <__multadd>
 800dece:	4605      	mov	r5, r0
 800ded0:	e7f0      	b.n	800deb4 <_dtoa_r+0xad4>
 800ded2:	f1bb 0f00 	cmp.w	fp, #0
 800ded6:	bfcc      	ite	gt
 800ded8:	465e      	movgt	r6, fp
 800deda:	2601      	movle	r6, #1
 800dedc:	4456      	add	r6, sl
 800dede:	2700      	movs	r7, #0
 800dee0:	9902      	ldr	r1, [sp, #8]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	2201      	movs	r2, #1
 800dee6:	4648      	mov	r0, r9
 800dee8:	f000 ff32 	bl	800ed50 <__lshift>
 800deec:	4621      	mov	r1, r4
 800deee:	9002      	str	r0, [sp, #8]
 800def0:	f000 ff9a 	bl	800ee28 <__mcmp>
 800def4:	2800      	cmp	r0, #0
 800def6:	dcb4      	bgt.n	800de62 <_dtoa_r+0xa82>
 800def8:	d102      	bne.n	800df00 <_dtoa_r+0xb20>
 800defa:	9b00      	ldr	r3, [sp, #0]
 800defc:	07db      	lsls	r3, r3, #31
 800defe:	d4b0      	bmi.n	800de62 <_dtoa_r+0xa82>
 800df00:	4633      	mov	r3, r6
 800df02:	461e      	mov	r6, r3
 800df04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df08:	2a30      	cmp	r2, #48	@ 0x30
 800df0a:	d0fa      	beq.n	800df02 <_dtoa_r+0xb22>
 800df0c:	e4b5      	b.n	800d87a <_dtoa_r+0x49a>
 800df0e:	459a      	cmp	sl, r3
 800df10:	d1a8      	bne.n	800de64 <_dtoa_r+0xa84>
 800df12:	2331      	movs	r3, #49	@ 0x31
 800df14:	f108 0801 	add.w	r8, r8, #1
 800df18:	f88a 3000 	strb.w	r3, [sl]
 800df1c:	e4ad      	b.n	800d87a <_dtoa_r+0x49a>
 800df1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800df7c <_dtoa_r+0xb9c>
 800df24:	b11b      	cbz	r3, 800df2e <_dtoa_r+0xb4e>
 800df26:	f10a 0308 	add.w	r3, sl, #8
 800df2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	4650      	mov	r0, sl
 800df30:	b017      	add	sp, #92	@ 0x5c
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df36:	9b07      	ldr	r3, [sp, #28]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	f77f ae2e 	ble.w	800db9a <_dtoa_r+0x7ba>
 800df3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df40:	9308      	str	r3, [sp, #32]
 800df42:	2001      	movs	r0, #1
 800df44:	e64d      	b.n	800dbe2 <_dtoa_r+0x802>
 800df46:	f1bb 0f00 	cmp.w	fp, #0
 800df4a:	f77f aed9 	ble.w	800dd00 <_dtoa_r+0x920>
 800df4e:	4656      	mov	r6, sl
 800df50:	9802      	ldr	r0, [sp, #8]
 800df52:	4621      	mov	r1, r4
 800df54:	f7ff f9ba 	bl	800d2cc <quorem>
 800df58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800df5c:	f806 3b01 	strb.w	r3, [r6], #1
 800df60:	eba6 020a 	sub.w	r2, r6, sl
 800df64:	4593      	cmp	fp, r2
 800df66:	ddb4      	ble.n	800ded2 <_dtoa_r+0xaf2>
 800df68:	9902      	ldr	r1, [sp, #8]
 800df6a:	2300      	movs	r3, #0
 800df6c:	220a      	movs	r2, #10
 800df6e:	4648      	mov	r0, r9
 800df70:	f000 fd00 	bl	800e974 <__multadd>
 800df74:	9002      	str	r0, [sp, #8]
 800df76:	e7eb      	b.n	800df50 <_dtoa_r+0xb70>
 800df78:	08011105 	.word	0x08011105
 800df7c:	080110a0 	.word	0x080110a0

0800df80 <_free_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4605      	mov	r5, r0
 800df84:	2900      	cmp	r1, #0
 800df86:	d041      	beq.n	800e00c <_free_r+0x8c>
 800df88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8c:	1f0c      	subs	r4, r1, #4
 800df8e:	2b00      	cmp	r3, #0
 800df90:	bfb8      	it	lt
 800df92:	18e4      	addlt	r4, r4, r3
 800df94:	f000 fc80 	bl	800e898 <__malloc_lock>
 800df98:	4a1d      	ldr	r2, [pc, #116]	@ (800e010 <_free_r+0x90>)
 800df9a:	6813      	ldr	r3, [r2, #0]
 800df9c:	b933      	cbnz	r3, 800dfac <_free_r+0x2c>
 800df9e:	6063      	str	r3, [r4, #4]
 800dfa0:	6014      	str	r4, [r2, #0]
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfa8:	f000 bc7c 	b.w	800e8a4 <__malloc_unlock>
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	d908      	bls.n	800dfc2 <_free_r+0x42>
 800dfb0:	6820      	ldr	r0, [r4, #0]
 800dfb2:	1821      	adds	r1, r4, r0
 800dfb4:	428b      	cmp	r3, r1
 800dfb6:	bf01      	itttt	eq
 800dfb8:	6819      	ldreq	r1, [r3, #0]
 800dfba:	685b      	ldreq	r3, [r3, #4]
 800dfbc:	1809      	addeq	r1, r1, r0
 800dfbe:	6021      	streq	r1, [r4, #0]
 800dfc0:	e7ed      	b.n	800df9e <_free_r+0x1e>
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	b10b      	cbz	r3, 800dfcc <_free_r+0x4c>
 800dfc8:	42a3      	cmp	r3, r4
 800dfca:	d9fa      	bls.n	800dfc2 <_free_r+0x42>
 800dfcc:	6811      	ldr	r1, [r2, #0]
 800dfce:	1850      	adds	r0, r2, r1
 800dfd0:	42a0      	cmp	r0, r4
 800dfd2:	d10b      	bne.n	800dfec <_free_r+0x6c>
 800dfd4:	6820      	ldr	r0, [r4, #0]
 800dfd6:	4401      	add	r1, r0
 800dfd8:	1850      	adds	r0, r2, r1
 800dfda:	4283      	cmp	r3, r0
 800dfdc:	6011      	str	r1, [r2, #0]
 800dfde:	d1e0      	bne.n	800dfa2 <_free_r+0x22>
 800dfe0:	6818      	ldr	r0, [r3, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	6053      	str	r3, [r2, #4]
 800dfe6:	4408      	add	r0, r1
 800dfe8:	6010      	str	r0, [r2, #0]
 800dfea:	e7da      	b.n	800dfa2 <_free_r+0x22>
 800dfec:	d902      	bls.n	800dff4 <_free_r+0x74>
 800dfee:	230c      	movs	r3, #12
 800dff0:	602b      	str	r3, [r5, #0]
 800dff2:	e7d6      	b.n	800dfa2 <_free_r+0x22>
 800dff4:	6820      	ldr	r0, [r4, #0]
 800dff6:	1821      	adds	r1, r4, r0
 800dff8:	428b      	cmp	r3, r1
 800dffa:	bf04      	itt	eq
 800dffc:	6819      	ldreq	r1, [r3, #0]
 800dffe:	685b      	ldreq	r3, [r3, #4]
 800e000:	6063      	str	r3, [r4, #4]
 800e002:	bf04      	itt	eq
 800e004:	1809      	addeq	r1, r1, r0
 800e006:	6021      	streq	r1, [r4, #0]
 800e008:	6054      	str	r4, [r2, #4]
 800e00a:	e7ca      	b.n	800dfa2 <_free_r+0x22>
 800e00c:	bd38      	pop	{r3, r4, r5, pc}
 800e00e:	bf00      	nop
 800e010:	20006f00 	.word	0x20006f00

0800e014 <rshift>:
 800e014:	6903      	ldr	r3, [r0, #16]
 800e016:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e01a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e01e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e022:	f100 0414 	add.w	r4, r0, #20
 800e026:	dd45      	ble.n	800e0b4 <rshift+0xa0>
 800e028:	f011 011f 	ands.w	r1, r1, #31
 800e02c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e030:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e034:	d10c      	bne.n	800e050 <rshift+0x3c>
 800e036:	f100 0710 	add.w	r7, r0, #16
 800e03a:	4629      	mov	r1, r5
 800e03c:	42b1      	cmp	r1, r6
 800e03e:	d334      	bcc.n	800e0aa <rshift+0x96>
 800e040:	1a9b      	subs	r3, r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	1eea      	subs	r2, r5, #3
 800e046:	4296      	cmp	r6, r2
 800e048:	bf38      	it	cc
 800e04a:	2300      	movcc	r3, #0
 800e04c:	4423      	add	r3, r4
 800e04e:	e015      	b.n	800e07c <rshift+0x68>
 800e050:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e054:	f1c1 0820 	rsb	r8, r1, #32
 800e058:	40cf      	lsrs	r7, r1
 800e05a:	f105 0e04 	add.w	lr, r5, #4
 800e05e:	46a1      	mov	r9, r4
 800e060:	4576      	cmp	r6, lr
 800e062:	46f4      	mov	ip, lr
 800e064:	d815      	bhi.n	800e092 <rshift+0x7e>
 800e066:	1a9a      	subs	r2, r3, r2
 800e068:	0092      	lsls	r2, r2, #2
 800e06a:	3a04      	subs	r2, #4
 800e06c:	3501      	adds	r5, #1
 800e06e:	42ae      	cmp	r6, r5
 800e070:	bf38      	it	cc
 800e072:	2200      	movcc	r2, #0
 800e074:	18a3      	adds	r3, r4, r2
 800e076:	50a7      	str	r7, [r4, r2]
 800e078:	b107      	cbz	r7, 800e07c <rshift+0x68>
 800e07a:	3304      	adds	r3, #4
 800e07c:	1b1a      	subs	r2, r3, r4
 800e07e:	42a3      	cmp	r3, r4
 800e080:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e084:	bf08      	it	eq
 800e086:	2300      	moveq	r3, #0
 800e088:	6102      	str	r2, [r0, #16]
 800e08a:	bf08      	it	eq
 800e08c:	6143      	streq	r3, [r0, #20]
 800e08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e092:	f8dc c000 	ldr.w	ip, [ip]
 800e096:	fa0c fc08 	lsl.w	ip, ip, r8
 800e09a:	ea4c 0707 	orr.w	r7, ip, r7
 800e09e:	f849 7b04 	str.w	r7, [r9], #4
 800e0a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0a6:	40cf      	lsrs	r7, r1
 800e0a8:	e7da      	b.n	800e060 <rshift+0x4c>
 800e0aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0b2:	e7c3      	b.n	800e03c <rshift+0x28>
 800e0b4:	4623      	mov	r3, r4
 800e0b6:	e7e1      	b.n	800e07c <rshift+0x68>

0800e0b8 <__hexdig_fun>:
 800e0b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e0bc:	2b09      	cmp	r3, #9
 800e0be:	d802      	bhi.n	800e0c6 <__hexdig_fun+0xe>
 800e0c0:	3820      	subs	r0, #32
 800e0c2:	b2c0      	uxtb	r0, r0
 800e0c4:	4770      	bx	lr
 800e0c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e0ca:	2b05      	cmp	r3, #5
 800e0cc:	d801      	bhi.n	800e0d2 <__hexdig_fun+0x1a>
 800e0ce:	3847      	subs	r0, #71	@ 0x47
 800e0d0:	e7f7      	b.n	800e0c2 <__hexdig_fun+0xa>
 800e0d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e0d6:	2b05      	cmp	r3, #5
 800e0d8:	d801      	bhi.n	800e0de <__hexdig_fun+0x26>
 800e0da:	3827      	subs	r0, #39	@ 0x27
 800e0dc:	e7f1      	b.n	800e0c2 <__hexdig_fun+0xa>
 800e0de:	2000      	movs	r0, #0
 800e0e0:	4770      	bx	lr
	...

0800e0e4 <__gethex>:
 800e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e8:	b085      	sub	sp, #20
 800e0ea:	468a      	mov	sl, r1
 800e0ec:	9302      	str	r3, [sp, #8]
 800e0ee:	680b      	ldr	r3, [r1, #0]
 800e0f0:	9001      	str	r0, [sp, #4]
 800e0f2:	4690      	mov	r8, r2
 800e0f4:	1c9c      	adds	r4, r3, #2
 800e0f6:	46a1      	mov	r9, r4
 800e0f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0fc:	2830      	cmp	r0, #48	@ 0x30
 800e0fe:	d0fa      	beq.n	800e0f6 <__gethex+0x12>
 800e100:	eba9 0303 	sub.w	r3, r9, r3
 800e104:	f1a3 0b02 	sub.w	fp, r3, #2
 800e108:	f7ff ffd6 	bl	800e0b8 <__hexdig_fun>
 800e10c:	4605      	mov	r5, r0
 800e10e:	2800      	cmp	r0, #0
 800e110:	d168      	bne.n	800e1e4 <__gethex+0x100>
 800e112:	49a0      	ldr	r1, [pc, #640]	@ (800e394 <__gethex+0x2b0>)
 800e114:	2201      	movs	r2, #1
 800e116:	4648      	mov	r0, r9
 800e118:	f7fe f8ca 	bl	800c2b0 <strncmp>
 800e11c:	4607      	mov	r7, r0
 800e11e:	2800      	cmp	r0, #0
 800e120:	d167      	bne.n	800e1f2 <__gethex+0x10e>
 800e122:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e126:	4626      	mov	r6, r4
 800e128:	f7ff ffc6 	bl	800e0b8 <__hexdig_fun>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d062      	beq.n	800e1f6 <__gethex+0x112>
 800e130:	4623      	mov	r3, r4
 800e132:	7818      	ldrb	r0, [r3, #0]
 800e134:	2830      	cmp	r0, #48	@ 0x30
 800e136:	4699      	mov	r9, r3
 800e138:	f103 0301 	add.w	r3, r3, #1
 800e13c:	d0f9      	beq.n	800e132 <__gethex+0x4e>
 800e13e:	f7ff ffbb 	bl	800e0b8 <__hexdig_fun>
 800e142:	fab0 f580 	clz	r5, r0
 800e146:	096d      	lsrs	r5, r5, #5
 800e148:	f04f 0b01 	mov.w	fp, #1
 800e14c:	464a      	mov	r2, r9
 800e14e:	4616      	mov	r6, r2
 800e150:	3201      	adds	r2, #1
 800e152:	7830      	ldrb	r0, [r6, #0]
 800e154:	f7ff ffb0 	bl	800e0b8 <__hexdig_fun>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1f8      	bne.n	800e14e <__gethex+0x6a>
 800e15c:	498d      	ldr	r1, [pc, #564]	@ (800e394 <__gethex+0x2b0>)
 800e15e:	2201      	movs	r2, #1
 800e160:	4630      	mov	r0, r6
 800e162:	f7fe f8a5 	bl	800c2b0 <strncmp>
 800e166:	2800      	cmp	r0, #0
 800e168:	d13f      	bne.n	800e1ea <__gethex+0x106>
 800e16a:	b944      	cbnz	r4, 800e17e <__gethex+0x9a>
 800e16c:	1c74      	adds	r4, r6, #1
 800e16e:	4622      	mov	r2, r4
 800e170:	4616      	mov	r6, r2
 800e172:	3201      	adds	r2, #1
 800e174:	7830      	ldrb	r0, [r6, #0]
 800e176:	f7ff ff9f 	bl	800e0b8 <__hexdig_fun>
 800e17a:	2800      	cmp	r0, #0
 800e17c:	d1f8      	bne.n	800e170 <__gethex+0x8c>
 800e17e:	1ba4      	subs	r4, r4, r6
 800e180:	00a7      	lsls	r7, r4, #2
 800e182:	7833      	ldrb	r3, [r6, #0]
 800e184:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e188:	2b50      	cmp	r3, #80	@ 0x50
 800e18a:	d13e      	bne.n	800e20a <__gethex+0x126>
 800e18c:	7873      	ldrb	r3, [r6, #1]
 800e18e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e190:	d033      	beq.n	800e1fa <__gethex+0x116>
 800e192:	2b2d      	cmp	r3, #45	@ 0x2d
 800e194:	d034      	beq.n	800e200 <__gethex+0x11c>
 800e196:	1c71      	adds	r1, r6, #1
 800e198:	2400      	movs	r4, #0
 800e19a:	7808      	ldrb	r0, [r1, #0]
 800e19c:	f7ff ff8c 	bl	800e0b8 <__hexdig_fun>
 800e1a0:	1e43      	subs	r3, r0, #1
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b18      	cmp	r3, #24
 800e1a6:	d830      	bhi.n	800e20a <__gethex+0x126>
 800e1a8:	f1a0 0210 	sub.w	r2, r0, #16
 800e1ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1b0:	f7ff ff82 	bl	800e0b8 <__hexdig_fun>
 800e1b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1b8:	fa5f fc8c 	uxtb.w	ip, ip
 800e1bc:	f1bc 0f18 	cmp.w	ip, #24
 800e1c0:	f04f 030a 	mov.w	r3, #10
 800e1c4:	d91e      	bls.n	800e204 <__gethex+0x120>
 800e1c6:	b104      	cbz	r4, 800e1ca <__gethex+0xe6>
 800e1c8:	4252      	negs	r2, r2
 800e1ca:	4417      	add	r7, r2
 800e1cc:	f8ca 1000 	str.w	r1, [sl]
 800e1d0:	b1ed      	cbz	r5, 800e20e <__gethex+0x12a>
 800e1d2:	f1bb 0f00 	cmp.w	fp, #0
 800e1d6:	bf0c      	ite	eq
 800e1d8:	2506      	moveq	r5, #6
 800e1da:	2500      	movne	r5, #0
 800e1dc:	4628      	mov	r0, r5
 800e1de:	b005      	add	sp, #20
 800e1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e4:	2500      	movs	r5, #0
 800e1e6:	462c      	mov	r4, r5
 800e1e8:	e7b0      	b.n	800e14c <__gethex+0x68>
 800e1ea:	2c00      	cmp	r4, #0
 800e1ec:	d1c7      	bne.n	800e17e <__gethex+0x9a>
 800e1ee:	4627      	mov	r7, r4
 800e1f0:	e7c7      	b.n	800e182 <__gethex+0x9e>
 800e1f2:	464e      	mov	r6, r9
 800e1f4:	462f      	mov	r7, r5
 800e1f6:	2501      	movs	r5, #1
 800e1f8:	e7c3      	b.n	800e182 <__gethex+0x9e>
 800e1fa:	2400      	movs	r4, #0
 800e1fc:	1cb1      	adds	r1, r6, #2
 800e1fe:	e7cc      	b.n	800e19a <__gethex+0xb6>
 800e200:	2401      	movs	r4, #1
 800e202:	e7fb      	b.n	800e1fc <__gethex+0x118>
 800e204:	fb03 0002 	mla	r0, r3, r2, r0
 800e208:	e7ce      	b.n	800e1a8 <__gethex+0xc4>
 800e20a:	4631      	mov	r1, r6
 800e20c:	e7de      	b.n	800e1cc <__gethex+0xe8>
 800e20e:	eba6 0309 	sub.w	r3, r6, r9
 800e212:	3b01      	subs	r3, #1
 800e214:	4629      	mov	r1, r5
 800e216:	2b07      	cmp	r3, #7
 800e218:	dc0a      	bgt.n	800e230 <__gethex+0x14c>
 800e21a:	9801      	ldr	r0, [sp, #4]
 800e21c:	f000 fb48 	bl	800e8b0 <_Balloc>
 800e220:	4604      	mov	r4, r0
 800e222:	b940      	cbnz	r0, 800e236 <__gethex+0x152>
 800e224:	4b5c      	ldr	r3, [pc, #368]	@ (800e398 <__gethex+0x2b4>)
 800e226:	4602      	mov	r2, r0
 800e228:	21e4      	movs	r1, #228	@ 0xe4
 800e22a:	485c      	ldr	r0, [pc, #368]	@ (800e39c <__gethex+0x2b8>)
 800e22c:	f7ff f828 	bl	800d280 <__assert_func>
 800e230:	3101      	adds	r1, #1
 800e232:	105b      	asrs	r3, r3, #1
 800e234:	e7ef      	b.n	800e216 <__gethex+0x132>
 800e236:	f100 0a14 	add.w	sl, r0, #20
 800e23a:	2300      	movs	r3, #0
 800e23c:	4655      	mov	r5, sl
 800e23e:	469b      	mov	fp, r3
 800e240:	45b1      	cmp	r9, r6
 800e242:	d337      	bcc.n	800e2b4 <__gethex+0x1d0>
 800e244:	f845 bb04 	str.w	fp, [r5], #4
 800e248:	eba5 050a 	sub.w	r5, r5, sl
 800e24c:	10ad      	asrs	r5, r5, #2
 800e24e:	6125      	str	r5, [r4, #16]
 800e250:	4658      	mov	r0, fp
 800e252:	f000 fc1f 	bl	800ea94 <__hi0bits>
 800e256:	016d      	lsls	r5, r5, #5
 800e258:	f8d8 6000 	ldr.w	r6, [r8]
 800e25c:	1a2d      	subs	r5, r5, r0
 800e25e:	42b5      	cmp	r5, r6
 800e260:	dd54      	ble.n	800e30c <__gethex+0x228>
 800e262:	1bad      	subs	r5, r5, r6
 800e264:	4629      	mov	r1, r5
 800e266:	4620      	mov	r0, r4
 800e268:	f000 ffab 	bl	800f1c2 <__any_on>
 800e26c:	4681      	mov	r9, r0
 800e26e:	b178      	cbz	r0, 800e290 <__gethex+0x1ac>
 800e270:	1e6b      	subs	r3, r5, #1
 800e272:	1159      	asrs	r1, r3, #5
 800e274:	f003 021f 	and.w	r2, r3, #31
 800e278:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e27c:	f04f 0901 	mov.w	r9, #1
 800e280:	fa09 f202 	lsl.w	r2, r9, r2
 800e284:	420a      	tst	r2, r1
 800e286:	d003      	beq.n	800e290 <__gethex+0x1ac>
 800e288:	454b      	cmp	r3, r9
 800e28a:	dc36      	bgt.n	800e2fa <__gethex+0x216>
 800e28c:	f04f 0902 	mov.w	r9, #2
 800e290:	4629      	mov	r1, r5
 800e292:	4620      	mov	r0, r4
 800e294:	f7ff febe 	bl	800e014 <rshift>
 800e298:	442f      	add	r7, r5
 800e29a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e29e:	42bb      	cmp	r3, r7
 800e2a0:	da42      	bge.n	800e328 <__gethex+0x244>
 800e2a2:	9801      	ldr	r0, [sp, #4]
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	f000 fb43 	bl	800e930 <_Bfree>
 800e2aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	6013      	str	r3, [r2, #0]
 800e2b0:	25a3      	movs	r5, #163	@ 0xa3
 800e2b2:	e793      	b.n	800e1dc <__gethex+0xf8>
 800e2b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e2b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800e2ba:	d012      	beq.n	800e2e2 <__gethex+0x1fe>
 800e2bc:	2b20      	cmp	r3, #32
 800e2be:	d104      	bne.n	800e2ca <__gethex+0x1e6>
 800e2c0:	f845 bb04 	str.w	fp, [r5], #4
 800e2c4:	f04f 0b00 	mov.w	fp, #0
 800e2c8:	465b      	mov	r3, fp
 800e2ca:	7830      	ldrb	r0, [r6, #0]
 800e2cc:	9303      	str	r3, [sp, #12]
 800e2ce:	f7ff fef3 	bl	800e0b8 <__hexdig_fun>
 800e2d2:	9b03      	ldr	r3, [sp, #12]
 800e2d4:	f000 000f 	and.w	r0, r0, #15
 800e2d8:	4098      	lsls	r0, r3
 800e2da:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2de:	3304      	adds	r3, #4
 800e2e0:	e7ae      	b.n	800e240 <__gethex+0x15c>
 800e2e2:	45b1      	cmp	r9, r6
 800e2e4:	d8ea      	bhi.n	800e2bc <__gethex+0x1d8>
 800e2e6:	492b      	ldr	r1, [pc, #172]	@ (800e394 <__gethex+0x2b0>)
 800e2e8:	9303      	str	r3, [sp, #12]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	f7fd ffdf 	bl	800c2b0 <strncmp>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d1e1      	bne.n	800e2bc <__gethex+0x1d8>
 800e2f8:	e7a2      	b.n	800e240 <__gethex+0x15c>
 800e2fa:	1ea9      	subs	r1, r5, #2
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f000 ff60 	bl	800f1c2 <__any_on>
 800e302:	2800      	cmp	r0, #0
 800e304:	d0c2      	beq.n	800e28c <__gethex+0x1a8>
 800e306:	f04f 0903 	mov.w	r9, #3
 800e30a:	e7c1      	b.n	800e290 <__gethex+0x1ac>
 800e30c:	da09      	bge.n	800e322 <__gethex+0x23e>
 800e30e:	1b75      	subs	r5, r6, r5
 800e310:	4621      	mov	r1, r4
 800e312:	9801      	ldr	r0, [sp, #4]
 800e314:	462a      	mov	r2, r5
 800e316:	f000 fd1b 	bl	800ed50 <__lshift>
 800e31a:	1b7f      	subs	r7, r7, r5
 800e31c:	4604      	mov	r4, r0
 800e31e:	f100 0a14 	add.w	sl, r0, #20
 800e322:	f04f 0900 	mov.w	r9, #0
 800e326:	e7b8      	b.n	800e29a <__gethex+0x1b6>
 800e328:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e32c:	42bd      	cmp	r5, r7
 800e32e:	dd6f      	ble.n	800e410 <__gethex+0x32c>
 800e330:	1bed      	subs	r5, r5, r7
 800e332:	42ae      	cmp	r6, r5
 800e334:	dc34      	bgt.n	800e3a0 <__gethex+0x2bc>
 800e336:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d022      	beq.n	800e384 <__gethex+0x2a0>
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d024      	beq.n	800e38c <__gethex+0x2a8>
 800e342:	2b01      	cmp	r3, #1
 800e344:	d115      	bne.n	800e372 <__gethex+0x28e>
 800e346:	42ae      	cmp	r6, r5
 800e348:	d113      	bne.n	800e372 <__gethex+0x28e>
 800e34a:	2e01      	cmp	r6, #1
 800e34c:	d10b      	bne.n	800e366 <__gethex+0x282>
 800e34e:	9a02      	ldr	r2, [sp, #8]
 800e350:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e354:	6013      	str	r3, [r2, #0]
 800e356:	2301      	movs	r3, #1
 800e358:	6123      	str	r3, [r4, #16]
 800e35a:	f8ca 3000 	str.w	r3, [sl]
 800e35e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e360:	2562      	movs	r5, #98	@ 0x62
 800e362:	601c      	str	r4, [r3, #0]
 800e364:	e73a      	b.n	800e1dc <__gethex+0xf8>
 800e366:	1e71      	subs	r1, r6, #1
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 ff2a 	bl	800f1c2 <__any_on>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d1ed      	bne.n	800e34e <__gethex+0x26a>
 800e372:	9801      	ldr	r0, [sp, #4]
 800e374:	4621      	mov	r1, r4
 800e376:	f000 fadb 	bl	800e930 <_Bfree>
 800e37a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e37c:	2300      	movs	r3, #0
 800e37e:	6013      	str	r3, [r2, #0]
 800e380:	2550      	movs	r5, #80	@ 0x50
 800e382:	e72b      	b.n	800e1dc <__gethex+0xf8>
 800e384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1f3      	bne.n	800e372 <__gethex+0x28e>
 800e38a:	e7e0      	b.n	800e34e <__gethex+0x26a>
 800e38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1dd      	bne.n	800e34e <__gethex+0x26a>
 800e392:	e7ee      	b.n	800e372 <__gethex+0x28e>
 800e394:	08010f10 	.word	0x08010f10
 800e398:	08011105 	.word	0x08011105
 800e39c:	08011116 	.word	0x08011116
 800e3a0:	1e6f      	subs	r7, r5, #1
 800e3a2:	f1b9 0f00 	cmp.w	r9, #0
 800e3a6:	d130      	bne.n	800e40a <__gethex+0x326>
 800e3a8:	b127      	cbz	r7, 800e3b4 <__gethex+0x2d0>
 800e3aa:	4639      	mov	r1, r7
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f000 ff08 	bl	800f1c2 <__any_on>
 800e3b2:	4681      	mov	r9, r0
 800e3b4:	117a      	asrs	r2, r7, #5
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e3bc:	f007 071f 	and.w	r7, r7, #31
 800e3c0:	40bb      	lsls	r3, r7
 800e3c2:	4213      	tst	r3, r2
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	bf18      	it	ne
 800e3ca:	f049 0902 	orrne.w	r9, r9, #2
 800e3ce:	f7ff fe21 	bl	800e014 <rshift>
 800e3d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e3d6:	1b76      	subs	r6, r6, r5
 800e3d8:	2502      	movs	r5, #2
 800e3da:	f1b9 0f00 	cmp.w	r9, #0
 800e3de:	d047      	beq.n	800e470 <__gethex+0x38c>
 800e3e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d015      	beq.n	800e414 <__gethex+0x330>
 800e3e8:	2b03      	cmp	r3, #3
 800e3ea:	d017      	beq.n	800e41c <__gethex+0x338>
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d109      	bne.n	800e404 <__gethex+0x320>
 800e3f0:	f019 0f02 	tst.w	r9, #2
 800e3f4:	d006      	beq.n	800e404 <__gethex+0x320>
 800e3f6:	f8da 3000 	ldr.w	r3, [sl]
 800e3fa:	ea49 0903 	orr.w	r9, r9, r3
 800e3fe:	f019 0f01 	tst.w	r9, #1
 800e402:	d10e      	bne.n	800e422 <__gethex+0x33e>
 800e404:	f045 0510 	orr.w	r5, r5, #16
 800e408:	e032      	b.n	800e470 <__gethex+0x38c>
 800e40a:	f04f 0901 	mov.w	r9, #1
 800e40e:	e7d1      	b.n	800e3b4 <__gethex+0x2d0>
 800e410:	2501      	movs	r5, #1
 800e412:	e7e2      	b.n	800e3da <__gethex+0x2f6>
 800e414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e416:	f1c3 0301 	rsb	r3, r3, #1
 800e41a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0f0      	beq.n	800e404 <__gethex+0x320>
 800e422:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e426:	f104 0314 	add.w	r3, r4, #20
 800e42a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e42e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e432:	f04f 0c00 	mov.w	ip, #0
 800e436:	4618      	mov	r0, r3
 800e438:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e440:	d01b      	beq.n	800e47a <__gethex+0x396>
 800e442:	3201      	adds	r2, #1
 800e444:	6002      	str	r2, [r0, #0]
 800e446:	2d02      	cmp	r5, #2
 800e448:	f104 0314 	add.w	r3, r4, #20
 800e44c:	d13c      	bne.n	800e4c8 <__gethex+0x3e4>
 800e44e:	f8d8 2000 	ldr.w	r2, [r8]
 800e452:	3a01      	subs	r2, #1
 800e454:	42b2      	cmp	r2, r6
 800e456:	d109      	bne.n	800e46c <__gethex+0x388>
 800e458:	1171      	asrs	r1, r6, #5
 800e45a:	2201      	movs	r2, #1
 800e45c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e460:	f006 061f 	and.w	r6, r6, #31
 800e464:	fa02 f606 	lsl.w	r6, r2, r6
 800e468:	421e      	tst	r6, r3
 800e46a:	d13a      	bne.n	800e4e2 <__gethex+0x3fe>
 800e46c:	f045 0520 	orr.w	r5, r5, #32
 800e470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e472:	601c      	str	r4, [r3, #0]
 800e474:	9b02      	ldr	r3, [sp, #8]
 800e476:	601f      	str	r7, [r3, #0]
 800e478:	e6b0      	b.n	800e1dc <__gethex+0xf8>
 800e47a:	4299      	cmp	r1, r3
 800e47c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e480:	d8d9      	bhi.n	800e436 <__gethex+0x352>
 800e482:	68a3      	ldr	r3, [r4, #8]
 800e484:	459b      	cmp	fp, r3
 800e486:	db17      	blt.n	800e4b8 <__gethex+0x3d4>
 800e488:	6861      	ldr	r1, [r4, #4]
 800e48a:	9801      	ldr	r0, [sp, #4]
 800e48c:	3101      	adds	r1, #1
 800e48e:	f000 fa0f 	bl	800e8b0 <_Balloc>
 800e492:	4681      	mov	r9, r0
 800e494:	b918      	cbnz	r0, 800e49e <__gethex+0x3ba>
 800e496:	4b1a      	ldr	r3, [pc, #104]	@ (800e500 <__gethex+0x41c>)
 800e498:	4602      	mov	r2, r0
 800e49a:	2184      	movs	r1, #132	@ 0x84
 800e49c:	e6c5      	b.n	800e22a <__gethex+0x146>
 800e49e:	6922      	ldr	r2, [r4, #16]
 800e4a0:	3202      	adds	r2, #2
 800e4a2:	f104 010c 	add.w	r1, r4, #12
 800e4a6:	0092      	lsls	r2, r2, #2
 800e4a8:	300c      	adds	r0, #12
 800e4aa:	f7fe fed2 	bl	800d252 <memcpy>
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	9801      	ldr	r0, [sp, #4]
 800e4b2:	f000 fa3d 	bl	800e930 <_Bfree>
 800e4b6:	464c      	mov	r4, r9
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4c0:	6122      	str	r2, [r4, #16]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	615a      	str	r2, [r3, #20]
 800e4c6:	e7be      	b.n	800e446 <__gethex+0x362>
 800e4c8:	6922      	ldr	r2, [r4, #16]
 800e4ca:	455a      	cmp	r2, fp
 800e4cc:	dd0b      	ble.n	800e4e6 <__gethex+0x402>
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f7ff fd9f 	bl	800e014 <rshift>
 800e4d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4da:	3701      	adds	r7, #1
 800e4dc:	42bb      	cmp	r3, r7
 800e4de:	f6ff aee0 	blt.w	800e2a2 <__gethex+0x1be>
 800e4e2:	2501      	movs	r5, #1
 800e4e4:	e7c2      	b.n	800e46c <__gethex+0x388>
 800e4e6:	f016 061f 	ands.w	r6, r6, #31
 800e4ea:	d0fa      	beq.n	800e4e2 <__gethex+0x3fe>
 800e4ec:	4453      	add	r3, sl
 800e4ee:	f1c6 0620 	rsb	r6, r6, #32
 800e4f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4f6:	f000 facd 	bl	800ea94 <__hi0bits>
 800e4fa:	42b0      	cmp	r0, r6
 800e4fc:	dbe7      	blt.n	800e4ce <__gethex+0x3ea>
 800e4fe:	e7f0      	b.n	800e4e2 <__gethex+0x3fe>
 800e500:	08011105 	.word	0x08011105

0800e504 <L_shift>:
 800e504:	f1c2 0208 	rsb	r2, r2, #8
 800e508:	0092      	lsls	r2, r2, #2
 800e50a:	b570      	push	{r4, r5, r6, lr}
 800e50c:	f1c2 0620 	rsb	r6, r2, #32
 800e510:	6843      	ldr	r3, [r0, #4]
 800e512:	6804      	ldr	r4, [r0, #0]
 800e514:	fa03 f506 	lsl.w	r5, r3, r6
 800e518:	432c      	orrs	r4, r5
 800e51a:	40d3      	lsrs	r3, r2
 800e51c:	6004      	str	r4, [r0, #0]
 800e51e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e522:	4288      	cmp	r0, r1
 800e524:	d3f4      	bcc.n	800e510 <L_shift+0xc>
 800e526:	bd70      	pop	{r4, r5, r6, pc}

0800e528 <__match>:
 800e528:	b530      	push	{r4, r5, lr}
 800e52a:	6803      	ldr	r3, [r0, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e532:	b914      	cbnz	r4, 800e53a <__match+0x12>
 800e534:	6003      	str	r3, [r0, #0]
 800e536:	2001      	movs	r0, #1
 800e538:	bd30      	pop	{r4, r5, pc}
 800e53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e53e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e542:	2d19      	cmp	r5, #25
 800e544:	bf98      	it	ls
 800e546:	3220      	addls	r2, #32
 800e548:	42a2      	cmp	r2, r4
 800e54a:	d0f0      	beq.n	800e52e <__match+0x6>
 800e54c:	2000      	movs	r0, #0
 800e54e:	e7f3      	b.n	800e538 <__match+0x10>

0800e550 <__hexnan>:
 800e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	680b      	ldr	r3, [r1, #0]
 800e556:	6801      	ldr	r1, [r0, #0]
 800e558:	115e      	asrs	r6, r3, #5
 800e55a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e55e:	f013 031f 	ands.w	r3, r3, #31
 800e562:	b087      	sub	sp, #28
 800e564:	bf18      	it	ne
 800e566:	3604      	addne	r6, #4
 800e568:	2500      	movs	r5, #0
 800e56a:	1f37      	subs	r7, r6, #4
 800e56c:	4682      	mov	sl, r0
 800e56e:	4690      	mov	r8, r2
 800e570:	9301      	str	r3, [sp, #4]
 800e572:	f846 5c04 	str.w	r5, [r6, #-4]
 800e576:	46b9      	mov	r9, r7
 800e578:	463c      	mov	r4, r7
 800e57a:	9502      	str	r5, [sp, #8]
 800e57c:	46ab      	mov	fp, r5
 800e57e:	784a      	ldrb	r2, [r1, #1]
 800e580:	1c4b      	adds	r3, r1, #1
 800e582:	9303      	str	r3, [sp, #12]
 800e584:	b342      	cbz	r2, 800e5d8 <__hexnan+0x88>
 800e586:	4610      	mov	r0, r2
 800e588:	9105      	str	r1, [sp, #20]
 800e58a:	9204      	str	r2, [sp, #16]
 800e58c:	f7ff fd94 	bl	800e0b8 <__hexdig_fun>
 800e590:	2800      	cmp	r0, #0
 800e592:	d151      	bne.n	800e638 <__hexnan+0xe8>
 800e594:	9a04      	ldr	r2, [sp, #16]
 800e596:	9905      	ldr	r1, [sp, #20]
 800e598:	2a20      	cmp	r2, #32
 800e59a:	d818      	bhi.n	800e5ce <__hexnan+0x7e>
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	459b      	cmp	fp, r3
 800e5a0:	dd13      	ble.n	800e5ca <__hexnan+0x7a>
 800e5a2:	454c      	cmp	r4, r9
 800e5a4:	d206      	bcs.n	800e5b4 <__hexnan+0x64>
 800e5a6:	2d07      	cmp	r5, #7
 800e5a8:	dc04      	bgt.n	800e5b4 <__hexnan+0x64>
 800e5aa:	462a      	mov	r2, r5
 800e5ac:	4649      	mov	r1, r9
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f7ff ffa8 	bl	800e504 <L_shift>
 800e5b4:	4544      	cmp	r4, r8
 800e5b6:	d952      	bls.n	800e65e <__hexnan+0x10e>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f1a4 0904 	sub.w	r9, r4, #4
 800e5be:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5c2:	f8cd b008 	str.w	fp, [sp, #8]
 800e5c6:	464c      	mov	r4, r9
 800e5c8:	461d      	mov	r5, r3
 800e5ca:	9903      	ldr	r1, [sp, #12]
 800e5cc:	e7d7      	b.n	800e57e <__hexnan+0x2e>
 800e5ce:	2a29      	cmp	r2, #41	@ 0x29
 800e5d0:	d157      	bne.n	800e682 <__hexnan+0x132>
 800e5d2:	3102      	adds	r1, #2
 800e5d4:	f8ca 1000 	str.w	r1, [sl]
 800e5d8:	f1bb 0f00 	cmp.w	fp, #0
 800e5dc:	d051      	beq.n	800e682 <__hexnan+0x132>
 800e5de:	454c      	cmp	r4, r9
 800e5e0:	d206      	bcs.n	800e5f0 <__hexnan+0xa0>
 800e5e2:	2d07      	cmp	r5, #7
 800e5e4:	dc04      	bgt.n	800e5f0 <__hexnan+0xa0>
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f7ff ff8a 	bl	800e504 <L_shift>
 800e5f0:	4544      	cmp	r4, r8
 800e5f2:	d936      	bls.n	800e662 <__hexnan+0x112>
 800e5f4:	f1a8 0204 	sub.w	r2, r8, #4
 800e5f8:	4623      	mov	r3, r4
 800e5fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800e602:	429f      	cmp	r7, r3
 800e604:	d2f9      	bcs.n	800e5fa <__hexnan+0xaa>
 800e606:	1b3b      	subs	r3, r7, r4
 800e608:	f023 0303 	bic.w	r3, r3, #3
 800e60c:	3304      	adds	r3, #4
 800e60e:	3401      	adds	r4, #1
 800e610:	3e03      	subs	r6, #3
 800e612:	42b4      	cmp	r4, r6
 800e614:	bf88      	it	hi
 800e616:	2304      	movhi	r3, #4
 800e618:	4443      	add	r3, r8
 800e61a:	2200      	movs	r2, #0
 800e61c:	f843 2b04 	str.w	r2, [r3], #4
 800e620:	429f      	cmp	r7, r3
 800e622:	d2fb      	bcs.n	800e61c <__hexnan+0xcc>
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	b91b      	cbnz	r3, 800e630 <__hexnan+0xe0>
 800e628:	4547      	cmp	r7, r8
 800e62a:	d128      	bne.n	800e67e <__hexnan+0x12e>
 800e62c:	2301      	movs	r3, #1
 800e62e:	603b      	str	r3, [r7, #0]
 800e630:	2005      	movs	r0, #5
 800e632:	b007      	add	sp, #28
 800e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e638:	3501      	adds	r5, #1
 800e63a:	2d08      	cmp	r5, #8
 800e63c:	f10b 0b01 	add.w	fp, fp, #1
 800e640:	dd06      	ble.n	800e650 <__hexnan+0x100>
 800e642:	4544      	cmp	r4, r8
 800e644:	d9c1      	bls.n	800e5ca <__hexnan+0x7a>
 800e646:	2300      	movs	r3, #0
 800e648:	f844 3c04 	str.w	r3, [r4, #-4]
 800e64c:	2501      	movs	r5, #1
 800e64e:	3c04      	subs	r4, #4
 800e650:	6822      	ldr	r2, [r4, #0]
 800e652:	f000 000f 	and.w	r0, r0, #15
 800e656:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e65a:	6020      	str	r0, [r4, #0]
 800e65c:	e7b5      	b.n	800e5ca <__hexnan+0x7a>
 800e65e:	2508      	movs	r5, #8
 800e660:	e7b3      	b.n	800e5ca <__hexnan+0x7a>
 800e662:	9b01      	ldr	r3, [sp, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d0dd      	beq.n	800e624 <__hexnan+0xd4>
 800e668:	f1c3 0320 	rsb	r3, r3, #32
 800e66c:	f04f 32ff 	mov.w	r2, #4294967295
 800e670:	40da      	lsrs	r2, r3
 800e672:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e676:	4013      	ands	r3, r2
 800e678:	f846 3c04 	str.w	r3, [r6, #-4]
 800e67c:	e7d2      	b.n	800e624 <__hexnan+0xd4>
 800e67e:	3f04      	subs	r7, #4
 800e680:	e7d0      	b.n	800e624 <__hexnan+0xd4>
 800e682:	2004      	movs	r0, #4
 800e684:	e7d5      	b.n	800e632 <__hexnan+0xe2>
	...

0800e688 <_findenv_r>:
 800e688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800e6fc <_findenv_r+0x74>
 800e690:	4606      	mov	r6, r0
 800e692:	4689      	mov	r9, r1
 800e694:	4617      	mov	r7, r2
 800e696:	f001 fefb 	bl	8010490 <__env_lock>
 800e69a:	f8da 4000 	ldr.w	r4, [sl]
 800e69e:	b134      	cbz	r4, 800e6ae <_findenv_r+0x26>
 800e6a0:	464b      	mov	r3, r9
 800e6a2:	4698      	mov	r8, r3
 800e6a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6a8:	b13a      	cbz	r2, 800e6ba <_findenv_r+0x32>
 800e6aa:	2a3d      	cmp	r2, #61	@ 0x3d
 800e6ac:	d1f9      	bne.n	800e6a2 <_findenv_r+0x1a>
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f001 fef4 	bl	801049c <__env_unlock>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ba:	eba8 0809 	sub.w	r8, r8, r9
 800e6be:	46a3      	mov	fp, r4
 800e6c0:	f854 0b04 	ldr.w	r0, [r4], #4
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d0f2      	beq.n	800e6ae <_findenv_r+0x26>
 800e6c8:	4642      	mov	r2, r8
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	f7fd fdf0 	bl	800c2b0 <strncmp>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d1f4      	bne.n	800e6be <_findenv_r+0x36>
 800e6d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e6d8:	eb03 0508 	add.w	r5, r3, r8
 800e6dc:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e6e0:	2b3d      	cmp	r3, #61	@ 0x3d
 800e6e2:	d1ec      	bne.n	800e6be <_findenv_r+0x36>
 800e6e4:	f8da 3000 	ldr.w	r3, [sl]
 800e6e8:	ebab 0303 	sub.w	r3, fp, r3
 800e6ec:	109b      	asrs	r3, r3, #2
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	603b      	str	r3, [r7, #0]
 800e6f2:	f001 fed3 	bl	801049c <__env_unlock>
 800e6f6:	1c68      	adds	r0, r5, #1
 800e6f8:	e7dd      	b.n	800e6b6 <_findenv_r+0x2e>
 800e6fa:	bf00      	nop
 800e6fc:	20000008 	.word	0x20000008

0800e700 <_getenv_r>:
 800e700:	b507      	push	{r0, r1, r2, lr}
 800e702:	aa01      	add	r2, sp, #4
 800e704:	f7ff ffc0 	bl	800e688 <_findenv_r>
 800e708:	b003      	add	sp, #12
 800e70a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e710 <malloc>:
 800e710:	4b02      	ldr	r3, [pc, #8]	@ (800e71c <malloc+0xc>)
 800e712:	4601      	mov	r1, r0
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	f000 b82d 	b.w	800e774 <_malloc_r>
 800e71a:	bf00      	nop
 800e71c:	2000019c 	.word	0x2000019c

0800e720 <free>:
 800e720:	4b02      	ldr	r3, [pc, #8]	@ (800e72c <free+0xc>)
 800e722:	4601      	mov	r1, r0
 800e724:	6818      	ldr	r0, [r3, #0]
 800e726:	f7ff bc2b 	b.w	800df80 <_free_r>
 800e72a:	bf00      	nop
 800e72c:	2000019c 	.word	0x2000019c

0800e730 <sbrk_aligned>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	4e0f      	ldr	r6, [pc, #60]	@ (800e770 <sbrk_aligned+0x40>)
 800e734:	460c      	mov	r4, r1
 800e736:	6831      	ldr	r1, [r6, #0]
 800e738:	4605      	mov	r5, r0
 800e73a:	b911      	cbnz	r1, 800e742 <sbrk_aligned+0x12>
 800e73c:	f001 fe7c 	bl	8010438 <_sbrk_r>
 800e740:	6030      	str	r0, [r6, #0]
 800e742:	4621      	mov	r1, r4
 800e744:	4628      	mov	r0, r5
 800e746:	f001 fe77 	bl	8010438 <_sbrk_r>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	d103      	bne.n	800e756 <sbrk_aligned+0x26>
 800e74e:	f04f 34ff 	mov.w	r4, #4294967295
 800e752:	4620      	mov	r0, r4
 800e754:	bd70      	pop	{r4, r5, r6, pc}
 800e756:	1cc4      	adds	r4, r0, #3
 800e758:	f024 0403 	bic.w	r4, r4, #3
 800e75c:	42a0      	cmp	r0, r4
 800e75e:	d0f8      	beq.n	800e752 <sbrk_aligned+0x22>
 800e760:	1a21      	subs	r1, r4, r0
 800e762:	4628      	mov	r0, r5
 800e764:	f001 fe68 	bl	8010438 <_sbrk_r>
 800e768:	3001      	adds	r0, #1
 800e76a:	d1f2      	bne.n	800e752 <sbrk_aligned+0x22>
 800e76c:	e7ef      	b.n	800e74e <sbrk_aligned+0x1e>
 800e76e:	bf00      	nop
 800e770:	20006efc 	.word	0x20006efc

0800e774 <_malloc_r>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	1ccd      	adds	r5, r1, #3
 800e77a:	f025 0503 	bic.w	r5, r5, #3
 800e77e:	3508      	adds	r5, #8
 800e780:	2d0c      	cmp	r5, #12
 800e782:	bf38      	it	cc
 800e784:	250c      	movcc	r5, #12
 800e786:	2d00      	cmp	r5, #0
 800e788:	4606      	mov	r6, r0
 800e78a:	db01      	blt.n	800e790 <_malloc_r+0x1c>
 800e78c:	42a9      	cmp	r1, r5
 800e78e:	d904      	bls.n	800e79a <_malloc_r+0x26>
 800e790:	230c      	movs	r3, #12
 800e792:	6033      	str	r3, [r6, #0]
 800e794:	2000      	movs	r0, #0
 800e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e870 <_malloc_r+0xfc>
 800e79e:	f000 f87b 	bl	800e898 <__malloc_lock>
 800e7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	bb44      	cbnz	r4, 800e7fc <_malloc_r+0x88>
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff ffbf 	bl	800e730 <sbrk_aligned>
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	d158      	bne.n	800e86a <_malloc_r+0xf6>
 800e7b8:	f8d8 4000 	ldr.w	r4, [r8]
 800e7bc:	4627      	mov	r7, r4
 800e7be:	2f00      	cmp	r7, #0
 800e7c0:	d143      	bne.n	800e84a <_malloc_r+0xd6>
 800e7c2:	2c00      	cmp	r4, #0
 800e7c4:	d04b      	beq.n	800e85e <_malloc_r+0xea>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	eb04 0903 	add.w	r9, r4, r3
 800e7d0:	f001 fe32 	bl	8010438 <_sbrk_r>
 800e7d4:	4581      	cmp	r9, r0
 800e7d6:	d142      	bne.n	800e85e <_malloc_r+0xea>
 800e7d8:	6821      	ldr	r1, [r4, #0]
 800e7da:	1a6d      	subs	r5, r5, r1
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f7ff ffa6 	bl	800e730 <sbrk_aligned>
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d03a      	beq.n	800e85e <_malloc_r+0xea>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	442b      	add	r3, r5
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	bb62      	cbnz	r2, 800e850 <_malloc_r+0xdc>
 800e7f6:	f8c8 7000 	str.w	r7, [r8]
 800e7fa:	e00f      	b.n	800e81c <_malloc_r+0xa8>
 800e7fc:	6822      	ldr	r2, [r4, #0]
 800e7fe:	1b52      	subs	r2, r2, r5
 800e800:	d420      	bmi.n	800e844 <_malloc_r+0xd0>
 800e802:	2a0b      	cmp	r2, #11
 800e804:	d917      	bls.n	800e836 <_malloc_r+0xc2>
 800e806:	1961      	adds	r1, r4, r5
 800e808:	42a3      	cmp	r3, r4
 800e80a:	6025      	str	r5, [r4, #0]
 800e80c:	bf18      	it	ne
 800e80e:	6059      	strne	r1, [r3, #4]
 800e810:	6863      	ldr	r3, [r4, #4]
 800e812:	bf08      	it	eq
 800e814:	f8c8 1000 	streq.w	r1, [r8]
 800e818:	5162      	str	r2, [r4, r5]
 800e81a:	604b      	str	r3, [r1, #4]
 800e81c:	4630      	mov	r0, r6
 800e81e:	f000 f841 	bl	800e8a4 <__malloc_unlock>
 800e822:	f104 000b 	add.w	r0, r4, #11
 800e826:	1d23      	adds	r3, r4, #4
 800e828:	f020 0007 	bic.w	r0, r0, #7
 800e82c:	1ac2      	subs	r2, r0, r3
 800e82e:	bf1c      	itt	ne
 800e830:	1a1b      	subne	r3, r3, r0
 800e832:	50a3      	strne	r3, [r4, r2]
 800e834:	e7af      	b.n	800e796 <_malloc_r+0x22>
 800e836:	6862      	ldr	r2, [r4, #4]
 800e838:	42a3      	cmp	r3, r4
 800e83a:	bf0c      	ite	eq
 800e83c:	f8c8 2000 	streq.w	r2, [r8]
 800e840:	605a      	strne	r2, [r3, #4]
 800e842:	e7eb      	b.n	800e81c <_malloc_r+0xa8>
 800e844:	4623      	mov	r3, r4
 800e846:	6864      	ldr	r4, [r4, #4]
 800e848:	e7ae      	b.n	800e7a8 <_malloc_r+0x34>
 800e84a:	463c      	mov	r4, r7
 800e84c:	687f      	ldr	r7, [r7, #4]
 800e84e:	e7b6      	b.n	800e7be <_malloc_r+0x4a>
 800e850:	461a      	mov	r2, r3
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	42a3      	cmp	r3, r4
 800e856:	d1fb      	bne.n	800e850 <_malloc_r+0xdc>
 800e858:	2300      	movs	r3, #0
 800e85a:	6053      	str	r3, [r2, #4]
 800e85c:	e7de      	b.n	800e81c <_malloc_r+0xa8>
 800e85e:	230c      	movs	r3, #12
 800e860:	6033      	str	r3, [r6, #0]
 800e862:	4630      	mov	r0, r6
 800e864:	f000 f81e 	bl	800e8a4 <__malloc_unlock>
 800e868:	e794      	b.n	800e794 <_malloc_r+0x20>
 800e86a:	6005      	str	r5, [r0, #0]
 800e86c:	e7d6      	b.n	800e81c <_malloc_r+0xa8>
 800e86e:	bf00      	nop
 800e870:	20006f00 	.word	0x20006f00

0800e874 <__ascii_mbtowc>:
 800e874:	b082      	sub	sp, #8
 800e876:	b901      	cbnz	r1, 800e87a <__ascii_mbtowc+0x6>
 800e878:	a901      	add	r1, sp, #4
 800e87a:	b142      	cbz	r2, 800e88e <__ascii_mbtowc+0x1a>
 800e87c:	b14b      	cbz	r3, 800e892 <__ascii_mbtowc+0x1e>
 800e87e:	7813      	ldrb	r3, [r2, #0]
 800e880:	600b      	str	r3, [r1, #0]
 800e882:	7812      	ldrb	r2, [r2, #0]
 800e884:	1e10      	subs	r0, r2, #0
 800e886:	bf18      	it	ne
 800e888:	2001      	movne	r0, #1
 800e88a:	b002      	add	sp, #8
 800e88c:	4770      	bx	lr
 800e88e:	4610      	mov	r0, r2
 800e890:	e7fb      	b.n	800e88a <__ascii_mbtowc+0x16>
 800e892:	f06f 0001 	mvn.w	r0, #1
 800e896:	e7f8      	b.n	800e88a <__ascii_mbtowc+0x16>

0800e898 <__malloc_lock>:
 800e898:	4801      	ldr	r0, [pc, #4]	@ (800e8a0 <__malloc_lock+0x8>)
 800e89a:	f7fe bccf 	b.w	800d23c <__retarget_lock_acquire_recursive>
 800e89e:	bf00      	nop
 800e8a0:	20006efa 	.word	0x20006efa

0800e8a4 <__malloc_unlock>:
 800e8a4:	4801      	ldr	r0, [pc, #4]	@ (800e8ac <__malloc_unlock+0x8>)
 800e8a6:	f7fe bccb 	b.w	800d240 <__retarget_lock_release_recursive>
 800e8aa:	bf00      	nop
 800e8ac:	20006efa 	.word	0x20006efa

0800e8b0 <_Balloc>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	69c6      	ldr	r6, [r0, #28]
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	460d      	mov	r5, r1
 800e8b8:	b976      	cbnz	r6, 800e8d8 <_Balloc+0x28>
 800e8ba:	2010      	movs	r0, #16
 800e8bc:	f7ff ff28 	bl	800e710 <malloc>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	61e0      	str	r0, [r4, #28]
 800e8c4:	b920      	cbnz	r0, 800e8d0 <_Balloc+0x20>
 800e8c6:	4b18      	ldr	r3, [pc, #96]	@ (800e928 <_Balloc+0x78>)
 800e8c8:	4818      	ldr	r0, [pc, #96]	@ (800e92c <_Balloc+0x7c>)
 800e8ca:	216b      	movs	r1, #107	@ 0x6b
 800e8cc:	f7fe fcd8 	bl	800d280 <__assert_func>
 800e8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8d4:	6006      	str	r6, [r0, #0]
 800e8d6:	60c6      	str	r6, [r0, #12]
 800e8d8:	69e6      	ldr	r6, [r4, #28]
 800e8da:	68f3      	ldr	r3, [r6, #12]
 800e8dc:	b183      	cbz	r3, 800e900 <_Balloc+0x50>
 800e8de:	69e3      	ldr	r3, [r4, #28]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e8e6:	b9b8      	cbnz	r0, 800e918 <_Balloc+0x68>
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800e8ee:	1d72      	adds	r2, r6, #5
 800e8f0:	0092      	lsls	r2, r2, #2
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f001 fdb7 	bl	8010466 <_calloc_r>
 800e8f8:	b160      	cbz	r0, 800e914 <_Balloc+0x64>
 800e8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e8fe:	e00e      	b.n	800e91e <_Balloc+0x6e>
 800e900:	2221      	movs	r2, #33	@ 0x21
 800e902:	2104      	movs	r1, #4
 800e904:	4620      	mov	r0, r4
 800e906:	f001 fdae 	bl	8010466 <_calloc_r>
 800e90a:	69e3      	ldr	r3, [r4, #28]
 800e90c:	60f0      	str	r0, [r6, #12]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1e4      	bne.n	800e8de <_Balloc+0x2e>
 800e914:	2000      	movs	r0, #0
 800e916:	bd70      	pop	{r4, r5, r6, pc}
 800e918:	6802      	ldr	r2, [r0, #0]
 800e91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e91e:	2300      	movs	r3, #0
 800e920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e924:	e7f7      	b.n	800e916 <_Balloc+0x66>
 800e926:	bf00      	nop
 800e928:	08010f44 	.word	0x08010f44
 800e92c:	08011176 	.word	0x08011176

0800e930 <_Bfree>:
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	69c6      	ldr	r6, [r0, #28]
 800e934:	4605      	mov	r5, r0
 800e936:	460c      	mov	r4, r1
 800e938:	b976      	cbnz	r6, 800e958 <_Bfree+0x28>
 800e93a:	2010      	movs	r0, #16
 800e93c:	f7ff fee8 	bl	800e710 <malloc>
 800e940:	4602      	mov	r2, r0
 800e942:	61e8      	str	r0, [r5, #28]
 800e944:	b920      	cbnz	r0, 800e950 <_Bfree+0x20>
 800e946:	4b09      	ldr	r3, [pc, #36]	@ (800e96c <_Bfree+0x3c>)
 800e948:	4809      	ldr	r0, [pc, #36]	@ (800e970 <_Bfree+0x40>)
 800e94a:	218f      	movs	r1, #143	@ 0x8f
 800e94c:	f7fe fc98 	bl	800d280 <__assert_func>
 800e950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e954:	6006      	str	r6, [r0, #0]
 800e956:	60c6      	str	r6, [r0, #12]
 800e958:	b13c      	cbz	r4, 800e96a <_Bfree+0x3a>
 800e95a:	69eb      	ldr	r3, [r5, #28]
 800e95c:	6862      	ldr	r2, [r4, #4]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e964:	6021      	str	r1, [r4, #0]
 800e966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e96a:	bd70      	pop	{r4, r5, r6, pc}
 800e96c:	08010f44 	.word	0x08010f44
 800e970:	08011176 	.word	0x08011176

0800e974 <__multadd>:
 800e974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	690d      	ldr	r5, [r1, #16]
 800e97a:	4607      	mov	r7, r0
 800e97c:	460c      	mov	r4, r1
 800e97e:	461e      	mov	r6, r3
 800e980:	f101 0c14 	add.w	ip, r1, #20
 800e984:	2000      	movs	r0, #0
 800e986:	f8dc 3000 	ldr.w	r3, [ip]
 800e98a:	b299      	uxth	r1, r3
 800e98c:	fb02 6101 	mla	r1, r2, r1, r6
 800e990:	0c1e      	lsrs	r6, r3, #16
 800e992:	0c0b      	lsrs	r3, r1, #16
 800e994:	fb02 3306 	mla	r3, r2, r6, r3
 800e998:	b289      	uxth	r1, r1
 800e99a:	3001      	adds	r0, #1
 800e99c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e9a0:	4285      	cmp	r5, r0
 800e9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800e9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e9aa:	dcec      	bgt.n	800e986 <__multadd+0x12>
 800e9ac:	b30e      	cbz	r6, 800e9f2 <__multadd+0x7e>
 800e9ae:	68a3      	ldr	r3, [r4, #8]
 800e9b0:	42ab      	cmp	r3, r5
 800e9b2:	dc19      	bgt.n	800e9e8 <__multadd+0x74>
 800e9b4:	6861      	ldr	r1, [r4, #4]
 800e9b6:	4638      	mov	r0, r7
 800e9b8:	3101      	adds	r1, #1
 800e9ba:	f7ff ff79 	bl	800e8b0 <_Balloc>
 800e9be:	4680      	mov	r8, r0
 800e9c0:	b928      	cbnz	r0, 800e9ce <__multadd+0x5a>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e9f8 <__multadd+0x84>)
 800e9c6:	480d      	ldr	r0, [pc, #52]	@ (800e9fc <__multadd+0x88>)
 800e9c8:	21ba      	movs	r1, #186	@ 0xba
 800e9ca:	f7fe fc59 	bl	800d280 <__assert_func>
 800e9ce:	6922      	ldr	r2, [r4, #16]
 800e9d0:	3202      	adds	r2, #2
 800e9d2:	f104 010c 	add.w	r1, r4, #12
 800e9d6:	0092      	lsls	r2, r2, #2
 800e9d8:	300c      	adds	r0, #12
 800e9da:	f7fe fc3a 	bl	800d252 <memcpy>
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f7ff ffa5 	bl	800e930 <_Bfree>
 800e9e6:	4644      	mov	r4, r8
 800e9e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e9ec:	3501      	adds	r5, #1
 800e9ee:	615e      	str	r6, [r3, #20]
 800e9f0:	6125      	str	r5, [r4, #16]
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f8:	08011105 	.word	0x08011105
 800e9fc:	08011176 	.word	0x08011176

0800ea00 <__s2b>:
 800ea00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea04:	460c      	mov	r4, r1
 800ea06:	4615      	mov	r5, r2
 800ea08:	461f      	mov	r7, r3
 800ea0a:	2209      	movs	r2, #9
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	4606      	mov	r6, r0
 800ea10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea14:	2100      	movs	r1, #0
 800ea16:	2201      	movs	r2, #1
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	db09      	blt.n	800ea30 <__s2b+0x30>
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	f7ff ff47 	bl	800e8b0 <_Balloc>
 800ea22:	b940      	cbnz	r0, 800ea36 <__s2b+0x36>
 800ea24:	4602      	mov	r2, r0
 800ea26:	4b19      	ldr	r3, [pc, #100]	@ (800ea8c <__s2b+0x8c>)
 800ea28:	4819      	ldr	r0, [pc, #100]	@ (800ea90 <__s2b+0x90>)
 800ea2a:	21d3      	movs	r1, #211	@ 0xd3
 800ea2c:	f7fe fc28 	bl	800d280 <__assert_func>
 800ea30:	0052      	lsls	r2, r2, #1
 800ea32:	3101      	adds	r1, #1
 800ea34:	e7f0      	b.n	800ea18 <__s2b+0x18>
 800ea36:	9b08      	ldr	r3, [sp, #32]
 800ea38:	6143      	str	r3, [r0, #20]
 800ea3a:	2d09      	cmp	r5, #9
 800ea3c:	f04f 0301 	mov.w	r3, #1
 800ea40:	6103      	str	r3, [r0, #16]
 800ea42:	dd16      	ble.n	800ea72 <__s2b+0x72>
 800ea44:	f104 0909 	add.w	r9, r4, #9
 800ea48:	46c8      	mov	r8, r9
 800ea4a:	442c      	add	r4, r5
 800ea4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ea50:	4601      	mov	r1, r0
 800ea52:	3b30      	subs	r3, #48	@ 0x30
 800ea54:	220a      	movs	r2, #10
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7ff ff8c 	bl	800e974 <__multadd>
 800ea5c:	45a0      	cmp	r8, r4
 800ea5e:	d1f5      	bne.n	800ea4c <__s2b+0x4c>
 800ea60:	f1a5 0408 	sub.w	r4, r5, #8
 800ea64:	444c      	add	r4, r9
 800ea66:	1b2d      	subs	r5, r5, r4
 800ea68:	1963      	adds	r3, r4, r5
 800ea6a:	42bb      	cmp	r3, r7
 800ea6c:	db04      	blt.n	800ea78 <__s2b+0x78>
 800ea6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea72:	340a      	adds	r4, #10
 800ea74:	2509      	movs	r5, #9
 800ea76:	e7f6      	b.n	800ea66 <__s2b+0x66>
 800ea78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea7c:	4601      	mov	r1, r0
 800ea7e:	3b30      	subs	r3, #48	@ 0x30
 800ea80:	220a      	movs	r2, #10
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7ff ff76 	bl	800e974 <__multadd>
 800ea88:	e7ee      	b.n	800ea68 <__s2b+0x68>
 800ea8a:	bf00      	nop
 800ea8c:	08011105 	.word	0x08011105
 800ea90:	08011176 	.word	0x08011176

0800ea94 <__hi0bits>:
 800ea94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea98:	4603      	mov	r3, r0
 800ea9a:	bf36      	itet	cc
 800ea9c:	0403      	lslcc	r3, r0, #16
 800ea9e:	2000      	movcs	r0, #0
 800eaa0:	2010      	movcc	r0, #16
 800eaa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eaa6:	bf3c      	itt	cc
 800eaa8:	021b      	lslcc	r3, r3, #8
 800eaaa:	3008      	addcc	r0, #8
 800eaac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eab0:	bf3c      	itt	cc
 800eab2:	011b      	lslcc	r3, r3, #4
 800eab4:	3004      	addcc	r0, #4
 800eab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaba:	bf3c      	itt	cc
 800eabc:	009b      	lslcc	r3, r3, #2
 800eabe:	3002      	addcc	r0, #2
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	db05      	blt.n	800ead0 <__hi0bits+0x3c>
 800eac4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eac8:	f100 0001 	add.w	r0, r0, #1
 800eacc:	bf08      	it	eq
 800eace:	2020      	moveq	r0, #32
 800ead0:	4770      	bx	lr

0800ead2 <__lo0bits>:
 800ead2:	6803      	ldr	r3, [r0, #0]
 800ead4:	4602      	mov	r2, r0
 800ead6:	f013 0007 	ands.w	r0, r3, #7
 800eada:	d00b      	beq.n	800eaf4 <__lo0bits+0x22>
 800eadc:	07d9      	lsls	r1, r3, #31
 800eade:	d421      	bmi.n	800eb24 <__lo0bits+0x52>
 800eae0:	0798      	lsls	r0, r3, #30
 800eae2:	bf49      	itett	mi
 800eae4:	085b      	lsrmi	r3, r3, #1
 800eae6:	089b      	lsrpl	r3, r3, #2
 800eae8:	2001      	movmi	r0, #1
 800eaea:	6013      	strmi	r3, [r2, #0]
 800eaec:	bf5c      	itt	pl
 800eaee:	6013      	strpl	r3, [r2, #0]
 800eaf0:	2002      	movpl	r0, #2
 800eaf2:	4770      	bx	lr
 800eaf4:	b299      	uxth	r1, r3
 800eaf6:	b909      	cbnz	r1, 800eafc <__lo0bits+0x2a>
 800eaf8:	0c1b      	lsrs	r3, r3, #16
 800eafa:	2010      	movs	r0, #16
 800eafc:	b2d9      	uxtb	r1, r3
 800eafe:	b909      	cbnz	r1, 800eb04 <__lo0bits+0x32>
 800eb00:	3008      	adds	r0, #8
 800eb02:	0a1b      	lsrs	r3, r3, #8
 800eb04:	0719      	lsls	r1, r3, #28
 800eb06:	bf04      	itt	eq
 800eb08:	091b      	lsreq	r3, r3, #4
 800eb0a:	3004      	addeq	r0, #4
 800eb0c:	0799      	lsls	r1, r3, #30
 800eb0e:	bf04      	itt	eq
 800eb10:	089b      	lsreq	r3, r3, #2
 800eb12:	3002      	addeq	r0, #2
 800eb14:	07d9      	lsls	r1, r3, #31
 800eb16:	d403      	bmi.n	800eb20 <__lo0bits+0x4e>
 800eb18:	085b      	lsrs	r3, r3, #1
 800eb1a:	f100 0001 	add.w	r0, r0, #1
 800eb1e:	d003      	beq.n	800eb28 <__lo0bits+0x56>
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	4770      	bx	lr
 800eb24:	2000      	movs	r0, #0
 800eb26:	4770      	bx	lr
 800eb28:	2020      	movs	r0, #32
 800eb2a:	4770      	bx	lr

0800eb2c <__i2b>:
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	460c      	mov	r4, r1
 800eb30:	2101      	movs	r1, #1
 800eb32:	f7ff febd 	bl	800e8b0 <_Balloc>
 800eb36:	4602      	mov	r2, r0
 800eb38:	b928      	cbnz	r0, 800eb46 <__i2b+0x1a>
 800eb3a:	4b05      	ldr	r3, [pc, #20]	@ (800eb50 <__i2b+0x24>)
 800eb3c:	4805      	ldr	r0, [pc, #20]	@ (800eb54 <__i2b+0x28>)
 800eb3e:	f240 1145 	movw	r1, #325	@ 0x145
 800eb42:	f7fe fb9d 	bl	800d280 <__assert_func>
 800eb46:	2301      	movs	r3, #1
 800eb48:	6144      	str	r4, [r0, #20]
 800eb4a:	6103      	str	r3, [r0, #16]
 800eb4c:	bd10      	pop	{r4, pc}
 800eb4e:	bf00      	nop
 800eb50:	08011105 	.word	0x08011105
 800eb54:	08011176 	.word	0x08011176

0800eb58 <__multiply>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	4617      	mov	r7, r2
 800eb5e:	690a      	ldr	r2, [r1, #16]
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	bfa8      	it	ge
 800eb66:	463b      	movge	r3, r7
 800eb68:	4689      	mov	r9, r1
 800eb6a:	bfa4      	itt	ge
 800eb6c:	460f      	movge	r7, r1
 800eb6e:	4699      	movge	r9, r3
 800eb70:	693d      	ldr	r5, [r7, #16]
 800eb72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	eb05 060a 	add.w	r6, r5, sl
 800eb7e:	42b3      	cmp	r3, r6
 800eb80:	b085      	sub	sp, #20
 800eb82:	bfb8      	it	lt
 800eb84:	3101      	addlt	r1, #1
 800eb86:	f7ff fe93 	bl	800e8b0 <_Balloc>
 800eb8a:	b930      	cbnz	r0, 800eb9a <__multiply+0x42>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	4b41      	ldr	r3, [pc, #260]	@ (800ec94 <__multiply+0x13c>)
 800eb90:	4841      	ldr	r0, [pc, #260]	@ (800ec98 <__multiply+0x140>)
 800eb92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb96:	f7fe fb73 	bl	800d280 <__assert_func>
 800eb9a:	f100 0414 	add.w	r4, r0, #20
 800eb9e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eba2:	4623      	mov	r3, r4
 800eba4:	2200      	movs	r2, #0
 800eba6:	4573      	cmp	r3, lr
 800eba8:	d320      	bcc.n	800ebec <__multiply+0x94>
 800ebaa:	f107 0814 	add.w	r8, r7, #20
 800ebae:	f109 0114 	add.w	r1, r9, #20
 800ebb2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ebb6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ebba:	9302      	str	r3, [sp, #8]
 800ebbc:	1beb      	subs	r3, r5, r7
 800ebbe:	3b15      	subs	r3, #21
 800ebc0:	f023 0303 	bic.w	r3, r3, #3
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	3715      	adds	r7, #21
 800ebc8:	42bd      	cmp	r5, r7
 800ebca:	bf38      	it	cc
 800ebcc:	2304      	movcc	r3, #4
 800ebce:	9301      	str	r3, [sp, #4]
 800ebd0:	9b02      	ldr	r3, [sp, #8]
 800ebd2:	9103      	str	r1, [sp, #12]
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	d80c      	bhi.n	800ebf2 <__multiply+0x9a>
 800ebd8:	2e00      	cmp	r6, #0
 800ebda:	dd03      	ble.n	800ebe4 <__multiply+0x8c>
 800ebdc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d055      	beq.n	800ec90 <__multiply+0x138>
 800ebe4:	6106      	str	r6, [r0, #16]
 800ebe6:	b005      	add	sp, #20
 800ebe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebec:	f843 2b04 	str.w	r2, [r3], #4
 800ebf0:	e7d9      	b.n	800eba6 <__multiply+0x4e>
 800ebf2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ebf6:	f1ba 0f00 	cmp.w	sl, #0
 800ebfa:	d01f      	beq.n	800ec3c <__multiply+0xe4>
 800ebfc:	46c4      	mov	ip, r8
 800ebfe:	46a1      	mov	r9, r4
 800ec00:	2700      	movs	r7, #0
 800ec02:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ec06:	f8d9 3000 	ldr.w	r3, [r9]
 800ec0a:	fa1f fb82 	uxth.w	fp, r2
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec14:	443b      	add	r3, r7
 800ec16:	f8d9 7000 	ldr.w	r7, [r9]
 800ec1a:	0c12      	lsrs	r2, r2, #16
 800ec1c:	0c3f      	lsrs	r7, r7, #16
 800ec1e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ec22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec2c:	4565      	cmp	r5, ip
 800ec2e:	f849 3b04 	str.w	r3, [r9], #4
 800ec32:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ec36:	d8e4      	bhi.n	800ec02 <__multiply+0xaa>
 800ec38:	9b01      	ldr	r3, [sp, #4]
 800ec3a:	50e7      	str	r7, [r4, r3]
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec42:	3104      	adds	r1, #4
 800ec44:	f1b9 0f00 	cmp.w	r9, #0
 800ec48:	d020      	beq.n	800ec8c <__multiply+0x134>
 800ec4a:	6823      	ldr	r3, [r4, #0]
 800ec4c:	4647      	mov	r7, r8
 800ec4e:	46a4      	mov	ip, r4
 800ec50:	f04f 0a00 	mov.w	sl, #0
 800ec54:	f8b7 b000 	ldrh.w	fp, [r7]
 800ec58:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ec5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ec60:	4452      	add	r2, sl
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec68:	f84c 3b04 	str.w	r3, [ip], #4
 800ec6c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ec70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec74:	f8bc 3000 	ldrh.w	r3, [ip]
 800ec78:	fb09 330a 	mla	r3, r9, sl, r3
 800ec7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ec80:	42bd      	cmp	r5, r7
 800ec82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec86:	d8e5      	bhi.n	800ec54 <__multiply+0xfc>
 800ec88:	9a01      	ldr	r2, [sp, #4]
 800ec8a:	50a3      	str	r3, [r4, r2]
 800ec8c:	3404      	adds	r4, #4
 800ec8e:	e79f      	b.n	800ebd0 <__multiply+0x78>
 800ec90:	3e01      	subs	r6, #1
 800ec92:	e7a1      	b.n	800ebd8 <__multiply+0x80>
 800ec94:	08011105 	.word	0x08011105
 800ec98:	08011176 	.word	0x08011176

0800ec9c <__pow5mult>:
 800ec9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca0:	4615      	mov	r5, r2
 800eca2:	f012 0203 	ands.w	r2, r2, #3
 800eca6:	4607      	mov	r7, r0
 800eca8:	460e      	mov	r6, r1
 800ecaa:	d007      	beq.n	800ecbc <__pow5mult+0x20>
 800ecac:	4c25      	ldr	r4, [pc, #148]	@ (800ed44 <__pow5mult+0xa8>)
 800ecae:	3a01      	subs	r2, #1
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ecb6:	f7ff fe5d 	bl	800e974 <__multadd>
 800ecba:	4606      	mov	r6, r0
 800ecbc:	10ad      	asrs	r5, r5, #2
 800ecbe:	d03d      	beq.n	800ed3c <__pow5mult+0xa0>
 800ecc0:	69fc      	ldr	r4, [r7, #28]
 800ecc2:	b97c      	cbnz	r4, 800ece4 <__pow5mult+0x48>
 800ecc4:	2010      	movs	r0, #16
 800ecc6:	f7ff fd23 	bl	800e710 <malloc>
 800ecca:	4602      	mov	r2, r0
 800eccc:	61f8      	str	r0, [r7, #28]
 800ecce:	b928      	cbnz	r0, 800ecdc <__pow5mult+0x40>
 800ecd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ed48 <__pow5mult+0xac>)
 800ecd2:	481e      	ldr	r0, [pc, #120]	@ (800ed4c <__pow5mult+0xb0>)
 800ecd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ecd8:	f7fe fad2 	bl	800d280 <__assert_func>
 800ecdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ece0:	6004      	str	r4, [r0, #0]
 800ece2:	60c4      	str	r4, [r0, #12]
 800ece4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ece8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ecec:	b94c      	cbnz	r4, 800ed02 <__pow5mult+0x66>
 800ecee:	f240 2171 	movw	r1, #625	@ 0x271
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	f7ff ff1a 	bl	800eb2c <__i2b>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	f8c8 0008 	str.w	r0, [r8, #8]
 800ecfe:	4604      	mov	r4, r0
 800ed00:	6003      	str	r3, [r0, #0]
 800ed02:	f04f 0900 	mov.w	r9, #0
 800ed06:	07eb      	lsls	r3, r5, #31
 800ed08:	d50a      	bpl.n	800ed20 <__pow5mult+0x84>
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	4622      	mov	r2, r4
 800ed0e:	4638      	mov	r0, r7
 800ed10:	f7ff ff22 	bl	800eb58 <__multiply>
 800ed14:	4631      	mov	r1, r6
 800ed16:	4680      	mov	r8, r0
 800ed18:	4638      	mov	r0, r7
 800ed1a:	f7ff fe09 	bl	800e930 <_Bfree>
 800ed1e:	4646      	mov	r6, r8
 800ed20:	106d      	asrs	r5, r5, #1
 800ed22:	d00b      	beq.n	800ed3c <__pow5mult+0xa0>
 800ed24:	6820      	ldr	r0, [r4, #0]
 800ed26:	b938      	cbnz	r0, 800ed38 <__pow5mult+0x9c>
 800ed28:	4622      	mov	r2, r4
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7ff ff13 	bl	800eb58 <__multiply>
 800ed32:	6020      	str	r0, [r4, #0]
 800ed34:	f8c0 9000 	str.w	r9, [r0]
 800ed38:	4604      	mov	r4, r0
 800ed3a:	e7e4      	b.n	800ed06 <__pow5mult+0x6a>
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed42:	bf00      	nop
 800ed44:	0801148c 	.word	0x0801148c
 800ed48:	08010f44 	.word	0x08010f44
 800ed4c:	08011176 	.word	0x08011176

0800ed50 <__lshift>:
 800ed50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed54:	460c      	mov	r4, r1
 800ed56:	6849      	ldr	r1, [r1, #4]
 800ed58:	6923      	ldr	r3, [r4, #16]
 800ed5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed5e:	68a3      	ldr	r3, [r4, #8]
 800ed60:	4607      	mov	r7, r0
 800ed62:	4691      	mov	r9, r2
 800ed64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed68:	f108 0601 	add.w	r6, r8, #1
 800ed6c:	42b3      	cmp	r3, r6
 800ed6e:	db0b      	blt.n	800ed88 <__lshift+0x38>
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7ff fd9d 	bl	800e8b0 <_Balloc>
 800ed76:	4605      	mov	r5, r0
 800ed78:	b948      	cbnz	r0, 800ed8e <__lshift+0x3e>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	4b28      	ldr	r3, [pc, #160]	@ (800ee20 <__lshift+0xd0>)
 800ed7e:	4829      	ldr	r0, [pc, #164]	@ (800ee24 <__lshift+0xd4>)
 800ed80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed84:	f7fe fa7c 	bl	800d280 <__assert_func>
 800ed88:	3101      	adds	r1, #1
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	e7ee      	b.n	800ed6c <__lshift+0x1c>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f100 0114 	add.w	r1, r0, #20
 800ed94:	f100 0210 	add.w	r2, r0, #16
 800ed98:	4618      	mov	r0, r3
 800ed9a:	4553      	cmp	r3, sl
 800ed9c:	db33      	blt.n	800ee06 <__lshift+0xb6>
 800ed9e:	6920      	ldr	r0, [r4, #16]
 800eda0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eda4:	f104 0314 	add.w	r3, r4, #20
 800eda8:	f019 091f 	ands.w	r9, r9, #31
 800edac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800edb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800edb4:	d02b      	beq.n	800ee0e <__lshift+0xbe>
 800edb6:	f1c9 0e20 	rsb	lr, r9, #32
 800edba:	468a      	mov	sl, r1
 800edbc:	2200      	movs	r2, #0
 800edbe:	6818      	ldr	r0, [r3, #0]
 800edc0:	fa00 f009 	lsl.w	r0, r0, r9
 800edc4:	4310      	orrs	r0, r2
 800edc6:	f84a 0b04 	str.w	r0, [sl], #4
 800edca:	f853 2b04 	ldr.w	r2, [r3], #4
 800edce:	459c      	cmp	ip, r3
 800edd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800edd4:	d8f3      	bhi.n	800edbe <__lshift+0x6e>
 800edd6:	ebac 0304 	sub.w	r3, ip, r4
 800edda:	3b15      	subs	r3, #21
 800eddc:	f023 0303 	bic.w	r3, r3, #3
 800ede0:	3304      	adds	r3, #4
 800ede2:	f104 0015 	add.w	r0, r4, #21
 800ede6:	4560      	cmp	r0, ip
 800ede8:	bf88      	it	hi
 800edea:	2304      	movhi	r3, #4
 800edec:	50ca      	str	r2, [r1, r3]
 800edee:	b10a      	cbz	r2, 800edf4 <__lshift+0xa4>
 800edf0:	f108 0602 	add.w	r6, r8, #2
 800edf4:	3e01      	subs	r6, #1
 800edf6:	4638      	mov	r0, r7
 800edf8:	612e      	str	r6, [r5, #16]
 800edfa:	4621      	mov	r1, r4
 800edfc:	f7ff fd98 	bl	800e930 <_Bfree>
 800ee00:	4628      	mov	r0, r5
 800ee02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	e7c5      	b.n	800ed9a <__lshift+0x4a>
 800ee0e:	3904      	subs	r1, #4
 800ee10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee18:	459c      	cmp	ip, r3
 800ee1a:	d8f9      	bhi.n	800ee10 <__lshift+0xc0>
 800ee1c:	e7ea      	b.n	800edf4 <__lshift+0xa4>
 800ee1e:	bf00      	nop
 800ee20:	08011105 	.word	0x08011105
 800ee24:	08011176 	.word	0x08011176

0800ee28 <__mcmp>:
 800ee28:	690a      	ldr	r2, [r1, #16]
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	6900      	ldr	r0, [r0, #16]
 800ee2e:	1a80      	subs	r0, r0, r2
 800ee30:	b530      	push	{r4, r5, lr}
 800ee32:	d10e      	bne.n	800ee52 <__mcmp+0x2a>
 800ee34:	3314      	adds	r3, #20
 800ee36:	3114      	adds	r1, #20
 800ee38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee48:	4295      	cmp	r5, r2
 800ee4a:	d003      	beq.n	800ee54 <__mcmp+0x2c>
 800ee4c:	d205      	bcs.n	800ee5a <__mcmp+0x32>
 800ee4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee52:	bd30      	pop	{r4, r5, pc}
 800ee54:	42a3      	cmp	r3, r4
 800ee56:	d3f3      	bcc.n	800ee40 <__mcmp+0x18>
 800ee58:	e7fb      	b.n	800ee52 <__mcmp+0x2a>
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	e7f9      	b.n	800ee52 <__mcmp+0x2a>
	...

0800ee60 <__mdiff>:
 800ee60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee64:	4689      	mov	r9, r1
 800ee66:	4606      	mov	r6, r0
 800ee68:	4611      	mov	r1, r2
 800ee6a:	4648      	mov	r0, r9
 800ee6c:	4614      	mov	r4, r2
 800ee6e:	f7ff ffdb 	bl	800ee28 <__mcmp>
 800ee72:	1e05      	subs	r5, r0, #0
 800ee74:	d112      	bne.n	800ee9c <__mdiff+0x3c>
 800ee76:	4629      	mov	r1, r5
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7ff fd19 	bl	800e8b0 <_Balloc>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	b928      	cbnz	r0, 800ee8e <__mdiff+0x2e>
 800ee82:	4b3f      	ldr	r3, [pc, #252]	@ (800ef80 <__mdiff+0x120>)
 800ee84:	f240 2137 	movw	r1, #567	@ 0x237
 800ee88:	483e      	ldr	r0, [pc, #248]	@ (800ef84 <__mdiff+0x124>)
 800ee8a:	f7fe f9f9 	bl	800d280 <__assert_func>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee94:	4610      	mov	r0, r2
 800ee96:	b003      	add	sp, #12
 800ee98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9c:	bfbc      	itt	lt
 800ee9e:	464b      	movlt	r3, r9
 800eea0:	46a1      	movlt	r9, r4
 800eea2:	4630      	mov	r0, r6
 800eea4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eea8:	bfba      	itte	lt
 800eeaa:	461c      	movlt	r4, r3
 800eeac:	2501      	movlt	r5, #1
 800eeae:	2500      	movge	r5, #0
 800eeb0:	f7ff fcfe 	bl	800e8b0 <_Balloc>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	b918      	cbnz	r0, 800eec0 <__mdiff+0x60>
 800eeb8:	4b31      	ldr	r3, [pc, #196]	@ (800ef80 <__mdiff+0x120>)
 800eeba:	f240 2145 	movw	r1, #581	@ 0x245
 800eebe:	e7e3      	b.n	800ee88 <__mdiff+0x28>
 800eec0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eec4:	6926      	ldr	r6, [r4, #16]
 800eec6:	60c5      	str	r5, [r0, #12]
 800eec8:	f109 0310 	add.w	r3, r9, #16
 800eecc:	f109 0514 	add.w	r5, r9, #20
 800eed0:	f104 0e14 	add.w	lr, r4, #20
 800eed4:	f100 0b14 	add.w	fp, r0, #20
 800eed8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eedc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eee0:	9301      	str	r3, [sp, #4]
 800eee2:	46d9      	mov	r9, fp
 800eee4:	f04f 0c00 	mov.w	ip, #0
 800eee8:	9b01      	ldr	r3, [sp, #4]
 800eeea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eeee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eef2:	9301      	str	r3, [sp, #4]
 800eef4:	fa1f f38a 	uxth.w	r3, sl
 800eef8:	4619      	mov	r1, r3
 800eefa:	b283      	uxth	r3, r0
 800eefc:	1acb      	subs	r3, r1, r3
 800eefe:	0c00      	lsrs	r0, r0, #16
 800ef00:	4463      	add	r3, ip
 800ef02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef10:	4576      	cmp	r6, lr
 800ef12:	f849 3b04 	str.w	r3, [r9], #4
 800ef16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef1a:	d8e5      	bhi.n	800eee8 <__mdiff+0x88>
 800ef1c:	1b33      	subs	r3, r6, r4
 800ef1e:	3b15      	subs	r3, #21
 800ef20:	f023 0303 	bic.w	r3, r3, #3
 800ef24:	3415      	adds	r4, #21
 800ef26:	3304      	adds	r3, #4
 800ef28:	42a6      	cmp	r6, r4
 800ef2a:	bf38      	it	cc
 800ef2c:	2304      	movcc	r3, #4
 800ef2e:	441d      	add	r5, r3
 800ef30:	445b      	add	r3, fp
 800ef32:	461e      	mov	r6, r3
 800ef34:	462c      	mov	r4, r5
 800ef36:	4544      	cmp	r4, r8
 800ef38:	d30e      	bcc.n	800ef58 <__mdiff+0xf8>
 800ef3a:	f108 0103 	add.w	r1, r8, #3
 800ef3e:	1b49      	subs	r1, r1, r5
 800ef40:	f021 0103 	bic.w	r1, r1, #3
 800ef44:	3d03      	subs	r5, #3
 800ef46:	45a8      	cmp	r8, r5
 800ef48:	bf38      	it	cc
 800ef4a:	2100      	movcc	r1, #0
 800ef4c:	440b      	add	r3, r1
 800ef4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef52:	b191      	cbz	r1, 800ef7a <__mdiff+0x11a>
 800ef54:	6117      	str	r7, [r2, #16]
 800ef56:	e79d      	b.n	800ee94 <__mdiff+0x34>
 800ef58:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef5c:	46e6      	mov	lr, ip
 800ef5e:	0c08      	lsrs	r0, r1, #16
 800ef60:	fa1c fc81 	uxtah	ip, ip, r1
 800ef64:	4471      	add	r1, lr
 800ef66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef6a:	b289      	uxth	r1, r1
 800ef6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef70:	f846 1b04 	str.w	r1, [r6], #4
 800ef74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef78:	e7dd      	b.n	800ef36 <__mdiff+0xd6>
 800ef7a:	3f01      	subs	r7, #1
 800ef7c:	e7e7      	b.n	800ef4e <__mdiff+0xee>
 800ef7e:	bf00      	nop
 800ef80:	08011105 	.word	0x08011105
 800ef84:	08011176 	.word	0x08011176

0800ef88 <__ulp>:
 800ef88:	b082      	sub	sp, #8
 800ef8a:	ed8d 0b00 	vstr	d0, [sp]
 800ef8e:	9a01      	ldr	r2, [sp, #4]
 800ef90:	4b0f      	ldr	r3, [pc, #60]	@ (800efd0 <__ulp+0x48>)
 800ef92:	4013      	ands	r3, r2
 800ef94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	dc08      	bgt.n	800efae <__ulp+0x26>
 800ef9c:	425b      	negs	r3, r3
 800ef9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800efa2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800efa6:	da04      	bge.n	800efb2 <__ulp+0x2a>
 800efa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800efac:	4113      	asrs	r3, r2
 800efae:	2200      	movs	r2, #0
 800efb0:	e008      	b.n	800efc4 <__ulp+0x3c>
 800efb2:	f1a2 0314 	sub.w	r3, r2, #20
 800efb6:	2b1e      	cmp	r3, #30
 800efb8:	bfda      	itte	le
 800efba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800efbe:	40da      	lsrle	r2, r3
 800efc0:	2201      	movgt	r2, #1
 800efc2:	2300      	movs	r3, #0
 800efc4:	4619      	mov	r1, r3
 800efc6:	4610      	mov	r0, r2
 800efc8:	ec41 0b10 	vmov	d0, r0, r1
 800efcc:	b002      	add	sp, #8
 800efce:	4770      	bx	lr
 800efd0:	7ff00000 	.word	0x7ff00000

0800efd4 <__b2d>:
 800efd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd8:	6906      	ldr	r6, [r0, #16]
 800efda:	f100 0814 	add.w	r8, r0, #20
 800efde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800efe2:	1f37      	subs	r7, r6, #4
 800efe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800efe8:	4610      	mov	r0, r2
 800efea:	f7ff fd53 	bl	800ea94 <__hi0bits>
 800efee:	f1c0 0320 	rsb	r3, r0, #32
 800eff2:	280a      	cmp	r0, #10
 800eff4:	600b      	str	r3, [r1, #0]
 800eff6:	491b      	ldr	r1, [pc, #108]	@ (800f064 <__b2d+0x90>)
 800eff8:	dc15      	bgt.n	800f026 <__b2d+0x52>
 800effa:	f1c0 0c0b 	rsb	ip, r0, #11
 800effe:	fa22 f30c 	lsr.w	r3, r2, ip
 800f002:	45b8      	cmp	r8, r7
 800f004:	ea43 0501 	orr.w	r5, r3, r1
 800f008:	bf34      	ite	cc
 800f00a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f00e:	2300      	movcs	r3, #0
 800f010:	3015      	adds	r0, #21
 800f012:	fa02 f000 	lsl.w	r0, r2, r0
 800f016:	fa23 f30c 	lsr.w	r3, r3, ip
 800f01a:	4303      	orrs	r3, r0
 800f01c:	461c      	mov	r4, r3
 800f01e:	ec45 4b10 	vmov	d0, r4, r5
 800f022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f026:	45b8      	cmp	r8, r7
 800f028:	bf3a      	itte	cc
 800f02a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f02e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f032:	2300      	movcs	r3, #0
 800f034:	380b      	subs	r0, #11
 800f036:	d012      	beq.n	800f05e <__b2d+0x8a>
 800f038:	f1c0 0120 	rsb	r1, r0, #32
 800f03c:	fa23 f401 	lsr.w	r4, r3, r1
 800f040:	4082      	lsls	r2, r0
 800f042:	4322      	orrs	r2, r4
 800f044:	4547      	cmp	r7, r8
 800f046:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f04a:	bf8c      	ite	hi
 800f04c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f050:	2200      	movls	r2, #0
 800f052:	4083      	lsls	r3, r0
 800f054:	40ca      	lsrs	r2, r1
 800f056:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f05a:	4313      	orrs	r3, r2
 800f05c:	e7de      	b.n	800f01c <__b2d+0x48>
 800f05e:	ea42 0501 	orr.w	r5, r2, r1
 800f062:	e7db      	b.n	800f01c <__b2d+0x48>
 800f064:	3ff00000 	.word	0x3ff00000

0800f068 <__d2b>:
 800f068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f06c:	460f      	mov	r7, r1
 800f06e:	2101      	movs	r1, #1
 800f070:	ec59 8b10 	vmov	r8, r9, d0
 800f074:	4616      	mov	r6, r2
 800f076:	f7ff fc1b 	bl	800e8b0 <_Balloc>
 800f07a:	4604      	mov	r4, r0
 800f07c:	b930      	cbnz	r0, 800f08c <__d2b+0x24>
 800f07e:	4602      	mov	r2, r0
 800f080:	4b23      	ldr	r3, [pc, #140]	@ (800f110 <__d2b+0xa8>)
 800f082:	4824      	ldr	r0, [pc, #144]	@ (800f114 <__d2b+0xac>)
 800f084:	f240 310f 	movw	r1, #783	@ 0x30f
 800f088:	f7fe f8fa 	bl	800d280 <__assert_func>
 800f08c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f094:	b10d      	cbz	r5, 800f09a <__d2b+0x32>
 800f096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f09a:	9301      	str	r3, [sp, #4]
 800f09c:	f1b8 0300 	subs.w	r3, r8, #0
 800f0a0:	d023      	beq.n	800f0ea <__d2b+0x82>
 800f0a2:	4668      	mov	r0, sp
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	f7ff fd14 	bl	800ead2 <__lo0bits>
 800f0aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f0ae:	b1d0      	cbz	r0, 800f0e6 <__d2b+0x7e>
 800f0b0:	f1c0 0320 	rsb	r3, r0, #32
 800f0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b8:	430b      	orrs	r3, r1
 800f0ba:	40c2      	lsrs	r2, r0
 800f0bc:	6163      	str	r3, [r4, #20]
 800f0be:	9201      	str	r2, [sp, #4]
 800f0c0:	9b01      	ldr	r3, [sp, #4]
 800f0c2:	61a3      	str	r3, [r4, #24]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	bf0c      	ite	eq
 800f0c8:	2201      	moveq	r2, #1
 800f0ca:	2202      	movne	r2, #2
 800f0cc:	6122      	str	r2, [r4, #16]
 800f0ce:	b1a5      	cbz	r5, 800f0fa <__d2b+0x92>
 800f0d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f0d4:	4405      	add	r5, r0
 800f0d6:	603d      	str	r5, [r7, #0]
 800f0d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f0dc:	6030      	str	r0, [r6, #0]
 800f0de:	4620      	mov	r0, r4
 800f0e0:	b003      	add	sp, #12
 800f0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0e6:	6161      	str	r1, [r4, #20]
 800f0e8:	e7ea      	b.n	800f0c0 <__d2b+0x58>
 800f0ea:	a801      	add	r0, sp, #4
 800f0ec:	f7ff fcf1 	bl	800ead2 <__lo0bits>
 800f0f0:	9b01      	ldr	r3, [sp, #4]
 800f0f2:	6163      	str	r3, [r4, #20]
 800f0f4:	3020      	adds	r0, #32
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	e7e8      	b.n	800f0cc <__d2b+0x64>
 800f0fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f102:	6038      	str	r0, [r7, #0]
 800f104:	6918      	ldr	r0, [r3, #16]
 800f106:	f7ff fcc5 	bl	800ea94 <__hi0bits>
 800f10a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f10e:	e7e5      	b.n	800f0dc <__d2b+0x74>
 800f110:	08011105 	.word	0x08011105
 800f114:	08011176 	.word	0x08011176

0800f118 <__ratio>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	b085      	sub	sp, #20
 800f11e:	e9cd 1000 	strd	r1, r0, [sp]
 800f122:	a902      	add	r1, sp, #8
 800f124:	f7ff ff56 	bl	800efd4 <__b2d>
 800f128:	9800      	ldr	r0, [sp, #0]
 800f12a:	a903      	add	r1, sp, #12
 800f12c:	ec55 4b10 	vmov	r4, r5, d0
 800f130:	f7ff ff50 	bl	800efd4 <__b2d>
 800f134:	9b01      	ldr	r3, [sp, #4]
 800f136:	6919      	ldr	r1, [r3, #16]
 800f138:	9b00      	ldr	r3, [sp, #0]
 800f13a:	691b      	ldr	r3, [r3, #16]
 800f13c:	1ac9      	subs	r1, r1, r3
 800f13e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f142:	1a9b      	subs	r3, r3, r2
 800f144:	ec5b ab10 	vmov	sl, fp, d0
 800f148:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	bfce      	itee	gt
 800f150:	462a      	movgt	r2, r5
 800f152:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f156:	465a      	movle	r2, fp
 800f158:	462f      	mov	r7, r5
 800f15a:	46d9      	mov	r9, fp
 800f15c:	bfcc      	ite	gt
 800f15e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f162:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f166:	464b      	mov	r3, r9
 800f168:	4652      	mov	r2, sl
 800f16a:	4620      	mov	r0, r4
 800f16c:	4639      	mov	r1, r7
 800f16e:	f7f1 fb85 	bl	800087c <__aeabi_ddiv>
 800f172:	ec41 0b10 	vmov	d0, r0, r1
 800f176:	b005      	add	sp, #20
 800f178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f17c <__copybits>:
 800f17c:	3901      	subs	r1, #1
 800f17e:	b570      	push	{r4, r5, r6, lr}
 800f180:	1149      	asrs	r1, r1, #5
 800f182:	6914      	ldr	r4, [r2, #16]
 800f184:	3101      	adds	r1, #1
 800f186:	f102 0314 	add.w	r3, r2, #20
 800f18a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f18e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f192:	1f05      	subs	r5, r0, #4
 800f194:	42a3      	cmp	r3, r4
 800f196:	d30c      	bcc.n	800f1b2 <__copybits+0x36>
 800f198:	1aa3      	subs	r3, r4, r2
 800f19a:	3b11      	subs	r3, #17
 800f19c:	f023 0303 	bic.w	r3, r3, #3
 800f1a0:	3211      	adds	r2, #17
 800f1a2:	42a2      	cmp	r2, r4
 800f1a4:	bf88      	it	hi
 800f1a6:	2300      	movhi	r3, #0
 800f1a8:	4418      	add	r0, r3
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	4288      	cmp	r0, r1
 800f1ae:	d305      	bcc.n	800f1bc <__copybits+0x40>
 800f1b0:	bd70      	pop	{r4, r5, r6, pc}
 800f1b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f1b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f1ba:	e7eb      	b.n	800f194 <__copybits+0x18>
 800f1bc:	f840 3b04 	str.w	r3, [r0], #4
 800f1c0:	e7f4      	b.n	800f1ac <__copybits+0x30>

0800f1c2 <__any_on>:
 800f1c2:	f100 0214 	add.w	r2, r0, #20
 800f1c6:	6900      	ldr	r0, [r0, #16]
 800f1c8:	114b      	asrs	r3, r1, #5
 800f1ca:	4298      	cmp	r0, r3
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	db11      	blt.n	800f1f4 <__any_on+0x32>
 800f1d0:	dd0a      	ble.n	800f1e8 <__any_on+0x26>
 800f1d2:	f011 011f 	ands.w	r1, r1, #31
 800f1d6:	d007      	beq.n	800f1e8 <__any_on+0x26>
 800f1d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f1dc:	fa24 f001 	lsr.w	r0, r4, r1
 800f1e0:	fa00 f101 	lsl.w	r1, r0, r1
 800f1e4:	428c      	cmp	r4, r1
 800f1e6:	d10b      	bne.n	800f200 <__any_on+0x3e>
 800f1e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d803      	bhi.n	800f1f8 <__any_on+0x36>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	bd10      	pop	{r4, pc}
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	e7f7      	b.n	800f1e8 <__any_on+0x26>
 800f1f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	d0f5      	beq.n	800f1ec <__any_on+0x2a>
 800f200:	2001      	movs	r0, #1
 800f202:	e7f6      	b.n	800f1f2 <__any_on+0x30>

0800f204 <_strtoul_l.isra.0>:
 800f204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f208:	4e34      	ldr	r6, [pc, #208]	@ (800f2dc <_strtoul_l.isra.0+0xd8>)
 800f20a:	4686      	mov	lr, r0
 800f20c:	460d      	mov	r5, r1
 800f20e:	4628      	mov	r0, r5
 800f210:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f214:	5d37      	ldrb	r7, [r6, r4]
 800f216:	f017 0708 	ands.w	r7, r7, #8
 800f21a:	d1f8      	bne.n	800f20e <_strtoul_l.isra.0+0xa>
 800f21c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f21e:	d110      	bne.n	800f242 <_strtoul_l.isra.0+0x3e>
 800f220:	782c      	ldrb	r4, [r5, #0]
 800f222:	2701      	movs	r7, #1
 800f224:	1c85      	adds	r5, r0, #2
 800f226:	f033 0010 	bics.w	r0, r3, #16
 800f22a:	d115      	bne.n	800f258 <_strtoul_l.isra.0+0x54>
 800f22c:	2c30      	cmp	r4, #48	@ 0x30
 800f22e:	d10d      	bne.n	800f24c <_strtoul_l.isra.0+0x48>
 800f230:	7828      	ldrb	r0, [r5, #0]
 800f232:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f236:	2858      	cmp	r0, #88	@ 0x58
 800f238:	d108      	bne.n	800f24c <_strtoul_l.isra.0+0x48>
 800f23a:	786c      	ldrb	r4, [r5, #1]
 800f23c:	3502      	adds	r5, #2
 800f23e:	2310      	movs	r3, #16
 800f240:	e00a      	b.n	800f258 <_strtoul_l.isra.0+0x54>
 800f242:	2c2b      	cmp	r4, #43	@ 0x2b
 800f244:	bf04      	itt	eq
 800f246:	782c      	ldrbeq	r4, [r5, #0]
 800f248:	1c85      	addeq	r5, r0, #2
 800f24a:	e7ec      	b.n	800f226 <_strtoul_l.isra.0+0x22>
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1f6      	bne.n	800f23e <_strtoul_l.isra.0+0x3a>
 800f250:	2c30      	cmp	r4, #48	@ 0x30
 800f252:	bf14      	ite	ne
 800f254:	230a      	movne	r3, #10
 800f256:	2308      	moveq	r3, #8
 800f258:	f04f 38ff 	mov.w	r8, #4294967295
 800f25c:	2600      	movs	r6, #0
 800f25e:	fbb8 f8f3 	udiv	r8, r8, r3
 800f262:	fb03 f908 	mul.w	r9, r3, r8
 800f266:	ea6f 0909 	mvn.w	r9, r9
 800f26a:	4630      	mov	r0, r6
 800f26c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f270:	f1bc 0f09 	cmp.w	ip, #9
 800f274:	d810      	bhi.n	800f298 <_strtoul_l.isra.0+0x94>
 800f276:	4664      	mov	r4, ip
 800f278:	42a3      	cmp	r3, r4
 800f27a:	dd1e      	ble.n	800f2ba <_strtoul_l.isra.0+0xb6>
 800f27c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f280:	d007      	beq.n	800f292 <_strtoul_l.isra.0+0x8e>
 800f282:	4580      	cmp	r8, r0
 800f284:	d316      	bcc.n	800f2b4 <_strtoul_l.isra.0+0xb0>
 800f286:	d101      	bne.n	800f28c <_strtoul_l.isra.0+0x88>
 800f288:	45a1      	cmp	r9, r4
 800f28a:	db13      	blt.n	800f2b4 <_strtoul_l.isra.0+0xb0>
 800f28c:	fb00 4003 	mla	r0, r0, r3, r4
 800f290:	2601      	movs	r6, #1
 800f292:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f296:	e7e9      	b.n	800f26c <_strtoul_l.isra.0+0x68>
 800f298:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f29c:	f1bc 0f19 	cmp.w	ip, #25
 800f2a0:	d801      	bhi.n	800f2a6 <_strtoul_l.isra.0+0xa2>
 800f2a2:	3c37      	subs	r4, #55	@ 0x37
 800f2a4:	e7e8      	b.n	800f278 <_strtoul_l.isra.0+0x74>
 800f2a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f2aa:	f1bc 0f19 	cmp.w	ip, #25
 800f2ae:	d804      	bhi.n	800f2ba <_strtoul_l.isra.0+0xb6>
 800f2b0:	3c57      	subs	r4, #87	@ 0x57
 800f2b2:	e7e1      	b.n	800f278 <_strtoul_l.isra.0+0x74>
 800f2b4:	f04f 36ff 	mov.w	r6, #4294967295
 800f2b8:	e7eb      	b.n	800f292 <_strtoul_l.isra.0+0x8e>
 800f2ba:	1c73      	adds	r3, r6, #1
 800f2bc:	d106      	bne.n	800f2cc <_strtoul_l.isra.0+0xc8>
 800f2be:	2322      	movs	r3, #34	@ 0x22
 800f2c0:	f8ce 3000 	str.w	r3, [lr]
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	b932      	cbnz	r2, 800f2d6 <_strtoul_l.isra.0+0xd2>
 800f2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2cc:	b107      	cbz	r7, 800f2d0 <_strtoul_l.isra.0+0xcc>
 800f2ce:	4240      	negs	r0, r0
 800f2d0:	2a00      	cmp	r2, #0
 800f2d2:	d0f9      	beq.n	800f2c8 <_strtoul_l.isra.0+0xc4>
 800f2d4:	b106      	cbz	r6, 800f2d8 <_strtoul_l.isra.0+0xd4>
 800f2d6:	1e69      	subs	r1, r5, #1
 800f2d8:	6011      	str	r1, [r2, #0]
 800f2da:	e7f5      	b.n	800f2c8 <_strtoul_l.isra.0+0xc4>
 800f2dc:	080112c9 	.word	0x080112c9

0800f2e0 <_strtoul_r>:
 800f2e0:	f7ff bf90 	b.w	800f204 <_strtoul_l.isra.0>

0800f2e4 <strtoul>:
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	460a      	mov	r2, r1
 800f2e8:	4601      	mov	r1, r0
 800f2ea:	4802      	ldr	r0, [pc, #8]	@ (800f2f4 <strtoul+0x10>)
 800f2ec:	6800      	ldr	r0, [r0, #0]
 800f2ee:	f7ff bf89 	b.w	800f204 <_strtoul_l.isra.0>
 800f2f2:	bf00      	nop
 800f2f4:	2000019c 	.word	0x2000019c

0800f2f8 <__ascii_wctomb>:
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	4608      	mov	r0, r1
 800f2fc:	b141      	cbz	r1, 800f310 <__ascii_wctomb+0x18>
 800f2fe:	2aff      	cmp	r2, #255	@ 0xff
 800f300:	d904      	bls.n	800f30c <__ascii_wctomb+0x14>
 800f302:	228a      	movs	r2, #138	@ 0x8a
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	f04f 30ff 	mov.w	r0, #4294967295
 800f30a:	4770      	bx	lr
 800f30c:	700a      	strb	r2, [r1, #0]
 800f30e:	2001      	movs	r0, #1
 800f310:	4770      	bx	lr

0800f312 <__ssputs_r>:
 800f312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f316:	688e      	ldr	r6, [r1, #8]
 800f318:	461f      	mov	r7, r3
 800f31a:	42be      	cmp	r6, r7
 800f31c:	680b      	ldr	r3, [r1, #0]
 800f31e:	4682      	mov	sl, r0
 800f320:	460c      	mov	r4, r1
 800f322:	4690      	mov	r8, r2
 800f324:	d82d      	bhi.n	800f382 <__ssputs_r+0x70>
 800f326:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f32a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f32e:	d026      	beq.n	800f37e <__ssputs_r+0x6c>
 800f330:	6965      	ldr	r5, [r4, #20]
 800f332:	6909      	ldr	r1, [r1, #16]
 800f334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f338:	eba3 0901 	sub.w	r9, r3, r1
 800f33c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f340:	1c7b      	adds	r3, r7, #1
 800f342:	444b      	add	r3, r9
 800f344:	106d      	asrs	r5, r5, #1
 800f346:	429d      	cmp	r5, r3
 800f348:	bf38      	it	cc
 800f34a:	461d      	movcc	r5, r3
 800f34c:	0553      	lsls	r3, r2, #21
 800f34e:	d527      	bpl.n	800f3a0 <__ssputs_r+0x8e>
 800f350:	4629      	mov	r1, r5
 800f352:	f7ff fa0f 	bl	800e774 <_malloc_r>
 800f356:	4606      	mov	r6, r0
 800f358:	b360      	cbz	r0, 800f3b4 <__ssputs_r+0xa2>
 800f35a:	6921      	ldr	r1, [r4, #16]
 800f35c:	464a      	mov	r2, r9
 800f35e:	f7fd ff78 	bl	800d252 <memcpy>
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	6126      	str	r6, [r4, #16]
 800f370:	6165      	str	r5, [r4, #20]
 800f372:	444e      	add	r6, r9
 800f374:	eba5 0509 	sub.w	r5, r5, r9
 800f378:	6026      	str	r6, [r4, #0]
 800f37a:	60a5      	str	r5, [r4, #8]
 800f37c:	463e      	mov	r6, r7
 800f37e:	42be      	cmp	r6, r7
 800f380:	d900      	bls.n	800f384 <__ssputs_r+0x72>
 800f382:	463e      	mov	r6, r7
 800f384:	6820      	ldr	r0, [r4, #0]
 800f386:	4632      	mov	r2, r6
 800f388:	4641      	mov	r1, r8
 800f38a:	f7fc ff51 	bl	800c230 <memmove>
 800f38e:	68a3      	ldr	r3, [r4, #8]
 800f390:	1b9b      	subs	r3, r3, r6
 800f392:	60a3      	str	r3, [r4, #8]
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	4433      	add	r3, r6
 800f398:	6023      	str	r3, [r4, #0]
 800f39a:	2000      	movs	r0, #0
 800f39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a0:	462a      	mov	r2, r5
 800f3a2:	f001 f881 	bl	80104a8 <_realloc_r>
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d1e0      	bne.n	800f36e <__ssputs_r+0x5c>
 800f3ac:	6921      	ldr	r1, [r4, #16]
 800f3ae:	4650      	mov	r0, sl
 800f3b0:	f7fe fde6 	bl	800df80 <_free_r>
 800f3b4:	230c      	movs	r3, #12
 800f3b6:	f8ca 3000 	str.w	r3, [sl]
 800f3ba:	89a3      	ldrh	r3, [r4, #12]
 800f3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3c0:	81a3      	strh	r3, [r4, #12]
 800f3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c6:	e7e9      	b.n	800f39c <__ssputs_r+0x8a>

0800f3c8 <_svfiprintf_r>:
 800f3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	4698      	mov	r8, r3
 800f3ce:	898b      	ldrh	r3, [r1, #12]
 800f3d0:	061b      	lsls	r3, r3, #24
 800f3d2:	b09d      	sub	sp, #116	@ 0x74
 800f3d4:	4607      	mov	r7, r0
 800f3d6:	460d      	mov	r5, r1
 800f3d8:	4614      	mov	r4, r2
 800f3da:	d510      	bpl.n	800f3fe <_svfiprintf_r+0x36>
 800f3dc:	690b      	ldr	r3, [r1, #16]
 800f3de:	b973      	cbnz	r3, 800f3fe <_svfiprintf_r+0x36>
 800f3e0:	2140      	movs	r1, #64	@ 0x40
 800f3e2:	f7ff f9c7 	bl	800e774 <_malloc_r>
 800f3e6:	6028      	str	r0, [r5, #0]
 800f3e8:	6128      	str	r0, [r5, #16]
 800f3ea:	b930      	cbnz	r0, 800f3fa <_svfiprintf_r+0x32>
 800f3ec:	230c      	movs	r3, #12
 800f3ee:	603b      	str	r3, [r7, #0]
 800f3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f4:	b01d      	add	sp, #116	@ 0x74
 800f3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fa:	2340      	movs	r3, #64	@ 0x40
 800f3fc:	616b      	str	r3, [r5, #20]
 800f3fe:	2300      	movs	r3, #0
 800f400:	9309      	str	r3, [sp, #36]	@ 0x24
 800f402:	2320      	movs	r3, #32
 800f404:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f408:	f8cd 800c 	str.w	r8, [sp, #12]
 800f40c:	2330      	movs	r3, #48	@ 0x30
 800f40e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5ac <_svfiprintf_r+0x1e4>
 800f412:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f416:	f04f 0901 	mov.w	r9, #1
 800f41a:	4623      	mov	r3, r4
 800f41c:	469a      	mov	sl, r3
 800f41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f422:	b10a      	cbz	r2, 800f428 <_svfiprintf_r+0x60>
 800f424:	2a25      	cmp	r2, #37	@ 0x25
 800f426:	d1f9      	bne.n	800f41c <_svfiprintf_r+0x54>
 800f428:	ebba 0b04 	subs.w	fp, sl, r4
 800f42c:	d00b      	beq.n	800f446 <_svfiprintf_r+0x7e>
 800f42e:	465b      	mov	r3, fp
 800f430:	4622      	mov	r2, r4
 800f432:	4629      	mov	r1, r5
 800f434:	4638      	mov	r0, r7
 800f436:	f7ff ff6c 	bl	800f312 <__ssputs_r>
 800f43a:	3001      	adds	r0, #1
 800f43c:	f000 80a7 	beq.w	800f58e <_svfiprintf_r+0x1c6>
 800f440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f442:	445a      	add	r2, fp
 800f444:	9209      	str	r2, [sp, #36]	@ 0x24
 800f446:	f89a 3000 	ldrb.w	r3, [sl]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 809f 	beq.w	800f58e <_svfiprintf_r+0x1c6>
 800f450:	2300      	movs	r3, #0
 800f452:	f04f 32ff 	mov.w	r2, #4294967295
 800f456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f45a:	f10a 0a01 	add.w	sl, sl, #1
 800f45e:	9304      	str	r3, [sp, #16]
 800f460:	9307      	str	r3, [sp, #28]
 800f462:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f466:	931a      	str	r3, [sp, #104]	@ 0x68
 800f468:	4654      	mov	r4, sl
 800f46a:	2205      	movs	r2, #5
 800f46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f470:	484e      	ldr	r0, [pc, #312]	@ (800f5ac <_svfiprintf_r+0x1e4>)
 800f472:	f7f0 fec5 	bl	8000200 <memchr>
 800f476:	9a04      	ldr	r2, [sp, #16]
 800f478:	b9d8      	cbnz	r0, 800f4b2 <_svfiprintf_r+0xea>
 800f47a:	06d0      	lsls	r0, r2, #27
 800f47c:	bf44      	itt	mi
 800f47e:	2320      	movmi	r3, #32
 800f480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f484:	0711      	lsls	r1, r2, #28
 800f486:	bf44      	itt	mi
 800f488:	232b      	movmi	r3, #43	@ 0x2b
 800f48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f48e:	f89a 3000 	ldrb.w	r3, [sl]
 800f492:	2b2a      	cmp	r3, #42	@ 0x2a
 800f494:	d015      	beq.n	800f4c2 <_svfiprintf_r+0xfa>
 800f496:	9a07      	ldr	r2, [sp, #28]
 800f498:	4654      	mov	r4, sl
 800f49a:	2000      	movs	r0, #0
 800f49c:	f04f 0c0a 	mov.w	ip, #10
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4a6:	3b30      	subs	r3, #48	@ 0x30
 800f4a8:	2b09      	cmp	r3, #9
 800f4aa:	d94b      	bls.n	800f544 <_svfiprintf_r+0x17c>
 800f4ac:	b1b0      	cbz	r0, 800f4dc <_svfiprintf_r+0x114>
 800f4ae:	9207      	str	r2, [sp, #28]
 800f4b0:	e014      	b.n	800f4dc <_svfiprintf_r+0x114>
 800f4b2:	eba0 0308 	sub.w	r3, r0, r8
 800f4b6:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	9304      	str	r3, [sp, #16]
 800f4be:	46a2      	mov	sl, r4
 800f4c0:	e7d2      	b.n	800f468 <_svfiprintf_r+0xa0>
 800f4c2:	9b03      	ldr	r3, [sp, #12]
 800f4c4:	1d19      	adds	r1, r3, #4
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	9103      	str	r1, [sp, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	bfbb      	ittet	lt
 800f4ce:	425b      	neglt	r3, r3
 800f4d0:	f042 0202 	orrlt.w	r2, r2, #2
 800f4d4:	9307      	strge	r3, [sp, #28]
 800f4d6:	9307      	strlt	r3, [sp, #28]
 800f4d8:	bfb8      	it	lt
 800f4da:	9204      	strlt	r2, [sp, #16]
 800f4dc:	7823      	ldrb	r3, [r4, #0]
 800f4de:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4e0:	d10a      	bne.n	800f4f8 <_svfiprintf_r+0x130>
 800f4e2:	7863      	ldrb	r3, [r4, #1]
 800f4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4e6:	d132      	bne.n	800f54e <_svfiprintf_r+0x186>
 800f4e8:	9b03      	ldr	r3, [sp, #12]
 800f4ea:	1d1a      	adds	r2, r3, #4
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	9203      	str	r2, [sp, #12]
 800f4f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4f4:	3402      	adds	r4, #2
 800f4f6:	9305      	str	r3, [sp, #20]
 800f4f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5bc <_svfiprintf_r+0x1f4>
 800f4fc:	7821      	ldrb	r1, [r4, #0]
 800f4fe:	2203      	movs	r2, #3
 800f500:	4650      	mov	r0, sl
 800f502:	f7f0 fe7d 	bl	8000200 <memchr>
 800f506:	b138      	cbz	r0, 800f518 <_svfiprintf_r+0x150>
 800f508:	9b04      	ldr	r3, [sp, #16]
 800f50a:	eba0 000a 	sub.w	r0, r0, sl
 800f50e:	2240      	movs	r2, #64	@ 0x40
 800f510:	4082      	lsls	r2, r0
 800f512:	4313      	orrs	r3, r2
 800f514:	3401      	adds	r4, #1
 800f516:	9304      	str	r3, [sp, #16]
 800f518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f51c:	4824      	ldr	r0, [pc, #144]	@ (800f5b0 <_svfiprintf_r+0x1e8>)
 800f51e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f522:	2206      	movs	r2, #6
 800f524:	f7f0 fe6c 	bl	8000200 <memchr>
 800f528:	2800      	cmp	r0, #0
 800f52a:	d036      	beq.n	800f59a <_svfiprintf_r+0x1d2>
 800f52c:	4b21      	ldr	r3, [pc, #132]	@ (800f5b4 <_svfiprintf_r+0x1ec>)
 800f52e:	bb1b      	cbnz	r3, 800f578 <_svfiprintf_r+0x1b0>
 800f530:	9b03      	ldr	r3, [sp, #12]
 800f532:	3307      	adds	r3, #7
 800f534:	f023 0307 	bic.w	r3, r3, #7
 800f538:	3308      	adds	r3, #8
 800f53a:	9303      	str	r3, [sp, #12]
 800f53c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f53e:	4433      	add	r3, r6
 800f540:	9309      	str	r3, [sp, #36]	@ 0x24
 800f542:	e76a      	b.n	800f41a <_svfiprintf_r+0x52>
 800f544:	fb0c 3202 	mla	r2, ip, r2, r3
 800f548:	460c      	mov	r4, r1
 800f54a:	2001      	movs	r0, #1
 800f54c:	e7a8      	b.n	800f4a0 <_svfiprintf_r+0xd8>
 800f54e:	2300      	movs	r3, #0
 800f550:	3401      	adds	r4, #1
 800f552:	9305      	str	r3, [sp, #20]
 800f554:	4619      	mov	r1, r3
 800f556:	f04f 0c0a 	mov.w	ip, #10
 800f55a:	4620      	mov	r0, r4
 800f55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f560:	3a30      	subs	r2, #48	@ 0x30
 800f562:	2a09      	cmp	r2, #9
 800f564:	d903      	bls.n	800f56e <_svfiprintf_r+0x1a6>
 800f566:	2b00      	cmp	r3, #0
 800f568:	d0c6      	beq.n	800f4f8 <_svfiprintf_r+0x130>
 800f56a:	9105      	str	r1, [sp, #20]
 800f56c:	e7c4      	b.n	800f4f8 <_svfiprintf_r+0x130>
 800f56e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f572:	4604      	mov	r4, r0
 800f574:	2301      	movs	r3, #1
 800f576:	e7f0      	b.n	800f55a <_svfiprintf_r+0x192>
 800f578:	ab03      	add	r3, sp, #12
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	462a      	mov	r2, r5
 800f57e:	4b0e      	ldr	r3, [pc, #56]	@ (800f5b8 <_svfiprintf_r+0x1f0>)
 800f580:	a904      	add	r1, sp, #16
 800f582:	4638      	mov	r0, r7
 800f584:	f7fc f806 	bl	800b594 <_printf_float>
 800f588:	1c42      	adds	r2, r0, #1
 800f58a:	4606      	mov	r6, r0
 800f58c:	d1d6      	bne.n	800f53c <_svfiprintf_r+0x174>
 800f58e:	89ab      	ldrh	r3, [r5, #12]
 800f590:	065b      	lsls	r3, r3, #25
 800f592:	f53f af2d 	bmi.w	800f3f0 <_svfiprintf_r+0x28>
 800f596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f598:	e72c      	b.n	800f3f4 <_svfiprintf_r+0x2c>
 800f59a:	ab03      	add	r3, sp, #12
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	462a      	mov	r2, r5
 800f5a0:	4b05      	ldr	r3, [pc, #20]	@ (800f5b8 <_svfiprintf_r+0x1f0>)
 800f5a2:	a904      	add	r1, sp, #16
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	f7fc fa8d 	bl	800bac4 <_printf_i>
 800f5aa:	e7ed      	b.n	800f588 <_svfiprintf_r+0x1c0>
 800f5ac:	080111cf 	.word	0x080111cf
 800f5b0:	080111d9 	.word	0x080111d9
 800f5b4:	0800b595 	.word	0x0800b595
 800f5b8:	0800f313 	.word	0x0800f313
 800f5bc:	080111d5 	.word	0x080111d5

0800f5c0 <_sungetc_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	1c4b      	adds	r3, r1, #1
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	d103      	bne.n	800f5d0 <_sungetc_r+0x10>
 800f5c8:	f04f 35ff 	mov.w	r5, #4294967295
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	8993      	ldrh	r3, [r2, #12]
 800f5d2:	f023 0320 	bic.w	r3, r3, #32
 800f5d6:	8193      	strh	r3, [r2, #12]
 800f5d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5da:	6852      	ldr	r2, [r2, #4]
 800f5dc:	b2cd      	uxtb	r5, r1
 800f5de:	b18b      	cbz	r3, 800f604 <_sungetc_r+0x44>
 800f5e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	dd08      	ble.n	800f5f8 <_sungetc_r+0x38>
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	1e5a      	subs	r2, r3, #1
 800f5ea:	6022      	str	r2, [r4, #0]
 800f5ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f5f0:	6863      	ldr	r3, [r4, #4]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	6063      	str	r3, [r4, #4]
 800f5f6:	e7e9      	b.n	800f5cc <_sungetc_r+0xc>
 800f5f8:	4621      	mov	r1, r4
 800f5fa:	f000 fdce 	bl	801019a <__submore>
 800f5fe:	2800      	cmp	r0, #0
 800f600:	d0f1      	beq.n	800f5e6 <_sungetc_r+0x26>
 800f602:	e7e1      	b.n	800f5c8 <_sungetc_r+0x8>
 800f604:	6921      	ldr	r1, [r4, #16]
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	b151      	cbz	r1, 800f620 <_sungetc_r+0x60>
 800f60a:	4299      	cmp	r1, r3
 800f60c:	d208      	bcs.n	800f620 <_sungetc_r+0x60>
 800f60e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f612:	42a9      	cmp	r1, r5
 800f614:	d104      	bne.n	800f620 <_sungetc_r+0x60>
 800f616:	3b01      	subs	r3, #1
 800f618:	3201      	adds	r2, #1
 800f61a:	6023      	str	r3, [r4, #0]
 800f61c:	6062      	str	r2, [r4, #4]
 800f61e:	e7d5      	b.n	800f5cc <_sungetc_r+0xc>
 800f620:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800f624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f628:	6363      	str	r3, [r4, #52]	@ 0x34
 800f62a:	2303      	movs	r3, #3
 800f62c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f62e:	4623      	mov	r3, r4
 800f630:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	2301      	movs	r3, #1
 800f638:	e7dc      	b.n	800f5f4 <_sungetc_r+0x34>

0800f63a <__ssrefill_r>:
 800f63a:	b510      	push	{r4, lr}
 800f63c:	460c      	mov	r4, r1
 800f63e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f640:	b169      	cbz	r1, 800f65e <__ssrefill_r+0x24>
 800f642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f646:	4299      	cmp	r1, r3
 800f648:	d001      	beq.n	800f64e <__ssrefill_r+0x14>
 800f64a:	f7fe fc99 	bl	800df80 <_free_r>
 800f64e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f650:	6063      	str	r3, [r4, #4]
 800f652:	2000      	movs	r0, #0
 800f654:	6360      	str	r0, [r4, #52]	@ 0x34
 800f656:	b113      	cbz	r3, 800f65e <__ssrefill_r+0x24>
 800f658:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f65a:	6023      	str	r3, [r4, #0]
 800f65c:	bd10      	pop	{r4, pc}
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	6023      	str	r3, [r4, #0]
 800f662:	2300      	movs	r3, #0
 800f664:	6063      	str	r3, [r4, #4]
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	f043 0320 	orr.w	r3, r3, #32
 800f66c:	81a3      	strh	r3, [r4, #12]
 800f66e:	f04f 30ff 	mov.w	r0, #4294967295
 800f672:	e7f3      	b.n	800f65c <__ssrefill_r+0x22>

0800f674 <__ssvfiscanf_r>:
 800f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	460c      	mov	r4, r1
 800f67a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800f67e:	2100      	movs	r1, #0
 800f680:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f684:	49a6      	ldr	r1, [pc, #664]	@ (800f920 <__ssvfiscanf_r+0x2ac>)
 800f686:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f688:	f10d 0804 	add.w	r8, sp, #4
 800f68c:	49a5      	ldr	r1, [pc, #660]	@ (800f924 <__ssvfiscanf_r+0x2b0>)
 800f68e:	4fa6      	ldr	r7, [pc, #664]	@ (800f928 <__ssvfiscanf_r+0x2b4>)
 800f690:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f694:	4606      	mov	r6, r0
 800f696:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	f892 9000 	ldrb.w	r9, [r2]
 800f69e:	f1b9 0f00 	cmp.w	r9, #0
 800f6a2:	f000 8158 	beq.w	800f956 <__ssvfiscanf_r+0x2e2>
 800f6a6:	f817 3009 	ldrb.w	r3, [r7, r9]
 800f6aa:	f013 0308 	ands.w	r3, r3, #8
 800f6ae:	f102 0501 	add.w	r5, r2, #1
 800f6b2:	d019      	beq.n	800f6e8 <__ssvfiscanf_r+0x74>
 800f6b4:	6863      	ldr	r3, [r4, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	dd0f      	ble.n	800f6da <__ssvfiscanf_r+0x66>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	781a      	ldrb	r2, [r3, #0]
 800f6be:	5cba      	ldrb	r2, [r7, r2]
 800f6c0:	0712      	lsls	r2, r2, #28
 800f6c2:	d401      	bmi.n	800f6c8 <__ssvfiscanf_r+0x54>
 800f6c4:	462a      	mov	r2, r5
 800f6c6:	e7e8      	b.n	800f69a <__ssvfiscanf_r+0x26>
 800f6c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f6ca:	3201      	adds	r2, #1
 800f6cc:	9245      	str	r2, [sp, #276]	@ 0x114
 800f6ce:	6862      	ldr	r2, [r4, #4]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	3a01      	subs	r2, #1
 800f6d4:	6062      	str	r2, [r4, #4]
 800f6d6:	6023      	str	r3, [r4, #0]
 800f6d8:	e7ec      	b.n	800f6b4 <__ssvfiscanf_r+0x40>
 800f6da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f6dc:	4621      	mov	r1, r4
 800f6de:	4630      	mov	r0, r6
 800f6e0:	4798      	blx	r3
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d0e9      	beq.n	800f6ba <__ssvfiscanf_r+0x46>
 800f6e6:	e7ed      	b.n	800f6c4 <__ssvfiscanf_r+0x50>
 800f6e8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800f6ec:	f040 8085 	bne.w	800f7fa <__ssvfiscanf_r+0x186>
 800f6f0:	9341      	str	r3, [sp, #260]	@ 0x104
 800f6f2:	9343      	str	r3, [sp, #268]	@ 0x10c
 800f6f4:	7853      	ldrb	r3, [r2, #1]
 800f6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6f8:	bf02      	ittt	eq
 800f6fa:	2310      	moveq	r3, #16
 800f6fc:	1c95      	addeq	r5, r2, #2
 800f6fe:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f700:	220a      	movs	r2, #10
 800f702:	46aa      	mov	sl, r5
 800f704:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f708:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f70c:	2b09      	cmp	r3, #9
 800f70e:	d91e      	bls.n	800f74e <__ssvfiscanf_r+0xda>
 800f710:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800f92c <__ssvfiscanf_r+0x2b8>
 800f714:	2203      	movs	r2, #3
 800f716:	4658      	mov	r0, fp
 800f718:	f7f0 fd72 	bl	8000200 <memchr>
 800f71c:	b138      	cbz	r0, 800f72e <__ssvfiscanf_r+0xba>
 800f71e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f720:	eba0 000b 	sub.w	r0, r0, fp
 800f724:	2301      	movs	r3, #1
 800f726:	4083      	lsls	r3, r0
 800f728:	4313      	orrs	r3, r2
 800f72a:	9341      	str	r3, [sp, #260]	@ 0x104
 800f72c:	4655      	mov	r5, sl
 800f72e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f732:	2b78      	cmp	r3, #120	@ 0x78
 800f734:	d806      	bhi.n	800f744 <__ssvfiscanf_r+0xd0>
 800f736:	2b57      	cmp	r3, #87	@ 0x57
 800f738:	d810      	bhi.n	800f75c <__ssvfiscanf_r+0xe8>
 800f73a:	2b25      	cmp	r3, #37	@ 0x25
 800f73c:	d05d      	beq.n	800f7fa <__ssvfiscanf_r+0x186>
 800f73e:	d857      	bhi.n	800f7f0 <__ssvfiscanf_r+0x17c>
 800f740:	2b00      	cmp	r3, #0
 800f742:	d075      	beq.n	800f830 <__ssvfiscanf_r+0x1bc>
 800f744:	2303      	movs	r3, #3
 800f746:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f748:	230a      	movs	r3, #10
 800f74a:	9342      	str	r3, [sp, #264]	@ 0x108
 800f74c:	e088      	b.n	800f860 <__ssvfiscanf_r+0x1ec>
 800f74e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f750:	fb02 1103 	mla	r1, r2, r3, r1
 800f754:	3930      	subs	r1, #48	@ 0x30
 800f756:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f758:	4655      	mov	r5, sl
 800f75a:	e7d2      	b.n	800f702 <__ssvfiscanf_r+0x8e>
 800f75c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f760:	2a20      	cmp	r2, #32
 800f762:	d8ef      	bhi.n	800f744 <__ssvfiscanf_r+0xd0>
 800f764:	a101      	add	r1, pc, #4	@ (adr r1, 800f76c <__ssvfiscanf_r+0xf8>)
 800f766:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f76a:	bf00      	nop
 800f76c:	0800f83f 	.word	0x0800f83f
 800f770:	0800f745 	.word	0x0800f745
 800f774:	0800f745 	.word	0x0800f745
 800f778:	0800f899 	.word	0x0800f899
 800f77c:	0800f745 	.word	0x0800f745
 800f780:	0800f745 	.word	0x0800f745
 800f784:	0800f745 	.word	0x0800f745
 800f788:	0800f745 	.word	0x0800f745
 800f78c:	0800f745 	.word	0x0800f745
 800f790:	0800f745 	.word	0x0800f745
 800f794:	0800f745 	.word	0x0800f745
 800f798:	0800f8af 	.word	0x0800f8af
 800f79c:	0800f895 	.word	0x0800f895
 800f7a0:	0800f7f7 	.word	0x0800f7f7
 800f7a4:	0800f7f7 	.word	0x0800f7f7
 800f7a8:	0800f7f7 	.word	0x0800f7f7
 800f7ac:	0800f745 	.word	0x0800f745
 800f7b0:	0800f851 	.word	0x0800f851
 800f7b4:	0800f745 	.word	0x0800f745
 800f7b8:	0800f745 	.word	0x0800f745
 800f7bc:	0800f745 	.word	0x0800f745
 800f7c0:	0800f745 	.word	0x0800f745
 800f7c4:	0800f8bf 	.word	0x0800f8bf
 800f7c8:	0800f859 	.word	0x0800f859
 800f7cc:	0800f837 	.word	0x0800f837
 800f7d0:	0800f745 	.word	0x0800f745
 800f7d4:	0800f745 	.word	0x0800f745
 800f7d8:	0800f8bb 	.word	0x0800f8bb
 800f7dc:	0800f745 	.word	0x0800f745
 800f7e0:	0800f895 	.word	0x0800f895
 800f7e4:	0800f745 	.word	0x0800f745
 800f7e8:	0800f745 	.word	0x0800f745
 800f7ec:	0800f83f 	.word	0x0800f83f
 800f7f0:	3b45      	subs	r3, #69	@ 0x45
 800f7f2:	2b02      	cmp	r3, #2
 800f7f4:	d8a6      	bhi.n	800f744 <__ssvfiscanf_r+0xd0>
 800f7f6:	2305      	movs	r3, #5
 800f7f8:	e031      	b.n	800f85e <__ssvfiscanf_r+0x1ea>
 800f7fa:	6863      	ldr	r3, [r4, #4]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dd0d      	ble.n	800f81c <__ssvfiscanf_r+0x1a8>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	781a      	ldrb	r2, [r3, #0]
 800f804:	454a      	cmp	r2, r9
 800f806:	f040 80a6 	bne.w	800f956 <__ssvfiscanf_r+0x2e2>
 800f80a:	3301      	adds	r3, #1
 800f80c:	6862      	ldr	r2, [r4, #4]
 800f80e:	6023      	str	r3, [r4, #0]
 800f810:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f812:	3a01      	subs	r2, #1
 800f814:	3301      	adds	r3, #1
 800f816:	6062      	str	r2, [r4, #4]
 800f818:	9345      	str	r3, [sp, #276]	@ 0x114
 800f81a:	e753      	b.n	800f6c4 <__ssvfiscanf_r+0x50>
 800f81c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f81e:	4621      	mov	r1, r4
 800f820:	4630      	mov	r0, r6
 800f822:	4798      	blx	r3
 800f824:	2800      	cmp	r0, #0
 800f826:	d0eb      	beq.n	800f800 <__ssvfiscanf_r+0x18c>
 800f828:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f82a:	2800      	cmp	r0, #0
 800f82c:	f040 808b 	bne.w	800f946 <__ssvfiscanf_r+0x2d2>
 800f830:	f04f 30ff 	mov.w	r0, #4294967295
 800f834:	e08b      	b.n	800f94e <__ssvfiscanf_r+0x2da>
 800f836:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f838:	f042 0220 	orr.w	r2, r2, #32
 800f83c:	9241      	str	r2, [sp, #260]	@ 0x104
 800f83e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f844:	9241      	str	r2, [sp, #260]	@ 0x104
 800f846:	2210      	movs	r2, #16
 800f848:	2b6e      	cmp	r3, #110	@ 0x6e
 800f84a:	9242      	str	r2, [sp, #264]	@ 0x108
 800f84c:	d902      	bls.n	800f854 <__ssvfiscanf_r+0x1e0>
 800f84e:	e005      	b.n	800f85c <__ssvfiscanf_r+0x1e8>
 800f850:	2300      	movs	r3, #0
 800f852:	9342      	str	r3, [sp, #264]	@ 0x108
 800f854:	2303      	movs	r3, #3
 800f856:	e002      	b.n	800f85e <__ssvfiscanf_r+0x1ea>
 800f858:	2308      	movs	r3, #8
 800f85a:	9342      	str	r3, [sp, #264]	@ 0x108
 800f85c:	2304      	movs	r3, #4
 800f85e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f860:	6863      	ldr	r3, [r4, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	dd39      	ble.n	800f8da <__ssvfiscanf_r+0x266>
 800f866:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f868:	0659      	lsls	r1, r3, #25
 800f86a:	d404      	bmi.n	800f876 <__ssvfiscanf_r+0x202>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	781a      	ldrb	r2, [r3, #0]
 800f870:	5cba      	ldrb	r2, [r7, r2]
 800f872:	0712      	lsls	r2, r2, #28
 800f874:	d438      	bmi.n	800f8e8 <__ssvfiscanf_r+0x274>
 800f876:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f878:	2b02      	cmp	r3, #2
 800f87a:	dc47      	bgt.n	800f90c <__ssvfiscanf_r+0x298>
 800f87c:	466b      	mov	r3, sp
 800f87e:	4622      	mov	r2, r4
 800f880:	a941      	add	r1, sp, #260	@ 0x104
 800f882:	4630      	mov	r0, r6
 800f884:	f000 f9ae 	bl	800fbe4 <_scanf_chars>
 800f888:	2801      	cmp	r0, #1
 800f88a:	d064      	beq.n	800f956 <__ssvfiscanf_r+0x2e2>
 800f88c:	2802      	cmp	r0, #2
 800f88e:	f47f af19 	bne.w	800f6c4 <__ssvfiscanf_r+0x50>
 800f892:	e7c9      	b.n	800f828 <__ssvfiscanf_r+0x1b4>
 800f894:	220a      	movs	r2, #10
 800f896:	e7d7      	b.n	800f848 <__ssvfiscanf_r+0x1d4>
 800f898:	4629      	mov	r1, r5
 800f89a:	4640      	mov	r0, r8
 800f89c:	f000 fc44 	bl	8010128 <__sccl>
 800f8a0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8a6:	9341      	str	r3, [sp, #260]	@ 0x104
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e7d7      	b.n	800f85e <__ssvfiscanf_r+0x1ea>
 800f8ae:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f8b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8b4:	9341      	str	r3, [sp, #260]	@ 0x104
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e7d1      	b.n	800f85e <__ssvfiscanf_r+0x1ea>
 800f8ba:	2302      	movs	r3, #2
 800f8bc:	e7cf      	b.n	800f85e <__ssvfiscanf_r+0x1ea>
 800f8be:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f8c0:	06c3      	lsls	r3, r0, #27
 800f8c2:	f53f aeff 	bmi.w	800f6c4 <__ssvfiscanf_r+0x50>
 800f8c6:	9b00      	ldr	r3, [sp, #0]
 800f8c8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f8ca:	1d19      	adds	r1, r3, #4
 800f8cc:	9100      	str	r1, [sp, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	07c0      	lsls	r0, r0, #31
 800f8d2:	bf4c      	ite	mi
 800f8d4:	801a      	strhmi	r2, [r3, #0]
 800f8d6:	601a      	strpl	r2, [r3, #0]
 800f8d8:	e6f4      	b.n	800f6c4 <__ssvfiscanf_r+0x50>
 800f8da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f8dc:	4621      	mov	r1, r4
 800f8de:	4630      	mov	r0, r6
 800f8e0:	4798      	blx	r3
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d0bf      	beq.n	800f866 <__ssvfiscanf_r+0x1f2>
 800f8e6:	e79f      	b.n	800f828 <__ssvfiscanf_r+0x1b4>
 800f8e8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f8ea:	3201      	adds	r2, #1
 800f8ec:	9245      	str	r2, [sp, #276]	@ 0x114
 800f8ee:	6862      	ldr	r2, [r4, #4]
 800f8f0:	3a01      	subs	r2, #1
 800f8f2:	2a00      	cmp	r2, #0
 800f8f4:	6062      	str	r2, [r4, #4]
 800f8f6:	dd02      	ble.n	800f8fe <__ssvfiscanf_r+0x28a>
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	6023      	str	r3, [r4, #0]
 800f8fc:	e7b6      	b.n	800f86c <__ssvfiscanf_r+0x1f8>
 800f8fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f900:	4621      	mov	r1, r4
 800f902:	4630      	mov	r0, r6
 800f904:	4798      	blx	r3
 800f906:	2800      	cmp	r0, #0
 800f908:	d0b0      	beq.n	800f86c <__ssvfiscanf_r+0x1f8>
 800f90a:	e78d      	b.n	800f828 <__ssvfiscanf_r+0x1b4>
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	dc0f      	bgt.n	800f930 <__ssvfiscanf_r+0x2bc>
 800f910:	466b      	mov	r3, sp
 800f912:	4622      	mov	r2, r4
 800f914:	a941      	add	r1, sp, #260	@ 0x104
 800f916:	4630      	mov	r0, r6
 800f918:	f000 f9be 	bl	800fc98 <_scanf_i>
 800f91c:	e7b4      	b.n	800f888 <__ssvfiscanf_r+0x214>
 800f91e:	bf00      	nop
 800f920:	0800f5c1 	.word	0x0800f5c1
 800f924:	0800f63b 	.word	0x0800f63b
 800f928:	080112c9 	.word	0x080112c9
 800f92c:	080111d5 	.word	0x080111d5
 800f930:	4b0a      	ldr	r3, [pc, #40]	@ (800f95c <__ssvfiscanf_r+0x2e8>)
 800f932:	2b00      	cmp	r3, #0
 800f934:	f43f aec6 	beq.w	800f6c4 <__ssvfiscanf_r+0x50>
 800f938:	466b      	mov	r3, sp
 800f93a:	4622      	mov	r2, r4
 800f93c:	a941      	add	r1, sp, #260	@ 0x104
 800f93e:	4630      	mov	r0, r6
 800f940:	f3af 8000 	nop.w
 800f944:	e7a0      	b.n	800f888 <__ssvfiscanf_r+0x214>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	065b      	lsls	r3, r3, #25
 800f94a:	f53f af71 	bmi.w	800f830 <__ssvfiscanf_r+0x1bc>
 800f94e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f956:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f958:	e7f9      	b.n	800f94e <__ssvfiscanf_r+0x2da>
 800f95a:	bf00      	nop
 800f95c:	00000000 	.word	0x00000000

0800f960 <__sfputc_r>:
 800f960:	6893      	ldr	r3, [r2, #8]
 800f962:	3b01      	subs	r3, #1
 800f964:	2b00      	cmp	r3, #0
 800f966:	b410      	push	{r4}
 800f968:	6093      	str	r3, [r2, #8]
 800f96a:	da08      	bge.n	800f97e <__sfputc_r+0x1e>
 800f96c:	6994      	ldr	r4, [r2, #24]
 800f96e:	42a3      	cmp	r3, r4
 800f970:	db01      	blt.n	800f976 <__sfputc_r+0x16>
 800f972:	290a      	cmp	r1, #10
 800f974:	d103      	bne.n	800f97e <__sfputc_r+0x1e>
 800f976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f97a:	f7fc bbc4 	b.w	800c106 <__swbuf_r>
 800f97e:	6813      	ldr	r3, [r2, #0]
 800f980:	1c58      	adds	r0, r3, #1
 800f982:	6010      	str	r0, [r2, #0]
 800f984:	7019      	strb	r1, [r3, #0]
 800f986:	4608      	mov	r0, r1
 800f988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <__sfputs_r>:
 800f98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f990:	4606      	mov	r6, r0
 800f992:	460f      	mov	r7, r1
 800f994:	4614      	mov	r4, r2
 800f996:	18d5      	adds	r5, r2, r3
 800f998:	42ac      	cmp	r4, r5
 800f99a:	d101      	bne.n	800f9a0 <__sfputs_r+0x12>
 800f99c:	2000      	movs	r0, #0
 800f99e:	e007      	b.n	800f9b0 <__sfputs_r+0x22>
 800f9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a4:	463a      	mov	r2, r7
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f7ff ffda 	bl	800f960 <__sfputc_r>
 800f9ac:	1c43      	adds	r3, r0, #1
 800f9ae:	d1f3      	bne.n	800f998 <__sfputs_r+0xa>
 800f9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9b4 <_vfiprintf_r>:
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	460d      	mov	r5, r1
 800f9ba:	b09d      	sub	sp, #116	@ 0x74
 800f9bc:	4614      	mov	r4, r2
 800f9be:	4698      	mov	r8, r3
 800f9c0:	4606      	mov	r6, r0
 800f9c2:	b118      	cbz	r0, 800f9cc <_vfiprintf_r+0x18>
 800f9c4:	6a03      	ldr	r3, [r0, #32]
 800f9c6:	b90b      	cbnz	r3, 800f9cc <_vfiprintf_r+0x18>
 800f9c8:	f7fc fa26 	bl	800be18 <__sinit>
 800f9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9ce:	07d9      	lsls	r1, r3, #31
 800f9d0:	d405      	bmi.n	800f9de <_vfiprintf_r+0x2a>
 800f9d2:	89ab      	ldrh	r3, [r5, #12]
 800f9d4:	059a      	lsls	r2, r3, #22
 800f9d6:	d402      	bmi.n	800f9de <_vfiprintf_r+0x2a>
 800f9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9da:	f7fd fc2f 	bl	800d23c <__retarget_lock_acquire_recursive>
 800f9de:	89ab      	ldrh	r3, [r5, #12]
 800f9e0:	071b      	lsls	r3, r3, #28
 800f9e2:	d501      	bpl.n	800f9e8 <_vfiprintf_r+0x34>
 800f9e4:	692b      	ldr	r3, [r5, #16]
 800f9e6:	b99b      	cbnz	r3, 800fa10 <_vfiprintf_r+0x5c>
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7fc fbca 	bl	800c184 <__swsetup_r>
 800f9f0:	b170      	cbz	r0, 800fa10 <_vfiprintf_r+0x5c>
 800f9f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9f4:	07dc      	lsls	r4, r3, #31
 800f9f6:	d504      	bpl.n	800fa02 <_vfiprintf_r+0x4e>
 800f9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9fc:	b01d      	add	sp, #116	@ 0x74
 800f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa02:	89ab      	ldrh	r3, [r5, #12]
 800fa04:	0598      	lsls	r0, r3, #22
 800fa06:	d4f7      	bmi.n	800f9f8 <_vfiprintf_r+0x44>
 800fa08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa0a:	f7fd fc19 	bl	800d240 <__retarget_lock_release_recursive>
 800fa0e:	e7f3      	b.n	800f9f8 <_vfiprintf_r+0x44>
 800fa10:	2300      	movs	r3, #0
 800fa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa14:	2320      	movs	r3, #32
 800fa16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa1e:	2330      	movs	r3, #48	@ 0x30
 800fa20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fbd0 <_vfiprintf_r+0x21c>
 800fa24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa28:	f04f 0901 	mov.w	r9, #1
 800fa2c:	4623      	mov	r3, r4
 800fa2e:	469a      	mov	sl, r3
 800fa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa34:	b10a      	cbz	r2, 800fa3a <_vfiprintf_r+0x86>
 800fa36:	2a25      	cmp	r2, #37	@ 0x25
 800fa38:	d1f9      	bne.n	800fa2e <_vfiprintf_r+0x7a>
 800fa3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa3e:	d00b      	beq.n	800fa58 <_vfiprintf_r+0xa4>
 800fa40:	465b      	mov	r3, fp
 800fa42:	4622      	mov	r2, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	4630      	mov	r0, r6
 800fa48:	f7ff ffa1 	bl	800f98e <__sfputs_r>
 800fa4c:	3001      	adds	r0, #1
 800fa4e:	f000 80a7 	beq.w	800fba0 <_vfiprintf_r+0x1ec>
 800fa52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa54:	445a      	add	r2, fp
 800fa56:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa58:	f89a 3000 	ldrb.w	r3, [sl]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 809f 	beq.w	800fba0 <_vfiprintf_r+0x1ec>
 800fa62:	2300      	movs	r3, #0
 800fa64:	f04f 32ff 	mov.w	r2, #4294967295
 800fa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa6c:	f10a 0a01 	add.w	sl, sl, #1
 800fa70:	9304      	str	r3, [sp, #16]
 800fa72:	9307      	str	r3, [sp, #28]
 800fa74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa78:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa7a:	4654      	mov	r4, sl
 800fa7c:	2205      	movs	r2, #5
 800fa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa82:	4853      	ldr	r0, [pc, #332]	@ (800fbd0 <_vfiprintf_r+0x21c>)
 800fa84:	f7f0 fbbc 	bl	8000200 <memchr>
 800fa88:	9a04      	ldr	r2, [sp, #16]
 800fa8a:	b9d8      	cbnz	r0, 800fac4 <_vfiprintf_r+0x110>
 800fa8c:	06d1      	lsls	r1, r2, #27
 800fa8e:	bf44      	itt	mi
 800fa90:	2320      	movmi	r3, #32
 800fa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa96:	0713      	lsls	r3, r2, #28
 800fa98:	bf44      	itt	mi
 800fa9a:	232b      	movmi	r3, #43	@ 0x2b
 800fa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faa0:	f89a 3000 	ldrb.w	r3, [sl]
 800faa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800faa6:	d015      	beq.n	800fad4 <_vfiprintf_r+0x120>
 800faa8:	9a07      	ldr	r2, [sp, #28]
 800faaa:	4654      	mov	r4, sl
 800faac:	2000      	movs	r0, #0
 800faae:	f04f 0c0a 	mov.w	ip, #10
 800fab2:	4621      	mov	r1, r4
 800fab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fab8:	3b30      	subs	r3, #48	@ 0x30
 800faba:	2b09      	cmp	r3, #9
 800fabc:	d94b      	bls.n	800fb56 <_vfiprintf_r+0x1a2>
 800fabe:	b1b0      	cbz	r0, 800faee <_vfiprintf_r+0x13a>
 800fac0:	9207      	str	r2, [sp, #28]
 800fac2:	e014      	b.n	800faee <_vfiprintf_r+0x13a>
 800fac4:	eba0 0308 	sub.w	r3, r0, r8
 800fac8:	fa09 f303 	lsl.w	r3, r9, r3
 800facc:	4313      	orrs	r3, r2
 800face:	9304      	str	r3, [sp, #16]
 800fad0:	46a2      	mov	sl, r4
 800fad2:	e7d2      	b.n	800fa7a <_vfiprintf_r+0xc6>
 800fad4:	9b03      	ldr	r3, [sp, #12]
 800fad6:	1d19      	adds	r1, r3, #4
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	9103      	str	r1, [sp, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bfbb      	ittet	lt
 800fae0:	425b      	neglt	r3, r3
 800fae2:	f042 0202 	orrlt.w	r2, r2, #2
 800fae6:	9307      	strge	r3, [sp, #28]
 800fae8:	9307      	strlt	r3, [sp, #28]
 800faea:	bfb8      	it	lt
 800faec:	9204      	strlt	r2, [sp, #16]
 800faee:	7823      	ldrb	r3, [r4, #0]
 800faf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800faf2:	d10a      	bne.n	800fb0a <_vfiprintf_r+0x156>
 800faf4:	7863      	ldrb	r3, [r4, #1]
 800faf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800faf8:	d132      	bne.n	800fb60 <_vfiprintf_r+0x1ac>
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	1d1a      	adds	r2, r3, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	9203      	str	r2, [sp, #12]
 800fb02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb06:	3402      	adds	r4, #2
 800fb08:	9305      	str	r3, [sp, #20]
 800fb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbe0 <_vfiprintf_r+0x22c>
 800fb0e:	7821      	ldrb	r1, [r4, #0]
 800fb10:	2203      	movs	r2, #3
 800fb12:	4650      	mov	r0, sl
 800fb14:	f7f0 fb74 	bl	8000200 <memchr>
 800fb18:	b138      	cbz	r0, 800fb2a <_vfiprintf_r+0x176>
 800fb1a:	9b04      	ldr	r3, [sp, #16]
 800fb1c:	eba0 000a 	sub.w	r0, r0, sl
 800fb20:	2240      	movs	r2, #64	@ 0x40
 800fb22:	4082      	lsls	r2, r0
 800fb24:	4313      	orrs	r3, r2
 800fb26:	3401      	adds	r4, #1
 800fb28:	9304      	str	r3, [sp, #16]
 800fb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb2e:	4829      	ldr	r0, [pc, #164]	@ (800fbd4 <_vfiprintf_r+0x220>)
 800fb30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb34:	2206      	movs	r2, #6
 800fb36:	f7f0 fb63 	bl	8000200 <memchr>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d03f      	beq.n	800fbbe <_vfiprintf_r+0x20a>
 800fb3e:	4b26      	ldr	r3, [pc, #152]	@ (800fbd8 <_vfiprintf_r+0x224>)
 800fb40:	bb1b      	cbnz	r3, 800fb8a <_vfiprintf_r+0x1d6>
 800fb42:	9b03      	ldr	r3, [sp, #12]
 800fb44:	3307      	adds	r3, #7
 800fb46:	f023 0307 	bic.w	r3, r3, #7
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	9303      	str	r3, [sp, #12]
 800fb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb50:	443b      	add	r3, r7
 800fb52:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb54:	e76a      	b.n	800fa2c <_vfiprintf_r+0x78>
 800fb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	e7a8      	b.n	800fab2 <_vfiprintf_r+0xfe>
 800fb60:	2300      	movs	r3, #0
 800fb62:	3401      	adds	r4, #1
 800fb64:	9305      	str	r3, [sp, #20]
 800fb66:	4619      	mov	r1, r3
 800fb68:	f04f 0c0a 	mov.w	ip, #10
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb72:	3a30      	subs	r2, #48	@ 0x30
 800fb74:	2a09      	cmp	r2, #9
 800fb76:	d903      	bls.n	800fb80 <_vfiprintf_r+0x1cc>
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0c6      	beq.n	800fb0a <_vfiprintf_r+0x156>
 800fb7c:	9105      	str	r1, [sp, #20]
 800fb7e:	e7c4      	b.n	800fb0a <_vfiprintf_r+0x156>
 800fb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb84:	4604      	mov	r4, r0
 800fb86:	2301      	movs	r3, #1
 800fb88:	e7f0      	b.n	800fb6c <_vfiprintf_r+0x1b8>
 800fb8a:	ab03      	add	r3, sp, #12
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	462a      	mov	r2, r5
 800fb90:	4b12      	ldr	r3, [pc, #72]	@ (800fbdc <_vfiprintf_r+0x228>)
 800fb92:	a904      	add	r1, sp, #16
 800fb94:	4630      	mov	r0, r6
 800fb96:	f7fb fcfd 	bl	800b594 <_printf_float>
 800fb9a:	4607      	mov	r7, r0
 800fb9c:	1c78      	adds	r0, r7, #1
 800fb9e:	d1d6      	bne.n	800fb4e <_vfiprintf_r+0x19a>
 800fba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fba2:	07d9      	lsls	r1, r3, #31
 800fba4:	d405      	bmi.n	800fbb2 <_vfiprintf_r+0x1fe>
 800fba6:	89ab      	ldrh	r3, [r5, #12]
 800fba8:	059a      	lsls	r2, r3, #22
 800fbaa:	d402      	bmi.n	800fbb2 <_vfiprintf_r+0x1fe>
 800fbac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbae:	f7fd fb47 	bl	800d240 <__retarget_lock_release_recursive>
 800fbb2:	89ab      	ldrh	r3, [r5, #12]
 800fbb4:	065b      	lsls	r3, r3, #25
 800fbb6:	f53f af1f 	bmi.w	800f9f8 <_vfiprintf_r+0x44>
 800fbba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbbc:	e71e      	b.n	800f9fc <_vfiprintf_r+0x48>
 800fbbe:	ab03      	add	r3, sp, #12
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	462a      	mov	r2, r5
 800fbc4:	4b05      	ldr	r3, [pc, #20]	@ (800fbdc <_vfiprintf_r+0x228>)
 800fbc6:	a904      	add	r1, sp, #16
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f7fb ff7b 	bl	800bac4 <_printf_i>
 800fbce:	e7e4      	b.n	800fb9a <_vfiprintf_r+0x1e6>
 800fbd0:	080111cf 	.word	0x080111cf
 800fbd4:	080111d9 	.word	0x080111d9
 800fbd8:	0800b595 	.word	0x0800b595
 800fbdc:	0800f98f 	.word	0x0800f98f
 800fbe0:	080111d5 	.word	0x080111d5

0800fbe4 <_scanf_chars>:
 800fbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe8:	4615      	mov	r5, r2
 800fbea:	688a      	ldr	r2, [r1, #8]
 800fbec:	4680      	mov	r8, r0
 800fbee:	460c      	mov	r4, r1
 800fbf0:	b932      	cbnz	r2, 800fc00 <_scanf_chars+0x1c>
 800fbf2:	698a      	ldr	r2, [r1, #24]
 800fbf4:	2a00      	cmp	r2, #0
 800fbf6:	bf14      	ite	ne
 800fbf8:	f04f 32ff 	movne.w	r2, #4294967295
 800fbfc:	2201      	moveq	r2, #1
 800fbfe:	608a      	str	r2, [r1, #8]
 800fc00:	6822      	ldr	r2, [r4, #0]
 800fc02:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800fc94 <_scanf_chars+0xb0>
 800fc06:	06d1      	lsls	r1, r2, #27
 800fc08:	bf5f      	itttt	pl
 800fc0a:	681a      	ldrpl	r2, [r3, #0]
 800fc0c:	1d11      	addpl	r1, r2, #4
 800fc0e:	6019      	strpl	r1, [r3, #0]
 800fc10:	6816      	ldrpl	r6, [r2, #0]
 800fc12:	2700      	movs	r7, #0
 800fc14:	69a0      	ldr	r0, [r4, #24]
 800fc16:	b188      	cbz	r0, 800fc3c <_scanf_chars+0x58>
 800fc18:	2801      	cmp	r0, #1
 800fc1a:	d107      	bne.n	800fc2c <_scanf_chars+0x48>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	781a      	ldrb	r2, [r3, #0]
 800fc20:	6963      	ldr	r3, [r4, #20]
 800fc22:	5c9b      	ldrb	r3, [r3, r2]
 800fc24:	b953      	cbnz	r3, 800fc3c <_scanf_chars+0x58>
 800fc26:	2f00      	cmp	r7, #0
 800fc28:	d031      	beq.n	800fc8e <_scanf_chars+0xaa>
 800fc2a:	e022      	b.n	800fc72 <_scanf_chars+0x8e>
 800fc2c:	2802      	cmp	r0, #2
 800fc2e:	d120      	bne.n	800fc72 <_scanf_chars+0x8e>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fc38:	071b      	lsls	r3, r3, #28
 800fc3a:	d41a      	bmi.n	800fc72 <_scanf_chars+0x8e>
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	06da      	lsls	r2, r3, #27
 800fc40:	bf5e      	ittt	pl
 800fc42:	682b      	ldrpl	r3, [r5, #0]
 800fc44:	781b      	ldrbpl	r3, [r3, #0]
 800fc46:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fc4a:	682a      	ldr	r2, [r5, #0]
 800fc4c:	686b      	ldr	r3, [r5, #4]
 800fc4e:	3201      	adds	r2, #1
 800fc50:	602a      	str	r2, [r5, #0]
 800fc52:	68a2      	ldr	r2, [r4, #8]
 800fc54:	3b01      	subs	r3, #1
 800fc56:	3a01      	subs	r2, #1
 800fc58:	606b      	str	r3, [r5, #4]
 800fc5a:	3701      	adds	r7, #1
 800fc5c:	60a2      	str	r2, [r4, #8]
 800fc5e:	b142      	cbz	r2, 800fc72 <_scanf_chars+0x8e>
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	dcd7      	bgt.n	800fc14 <_scanf_chars+0x30>
 800fc64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fc68:	4629      	mov	r1, r5
 800fc6a:	4640      	mov	r0, r8
 800fc6c:	4798      	blx	r3
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d0d0      	beq.n	800fc14 <_scanf_chars+0x30>
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	f013 0310 	ands.w	r3, r3, #16
 800fc78:	d105      	bne.n	800fc86 <_scanf_chars+0xa2>
 800fc7a:	68e2      	ldr	r2, [r4, #12]
 800fc7c:	3201      	adds	r2, #1
 800fc7e:	60e2      	str	r2, [r4, #12]
 800fc80:	69a2      	ldr	r2, [r4, #24]
 800fc82:	b102      	cbz	r2, 800fc86 <_scanf_chars+0xa2>
 800fc84:	7033      	strb	r3, [r6, #0]
 800fc86:	6923      	ldr	r3, [r4, #16]
 800fc88:	443b      	add	r3, r7
 800fc8a:	6123      	str	r3, [r4, #16]
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc92:	bf00      	nop
 800fc94:	080112c9 	.word	0x080112c9

0800fc98 <_scanf_i>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	4698      	mov	r8, r3
 800fc9e:	4b74      	ldr	r3, [pc, #464]	@ (800fe70 <_scanf_i+0x1d8>)
 800fca0:	460c      	mov	r4, r1
 800fca2:	4682      	mov	sl, r0
 800fca4:	4616      	mov	r6, r2
 800fca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fcaa:	b087      	sub	sp, #28
 800fcac:	ab03      	add	r3, sp, #12
 800fcae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcb2:	4b70      	ldr	r3, [pc, #448]	@ (800fe74 <_scanf_i+0x1dc>)
 800fcb4:	69a1      	ldr	r1, [r4, #24]
 800fcb6:	4a70      	ldr	r2, [pc, #448]	@ (800fe78 <_scanf_i+0x1e0>)
 800fcb8:	2903      	cmp	r1, #3
 800fcba:	bf08      	it	eq
 800fcbc:	461a      	moveq	r2, r3
 800fcbe:	68a3      	ldr	r3, [r4, #8]
 800fcc0:	9201      	str	r2, [sp, #4]
 800fcc2:	1e5a      	subs	r2, r3, #1
 800fcc4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fcc8:	bf88      	it	hi
 800fcca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fcce:	4627      	mov	r7, r4
 800fcd0:	bf82      	ittt	hi
 800fcd2:	eb03 0905 	addhi.w	r9, r3, r5
 800fcd6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fcda:	60a3      	strhi	r3, [r4, #8]
 800fcdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fce0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800fce4:	bf98      	it	ls
 800fce6:	f04f 0900 	movls.w	r9, #0
 800fcea:	6023      	str	r3, [r4, #0]
 800fcec:	463d      	mov	r5, r7
 800fcee:	f04f 0b00 	mov.w	fp, #0
 800fcf2:	6831      	ldr	r1, [r6, #0]
 800fcf4:	ab03      	add	r3, sp, #12
 800fcf6:	7809      	ldrb	r1, [r1, #0]
 800fcf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fcfc:	2202      	movs	r2, #2
 800fcfe:	f7f0 fa7f 	bl	8000200 <memchr>
 800fd02:	b328      	cbz	r0, 800fd50 <_scanf_i+0xb8>
 800fd04:	f1bb 0f01 	cmp.w	fp, #1
 800fd08:	d159      	bne.n	800fdbe <_scanf_i+0x126>
 800fd0a:	6862      	ldr	r2, [r4, #4]
 800fd0c:	b92a      	cbnz	r2, 800fd1a <_scanf_i+0x82>
 800fd0e:	6822      	ldr	r2, [r4, #0]
 800fd10:	2108      	movs	r1, #8
 800fd12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fd16:	6061      	str	r1, [r4, #4]
 800fd18:	6022      	str	r2, [r4, #0]
 800fd1a:	6822      	ldr	r2, [r4, #0]
 800fd1c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800fd20:	6022      	str	r2, [r4, #0]
 800fd22:	68a2      	ldr	r2, [r4, #8]
 800fd24:	1e51      	subs	r1, r2, #1
 800fd26:	60a1      	str	r1, [r4, #8]
 800fd28:	b192      	cbz	r2, 800fd50 <_scanf_i+0xb8>
 800fd2a:	6832      	ldr	r2, [r6, #0]
 800fd2c:	1c51      	adds	r1, r2, #1
 800fd2e:	6031      	str	r1, [r6, #0]
 800fd30:	7812      	ldrb	r2, [r2, #0]
 800fd32:	f805 2b01 	strb.w	r2, [r5], #1
 800fd36:	6872      	ldr	r2, [r6, #4]
 800fd38:	3a01      	subs	r2, #1
 800fd3a:	2a00      	cmp	r2, #0
 800fd3c:	6072      	str	r2, [r6, #4]
 800fd3e:	dc07      	bgt.n	800fd50 <_scanf_i+0xb8>
 800fd40:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800fd44:	4631      	mov	r1, r6
 800fd46:	4650      	mov	r0, sl
 800fd48:	4790      	blx	r2
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	f040 8085 	bne.w	800fe5a <_scanf_i+0x1c2>
 800fd50:	f10b 0b01 	add.w	fp, fp, #1
 800fd54:	f1bb 0f03 	cmp.w	fp, #3
 800fd58:	d1cb      	bne.n	800fcf2 <_scanf_i+0x5a>
 800fd5a:	6863      	ldr	r3, [r4, #4]
 800fd5c:	b90b      	cbnz	r3, 800fd62 <_scanf_i+0xca>
 800fd5e:	230a      	movs	r3, #10
 800fd60:	6063      	str	r3, [r4, #4]
 800fd62:	6863      	ldr	r3, [r4, #4]
 800fd64:	4945      	ldr	r1, [pc, #276]	@ (800fe7c <_scanf_i+0x1e4>)
 800fd66:	6960      	ldr	r0, [r4, #20]
 800fd68:	1ac9      	subs	r1, r1, r3
 800fd6a:	f000 f9dd 	bl	8010128 <__sccl>
 800fd6e:	f04f 0b00 	mov.w	fp, #0
 800fd72:	68a3      	ldr	r3, [r4, #8]
 800fd74:	6822      	ldr	r2, [r4, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d03d      	beq.n	800fdf6 <_scanf_i+0x15e>
 800fd7a:	6831      	ldr	r1, [r6, #0]
 800fd7c:	6960      	ldr	r0, [r4, #20]
 800fd7e:	f891 c000 	ldrb.w	ip, [r1]
 800fd82:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d035      	beq.n	800fdf6 <_scanf_i+0x15e>
 800fd8a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800fd8e:	d124      	bne.n	800fdda <_scanf_i+0x142>
 800fd90:	0510      	lsls	r0, r2, #20
 800fd92:	d522      	bpl.n	800fdda <_scanf_i+0x142>
 800fd94:	f10b 0b01 	add.w	fp, fp, #1
 800fd98:	f1b9 0f00 	cmp.w	r9, #0
 800fd9c:	d003      	beq.n	800fda6 <_scanf_i+0x10e>
 800fd9e:	3301      	adds	r3, #1
 800fda0:	f109 39ff 	add.w	r9, r9, #4294967295
 800fda4:	60a3      	str	r3, [r4, #8]
 800fda6:	6873      	ldr	r3, [r6, #4]
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	6073      	str	r3, [r6, #4]
 800fdae:	dd1b      	ble.n	800fde8 <_scanf_i+0x150>
 800fdb0:	6833      	ldr	r3, [r6, #0]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	6033      	str	r3, [r6, #0]
 800fdb6:	68a3      	ldr	r3, [r4, #8]
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	60a3      	str	r3, [r4, #8]
 800fdbc:	e7d9      	b.n	800fd72 <_scanf_i+0xda>
 800fdbe:	f1bb 0f02 	cmp.w	fp, #2
 800fdc2:	d1ae      	bne.n	800fd22 <_scanf_i+0x8a>
 800fdc4:	6822      	ldr	r2, [r4, #0]
 800fdc6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800fdca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800fdce:	d1c4      	bne.n	800fd5a <_scanf_i+0xc2>
 800fdd0:	2110      	movs	r1, #16
 800fdd2:	6061      	str	r1, [r4, #4]
 800fdd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fdd8:	e7a2      	b.n	800fd20 <_scanf_i+0x88>
 800fdda:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800fdde:	6022      	str	r2, [r4, #0]
 800fde0:	780b      	ldrb	r3, [r1, #0]
 800fde2:	f805 3b01 	strb.w	r3, [r5], #1
 800fde6:	e7de      	b.n	800fda6 <_scanf_i+0x10e>
 800fde8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fdec:	4631      	mov	r1, r6
 800fdee:	4650      	mov	r0, sl
 800fdf0:	4798      	blx	r3
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d0df      	beq.n	800fdb6 <_scanf_i+0x11e>
 800fdf6:	6823      	ldr	r3, [r4, #0]
 800fdf8:	05d9      	lsls	r1, r3, #23
 800fdfa:	d50d      	bpl.n	800fe18 <_scanf_i+0x180>
 800fdfc:	42bd      	cmp	r5, r7
 800fdfe:	d909      	bls.n	800fe14 <_scanf_i+0x17c>
 800fe00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fe04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe08:	4632      	mov	r2, r6
 800fe0a:	4650      	mov	r0, sl
 800fe0c:	4798      	blx	r3
 800fe0e:	f105 39ff 	add.w	r9, r5, #4294967295
 800fe12:	464d      	mov	r5, r9
 800fe14:	42bd      	cmp	r5, r7
 800fe16:	d028      	beq.n	800fe6a <_scanf_i+0x1d2>
 800fe18:	6822      	ldr	r2, [r4, #0]
 800fe1a:	f012 0210 	ands.w	r2, r2, #16
 800fe1e:	d113      	bne.n	800fe48 <_scanf_i+0x1b0>
 800fe20:	702a      	strb	r2, [r5, #0]
 800fe22:	6863      	ldr	r3, [r4, #4]
 800fe24:	9e01      	ldr	r6, [sp, #4]
 800fe26:	4639      	mov	r1, r7
 800fe28:	4650      	mov	r0, sl
 800fe2a:	47b0      	blx	r6
 800fe2c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe30:	6821      	ldr	r1, [r4, #0]
 800fe32:	1d1a      	adds	r2, r3, #4
 800fe34:	f8c8 2000 	str.w	r2, [r8]
 800fe38:	f011 0f20 	tst.w	r1, #32
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	d00f      	beq.n	800fe60 <_scanf_i+0x1c8>
 800fe40:	6018      	str	r0, [r3, #0]
 800fe42:	68e3      	ldr	r3, [r4, #12]
 800fe44:	3301      	adds	r3, #1
 800fe46:	60e3      	str	r3, [r4, #12]
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	1bed      	subs	r5, r5, r7
 800fe4c:	445d      	add	r5, fp
 800fe4e:	442b      	add	r3, r5
 800fe50:	6123      	str	r3, [r4, #16]
 800fe52:	2000      	movs	r0, #0
 800fe54:	b007      	add	sp, #28
 800fe56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5a:	f04f 0b00 	mov.w	fp, #0
 800fe5e:	e7ca      	b.n	800fdf6 <_scanf_i+0x15e>
 800fe60:	07ca      	lsls	r2, r1, #31
 800fe62:	bf4c      	ite	mi
 800fe64:	8018      	strhmi	r0, [r3, #0]
 800fe66:	6018      	strpl	r0, [r3, #0]
 800fe68:	e7eb      	b.n	800fe42 <_scanf_i+0x1aa>
 800fe6a:	2001      	movs	r0, #1
 800fe6c:	e7f2      	b.n	800fe54 <_scanf_i+0x1bc>
 800fe6e:	bf00      	nop
 800fe70:	08010e2c 	.word	0x08010e2c
 800fe74:	0800b43d 	.word	0x0800b43d
 800fe78:	0800f2e1 	.word	0x0800f2e1
 800fe7c:	080111f0 	.word	0x080111f0

0800fe80 <__sflush_r>:
 800fe80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	0716      	lsls	r6, r2, #28
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	d454      	bmi.n	800ff3a <__sflush_r+0xba>
 800fe90:	684b      	ldr	r3, [r1, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	dc02      	bgt.n	800fe9c <__sflush_r+0x1c>
 800fe96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dd48      	ble.n	800ff2e <__sflush_r+0xae>
 800fe9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe9e:	2e00      	cmp	r6, #0
 800fea0:	d045      	beq.n	800ff2e <__sflush_r+0xae>
 800fea2:	2300      	movs	r3, #0
 800fea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fea8:	682f      	ldr	r7, [r5, #0]
 800feaa:	6a21      	ldr	r1, [r4, #32]
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	d030      	beq.n	800ff12 <__sflush_r+0x92>
 800feb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	0759      	lsls	r1, r3, #29
 800feb6:	d505      	bpl.n	800fec4 <__sflush_r+0x44>
 800feb8:	6863      	ldr	r3, [r4, #4]
 800feba:	1ad2      	subs	r2, r2, r3
 800febc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800febe:	b10b      	cbz	r3, 800fec4 <__sflush_r+0x44>
 800fec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fec2:	1ad2      	subs	r2, r2, r3
 800fec4:	2300      	movs	r3, #0
 800fec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fec8:	6a21      	ldr	r1, [r4, #32]
 800feca:	4628      	mov	r0, r5
 800fecc:	47b0      	blx	r6
 800fece:	1c43      	adds	r3, r0, #1
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	d106      	bne.n	800fee2 <__sflush_r+0x62>
 800fed4:	6829      	ldr	r1, [r5, #0]
 800fed6:	291d      	cmp	r1, #29
 800fed8:	d82b      	bhi.n	800ff32 <__sflush_r+0xb2>
 800feda:	4a2a      	ldr	r2, [pc, #168]	@ (800ff84 <__sflush_r+0x104>)
 800fedc:	40ca      	lsrs	r2, r1
 800fede:	07d6      	lsls	r6, r2, #31
 800fee0:	d527      	bpl.n	800ff32 <__sflush_r+0xb2>
 800fee2:	2200      	movs	r2, #0
 800fee4:	6062      	str	r2, [r4, #4]
 800fee6:	04d9      	lsls	r1, r3, #19
 800fee8:	6922      	ldr	r2, [r4, #16]
 800feea:	6022      	str	r2, [r4, #0]
 800feec:	d504      	bpl.n	800fef8 <__sflush_r+0x78>
 800feee:	1c42      	adds	r2, r0, #1
 800fef0:	d101      	bne.n	800fef6 <__sflush_r+0x76>
 800fef2:	682b      	ldr	r3, [r5, #0]
 800fef4:	b903      	cbnz	r3, 800fef8 <__sflush_r+0x78>
 800fef6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fefa:	602f      	str	r7, [r5, #0]
 800fefc:	b1b9      	cbz	r1, 800ff2e <__sflush_r+0xae>
 800fefe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff02:	4299      	cmp	r1, r3
 800ff04:	d002      	beq.n	800ff0c <__sflush_r+0x8c>
 800ff06:	4628      	mov	r0, r5
 800ff08:	f7fe f83a 	bl	800df80 <_free_r>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff10:	e00d      	b.n	800ff2e <__sflush_r+0xae>
 800ff12:	2301      	movs	r3, #1
 800ff14:	4628      	mov	r0, r5
 800ff16:	47b0      	blx	r6
 800ff18:	4602      	mov	r2, r0
 800ff1a:	1c50      	adds	r0, r2, #1
 800ff1c:	d1c9      	bne.n	800feb2 <__sflush_r+0x32>
 800ff1e:	682b      	ldr	r3, [r5, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0c6      	beq.n	800feb2 <__sflush_r+0x32>
 800ff24:	2b1d      	cmp	r3, #29
 800ff26:	d001      	beq.n	800ff2c <__sflush_r+0xac>
 800ff28:	2b16      	cmp	r3, #22
 800ff2a:	d11e      	bne.n	800ff6a <__sflush_r+0xea>
 800ff2c:	602f      	str	r7, [r5, #0]
 800ff2e:	2000      	movs	r0, #0
 800ff30:	e022      	b.n	800ff78 <__sflush_r+0xf8>
 800ff32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	e01b      	b.n	800ff72 <__sflush_r+0xf2>
 800ff3a:	690f      	ldr	r7, [r1, #16]
 800ff3c:	2f00      	cmp	r7, #0
 800ff3e:	d0f6      	beq.n	800ff2e <__sflush_r+0xae>
 800ff40:	0793      	lsls	r3, r2, #30
 800ff42:	680e      	ldr	r6, [r1, #0]
 800ff44:	bf08      	it	eq
 800ff46:	694b      	ldreq	r3, [r1, #20]
 800ff48:	600f      	str	r7, [r1, #0]
 800ff4a:	bf18      	it	ne
 800ff4c:	2300      	movne	r3, #0
 800ff4e:	eba6 0807 	sub.w	r8, r6, r7
 800ff52:	608b      	str	r3, [r1, #8]
 800ff54:	f1b8 0f00 	cmp.w	r8, #0
 800ff58:	dde9      	ble.n	800ff2e <__sflush_r+0xae>
 800ff5a:	6a21      	ldr	r1, [r4, #32]
 800ff5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff5e:	4643      	mov	r3, r8
 800ff60:	463a      	mov	r2, r7
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b0      	blx	r6
 800ff66:	2800      	cmp	r0, #0
 800ff68:	dc08      	bgt.n	800ff7c <__sflush_r+0xfc>
 800ff6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7c:	4407      	add	r7, r0
 800ff7e:	eba8 0800 	sub.w	r8, r8, r0
 800ff82:	e7e7      	b.n	800ff54 <__sflush_r+0xd4>
 800ff84:	20400001 	.word	0x20400001

0800ff88 <_fflush_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	690b      	ldr	r3, [r1, #16]
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	460c      	mov	r4, r1
 800ff90:	b913      	cbnz	r3, 800ff98 <_fflush_r+0x10>
 800ff92:	2500      	movs	r5, #0
 800ff94:	4628      	mov	r0, r5
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	b118      	cbz	r0, 800ffa2 <_fflush_r+0x1a>
 800ff9a:	6a03      	ldr	r3, [r0, #32]
 800ff9c:	b90b      	cbnz	r3, 800ffa2 <_fflush_r+0x1a>
 800ff9e:	f7fb ff3b 	bl	800be18 <__sinit>
 800ffa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0f3      	beq.n	800ff92 <_fflush_r+0xa>
 800ffaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffac:	07d0      	lsls	r0, r2, #31
 800ffae:	d404      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb0:	0599      	lsls	r1, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffb6:	f7fd f941 	bl	800d23c <__retarget_lock_acquire_recursive>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	f7ff ff5f 	bl	800fe80 <__sflush_r>
 800ffc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffc4:	07da      	lsls	r2, r3, #31
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	d4e4      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	059b      	lsls	r3, r3, #22
 800ffce:	d4e1      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffd2:	f7fd f935 	bl	800d240 <__retarget_lock_release_recursive>
 800ffd6:	e7dd      	b.n	800ff94 <_fflush_r+0xc>

0800ffd8 <fiprintf>:
 800ffd8:	b40e      	push	{r1, r2, r3}
 800ffda:	b503      	push	{r0, r1, lr}
 800ffdc:	4601      	mov	r1, r0
 800ffde:	ab03      	add	r3, sp, #12
 800ffe0:	4805      	ldr	r0, [pc, #20]	@ (800fff8 <fiprintf+0x20>)
 800ffe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe6:	6800      	ldr	r0, [r0, #0]
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	f7ff fce3 	bl	800f9b4 <_vfiprintf_r>
 800ffee:	b002      	add	sp, #8
 800fff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fff4:	b003      	add	sp, #12
 800fff6:	4770      	bx	lr
 800fff8:	2000019c 	.word	0x2000019c

0800fffc <__swhatbuf_r>:
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	460c      	mov	r4, r1
 8010000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010004:	2900      	cmp	r1, #0
 8010006:	b096      	sub	sp, #88	@ 0x58
 8010008:	4615      	mov	r5, r2
 801000a:	461e      	mov	r6, r3
 801000c:	da0d      	bge.n	801002a <__swhatbuf_r+0x2e>
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010014:	f04f 0100 	mov.w	r1, #0
 8010018:	bf14      	ite	ne
 801001a:	2340      	movne	r3, #64	@ 0x40
 801001c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010020:	2000      	movs	r0, #0
 8010022:	6031      	str	r1, [r6, #0]
 8010024:	602b      	str	r3, [r5, #0]
 8010026:	b016      	add	sp, #88	@ 0x58
 8010028:	bd70      	pop	{r4, r5, r6, pc}
 801002a:	466a      	mov	r2, sp
 801002c:	f000 f9e2 	bl	80103f4 <_fstat_r>
 8010030:	2800      	cmp	r0, #0
 8010032:	dbec      	blt.n	801000e <__swhatbuf_r+0x12>
 8010034:	9901      	ldr	r1, [sp, #4]
 8010036:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801003a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801003e:	4259      	negs	r1, r3
 8010040:	4159      	adcs	r1, r3
 8010042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010046:	e7eb      	b.n	8010020 <__swhatbuf_r+0x24>

08010048 <__smakebuf_r>:
 8010048:	898b      	ldrh	r3, [r1, #12]
 801004a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801004c:	079d      	lsls	r5, r3, #30
 801004e:	4606      	mov	r6, r0
 8010050:	460c      	mov	r4, r1
 8010052:	d507      	bpl.n	8010064 <__smakebuf_r+0x1c>
 8010054:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010058:	6023      	str	r3, [r4, #0]
 801005a:	6123      	str	r3, [r4, #16]
 801005c:	2301      	movs	r3, #1
 801005e:	6163      	str	r3, [r4, #20]
 8010060:	b003      	add	sp, #12
 8010062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010064:	ab01      	add	r3, sp, #4
 8010066:	466a      	mov	r2, sp
 8010068:	f7ff ffc8 	bl	800fffc <__swhatbuf_r>
 801006c:	9f00      	ldr	r7, [sp, #0]
 801006e:	4605      	mov	r5, r0
 8010070:	4639      	mov	r1, r7
 8010072:	4630      	mov	r0, r6
 8010074:	f7fe fb7e 	bl	800e774 <_malloc_r>
 8010078:	b948      	cbnz	r0, 801008e <__smakebuf_r+0x46>
 801007a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801007e:	059a      	lsls	r2, r3, #22
 8010080:	d4ee      	bmi.n	8010060 <__smakebuf_r+0x18>
 8010082:	f023 0303 	bic.w	r3, r3, #3
 8010086:	f043 0302 	orr.w	r3, r3, #2
 801008a:	81a3      	strh	r3, [r4, #12]
 801008c:	e7e2      	b.n	8010054 <__smakebuf_r+0xc>
 801008e:	89a3      	ldrh	r3, [r4, #12]
 8010090:	6020      	str	r0, [r4, #0]
 8010092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010096:	81a3      	strh	r3, [r4, #12]
 8010098:	9b01      	ldr	r3, [sp, #4]
 801009a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801009e:	b15b      	cbz	r3, 80100b8 <__smakebuf_r+0x70>
 80100a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100a4:	4630      	mov	r0, r6
 80100a6:	f000 f9b7 	bl	8010418 <_isatty_r>
 80100aa:	b128      	cbz	r0, 80100b8 <__smakebuf_r+0x70>
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	f023 0303 	bic.w	r3, r3, #3
 80100b2:	f043 0301 	orr.w	r3, r3, #1
 80100b6:	81a3      	strh	r3, [r4, #12]
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	431d      	orrs	r5, r3
 80100bc:	81a5      	strh	r5, [r4, #12]
 80100be:	e7cf      	b.n	8010060 <__smakebuf_r+0x18>

080100c0 <_putc_r>:
 80100c0:	b570      	push	{r4, r5, r6, lr}
 80100c2:	460d      	mov	r5, r1
 80100c4:	4614      	mov	r4, r2
 80100c6:	4606      	mov	r6, r0
 80100c8:	b118      	cbz	r0, 80100d2 <_putc_r+0x12>
 80100ca:	6a03      	ldr	r3, [r0, #32]
 80100cc:	b90b      	cbnz	r3, 80100d2 <_putc_r+0x12>
 80100ce:	f7fb fea3 	bl	800be18 <__sinit>
 80100d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100d4:	07d8      	lsls	r0, r3, #31
 80100d6:	d405      	bmi.n	80100e4 <_putc_r+0x24>
 80100d8:	89a3      	ldrh	r3, [r4, #12]
 80100da:	0599      	lsls	r1, r3, #22
 80100dc:	d402      	bmi.n	80100e4 <_putc_r+0x24>
 80100de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100e0:	f7fd f8ac 	bl	800d23c <__retarget_lock_acquire_recursive>
 80100e4:	68a3      	ldr	r3, [r4, #8]
 80100e6:	3b01      	subs	r3, #1
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	60a3      	str	r3, [r4, #8]
 80100ec:	da05      	bge.n	80100fa <_putc_r+0x3a>
 80100ee:	69a2      	ldr	r2, [r4, #24]
 80100f0:	4293      	cmp	r3, r2
 80100f2:	db12      	blt.n	801011a <_putc_r+0x5a>
 80100f4:	b2eb      	uxtb	r3, r5
 80100f6:	2b0a      	cmp	r3, #10
 80100f8:	d00f      	beq.n	801011a <_putc_r+0x5a>
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	6022      	str	r2, [r4, #0]
 8010100:	701d      	strb	r5, [r3, #0]
 8010102:	b2ed      	uxtb	r5, r5
 8010104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010106:	07da      	lsls	r2, r3, #31
 8010108:	d405      	bmi.n	8010116 <_putc_r+0x56>
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	059b      	lsls	r3, r3, #22
 801010e:	d402      	bmi.n	8010116 <_putc_r+0x56>
 8010110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010112:	f7fd f895 	bl	800d240 <__retarget_lock_release_recursive>
 8010116:	4628      	mov	r0, r5
 8010118:	bd70      	pop	{r4, r5, r6, pc}
 801011a:	4629      	mov	r1, r5
 801011c:	4622      	mov	r2, r4
 801011e:	4630      	mov	r0, r6
 8010120:	f7fb fff1 	bl	800c106 <__swbuf_r>
 8010124:	4605      	mov	r5, r0
 8010126:	e7ed      	b.n	8010104 <_putc_r+0x44>

08010128 <__sccl>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	780b      	ldrb	r3, [r1, #0]
 801012c:	4604      	mov	r4, r0
 801012e:	2b5e      	cmp	r3, #94	@ 0x5e
 8010130:	bf0b      	itete	eq
 8010132:	784b      	ldrbeq	r3, [r1, #1]
 8010134:	1c4a      	addne	r2, r1, #1
 8010136:	1c8a      	addeq	r2, r1, #2
 8010138:	2100      	movne	r1, #0
 801013a:	bf08      	it	eq
 801013c:	2101      	moveq	r1, #1
 801013e:	3801      	subs	r0, #1
 8010140:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010144:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010148:	42a8      	cmp	r0, r5
 801014a:	d1fb      	bne.n	8010144 <__sccl+0x1c>
 801014c:	b90b      	cbnz	r3, 8010152 <__sccl+0x2a>
 801014e:	1e50      	subs	r0, r2, #1
 8010150:	bd70      	pop	{r4, r5, r6, pc}
 8010152:	f081 0101 	eor.w	r1, r1, #1
 8010156:	54e1      	strb	r1, [r4, r3]
 8010158:	4610      	mov	r0, r2
 801015a:	4602      	mov	r2, r0
 801015c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010160:	2d2d      	cmp	r5, #45	@ 0x2d
 8010162:	d005      	beq.n	8010170 <__sccl+0x48>
 8010164:	2d5d      	cmp	r5, #93	@ 0x5d
 8010166:	d016      	beq.n	8010196 <__sccl+0x6e>
 8010168:	2d00      	cmp	r5, #0
 801016a:	d0f1      	beq.n	8010150 <__sccl+0x28>
 801016c:	462b      	mov	r3, r5
 801016e:	e7f2      	b.n	8010156 <__sccl+0x2e>
 8010170:	7846      	ldrb	r6, [r0, #1]
 8010172:	2e5d      	cmp	r6, #93	@ 0x5d
 8010174:	d0fa      	beq.n	801016c <__sccl+0x44>
 8010176:	42b3      	cmp	r3, r6
 8010178:	dcf8      	bgt.n	801016c <__sccl+0x44>
 801017a:	3002      	adds	r0, #2
 801017c:	461a      	mov	r2, r3
 801017e:	3201      	adds	r2, #1
 8010180:	4296      	cmp	r6, r2
 8010182:	54a1      	strb	r1, [r4, r2]
 8010184:	dcfb      	bgt.n	801017e <__sccl+0x56>
 8010186:	1af2      	subs	r2, r6, r3
 8010188:	3a01      	subs	r2, #1
 801018a:	1c5d      	adds	r5, r3, #1
 801018c:	42b3      	cmp	r3, r6
 801018e:	bfa8      	it	ge
 8010190:	2200      	movge	r2, #0
 8010192:	18ab      	adds	r3, r5, r2
 8010194:	e7e1      	b.n	801015a <__sccl+0x32>
 8010196:	4610      	mov	r0, r2
 8010198:	e7da      	b.n	8010150 <__sccl+0x28>

0801019a <__submore>:
 801019a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019e:	460c      	mov	r4, r1
 80101a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80101a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101a6:	4299      	cmp	r1, r3
 80101a8:	d11d      	bne.n	80101e6 <__submore+0x4c>
 80101aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80101ae:	f7fe fae1 	bl	800e774 <_malloc_r>
 80101b2:	b918      	cbnz	r0, 80101bc <__submore+0x22>
 80101b4:	f04f 30ff 	mov.w	r0, #4294967295
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80101c2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80101c6:	6360      	str	r0, [r4, #52]	@ 0x34
 80101c8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80101cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80101d0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80101d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80101d8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80101dc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80101e0:	6020      	str	r0, [r4, #0]
 80101e2:	2000      	movs	r0, #0
 80101e4:	e7e8      	b.n	80101b8 <__submore+0x1e>
 80101e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80101e8:	0077      	lsls	r7, r6, #1
 80101ea:	463a      	mov	r2, r7
 80101ec:	f000 f95c 	bl	80104a8 <_realloc_r>
 80101f0:	4605      	mov	r5, r0
 80101f2:	2800      	cmp	r0, #0
 80101f4:	d0de      	beq.n	80101b4 <__submore+0x1a>
 80101f6:	eb00 0806 	add.w	r8, r0, r6
 80101fa:	4601      	mov	r1, r0
 80101fc:	4632      	mov	r2, r6
 80101fe:	4640      	mov	r0, r8
 8010200:	f7fd f827 	bl	800d252 <memcpy>
 8010204:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010208:	f8c4 8000 	str.w	r8, [r4]
 801020c:	e7e9      	b.n	80101e2 <__submore+0x48>
	...

08010210 <asctime>:
 8010210:	4b0d      	ldr	r3, [pc, #52]	@ (8010248 <asctime+0x38>)
 8010212:	b570      	push	{r4, r5, r6, lr}
 8010214:	681d      	ldr	r5, [r3, #0]
 8010216:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 8010218:	4604      	mov	r4, r0
 801021a:	b976      	cbnz	r6, 801023a <asctime+0x2a>
 801021c:	201a      	movs	r0, #26
 801021e:	f7fe fa77 	bl	800e710 <malloc>
 8010222:	4602      	mov	r2, r0
 8010224:	63a8      	str	r0, [r5, #56]	@ 0x38
 8010226:	b920      	cbnz	r0, 8010232 <asctime+0x22>
 8010228:	4b08      	ldr	r3, [pc, #32]	@ (801024c <asctime+0x3c>)
 801022a:	4809      	ldr	r0, [pc, #36]	@ (8010250 <asctime+0x40>)
 801022c:	213b      	movs	r1, #59	@ 0x3b
 801022e:	f7fd f827 	bl	800d280 <__assert_func>
 8010232:	221a      	movs	r2, #26
 8010234:	4631      	mov	r1, r6
 8010236:	f7fc f815 	bl	800c264 <memset>
 801023a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 801023c:	4620      	mov	r0, r4
 801023e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010242:	f000 b807 	b.w	8010254 <asctime_r>
 8010246:	bf00      	nop
 8010248:	2000019c 	.word	0x2000019c
 801024c:	08010f44 	.word	0x08010f44
 8010250:	080111fb 	.word	0x080111fb

08010254 <asctime_r>:
 8010254:	b510      	push	{r4, lr}
 8010256:	460c      	mov	r4, r1
 8010258:	6941      	ldr	r1, [r0, #20]
 801025a:	6903      	ldr	r3, [r0, #16]
 801025c:	6982      	ldr	r2, [r0, #24]
 801025e:	b086      	sub	sp, #24
 8010260:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 8010264:	9104      	str	r1, [sp, #16]
 8010266:	6801      	ldr	r1, [r0, #0]
 8010268:	9103      	str	r1, [sp, #12]
 801026a:	6841      	ldr	r1, [r0, #4]
 801026c:	9102      	str	r1, [sp, #8]
 801026e:	6881      	ldr	r1, [r0, #8]
 8010270:	9101      	str	r1, [sp, #4]
 8010272:	68c1      	ldr	r1, [r0, #12]
 8010274:	9100      	str	r1, [sp, #0]
 8010276:	4907      	ldr	r1, [pc, #28]	@ (8010294 <asctime_r+0x40>)
 8010278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801027c:	440b      	add	r3, r1
 801027e:	4906      	ldr	r1, [pc, #24]	@ (8010298 <asctime_r+0x44>)
 8010280:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010284:	440a      	add	r2, r1
 8010286:	4620      	mov	r0, r4
 8010288:	4904      	ldr	r1, [pc, #16]	@ (801029c <asctime_r+0x48>)
 801028a:	f7fb fea9 	bl	800bfe0 <siprintf>
 801028e:	4620      	mov	r0, r4
 8010290:	b006      	add	sp, #24
 8010292:	bd10      	pop	{r4, pc}
 8010294:	08011588 	.word	0x08011588
 8010298:	080115ac 	.word	0x080115ac
 801029c:	08011254 	.word	0x08011254

080102a0 <__gettzinfo>:
 80102a0:	4800      	ldr	r0, [pc, #0]	@ (80102a4 <__gettzinfo+0x4>)
 80102a2:	4770      	bx	lr
 80102a4:	200001f0 	.word	0x200001f0

080102a8 <gmtime_r>:
 80102a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ac:	4a4d      	ldr	r2, [pc, #308]	@ (80103e4 <gmtime_r+0x13c>)
 80102ae:	460c      	mov	r4, r1
 80102b0:	2300      	movs	r3, #0
 80102b2:	e9d0 0100 	ldrd	r0, r1, [r0]
 80102b6:	f7f0 fcff 	bl	8000cb8 <__aeabi_ldivmod>
 80102ba:	2a00      	cmp	r2, #0
 80102bc:	bfbc      	itt	lt
 80102be:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80102c2:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80102c6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80102ca:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80102ce:	fbb2 f3f1 	udiv	r3, r2, r1
 80102d2:	fb01 2213 	mls	r2, r1, r3, r2
 80102d6:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80102da:	bfac      	ite	ge
 80102dc:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80102e0:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80102e4:	60a3      	str	r3, [r4, #8]
 80102e6:	fbb2 f3f1 	udiv	r3, r2, r1
 80102ea:	fb01 2213 	mls	r2, r1, r3, r2
 80102ee:	6063      	str	r3, [r4, #4]
 80102f0:	6022      	str	r2, [r4, #0]
 80102f2:	1cc3      	adds	r3, r0, #3
 80102f4:	2207      	movs	r2, #7
 80102f6:	fb93 f2f2 	sdiv	r2, r3, r2
 80102fa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80102fe:	1a9b      	subs	r3, r3, r2
 8010300:	4939      	ldr	r1, [pc, #228]	@ (80103e8 <gmtime_r+0x140>)
 8010302:	d555      	bpl.n	80103b0 <gmtime_r+0x108>
 8010304:	3307      	adds	r3, #7
 8010306:	61a3      	str	r3, [r4, #24]
 8010308:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 801030c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8010310:	fb93 f1f1 	sdiv	r1, r3, r1
 8010314:	4b35      	ldr	r3, [pc, #212]	@ (80103ec <gmtime_r+0x144>)
 8010316:	fb03 0001 	mla	r0, r3, r1, r0
 801031a:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 801031e:	fbb0 f3f3 	udiv	r3, r0, r3
 8010322:	4403      	add	r3, r0
 8010324:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8010328:	fbb0 f2fc 	udiv	r2, r0, ip
 801032c:	1a9b      	subs	r3, r3, r2
 801032e:	f240 176d 	movw	r7, #365	@ 0x16d
 8010332:	4a2f      	ldr	r2, [pc, #188]	@ (80103f0 <gmtime_r+0x148>)
 8010334:	fbb0 f2f2 	udiv	r2, r0, r2
 8010338:	2664      	movs	r6, #100	@ 0x64
 801033a:	1a9b      	subs	r3, r3, r2
 801033c:	fbb3 f2f7 	udiv	r2, r3, r7
 8010340:	fbb3 f3fc 	udiv	r3, r3, ip
 8010344:	fbb2 f5f6 	udiv	r5, r2, r6
 8010348:	1aeb      	subs	r3, r5, r3
 801034a:	4403      	add	r3, r0
 801034c:	fb07 3312 	mls	r3, r7, r2, r3
 8010350:	2099      	movs	r0, #153	@ 0x99
 8010352:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8010356:	3702      	adds	r7, #2
 8010358:	f103 0e01 	add.w	lr, r3, #1
 801035c:	fbb7 fcf0 	udiv	ip, r7, r0
 8010360:	fb00 f00c 	mul.w	r0, r0, ip
 8010364:	3002      	adds	r0, #2
 8010366:	f04f 0805 	mov.w	r8, #5
 801036a:	fbb0 f0f8 	udiv	r0, r0, r8
 801036e:	ebae 0000 	sub.w	r0, lr, r0
 8010372:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8010376:	4577      	cmp	r7, lr
 8010378:	bf8c      	ite	hi
 801037a:	f06f 0709 	mvnhi.w	r7, #9
 801037e:	2702      	movls	r7, #2
 8010380:	4467      	add	r7, ip
 8010382:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8010386:	fb0c 2101 	mla	r1, ip, r1, r2
 801038a:	2f01      	cmp	r7, #1
 801038c:	bf98      	it	ls
 801038e:	3101      	addls	r1, #1
 8010390:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8010394:	d312      	bcc.n	80103bc <gmtime_r+0x114>
 8010396:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801039a:	61e3      	str	r3, [r4, #28]
 801039c:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 80103a0:	2300      	movs	r3, #0
 80103a2:	60e0      	str	r0, [r4, #12]
 80103a4:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80103a8:	6223      	str	r3, [r4, #32]
 80103aa:	4620      	mov	r0, r4
 80103ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b0:	2800      	cmp	r0, #0
 80103b2:	61a3      	str	r3, [r4, #24]
 80103b4:	dba8      	blt.n	8010308 <gmtime_r+0x60>
 80103b6:	fb90 f1f1 	sdiv	r1, r0, r1
 80103ba:	e7ab      	b.n	8010314 <gmtime_r+0x6c>
 80103bc:	f012 0f03 	tst.w	r2, #3
 80103c0:	d102      	bne.n	80103c8 <gmtime_r+0x120>
 80103c2:	fb06 2515 	mls	r5, r6, r5, r2
 80103c6:	b95d      	cbnz	r5, 80103e0 <gmtime_r+0x138>
 80103c8:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80103cc:	fbb2 f6f5 	udiv	r6, r2, r5
 80103d0:	fb05 2216 	mls	r2, r5, r6, r2
 80103d4:	fab2 f282 	clz	r2, r2
 80103d8:	0952      	lsrs	r2, r2, #5
 80103da:	333b      	adds	r3, #59	@ 0x3b
 80103dc:	4413      	add	r3, r2
 80103de:	e7dc      	b.n	801039a <gmtime_r+0xf2>
 80103e0:	2201      	movs	r2, #1
 80103e2:	e7fa      	b.n	80103da <gmtime_r+0x132>
 80103e4:	00015180 	.word	0x00015180
 80103e8:	00023ab1 	.word	0x00023ab1
 80103ec:	fffdc54f 	.word	0xfffdc54f
 80103f0:	00023ab0 	.word	0x00023ab0

080103f4 <_fstat_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d07      	ldr	r5, [pc, #28]	@ (8010414 <_fstat_r+0x20>)
 80103f8:	2300      	movs	r3, #0
 80103fa:	4604      	mov	r4, r0
 80103fc:	4608      	mov	r0, r1
 80103fe:	4611      	mov	r1, r2
 8010400:	602b      	str	r3, [r5, #0]
 8010402:	f7f3 f907 	bl	8003614 <_fstat>
 8010406:	1c43      	adds	r3, r0, #1
 8010408:	d102      	bne.n	8010410 <_fstat_r+0x1c>
 801040a:	682b      	ldr	r3, [r5, #0]
 801040c:	b103      	cbz	r3, 8010410 <_fstat_r+0x1c>
 801040e:	6023      	str	r3, [r4, #0]
 8010410:	bd38      	pop	{r3, r4, r5, pc}
 8010412:	bf00      	nop
 8010414:	20006ef4 	.word	0x20006ef4

08010418 <_isatty_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d06      	ldr	r5, [pc, #24]	@ (8010434 <_isatty_r+0x1c>)
 801041c:	2300      	movs	r3, #0
 801041e:	4604      	mov	r4, r0
 8010420:	4608      	mov	r0, r1
 8010422:	602b      	str	r3, [r5, #0]
 8010424:	f7f3 f906 	bl	8003634 <_isatty>
 8010428:	1c43      	adds	r3, r0, #1
 801042a:	d102      	bne.n	8010432 <_isatty_r+0x1a>
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	b103      	cbz	r3, 8010432 <_isatty_r+0x1a>
 8010430:	6023      	str	r3, [r4, #0]
 8010432:	bd38      	pop	{r3, r4, r5, pc}
 8010434:	20006ef4 	.word	0x20006ef4

08010438 <_sbrk_r>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4d06      	ldr	r5, [pc, #24]	@ (8010454 <_sbrk_r+0x1c>)
 801043c:	2300      	movs	r3, #0
 801043e:	4604      	mov	r4, r0
 8010440:	4608      	mov	r0, r1
 8010442:	602b      	str	r3, [r5, #0]
 8010444:	f7f3 f924 	bl	8003690 <_sbrk>
 8010448:	1c43      	adds	r3, r0, #1
 801044a:	d102      	bne.n	8010452 <_sbrk_r+0x1a>
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	b103      	cbz	r3, 8010452 <_sbrk_r+0x1a>
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	bd38      	pop	{r3, r4, r5, pc}
 8010454:	20006ef4 	.word	0x20006ef4

08010458 <abort>:
 8010458:	b508      	push	{r3, lr}
 801045a:	2006      	movs	r0, #6
 801045c:	f000 f87a 	bl	8010554 <raise>
 8010460:	2001      	movs	r0, #1
 8010462:	f7f3 f887 	bl	8003574 <_exit>

08010466 <_calloc_r>:
 8010466:	b570      	push	{r4, r5, r6, lr}
 8010468:	fba1 5402 	umull	r5, r4, r1, r2
 801046c:	b934      	cbnz	r4, 801047c <_calloc_r+0x16>
 801046e:	4629      	mov	r1, r5
 8010470:	f7fe f980 	bl	800e774 <_malloc_r>
 8010474:	4606      	mov	r6, r0
 8010476:	b928      	cbnz	r0, 8010484 <_calloc_r+0x1e>
 8010478:	4630      	mov	r0, r6
 801047a:	bd70      	pop	{r4, r5, r6, pc}
 801047c:	220c      	movs	r2, #12
 801047e:	6002      	str	r2, [r0, #0]
 8010480:	2600      	movs	r6, #0
 8010482:	e7f9      	b.n	8010478 <_calloc_r+0x12>
 8010484:	462a      	mov	r2, r5
 8010486:	4621      	mov	r1, r4
 8010488:	f7fb feec 	bl	800c264 <memset>
 801048c:	e7f4      	b.n	8010478 <_calloc_r+0x12>
	...

08010490 <__env_lock>:
 8010490:	4801      	ldr	r0, [pc, #4]	@ (8010498 <__env_lock+0x8>)
 8010492:	f7fc bed3 	b.w	800d23c <__retarget_lock_acquire_recursive>
 8010496:	bf00      	nop
 8010498:	20006ef9 	.word	0x20006ef9

0801049c <__env_unlock>:
 801049c:	4801      	ldr	r0, [pc, #4]	@ (80104a4 <__env_unlock+0x8>)
 801049e:	f7fc becf 	b.w	800d240 <__retarget_lock_release_recursive>
 80104a2:	bf00      	nop
 80104a4:	20006ef9 	.word	0x20006ef9

080104a8 <_realloc_r>:
 80104a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ac:	4607      	mov	r7, r0
 80104ae:	4614      	mov	r4, r2
 80104b0:	460d      	mov	r5, r1
 80104b2:	b921      	cbnz	r1, 80104be <_realloc_r+0x16>
 80104b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104b8:	4611      	mov	r1, r2
 80104ba:	f7fe b95b 	b.w	800e774 <_malloc_r>
 80104be:	b92a      	cbnz	r2, 80104cc <_realloc_r+0x24>
 80104c0:	f7fd fd5e 	bl	800df80 <_free_r>
 80104c4:	4625      	mov	r5, r4
 80104c6:	4628      	mov	r0, r5
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	f000 f85e 	bl	801058c <_malloc_usable_size_r>
 80104d0:	4284      	cmp	r4, r0
 80104d2:	4606      	mov	r6, r0
 80104d4:	d802      	bhi.n	80104dc <_realloc_r+0x34>
 80104d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80104da:	d8f4      	bhi.n	80104c6 <_realloc_r+0x1e>
 80104dc:	4621      	mov	r1, r4
 80104de:	4638      	mov	r0, r7
 80104e0:	f7fe f948 	bl	800e774 <_malloc_r>
 80104e4:	4680      	mov	r8, r0
 80104e6:	b908      	cbnz	r0, 80104ec <_realloc_r+0x44>
 80104e8:	4645      	mov	r5, r8
 80104ea:	e7ec      	b.n	80104c6 <_realloc_r+0x1e>
 80104ec:	42b4      	cmp	r4, r6
 80104ee:	4622      	mov	r2, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	bf28      	it	cs
 80104f4:	4632      	movcs	r2, r6
 80104f6:	f7fc feac 	bl	800d252 <memcpy>
 80104fa:	4629      	mov	r1, r5
 80104fc:	4638      	mov	r0, r7
 80104fe:	f7fd fd3f 	bl	800df80 <_free_r>
 8010502:	e7f1      	b.n	80104e8 <_realloc_r+0x40>

08010504 <_raise_r>:
 8010504:	291f      	cmp	r1, #31
 8010506:	b538      	push	{r3, r4, r5, lr}
 8010508:	4605      	mov	r5, r0
 801050a:	460c      	mov	r4, r1
 801050c:	d904      	bls.n	8010518 <_raise_r+0x14>
 801050e:	2316      	movs	r3, #22
 8010510:	6003      	str	r3, [r0, #0]
 8010512:	f04f 30ff 	mov.w	r0, #4294967295
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801051a:	b112      	cbz	r2, 8010522 <_raise_r+0x1e>
 801051c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010520:	b94b      	cbnz	r3, 8010536 <_raise_r+0x32>
 8010522:	4628      	mov	r0, r5
 8010524:	f000 f830 	bl	8010588 <_getpid_r>
 8010528:	4622      	mov	r2, r4
 801052a:	4601      	mov	r1, r0
 801052c:	4628      	mov	r0, r5
 801052e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010532:	f000 b817 	b.w	8010564 <_kill_r>
 8010536:	2b01      	cmp	r3, #1
 8010538:	d00a      	beq.n	8010550 <_raise_r+0x4c>
 801053a:	1c59      	adds	r1, r3, #1
 801053c:	d103      	bne.n	8010546 <_raise_r+0x42>
 801053e:	2316      	movs	r3, #22
 8010540:	6003      	str	r3, [r0, #0]
 8010542:	2001      	movs	r0, #1
 8010544:	e7e7      	b.n	8010516 <_raise_r+0x12>
 8010546:	2100      	movs	r1, #0
 8010548:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801054c:	4620      	mov	r0, r4
 801054e:	4798      	blx	r3
 8010550:	2000      	movs	r0, #0
 8010552:	e7e0      	b.n	8010516 <_raise_r+0x12>

08010554 <raise>:
 8010554:	4b02      	ldr	r3, [pc, #8]	@ (8010560 <raise+0xc>)
 8010556:	4601      	mov	r1, r0
 8010558:	6818      	ldr	r0, [r3, #0]
 801055a:	f7ff bfd3 	b.w	8010504 <_raise_r>
 801055e:	bf00      	nop
 8010560:	2000019c 	.word	0x2000019c

08010564 <_kill_r>:
 8010564:	b538      	push	{r3, r4, r5, lr}
 8010566:	4d07      	ldr	r5, [pc, #28]	@ (8010584 <_kill_r+0x20>)
 8010568:	2300      	movs	r3, #0
 801056a:	4604      	mov	r4, r0
 801056c:	4608      	mov	r0, r1
 801056e:	4611      	mov	r1, r2
 8010570:	602b      	str	r3, [r5, #0]
 8010572:	f7f2 ffef 	bl	8003554 <_kill>
 8010576:	1c43      	adds	r3, r0, #1
 8010578:	d102      	bne.n	8010580 <_kill_r+0x1c>
 801057a:	682b      	ldr	r3, [r5, #0]
 801057c:	b103      	cbz	r3, 8010580 <_kill_r+0x1c>
 801057e:	6023      	str	r3, [r4, #0]
 8010580:	bd38      	pop	{r3, r4, r5, pc}
 8010582:	bf00      	nop
 8010584:	20006ef4 	.word	0x20006ef4

08010588 <_getpid_r>:
 8010588:	f7f2 bfdc 	b.w	8003544 <_getpid>

0801058c <_malloc_usable_size_r>:
 801058c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010590:	1f18      	subs	r0, r3, #4
 8010592:	2b00      	cmp	r3, #0
 8010594:	bfbc      	itt	lt
 8010596:	580b      	ldrlt	r3, [r1, r0]
 8010598:	18c0      	addlt	r0, r0, r3
 801059a:	4770      	bx	lr

0801059c <_init>:
 801059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059e:	bf00      	nop
 80105a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105a2:	bc08      	pop	{r3}
 80105a4:	469e      	mov	lr, r3
 80105a6:	4770      	bx	lr

080105a8 <_fini>:
 80105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105aa:	bf00      	nop
 80105ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ae:	bc08      	pop	{r3}
 80105b0:	469e      	mov	lr, r3
 80105b2:	4770      	bx	lr
