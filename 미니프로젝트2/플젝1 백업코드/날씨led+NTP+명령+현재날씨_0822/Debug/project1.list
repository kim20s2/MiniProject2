
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f4c  0800eb68  0800eb68  0000fb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab4  0800fab4  00011248  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fab4  0800fab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fabc  0800fabc  00011248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fabc  0800fabc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fac0  0800fac0  00010ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  0800fac4  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cc4  20000248  0800fd0c  00011248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006f0c  0800fd0c  00011f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f3b7  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000479c  00000000  00000000  0003062f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e3  00000000  00000000  000369a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c375  00000000  00000000  00037f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220f9  00000000  00000000  00054300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3df7  00000000  00000000  000763f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a1f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000923c  00000000  00000000  0011a234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00123470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eb50 	.word	0x0800eb50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800eb50 	.word	0x0800eb50

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_ldivmod>:
 8000c3c:	b97b      	cbnz	r3, 8000c5e <__aeabi_ldivmod+0x22>
 8000c3e:	b972      	cbnz	r2, 8000c5e <__aeabi_ldivmod+0x22>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bfbe      	ittt	lt
 8000c44:	2000      	movlt	r0, #0
 8000c46:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c4a:	e006      	blt.n	8000c5a <__aeabi_ldivmod+0x1e>
 8000c4c:	bf08      	it	eq
 8000c4e:	2800      	cmpeq	r0, #0
 8000c50:	bf1c      	itt	ne
 8000c52:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c56:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5a:	f000 ba09 	b.w	8001070 <__aeabi_idiv0>
 8000c5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c66:	2900      	cmp	r1, #0
 8000c68:	db09      	blt.n	8000c7e <__aeabi_ldivmod+0x42>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db1a      	blt.n	8000ca4 <__aeabi_ldivmod+0x68>
 8000c6e:	f000 f883 	bl	8000d78 <__udivmoddi4>
 8000c72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7a:	b004      	add	sp, #16
 8000c7c:	4770      	bx	lr
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db1b      	blt.n	8000cc0 <__aeabi_ldivmod+0x84>
 8000c88:	f000 f876 	bl	8000d78 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca2:	4770      	bx	lr
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000caa:	f000 f865 	bl	8000d78 <__udivmoddi4>
 8000cae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb6:	b004      	add	sp, #16
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f857 	bl	8000d78 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cda:	4770      	bx	lr

08000cdc <__aeabi_uldivmod>:
 8000cdc:	b953      	cbnz	r3, 8000cf4 <__aeabi_uldivmod+0x18>
 8000cde:	b94a      	cbnz	r2, 8000cf4 <__aeabi_uldivmod+0x18>
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	2800      	cmpeq	r0, #0
 8000ce6:	bf1c      	itt	ne
 8000ce8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cec:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf0:	f000 b9be 	b.w	8001070 <__aeabi_idiv0>
 8000cf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cfc:	f000 f83c 	bl	8000d78 <__udivmoddi4>
 8000d00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d08:	b004      	add	sp, #16
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_d2lz>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2300      	movs	r3, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	460d      	mov	r5, r1
 8000d16:	f7ff fef9 	bl	8000b0c <__aeabi_dcmplt>
 8000d1a:	b928      	cbnz	r0, 8000d28 <__aeabi_d2lz+0x1c>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4629      	mov	r1, r5
 8000d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d24:	f000 b80a 	b.w	8000d3c <__aeabi_d2ulz>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2e:	f000 f805 	bl	8000d3c <__aeabi_d2ulz>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
 8000d3a:	bf00      	nop

08000d3c <__aeabi_d2ulz>:
 8000d3c:	b5d0      	push	{r4, r6, r7, lr}
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__aeabi_d2ulz+0x34>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	4606      	mov	r6, r0
 8000d44:	460f      	mov	r7, r1
 8000d46:	f7ff fc6f 	bl	8000628 <__aeabi_dmul>
 8000d4a:	f7ff ff07 	bl	8000b5c <__aeabi_d2uiz>
 8000d4e:	4604      	mov	r4, r0
 8000d50:	f7ff fbf0 	bl	8000534 <__aeabi_ui2d>
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <__aeabi_d2ulz+0x38>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f7ff fc66 	bl	8000628 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4630      	mov	r0, r6
 8000d62:	4639      	mov	r1, r7
 8000d64:	f7ff faa8 	bl	80002b8 <__aeabi_dsub>
 8000d68:	f7ff fef8 	bl	8000b5c <__aeabi_d2uiz>
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d70:	3df00000 	.word	0x3df00000
 8000d74:	41f00000 	.word	0x41f00000

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	468e      	mov	lr, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	4688      	mov	r8, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4617      	mov	r7, r2
 8000d8c:	d962      	bls.n	8000e54 <__udivmoddi4+0xdc>
 8000d8e:	fab2 f682 	clz	r6, r2
 8000d92:	b14e      	cbz	r6, 8000da8 <__udivmoddi4+0x30>
 8000d94:	f1c6 0320 	rsb	r3, r6, #32
 8000d98:	fa01 f806 	lsl.w	r8, r1, r6
 8000d9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000da0:	40b7      	lsls	r7, r6
 8000da2:	ea43 0808 	orr.w	r8, r3, r8
 8000da6:	40b4      	lsls	r4, r6
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	fa1f fc87 	uxth.w	ip, r7
 8000db0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dcc:	f080 80ea 	bcs.w	8000fa4 <__udivmoddi4+0x22c>
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f240 80e7 	bls.w	8000fa4 <__udivmoddi4+0x22c>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	443b      	add	r3, r7
 8000dda:	1a9a      	subs	r2, r3, r2
 8000ddc:	b2a3      	uxth	r3, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dee:	459c      	cmp	ip, r3
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x8e>
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df8:	f080 80d6 	bcs.w	8000fa8 <__udivmoddi4+0x230>
 8000dfc:	459c      	cmp	ip, r3
 8000dfe:	f240 80d3 	bls.w	8000fa8 <__udivmoddi4+0x230>
 8000e02:	443b      	add	r3, r7
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0a:	eba3 030c 	sub.w	r3, r3, ip
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40f3      	lsrs	r3, r6
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xb6>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb0>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x14c>
 8000e36:	4573      	cmp	r3, lr
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xc8>
 8000e3a:	4282      	cmp	r2, r0
 8000e3c:	f200 8105 	bhi.w	800104a <__udivmoddi4+0x2d2>
 8000e40:	1a84      	subs	r4, r0, r2
 8000e42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	4690      	mov	r8, r2
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d0e5      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e52:	e7e2      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f000 8090 	beq.w	8000f7a <__udivmoddi4+0x202>
 8000e5a:	fab2 f682 	clz	r6, r2
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	f040 80a4 	bne.w	8000fac <__udivmoddi4+0x234>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	0c03      	lsrs	r3, r0, #16
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	b280      	uxth	r0, r0
 8000e6e:	b2bc      	uxth	r4, r7
 8000e70:	2101      	movs	r1, #1
 8000e72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x11e>
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e8c:	d202      	bcs.n	8000e94 <__udivmoddi4+0x11c>
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	f200 80e0 	bhi.w	8001054 <__udivmoddi4+0x2dc>
 8000e94:	46c4      	mov	ip, r8
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ea0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea4:	fb02 f404 	mul.w	r4, r2, r4
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x144>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x142>
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	f200 80ca 	bhi.w	800104e <__udivmoddi4+0x2d6>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	1b1b      	subs	r3, r3, r4
 8000ebe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000edc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ee0:	4323      	orrs	r3, r4
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	fa1f fc87 	uxth.w	ip, r7
 8000eea:	fbbe f0f9 	udiv	r0, lr, r9
 8000eee:	0c1c      	lsrs	r4, r3, #16
 8000ef0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d909      	bls.n	8000f18 <__udivmoddi4+0x1a0>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f0a:	f080 809c 	bcs.w	8001046 <__udivmoddi4+0x2ce>
 8000f0e:	45a6      	cmp	lr, r4
 8000f10:	f240 8099 	bls.w	8001046 <__udivmoddi4+0x2ce>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	eba4 040e 	sub.w	r4, r4, lr
 8000f1c:	fa1f fe83 	uxth.w	lr, r3
 8000f20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f24:	fb09 4413 	mls	r4, r9, r3, r4
 8000f28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f30:	45a4      	cmp	ip, r4
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1ce>
 8000f34:	193c      	adds	r4, r7, r4
 8000f36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f3a:	f080 8082 	bcs.w	8001042 <__udivmoddi4+0x2ca>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d97f      	bls.n	8001042 <__udivmoddi4+0x2ca>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f4a:	eba4 040c 	sub.w	r4, r4, ip
 8000f4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f52:	4564      	cmp	r4, ip
 8000f54:	4673      	mov	r3, lr
 8000f56:	46e1      	mov	r9, ip
 8000f58:	d362      	bcc.n	8001020 <__udivmoddi4+0x2a8>
 8000f5a:	d05f      	beq.n	800101c <__udivmoddi4+0x2a4>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x1fe>
 8000f5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f62:	eb64 0409 	sbc.w	r4, r4, r9
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	40cc      	lsrs	r4, r1
 8000f72:	e9c5 6400 	strd	r6, r4, [r5]
 8000f76:	2100      	movs	r1, #0
 8000f78:	e74f      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000f7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7e:	0c01      	lsrs	r1, r0, #16
 8000f80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f84:	b280      	uxth	r0, r0
 8000f86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	463c      	mov	r4, r7
 8000f90:	46b8      	mov	r8, r7
 8000f92:	46be      	mov	lr, r7
 8000f94:	2620      	movs	r6, #32
 8000f96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f9a:	eba2 0208 	sub.w	r2, r2, r8
 8000f9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fa2:	e766      	b.n	8000e72 <__udivmoddi4+0xfa>
 8000fa4:	4601      	mov	r1, r0
 8000fa6:	e718      	b.n	8000dda <__udivmoddi4+0x62>
 8000fa8:	4610      	mov	r0, r2
 8000faa:	e72c      	b.n	8000e06 <__udivmoddi4+0x8e>
 8000fac:	f1c6 0220 	rsb	r2, r6, #32
 8000fb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb4:	40b7      	lsls	r7, r6
 8000fb6:	40b1      	lsls	r1, r6
 8000fb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc6:	b2bc      	uxth	r4, r7
 8000fc8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd2:	fb08 f904 	mul.w	r9, r8, r4
 8000fd6:	40b0      	lsls	r0, r6
 8000fd8:	4589      	cmp	r9, r1
 8000fda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fde:	b280      	uxth	r0, r0
 8000fe0:	d93e      	bls.n	8001060 <__udivmoddi4+0x2e8>
 8000fe2:	1879      	adds	r1, r7, r1
 8000fe4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe8:	d201      	bcs.n	8000fee <__udivmoddi4+0x276>
 8000fea:	4589      	cmp	r9, r1
 8000fec:	d81f      	bhi.n	800102e <__udivmoddi4+0x2b6>
 8000fee:	eba1 0109 	sub.w	r1, r1, r9
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fb09 f804 	mul.w	r8, r9, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	b292      	uxth	r2, r2
 8001000:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001004:	4542      	cmp	r2, r8
 8001006:	d229      	bcs.n	800105c <__udivmoddi4+0x2e4>
 8001008:	18ba      	adds	r2, r7, r2
 800100a:	f109 31ff 	add.w	r1, r9, #4294967295
 800100e:	d2c4      	bcs.n	8000f9a <__udivmoddi4+0x222>
 8001010:	4542      	cmp	r2, r8
 8001012:	d2c2      	bcs.n	8000f9a <__udivmoddi4+0x222>
 8001014:	f1a9 0102 	sub.w	r1, r9, #2
 8001018:	443a      	add	r2, r7
 800101a:	e7be      	b.n	8000f9a <__udivmoddi4+0x222>
 800101c:	45f0      	cmp	r8, lr
 800101e:	d29d      	bcs.n	8000f5c <__udivmoddi4+0x1e4>
 8001020:	ebbe 0302 	subs.w	r3, lr, r2
 8001024:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001028:	3801      	subs	r0, #1
 800102a:	46e1      	mov	r9, ip
 800102c:	e796      	b.n	8000f5c <__udivmoddi4+0x1e4>
 800102e:	eba7 0909 	sub.w	r9, r7, r9
 8001032:	4449      	add	r1, r9
 8001034:	f1a8 0c02 	sub.w	ip, r8, #2
 8001038:	fbb1 f9fe 	udiv	r9, r1, lr
 800103c:	fb09 f804 	mul.w	r8, r9, r4
 8001040:	e7db      	b.n	8000ffa <__udivmoddi4+0x282>
 8001042:	4673      	mov	r3, lr
 8001044:	e77f      	b.n	8000f46 <__udivmoddi4+0x1ce>
 8001046:	4650      	mov	r0, sl
 8001048:	e766      	b.n	8000f18 <__udivmoddi4+0x1a0>
 800104a:	4608      	mov	r0, r1
 800104c:	e6fd      	b.n	8000e4a <__udivmoddi4+0xd2>
 800104e:	443b      	add	r3, r7
 8001050:	3a02      	subs	r2, #2
 8001052:	e733      	b.n	8000ebc <__udivmoddi4+0x144>
 8001054:	f1ac 0c02 	sub.w	ip, ip, #2
 8001058:	443b      	add	r3, r7
 800105a:	e71c      	b.n	8000e96 <__udivmoddi4+0x11e>
 800105c:	4649      	mov	r1, r9
 800105e:	e79c      	b.n	8000f9a <__udivmoddi4+0x222>
 8001060:	eba1 0109 	sub.w	r1, r1, r9
 8001064:	46c4      	mov	ip, r8
 8001066:	fbb1 f9fe 	udiv	r9, r1, lr
 800106a:	fb09 f804 	mul.w	r8, r9, r4
 800106e:	e7c4      	b.n	8000ffa <__udivmoddi4+0x282>

08001070 <__aeabi_idiv0>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <Aiot_Task>:
#include "esp.h"

extern osMutexId_t ESP_MutexHandle;

void Aiot_Task(void *argument)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 800107c:	f001 fa6e 	bl	800255c <AiotClient_Init>
    for(;;)
    {
        if (esp_get_status() != 0) {
 8001080:	f001 f90e 	bl	80022a0 <esp_get_status>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d013      	beq.n	80010b2 <Aiot_Task+0x3e>
            printf("server connecting ...\r\n");
 800108a:	480c      	ldr	r0, [pc, #48]	@ (80010bc <Aiot_Task+0x48>)
 800108c:	f009 ff14 	bl	800aeb8 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <Aiot_Task+0x4c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	4618      	mov	r0, r3
 800109a:	f005 fe80 	bl	8006d9e <osMutexAcquire>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d106      	bne.n	80010b2 <Aiot_Task+0x3e>
                esp_client_conn();
 80010a4:	f001 f8b8 	bl	8002218 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <Aiot_Task+0x4c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 fec1 	bl	8006e34 <osMutexRelease>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(10000));
 80010b2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010b6:	f007 f91f 	bl	80082f8 <vTaskDelay>
        if (esp_get_status() != 0) {
 80010ba:	e7e1      	b.n	8001080 <Aiot_Task+0xc>
 80010bc:	0800eb68 	.word	0x0800eb68
 80010c0:	2000242c 	.word	0x2000242c

080010c4 <esp_event>:
   - 개행을 기다리지 말고 길이 기반으로 정확히 잘라내기
*/


void esp_event(const char *recvBuf)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0aa      	sub	sp, #168	@ 0xa8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	227f      	movs	r2, #127	@ 0x7f
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00a f8a0 	bl	800b228 <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	210a      	movs	r1, #10
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00a f867 	bl	800b1c8 <strchr>
 80010fa:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 80010fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <esp_event+0x4a>
 8001106:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	210d      	movs	r1, #13
 8001114:	4618      	mov	r0, r3
 8001116:	f00a f857 	bl	800b1c8 <strchr>
 800111a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 800111e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <esp_event+0x6a>
 8001126:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4945      	ldr	r1, [pc, #276]	@ (8001250 <esp_event+0x18c>)
 800113a:	4618      	mov	r0, r3
 800113c:	f00a f888 	bl	800b250 <strtok>
 8001140:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 8001144:	e011      	b.n	800116a <esp_event+0xa6>
    {
        pArray[idx++] = token;
 8001146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	33a8      	adds	r3, #168	@ 0xa8
 8001154:	443b      	add	r3, r7
 8001156:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800115a:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 800115e:	493c      	ldr	r1, [pc, #240]	@ (8001250 <esp_event+0x18c>)
 8001160:	2000      	movs	r0, #0
 8001162:	f00a f875 	bl	800b250 <strtok>
 8001166:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 800116a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <esp_event+0xb6>
 8001172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001176:	2b03      	cmp	r3, #3
 8001178:	dde5      	ble.n	8001146 <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d05c      	beq.n	800123a <esp_event+0x176>
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d059      	beq.n	800123a <esp_event+0x176>
    {
        if (strcmp(pArray[1], "LED") == 0)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4932      	ldr	r1, [pc, #200]	@ (8001254 <esp_event+0x190>)
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f828 	bl	80001e0 <strcmp>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d121      	bne.n	80011da <esp_event+0x116>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	492f      	ldr	r1, [pc, #188]	@ (8001258 <esp_event+0x194>)
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f820 	bl	80001e0 <strcmp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <esp_event+0xf4>
                LED_ON();
 80011a6:	2201      	movs	r2, #1
 80011a8:	2120      	movs	r1, #32
 80011aa:	482c      	ldr	r0, [pc, #176]	@ (800125c <esp_event+0x198>)
 80011ac:	f002 fce2 	bl	8003b74 <HAL_GPIO_WritePin>
                printf("LED turned ON\r\n");
 80011b0:	482b      	ldr	r0, [pc, #172]	@ (8001260 <esp_event+0x19c>)
 80011b2:	f009 fe81 	bl	800aeb8 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80011b6:	e045      	b.n	8001244 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	492a      	ldr	r1, [pc, #168]	@ (8001264 <esp_event+0x1a0>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f80f 	bl	80001e0 <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d13d      	bne.n	8001244 <esp_event+0x180>
                LED_OFF();
 80011c8:	2200      	movs	r2, #0
 80011ca:	2120      	movs	r1, #32
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <esp_event+0x198>)
 80011ce:	f002 fcd1 	bl	8003b74 <HAL_GPIO_WritePin>
                printf("LED turned OFF\r\n");
 80011d2:	4825      	ldr	r0, [pc, #148]	@ (8001268 <esp_event+0x1a4>)
 80011d4:	f009 fe70 	bl	800aeb8 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80011d8:	e034      	b.n	8001244 <esp_event+0x180>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4923      	ldr	r1, [pc, #140]	@ (800126c <esp_event+0x1a8>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe fffe 	bl	80001e0 <strcmp>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d121      	bne.n	800122e <esp_event+0x16a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	491a      	ldr	r1, [pc, #104]	@ (8001258 <esp_event+0x194>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7fe fff6 	bl	80001e0 <strcmp>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <esp_event+0x148>
                FAN_ON();
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	481c      	ldr	r0, [pc, #112]	@ (8001270 <esp_event+0x1ac>)
 8001200:	f002 fcb8 	bl	8003b74 <HAL_GPIO_WritePin>
                printf("FAN turned ON\r\n");
 8001204:	481b      	ldr	r0, [pc, #108]	@ (8001274 <esp_event+0x1b0>)
 8001206:	f009 fe57 	bl	800aeb8 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800120a:	e01b      	b.n	8001244 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4915      	ldr	r1, [pc, #84]	@ (8001264 <esp_event+0x1a0>)
 8001210:	4618      	mov	r0, r3
 8001212:	f7fe ffe5 	bl	80001e0 <strcmp>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d113      	bne.n	8001244 <esp_event+0x180>
                FAN_OFF();
 800121c:	2200      	movs	r2, #0
 800121e:	2110      	movs	r1, #16
 8001220:	4813      	ldr	r0, [pc, #76]	@ (8001270 <esp_event+0x1ac>)
 8001222:	f002 fca7 	bl	8003b74 <HAL_GPIO_WritePin>
                printf("FAN turned OFF\r\n");
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <esp_event+0x1b4>)
 8001228:	f009 fe46 	bl	800aeb8 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800122c:	e00a      	b.n	8001244 <esp_event+0x180>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4619      	mov	r1, r3
 8001232:	4812      	ldr	r0, [pc, #72]	@ (800127c <esp_event+0x1b8>)
 8001234:	f009 fdd0 	bl	800add8 <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 8001238:	e004      	b.n	8001244 <esp_event+0x180>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4810      	ldr	r0, [pc, #64]	@ (8001280 <esp_event+0x1bc>)
 800123e:	f009 fdcb 	bl	800add8 <iprintf>
    }
}
 8001242:	e000      	b.n	8001246 <esp_event+0x182>
        if (strcmp(pArray[1], "LED") == 0)
 8001244:	bf00      	nop
}
 8001246:	bf00      	nop
 8001248:	37a8      	adds	r7, #168	@ 0xa8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	0800eb80 	.word	0x0800eb80
 8001254:	0800eb88 	.word	0x0800eb88
 8001258:	0800eb8c 	.word	0x0800eb8c
 800125c:	40020000 	.word	0x40020000
 8001260:	0800eb90 	.word	0x0800eb90
 8001264:	0800eba0 	.word	0x0800eba0
 8001268:	0800eba4 	.word	0x0800eba4
 800126c:	0800ebb4 	.word	0x0800ebb4
 8001270:	40020400 	.word	0x40020400
 8001274:	0800ebb8 	.word	0x0800ebb8
 8001278:	0800ebc8 	.word	0x0800ebc8
 800127c:	0800ebd8 	.word	0x0800ebd8
 8001280:	0800ebf0 	.word	0x0800ebf0

08001284 <try_extract_ipd_payload>:

// +IPD,<len>:...   (CIPMUX=0)
// +IPD,<id>,<len>:...  (CIPMUX=1)
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b092      	sub	sp, #72	@ 0x48
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    int copied = 0, consumed = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
 8001292:	2300      	movs	r3, #0
 8001294:	643b      	str	r3, [r7, #64]	@ 0x40

    taskENTER_CRITICAL();
 8001296:	f008 fb2f 	bl	80098f8 <vPortEnterCritical>
    int n = cb_data.length;
 800129a:	4b70      	ldr	r3, [pc, #448]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 800129c:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80012a0:	623b      	str	r3, [r7, #32]
    if (n > 0) {
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f340 80d2 	ble.w	800144e <try_extract_ipd_payload+0x1ca>
        int start = -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i + 4 < n; ++i) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012b4:	e023      	b.n	80012fe <try_extract_ipd_payload+0x7a>
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 80012b6:	4a69      	ldr	r2, [pc, #420]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80012b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b2b      	cmp	r3, #43	@ 0x2b
 80012c0:	d11a      	bne.n	80012f8 <try_extract_ipd_payload+0x74>
 80012c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a65      	ldr	r2, [pc, #404]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	2b49      	cmp	r3, #73	@ 0x49
 80012cc:	d114      	bne.n	80012f8 <try_extract_ipd_payload+0x74>
 80012ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012d0:	3302      	adds	r3, #2
 80012d2:	4a62      	ldr	r2, [pc, #392]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	2b50      	cmp	r3, #80	@ 0x50
 80012d8:	d10e      	bne.n	80012f8 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 80012da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012dc:	3303      	adds	r3, #3
 80012de:	4a5f      	ldr	r2, [pc, #380]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 80012e2:	2b44      	cmp	r3, #68	@ 0x44
 80012e4:	d108      	bne.n	80012f8 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 80012e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e8:	3304      	adds	r3, #4
 80012ea:	4a5c      	ldr	r2, [pc, #368]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80012f0:	d102      	bne.n	80012f8 <try_extract_ipd_payload+0x74>
 80012f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012f6:	e007      	b.n	8001308 <try_extract_ipd_payload+0x84>
        for (int i = 0; i + 4 < n; ++i) {
 80012f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012fa:	3301      	adds	r3, #1
 80012fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001300:	3304      	adds	r3, #4
 8001302:	6a3a      	ldr	r2, [r7, #32]
 8001304:	429a      	cmp	r2, r3
 8001306:	dcd6      	bgt.n	80012b6 <try_extract_ipd_payload+0x32>
        }
        if (start >= 0) {
 8001308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800130a:	2b00      	cmp	r3, #0
 800130c:	f2c0 8088 	blt.w	8001420 <try_extract_ipd_payload+0x19c>
            int p = start + 5;
 8001310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001312:	3305      	adds	r3, #5
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34

            // (1) optional link id
            int q = p;
 8001316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
            while (q < n && cb_data.buf[q]>='0' && cb_data.buf[q]<='9') q++;
 800131a:	e002      	b.n	8001322 <try_extract_ipd_payload+0x9e>
 800131c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800131e:	3301      	adds	r3, #1
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
 8001322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	429a      	cmp	r2, r3
 8001328:	da0b      	bge.n	8001342 <try_extract_ipd_payload+0xbe>
 800132a:	4a4c      	ldr	r2, [pc, #304]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 800132c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b2f      	cmp	r3, #47	@ 0x2f
 8001334:	d905      	bls.n	8001342 <try_extract_ipd_payload+0xbe>
 8001336:	4a49      	ldr	r2, [pc, #292]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 8001338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b39      	cmp	r3, #57	@ 0x39
 8001340:	d9ec      	bls.n	800131c <try_extract_ipd_payload+0x98>
            if (q < n && cb_data.buf[q] == ',') {
 8001342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	429a      	cmp	r2, r3
 8001348:	da08      	bge.n	800135c <try_extract_ipd_payload+0xd8>
 800134a:	4a44      	ldr	r2, [pc, #272]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b2c      	cmp	r3, #44	@ 0x2c
 8001354:	d102      	bne.n	800135c <try_extract_ipd_payload+0xd8>
                p = q + 1; // had link id -> p now at len
 8001356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001358:	3301      	adds	r3, #1
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
            } // else: single mode, p already at len

            // (2) parse length until ':'
            int len_start = p, colon = -1;
 800135c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 8001366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
 800136a:	e01b      	b.n	80013a4 <try_extract_ipd_payload+0x120>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 800136c:	4a3b      	ldr	r2, [pc, #236]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b3a      	cmp	r3, #58	@ 0x3a
 8001376:	d102      	bne.n	800137e <try_extract_ipd_payload+0xfa>
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800137c:	e01b      	b.n	80013b6 <try_extract_ipd_payload+0x132>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { len_start = -1; break; }
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b2f      	cmp	r3, #47	@ 0x2f
 8001388:	d905      	bls.n	8001396 <try_extract_ipd_payload+0x112>
 800138a:	4a34      	ldr	r2, [pc, #208]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b39      	cmp	r3, #57	@ 0x39
 8001394:	d903      	bls.n	800139e <try_extract_ipd_payload+0x11a>
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800139c:	e00b      	b.n	80013b6 <try_extract_ipd_payload+0x132>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	da04      	bge.n	80013b6 <try_extract_ipd_payload+0x132>
 80013ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ae:	3309      	adds	r3, #9
 80013b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b2:	429a      	cmp	r2, r3
 80013b4:	ddda      	ble.n	800136c <try_extract_ipd_payload+0xe8>
            }
            if (len_start >= 0 && colon > 0) {
 80013b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db31      	blt.n	8001420 <try_extract_ipd_payload+0x19c>
 80013bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd2e      	ble.n	8001420 <try_extract_ipd_payload+0x19c>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 80013c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c4:	4a25      	ldr	r2, [pc, #148]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80013c6:	4413      	add	r3, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f008 fda8 	bl	8009f1e <atoi>
 80013ce:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 80013d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d2:	3301      	adds	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 80013d6:	6a3a      	ldr	r2, [r7, #32]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd1d      	ble.n	8001420 <try_extract_ipd_payload+0x19c>
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	db19      	blt.n	8001420 <try_extract_ipd_payload+0x19c>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	bfa8      	it	ge
 80013f6:	4613      	movge	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4a17      	ldr	r2, [pc, #92]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 80013fe:	4413      	add	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f00a feca 	bl	800c19e <memcpy>
                    dst[cpy] = 0;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	647b      	str	r3, [r7, #68]	@ 0x44
                    consumed = payload_start + ipd_len;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }
        }
        if (consumed > 0) {
 8001420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	dd13      	ble.n	800144e <try_extract_ipd_payload+0x1ca>
            int left = n - consumed;
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove(cb_data.buf, &cb_data.buf[consumed], left);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dd07      	ble.n	8001444 <try_extract_ipd_payload+0x1c0>
 8001434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 8001438:	4413      	add	r3, r2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4619      	mov	r1, r3
 800143e:	4807      	ldr	r0, [pc, #28]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 8001440:	f009 fea0 	bl	800b184 <memmove>
            cb_data.length = left;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <try_extract_ipd_payload+0x1d8>)
 800144a:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
        }
    }
    taskEXIT_CRITICAL();
 800144e:	f008 fa85 	bl	800995c <vPortExitCritical>
    return copied;
 8001452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8001454:	4618      	mov	r0, r3
 8001456:	3748      	adds	r7, #72	@ 0x48
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20001abc 	.word	0x20001abc

08001460 <Command_Task>:

void Command_Task(void *argument)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0c4      	sub	sp, #272	@ 0x110
 8001464:	af00      	add	r7, sp, #0
 8001466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800146a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800146e:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <Command_Task+0x74>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f005 fc91 	bl	8006d9e <osMutexAcquire>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d123      	bne.n	80014ca <Command_Task+0x6a>
			int got = try_extract_ipd_payload(payload, sizeof(payload));
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fefa 	bl	8001284 <try_extract_ipd_payload>
 8001490:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
			osMutexRelease(ESP_MutexHandle);
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <Command_Task+0x74>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fccb 	bl	8006e34 <osMutexRelease>
			if (got > 0) {
 800149e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	dd11      	ble.n	80014ca <Command_Task+0x6a>
				// strip CR/LF
				payload[strcspn(payload, "\r\n")] = '\0';
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	490b      	ldr	r1, [pc, #44]	@ (80014d8 <Command_Task+0x78>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f009 fe98 	bl	800b1e2 <strcspn>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014bc:	2100      	movs	r1, #0
 80014be:	5499      	strb	r1, [r3, r2]
				esp_event(payload);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fdfd 	bl	80010c4 <esp_event>
			}
		}
        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 80014ca:	200a      	movs	r0, #10
 80014cc:	f006 ff14 	bl	80082f8 <vTaskDelay>
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 80014d0:	e7ce      	b.n	8001470 <Command_Task+0x10>
 80014d2:	bf00      	nop
 80014d4:	2000242c 	.word	0x2000242c
 80014d8:	0800ec10 	.word	0x0800ec10

080014dc <NTP_Task>:
extern time_t ntp_time;

#define NTPTIME_TASK_PERIOD_MS 10000

void NTP_Task(void *argument)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	81fb      	strh	r3, [r7, #14]
    TickType_t last = xTaskGetTickCount();
 80014e8:	f007 f850 	bl	800858c <xTaskGetTickCount>
 80014ec:	4603      	mov	r3, r0
 80014ee:	60bb      	str	r3, [r7, #8]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 80014f0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014f4:	613b      	str	r3, [r7, #16]
    static int s_ntp_cfg_ok = 0;

    for(;;)
    {
        if (esp_get_status() == 0) {
 80014f6:	f000 fed3 	bl	80022a0 <esp_get_status>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d15b      	bne.n	80015b8 <NTP_Task+0xdc>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001500:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <NTP_Task+0x114>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fc48 	bl	8006d9e <osMutexAcquire>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d165      	bne.n	80015e0 <NTP_Task+0x104>
                if (!s_ntp_cfg_ok) {
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <NTP_Task+0x118>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d107      	bne.n	800152c <NTP_Task+0x50>
                    if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 800151c:	f001 f968 	bl	80027f0 <esp_ntp_config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <NTP_Task+0x50>
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <NTP_Task+0x118>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
                	}
				if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 800152c:	f107 020e 	add.w	r2, r7, #14
 8001530:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001534:	4930      	ldr	r1, [pc, #192]	@ (80015f8 <NTP_Task+0x11c>)
 8001536:	4831      	ldr	r0, [pc, #196]	@ (80015fc <NTP_Task+0x120>)
 8001538:	f000 fd5a 	bl	8001ff0 <esp_at_command>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d134      	bne.n	80015ac <NTP_Task+0xd0>
					char *p = strtok(response, "\r\n");
 8001542:	492f      	ldr	r1, [pc, #188]	@ (8001600 <NTP_Task+0x124>)
 8001544:	482c      	ldr	r0, [pc, #176]	@ (80015f8 <NTP_Task+0x11c>)
 8001546:	f009 fe83 	bl	800b250 <strtok>
 800154a:	6178      	str	r0, [r7, #20]
					while (p) {
 800154c:	e029      	b.n	80015a2 <NTP_Task+0xc6>
						if (parse_cipsntptime_line(p, &epoch) == 0) {
 800154e:	492d      	ldr	r1, [pc, #180]	@ (8001604 <NTP_Task+0x128>)
 8001550:	6978      	ldr	r0, [r7, #20]
 8001552:	f001 f851 	bl	80025f8 <parse_cipsntptime_line>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11d      	bne.n	8001598 <NTP_Task+0xbc>
							printf("NTP Time (KST): %s\r", ctime(&epoch));
 800155c:	4829      	ldr	r0, [pc, #164]	@ (8001604 <NTP_Task+0x128>)
 800155e:	f009 fee9 	bl	800b334 <ctime>
 8001562:	4603      	mov	r3, r0
 8001564:	4619      	mov	r1, r3
 8001566:	4828      	ldr	r0, [pc, #160]	@ (8001608 <NTP_Task+0x12c>)
 8001568:	f009 fc36 	bl	800add8 <iprintf>
							if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <NTP_Task+0x130>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	4618      	mov	r0, r3
 8001576:	f005 fc12 	bl	8006d9e <osMutexAcquire>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d114      	bne.n	80015aa <NTP_Task+0xce>
								ntp_time = epoch;
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <NTP_Task+0x128>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	4922      	ldr	r1, [pc, #136]	@ (8001610 <NTP_Task+0x134>)
 8001588:	e9c1 2300 	strd	r2, r3, [r1]
								osMutexRelease(NTP_MutexHandle);
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <NTP_Task+0x130>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f005 fc4f 	bl	8006e34 <osMutexRelease>
							}
							break;
 8001596:	e008      	b.n	80015aa <NTP_Task+0xce>
						}
						p = strtok(NULL, "\r\n");
 8001598:	4919      	ldr	r1, [pc, #100]	@ (8001600 <NTP_Task+0x124>)
 800159a:	2000      	movs	r0, #0
 800159c:	f009 fe58 	bl	800b250 <strtok>
 80015a0:	6178      	str	r0, [r7, #20]
					while (p) {
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1d2      	bne.n	800154e <NTP_Task+0x72>
 80015a8:	e000      	b.n	80015ac <NTP_Task+0xd0>
							break;
 80015aa:	bf00      	nop
					}
			}
                osMutexRelease(ESP_MutexHandle);
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <NTP_Task+0x114>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fc3f 	bl	8006e34 <osMutexRelease>
 80015b6:	e013      	b.n	80015e0 <NTP_Task+0x104>
            }
        } else {
            printf("NTP not connected!, reconnecting...\r\n");
 80015b8:	4816      	ldr	r0, [pc, #88]	@ (8001614 <NTP_Task+0x138>)
 80015ba:	f009 fc7d 	bl	800aeb8 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <NTP_Task+0x114>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 fbe9 	bl	8006d9e <osMutexAcquire>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <NTP_Task+0x104>
                esp_client_conn();
 80015d2:	f000 fe21 	bl	8002218 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <NTP_Task+0x114>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 fc2a 	bl	8006e34 <osMutexRelease>
            }
        }
        vTaskDelayUntil(&last, period);
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 fe06 	bl	80081f8 <vTaskDelayUntil>
        if (esp_get_status() == 0) {
 80015ec:	e783      	b.n	80014f6 <NTP_Task+0x1a>
 80015ee:	bf00      	nop
 80015f0:	2000242c 	.word	0x2000242c
 80015f4:	20000264 	.word	0x20000264
 80015f8:	20001284 	.word	0x20001284
 80015fc:	0800ec14 	.word	0x0800ec14
 8001600:	0800ec28 	.word	0x0800ec28
 8001604:	20000268 	.word	0x20000268
 8001608:	0800ec2c 	.word	0x0800ec2c
 800160c:	20002430 	.word	0x20002430
 8001610:	200022c8 	.word	0x200022c8
 8001614:	0800ec40 	.word	0x0800ec40

08001618 <set_ryg>:
// ★ esp.c 전역 버퍼 접근 (읽기 전용 용도)
extern cb_data_t cb_data;
extern char response[MAX_ESP_RX_BUFFER];

static void set_ryg(int r, int y, int g)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, r ? GPIO_PIN_SET : GPIO_PIN_RESET); // RED
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf14      	ite	ne
 800162a:	2301      	movne	r3, #1
 800162c:	2300      	moveq	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001636:	480f      	ldr	r0, [pc, #60]	@ (8001674 <set_ryg+0x5c>)
 8001638:	f002 fa9c 	bl	8003b74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, y ? GPIO_PIN_SET : GPIO_PIN_RESET); // YELLOW
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	bf14      	ite	ne
 8001642:	2301      	movne	r3, #1
 8001644:	2300      	moveq	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800164e:	4809      	ldr	r0, [pc, #36]	@ (8001674 <set_ryg+0x5c>)
 8001650:	f002 fa90 	bl	8003b74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, g ? GPIO_PIN_SET : GPIO_PIN_RESET); // GREEN
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001666:	4803      	ldr	r0, [pc, #12]	@ (8001674 <set_ryg+0x5c>)
 8001668:	f002 fa84 	bl	8003b74 <HAL_GPIO_WritePin>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020400 	.word	0x40020400

08001678 <json_pick_value>:
// ★ esp.c에 추가한 프로브 함수 원형
int esp_link1_tcp_probe(const char *ip_or_host, int port);

// 간단 JSON 파서: "category":"T1H" ... "obsrValue": 27  또는 "obsrValue":"27"
static int json_pick_value(const char *json, const char *cat, char *out, int out_sz)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b098      	sub	sp, #96	@ 0x60
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
    char key[64];
    snprintf(key, sizeof(key), "\"category\":\"%s\"", cat);
 8001686:	f107 0010 	add.w	r0, r7, #16
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	4a3a      	ldr	r2, [pc, #232]	@ (8001778 <json_pick_value+0x100>)
 800168e:	2140      	movs	r1, #64	@ 0x40
 8001690:	f009 fc1a 	bl	800aec8 <sniprintf>
    const char *p = strstr(json, key);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f009 fe34 	bl	800b308 <strstr>
 80016a0:	6538      	str	r0, [r7, #80]	@ 0x50
    if (!p) return -1;
 80016a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <json_pick_value+0x36>
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	e05f      	b.n	800176e <json_pick_value+0xf6>

    const char *v = strstr(p, "\"obsrValue\"");
 80016ae:	4933      	ldr	r1, [pc, #204]	@ (800177c <json_pick_value+0x104>)
 80016b0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80016b2:	f009 fe29 	bl	800b308 <strstr>
 80016b6:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 80016b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <json_pick_value+0x4c>
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e054      	b.n	800176e <json_pick_value+0xf6>
    v = strchr(v, ':');
 80016c4:	213a      	movs	r1, #58	@ 0x3a
 80016c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80016c8:	f009 fd7e 	bl	800b1c8 <strchr>
 80016cc:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 80016ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <json_pick_value+0x62>
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	e049      	b.n	800176e <json_pick_value+0xf6>
    v++; // skip ':'
 80016da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016dc:	3301      	adds	r3, #1
 80016de:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // 공백/따옴표 스킵
    while (*v==' ' || *v=='\"') v++;
 80016e0:	e002      	b.n	80016e8 <json_pick_value+0x70>
 80016e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016e4:	3301      	adds	r3, #1
 80016e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d0f8      	beq.n	80016e2 <json_pick_value+0x6a>
 80016f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b22      	cmp	r3, #34	@ 0x22
 80016f6:	d0f4      	beq.n	80016e2 <json_pick_value+0x6a>

    // 숫자/텍스트 토큰 끝까지
    const char *e = v;
 80016f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*e && *e!='\"' && *e!='\r' && *e!='\n' && *e!=',' && *e!='}') e++;
 80016fc:	e002      	b.n	8001704 <json_pick_value+0x8c>
 80016fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001700:	3301      	adds	r3, #1
 8001702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <json_pick_value+0xbc>
 800170c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b22      	cmp	r3, #34	@ 0x22
 8001712:	d00f      	beq.n	8001734 <json_pick_value+0xbc>
 8001714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b0d      	cmp	r3, #13
 800171a:	d00b      	beq.n	8001734 <json_pick_value+0xbc>
 800171c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b0a      	cmp	r3, #10
 8001722:	d007      	beq.n	8001734 <json_pick_value+0xbc>
 8001724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b2c      	cmp	r3, #44	@ 0x2c
 800172a:	d003      	beq.n	8001734 <json_pick_value+0xbc>
 800172c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b7d      	cmp	r3, #125	@ 0x7d
 8001732:	d1e4      	bne.n	80016fe <json_pick_value+0x86>

    int len = (int)(e - v);
 8001734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (len <= 0) return -1;
 800173c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc02      	bgt.n	8001748 <json_pick_value+0xd0>
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e012      	b.n	800176e <json_pick_value+0xf6>
    if (len >= out_sz) len = out_sz - 1;
 8001748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	db02      	blt.n	8001756 <json_pick_value+0xde>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	657b      	str	r3, [r7, #84]	@ 0x54
    memcpy(out, v, len);
 8001756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001758:	461a      	mov	r2, r3
 800175a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f00a fd1e 	bl	800c19e <memcpy>
    out[len] = 0;
 8001762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
    return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3760      	adds	r7, #96	@ 0x60
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0800ec68 	.word	0x0800ec68
 800177c:	0800ec78 	.word	0x0800ec78

08001780 <strip_ipd_markers>:

// ESP01 "+IPD,<link>,<len>:" 마커 제거 → 순수 HTTP/JSON만 남김
static int strip_ipd_markers(const char *in, char *out, int out_sz)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    int w = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *p = in;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 8001794:	e077      	b.n	8001886 <strip_ipd_markers+0x106>
        const char *tag = strstr(p, "+IPD,");
 8001796:	4946      	ldr	r1, [pc, #280]	@ (80018b0 <strip_ipd_markers+0x130>)
 8001798:	6a38      	ldr	r0, [r7, #32]
 800179a:	f009 fdb5 	bl	800b308 <strstr>
 800179e:	6138      	str	r0, [r7, #16]
        if (!tag) {
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11d      	bne.n	80017e2 <strip_ipd_markers+0x62>
            int remain = (int)strlen(p);
 80017a6:	6a38      	ldr	r0, [r7, #32]
 80017a8:	f7fe fd24 	bl	80001f4 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	61fb      	str	r3, [r7, #28]
            if (remain > out_sz - 1 - w) remain = out_sz - 1 - w;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dd04      	ble.n	80017c8 <strip_ipd_markers+0x48>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	61fb      	str	r3, [r7, #28]
            memcpy(out + w, p, remain);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00a fce3 	bl	800c19e <memcpy>
            w += remain;
 80017d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80017e0:	e05b      	b.n	800189a <strip_ipd_markers+0x11a>
        }
        int seg = (int)(tag - p);
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	61bb      	str	r3, [r7, #24]
        if (seg > 0) {
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dd17      	ble.n	8001820 <strip_ipd_markers+0xa0>
            if (seg > out_sz - 1 - w) seg = out_sz - 1 - w;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	1e5a      	subs	r2, r3, #1
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd04      	ble.n	8001808 <strip_ipd_markers+0x88>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	61bb      	str	r3, [r7, #24]
            memcpy(out + w, p, seg);
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	6a39      	ldr	r1, [r7, #32]
 8001812:	4618      	mov	r0, r3
 8001814:	f00a fcc3 	bl	800c19e <memcpy>
            w += seg;
 8001818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4413      	add	r3, r2
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        const char *q = tag + 5; // after "+IPD,"
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	3305      	adds	r3, #5
 8001824:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // link
 8001826:	e002      	b.n	800182e <strip_ipd_markers+0xae>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <strip_ipd_markers+0xc6>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b2f      	cmp	r3, #47	@ 0x2f
 800183c:	d903      	bls.n	8001846 <strip_ipd_markers+0xc6>
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b39      	cmp	r3, #57	@ 0x39
 8001844:	d9f0      	bls.n	8001828 <strip_ipd_markers+0xa8>
        if (*q==',') q++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b2c      	cmp	r3, #44	@ 0x2c
 800184c:	d106      	bne.n	800185c <strip_ipd_markers+0xdc>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // len
 8001854:	e002      	b.n	800185c <strip_ipd_markers+0xdc>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <strip_ipd_markers+0xf4>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b2f      	cmp	r3, #47	@ 0x2f
 800186a:	d903      	bls.n	8001874 <strip_ipd_markers+0xf4>
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b39      	cmp	r3, #57	@ 0x39
 8001872:	d9f0      	bls.n	8001856 <strip_ipd_markers+0xd6>
        if (*q==':') q++;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b3a      	cmp	r3, #58	@ 0x3a
 800187a:	d102      	bne.n	8001882 <strip_ipd_markers+0x102>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
        p = q;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <strip_ipd_markers+0x11a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3b01      	subs	r3, #1
 8001892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001894:	429a      	cmp	r2, r3
 8001896:	f6ff af7e 	blt.w	8001796 <strip_ipd_markers+0x16>
    }
    out[w] = 0;
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    return w;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3728      	adds	r7, #40	@ 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800ec84 	.word	0x0800ec84

080018b4 <dechunk_simple>:

// Transfer-Encoding: chunked 간단 디청크
static int dechunk_simple(const char *in, char *out, int out_sz)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
    int w = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    const char *p = in;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	61bb      	str	r3, [r7, #24]
    while (*p) {
 80018c8:	e044      	b.n	8001954 <dechunk_simple+0xa0>
        int sz = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
        if (sscanf(p, "%x", &sz) != 1) break;
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	461a      	mov	r2, r3
 80018d4:	492a      	ldr	r1, [pc, #168]	@ (8001980 <dechunk_simple+0xcc>)
 80018d6:	69b8      	ldr	r0, [r7, #24]
 80018d8:	f009 fb4e 	bl	800af78 <siscanf>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d13d      	bne.n	800195e <dechunk_simple+0xaa>
        const char *nl = strstr(p, "\r\n");
 80018e2:	4928      	ldr	r1, [pc, #160]	@ (8001984 <dechunk_simple+0xd0>)
 80018e4:	69b8      	ldr	r0, [r7, #24]
 80018e6:	f009 fd0f 	bl	800b308 <strstr>
 80018ea:	6178      	str	r0, [r7, #20]
        if (!nl) break;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d037      	beq.n	8001962 <dechunk_simple+0xae>
        p = nl + 2;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3302      	adds	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
        if (sz == 0) break;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d033      	beq.n	8001966 <dechunk_simple+0xb2>
        if (w + sz > out_sz - 1) sz = out_sz - 1 - w;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4413      	add	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	dc04      	bgt.n	8001914 <dechunk_simple+0x60>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	613b      	str	r3, [r7, #16]
        if (sz <= 0) break;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	dd27      	ble.n	800196a <dechunk_simple+0xb6>
        memcpy(out + w, p, sz);
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	4413      	add	r3, r2
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	4618      	mov	r0, r3
 8001926:	f00a fc3a 	bl	800c19e <memcpy>
        w += sz;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	61fb      	str	r3, [r7, #28]
        p += sz;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	461a      	mov	r2, r3
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4413      	add	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if (p[0]=='\r' && p[1]=='\n') p += 2;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b0d      	cmp	r3, #13
 8001942:	d107      	bne.n	8001954 <dechunk_simple+0xa0>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	3301      	adds	r3, #1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d102      	bne.n	8001954 <dechunk_simple+0xa0>
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	3302      	adds	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    while (*p) {
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1b6      	bne.n	80018ca <dechunk_simple+0x16>
 800195c:	e006      	b.n	800196c <dechunk_simple+0xb8>
        if (sscanf(p, "%x", &sz) != 1) break;
 800195e:	bf00      	nop
 8001960:	e004      	b.n	800196c <dechunk_simple+0xb8>
        if (!nl) break;
 8001962:	bf00      	nop
 8001964:	e002      	b.n	800196c <dechunk_simple+0xb8>
        if (sz == 0) break;
 8001966:	bf00      	nop
 8001968:	e000      	b.n	800196c <dechunk_simple+0xb8>
        if (sz <= 0) break;
 800196a:	bf00      	nop
    }
    out[w] = 0;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
    return w;
 8001976:	69fb      	ldr	r3, [r7, #28]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	0800ec8c 	.word	0x0800ec8c
 8001984:	0800ec90 	.word	0x0800ec90

08001988 <kma_ultra_fcst_base>:

static int kma_ultra_fcst_base(char *date8, char *time4)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	@ 0x30
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    time_t t;
    // NTP에서 얻은 epoch 사용
    if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8001992:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <kma_ultra_fcst_base+0xbc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f04f 31ff 	mov.w	r1, #4294967295
 800199a:	4618      	mov	r0, r3
 800199c:	f005 f9ff 	bl	8006d9e <osMutexAcquire>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10a      	bne.n	80019bc <kma_ultra_fcst_base+0x34>
        t = ntp_time;
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <kma_ultra_fcst_base+0xc0>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
        osMutexRelease(NTP_MutexHandle);
 80019b0:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <kma_ultra_fcst_base+0xbc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f005 fa3d 	bl	8006e34 <osMutexRelease>
 80019ba:	e006      	b.n	80019ca <kma_ultra_fcst_base+0x42>
    } else {
        t = time(NULL); // fallback
 80019bc:	2000      	movs	r0, #0
 80019be:	f00a f85b 	bl	800ba78 <time>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    struct tm *k = localtime(&t);
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4618      	mov	r0, r3
 80019d0:	f009 fcb8 	bl	800b344 <localtime>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24
    int yyyy = k->tm_year + 1900;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80019de:	623b      	str	r3, [r7, #32]
    int mm   = k->tm_mon + 1;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
    int dd   = k->tm_mday;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
    int hh   = k->tm_hour;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	617b      	str	r3, [r7, #20]
    int mi   = k->tm_min;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]

    mi = (mi / 10) * 10; //10분단위로 내림
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <kma_ultra_fcst_base+0xc4>)
 80019fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001a02:	1092      	asrs	r2, r2, #2
 8001a04:	17db      	asrs	r3, r3, #31
 8001a06:	1ad2      	subs	r2, r2, r3
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]

    // 1시간 단위라서 분은 무시
    sprintf(date8, "%04d%02d%02d", yyyy, mm, dd);
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	490d      	ldr	r1, [pc, #52]	@ (8001a50 <kma_ultra_fcst_base+0xc8>)
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f009 fa89 	bl	800af34 <siprintf>
    sprintf(time4, "%02d%02d", hh, mi);   // hh시 정각
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	490b      	ldr	r1, [pc, #44]	@ (8001a54 <kma_ultra_fcst_base+0xcc>)
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f009 fa83 	bl	800af34 <siprintf>
    printf("%d:%d:00", hh, mi);
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	6979      	ldr	r1, [r7, #20]
 8001a32:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <kma_ultra_fcst_base+0xd0>)
 8001a34:	f009 f9d0 	bl	800add8 <iprintf>
    return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20002430 	.word	0x20002430
 8001a48:	200022c8 	.word	0x200022c8
 8001a4c:	66666667 	.word	0x66666667
 8001a50:	0800ec94 	.word	0x0800ec94
 8001a54:	0800eca4 	.word	0x0800eca4
 8001a58:	0800ecb0 	.word	0x0800ecb0

08001a5c <pty_text>:

static const char* pty_text(int code)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    switch (code) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d822      	bhi.n	8001ab0 <pty_text+0x54>
 8001a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a70 <pty_text+0x14>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001a91 	.word	0x08001a91
 8001a74:	08001a95 	.word	0x08001a95
 8001a78:	08001a99 	.word	0x08001a99
 8001a7c:	08001a9d 	.word	0x08001a9d
 8001a80:	08001aa1 	.word	0x08001aa1
 8001a84:	08001aa5 	.word	0x08001aa5
 8001a88:	08001aa9 	.word	0x08001aa9
 8001a8c:	08001aad 	.word	0x08001aad
        case 0: return "NO Rain";
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <pty_text+0x64>)
 8001a92:	e00e      	b.n	8001ab2 <pty_text+0x56>
        case 1: return "Rain";
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <pty_text+0x68>)
 8001a96:	e00c      	b.n	8001ab2 <pty_text+0x56>
        case 2: return "Rain/Snow";
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <pty_text+0x6c>)
 8001a9a:	e00a      	b.n	8001ab2 <pty_text+0x56>
        case 3: return "Snow";
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <pty_text+0x70>)
 8001a9e:	e008      	b.n	8001ab2 <pty_text+0x56>
        case 4: return "Shower";
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <pty_text+0x74>)
 8001aa2:	e006      	b.n	8001ab2 <pty_text+0x56>
        case 5: return "RainDrop";
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <pty_text+0x78>)
 8001aa6:	e004      	b.n	8001ab2 <pty_text+0x56>
        case 6: return "RainDrop/SnowFlying";
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <pty_text+0x7c>)
 8001aaa:	e002      	b.n	8001ab2 <pty_text+0x56>
        case 7: return "SnowFlying";
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <pty_text+0x80>)
 8001aae:	e000      	b.n	8001ab2 <pty_text+0x56>
        default: return "?";
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <pty_text+0x84>)
    }
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	0800ecbc 	.word	0x0800ecbc
 8001ac4:	0800ecc4 	.word	0x0800ecc4
 8001ac8:	0800eccc 	.word	0x0800eccc
 8001acc:	0800ecd8 	.word	0x0800ecd8
 8001ad0:	0800ece0 	.word	0x0800ece0
 8001ad4:	0800ece8 	.word	0x0800ece8
 8001ad8:	0800ecf4 	.word	0x0800ecf4
 8001adc:	0800ed08 	.word	0x0800ed08
 8001ae0:	0800ed14 	.word	0x0800ed14

08001ae4 <Weather_Task>:


void Weather_Task(void *argument)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	f5ad 6d3b 	sub.w	sp, sp, #2992	@ 0xbb0
 8001aea:	af04      	add	r7, sp, #16
 8001aec:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 8001af0:	f6a3 339c 	subw	r3, r3, #2972	@ 0xb9c
 8001af4:	6018      	str	r0, [r3, #0]
    const char *KMA_HOST = "apihub.kma.go.kr";
 8001af6:	4b75      	ldr	r3, [pc, #468]	@ (8001ccc <Weather_Task+0x1e8>)
 8001af8:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
    const char *KMA_IP   = "203.247.96.25";   // nslookup 결과
 8001afc:	4b74      	ldr	r3, [pc, #464]	@ (8001cd0 <Weather_Task+0x1ec>)
 8001afe:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
    const int NX = 55, NY = 126;              // 격자 좌표(원하면 변경)
 8001b02:	2337      	movs	r3, #55	@ 0x37
 8001b04:	f8c7 3b80 	str.w	r3, [r7, #2944]	@ 0xb80
 8001b08:	237e      	movs	r3, #126	@ 0x7e
 8001b0a:	f8c7 3b7c 	str.w	r3, [r7, #2940]	@ 0xb7c

    uint16_t length;

    for (;;)
    {
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001b0e:	4b71      	ldr	r3, [pc, #452]	@ (8001cd4 <Weather_Task+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f04f 31ff 	mov.w	r1, #4294967295
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 f941 	bl	8006d9e <osMutexAcquire>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8234 	bne.w	8001f8c <Weather_Task+0x4a8>
            // 1) 링크1 열기
            char cmd[128];
            sprintf(cmd, "AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", KMA_IP);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	f8d7 2b84 	ldr.w	r2, [r7, #2948]	@ 0xb84
 8001b2c:	496a      	ldr	r1, [pc, #424]	@ (8001cd8 <Weather_Task+0x1f4>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f009 fa00 	bl	800af34 <siprintf>
            if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) == 0) {
 8001b34:	f607 325e 	addw	r2, r7, #2910	@ 0xb5e
 8001b38:	f107 000c 	add.w	r0, r7, #12
 8001b3c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b40:	4966      	ldr	r1, [pc, #408]	@ (8001cdc <Weather_Task+0x1f8>)
 8001b42:	f000 fa55 	bl	8001ff0 <esp_at_command>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 8217 	bne.w	8001f7c <Weather_Task+0x498>
                //printf("[WEATHER] Link1 TCP connect OK\r\n");

                // 2) HTTP GET 문자열 준비
                char http_req[640];
                char base_date[9], base_time[5];
                kma_ultra_fcst_base(base_date, base_time);
 8001b4e:	f607 324c 	addw	r2, r7, #2892	@ 0xb4c
 8001b52:	f607 3354 	addw	r3, r7, #2900	@ 0xb54
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff15 	bl	8001988 <kma_ultra_fcst_base>

                sprintf(http_req,
 8001b5e:	f607 314c 	addw	r1, r7, #2892	@ 0xb4c
 8001b62:	f607 3254 	addw	r2, r7, #2900	@ 0xb54
 8001b66:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8001b6a:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	f8d7 3b80 	ldr.w	r3, [r7, #2944]	@ 0xb80
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4958      	ldr	r1, [pc, #352]	@ (8001ce0 <Weather_Task+0x1fc>)
 8001b80:	f009 f9d8 	bl	800af34 <siprintf>
                    "Connection: close\r\n\r\n",
                    base_date, base_time, NX, NY, KMA_HOST);


                // 3) AT+CIPSEND=1,<len>
                sprintf(cmd, "AT+CIPSEND=1,%d\r\n", (int)strlen(http_req));
 8001b84:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fb33 	bl	80001f4 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4953      	ldr	r1, [pc, #332]	@ (8001ce4 <Weather_Task+0x200>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f009 f9cb 	bl	800af34 <siprintf>
                if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 2000) == 0) {
 8001b9e:	f607 325e 	addw	r2, r7, #2910	@ 0xb5e
 8001ba2:	f107 000c 	add.w	r0, r7, #12
 8001ba6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001baa:	494c      	ldr	r1, [pc, #304]	@ (8001cdc <Weather_Task+0x1f8>)
 8001bac:	f000 fa20 	bl	8001ff0 <esp_at_command>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 81d9 	bne.w	8001f6a <Weather_Task+0x486>
                    // (권장) 프롬프트 안정화
                    vTaskDelay(pdMS_TO_TICKS(50));
 8001bb8:	2032      	movs	r0, #50	@ 0x32
 8001bba:	f006 fb9d 	bl	80082f8 <vTaskDelay>

                    // 4) payload 송신 (단순 송신)
                    HAL_UART_Transmit(&huart6, (uint8_t*)http_req, strlen(http_req), 500);
 8001bbe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fb16 	bl	80001f4 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001bd0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001bd4:	4844      	ldr	r0, [pc, #272]	@ (8001ce8 <Weather_Task+0x204>)
 8001bd6:	f003 ff15 	bl	8005a04 <HAL_UART_Transmit>

                    // 5) 응답 수신: cb_data에서 rx로 누적 수집 (최대 8초, CLOSED 감지 시 조기 종료)
                    char rx[MAX_ESP_RX_BUFFER];
                    int  copied = 0, elapsed = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
                    memset(rx, 0, sizeof(rx));
 8001be6:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8001bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f009 fae1 	bl	800b1b8 <memset>

                    for (;;) {
                        // CLOSED 들어오면 서버가 응답 끝내고 소켓 닫았다는 의미
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8001bf6:	493d      	ldr	r1, [pc, #244]	@ (8001cec <Weather_Task+0x208>)
 8001bf8:	483d      	ldr	r0, [pc, #244]	@ (8001cf0 <Weather_Task+0x20c>)
 8001bfa:	f009 fb85 	bl	800b308 <strstr>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d142      	bne.n	8001c8a <Weather_Task+0x1a6>

                        if (cb_data.length > 0) {
 8001c04:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <Weather_Task+0x20c>)
 8001c06:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02f      	beq.n	8001c6e <Weather_Task+0x18a>
                            taskENTER_CRITICAL();
 8001c0e:	f007 fe73 	bl	80098f8 <vPortEnterCritical>
                            int n = cb_data.length;
 8001c12:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <Weather_Task+0x20c>)
 8001c14:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001c18:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
                            if (n > (int)sizeof(rx) - 1 - copied) n = sizeof(rx) - 1 - copied;
 8001c1c:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 8001c20:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8001c24:	3307      	adds	r3, #7
 8001c26:	f8d7 2b94 	ldr.w	r2, [r7, #2964]	@ 0xb94
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dd06      	ble.n	8001c3c <Weather_Task+0x158>
 8001c2e:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 8001c32:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8001c36:	3307      	adds	r3, #7
 8001c38:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
                            memcpy(rx + copied, cb_data.buf, n);
 8001c3c:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 8001c40:	f507 7243 	add.w	r2, r7, #780	@ 0x30c
 8001c44:	4413      	add	r3, r2
 8001c46:	f8d7 2b94 	ldr.w	r2, [r7, #2964]	@ 0xb94
 8001c4a:	4929      	ldr	r1, [pc, #164]	@ (8001cf0 <Weather_Task+0x20c>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00a faa6 	bl	800c19e <memcpy>
                            cb_data.length = 0;   // 소비
 8001c52:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <Weather_Task+0x20c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
                            taskEXIT_CRITICAL();
 8001c5a:	f007 fe7f 	bl	800995c <vPortExitCritical>
                            copied += n;
 8001c5e:	f8d7 2b9c 	ldr.w	r2, [r7, #2972]	@ 0xb9c
 8001c62:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8001c66:	4413      	add	r3, r2
 8001c68:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
 8001c6c:	e7c3      	b.n	8001bf6 <Weather_Task+0x112>
                        } else {
                            vTaskDelay(pdMS_TO_TICKS(20));
 8001c6e:	2014      	movs	r0, #20
 8001c70:	f006 fb42 	bl	80082f8 <vTaskDelay>
                            elapsed += 20;
 8001c74:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001c78:	3314      	adds	r3, #20
 8001c7a:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8001c7e:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001c82:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001c86:	da02      	bge.n	8001c8e <Weather_Task+0x1aa>
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8001c88:	e7b5      	b.n	8001bf6 <Weather_Task+0x112>
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <Weather_Task+0x1ac>
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8001c8e:	bf00      	nop
                    // 디버그: 원본 앞머리
                   // { char head[200]={0}; snprintf(head,sizeof(head)-1,"%.*s",180,rx);
                   //   printf("[WEATHER] RAW head: %s\r\n", head); }

					// ---- HTTP 헤더/본문 분리 ----
					char *http = strstr(rx, "HTTP/1.1 ");
 8001c90:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8001c94:	4917      	ldr	r1, [pc, #92]	@ (8001cf4 <Weather_Task+0x210>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f009 fb36 	bl	800b308 <strstr>
 8001c9c:	f8c7 0b78 	str.w	r0, [r7, #2936]	@ 0xb78
					char *hdr_end = http ? strstr(http, "\r\n\r\n") : NULL;
 8001ca0:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <Weather_Task+0x1d2>
 8001ca8:	4913      	ldr	r1, [pc, #76]	@ (8001cf8 <Weather_Task+0x214>)
 8001caa:	f8d7 0b78 	ldr.w	r0, [r7, #2936]	@ 0xb78
 8001cae:	f009 fb2b 	bl	800b308 <strstr>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	e000      	b.n	8001cb8 <Weather_Task+0x1d4>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 3b74 	str.w	r3, [r7, #2932]	@ 0xb74
					char *body = hdr_end ? (hdr_end + 4) : rx;
 8001cbc:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <Weather_Task+0x218>
 8001cc4:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001cc8:	3304      	adds	r3, #4
 8001cca:	e019      	b.n	8001d00 <Weather_Task+0x21c>
 8001ccc:	0800ed18 	.word	0x0800ed18
 8001cd0:	0800ed2c 	.word	0x0800ed2c
 8001cd4:	2000242c 	.word	0x2000242c
 8001cd8:	0800ed3c 	.word	0x0800ed3c
 8001cdc:	20001284 	.word	0x20001284
 8001ce0:	0800ed5c 	.word	0x0800ed5c
 8001ce4:	0800ee30 	.word	0x0800ee30
 8001ce8:	200023d4 	.word	0x200023d4
 8001cec:	0800ee44 	.word	0x0800ee44
 8001cf0:	20001abc 	.word	0x20001abc
 8001cf4:	0800ee4c 	.word	0x0800ee4c
 8001cf8:	0800ee58 	.word	0x0800ee58
 8001cfc:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8001d00:	f8c7 3b70 	str.w	r3, [r7, #2928]	@ 0xb70

					// 헤더에서 chunked 여부 확인
					int is_chunked = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
					if (http && hdr_end) {
 8001d0a:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01e      	beq.n	8001d50 <Weather_Task+0x26c>
 8001d12:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01a      	beq.n	8001d50 <Weather_Task+0x26c>
						char save = *hdr_end; *hdr_end = 0;
 8001d1a:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f887 3b6f 	strb.w	r3, [r7, #2927]	@ 0xb6f
 8001d24:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
						is_chunked = (strstr(http, "Transfer-Encoding: chunked") != NULL);
 8001d2c:	499a      	ldr	r1, [pc, #616]	@ (8001f98 <Weather_Task+0x4b4>)
 8001d2e:	f8d7 0b78 	ldr.w	r0, [r7, #2936]	@ 0xb78
 8001d32:	f009 fae9 	bl	800b308 <strstr>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
						*hdr_end = save;
 8001d46:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001d4a:	f897 2b6f 	ldrb.w	r2, [r7, #2927]	@ 0xb6f
 8001d4e:	701a      	strb	r2, [r3, #0]
					}

					// 1) +IPD 마커 제거
					static char no_ipd[MAX_ESP_RX_BUFFER];
					strip_ipd_markers(body, no_ipd, sizeof(no_ipd));
 8001d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d54:	4991      	ldr	r1, [pc, #580]	@ (8001f9c <Weather_Task+0x4b8>)
 8001d56:	f8d7 0b70 	ldr.w	r0, [r7, #2928]	@ 0xb70
 8001d5a:	f7ff fd11 	bl	8001780 <strip_ipd_markers>

					// 2) (필요시) 디청크
					static char json_buf[MAX_ESP_RX_BUFFER];
					const char *json_src = no_ipd;
 8001d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8001f9c <Weather_Task+0x4b8>)
 8001d60:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
					if (is_chunked) {
 8001d64:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <Weather_Task+0x29a>
						dechunk_simple(no_ipd, json_buf, sizeof(json_buf));
 8001d6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d70:	498b      	ldr	r1, [pc, #556]	@ (8001fa0 <Weather_Task+0x4bc>)
 8001d72:	488a      	ldr	r0, [pc, #552]	@ (8001f9c <Weather_Task+0x4b8>)
 8001d74:	f7ff fd9e 	bl	80018b4 <dechunk_simple>
						json_src = json_buf;
 8001d78:	4b89      	ldr	r3, [pc, #548]	@ (8001fa0 <Weather_Task+0x4bc>)
 8001d7a:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
					}

                    if (strstr(rx, "HTTP/1.1 200")) {
 8001d7e:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8001d82:	4988      	ldr	r1, [pc, #544]	@ (8001fa4 <Weather_Task+0x4c0>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f009 fabf 	bl	800b308 <strstr>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80e7 	beq.w	8001f60 <Weather_Task+0x47c>
                        char t1h[16] = "?", reh[16] = "?", pty[16] = "?", rn1[16] = "?";
 8001d92:	233f      	movs	r3, #63	@ 0x3f
 8001d94:	f8c7 3b3c 	str.w	r3, [r7, #2876]	@ 0xb3c
 8001d98:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	233f      	movs	r3, #63	@ 0x3f
 8001da6:	f8c7 3b2c 	str.w	r3, [r7, #2860]	@ 0xb2c
 8001daa:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	233f      	movs	r3, #63	@ 0x3f
 8001db8:	f8c7 3b1c 	str.w	r3, [r7, #2844]	@ 0xb1c
 8001dbc:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	233f      	movs	r3, #63	@ 0x3f
 8001dca:	f8c7 3b0c 	str.w	r3, [r7, #2828]	@ 0xb0c
 8001dce:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
                        json_pick_value(json_src, "T1H", t1h, sizeof(t1h));
 8001dda:	f607 323c 	addw	r2, r7, #2876	@ 0xb3c
 8001dde:	2310      	movs	r3, #16
 8001de0:	4971      	ldr	r1, [pc, #452]	@ (8001fa8 <Weather_Task+0x4c4>)
 8001de2:	f8d7 0b8c 	ldr.w	r0, [r7, #2956]	@ 0xb8c
 8001de6:	f7ff fc47 	bl	8001678 <json_pick_value>
                        json_pick_value(json_src, "REH", reh, sizeof(reh));
 8001dea:	f607 322c 	addw	r2, r7, #2860	@ 0xb2c
 8001dee:	2310      	movs	r3, #16
 8001df0:	496e      	ldr	r1, [pc, #440]	@ (8001fac <Weather_Task+0x4c8>)
 8001df2:	f8d7 0b8c 	ldr.w	r0, [r7, #2956]	@ 0xb8c
 8001df6:	f7ff fc3f 	bl	8001678 <json_pick_value>
                        json_pick_value(json_src, "PTY", pty, sizeof(pty));
 8001dfa:	f607 321c 	addw	r2, r7, #2844	@ 0xb1c
 8001dfe:	2310      	movs	r3, #16
 8001e00:	496b      	ldr	r1, [pc, #428]	@ (8001fb0 <Weather_Task+0x4cc>)
 8001e02:	f8d7 0b8c 	ldr.w	r0, [r7, #2956]	@ 0xb8c
 8001e06:	f7ff fc37 	bl	8001678 <json_pick_value>
                        json_pick_value(json_src, "RN1", rn1, sizeof(rn1));
 8001e0a:	f607 320c 	addw	r2, r7, #2828	@ 0xb0c
 8001e0e:	2310      	movs	r3, #16
 8001e10:	4968      	ldr	r1, [pc, #416]	@ (8001fb4 <Weather_Task+0x4d0>)
 8001e12:	f8d7 0b8c 	ldr.w	r0, [r7, #2956]	@ 0xb8c
 8001e16:	f7ff fc2f 	bl	8001678 <json_pick_value>

                        int pty_code = atoi(pty);
 8001e1a:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f008 f87d 	bl	8009f1e <atoi>
 8001e24:	f8c7 0b68 	str.w	r0, [r7, #2920]	@ 0xb68
                        float temp_c  = atof(t1h);  // 현재기온
 8001e28:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f008 f873 	bl	8009f18 <atof>
 8001e32:	ec53 2b10 	vmov	r2, r3, d0
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe feaf 	bl	8000b9c <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f607 3264 	addw	r2, r7, #2916	@ 0xb64
 8001e44:	6013      	str	r3, [r2, #0]

                        printf("[WEATHER][Gangseo-gu] T=%s°C, RH=%s%%, RAIN=%s, RN1=%smm\r\n",
 8001e46:	f8d7 0b68 	ldr.w	r0, [r7, #2920]	@ 0xb68
 8001e4a:	f7ff fe07 	bl	8001a5c <pty_text>
 8001e4e:	f607 322c 	addw	r2, r7, #2860	@ 0xb2c
 8001e52:	f607 313c 	addw	r1, r7, #2876	@ 0xb3c
 8001e56:	f607 330c 	addw	r3, r7, #2828	@ 0xb0c
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4856      	ldr	r0, [pc, #344]	@ (8001fb8 <Weather_Task+0x4d4>)
 8001e60:	f008 ffba 	bl	800add8 <iprintf>
                               t1h, reh, pty_text(pty_code), rn1);

                        // ★ LCD용 공유 값 업데이트
                        if (osMutexAcquire(Weather_MutexHandle, osWaitForever) == osOK) {
 8001e64:	4b55      	ldr	r3, [pc, #340]	@ (8001fbc <Weather_Task+0x4d8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 ff96 	bl	8006d9e <osMutexAcquire>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11e      	bne.n	8001eb6 <Weather_Task+0x3d2>
                            g_t1h = (float)atof(t1h);
 8001e78:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f008 f84b 	bl	8009f18 <atof>
 8001e82:	ec53 2b10 	vmov	r2, r3, d0
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fe87 	bl	8000b9c <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc0 <Weather_Task+0x4dc>)
 8001e92:	6013      	str	r3, [r2, #0]
                            g_reh = atoi(reh);
 8001e94:	f607 332c 	addw	r3, r7, #2860	@ 0xb2c
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f008 f840 	bl	8009f1e <atoi>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a48      	ldr	r2, [pc, #288]	@ (8001fc4 <Weather_Task+0x4e0>)
 8001ea2:	6013      	str	r3, [r2, #0]
                            g_pty = pty_code;
 8001ea4:	4a48      	ldr	r2, [pc, #288]	@ (8001fc8 <Weather_Task+0x4e4>)
 8001ea6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8001eaa:	6013      	str	r3, [r2, #0]
                            osMutexRelease(Weather_MutexHandle);
 8001eac:	4b43      	ldr	r3, [pc, #268]	@ (8001fbc <Weather_Task+0x4d8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 ffbf 	bl	8006e34 <osMutexRelease>
                        }

                        int is_precip = (pty_code != 0);
 8001eb6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f8c7 3b60 	str.w	r3, [r7, #2912]	@ 0xb60

                        if (is_precip || temp_c >= 35.0f) {
 8001ec8:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <Weather_Task+0x402>
 8001ed0:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001fcc <Weather_Task+0x4e8>
 8001edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	db11      	blt.n	8001f0a <Weather_Task+0x426>
                            set_ryg(1, 0, 0);  // RED
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff fb94 	bl	8001618 <set_ryg>
                            printf("[RYG] RED ON (precip=%d, T=%.1f)\r\n", is_precip, temp_c);
 8001ef0:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	f8d7 1b60 	ldr.w	r1, [r7, #2912]	@ 0xb60
 8001f02:	4833      	ldr	r0, [pc, #204]	@ (8001fd0 <Weather_Task+0x4ec>)
 8001f04:	f008 ff68 	bl	800add8 <iprintf>
 8001f08:	e02f      	b.n	8001f6a <Weather_Task+0x486>
                        } else if (temp_c >= 30.0f) {
 8001f0a:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	db0f      	blt.n	8001f40 <Weather_Task+0x45c>
                            set_ryg(0, 1, 0);  // YELLOW
 8001f20:	2200      	movs	r2, #0
 8001f22:	2101      	movs	r1, #1
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fb77 	bl	8001618 <set_ryg>
                            printf("[RYG] YELLOW ON (T=%.1f)\r\n", temp_c);
 8001f2a:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	f7fe fb22 	bl	8000578 <__aeabi_f2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4826      	ldr	r0, [pc, #152]	@ (8001fd4 <Weather_Task+0x4f0>)
 8001f3a:	f008 ff4d 	bl	800add8 <iprintf>
 8001f3e:	e014      	b.n	8001f6a <Weather_Task+0x486>
                        } else {
                            set_ryg(0, 0, 1);  // GREEN
 8001f40:	2201      	movs	r2, #1
 8001f42:	2100      	movs	r1, #0
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff fb67 	bl	8001618 <set_ryg>
                            printf("[RYG] GREEN ON (T=%.1f)\r\n", temp_c);
 8001f4a:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f7fe fb12 	bl	8000578 <__aeabi_f2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	481f      	ldr	r0, [pc, #124]	@ (8001fd8 <Weather_Task+0x4f4>)
 8001f5a:	f008 ff3d 	bl	800add8 <iprintf>
 8001f5e:	e004      	b.n	8001f6a <Weather_Task+0x486>
                        }

                    } else {
                        printf("[WEATHER] HTTP not 200 (len=%d)\r\n", copied);
 8001f60:	f8d7 1b9c 	ldr.w	r1, [r7, #2972]	@ 0xb9c
 8001f64:	481d      	ldr	r0, [pc, #116]	@ (8001fdc <Weather_Task+0x4f8>)
 8001f66:	f008 ff37 	bl	800add8 <iprintf>
                    }
                }
                // 6) 링크1 닫기
                esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
 8001f6a:	f607 325e 	addw	r2, r7, #2910	@ 0xb5e
 8001f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f72:	491b      	ldr	r1, [pc, #108]	@ (8001fe0 <Weather_Task+0x4fc>)
 8001f74:	481b      	ldr	r0, [pc, #108]	@ (8001fe4 <Weather_Task+0x500>)
 8001f76:	f000 f83b 	bl	8001ff0 <esp_at_command>
 8001f7a:	e002      	b.n	8001f82 <Weather_Task+0x49e>
            } else {
                printf("[WEATHER] Link1 TCP connect FAIL\r\n");
 8001f7c:	481a      	ldr	r0, [pc, #104]	@ (8001fe8 <Weather_Task+0x504>)
 8001f7e:	f008 ff9b 	bl	800aeb8 <puts>
            }

            osMutexRelease(ESP_MutexHandle);
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <Weather_Task+0x508>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 ff54 	bl	8006e34 <osMutexRelease>
        }

        vTaskDelay(pdMS_TO_TICKS(30000));  // 10초 주기
 8001f8c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001f90:	f006 f9b2 	bl	80082f8 <vTaskDelay>
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001f94:	e5bb      	b.n	8001b0e <Weather_Task+0x2a>
 8001f96:	bf00      	nop
 8001f98:	0800ee60 	.word	0x0800ee60
 8001f9c:	20000274 	.word	0x20000274
 8001fa0:	20000a74 	.word	0x20000a74
 8001fa4:	0800ee7c 	.word	0x0800ee7c
 8001fa8:	0800ee8c 	.word	0x0800ee8c
 8001fac:	0800ee90 	.word	0x0800ee90
 8001fb0:	0800ee94 	.word	0x0800ee94
 8001fb4:	0800ee98 	.word	0x0800ee98
 8001fb8:	0800ee9c 	.word	0x0800ee9c
 8001fbc:	20002434 	.word	0x20002434
 8001fc0:	20000270 	.word	0x20000270
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	420c0000 	.word	0x420c0000
 8001fd0:	0800eed8 	.word	0x0800eed8
 8001fd4:	0800eefc 	.word	0x0800eefc
 8001fd8:	0800ef18 	.word	0x0800ef18
 8001fdc:	0800ef34 	.word	0x0800ef34
 8001fe0:	20001284 	.word	0x20001284
 8001fe4:	0800ef58 	.word	0x0800ef58
 8001fe8:	0800ef68 	.word	0x0800ef68
 8001fec:	2000242c 	.word	0x2000242c

08001ff0 <esp_at_command>:
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	807b      	strh	r3, [r7, #2]
	*length = 0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8002004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002008:	2100      	movs	r1, #0
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f009 f8d4 	bl	800b1b8 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 8002010:	f640 0204 	movw	r2, #2052	@ 0x804
 8002014:	2100      	movs	r1, #0
 8002016:	482f      	ldr	r0, [pc, #188]	@ (80020d4 <esp_at_command+0xe4>)
 8002018:	f009 f8ce 	bl	800b1b8 <memset>
	cb_data.length = 0;
 800201c:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <esp_at_command+0xe4>)
 800201e:	2200      	movs	r2, #0
 8002020:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7fe f8e5 	bl	80001f4 <strlen>
 800202a:	4603      	mov	r3, r0
 800202c:	b29a      	uxth	r2, r3
 800202e:	2364      	movs	r3, #100	@ 0x64
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	4829      	ldr	r0, [pc, #164]	@ (80020d8 <esp_at_command+0xe8>)
 8002034:	f003 fce6 	bl	8005a04 <HAL_UART_Transmit>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03f      	beq.n	80020be <esp_at_command+0xce>
		return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e042      	b.n	80020ca <esp_at_command+0xda>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER) return -2;
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <esp_at_command+0xe4>)
 8002046:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800204a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800204e:	d302      	bcc.n	8002056 <esp_at_command+0x66>
 8002050:	f06f 0301 	mvn.w	r3, #1
 8002054:	e039      	b.n	80020ca <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL) return -3;
 8002056:	4921      	ldr	r1, [pc, #132]	@ (80020dc <esp_at_command+0xec>)
 8002058:	481e      	ldr	r0, [pc, #120]	@ (80020d4 <esp_at_command+0xe4>)
 800205a:	f009 f955 	bl	800b308 <strstr>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <esp_at_command+0x7a>
 8002064:	f06f 0302 	mvn.w	r3, #2
 8002068:	e02f      	b.n	80020ca <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 800206a:	491d      	ldr	r1, [pc, #116]	@ (80020e0 <esp_at_command+0xf0>)
 800206c:	4819      	ldr	r0, [pc, #100]	@ (80020d4 <esp_at_command+0xe4>)
 800206e:	f009 f94b 	bl	800b308 <strstr>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <esp_at_command+0x94>
		{
			printf("ESP: TCP connection closed.\r\n");
 8002078:	481a      	ldr	r0, [pc, #104]	@ (80020e4 <esp_at_command+0xf4>)
 800207a:	f008 ff1d 	bl	800aeb8 <puts>
			//esp_client_conn();   // 자동 재연결
			return -5;
 800207e:	f06f 0304 	mvn.w	r3, #4
 8002082:	e022      	b.n	80020ca <esp_at_command+0xda>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 8002084:	4918      	ldr	r1, [pc, #96]	@ (80020e8 <esp_at_command+0xf8>)
 8002086:	4813      	ldr	r0, [pc, #76]	@ (80020d4 <esp_at_command+0xe4>)
 8002088:	f009 f93e 	bl	800b308 <strstr>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00e      	beq.n	80020b0 <esp_at_command+0xc0>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <esp_at_command+0xe4>)
 8002094:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002098:	461a      	mov	r2, r3
 800209a:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <esp_at_command+0xe4>)
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f00a f87e 	bl	800c19e <memcpy>
			*length = cb_data.length;
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <esp_at_command+0xe4>)
 80020a4:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	@ 0x800
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	801a      	strh	r2, [r3, #0]
			return 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e00c      	b.n	80020ca <esp_at_command+0xda>
		}

		time_out -= 10;
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	3b0a      	subs	r3, #10
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f001 fa0f 	bl	80034dc <HAL_Delay>
	while (time_out > 0)
 80020be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	dcbe      	bgt.n	8002044 <esp_at_command+0x54>
	}
	return -4; // Timeout
 80020c6:	f06f 0303 	mvn.w	r3, #3
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20001abc 	.word	0x20001abc
 80020d8:	200023d4 	.word	0x200023d4
 80020dc:	0800ef8c 	.word	0x0800ef8c
 80020e0:	0800ef94 	.word	0x0800ef94
 80020e4:	0800ef9c 	.word	0x0800ef9c
 80020e8:	0800efbc 	.word	0x0800efbc

080020ec <esp_reset>:
    return 0; // 타임아웃
}


static int esp_reset(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 80020f6:	1dba      	adds	r2, r7, #6
 80020f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fc:	4909      	ldr	r1, [pc, #36]	@ (8002124 <esp_reset+0x38>)
 80020fe:	480a      	ldr	r0, [pc, #40]	@ (8002128 <esp_reset+0x3c>)
 8002100:	f7ff ff76 	bl	8001ff0 <esp_at_command>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <esp_reset+0x24>
    {
    	return -1;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e004      	b.n	800211a <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8002110:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002114:	f001 f9e2 	bl	80034dc <HAL_Delay>
    return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20001284 	.word	0x20001284
 8002128:	0800efc0 	.word	0x0800efc0

0800212c <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 800213a:	f107 020a 	add.w	r2, r7, #10
 800213e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002142:	492d      	ldr	r1, [pc, #180]	@ (80021f8 <request_ip_addr+0xcc>)
 8002144:	482d      	ldr	r0, [pc, #180]	@ (80021fc <request_ip_addr+0xd0>)
 8002146:	f7ff ff53 	bl	8001ff0 <esp_at_command>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8002150:	482b      	ldr	r0, [pc, #172]	@ (8002200 <request_ip_addr+0xd4>)
 8002152:	f008 feb1 	bl	800aeb8 <puts>
 8002156:	e049      	b.n	80021ec <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8002158:	492a      	ldr	r1, [pc, #168]	@ (8002204 <request_ip_addr+0xd8>)
 800215a:	4827      	ldr	r0, [pc, #156]	@ (80021f8 <request_ip_addr+0xcc>)
 800215c:	f009 f878 	bl	800b250 <strtok>
 8002160:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03e      	beq.n	80021e6 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e009      	b.n	8002182 <request_ip_addr+0x56>
                printf("%c", response[i]);
 800216e:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <request_ip_addr+0xcc>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f008 fe40 	bl	800adfc <putchar>
            for(int i = 0 ; i < length ; i++)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	3301      	adds	r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	897b      	ldrh	r3, [r7, #10]
 8002184:	461a      	mov	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4293      	cmp	r3, r2
 800218a:	dbf0      	blt.n	800216e <request_ip_addr+0x42>
        }

        while(line != NULL)
 800218c:	e02b      	b.n	80021e6 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800218e:	491e      	ldr	r1, [pc, #120]	@ (8002208 <request_ip_addr+0xdc>)
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	f009 f8b9 	bl	800b308 <strstr>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01f      	beq.n	80021dc <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800219c:	491b      	ldr	r1, [pc, #108]	@ (800220c <request_ip_addr+0xe0>)
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f009 f856 	bl	800b250 <strtok>
                ip = strtok(NULL, "\"");
 80021a4:	4919      	ldr	r1, [pc, #100]	@ (800220c <request_ip_addr+0xe0>)
 80021a6:	2000      	movs	r0, #0
 80021a8:	f009 f852 	bl	800b250 <strtok>
 80021ac:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80021ae:	4918      	ldr	r1, [pc, #96]	@ (8002210 <request_ip_addr+0xe4>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7fe f815 	bl	80001e0 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00f      	beq.n	80021dc <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80021bc:	2210      	movs	r2, #16
 80021be:	2100      	movs	r1, #0
 80021c0:	4814      	ldr	r0, [pc, #80]	@ (8002214 <request_ip_addr+0xe8>)
 80021c2:	f008 fff9 	bl	800b1b8 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7fe f814 	bl	80001f4 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	4810      	ldr	r0, [pc, #64]	@ (8002214 <request_ip_addr+0xe8>)
 80021d4:	f009 ffe3 	bl	800c19e <memcpy>
                    return 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	e009      	b.n	80021f0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 80021dc:	4909      	ldr	r1, [pc, #36]	@ (8002204 <request_ip_addr+0xd8>)
 80021de:	2000      	movs	r0, #0
 80021e0:	f009 f836 	bl	800b250 <strtok>
 80021e4:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1d0      	bne.n	800218e <request_ip_addr+0x62>
        }
    }
    return -1;
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20001284 	.word	0x20001284
 80021fc:	0800f008 	.word	0x0800f008
 8002200:	0800f014 	.word	0x0800f014
 8002204:	0800effc 	.word	0x0800effc
 8002208:	0800f034 	.word	0x0800f034
 800220c:	0800f004 	.word	0x0800f004
 8002210:	0800efcc 	.word	0x0800efcc
 8002214:	20001274 	.word	0x20001274

08002218 <esp_client_conn>:

int esp_client_conn()
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b092      	sub	sp, #72	@ 0x48
 800221c:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f008 ffc6 	bl	800b1b8 <memset>
	uint16_t length = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	80fb      	strh	r3, [r7, #6]

    // 링크ID 0로 접속
    sprintf(at_cmd, "AT+CIPSTART=0,\"TCP\",\"%s\",%d\r\n", DST_IP, DST_PORT);
 8002230:	f107 0008 	add.w	r0, r7, #8
 8002234:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002238:	4a14      	ldr	r2, [pc, #80]	@ (800228c <esp_client_conn+0x74>)
 800223a:	4915      	ldr	r1, [pc, #84]	@ (8002290 <esp_client_conn+0x78>)
 800223c:	f008 fe7a 	bl	800af34 <siprintf>
    esp_at_command((uint8_t*)at_cmd, (uint8_t*)response, &length, 2000);
 8002240:	1dba      	adds	r2, r7, #6
 8002242:	f107 0008 	add.w	r0, r7, #8
 8002246:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800224a:	4912      	ldr	r1, [pc, #72]	@ (8002294 <esp_client_conn+0x7c>)
 800224c:	f7ff fed0 	bl	8001ff0 <esp_at_command>

    // 첫 로그인/인증도 링크0로 전송
    sprintf(at_cmd, "AT+CIPSEND=0,%d\r\n", (int)strlen("["LOGID":"PASSWD"]"));
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	2210      	movs	r2, #16
 8002256:	4910      	ldr	r1, [pc, #64]	@ (8002298 <esp_client_conn+0x80>)
 8002258:	4618      	mov	r0, r3
 800225a:	f008 fe6b 	bl	800af34 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd, (uint8_t*)response, &length, 1000) == 0) {
 800225e:	1dba      	adds	r2, r7, #6
 8002260:	f107 0008 	add.w	r0, r7, #8
 8002264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002268:	490a      	ldr	r1, [pc, #40]	@ (8002294 <esp_client_conn+0x7c>)
 800226a:	f7ff fec1 	bl	8001ff0 <esp_at_command>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <esp_client_conn+0x6a>
        esp_at_command((uint8_t*)("["LOGID":"PASSWD"]"), (uint8_t*)response, &length, 1000);
 8002274:	1dba      	adds	r2, r7, #6
 8002276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800227a:	4906      	ldr	r1, [pc, #24]	@ (8002294 <esp_client_conn+0x7c>)
 800227c:	4807      	ldr	r0, [pc, #28]	@ (800229c <esp_client_conn+0x84>)
 800227e:	f7ff feb7 	bl	8001ff0 <esp_at_command>
    }

	return 0;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3748      	adds	r7, #72	@ 0x48
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0800f040 	.word	0x0800f040
 8002290:	0800f04c 	.word	0x0800f04c
 8002294:	20001284 	.word	0x20001284
 8002298:	0800f06c 	.word	0x0800f06c
 800229c:	0800f080 	.word	0x0800f080

080022a0 <esp_get_status>:
int esp_get_status()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80022aa:	1dba      	adds	r2, r7, #6
 80022ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b0:	4909      	ldr	r1, [pc, #36]	@ (80022d8 <esp_get_status+0x38>)
 80022b2:	480a      	ldr	r0, [pc, #40]	@ (80022dc <esp_get_status+0x3c>)
 80022b4:	f7ff fe9c 	bl	8001ff0 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80022b8:	4909      	ldr	r1, [pc, #36]	@ (80022e0 <esp_get_status+0x40>)
 80022ba:	4807      	ldr	r0, [pc, #28]	@ (80022d8 <esp_get_status+0x38>)
 80022bc:	f009 f824 	bl	800b308 <strstr>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <esp_get_status+0x2a>
    {
    	return 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e001      	b.n	80022ce <esp_get_status+0x2e>
    }
	return -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20001284 	.word	0x20001284
 80022dc:	0800f094 	.word	0x0800f094
 80022e0:	0800f0a4 	.word	0x0800f0a4

080022e4 <drv_esp_init>:

 int drv_esp_init(void)
 {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 80022ea:	2210      	movs	r2, #16
 80022ec:	2100      	movs	r1, #0
 80022ee:	4817      	ldr	r0, [pc, #92]	@ (800234c <drv_esp_init+0x68>)
 80022f0:	f008 ff62 	bl	800b1b8 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 80022f4:	f640 0204 	movw	r2, #2052	@ 0x804
 80022f8:	2100      	movs	r1, #0
 80022fa:	4815      	ldr	r0, [pc, #84]	@ (8002350 <drv_esp_init+0x6c>)
 80022fc:	f008 ff5c 	bl	800b1b8 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 8002300:	2201      	movs	r2, #1
 8002302:	4914      	ldr	r1, [pc, #80]	@ (8002354 <drv_esp_init+0x70>)
 8002304:	4814      	ldr	r0, [pc, #80]	@ (8002358 <drv_esp_init+0x74>)
 8002306:	f003 fc08 	bl	8005b1a <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	e011      	b.n	8002334 <drv_esp_init+0x50>
         uint16_t len=0;
 8002310:	2300      	movs	r3, #0
 8002312:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8002314:	1cba      	adds	r2, r7, #2
 8002316:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800231a:	4910      	ldr	r1, [pc, #64]	@ (800235c <drv_esp_init+0x78>)
 800231c:	4810      	ldr	r0, [pc, #64]	@ (8002360 <drv_esp_init+0x7c>)
 800231e:	f7ff fe67 	bl	8001ff0 <esp_at_command>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <drv_esp_init+0x58>
         HAL_Delay(100);
 8002328:	2064      	movs	r0, #100	@ 0x64
 800232a:	f001 f8d7 	bl	80034dc <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3301      	adds	r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	ddea      	ble.n	8002310 <drv_esp_init+0x2c>
 800233a:	e000      	b.n	800233e <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 800233c:	bf00      	nop
     }
     return esp_reset();
 800233e:	f7ff fed5 	bl	80020ec <esp_reset>
 8002342:	4603      	mov	r3, r0
 }
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20001274 	.word	0x20001274
 8002350:	20001abc 	.word	0x20001abc
 8002354:	20001abb 	.word	0x20001abb
 8002358:	200023d4 	.word	0x200023d4
 800235c:	20001284 	.word	0x20001284
 8002360:	0800f0b0 	.word	0x0800f0b0

08002364 <reset_func>:

void reset_func()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8002368:	4808      	ldr	r0, [pc, #32]	@ (800238c <reset_func+0x28>)
 800236a:	f008 fd35 	bl	800add8 <iprintf>
	if(esp_reset() == 0)
 800236e:	f7ff febd 	bl	80020ec <esp_reset>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <reset_func+0x1c>
			printf("OK\r\n");
 8002378:	4805      	ldr	r0, [pc, #20]	@ (8002390 <reset_func+0x2c>)
 800237a:	f008 fd9d 	bl	800aeb8 <puts>
	else
			printf("fail\r\n");
}
 800237e:	e002      	b.n	8002386 <reset_func+0x22>
			printf("fail\r\n");
 8002380:	4804      	ldr	r0, [pc, #16]	@ (8002394 <reset_func+0x30>)
 8002382:	f008 fd99 	bl	800aeb8 <puts>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	0800f0b8 	.word	0x0800f0b8
 8002390:	0800f0c8 	.word	0x0800f0c8
 8002394:	0800f0cc 	.word	0x0800f0cc

08002398 <version_func>:

void version_func()
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 80023a2:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <version_func+0x58>)
 80023a4:	f008 fd88 	bl	800aeb8 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80023a8:	1cba      	adds	r2, r7, #2
 80023aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ae:	4911      	ldr	r1, [pc, #68]	@ (80023f4 <version_func+0x5c>)
 80023b0:	4811      	ldr	r0, [pc, #68]	@ (80023f8 <version_func+0x60>)
 80023b2:	f7ff fe1d 	bl	8001ff0 <esp_at_command>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <version_func+0x2c>
      printf("ap scan command fail\r\n");
 80023bc:	480f      	ldr	r0, [pc, #60]	@ (80023fc <version_func+0x64>)
 80023be:	f008 fd7b 	bl	800aeb8 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 80023c2:	e011      	b.n	80023e8 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	e009      	b.n	80023de <version_func+0x46>
          printf("%c", response[i]);
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <version_func+0x5c>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f008 fd12 	bl	800adfc <putchar>
      for(int i = 0 ; i < length ; i++)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3301      	adds	r3, #1
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	dbf0      	blt.n	80023ca <version_func+0x32>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	0800f0d4 	.word	0x0800f0d4
 80023f4:	20001284 	.word	0x20001284
 80023f8:	0800f0ec 	.word	0x0800f0ec
 80023fc:	0800f0f8 	.word	0x0800f0f8

08002400 <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	@ 0x50
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2240      	movs	r2, #64	@ 0x40
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f008 fecd 	bl	800b1b8 <memset>
  if(ssid == NULL || passwd == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <ap_conn_func+0x2a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 800242a:	4817      	ldr	r0, [pc, #92]	@ (8002488 <ap_conn_func+0x88>)
 800242c:	f008 fd44 	bl	800aeb8 <puts>
 8002430:	e026      	b.n	8002480 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002432:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8002436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800243a:	4914      	ldr	r1, [pc, #80]	@ (800248c <ap_conn_func+0x8c>)
 800243c:	4814      	ldr	r0, [pc, #80]	@ (8002490 <ap_conn_func+0x90>)
 800243e:	f7ff fdd7 	bl	8001ff0 <esp_at_command>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8002448:	4812      	ldr	r0, [pc, #72]	@ (8002494 <ap_conn_func+0x94>)
 800244a:	f008 fd35 	bl	800aeb8 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 800244e:	f107 000c 	add.w	r0, r7, #12
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4910      	ldr	r1, [pc, #64]	@ (8002498 <ap_conn_func+0x98>)
 8002458:	f008 fd6c 	bl	800af34 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 800245c:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8002460:	f107 000c 	add.w	r0, r7, #12
 8002464:	f241 7370 	movw	r3, #6000	@ 0x1770
 8002468:	4908      	ldr	r1, [pc, #32]	@ (800248c <ap_conn_func+0x8c>)
 800246a:	f7ff fdc1 	bl	8001ff0 <esp_at_command>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	4619      	mov	r1, r3
 800247a:	4808      	ldr	r0, [pc, #32]	@ (800249c <ap_conn_func+0x9c>)
 800247c:	f008 fcac 	bl	800add8 <iprintf>
}
 8002480:	3750      	adds	r7, #80	@ 0x50
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	0800f110 	.word	0x0800f110
 800248c:	20001284 	.word	0x20001284
 8002490:	0800f13c 	.word	0x0800f13c
 8002494:	0800f14c 	.word	0x0800f14c
 8002498:	0800f160 	.word	0x0800f160
 800249c:	0800f178 	.word	0x0800f178

080024a0 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a23      	ldr	r2, [pc, #140]	@ (800253c <HAL_UART_RxCpltCallback+0x9c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d117      	bne.n	80024e2 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_UART_RxCpltCallback+0xa0>)
 80024b4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80024b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024bc:	d20c      	bcs.n	80024d8 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_UART_RxCpltCallback+0xa0>)
 80024c0:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	b291      	uxth	r1, r2
 80024c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_UART_RxCpltCallback+0xa0>)
 80024ca:	f8a2 1800 	strh.w	r1, [r2, #2048]	@ 0x800
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002544 <HAL_UART_RxCpltCallback+0xa4>)
 80024d2:	7819      	ldrb	r1, [r3, #0]
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_UART_RxCpltCallback+0xa0>)
 80024d6:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 80024d8:	2201      	movs	r2, #1
 80024da:	491a      	ldr	r1, [pc, #104]	@ (8002544 <HAL_UART_RxCpltCallback+0xa4>)
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f003 fb1c 	bl	8005b1a <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <HAL_UART_RxCpltCallback+0xa8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d122      	bne.n	8002532 <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <HAL_UART_RxCpltCallback+0xac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <HAL_UART_RxCpltCallback+0xb0>)
 80024f2:	7811      	ldrb	r1, [r2, #0]
 80024f4:	4a17      	ldr	r2, [pc, #92]	@ (8002554 <HAL_UART_RxCpltCallback+0xb4>)
 80024f6:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_UART_RxCpltCallback+0xac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a15      	ldr	r2, [pc, #84]	@ (8002554 <HAL_UART_RxCpltCallback+0xb4>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b0d      	cmp	r3, #13
 8002504:	d10b      	bne.n	800251e <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <HAL_UART_RxCpltCallback+0xac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <HAL_UART_RxCpltCallback+0xb4>)
 800250c:	2100      	movs	r1, #0
 800250e:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_UART_RxCpltCallback+0xb8>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
            i = 0;
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_UART_RxCpltCallback+0xac>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e004      	b.n	8002528 <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 800251e:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_UART_RxCpltCallback+0xac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_UART_RxCpltCallback+0xac>)
 8002526:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 8002528:	2201      	movs	r2, #1
 800252a:	4909      	ldr	r1, [pc, #36]	@ (8002550 <HAL_UART_RxCpltCallback+0xb0>)
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f003 faf4 	bl	8005b1a <HAL_UART_Receive_IT>
    }
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40011400 	.word	0x40011400
 8002540:	20001abc 	.word	0x20001abc
 8002544:	20001abb 	.word	0x20001abb
 8002548:	40004400 	.word	0x40004400
 800254c:	200022c0 	.word	0x200022c0
 8002550:	20001aba 	.word	0x20001aba
 8002554:	20001a88 	.word	0x20001a88
 8002558:	20001a84 	.word	0x20001a84

0800255c <AiotClient_Init>:



void AiotClient_Init()
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
	reset_func();
 8002562:	f7ff feff 	bl	8002364 <reset_func>
	version_func();
 8002566:	f7ff ff17 	bl	8002398 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 800256a:	490c      	ldr	r1, [pc, #48]	@ (800259c <AiotClient_Init+0x40>)
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <AiotClient_Init+0x44>)
 800256e:	f7ff ff47 	bl	8002400 <ap_conn_func>
	request_ip_addr(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff fdda 	bl	800212c <request_ip_addr>

    // ★ 멀티커넥션 ON
	uint16_t length = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t*)"AT+CIPMUX=1\r\n", (uint8_t*)response, &length, 1000);
 800257c:	1dba      	adds	r2, r7, #6
 800257e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002582:	4908      	ldr	r1, [pc, #32]	@ (80025a4 <AiotClient_Init+0x48>)
 8002584:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <AiotClient_Init+0x4c>)
 8002586:	f7ff fd33 	bl	8001ff0 <esp_at_command>


	esp_client_conn();
 800258a:	f7ff fe45 	bl	8002218 <esp_client_conn>
	esp_get_status();
 800258e:	f7ff fe87 	bl	80022a0 <esp_get_status>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	0800f1d8 	.word	0x0800f1d8
 80025a0:	0800f1e4 	.word	0x0800f1e4
 80025a4:	20001284 	.word	0x20001284
 80025a8:	0800f1ec 	.word	0x0800f1ec

080025ac <drv_uart_init>:
}


//==================uart2=========================
int drv_uart_init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 80025b0:	2201      	movs	r2, #1
 80025b2:	4903      	ldr	r1, [pc, #12]	@ (80025c0 <drv_uart_init+0x14>)
 80025b4:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <drv_uart_init+0x18>)
 80025b6:	f003 fab0 	bl	8005b1a <HAL_UART_Receive_IT>
    return 0;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20001aba 	.word	0x20001aba
 80025c4:	2000238c 	.word	0x2000238c

080025c8 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 80025d0:	1d39      	adds	r1, r7, #4
 80025d2:	230a      	movs	r3, #10
 80025d4:	2201      	movs	r2, #1
 80025d6:	4807      	ldr	r0, [pc, #28]	@ (80025f4 <__io_putchar+0x2c>)
 80025d8:	f003 fa14 	bl	8005a04 <HAL_UART_Transmit>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <__io_putchar+0x1e>
        return ch;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	e001      	b.n	80025ea <__io_putchar+0x22>
    return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000238c 	.word	0x2000238c

080025f8 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b09a      	sub	sp, #104	@ 0x68
 80025fc:	af06      	add	r7, sp, #24
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 8002602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002606:	2224      	movs	r2, #36	@ 0x24
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f008 fdd4 	bl	800b1b8 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 8002610:	4969      	ldr	r1, [pc, #420]	@ (80027b8 <parse_cipsntptime_line+0x1c0>)
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f008 fe78 	bl	800b308 <strstr>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <parse_cipsntptime_line+0x2c>
        return -1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	e0c5      	b.n	80027b0 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8002624:	f107 0120 	add.w	r1, r7, #32
 8002628:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	9304      	str	r3, [sp, #16]
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	9303      	str	r3, [sp, #12]
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	9302      	str	r3, [sp, #8]
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	460b      	mov	r3, r1
 800264c:	495b      	ldr	r1, [pc, #364]	@ (80027bc <parse_cipsntptime_line+0x1c4>)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f008 fc92 	bl	800af78 <siscanf>
 8002654:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 8002656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002658:	2b07      	cmp	r3, #7
 800265a:	f040 80a7 	bne.w	80027ac <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	4957      	ldr	r1, [pc, #348]	@ (80027c0 <parse_cipsntptime_line+0x1c8>)
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fdbb 	bl	80001e0 <strcmp>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <parse_cipsntptime_line+0x7e>
 8002670:	2300      	movs	r3, #0
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002674:	e082      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 8002676:	f107 0320 	add.w	r3, r7, #32
 800267a:	4952      	ldr	r1, [pc, #328]	@ (80027c4 <parse_cipsntptime_line+0x1cc>)
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fdaf 	bl	80001e0 <strcmp>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <parse_cipsntptime_line+0x96>
 8002688:	2301      	movs	r3, #1
 800268a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800268c:	e076      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 800268e:	f107 0320 	add.w	r3, r7, #32
 8002692:	494d      	ldr	r1, [pc, #308]	@ (80027c8 <parse_cipsntptime_line+0x1d0>)
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fda3 	bl	80001e0 <strcmp>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <parse_cipsntptime_line+0xae>
 80026a0:	2302      	movs	r3, #2
 80026a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026a4:	e06a      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	4948      	ldr	r1, [pc, #288]	@ (80027cc <parse_cipsntptime_line+0x1d4>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd fd97 	bl	80001e0 <strcmp>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <parse_cipsntptime_line+0xc6>
 80026b8:	2303      	movs	r3, #3
 80026ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026bc:	e05e      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	4943      	ldr	r1, [pc, #268]	@ (80027d0 <parse_cipsntptime_line+0x1d8>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fd8b 	bl	80001e0 <strcmp>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <parse_cipsntptime_line+0xde>
 80026d0:	2304      	movs	r3, #4
 80026d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026d4:	e052      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 80026d6:	f107 0320 	add.w	r3, r7, #32
 80026da:	493e      	ldr	r1, [pc, #248]	@ (80027d4 <parse_cipsntptime_line+0x1dc>)
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fd7f 	bl	80001e0 <strcmp>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <parse_cipsntptime_line+0xf6>
 80026e8:	2305      	movs	r3, #5
 80026ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026ec:	e046      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	4939      	ldr	r1, [pc, #228]	@ (80027d8 <parse_cipsntptime_line+0x1e0>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fd73 	bl	80001e0 <strcmp>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <parse_cipsntptime_line+0x10e>
 8002700:	2306      	movs	r3, #6
 8002702:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002704:	e03a      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 8002706:	f107 0320 	add.w	r3, r7, #32
 800270a:	4934      	ldr	r1, [pc, #208]	@ (80027dc <parse_cipsntptime_line+0x1e4>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fd67 	bl	80001e0 <strcmp>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <parse_cipsntptime_line+0x126>
 8002718:	2307      	movs	r3, #7
 800271a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800271c:	e02e      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 800271e:	f107 0320 	add.w	r3, r7, #32
 8002722:	492f      	ldr	r1, [pc, #188]	@ (80027e0 <parse_cipsntptime_line+0x1e8>)
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fd5b 	bl	80001e0 <strcmp>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <parse_cipsntptime_line+0x13e>
 8002730:	2308      	movs	r3, #8
 8002732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002734:	e022      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	492a      	ldr	r1, [pc, #168]	@ (80027e4 <parse_cipsntptime_line+0x1ec>)
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fd4f 	bl	80001e0 <strcmp>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <parse_cipsntptime_line+0x156>
 8002748:	2309      	movs	r3, #9
 800274a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800274c:	e016      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 800274e:	f107 0320 	add.w	r3, r7, #32
 8002752:	4925      	ldr	r1, [pc, #148]	@ (80027e8 <parse_cipsntptime_line+0x1f0>)
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fd43 	bl	80001e0 <strcmp>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <parse_cipsntptime_line+0x16e>
 8002760:	230a      	movs	r3, #10
 8002762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002764:	e00a      	b.n	800277c <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 8002766:	f107 0320 	add.w	r3, r7, #32
 800276a:	4920      	ldr	r1, [pc, #128]	@ (80027ec <parse_cipsntptime_line+0x1f4>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fd37 	bl	80001e0 <strcmp>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <parse_cipsntptime_line+0x184>
 8002778:	230b      	movs	r3, #11
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8002792:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 8002794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002798:	4618      	mov	r0, r3
 800279a:	f008 ffb5 	bl	800b708 <mktime>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e001      	b.n	80027b0 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3750      	adds	r7, #80	@ 0x50
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	0800f1fc 	.word	0x0800f1fc
 80027bc:	0800f20c 	.word	0x0800f20c
 80027c0:	0800f230 	.word	0x0800f230
 80027c4:	0800f234 	.word	0x0800f234
 80027c8:	0800f238 	.word	0x0800f238
 80027cc:	0800f23c 	.word	0x0800f23c
 80027d0:	0800f240 	.word	0x0800f240
 80027d4:	0800f244 	.word	0x0800f244
 80027d8:	0800f248 	.word	0x0800f248
 80027dc:	0800f24c 	.word	0x0800f24c
 80027e0:	0800f250 	.word	0x0800f250
 80027e4:	0800f254 	.word	0x0800f254
 80027e8:	0800f258 	.word	0x0800f258
 80027ec:	0800f25c 	.word	0x0800f25c

080027f0 <esp_ntp_config>:

int esp_ntp_config(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b0a0      	sub	sp, #128	@ 0x80
 80027f4:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 80027f6:	463b      	mov	r3, r7
 80027f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002838 <esp_ntp_config+0x48>)
 80027fa:	4910      	ldr	r1, [pc, #64]	@ (800283c <esp_ntp_config+0x4c>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f008 fb99 	bl	800af34 <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 8002802:	463b      	mov	r3, r7
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fcf5 	bl	80001f4 <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	b29a      	uxth	r2, r3
 800280e:	4639      	mov	r1, r7
 8002810:	2364      	movs	r3, #100	@ 0x64
 8002812:	480b      	ldr	r0, [pc, #44]	@ (8002840 <esp_ntp_config+0x50>)
 8002814:	f003 f8f6 	bl	8005a04 <HAL_UART_Transmit>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <esp_ntp_config+0x34>
        return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e004      	b.n	800282e <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 8002824:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002828:	f005 fd66 	bl	80082f8 <vTaskDelay>
    return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3780      	adds	r7, #128	@ 0x80
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	0800f260 	.word	0x0800f260
 800283c:	0800f274 	.word	0x0800f274
 8002840:	200023d4 	.word	0x200023d4

08002844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800284e:	f000 fdd3 	bl	80033f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002852:	f000 f891 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002856:	f000 fa57 	bl	8002d08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800285a:	f000 fa01 	bl	8002c60 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800285e:	f000 fa29 	bl	8002cb4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8002862:	f000 f9af 	bl	8002bc4 <MX_TIM3_Init>
  MX_RTC_Init();
 8002866:	f000 f921 	bl	8002aac <MX_RTC_Init>
  MX_I2C1_Init();
 800286a:	f000 f8f1 	bl	8002a50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 800286e:	482d      	ldr	r0, [pc, #180]	@ (8002924 <main+0xe0>)
 8002870:	f008 fb22 	bl	800aeb8 <puts>
  ret |= drv_uart_init();
 8002874:	f7ff fe9a 	bl	80025ac <drv_uart_init>
 8002878:	4602      	mov	r2, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8002880:	f7ff fd30 	bl	80022e4 <drv_esp_init>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4313      	orrs	r3, r2
 800288a:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <main+0x58>
  {
	  printf("Esp response error\r\n");
 8002892:	4825      	ldr	r0, [pc, #148]	@ (8002928 <main+0xe4>)
 8002894:	f008 fb10 	bl	800aeb8 <puts>
	  Error_Handler();
 8002898:	f000 fae2 	bl	8002e60 <Error_Handler>
  }
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800289c:	4823      	ldr	r0, [pc, #140]	@ (800292c <main+0xe8>)
 800289e:	f002 fc7d 	bl	800519c <HAL_TIM_Base_Start_IT>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <main+0x68>
  {
	  Error_Handler();
 80028a8:	f000 fada 	bl	8002e60 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80028ac:	f004 f8fa 	bl	8006aa4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 80028b0:	481f      	ldr	r0, [pc, #124]	@ (8002930 <main+0xec>)
 80028b2:	f004 f9ee 	bl	8006c92 <osMutexNew>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002934 <main+0xf0>)
 80028ba:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 80028bc:	481e      	ldr	r0, [pc, #120]	@ (8002938 <main+0xf4>)
 80028be:	f004 f9e8 	bl	8006c92 <osMutexNew>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4a1d      	ldr	r2, [pc, #116]	@ (800293c <main+0xf8>)
 80028c6:	6013      	str	r3, [r2, #0]

  /* creation of Weather_Mutex */
  Weather_MutexHandle = osMutexNew(&Weather_Mutex_attributes);
 80028c8:	481d      	ldr	r0, [pc, #116]	@ (8002940 <main+0xfc>)
 80028ca:	f004 f9e2 	bl	8006c92 <osMutexNew>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002944 <main+0x100>)
 80028d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 80028d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <main+0x104>)
 80028d6:	2100      	movs	r1, #0
 80028d8:	481c      	ldr	r0, [pc, #112]	@ (800294c <main+0x108>)
 80028da:	f004 f92d 	bl	8006b38 <osThreadNew>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002950 <main+0x10c>)
 80028e2:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 80028e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <main+0x110>)
 80028e6:	2100      	movs	r1, #0
 80028e8:	481b      	ldr	r0, [pc, #108]	@ (8002958 <main+0x114>)
 80028ea:	f004 f925 	bl	8006b38 <osThreadNew>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <main+0x118>)
 80028f2:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 80028f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <main+0x11c>)
 80028f6:	2100      	movs	r1, #0
 80028f8:	481a      	ldr	r0, [pc, #104]	@ (8002964 <main+0x120>)
 80028fa:	f004 f91d 	bl	8006b38 <osThreadNew>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <main+0x124>)
 8002902:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 8002904:	4a19      	ldr	r2, [pc, #100]	@ (800296c <main+0x128>)
 8002906:	2100      	movs	r1, #0
 8002908:	4819      	ldr	r0, [pc, #100]	@ (8002970 <main+0x12c>)
 800290a:	f004 f915 	bl	8006b38 <osThreadNew>
 800290e:	4603      	mov	r3, r0
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <main+0x130>)
 8002912:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002914:	f004 f8ea 	bl	8006aec <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8002918:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800291c:	f004 f99e 	bl	8006c5c <osDelay>
 8002920:	e7fa      	b.n	8002918 <main+0xd4>
 8002922:	bf00      	nop
 8002924:	0800f344 	.word	0x0800f344
 8002928:	0800f35c 	.word	0x0800f35c
 800292c:	20002344 	.word	0x20002344
 8002930:	0800f424 	.word	0x0800f424
 8002934:	2000242c 	.word	0x2000242c
 8002938:	0800f434 	.word	0x0800f434
 800293c:	20002430 	.word	0x20002430
 8002940:	0800f444 	.word	0x0800f444
 8002944:	20002434 	.word	0x20002434
 8002948:	0800f394 	.word	0x0800f394
 800294c:	08001075 	.word	0x08001075
 8002950:	2000241c 	.word	0x2000241c
 8002954:	0800f3b8 	.word	0x0800f3b8
 8002958:	080014dd 	.word	0x080014dd
 800295c:	20002420 	.word	0x20002420
 8002960:	0800f3dc 	.word	0x0800f3dc
 8002964:	08001ae5 	.word	0x08001ae5
 8002968:	20002424 	.word	0x20002424
 800296c:	0800f400 	.word	0x0800f400
 8002970:	08001461 	.word	0x08001461
 8002974:	20002428 	.word	0x20002428

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b094      	sub	sp, #80	@ 0x50
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 0320 	add.w	r3, r7, #32
 8002982:	2230      	movs	r2, #48	@ 0x30
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f008 fc16 	bl	800b1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <SystemClock_Config+0xd0>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	4a28      	ldr	r2, [pc, #160]	@ (8002a48 <SystemClock_Config+0xd0>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ac:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <SystemClock_Config+0xd0>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <SystemClock_Config+0xd4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a22      	ldr	r2, [pc, #136]	@ (8002a4c <SystemClock_Config+0xd4>)
 80029c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <SystemClock_Config+0xd4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80029d4:	2309      	movs	r3, #9
 80029d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029de:	2301      	movs	r3, #1
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e2:	2302      	movs	r3, #2
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029ec:	2308      	movs	r3, #8
 80029ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80029f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80029f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80029f6:	2304      	movs	r3, #4
 80029f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029fa:	2304      	movs	r3, #4
 80029fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fa14 	bl	8003e30 <HAL_RCC_OscConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a0e:	f000 fa27 	bl	8002e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a12:	230f      	movs	r3, #15
 8002a14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a16:	2302      	movs	r3, #2
 8002a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fc76 	bl	8004320 <HAL_RCC_ClockConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a3a:	f000 fa11 	bl	8002e60 <Error_Handler>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3750      	adds	r7, #80	@ 0x50
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000

08002a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a54:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a56:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <MX_I2C1_Init+0x54>)
 8002a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a5c:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <MX_I2C1_Init+0x58>)
 8002a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a8c:	4804      	ldr	r0, [pc, #16]	@ (8002aa0 <MX_I2C1_Init+0x50>)
 8002a8e:	f001 f88b 	bl	8003ba8 <HAL_I2C_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a98:	f000 f9e2 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200022d0 	.word	0x200022d0
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	000186a0 	.word	0x000186a0

08002aac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b090      	sub	sp, #64	@ 0x40
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ab2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	2228      	movs	r2, #40	@ 0x28
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f008 fb73 	bl	800b1b8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8002bc0 <MX_RTC_Init+0x114>)
 8002ad6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ad8:	4b38      	ldr	r3, [pc, #224]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002ae0:	227f      	movs	r2, #127	@ 0x7f
 8002ae2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ae4:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002ae6:	22ff      	movs	r2, #255	@ 0xff
 8002ae8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aea:	4b34      	ldr	r3, [pc, #208]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002af0:	4b32      	ldr	r3, [pc, #200]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002af6:	4b31      	ldr	r3, [pc, #196]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002afc:	482f      	ldr	r0, [pc, #188]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002afe:	f001 ff1f 	bl	8004940 <HAL_RTC_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002b08:	f000 f9aa 	bl	8002e60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4823      	ldr	r0, [pc, #140]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002b30:	f001 ff87 	bl	8004a42 <HAL_RTC_SetTime>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002b3a:	f000 f991 	bl	8002e60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4817      	ldr	r0, [pc, #92]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002b60:	f002 f809 	bl	8004b76 <HAL_RTC_SetDate>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002b6a:	f000 f979 	bl	8002e60 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	@ (8002bbc <MX_RTC_Init+0x110>)
 8002ba6:	f002 f86b 	bl	8004c80 <HAL_RTC_SetAlarm_IT>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002bb0:	f000 f956 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bb4:	bf00      	nop
 8002bb6:	3740      	adds	r7, #64	@ 0x40
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20002324 	.word	0x20002324
 8002bc0:	40002800 	.word	0x40002800

08002bc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002be2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c5c <MX_TIM3_Init+0x98>)
 8002be4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002be8:	2253      	movs	r2, #83	@ 0x53
 8002bea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bec:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002bf2:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002bf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfa:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c00:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c06:	4814      	ldr	r0, [pc, #80]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002c08:	f002 fa78 	bl	80050fc <HAL_TIM_Base_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c12:	f000 f925 	bl	8002e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	4619      	mov	r1, r3
 8002c22:	480d      	ldr	r0, [pc, #52]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002c24:	f002 fc0c 	bl	8005440 <HAL_TIM_ConfigClockSource>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002c2e:	f000 f917 	bl	8002e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c3a:	463b      	mov	r3, r7
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4806      	ldr	r0, [pc, #24]	@ (8002c58 <MX_TIM3_Init+0x94>)
 8002c40:	f002 fe0e 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c4a:	f000 f909 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20002344 	.word	0x20002344
 8002c5c:	40000400 	.word	0x40000400

08002c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <MX_USART2_UART_Init+0x50>)
 8002c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c86:	220c      	movs	r2, #12
 8002c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <MX_USART2_UART_Init+0x4c>)
 8002c98:	f002 fe64 	bl	8005964 <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ca2:	f000 f8dd 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000238c 	.word	0x2000238c
 8002cb0:	40004400 	.word	0x40004400

08002cb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	@ (8002d04 <MX_USART6_UART_Init+0x50>)
 8002cbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cc0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002cc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cda:	220c      	movs	r2, #12
 8002cdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002cea:	4805      	ldr	r0, [pc, #20]	@ (8002d00 <MX_USART6_UART_Init+0x4c>)
 8002cec:	f002 fe3a 	bl	8005964 <HAL_UART_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002cf6:	f000 f8b3 	bl	8002e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200023d4 	.word	0x200023d4
 8002d04:	40011400 	.word	0x40011400

08002d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a37      	ldr	r2, [pc, #220]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b35      	ldr	r3, [pc, #212]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d66:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	4a22      	ldr	r2, [pc, #136]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <MX_GPIO_Init+0xfc>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2120      	movs	r1, #32
 8002d92:	481d      	ldr	r0, [pc, #116]	@ (8002e08 <MX_GPIO_Init+0x100>)
 8002d94:	f000 feee 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin, GPIO_PIN_RESET);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8002d9e:	481b      	ldr	r0, [pc, #108]	@ (8002e0c <MX_GPIO_Init+0x104>)
 8002da0:	f000 fee8 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002daa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4619      	mov	r1, r3
 8002dba:	4815      	ldr	r0, [pc, #84]	@ (8002e10 <MX_GPIO_Init+0x108>)
 8002dbc:	f000 fd56 	bl	800386c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	480c      	ldr	r0, [pc, #48]	@ (8002e08 <MX_GPIO_Init+0x100>)
 8002dd8:	f000 fd48 	bl	800386c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 FAN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin;
 8002ddc:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <MX_GPIO_Init+0x104>)
 8002df6:	f000 fd39 	bl	800386c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800

08002e14 <HAL_TIM_PeriodElapsedCallback>:
{
	HAL_GPIO_WritePin(FAN_GPIO_Port, pin, GPIO_PIN_RESET);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002e24:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8002e26:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e2e:	db0a      	blt.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8002e36:	4b09      	ldr	r3, [pc, #36]	@ (8002e5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002e3e:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
	}
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	2000243c 	.word	0x2000243c
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	20002438 	.word	0x20002438

08002e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e64:	b672      	cpsid	i
}
 8002e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <Error_Handler+0x8>

08002e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_MspInit+0x54>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_MspInit+0x54>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <HAL_MspInit+0x54>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_MspInit+0x54>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_MspInit+0x54>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_MspInit+0x54>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	210f      	movs	r1, #15
 8002eae:	f06f 0001 	mvn.w	r0, #1
 8002eb2:	f000 fc12 	bl	80036da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_I2C_MspInit+0x84>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d12c      	bne.n	8002f40 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <HAL_I2C_MspInit+0x88>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	4a17      	ldr	r2, [pc, #92]	@ (8002f4c <HAL_I2C_MspInit+0x88>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_I2C_MspInit+0x88>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f08:	2312      	movs	r3, #18
 8002f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f14:	2304      	movs	r3, #4
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	480c      	ldr	r0, [pc, #48]	@ (8002f50 <HAL_I2C_MspInit+0x8c>)
 8002f20:	f000 fca4 	bl	800386c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <HAL_I2C_MspInit+0x88>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	4a07      	ldr	r2, [pc, #28]	@ (8002f4c <HAL_I2C_MspInit+0x88>)
 8002f2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_I2C_MspInit+0x88>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f40:	bf00      	nop
 8002f42:	3728      	adds	r7, #40	@ 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40005400 	.word	0x40005400
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020400 	.word	0x40020400

08002f54 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f5c:	f107 0308 	add.w	r3, r7, #8
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a10      	ldr	r2, [pc, #64]	@ (8002fb4 <HAL_RTC_MspInit+0x60>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d119      	bne.n	8002fac <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f80:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f82:	f107 0308 	add.w	r3, r7, #8
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fbea 	bl	8004760 <HAL_RCCEx_PeriphCLKConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002f92:	f7ff ff65 	bl	8002e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f96:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <HAL_RTC_MspInit+0x64>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	2029      	movs	r0, #41	@ 0x29
 8002fa2:	f000 fb9a 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002fa6:	2029      	movs	r0, #41	@ 0x29
 8002fa8:	f000 fbb3 	bl	8003712 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002fac:	bf00      	nop
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40002800 	.word	0x40002800
 8002fb8:	42470e3c 	.word	0x42470e3c

08002fbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <HAL_TIM_Base_MspInit+0x48>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d115      	bne.n	8002ffa <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_TIM_Base_MspInit+0x4c>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003008 <HAL_TIM_Base_MspInit+0x4c>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_TIM_Base_MspInit+0x4c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2105      	movs	r1, #5
 8002fee:	201d      	movs	r0, #29
 8002ff0:	f000 fb73 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ff4:	201d      	movs	r0, #29
 8002ff6:	f000 fb8c 	bl	8003712 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40000400 	.word	0x40000400
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	@ 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3a      	ldr	r2, [pc, #232]	@ (8003114 <HAL_UART_MspInit+0x108>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d134      	bne.n	8003098 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4a38      	ldr	r2, [pc, #224]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 8003038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800303c:	6413      	str	r3, [r2, #64]	@ 0x40
 800303e:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	4b32      	ldr	r3, [pc, #200]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a31      	ldr	r2, [pc, #196]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003066:	230c      	movs	r3, #12
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003072:	2303      	movs	r3, #3
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003076:	2307      	movs	r3, #7
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307a:	f107 031c 	add.w	r3, r7, #28
 800307e:	4619      	mov	r1, r3
 8003080:	4826      	ldr	r0, [pc, #152]	@ (800311c <HAL_UART_MspInit+0x110>)
 8003082:	f000 fbf3 	bl	800386c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2105      	movs	r1, #5
 800308a:	2026      	movs	r0, #38	@ 0x26
 800308c:	f000 fb25 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003090:	2026      	movs	r0, #38	@ 0x26
 8003092:	f000 fb3e 	bl	8003712 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003096:	e038      	b.n	800310a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_UART_MspInit+0x114>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d133      	bne.n	800310a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 80030ac:	f043 0320 	orr.w	r3, r3, #32
 80030b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b2:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_UART_MspInit+0x10c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030da:	23c0      	movs	r3, #192	@ 0xc0
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030ea:	2308      	movs	r3, #8
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	480b      	ldr	r0, [pc, #44]	@ (8003124 <HAL_UART_MspInit+0x118>)
 80030f6:	f000 fbb9 	bl	800386c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2105      	movs	r1, #5
 80030fe:	2047      	movs	r0, #71	@ 0x47
 8003100:	f000 faeb 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003104:	2047      	movs	r0, #71	@ 0x47
 8003106:	f000 fb04 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 800310a:	bf00      	nop
 800310c:	3730      	adds	r7, #48	@ 0x30
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40004400 	.word	0x40004400
 8003118:	40023800 	.word	0x40023800
 800311c:	40020000 	.word	0x40020000
 8003120:	40011400 	.word	0x40011400
 8003124:	40020800 	.word	0x40020800

08003128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800312c:	bf00      	nop
 800312e:	e7fd      	b.n	800312c <NMI_Handler+0x4>

08003130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <HardFault_Handler+0x4>

08003138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <MemManage_Handler+0x4>

08003140 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003144:	bf00      	nop
 8003146:	e7fd      	b.n	8003144 <BusFault_Handler+0x4>

08003148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <UsageFault_Handler+0x4>

08003150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003162:	f000 f99b 	bl	800349c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003166:	f005 fd5b 	bl	8008c20 <xTaskGetSchedulerState>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003170:	f006 fc52 	bl	8009a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800317c:	4802      	ldr	r0, [pc, #8]	@ (8003188 <TIM3_IRQHandler+0x10>)
 800317e:	f002 f86f 	bl	8005260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20002344 	.word	0x20002344

0800318c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003190:	4802      	ldr	r0, [pc, #8]	@ (800319c <USART2_IRQHandler+0x10>)
 8003192:	f002 fce7 	bl	8005b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000238c 	.word	0x2000238c

080031a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80031a4:	4802      	ldr	r0, [pc, #8]	@ (80031b0 <RTC_Alarm_IRQHandler+0x10>)
 80031a6:	f001 feaf 	bl	8004f08 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20002324 	.word	0x20002324

080031b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80031b8:	4802      	ldr	r0, [pc, #8]	@ (80031c4 <USART6_IRQHandler+0x10>)
 80031ba:	f002 fcd3 	bl	8005b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200023d4 	.word	0x200023d4

080031c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return 1;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <_kill>:

int _kill(int pid, int sig)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031e2:	f008 ffa5 	bl	800c130 <__errno>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2216      	movs	r2, #22
 80031ea:	601a      	str	r2, [r3, #0]
  return -1;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_exit>:

void _exit (int status)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ffe7 	bl	80031d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <_exit+0x12>

0800320e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e00a      	b.n	8003236 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003220:	f3af 8000 	nop.w
 8003224:	4601      	mov	r1, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	60ba      	str	r2, [r7, #8]
 800322c:	b2ca      	uxtb	r2, r1
 800322e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	3301      	adds	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	dbf0      	blt.n	8003220 <_read+0x12>
  }

  return len;
 800323e:	687b      	ldr	r3, [r7, #4]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e009      	b.n	800326e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	60ba      	str	r2, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f9b0 	bl	80025c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3301      	adds	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	dbf1      	blt.n	800325a <_write+0x12>
  }
  return len;
 8003276:	687b      	ldr	r3, [r7, #4]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_close>:

int _close(int file)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032a8:	605a      	str	r2, [r3, #4]
  return 0;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <_isatty>:

int _isatty(int file)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032c0:	2301      	movs	r3, #1
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_gettimeofday>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int _gettimeofday(struct timeval *tv, void *tzvp) {
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
    tv->tv_sec = 0;
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9c1 2300 	strd	r2, r3, [r1]
    tv->tv_usec = 0;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
    return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800331c:	4a14      	ldr	r2, [pc, #80]	@ (8003370 <_sbrk+0x5c>)
 800331e:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <_sbrk+0x60>)
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003328:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003330:	4b11      	ldr	r3, [pc, #68]	@ (8003378 <_sbrk+0x64>)
 8003332:	4a12      	ldr	r2, [pc, #72]	@ (800337c <_sbrk+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003344:	f008 fef4 	bl	800c130 <__errno>
 8003348:	4603      	mov	r3, r0
 800334a:	220c      	movs	r2, #12
 800334c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e009      	b.n	8003368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335a:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	4a05      	ldr	r2, [pc, #20]	@ (8003378 <_sbrk+0x64>)
 8003364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20020000 	.word	0x20020000
 8003374:	00000400 	.word	0x00000400
 8003378:	20002444 	.word	0x20002444
 800337c:	20006f10 	.word	0x20006f10

08003380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <SystemInit+0x20>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	4a05      	ldr	r2, [pc, #20]	@ (80033a0 <SystemInit+0x20>)
 800338c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033a8:	f7ff ffea 	bl	8003380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480c      	ldr	r0, [pc, #48]	@ (80033e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033ae:	490d      	ldr	r1, [pc, #52]	@ (80033e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033b0:	4a0d      	ldr	r2, [pc, #52]	@ (80033e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033c4:	4c0a      	ldr	r4, [pc, #40]	@ (80033f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033d2:	f008 feb3 	bl	800c13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033d6:	f7ff fa35 	bl	8002844 <main>
  bx  lr    
 80033da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80033e8:	0800fac4 	.word	0x0800fac4
  ldr r2, =_sbss
 80033ec:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80033f0:	20006f0c 	.word	0x20006f0c

080033f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f4:	e7fe      	b.n	80033f4 <ADC_IRQHandler>
	...

080033f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <HAL_Init+0x40>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0d      	ldr	r2, [pc, #52]	@ (8003438 <HAL_Init+0x40>)
 8003402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_Init+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0a      	ldr	r2, [pc, #40]	@ (8003438 <HAL_Init+0x40>)
 800340e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a07      	ldr	r2, [pc, #28]	@ (8003438 <HAL_Init+0x40>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003420:	2003      	movs	r0, #3
 8003422:	f000 f94f 	bl	80036c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003426:	200f      	movs	r0, #15
 8003428:	f000 f808 	bl	800343c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800342c:	f7ff fd1e 	bl	8002e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00

0800343c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003444:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_InitTick+0x54>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_InitTick+0x58>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	4619      	mov	r1, r3
 800344e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003452:	fbb3 f3f1 	udiv	r3, r3, r1
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f967 	bl	800372e <HAL_SYSTICK_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e00e      	b.n	8003488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d80a      	bhi.n	8003486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003470:	2200      	movs	r2, #0
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f000 f92f 	bl	80036da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800347c:	4a06      	ldr	r2, [pc, #24]	@ (8003498 <HAL_InitTick+0x5c>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000010 	.word	0x20000010
 8003494:	20000018 	.word	0x20000018
 8003498:	20000014 	.word	0x20000014

0800349c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_IncTick+0x20>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_IncTick+0x24>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_IncTick+0x24>)
 80034ae:	6013      	str	r3, [r2, #0]
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000018 	.word	0x20000018
 80034c0:	20002448 	.word	0x20002448

080034c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return uwTick;
 80034c8:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <HAL_GetTick+0x14>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20002448 	.word	0x20002448

080034dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e4:	f7ff ffee 	bl	80034c4 <HAL_GetTick>
 80034e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d005      	beq.n	8003502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <HAL_Delay+0x44>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003502:	bf00      	nop
 8003504:	f7ff ffde 	bl	80034c4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	429a      	cmp	r2, r3
 8003512:	d8f7      	bhi.n	8003504 <HAL_Delay+0x28>
  {
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000018 	.word	0x20000018

08003524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003540:	4013      	ands	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800354c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003556:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <__NVIC_GetPriorityGrouping+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 0307 	and.w	r3, r3, #7
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db0b      	blt.n	80035b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4907      	ldr	r1, [pc, #28]	@ (80035c0 <__NVIC_EnableIRQ+0x38>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2001      	movs	r0, #1
 80035aa:	fa00 f202 	lsl.w	r2, r0, r2
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf28      	it	cs
 8003636:	2304      	movcs	r3, #4
 8003638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3304      	adds	r3, #4
 800363e:	2b06      	cmp	r3, #6
 8003640:	d902      	bls.n	8003648 <NVIC_EncodePriority+0x30>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b03      	subs	r3, #3
 8003646:	e000      	b.n	800364a <NVIC_EncodePriority+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	401a      	ands	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43d9      	mvns	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	4313      	orrs	r3, r2
         );
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	@ 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003690:	d301      	bcc.n	8003696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003692:	2301      	movs	r3, #1
 8003694:	e00f      	b.n	80036b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003696:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <SysTick_Config+0x40>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369e:	210f      	movs	r1, #15
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f7ff ff8e 	bl	80035c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <SysTick_Config+0x40>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <SysTick_Config+0x40>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000e010 	.word	0xe000e010

080036c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff29 	bl	8003524 <__NVIC_SetPriorityGrouping>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ec:	f7ff ff3e 	bl	800356c <__NVIC_GetPriorityGrouping>
 80036f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff8e 	bl	8003618 <NVIC_EncodePriority>
 80036fc:	4602      	mov	r2, r0
 80036fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff5d 	bl	80035c4 <__NVIC_SetPriority>
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff31 	bl	8003588 <__NVIC_EnableIRQ>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ffa2 	bl	8003680 <SysTick_Config>
 800373c:	4603      	mov	r3, r0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff feb6 	bl	80034c4 <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d008      	beq.n	8003778 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2280      	movs	r2, #128	@ 0x80
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e052      	b.n	800381e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0216 	bic.w	r2, r2, #22
 8003786:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003796:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_DMA_Abort+0x62>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0208 	bic.w	r2, r2, #8
 80037b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c8:	e013      	b.n	80037f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ca:	f7ff fe7b 	bl	80034c4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d90c      	bls.n	80037f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2203      	movs	r2, #3
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e015      	b.n	800381e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e4      	bne.n	80037ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	223f      	movs	r2, #63	@ 0x3f
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2280      	movs	r2, #128	@ 0x80
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e00c      	b.n	800385e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2205      	movs	r2, #5
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e159      	b.n	8003b3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003888:	2201      	movs	r2, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f040 8148 	bne.w	8003b36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d005      	beq.n	80038be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d130      	bne.n	8003920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	2203      	movs	r2, #3
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f4:	2201      	movs	r2, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 0201 	and.w	r2, r3, #1
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d017      	beq.n	800395c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d123      	bne.n	80039b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	69b9      	ldr	r1, [r7, #24]
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a2 	beq.w	8003b36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	4b57      	ldr	r3, [pc, #348]	@ (8003b54 <HAL_GPIO_Init+0x2e8>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a56      	ldr	r2, [pc, #344]	@ (8003b54 <HAL_GPIO_Init+0x2e8>)
 80039fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b54      	ldr	r3, [pc, #336]	@ (8003b54 <HAL_GPIO_Init+0x2e8>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0e:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_GPIO_Init+0x2ec>)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	3302      	adds	r3, #2
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	220f      	movs	r2, #15
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a49      	ldr	r2, [pc, #292]	@ (8003b5c <HAL_GPIO_Init+0x2f0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_GPIO_Init+0x202>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a48      	ldr	r2, [pc, #288]	@ (8003b60 <HAL_GPIO_Init+0x2f4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0x1fe>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a47      	ldr	r2, [pc, #284]	@ (8003b64 <HAL_GPIO_Init+0x2f8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00d      	beq.n	8003a66 <HAL_GPIO_Init+0x1fa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a46      	ldr	r2, [pc, #280]	@ (8003b68 <HAL_GPIO_Init+0x2fc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <HAL_GPIO_Init+0x1f6>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a45      	ldr	r2, [pc, #276]	@ (8003b6c <HAL_GPIO_Init+0x300>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_GPIO_Init+0x1f2>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	e008      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e006      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a62:	2303      	movs	r3, #3
 8003a64:	e004      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e002      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_GPIO_Init+0x204>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	f002 0203 	and.w	r2, r2, #3
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	4093      	lsls	r3, r2
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a80:	4935      	ldr	r1, [pc, #212]	@ (8003b58 <HAL_GPIO_Init+0x2ec>)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	3302      	adds	r3, #2
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003adc:	4a24      	ldr	r2, [pc, #144]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ae2:	4b23      	ldr	r3, [pc, #140]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b06:	4a1a      	ldr	r2, [pc, #104]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b0c:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b30:	4a0f      	ldr	r2, [pc, #60]	@ (8003b70 <HAL_GPIO_Init+0x304>)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	f67f aea2 	bls.w	8003888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3724      	adds	r7, #36	@ 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	40020400 	.word	0x40020400
 8003b64:	40020800 	.word	0x40020800
 8003b68:	40020c00 	.word	0x40020c00
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40013c00 	.word	0x40013c00

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b90:	e003      	b.n	8003b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	041a      	lsls	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e12b      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff f978 	bl	8002ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	@ 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f000 fd80 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a81      	ldr	r2, [pc, #516]	@ (8003e1c <HAL_I2C_Init+0x274>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d807      	bhi.n	8003c2c <HAL_I2C_Init+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a80      	ldr	r2, [pc, #512]	@ (8003e20 <HAL_I2C_Init+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e006      	b.n	8003c3a <HAL_I2C_Init+0x92>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e24 <HAL_I2C_Init+0x27c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0e7      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a78      	ldr	r2, [pc, #480]	@ (8003e28 <HAL_I2C_Init+0x280>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9b      	lsrs	r3, r3, #18
 8003c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a6a      	ldr	r2, [pc, #424]	@ (8003e1c <HAL_I2C_Init+0x274>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d802      	bhi.n	8003c7c <HAL_I2C_Init+0xd4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e009      	b.n	8003c90 <HAL_I2C_Init+0xe8>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a69      	ldr	r2, [pc, #420]	@ (8003e2c <HAL_I2C_Init+0x284>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	3301      	adds	r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ca2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	495c      	ldr	r1, [pc, #368]	@ (8003e1c <HAL_I2C_Init+0x274>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d819      	bhi.n	8003ce4 <HAL_I2C_Init+0x13c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e59      	subs	r1, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_I2C_Init+0x138>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e59      	subs	r1, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	e051      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e04f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d111      	bne.n	8003d10 <HAL_I2C_Init+0x168>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e012      	b.n	8003d36 <HAL_I2C_Init+0x18e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x196>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_I2C_Init+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e58      	subs	r0, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	440b      	add	r3, r1
 8003d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d62:	e00f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003db2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	000186a0 	.word	0x000186a0
 8003e20:	001e847f 	.word	0x001e847f
 8003e24:	003d08ff 	.word	0x003d08ff
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	10624dd3 	.word	0x10624dd3

08003e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e267      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d075      	beq.n	8003f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e4e:	4b88      	ldr	r3, [pc, #544]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b85      	ldr	r3, [pc, #532]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d112      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b82      	ldr	r3, [pc, #520]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	4b7e      	ldr	r3, [pc, #504]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x108>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d157      	bne.n	8003f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e242      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x74>
 8003e96:	4b76      	ldr	r3, [pc, #472]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x98>
 8003eae:	4b70      	ldr	r3, [pc, #448]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b6d      	ldr	r3, [pc, #436]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	4b69      	ldr	r3, [pc, #420]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b66      	ldr	r3, [pc, #408]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a65      	ldr	r2, [pc, #404]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7ff faec 	bl	80034c4 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7ff fae8 	bl	80034c4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e207      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b5b      	ldr	r3, [pc, #364]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xc0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7ff fad8 	bl	80034c4 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7ff fad4 	bl	80034c4 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1f3      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b51      	ldr	r3, [pc, #324]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0xe8>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f46:	4b4a      	ldr	r3, [pc, #296]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b44      	ldr	r3, [pc, #272]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	4b41      	ldr	r3, [pc, #260]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1c7      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4937      	ldr	r1, [pc, #220]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	e03a      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b34      	ldr	r3, [pc, #208]	@ (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7ff fa8d 	bl	80034c4 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fae:	f7ff fa89 	bl	80034c4 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1a8      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b28      	ldr	r3, [pc, #160]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4925      	ldr	r1, [pc, #148]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7ff fa6c 	bl	80034c4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7ff fa68 	bl	80034c4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e187      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b15      	ldr	r3, [pc, #84]	@ (8004078 <HAL_RCC_OscConfig+0x248>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7ff fa4c 	bl	80034c4 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004030:	f7ff fa48 	bl	80034c4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e167      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCC_OscConfig+0x240>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x200>
 800404e:	e01b      	b.n	8004088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_OscConfig+0x248>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7ff fa35 	bl	80034c4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	e00e      	b.n	800407c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405e:	f7ff fa31 	bl	80034c4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d907      	bls.n	800407c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e150      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 8004070:	40023800 	.word	0x40023800
 8004074:	42470000 	.word	0x42470000
 8004078:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8097 	beq.w	80041c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b81      	ldr	r3, [pc, #516]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	4b7d      	ldr	r3, [pc, #500]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	4a7c      	ldr	r2, [pc, #496]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040b6:	4b7a      	ldr	r3, [pc, #488]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b77      	ldr	r3, [pc, #476]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b74      	ldr	r3, [pc, #464]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a73      	ldr	r2, [pc, #460]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7ff f9f1 	bl	80034c4 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7ff f9ed 	bl	80034c4 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e10c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b6a      	ldr	r3, [pc, #424]	@ (80042a4 <HAL_RCC_OscConfig+0x474>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x2ea>
 800410c:	4b64      	ldr	r3, [pc, #400]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004110:	4a63      	ldr	r2, [pc, #396]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	@ 0x70
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x30c>
 8004122:	4b5f      	ldr	r3, [pc, #380]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	4a5e      	ldr	r2, [pc, #376]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	@ 0x70
 800412e:	4b5c      	ldr	r3, [pc, #368]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004132:	4a5b      	ldr	r2, [pc, #364]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6713      	str	r3, [r2, #112]	@ 0x70
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800413c:	4b58      	ldr	r3, [pc, #352]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004140:	4a57      	ldr	r2, [pc, #348]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	@ 0x70
 8004148:	4b55      	ldr	r3, [pc, #340]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414c:	4a54      	ldr	r2, [pc, #336]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 0304 	bic.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7ff f9b2 	bl	80034c4 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7ff f9ae 	bl	80034c4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0cb      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	4b49      	ldr	r3, [pc, #292]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ee      	beq.n	8004164 <HAL_RCC_OscConfig+0x334>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004188:	f7ff f99c 	bl	80034c4 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7ff f998 	bl	80034c4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0b5      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a6:	4b3e      	ldr	r3, [pc, #248]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ee      	bne.n	8004190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	4a38      	ldr	r2, [pc, #224]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a1 	beq.w	8004310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ce:	4b34      	ldr	r3, [pc, #208]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d05c      	beq.n	8004294 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d141      	bne.n	8004266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b31      	ldr	r3, [pc, #196]	@ (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7ff f96c 	bl	80034c4 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7ff f968 	bl	80034c4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e087      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	491b      	ldr	r1, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <HAL_RCC_OscConfig+0x478>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7ff f941 	bl	80034c4 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7ff f93d 	bl	80034c4 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e05c      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x416>
 8004264:	e054      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7ff f92a 	bl	80034c4 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004274:	f7ff f926 	bl	80034c4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e045      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <HAL_RCC_OscConfig+0x470>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x444>
 8004292:	e03d      	b.n	8004310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e038      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x4ec>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d028      	beq.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d121      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11a      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	3b01      	subs	r3, #1
 80042f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0cc      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b68      	ldr	r3, [pc, #416]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d90c      	bls.n	800435c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b65      	ldr	r3, [pc, #404]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b63      	ldr	r3, [pc, #396]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0b8      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d020      	beq.n	80043aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004374:	4b59      	ldr	r3, [pc, #356]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a58      	ldr	r2, [pc, #352]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800437e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800438c:	4b53      	ldr	r3, [pc, #332]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a52      	ldr	r2, [pc, #328]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b50      	ldr	r3, [pc, #320]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	494d      	ldr	r1, [pc, #308]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d044      	beq.n	8004440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	4b47      	ldr	r3, [pc, #284]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d003      	beq.n	80043de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b3f      	ldr	r3, [pc, #252]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e06f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ee:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e067      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b37      	ldr	r3, [pc, #220]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4934      	ldr	r1, [pc, #208]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7ff f858 	bl	80034c4 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7ff f854 	bl	80034c4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04f      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b25      	ldr	r3, [pc, #148]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d20c      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b22      	ldr	r3, [pc, #136]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e032      	b.n	80044ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004474:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4916      	ldr	r1, [pc, #88]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004492:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	490e      	ldr	r1, [pc, #56]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044a6:	f000 f821 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80044aa:	4602      	mov	r2, r0
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	490a      	ldr	r1, [pc, #40]	@ (80044e0 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	5ccb      	ldrb	r3, [r1, r3]
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	4a09      	ldr	r2, [pc, #36]	@ (80044e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044c2:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <HAL_RCC_ClockConfig+0x1c8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe ffb8 	bl	800343c <HAL_InitTick>

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023c00 	.word	0x40023c00
 80044dc:	40023800 	.word	0x40023800
 80044e0:	0800f454 	.word	0x0800f454
 80044e4:	20000010 	.word	0x20000010
 80044e8:	20000014 	.word	0x20000014

080044ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f0:	b094      	sub	sp, #80	@ 0x50
 80044f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004504:	4b79      	ldr	r3, [pc, #484]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d00d      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x40>
 8004510:	2b08      	cmp	r3, #8
 8004512:	f200 80e1 	bhi.w	80046d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 800451a:	2b04      	cmp	r3, #4
 800451c:	d003      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x3a>
 800451e:	e0db      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b73      	ldr	r3, [pc, #460]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004524:	e0db      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004526:	4b73      	ldr	r3, [pc, #460]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452a:	e0d8      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800452c:	4b6f      	ldr	r3, [pc, #444]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004534:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004536:	4b6d      	ldr	r3, [pc, #436]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004542:	4b6a      	ldr	r3, [pc, #424]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	2200      	movs	r2, #0
 800454a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800454c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004554:	633b      	str	r3, [r7, #48]	@ 0x30
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
 800455a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f04f 0100 	mov.w	r1, #0
 800456a:	0159      	lsls	r1, r3, #5
 800456c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004570:	0150      	lsls	r0, r2, #5
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4621      	mov	r1, r4
 8004578:	1a51      	subs	r1, r2, r1
 800457a:	6139      	str	r1, [r7, #16]
 800457c:	4629      	mov	r1, r5
 800457e:	eb63 0301 	sbc.w	r3, r3, r1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004590:	4659      	mov	r1, fp
 8004592:	018b      	lsls	r3, r1, #6
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800459a:	4651      	mov	r1, sl
 800459c:	018a      	lsls	r2, r1, #6
 800459e:	4651      	mov	r1, sl
 80045a0:	ebb2 0801 	subs.w	r8, r2, r1
 80045a4:	4659      	mov	r1, fp
 80045a6:	eb63 0901 	sbc.w	r9, r3, r1
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045be:	4690      	mov	r8, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	eb18 0303 	adds.w	r3, r8, r3
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	462b      	mov	r3, r5
 80045cc:	eb49 0303 	adc.w	r3, r9, r3
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045de:	4629      	mov	r1, r5
 80045e0:	024b      	lsls	r3, r1, #9
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045e8:	4621      	mov	r1, r4
 80045ea:	024a      	lsls	r2, r1, #9
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	2200      	movs	r2, #0
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045fc:	f7fc fb6e 	bl	8000cdc <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	e058      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460a:	4b38      	ldr	r3, [pc, #224]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	099b      	lsrs	r3, r3, #6
 8004610:	2200      	movs	r2, #0
 8004612:	4618      	mov	r0, r3
 8004614:	4611      	mov	r1, r2
 8004616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	f04f 0000 	mov.w	r0, #0
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	0159      	lsls	r1, r3, #5
 8004632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004636:	0150      	lsls	r0, r2, #5
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4641      	mov	r1, r8
 800463e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb63 0b01 	sbc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800465c:	ebb2 040a 	subs.w	r4, r2, sl
 8004660:	eb63 050b 	sbc.w	r5, r3, fp
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	00eb      	lsls	r3, r5, #3
 800466e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004672:	00e2      	lsls	r2, r4, #3
 8004674:	4614      	mov	r4, r2
 8004676:	461d      	mov	r5, r3
 8004678:	4643      	mov	r3, r8
 800467a:	18e3      	adds	r3, r4, r3
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	464b      	mov	r3, r9
 8004680:	eb45 0303 	adc.w	r3, r5, r3
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004692:	4629      	mov	r1, r5
 8004694:	028b      	lsls	r3, r1, #10
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800469c:	4621      	mov	r1, r4
 800469e:	028a      	lsls	r2, r1, #10
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a6:	2200      	movs	r2, #0
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	61fa      	str	r2, [r7, #28]
 80046ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b0:	f7fc fb14 	bl	8000cdc <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x200>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3750      	adds	r7, #80	@ 0x50
 80046e4:	46bd      	mov	sp, r7
 80046e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	@ (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000010 	.word	0x20000010

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004714:	f7ff fff0 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	0800f464 	.word	0x0800f464

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800473c:	f7ff ffdc 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0b5b      	lsrs	r3, r3, #13
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4903      	ldr	r1, [pc, #12]	@ (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40023800 	.word	0x40023800
 800475c:	0800f464 	.word	0x0800f464

08004760 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004784:	2b00      	cmp	r3, #0
 8004786:	d038      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004788:	4b68      	ldr	r3, [pc, #416]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800478e:	f7fe fe99 	bl	80034c4 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004796:	f7fe fe95 	bl	80034c4 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0bd      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a8:	4b61      	ldr	r3, [pc, #388]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	071b      	lsls	r3, r3, #28
 80047c6:	495a      	ldr	r1, [pc, #360]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047ce:	4b57      	ldr	r3, [pc, #348]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047d4:	f7fe fe76 	bl	80034c4 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047dc:	f7fe fe72 	bl	80034c4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e09a      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ee:	4b50      	ldr	r3, [pc, #320]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8083 	beq.w	800490e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	4b48      	ldr	r3, [pc, #288]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	4a47      	ldr	r2, [pc, #284]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004816:	6413      	str	r3, [r2, #64]	@ 0x40
 8004818:	4b45      	ldr	r3, [pc, #276]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004824:	4b43      	ldr	r3, [pc, #268]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a42      	ldr	r2, [pc, #264]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800482a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004830:	f7fe fe48 	bl	80034c4 <HAL_GetTick>
 8004834:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fe fe44 	bl	80034c4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e06c      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800484a:	4b3a      	ldr	r3, [pc, #232]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004856:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02f      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d028      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004874:	4b2e      	ldr	r3, [pc, #184]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800487e:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004884:	4b2c      	ldr	r3, [pc, #176]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800488a:	4a29      	ldr	r2, [pc, #164]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004890:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d114      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800489c:	f7fe fe12 	bl	80034c4 <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fe fe0e 	bl	80034c4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e034      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ee      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d2:	d10d      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80048d4:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e8:	4911      	ldr	r1, [pc, #68]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
 80048ee:	e005      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80048f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048fa:	6093      	str	r3, [r2, #8]
 80048fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004908:	4909      	ldr	r1, [pc, #36]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	4313      	orrs	r3, r2
 800490c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7d1a      	ldrb	r2, [r3, #20]
 800491e:	4b07      	ldr	r3, [pc, #28]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004920:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	42470068 	.word	0x42470068
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470e40 	.word	0x42470e40
 800493c:	424711e0 	.word	0x424711e0

08004940 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e073      	b.n	8004a3a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7f5b      	ldrb	r3, [r3, #29]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d105      	bne.n	8004968 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fe faf6 	bl	8002f54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b10      	cmp	r3, #16
 800497a:	d055      	beq.n	8004a28 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	22ca      	movs	r2, #202	@ 0xca
 8004982:	625a      	str	r2, [r3, #36]	@ 0x24
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2253      	movs	r2, #83	@ 0x53
 800498a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fb31 	bl	8004ff4 <RTC_EnterInitMode>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d12c      	bne.n	80049f6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80049aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6899      	ldr	r1, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68d2      	ldr	r2, [r2, #12]
 80049d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	041a      	lsls	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fb38 	bl	8005062 <RTC_ExitInitMode>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d110      	bne.n	8004a1e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a0a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	22ff      	movs	r2, #255	@ 0xff
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a26:	e001      	b.n	8004a2c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a42:	b590      	push	{r4, r7, lr}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	7f1b      	ldrb	r3, [r3, #28]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_RTC_SetTime+0x1c>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e087      	b.n	8004b6e <HAL_RTC_SetTime+0x12c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2202      	movs	r2, #2
 8004a68:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d126      	bne.n	8004abe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2200      	movs	r2, #0
 8004a82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fb0f 	bl	80050ac <RTC_ByteToBcd2>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fb08 	bl	80050ac <RTC_ByteToBcd2>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004aa0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fb00 	bl	80050ac <RTC_ByteToBcd2>
 8004aac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004aae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	78db      	ldrb	r3, [r3, #3]
 8004ab6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e018      	b.n	8004af0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ade:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ae4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	22ca      	movs	r2, #202	@ 0xca
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2253      	movs	r2, #83	@ 0x53
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fa77 	bl	8004ff4 <RTC_EnterInitMode>
 8004b06:	4603      	mov	r3, r0
 8004b08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d120      	bne.n	8004b52 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004b1a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004b1e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fa8a 	bl	8005062 <RTC_ExitInitMode>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]

  return status;
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}

08004b76 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b76:	b590      	push	{r4, r7, lr}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	7f1b      	ldrb	r3, [r3, #28]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_RTC_SetDate+0x1c>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e071      	b.n	8004c76 <HAL_RTC_SetDate+0x100>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10e      	bne.n	8004bc2 <HAL_RTC_SetDate+0x4c>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	330a      	adds	r3, #10
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11c      	bne.n	8004c02 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	78db      	ldrb	r3, [r3, #3]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fa6d 	bl	80050ac <RTC_ByteToBcd2>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fa66 	bl	80050ac <RTC_ByteToBcd2>
 8004be0:	4603      	mov	r3, r0
 8004be2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004be4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	789b      	ldrb	r3, [r3, #2]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa5e 	bl	80050ac <RTC_ByteToBcd2>
 8004bf0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004bf2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e00e      	b.n	8004c20 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	22ca      	movs	r2, #202	@ 0xca
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2253      	movs	r2, #83	@ 0x53
 8004c2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f9df 	bl	8004ff4 <RTC_EnterInitMode>
 8004c36:	4603      	mov	r3, r0
 8004c38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c4e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fa06 	bl	8005062 <RTC_ExitInitMode>
 8004c56:	4603      	mov	r3, r0
 8004c58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	22ff      	movs	r2, #255	@ 0xff
 8004c6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]

  return status;
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}
	...

08004c80 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8004efc <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a9b      	ldr	r2, [pc, #620]	@ (8004f00 <HAL_RTC_SetAlarm_IT+0x280>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0adb      	lsrs	r3, r3, #11
 8004c98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	7f1b      	ldrb	r3, [r3, #28]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RTC_SetAlarm_IT+0x36>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e11e      	b.n	8004ef4 <HAL_RTC_SetAlarm_IT+0x274>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d137      	bne.n	8004d38 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f9e3 	bl	80050ac <RTC_ByteToBcd2>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f9dc 	bl	80050ac <RTC_ByteToBcd2>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004cf8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	789b      	ldrb	r3, [r3, #2]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f9d4 	bl	80050ac <RTC_ByteToBcd2>
 8004d04:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	78db      	ldrb	r3, [r3, #3]
 8004d0e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004d10:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f9c6 	bl	80050ac <RTC_ByteToBcd2>
 8004d20:	4603      	mov	r3, r0
 8004d22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004d24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004d2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e023      	b.n	8004d80 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004d58:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004d5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004d66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004d70:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004d76:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	22ca      	movs	r2, #202	@ 0xca
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2253      	movs	r2, #83	@ 0x53
 8004d9a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004da4:	d142      	bne.n	8004e2c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004db4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004dc6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	22ff      	movs	r2, #255	@ 0xff
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2203      	movs	r2, #3
 8004de0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e083      	b.n	8004ef4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0e6      	beq.n	8004dc8 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e18:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e28:	609a      	str	r2, [r3, #8]
 8004e2a:	e04c      	b.n	8004ec6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e3a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004e4c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004efc <HAL_RTC_SetAlarm_IT+0x27c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2b      	ldr	r2, [pc, #172]	@ (8004f00 <HAL_RTC_SetAlarm_IT+0x280>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	0adb      	lsrs	r3, r3, #11
 8004e5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	22ff      	movs	r2, #255	@ 0xff
 8004e76:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e035      	b.n	8004ef4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0e6      	beq.n	8004e64 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb4:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f04 <HAL_RTC_SetAlarm_IT+0x284>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0e      	ldr	r2, [pc, #56]	@ (8004f04 <HAL_RTC_SetAlarm_IT+0x284>)
 8004ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ed0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <HAL_RTC_SetAlarm_IT+0x284>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8004f04 <HAL_RTC_SetAlarm_IT+0x284>)
 8004ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004edc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	22ff      	movs	r2, #255	@ 0xff
 8004ee4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3724      	adds	r7, #36	@ 0x24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}
 8004efc:	20000010 	.word	0x20000010
 8004f00:	10624dd3 	.word	0x10624dd3
 8004f04:	40013c00 	.word	0x40013c00

08004f08 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004f10:	4b1f      	ldr	r3, [pc, #124]	@ (8004f90 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004f12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f16:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004f44:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f824 	bl	8004f94 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d012      	beq.n	8004f80 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00b      	beq.n	8004f80 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004f78:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8b4 	bl	80050e8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	775a      	strb	r2, [r3, #29]
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40013c00 	.word	0x40013c00

08004f94 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8004fba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fbc:	f7fe fa82 	bl	80034c4 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fc2:	e009      	b.n	8004fd8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fc4:	f7fe fa7e 	bl	80034c4 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e007      	b.n	8004fe8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0ee      	beq.n	8004fc4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	00013f5f 	.word	0x00013f5f

08004ff4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d122      	bne.n	8005058 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005020:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005022:	f7fe fa4f 	bl	80034c4 <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005028:	e00c      	b.n	8005044 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800502a:	f7fe fa4b 	bl	80034c4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005038:	d904      	bls.n	8005044 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2204      	movs	r2, #4
 800503e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <RTC_EnterInitMode+0x64>
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d1e8      	bne.n	800502a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800507c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ff8b 	bl	8004fa8 <HAL_RTC_WaitForSynchro>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2204      	movs	r2, #4
 800509c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80050ba:	e005      	b.n	80050c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	3b0a      	subs	r3, #10
 80050c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d8f6      	bhi.n	80050bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4313      	orrs	r3, r2
 80050da:	b2db      	uxtb	r3, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e041      	b.n	8005192 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd ff4a 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 fa70 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d001      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e044      	b.n	800523e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <HAL_TIM_Base_Start_IT+0xb0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d013      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x6c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <HAL_TIM_Base_Start_IT+0xb4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x6c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <HAL_TIM_Base_Start_IT+0xb8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x6c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <HAL_TIM_Base_Start_IT+0xbc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x6c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a16      	ldr	r2, [pc, #88]	@ (800525c <HAL_TIM_Base_Start_IT+0xc0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d111      	bne.n	800522c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d010      	beq.n	800523c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	e007      	b.n	800523c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40014000 	.word	0x40014000

08005260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d020      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01b      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0202 	mvn.w	r2, #2
 8005294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f999 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f98b 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f99c 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d020      	beq.n	8005310 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0204 	mvn.w	r2, #4
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f973 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f965 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f976 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d020      	beq.n	800535c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01b      	beq.n	800535c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0208 	mvn.w	r2, #8
 800532c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2204      	movs	r2, #4
 8005332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f94d 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005348:	e005      	b.n	8005356 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f93f 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f950 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d020      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01b      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0210 	mvn.w	r2, #16
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2208      	movs	r2, #8
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f927 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f919 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f92a 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00c      	beq.n	80053cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0201 	mvn.w	r2, #1
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fd fd24 	bl	8002e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fab0 	bl	8005950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00c      	beq.n	8005414 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8fb 	bl	800560a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0220 	mvn.w	r2, #32
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa82 	bl	800593c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIM_ConfigClockSource+0x1c>
 8005458:	2302      	movs	r3, #2
 800545a:	e0b4      	b.n	80055c6 <HAL_TIM_ConfigClockSource+0x186>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800547a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005494:	d03e      	beq.n	8005514 <HAL_TIM_ConfigClockSource+0xd4>
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549a:	f200 8087 	bhi.w	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a2:	f000 8086 	beq.w	80055b2 <HAL_TIM_ConfigClockSource+0x172>
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054aa:	d87f      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b70      	cmp	r3, #112	@ 0x70
 80054ae:	d01a      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0xa6>
 80054b0:	2b70      	cmp	r3, #112	@ 0x70
 80054b2:	d87b      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b60      	cmp	r3, #96	@ 0x60
 80054b6:	d050      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x11a>
 80054b8:	2b60      	cmp	r3, #96	@ 0x60
 80054ba:	d877      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b50      	cmp	r3, #80	@ 0x50
 80054be:	d03c      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xfa>
 80054c0:	2b50      	cmp	r3, #80	@ 0x50
 80054c2:	d873      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d058      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x13a>
 80054c8:	2b40      	cmp	r3, #64	@ 0x40
 80054ca:	d86f      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b30      	cmp	r3, #48	@ 0x30
 80054ce:	d064      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054d0:	2b30      	cmp	r3, #48	@ 0x30
 80054d2:	d86b      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d060      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d867      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d05c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d05a      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x15a>
 80054e4:	e062      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	f000 f993 	bl	8005820 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	609a      	str	r2, [r3, #8]
      break;
 8005512:	e04f      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005524:	f000 f97c 	bl	8005820 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005536:	609a      	str	r2, [r3, #8]
      break;
 8005538:	e03c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005546:	461a      	mov	r2, r3
 8005548:	f000 f8f0 	bl	800572c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2150      	movs	r1, #80	@ 0x50
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f949 	bl	80057ea <TIM_ITRx_SetConfig>
      break;
 8005558:	e02c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f90f 	bl	800578a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2160      	movs	r1, #96	@ 0x60
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f939 	bl	80057ea <TIM_ITRx_SetConfig>
      break;
 8005578:	e01c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f8d0 	bl	800572c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2140      	movs	r1, #64	@ 0x40
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f929 	bl	80057ea <TIM_ITRx_SetConfig>
      break;
 8005598:	e00c      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 f920 	bl	80057ea <TIM_ITRx_SetConfig>
      break;
 80055aa:	e003      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      break;
 80055b0:	e000      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <TIM_Base_SetConfig+0xf0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a34      	ldr	r2, [pc, #208]	@ (8005714 <TIM_Base_SetConfig+0xf4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a33      	ldr	r2, [pc, #204]	@ (8005718 <TIM_Base_SetConfig+0xf8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a32      	ldr	r2, [pc, #200]	@ (800571c <TIM_Base_SetConfig+0xfc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a28      	ldr	r2, [pc, #160]	@ (8005710 <TIM_Base_SetConfig+0xf0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a25      	ldr	r2, [pc, #148]	@ (8005714 <TIM_Base_SetConfig+0xf4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a24      	ldr	r2, [pc, #144]	@ (8005718 <TIM_Base_SetConfig+0xf8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a23      	ldr	r2, [pc, #140]	@ (800571c <TIM_Base_SetConfig+0xfc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a22      	ldr	r2, [pc, #136]	@ (8005720 <TIM_Base_SetConfig+0x100>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <TIM_Base_SetConfig+0x104>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a20      	ldr	r2, [pc, #128]	@ (8005728 <TIM_Base_SetConfig+0x108>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005710 <TIM_Base_SetConfig+0xf0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d103      	bne.n	80056ea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	601a      	str	r2, [r3, #0]
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010000 	.word	0x40010000
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800
 800571c:	40000c00 	.word	0x40000c00
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400
 8005728:	40014800 	.word	0x40014800

0800572c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 030a 	bic.w	r3, r3, #10
 8005768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578a:	b480      	push	{r7}
 800578c:	b087      	sub	sp, #28
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f023 0210 	bic.w	r2, r3, #16
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	031b      	lsls	r3, r3, #12
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	f043 0307 	orr.w	r3, r3, #7
 800580c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800583a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	431a      	orrs	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4313      	orrs	r3, r2
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005874:	2302      	movs	r3, #2
 8005876:	e050      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a18      	ldr	r2, [pc, #96]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40014000 	.word	0x40014000

0800593c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e042      	b.n	80059fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fd fb3e 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2224      	movs	r2, #36	@ 0x24
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fdd3 	bl	8006554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	@ 0x28
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d175      	bne.n	8005b10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_UART_Transmit+0x2c>
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e06e      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2221      	movs	r2, #33	@ 0x21
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a42:	f7fd fd3f 	bl	80034c4 <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5c:	d108      	bne.n	8005a70 <HAL_UART_Transmit+0x6c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e003      	b.n	8005a78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a78:	e02e      	b.n	8005ad8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fb37 	bl	80060f8 <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e03a      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	e007      	b.n	8005aca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1cb      	bne.n	8005a7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2140      	movs	r1, #64	@ 0x40
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fb03 	bl	80060f8 <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e006      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d112      	bne.n	8005b5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_UART_Receive_IT+0x26>
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e00b      	b.n	8005b5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fb2a 	bl	80061aa <UART_Start_Receive_IT>
 8005b56:	4603      	mov	r3, r0
 8005b58:	e000      	b.n	8005b5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b0ba      	sub	sp, #232	@ 0xe8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_UART_IRQHandler+0x66>
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fc07 	bl	80063d6 <UART_Receive_IT>
      return;
 8005bc8:	e273      	b.n	80060b2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80de 	beq.w	8005d90 <HAL_UART_IRQHandler+0x22c>
 8005bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80d1 	beq.w	8005d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0xae>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_UART_IRQHandler+0xd2>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f043 0202 	orr.w	r2, r3, #2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_UART_IRQHandler+0xf6>
 8005c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_UART_IRQHandler+0x126>
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f043 0208 	orr.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 820a 	beq.w	80060a8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x14e>
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fb92 	bl	80063d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b40      	cmp	r3, #64	@ 0x40
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <HAL_UART_IRQHandler+0x17a>
 8005cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d04f      	beq.n	8005d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa9d 	bl	800621e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cee:	2b40      	cmp	r3, #64	@ 0x40
 8005cf0:	d141      	bne.n	8005d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1d9      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d013      	beq.n	8005d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	4a8a      	ldr	r2, [pc, #552]	@ (8005f74 <HAL_UART_IRQHandler+0x410>)
 8005d4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fd fd67 	bl	8003826 <HAL_DMA_Abort_IT>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	e00e      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9ac 	bl	80060cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	e00a      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f9a8 	bl	80060cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	e006      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9a4 	bl	80060cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d8a:	e18d      	b.n	80060a8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	bf00      	nop
    return;
 8005d8e:	e18b      	b.n	80060a8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	f040 8167 	bne.w	8006068 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8160 	beq.w	8006068 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8159 	beq.w	8006068 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	f040 80ce 	bne.w	8005f78 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80a9 	beq.w	8005f44 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	f080 80a2 	bcs.w	8005f44 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e12:	f000 8088 	beq.w	8005f26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1d9      	bne.n	8005e16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e1      	bne.n	8005e62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3314      	adds	r3, #20
 8005ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ec2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e3      	bne.n	8005e9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e3      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fd fc10 	bl	8003746 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f8cf 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f42:	e0b3      	b.n	80060ac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	f040 80ad 	bne.w	80060ac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f5c:	f040 80a6 	bne.w	80060ac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8b7 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
      return;
 8005f72:	e09b      	b.n	80060ac <HAL_UART_IRQHandler+0x548>
 8005f74:	080062e5 	.word	0x080062e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 808e 	beq.w	80060b0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8089 	beq.w	80060b0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ffa:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	60fb      	str	r3, [r7, #12]
   return(result);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006040:	61fa      	str	r2, [r7, #28]
 8006042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	617b      	str	r3, [r7, #20]
   return(result);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e3      	bne.n	800601c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800605a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f83d 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006066:	e023      	b.n	80060b0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <HAL_UART_IRQHandler+0x524>
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f940 	bl	8006306 <UART_Transmit_IT>
    return;
 8006086:	e014      	b.n	80060b2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800608c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <HAL_UART_IRQHandler+0x54e>
 8006094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f980 	bl	80063a6 <UART_EndTransmit_IT>
    return;
 80060a6:	e004      	b.n	80060b2 <HAL_UART_IRQHandler+0x54e>
    return;
 80060a8:	bf00      	nop
 80060aa:	e002      	b.n	80060b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80060b0:	bf00      	nop
  }
}
 80060b2:	37e8      	adds	r7, #232	@ 0xe8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006108:	e03b      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d037      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006112:	f7fd f9d7 	bl	80034c4 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	429a      	cmp	r2, r3
 8006120:	d302      	bcc.n	8006128 <UART_WaitOnFlagUntilTimeout+0x30>
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e03a      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d023      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b80      	cmp	r3, #128	@ 0x80
 800613e:	d020      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b40      	cmp	r3, #64	@ 0x40
 8006144:	d01d      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b08      	cmp	r3, #8
 8006152:	d116      	bne.n	8006182 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f857 	bl	800621e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2208      	movs	r2, #8
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e00f      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d0b4      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4613      	mov	r3, r2
 80061b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2222      	movs	r2, #34	@ 0x22
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0220 	orr.w	r2, r2, #32
 800620e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800621e:	b480      	push	{r7}
 8006220:	b095      	sub	sp, #84	@ 0x54
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800623c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006246:	643a      	str	r2, [r7, #64]	@ 0x40
 8006248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800624c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e5      	bne.n	8006226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	61fb      	str	r3, [r7, #28]
   return(result);
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3314      	adds	r3, #20
 8006278:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800627a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800627c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1e5      	bne.n	800625a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	2b01      	cmp	r3, #1
 8006294:	d119      	bne.n	80062ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b6:	61ba      	str	r2, [r7, #24]
 80062b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6979      	ldr	r1, [r7, #20]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	613b      	str	r3, [r7, #16]
   return(result);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062d8:	bf00      	nop
 80062da:	3754      	adds	r7, #84	@ 0x54
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fee7 	bl	80060cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b21      	cmp	r3, #33	@ 0x21
 8006318:	d13e      	bne.n	8006398 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006322:	d114      	bne.n	800634e <UART_Transmit_IT+0x48>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d110      	bne.n	800634e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006340:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]
 800634c:	e008      	b.n	8006360 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6211      	str	r1, [r2, #32]
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4619      	mov	r1, r3
 800636e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006382:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006392:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fe76 	bl	80060b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08c      	sub	sp, #48	@ 0x30
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b22      	cmp	r3, #34	@ 0x22
 80063f0:	f040 80aa 	bne.w	8006548 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d115      	bne.n	800642a <UART_Receive_IT+0x54>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d111      	bne.n	800642a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006418:	b29a      	uxth	r2, r3
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	629a      	str	r2, [r3, #40]	@ 0x28
 8006428:	e024      	b.n	8006474 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006438:	d007      	beq.n	800644a <UART_Receive_IT+0x74>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <UART_Receive_IT+0x82>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e008      	b.n	800646a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29b      	uxth	r3, r3
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4619      	mov	r1, r3
 8006482:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006484:	2b00      	cmp	r3, #0
 8006486:	d15d      	bne.n	8006544 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0220 	bic.w	r2, r2, #32
 8006496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695a      	ldr	r2, [r3, #20]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d135      	bne.n	800653a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	613b      	str	r3, [r7, #16]
   return(result);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f4:	623a      	str	r2, [r7, #32]
 80064f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	61bb      	str	r3, [r7, #24]
   return(result);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e5      	bne.n	80064d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	2b10      	cmp	r3, #16
 8006514:	d10a      	bne.n	800652c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fdd4 	bl	80060e0 <HAL_UARTEx_RxEventCallback>
 8006538:	e002      	b.n	8006540 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb ffb0 	bl	80024a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e002      	b.n	800654a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3730      	adds	r7, #48	@ 0x30
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006558:	b0c0      	sub	sp, #256	@ 0x100
 800655a:	af00      	add	r7, sp, #0
 800655c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006570:	68d9      	ldr	r1, [r3, #12]
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	ea40 0301 	orr.w	r3, r0, r1
 800657c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	431a      	orrs	r2, r3
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	431a      	orrs	r2, r3
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065ac:	f021 010c 	bic.w	r1, r1, #12
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065ba:	430b      	orrs	r3, r1
 80065bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ce:	6999      	ldr	r1, [r3, #24]
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	ea40 0301 	orr.w	r3, r0, r1
 80065da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006820 <UART_SetConfig+0x2cc>)
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d005      	beq.n	80065f4 <UART_SetConfig+0xa0>
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006824 <UART_SetConfig+0x2d0>)
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d104      	bne.n	80065fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065f4:	f7fe f8a0 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 80065f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065fc:	e003      	b.n	8006606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065fe:	f7fe f887 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8006602:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006610:	f040 810c 	bne.w	800682c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006618:	2200      	movs	r2, #0
 800661a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800661e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006626:	4622      	mov	r2, r4
 8006628:	462b      	mov	r3, r5
 800662a:	1891      	adds	r1, r2, r2
 800662c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800662e:	415b      	adcs	r3, r3
 8006630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006636:	4621      	mov	r1, r4
 8006638:	eb12 0801 	adds.w	r8, r2, r1
 800663c:	4629      	mov	r1, r5
 800663e:	eb43 0901 	adc.w	r9, r3, r1
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800664e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006656:	4690      	mov	r8, r2
 8006658:	4699      	mov	r9, r3
 800665a:	4623      	mov	r3, r4
 800665c:	eb18 0303 	adds.w	r3, r8, r3
 8006660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006664:	462b      	mov	r3, r5
 8006666:	eb49 0303 	adc.w	r3, r9, r3
 800666a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800667a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800667e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006682:	460b      	mov	r3, r1
 8006684:	18db      	adds	r3, r3, r3
 8006686:	653b      	str	r3, [r7, #80]	@ 0x50
 8006688:	4613      	mov	r3, r2
 800668a:	eb42 0303 	adc.w	r3, r2, r3
 800668e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006698:	f7fa fb20 	bl	8000cdc <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4b61      	ldr	r3, [pc, #388]	@ (8006828 <UART_SetConfig+0x2d4>)
 80066a2:	fba3 2302 	umull	r2, r3, r3, r2
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	011c      	lsls	r4, r3, #4
 80066aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066bc:	4642      	mov	r2, r8
 80066be:	464b      	mov	r3, r9
 80066c0:	1891      	adds	r1, r2, r2
 80066c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066c4:	415b      	adcs	r3, r3
 80066c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066cc:	4641      	mov	r1, r8
 80066ce:	eb12 0a01 	adds.w	sl, r2, r1
 80066d2:	4649      	mov	r1, r9
 80066d4:	eb43 0b01 	adc.w	fp, r3, r1
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ec:	4692      	mov	sl, r2
 80066ee:	469b      	mov	fp, r3
 80066f0:	4643      	mov	r3, r8
 80066f2:	eb1a 0303 	adds.w	r3, sl, r3
 80066f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066fa:	464b      	mov	r3, r9
 80066fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006710:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006718:	460b      	mov	r3, r1
 800671a:	18db      	adds	r3, r3, r3
 800671c:	643b      	str	r3, [r7, #64]	@ 0x40
 800671e:	4613      	mov	r3, r2
 8006720:	eb42 0303 	adc.w	r3, r2, r3
 8006724:	647b      	str	r3, [r7, #68]	@ 0x44
 8006726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800672a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800672e:	f7fa fad5 	bl	8000cdc <__aeabi_uldivmod>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4611      	mov	r1, r2
 8006738:	4b3b      	ldr	r3, [pc, #236]	@ (8006828 <UART_SetConfig+0x2d4>)
 800673a:	fba3 2301 	umull	r2, r3, r3, r1
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	2264      	movs	r2, #100	@ 0x64
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	1acb      	subs	r3, r1, r3
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800674e:	4b36      	ldr	r3, [pc, #216]	@ (8006828 <UART_SetConfig+0x2d4>)
 8006750:	fba3 2302 	umull	r2, r3, r3, r2
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800675c:	441c      	add	r4, r3
 800675e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006762:	2200      	movs	r2, #0
 8006764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006768:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800676c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	1891      	adds	r1, r2, r2
 8006776:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006778:	415b      	adcs	r3, r3
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800677c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006780:	4641      	mov	r1, r8
 8006782:	1851      	adds	r1, r2, r1
 8006784:	6339      	str	r1, [r7, #48]	@ 0x30
 8006786:	4649      	mov	r1, r9
 8006788:	414b      	adcs	r3, r1
 800678a:	637b      	str	r3, [r7, #52]	@ 0x34
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006798:	4659      	mov	r1, fp
 800679a:	00cb      	lsls	r3, r1, #3
 800679c:	4651      	mov	r1, sl
 800679e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a2:	4651      	mov	r1, sl
 80067a4:	00ca      	lsls	r2, r1, #3
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	4642      	mov	r2, r8
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b4:	464b      	mov	r3, r9
 80067b6:	460a      	mov	r2, r1
 80067b8:	eb42 0303 	adc.w	r3, r2, r3
 80067bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067d4:	460b      	mov	r3, r1
 80067d6:	18db      	adds	r3, r3, r3
 80067d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067da:	4613      	mov	r3, r2
 80067dc:	eb42 0303 	adc.w	r3, r2, r3
 80067e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067ea:	f7fa fa77 	bl	8000cdc <__aeabi_uldivmod>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <UART_SetConfig+0x2d4>)
 80067f4:	fba3 1302 	umull	r1, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	2164      	movs	r1, #100	@ 0x64
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	3332      	adds	r3, #50	@ 0x32
 8006806:	4a08      	ldr	r2, [pc, #32]	@ (8006828 <UART_SetConfig+0x2d4>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	f003 0207 	and.w	r2, r3, #7
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4422      	add	r2, r4
 800681a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800681c:	e106      	b.n	8006a2c <UART_SetConfig+0x4d8>
 800681e:	bf00      	nop
 8006820:	40011000 	.word	0x40011000
 8006824:	40011400 	.word	0x40011400
 8006828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800682c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006830:	2200      	movs	r2, #0
 8006832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006836:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800683a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800683e:	4642      	mov	r2, r8
 8006840:	464b      	mov	r3, r9
 8006842:	1891      	adds	r1, r2, r2
 8006844:	6239      	str	r1, [r7, #32]
 8006846:	415b      	adcs	r3, r3
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
 800684a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800684e:	4641      	mov	r1, r8
 8006850:	1854      	adds	r4, r2, r1
 8006852:	4649      	mov	r1, r9
 8006854:	eb43 0501 	adc.w	r5, r3, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	00eb      	lsls	r3, r5, #3
 8006862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006866:	00e2      	lsls	r2, r4, #3
 8006868:	4614      	mov	r4, r2
 800686a:	461d      	mov	r5, r3
 800686c:	4643      	mov	r3, r8
 800686e:	18e3      	adds	r3, r4, r3
 8006870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006874:	464b      	mov	r3, r9
 8006876:	eb45 0303 	adc.w	r3, r5, r3
 800687a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800688a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800689a:	4629      	mov	r1, r5
 800689c:	008b      	lsls	r3, r1, #2
 800689e:	4621      	mov	r1, r4
 80068a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a4:	4621      	mov	r1, r4
 80068a6:	008a      	lsls	r2, r1, #2
 80068a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068ac:	f7fa fa16 	bl	8000cdc <__aeabi_uldivmod>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4b60      	ldr	r3, [pc, #384]	@ (8006a38 <UART_SetConfig+0x4e4>)
 80068b6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	011c      	lsls	r4, r3, #4
 80068be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	1891      	adds	r1, r2, r2
 80068d6:	61b9      	str	r1, [r7, #24]
 80068d8:	415b      	adcs	r3, r3
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068e0:	4641      	mov	r1, r8
 80068e2:	1851      	adds	r1, r2, r1
 80068e4:	6139      	str	r1, [r7, #16]
 80068e6:	4649      	mov	r1, r9
 80068e8:	414b      	adcs	r3, r1
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068f8:	4659      	mov	r1, fp
 80068fa:	00cb      	lsls	r3, r1, #3
 80068fc:	4651      	mov	r1, sl
 80068fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006902:	4651      	mov	r1, sl
 8006904:	00ca      	lsls	r2, r1, #3
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	4603      	mov	r3, r0
 800690c:	4642      	mov	r2, r8
 800690e:	189b      	adds	r3, r3, r2
 8006910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006914:	464b      	mov	r3, r9
 8006916:	460a      	mov	r2, r1
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800692a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006938:	4649      	mov	r1, r9
 800693a:	008b      	lsls	r3, r1, #2
 800693c:	4641      	mov	r1, r8
 800693e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006942:	4641      	mov	r1, r8
 8006944:	008a      	lsls	r2, r1, #2
 8006946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800694a:	f7fa f9c7 	bl	8000cdc <__aeabi_uldivmod>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4611      	mov	r1, r2
 8006954:	4b38      	ldr	r3, [pc, #224]	@ (8006a38 <UART_SetConfig+0x4e4>)
 8006956:	fba3 2301 	umull	r2, r3, r3, r1
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2264      	movs	r2, #100	@ 0x64
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	1acb      	subs	r3, r1, r3
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	3332      	adds	r3, #50	@ 0x32
 8006968:	4a33      	ldr	r2, [pc, #204]	@ (8006a38 <UART_SetConfig+0x4e4>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006974:	441c      	add	r4, r3
 8006976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800697a:	2200      	movs	r2, #0
 800697c:	673b      	str	r3, [r7, #112]	@ 0x70
 800697e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006980:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	1891      	adds	r1, r2, r2
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	415b      	adcs	r3, r3
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006994:	4641      	mov	r1, r8
 8006996:	1851      	adds	r1, r2, r1
 8006998:	6039      	str	r1, [r7, #0]
 800699a:	4649      	mov	r1, r9
 800699c:	414b      	adcs	r3, r1
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069ac:	4659      	mov	r1, fp
 80069ae:	00cb      	lsls	r3, r1, #3
 80069b0:	4651      	mov	r1, sl
 80069b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b6:	4651      	mov	r1, sl
 80069b8:	00ca      	lsls	r2, r1, #3
 80069ba:	4610      	mov	r0, r2
 80069bc:	4619      	mov	r1, r3
 80069be:	4603      	mov	r3, r0
 80069c0:	4642      	mov	r2, r8
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069c6:	464b      	mov	r3, r9
 80069c8:	460a      	mov	r2, r1
 80069ca:	eb42 0303 	adc.w	r3, r2, r3
 80069ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069da:	667a      	str	r2, [r7, #100]	@ 0x64
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069e8:	4649      	mov	r1, r9
 80069ea:	008b      	lsls	r3, r1, #2
 80069ec:	4641      	mov	r1, r8
 80069ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f2:	4641      	mov	r1, r8
 80069f4:	008a      	lsls	r2, r1, #2
 80069f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069fa:	f7fa f96f 	bl	8000cdc <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <UART_SetConfig+0x4e4>)
 8006a04:	fba3 1302 	umull	r1, r3, r3, r2
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	2164      	movs	r1, #100	@ 0x64
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	3332      	adds	r3, #50	@ 0x32
 8006a16:	4a08      	ldr	r2, [pc, #32]	@ (8006a38 <UART_SetConfig+0x4e4>)
 8006a18:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	f003 020f 	and.w	r2, r3, #15
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4422      	add	r2, r4
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a32:	46bd      	mov	sp, r7
 8006a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a38:	51eb851f 	.word	0x51eb851f

08006a3c <__NVIC_SetPriority>:
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	6039      	str	r1, [r7, #0]
 8006a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	db0a      	blt.n	8006a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	490c      	ldr	r1, [pc, #48]	@ (8006a88 <__NVIC_SetPriority+0x4c>)
 8006a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5a:	0112      	lsls	r2, r2, #4
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	440b      	add	r3, r1
 8006a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a64:	e00a      	b.n	8006a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	4908      	ldr	r1, [pc, #32]	@ (8006a8c <__NVIC_SetPriority+0x50>)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	3b04      	subs	r3, #4
 8006a74:	0112      	lsls	r2, r2, #4
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	440b      	add	r3, r1
 8006a7a:	761a      	strb	r2, [r3, #24]
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	e000e100 	.word	0xe000e100
 8006a8c:	e000ed00 	.word	0xe000ed00

08006a90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a94:	2100      	movs	r1, #0
 8006a96:	f06f 0004 	mvn.w	r0, #4
 8006a9a:	f7ff ffcf 	bl	8006a3c <__NVIC_SetPriority>
#endif
}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aaa:	f3ef 8305 	mrs	r3, IPSR
 8006aae:	603b      	str	r3, [r7, #0]
  return(result);
 8006ab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ab6:	f06f 0305 	mvn.w	r3, #5
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	e00c      	b.n	8006ad8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006abe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <osKernelInitialize+0x44>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ac6:	4b08      	ldr	r3, [pc, #32]	@ (8006ae8 <osKernelInitialize+0x44>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	e002      	b.n	8006ad8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ad8:	687b      	ldr	r3, [r7, #4]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	2000244c 	.word	0x2000244c

08006aec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af2:	f3ef 8305 	mrs	r3, IPSR
 8006af6:	603b      	str	r3, [r7, #0]
  return(result);
 8006af8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006afe:	f06f 0305 	mvn.w	r3, #5
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	e010      	b.n	8006b28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <osKernelStart+0x48>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d109      	bne.n	8006b22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b0e:	f7ff ffbf 	bl	8006a90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b12:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <osKernelStart+0x48>)
 8006b14:	2202      	movs	r2, #2
 8006b16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b18:	f001 fc24 	bl	8008364 <vTaskStartScheduler>
      stat = osOK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	e002      	b.n	8006b28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295
 8006b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b28:	687b      	ldr	r3, [r7, #4]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	2000244c 	.word	0x2000244c

08006b38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08e      	sub	sp, #56	@ 0x38
 8006b3c:	af04      	add	r7, sp, #16
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b48:	f3ef 8305 	mrs	r3, IPSR
 8006b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d17e      	bne.n	8006c52 <osThreadNew+0x11a>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d07b      	beq.n	8006c52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b5a:	2380      	movs	r3, #128	@ 0x80
 8006b5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b5e:	2318      	movs	r3, #24
 8006b60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d045      	beq.n	8006bfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <osThreadNew+0x48>
        name = attr->name;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <osThreadNew+0x6e>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b38      	cmp	r3, #56	@ 0x38
 8006b98:	d805      	bhi.n	8006ba6 <osThreadNew+0x6e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <osThreadNew+0x72>
        return (NULL);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e054      	b.n	8006c54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	089b      	lsrs	r3, r3, #2
 8006bb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <osThreadNew+0xa8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b5b      	cmp	r3, #91	@ 0x5b
 8006bc8:	d90a      	bls.n	8006be0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <osThreadNew+0xa8>
        mem = 1;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e010      	b.n	8006c02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10c      	bne.n	8006c02 <osThreadNew+0xca>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <osThreadNew+0xca>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <osThreadNew+0xca>
          mem = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	e001      	b.n	8006c02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d110      	bne.n	8006c2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c10:	9202      	str	r2, [sp, #8]
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 f944 	bl	8007eac <xTaskCreateStatic>
 8006c24:	4603      	mov	r3, r0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	e013      	b.n	8006c52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d110      	bne.n	8006c52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	f107 0310 	add.w	r3, r7, #16
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f001 f992 	bl	8007f6c <xTaskCreate>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <osThreadNew+0x11a>
            hTask = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c52:	693b      	ldr	r3, [r7, #16]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3728      	adds	r7, #40	@ 0x28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c64:	f3ef 8305 	mrs	r3, IPSR
 8006c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <osDelay+0x1c>
    stat = osErrorISR;
 8006c70:	f06f 0305 	mvn.w	r3, #5
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	e007      	b.n	8006c88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fb38 	bl	80082f8 <vTaskDelay>
    }
  }

  return (stat);
 8006c88:	68fb      	ldr	r3, [r7, #12]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b088      	sub	sp, #32
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9e:	f3ef 8305 	mrs	r3, IPSR
 8006ca2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ca4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d174      	bne.n	8006d94 <osMutexNew+0x102>
    if (attr != NULL) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e001      	b.n	8006cbc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <osMutexNew+0x3a>
      rmtx = 1U;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	e001      	b.n	8006cd0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d15c      	bne.n	8006d94 <osMutexNew+0x102>
      mem = -1;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295
 8006cde:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d015      	beq.n	8006d12 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d006      	beq.n	8006cfc <osMutexNew+0x6a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2b4f      	cmp	r3, #79	@ 0x4f
 8006cf4:	d902      	bls.n	8006cfc <osMutexNew+0x6a>
          mem = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	e00c      	b.n	8006d16 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d108      	bne.n	8006d16 <osMutexNew+0x84>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <osMutexNew+0x84>
            mem = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	e001      	b.n	8006d16 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d112      	bne.n	8006d42 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4619      	mov	r1, r3
 8006d28:	2004      	movs	r0, #4
 8006d2a:	f000 fb20 	bl	800736e <xQueueCreateMutexStatic>
 8006d2e:	61f8      	str	r0, [r7, #28]
 8006d30:	e016      	b.n	8006d60 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	4619      	mov	r1, r3
 8006d38:	2001      	movs	r0, #1
 8006d3a:	f000 fb18 	bl	800736e <xQueueCreateMutexStatic>
 8006d3e:	61f8      	str	r0, [r7, #28]
 8006d40:	e00e      	b.n	8006d60 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d004      	beq.n	8006d58 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006d4e:	2004      	movs	r0, #4
 8006d50:	f000 faf5 	bl	800733e <xQueueCreateMutex>
 8006d54:	61f8      	str	r0, [r7, #28]
 8006d56:	e003      	b.n	8006d60 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f000 faf0 	bl	800733e <xQueueCreateMutex>
 8006d5e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <osMutexNew+0xee>
        if (attr != NULL) {
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <osMutexNew+0xe2>
          name = attr->name;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e001      	b.n	8006d78 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006d78:	68f9      	ldr	r1, [r7, #12]
 8006d7a:	69f8      	ldr	r0, [r7, #28]
 8006d7c:	f001 f838 	bl	8007df0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d006      	beq.n	8006d94 <osMutexNew+0x102>
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006d94:	69fb      	ldr	r3, [r7, #28]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dbc:	f3ef 8305 	mrs	r3, IPSR
 8006dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dc2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006dc8:	f06f 0305 	mvn.w	r3, #5
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e02c      	b.n	8006e2a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006dd6:	f06f 0303 	mvn.w	r3, #3
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e025      	b.n	8006e2a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d011      	beq.n	8006e08 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6938      	ldr	r0, [r7, #16]
 8006de8:	f000 fb11 	bl	800740e <xQueueTakeMutexRecursive>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d01b      	beq.n	8006e2a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006df8:	f06f 0301 	mvn.w	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	e014      	b.n	8006e2a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006e00:	f06f 0302 	mvn.w	r3, #2
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	e010      	b.n	8006e2a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6938      	ldr	r0, [r7, #16]
 8006e0c:	f000 fdb8 	bl	8007980 <xQueueSemaphoreTake>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d009      	beq.n	8006e2a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006e1c:	f06f 0301 	mvn.w	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	e002      	b.n	8006e2a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006e24:	f06f 0302 	mvn.w	r3, #2
 8006e28:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006e2a:	697b      	ldr	r3, [r7, #20]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f023 0301 	bic.w	r3, r3, #1
 8006e42:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e50:	f3ef 8305 	mrs	r3, IPSR
 8006e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e56:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006e5c:	f06f 0305 	mvn.w	r3, #5
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e01f      	b.n	8006ea4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006e6a:	f06f 0303 	mvn.w	r3, #3
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	e018      	b.n	8006ea4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006e78:	6938      	ldr	r0, [r7, #16]
 8006e7a:	f000 fa93 	bl	80073a4 <xQueueGiveMutexRecursive>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d00f      	beq.n	8006ea4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e84:	f06f 0302 	mvn.w	r3, #2
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e00b      	b.n	8006ea4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2100      	movs	r1, #0
 8006e92:	6938      	ldr	r0, [r7, #16]
 8006e94:	f000 faf2 	bl	800747c <xQueueGenericSend>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d002      	beq.n	8006ea4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e9e:	f06f 0302 	mvn.w	r3, #2
 8006ea2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ea4:	697b      	ldr	r3, [r7, #20]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a07      	ldr	r2, [pc, #28]	@ (8006edc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4a06      	ldr	r2, [pc, #24]	@ (8006ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8006ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2280      	movs	r2, #128	@ 0x80
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20002450 	.word	0x20002450
 8006ee0:	200024ac 	.word	0x200024ac

08006ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a07      	ldr	r2, [pc, #28]	@ (8006f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4a06      	ldr	r2, [pc, #24]	@ (8006f14 <vApplicationGetTimerTaskMemory+0x30>)
 8006efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	200026ac 	.word	0x200026ac
 8006f14:	20002708 	.word	0x20002708

08006f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f103 0208 	add.w	r2, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 0208 	add.w	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f103 0208 	add.w	r2, r3, #8
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d103      	bne.n	8006fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e00c      	b.n	8006ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e002      	b.n	8006fe8 <vListInsert+0x2e>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d2f6      	bcs.n	8006fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6892      	ldr	r2, [r2, #8]
 8007042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6852      	ldr	r2, [r2, #4]
 800704c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d103      	bne.n	8007060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070ac:	f002 fc24 	bl	80098f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070dc:	3b01      	subs	r3, #1
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	441a      	add	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	22ff      	movs	r2, #255	@ 0xff
 80070f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	22ff      	movs	r2, #255	@ 0xff
 80070f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d114      	bne.n	800712c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01a      	beq.n	8007140 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3310      	adds	r3, #16
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fbb6 	bl	8008880 <xTaskRemoveFromEventList>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d012      	beq.n	8007140 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800711a:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <xQueueGenericReset+0xd0>)
 800711c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	e009      	b.n	8007140 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3310      	adds	r3, #16
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff fef1 	bl	8006f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3324      	adds	r3, #36	@ 0x24
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff feec 	bl	8006f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007140:	f002 fc0c 	bl	800995c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007144:	2301      	movs	r3, #1
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	@ 0x38
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <xQueueGenericCreateStatic+0x56>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <xQueueGenericCreateStatic+0x5a>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <xQueueGenericCreateStatic+0x5c>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	623b      	str	r3, [r7, #32]
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <xQueueGenericCreateStatic+0x84>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <xQueueGenericCreateStatic+0x88>
 80071d8:	2301      	movs	r3, #1
 80071da:	e000      	b.n	80071de <xQueueGenericCreateStatic+0x8a>
 80071dc:	2300      	movs	r3, #0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	61fb      	str	r3, [r7, #28]
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071fa:	2350      	movs	r3, #80	@ 0x50
 80071fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b50      	cmp	r3, #80	@ 0x50
 8007202:	d00b      	beq.n	800721c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	61bb      	str	r3, [r7, #24]
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	e7fd      	b.n	8007218 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800721c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00d      	beq.n	8007244 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007230:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f840 	bl	80072c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007246:	4618      	mov	r0, r3
 8007248:	3730      	adds	r7, #48	@ 0x30
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800724e:	b580      	push	{r7, lr}
 8007250:	b08a      	sub	sp, #40	@ 0x28
 8007252:	af02      	add	r7, sp, #8
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	4613      	mov	r3, r2
 800725a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	613b      	str	r3, [r7, #16]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3350      	adds	r3, #80	@ 0x50
 8007288:	4618      	mov	r0, r3
 800728a:	f002 fc57 	bl	8009b3c <pvPortMalloc>
 800728e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d011      	beq.n	80072ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3350      	adds	r3, #80	@ 0x50
 800729e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072a8:	79fa      	ldrb	r2, [r7, #7]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f805 	bl	80072c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ba:	69bb      	ldr	r3, [r7, #24]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d103      	bne.n	80072e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e002      	b.n	80072e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072f2:	2101      	movs	r1, #1
 80072f4:	69b8      	ldr	r0, [r7, #24]
 80072f6:	f7ff fec3 	bl	8007080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800732a:	2300      	movs	r3, #0
 800732c:	2200      	movs	r2, #0
 800732e:	2100      	movs	r1, #0
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8a3 	bl	800747c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	4603      	mov	r3, r0
 8007346:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007348:	2301      	movs	r3, #1
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	461a      	mov	r2, r3
 8007354:	6939      	ldr	r1, [r7, #16]
 8007356:	6978      	ldr	r0, [r7, #20]
 8007358:	f7ff ff79 	bl	800724e <xQueueGenericCreate>
 800735c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff ffd3 	bl	800730a <prvInitialiseMutex>

		return xNewQueue;
 8007364:	68fb      	ldr	r3, [r7, #12]
	}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800736e:	b580      	push	{r7, lr}
 8007370:	b088      	sub	sp, #32
 8007372:	af02      	add	r7, sp, #8
 8007374:	4603      	mov	r3, r0
 8007376:	6039      	str	r1, [r7, #0]
 8007378:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800737a:	2301      	movs	r3, #1
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2200      	movs	r2, #0
 800738a:	6939      	ldr	r1, [r7, #16]
 800738c:	6978      	ldr	r0, [r7, #20]
 800738e:	f7ff fee1 	bl	8007154 <xQueueGenericCreateStatic>
 8007392:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff ffb8 	bl	800730a <prvInitialiseMutex>

		return xNewQueue;
 800739a:	68fb      	ldr	r3, [r7, #12]
	}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60fb      	str	r3, [r7, #12]
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	e7fd      	b.n	80073ca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	689c      	ldr	r4, [r3, #8]
 80073d2:	f001 fc15 	bl	8008c00 <xTaskGetCurrentTaskHandle>
 80073d6:	4603      	mov	r3, r0
 80073d8:	429c      	cmp	r4, r3
 80073da:	d111      	bne.n	8007400 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80073ee:	2300      	movs	r3, #0
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	6938      	ldr	r0, [r7, #16]
 80073f6:	f000 f841 	bl	800747c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80073fa:	2301      	movs	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	e001      	b.n	8007404 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007400:	2300      	movs	r3, #0
 8007402:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007404:	697b      	ldr	r3, [r7, #20]
	}
 8007406:	4618      	mov	r0, r3
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	bd90      	pop	{r4, r7, pc}

0800740e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800740e:	b590      	push	{r4, r7, lr}
 8007410:	b087      	sub	sp, #28
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	60fb      	str	r3, [r7, #12]
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	e7fd      	b.n	8007436 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	689c      	ldr	r4, [r3, #8]
 800743e:	f001 fbdf 	bl	8008c00 <xTaskGetCurrentTaskHandle>
 8007442:	4603      	mov	r3, r0
 8007444:	429c      	cmp	r4, r3
 8007446:	d107      	bne.n	8007458 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007452:	2301      	movs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e00c      	b.n	8007472 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6938      	ldr	r0, [r7, #16]
 800745c:	f000 fa90 	bl	8007980 <xQueueSemaphoreTake>
 8007460:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007472:	697b      	ldr	r3, [r7, #20]
	}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	bd90      	pop	{r4, r7, pc}

0800747c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08e      	sub	sp, #56	@ 0x38
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800748a:	2300      	movs	r3, #0
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <xQueueGenericSend+0x34>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <xQueueGenericSend+0x42>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <xQueueGenericSend+0x46>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <xQueueGenericSend+0x48>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <xQueueGenericSend+0x64>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d103      	bne.n	80074ee <xQueueGenericSend+0x72>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <xQueueGenericSend+0x76>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueGenericSend+0x78>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <xQueueGenericSend+0x94>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	623b      	str	r3, [r7, #32]
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007510:	f001 fb86 	bl	8008c20 <xTaskGetSchedulerState>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d102      	bne.n	8007520 <xQueueGenericSend+0xa4>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <xQueueGenericSend+0xa8>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <xQueueGenericSend+0xaa>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <xQueueGenericSend+0xc6>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	61fb      	str	r3, [r7, #28]
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007542:	f002 f9d9 	bl	80098f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754e:	429a      	cmp	r2, r3
 8007550:	d302      	bcc.n	8007558 <xQueueGenericSend+0xdc>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d129      	bne.n	80075ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800755e:	f000 fb37 	bl	8007bd0 <prvCopyDataToQueue>
 8007562:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	3324      	adds	r3, #36	@ 0x24
 8007570:	4618      	mov	r0, r3
 8007572:	f001 f985 	bl	8008880 <xTaskRemoveFromEventList>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d013      	beq.n	80075a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800757c:	4b3f      	ldr	r3, [pc, #252]	@ (800767c <xQueueGenericSend+0x200>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	e00a      	b.n	80075a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800758e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007594:	4b39      	ldr	r3, [pc, #228]	@ (800767c <xQueueGenericSend+0x200>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075a4:	f002 f9da 	bl	800995c <vPortExitCritical>
				return pdPASS;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e063      	b.n	8007674 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075b2:	f002 f9d3 	bl	800995c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e05c      	b.n	8007674 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d106      	bne.n	80075ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 f9bf 	bl	8008948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075ce:	f002 f9c5 	bl	800995c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075d2:	f000 ff2f 	bl	8008434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075d6:	f002 f98f 	bl	80098f8 <vPortEnterCritical>
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075e0:	b25b      	sxtb	r3, r3
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e6:	d103      	bne.n	80075f0 <xQueueGenericSend+0x174>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d103      	bne.n	8007606 <xQueueGenericSend+0x18a>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007606:	f002 f9a9 	bl	800995c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800760a:	1d3a      	adds	r2, r7, #4
 800760c:	f107 0314 	add.w	r3, r7, #20
 8007610:	4611      	mov	r1, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f001 f9ae 	bl	8008974 <xTaskCheckForTimeOut>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d124      	bne.n	8007668 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800761e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007620:	f000 fbce 	bl	8007dc0 <prvIsQueueFull>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d018      	beq.n	800765c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	3310      	adds	r3, #16
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f8d2 	bl	80087dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800763a:	f000 fb59 	bl	8007cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800763e:	f000 ff07 	bl	8008450 <xTaskResumeAll>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	f47f af7c 	bne.w	8007542 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800764a:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <xQueueGenericSend+0x200>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	e772      	b.n	8007542 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800765c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800765e:	f000 fb47 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007662:	f000 fef5 	bl	8008450 <xTaskResumeAll>
 8007666:	e76c      	b.n	8007542 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800766a:	f000 fb41 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800766e:	f000 feef 	bl	8008450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007674:	4618      	mov	r0, r3
 8007676:	3738      	adds	r7, #56	@ 0x38
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b090      	sub	sp, #64	@ 0x40
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <xQueueGenericSendFromISR+0x3e>
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <xQueueGenericSendFromISR+0x42>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <xQueueGenericSendFromISR+0x44>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d103      	bne.n	80076ee <xQueueGenericSendFromISR+0x6e>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <xQueueGenericSendFromISR+0x72>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <xQueueGenericSendFromISR+0x74>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	623b      	str	r3, [r7, #32]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007710:	f002 f9d2 	bl	8009ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007714:	f3ef 8211 	mrs	r2, BASEPRI
 8007718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	61fa      	str	r2, [r7, #28]
 800772a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800772c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	429a      	cmp	r2, r3
 800773a:	d302      	bcc.n	8007742 <xQueueGenericSendFromISR+0xc2>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d12f      	bne.n	80077a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007758:	f000 fa3a 	bl	8007bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800775c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d112      	bne.n	800778c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d016      	beq.n	800779c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	3324      	adds	r3, #36	@ 0x24
 8007772:	4618      	mov	r0, r3
 8007774:	f001 f884 	bl	8008880 <xTaskRemoveFromEventList>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00e      	beq.n	800779c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e007      	b.n	800779c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800778c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007790:	3301      	adds	r3, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	b25a      	sxtb	r2, r3
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800779c:	2301      	movs	r3, #1
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077a0:	e001      	b.n	80077a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3740      	adds	r7, #64	@ 0x40
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08c      	sub	sp, #48	@ 0x30
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <xQueueReceive+0x32>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	623b      	str	r3, [r7, #32]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <xQueueReceive+0x40>
 80077f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <xQueueReceive+0x44>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <xQueueReceive+0x46>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <xQueueReceive+0x62>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	61fb      	str	r3, [r7, #28]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800781e:	f001 f9ff 	bl	8008c20 <xTaskGetSchedulerState>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <xQueueReceive+0x72>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <xQueueReceive+0x76>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <xQueueReceive+0x78>
 8007832:	2300      	movs	r3, #0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10b      	bne.n	8007850 <xQueueReceive+0x94>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	61bb      	str	r3, [r7, #24]
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	e7fd      	b.n	800784c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007850:	f002 f852 	bl	80098f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01f      	beq.n	80078a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007864:	f000 fa1e 	bl	8007ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	1e5a      	subs	r2, r3, #1
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00f      	beq.n	8007898 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787a:	3310      	adds	r3, #16
 800787c:	4618      	mov	r0, r3
 800787e:	f000 ffff 	bl	8008880 <xTaskRemoveFromEventList>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d007      	beq.n	8007898 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007888:	4b3c      	ldr	r3, [pc, #240]	@ (800797c <xQueueReceive+0x1c0>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007898:	f002 f860 	bl	800995c <vPortExitCritical>
				return pdPASS;
 800789c:	2301      	movs	r3, #1
 800789e:	e069      	b.n	8007974 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078a6:	f002 f859 	bl	800995c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e062      	b.n	8007974 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078b4:	f107 0310 	add.w	r3, r7, #16
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 f845 	bl	8008948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078be:	2301      	movs	r3, #1
 80078c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078c2:	f002 f84b 	bl	800995c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078c6:	f000 fdb5 	bl	8008434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078ca:	f002 f815 	bl	80098f8 <vPortEnterCritical>
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078d4:	b25b      	sxtb	r3, r3
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	d103      	bne.n	80078e4 <xQueueReceive+0x128>
 80078dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078ea:	b25b      	sxtb	r3, r3
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f0:	d103      	bne.n	80078fa <xQueueReceive+0x13e>
 80078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078fa:	f002 f82f 	bl	800995c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078fe:	1d3a      	adds	r2, r7, #4
 8007900:	f107 0310 	add.w	r3, r7, #16
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f001 f834 	bl	8008974 <xTaskCheckForTimeOut>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d123      	bne.n	800795a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007914:	f000 fa3e 	bl	8007d94 <prvIsQueueEmpty>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d017      	beq.n	800794e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	3324      	adds	r3, #36	@ 0x24
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f000 ff58 	bl	80087dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800792c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800792e:	f000 f9df 	bl	8007cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007932:	f000 fd8d 	bl	8008450 <xTaskResumeAll>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d189      	bne.n	8007850 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800793c:	4b0f      	ldr	r3, [pc, #60]	@ (800797c <xQueueReceive+0x1c0>)
 800793e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	e780      	b.n	8007850 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800794e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007950:	f000 f9ce 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007954:	f000 fd7c 	bl	8008450 <xTaskResumeAll>
 8007958:	e77a      	b.n	8007850 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800795a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800795c:	f000 f9c8 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007960:	f000 fd76 	bl	8008450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007966:	f000 fa15 	bl	8007d94 <prvIsQueueEmpty>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	f43f af6f 	beq.w	8007850 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007972:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007974:	4618      	mov	r0, r3
 8007976:	3730      	adds	r7, #48	@ 0x30
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	e000ed04 	.word	0xe000ed04

08007980 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08e      	sub	sp, #56	@ 0x38
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10b      	bne.n	80079b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	623b      	str	r3, [r7, #32]
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	61fb      	str	r3, [r7, #28]
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	e7fd      	b.n	80079d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079d4:	f001 f924 	bl	8008c20 <xTaskGetSchedulerState>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <xQueueSemaphoreTake+0x64>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <xQueueSemaphoreTake+0x68>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <xQueueSemaphoreTake+0x6a>
 80079e8:	2300      	movs	r3, #0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	61bb      	str	r3, [r7, #24]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a06:	f001 ff77 	bl	80098f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d024      	beq.n	8007a60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	1e5a      	subs	r2, r3, #1
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a26:	f001 fa75 	bl	8008f14 <pvTaskIncrementMutexHeldCount>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00f      	beq.n	8007a58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 ff1f 	bl	8008880 <xTaskRemoveFromEventList>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a48:	4b54      	ldr	r3, [pc, #336]	@ (8007b9c <xQueueSemaphoreTake+0x21c>)
 8007a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a58:	f001 ff80 	bl	800995c <vPortExitCritical>
				return pdPASS;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e098      	b.n	8007b92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d112      	bne.n	8007a8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	617b      	str	r3, [r7, #20]
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	e7fd      	b.n	8007a80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a84:	f001 ff6a 	bl	800995c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	e082      	b.n	8007b92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a92:	f107 030c 	add.w	r3, r7, #12
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 ff56 	bl	8008948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aa0:	f001 ff5c 	bl	800995c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aa4:	f000 fcc6 	bl	8008434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aa8:	f001 ff26 	bl	80098f8 <vPortEnterCritical>
 8007aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ab2:	b25b      	sxtb	r3, r3
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d103      	bne.n	8007ac2 <xQueueSemaphoreTake+0x142>
 8007aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ac8:	b25b      	sxtb	r3, r3
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d103      	bne.n	8007ad8 <xQueueSemaphoreTake+0x158>
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ad8:	f001 ff40 	bl	800995c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007adc:	463a      	mov	r2, r7
 8007ade:	f107 030c 	add.w	r3, r7, #12
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 ff45 	bl	8008974 <xTaskCheckForTimeOut>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d132      	bne.n	8007b56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007af0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007af2:	f000 f94f 	bl	8007d94 <prvIsQueueEmpty>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d026      	beq.n	8007b4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d109      	bne.n	8007b18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007b04:	f001 fef8 	bl	80098f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f8a5 	bl	8008c5c <xTaskPriorityInherit>
 8007b12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007b14:	f001 ff22 	bl	800995c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1a:	3324      	adds	r3, #36	@ 0x24
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fe5b 	bl	80087dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b28:	f000 f8e2 	bl	8007cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b2c:	f000 fc90 	bl	8008450 <xTaskResumeAll>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f47f af67 	bne.w	8007a06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007b38:	4b18      	ldr	r3, [pc, #96]	@ (8007b9c <xQueueSemaphoreTake+0x21c>)
 8007b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	e75d      	b.n	8007a06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b4c:	f000 f8d0 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b50:	f000 fc7e 	bl	8008450 <xTaskResumeAll>
 8007b54:	e757      	b.n	8007a06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b58:	f000 f8ca 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b5c:	f000 fc78 	bl	8008450 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b62:	f000 f917 	bl	8007d94 <prvIsQueueEmpty>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f43f af4c 	beq.w	8007a06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00d      	beq.n	8007b90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007b74:	f001 fec0 	bl	80098f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b7a:	f000 f811 	bl	8007ba0 <prvGetDisinheritPriorityAfterTimeout>
 8007b7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 f940 	bl	8008e0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b8c:	f001 fee6 	bl	800995c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3738      	adds	r7, #56	@ 0x38
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	e000ed04 	.word	0xe000ed04

08007ba0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d006      	beq.n	8007bbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	e001      	b.n	8007bc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d14d      	bne.n	8007c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 f896 	bl	8008d2c <xTaskPriorityDisinherit>
 8007c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	e043      	b.n	8007c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d119      	bne.n	8007c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6858      	ldr	r0, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	f004 fabf 	bl	800c19e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d32b      	bcc.n	8007c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e026      	b.n	8007c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68d8      	ldr	r0, [r3, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	f004 faa5 	bl	800c19e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	425b      	negs	r3, r3
 8007c5e:	441a      	add	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d207      	bcs.n	8007c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	425b      	negs	r3, r3
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d105      	bne.n	8007c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c9a:	697b      	ldr	r3, [r7, #20]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbe:	441a      	add	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d303      	bcc.n	8007cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68d9      	ldr	r1, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6838      	ldr	r0, [r7, #0]
 8007ce4:	f004 fa5b 	bl	800c19e <memcpy>
	}
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cf8:	f001 fdfe 	bl	80098f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d04:	e011      	b.n	8007d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d012      	beq.n	8007d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3324      	adds	r3, #36	@ 0x24
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fdb4 	bl	8008880 <xTaskRemoveFromEventList>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d1e:	f000 fe8d 	bl	8008a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dce9      	bgt.n	8007d06 <prvUnlockQueue+0x16>
 8007d32:	e000      	b.n	8007d36 <prvUnlockQueue+0x46>
					break;
 8007d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	22ff      	movs	r2, #255	@ 0xff
 8007d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d3e:	f001 fe0d 	bl	800995c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d42:	f001 fdd9 	bl	80098f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d4e:	e011      	b.n	8007d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d012      	beq.n	8007d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3310      	adds	r3, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fd8f 	bl	8008880 <xTaskRemoveFromEventList>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d68:	f000 fe68 	bl	8008a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dce9      	bgt.n	8007d50 <prvUnlockQueue+0x60>
 8007d7c:	e000      	b.n	8007d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	22ff      	movs	r2, #255	@ 0xff
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d88:	f001 fde8 	bl	800995c <vPortExitCritical>
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d9c:	f001 fdac 	bl	80098f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e001      	b.n	8007db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db2:	f001 fdd3 	bl	800995c <vPortExitCritical>

	return xReturn;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dc8:	f001 fd96 	bl	80098f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d102      	bne.n	8007dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e001      	b.n	8007de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007de2:	f001 fdbb 	bl	800995c <vPortExitCritical>

	return xReturn;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e014      	b.n	8007e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e00:	4a0f      	ldr	r2, [pc, #60]	@ (8007e40 <vQueueAddToRegistry+0x50>)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e0c:	490c      	ldr	r1, [pc, #48]	@ (8007e40 <vQueueAddToRegistry+0x50>)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e16:	4a0a      	ldr	r2, [pc, #40]	@ (8007e40 <vQueueAddToRegistry+0x50>)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e22:	e006      	b.n	8007e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b07      	cmp	r3, #7
 8007e2e:	d9e7      	bls.n	8007e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20002b08 	.word	0x20002b08

08007e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e54:	f001 fd50 	bl	80098f8 <vPortEnterCritical>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e5e:	b25b      	sxtb	r3, r3
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d103      	bne.n	8007e6e <vQueueWaitForMessageRestricted+0x2a>
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d103      	bne.n	8007e84 <vQueueWaitForMessageRestricted+0x40>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e84:	f001 fd6a 	bl	800995c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	3324      	adds	r3, #36	@ 0x24
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 fcc5 	bl	8008828 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e9e:	6978      	ldr	r0, [r7, #20]
 8007ea0:	f7ff ff26 	bl	8007cf0 <prvUnlockQueue>
	}
 8007ea4:	bf00      	nop
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	@ 0x38
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10b      	bne.n	8007ed8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	623b      	str	r3, [r7, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	61fb      	str	r3, [r7, #28]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ef6:	235c      	movs	r3, #92	@ 0x5c
 8007ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b5c      	cmp	r3, #92	@ 0x5c
 8007efe:	d00b      	beq.n	8007f18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	61bb      	str	r3, [r7, #24]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01e      	beq.n	8007f5e <xTaskCreateStatic+0xb2>
 8007f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01b      	beq.n	8007f5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9303      	str	r3, [sp, #12]
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	9302      	str	r3, [sp, #8]
 8007f40:	f107 0314 	add.w	r3, r7, #20
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f850 	bl	8007ff6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f58:	f000 f8de 	bl	8008118 <prvAddNewTaskToReadyList>
 8007f5c:	e001      	b.n	8007f62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f62:	697b      	ldr	r3, [r7, #20]
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3728      	adds	r7, #40	@ 0x28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08c      	sub	sp, #48	@ 0x30
 8007f70:	af04      	add	r7, sp, #16
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 fddb 	bl	8009b3c <pvPortMalloc>
 8007f86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00e      	beq.n	8007fac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f8e:	205c      	movs	r0, #92	@ 0x5c
 8007f90:	f001 fdd4 	bl	8009b3c <pvPortMalloc>
 8007f94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fa2:	e005      	b.n	8007fb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fa4:	6978      	ldr	r0, [r7, #20]
 8007fa6:	f001 fe97 	bl	8009cd8 <vPortFree>
 8007faa:	e001      	b.n	8007fb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d017      	beq.n	8007fe6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9303      	str	r3, [sp, #12]
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	9302      	str	r3, [sp, #8]
 8007fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f80e 	bl	8007ff6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fda:	69f8      	ldr	r0, [r7, #28]
 8007fdc:	f000 f89c 	bl	8008118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	e002      	b.n	8007fec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fec:	69bb      	ldr	r3, [r7, #24]
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3720      	adds	r7, #32
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b088      	sub	sp, #32
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	461a      	mov	r2, r3
 800800e:	21a5      	movs	r1, #165	@ 0xa5
 8008010:	f003 f8d2 	bl	800b1b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800801e:	3b01      	subs	r3, #1
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f023 0307 	bic.w	r3, r3, #7
 800802c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	617b      	str	r3, [r7, #20]
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	e7fd      	b.n	800804c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01f      	beq.n	8008096 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008056:	2300      	movs	r3, #0
 8008058:	61fb      	str	r3, [r7, #28]
 800805a:	e012      	b.n	8008082 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	7819      	ldrb	r1, [r3, #0]
 8008064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	3334      	adds	r3, #52	@ 0x34
 800806c:	460a      	mov	r2, r1
 800806e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	4413      	add	r3, r2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d006      	beq.n	800808a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	2b0f      	cmp	r3, #15
 8008086:	d9e9      	bls.n	800805c <prvInitialiseNewTask+0x66>
 8008088:	e000      	b.n	800808c <prvInitialiseNewTask+0x96>
			{
				break;
 800808a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008094:	e003      	b.n	800809e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	2b37      	cmp	r3, #55	@ 0x37
 80080a2:	d901      	bls.n	80080a8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080a4:	2337      	movs	r3, #55	@ 0x37
 80080a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080b2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	2200      	movs	r2, #0
 80080b8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe ff4a 	bl	8006f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c6:	3318      	adds	r3, #24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe ff45 	bl	8006f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	2200      	movs	r2, #0
 80080e8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	68f9      	ldr	r1, [r7, #12]
 80080f6:	69b8      	ldr	r0, [r7, #24]
 80080f8:	f001 face 	bl	8009698 <pxPortInitialiseStack>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800810c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800810e:	bf00      	nop
 8008110:	3720      	adds	r7, #32
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008120:	f001 fbea 	bl	80098f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008124:	4b2d      	ldr	r3, [pc, #180]	@ (80081dc <prvAddNewTaskToReadyList+0xc4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3301      	adds	r3, #1
 800812a:	4a2c      	ldr	r2, [pc, #176]	@ (80081dc <prvAddNewTaskToReadyList+0xc4>)
 800812c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800812e:	4b2c      	ldr	r3, [pc, #176]	@ (80081e0 <prvAddNewTaskToReadyList+0xc8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008136:	4a2a      	ldr	r2, [pc, #168]	@ (80081e0 <prvAddNewTaskToReadyList+0xc8>)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800813c:	4b27      	ldr	r3, [pc, #156]	@ (80081dc <prvAddNewTaskToReadyList+0xc4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d110      	bne.n	8008166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008144:	f000 fc9e 	bl	8008a84 <prvInitialiseTaskLists>
 8008148:	e00d      	b.n	8008166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800814a:	4b26      	ldr	r3, [pc, #152]	@ (80081e4 <prvAddNewTaskToReadyList+0xcc>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008152:	4b23      	ldr	r3, [pc, #140]	@ (80081e0 <prvAddNewTaskToReadyList+0xc8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	429a      	cmp	r2, r3
 800815e:	d802      	bhi.n	8008166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008160:	4a1f      	ldr	r2, [pc, #124]	@ (80081e0 <prvAddNewTaskToReadyList+0xc8>)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008166:	4b20      	ldr	r3, [pc, #128]	@ (80081e8 <prvAddNewTaskToReadyList+0xd0>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3301      	adds	r3, #1
 800816c:	4a1e      	ldr	r2, [pc, #120]	@ (80081e8 <prvAddNewTaskToReadyList+0xd0>)
 800816e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008170:	4b1d      	ldr	r3, [pc, #116]	@ (80081e8 <prvAddNewTaskToReadyList+0xd0>)
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817c:	4b1b      	ldr	r3, [pc, #108]	@ (80081ec <prvAddNewTaskToReadyList+0xd4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d903      	bls.n	800818c <prvAddNewTaskToReadyList+0x74>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4a18      	ldr	r2, [pc, #96]	@ (80081ec <prvAddNewTaskToReadyList+0xd4>)
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4a15      	ldr	r2, [pc, #84]	@ (80081f0 <prvAddNewTaskToReadyList+0xd8>)
 800819a:	441a      	add	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fe fee5 	bl	8006f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081a8:	f001 fbd8 	bl	800995c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ac:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <prvAddNewTaskToReadyList+0xcc>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081b4:	4b0a      	ldr	r3, [pc, #40]	@ (80081e0 <prvAddNewTaskToReadyList+0xc8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	429a      	cmp	r2, r3
 80081c0:	d207      	bcs.n	80081d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081c2:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <prvAddNewTaskToReadyList+0xdc>)
 80081c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	2000301c 	.word	0x2000301c
 80081e0:	20002b48 	.word	0x20002b48
 80081e4:	20003028 	.word	0x20003028
 80081e8:	20003038 	.word	0x20003038
 80081ec:	20003024 	.word	0x20003024
 80081f0:	20002b4c 	.word	0x20002b4c
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	@ 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008202:	2300      	movs	r3, #0
 8008204:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10b      	bne.n	8008224 <vTaskDelayUntil+0x2c>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	617b      	str	r3, [r7, #20]
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	e7fd      	b.n	8008220 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <vTaskDelayUntil+0x4a>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	613b      	str	r3, [r7, #16]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8008242:	4b2a      	ldr	r3, [pc, #168]	@ (80082ec <vTaskDelayUntil+0xf4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <vTaskDelayUntil+0x6a>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	60fb      	str	r3, [r7, #12]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8008262:	f000 f8e7 	bl	8008434 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008266:	4b22      	ldr	r3, [pc, #136]	@ (80082f0 <vTaskDelayUntil+0xf8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	4413      	add	r3, r2
 8008274:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6a3a      	ldr	r2, [r7, #32]
 800827c:	429a      	cmp	r2, r3
 800827e:	d20b      	bcs.n	8008298 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	429a      	cmp	r2, r3
 8008288:	d211      	bcs.n	80082ae <vTaskDelayUntil+0xb6>
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	429a      	cmp	r2, r3
 8008290:	d90d      	bls.n	80082ae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008292:	2301      	movs	r3, #1
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24
 8008296:	e00a      	b.n	80082ae <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d303      	bcc.n	80082aa <vTaskDelayUntil+0xb2>
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d901      	bls.n	80082ae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80082aa:	2301      	movs	r3, #1
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d006      	beq.n	80082c8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80082ba:	69fa      	ldr	r2, [r7, #28]
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fe3a 	bl	8008f3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80082c8:	f000 f8c2 	bl	8008450 <xTaskResumeAll>
 80082cc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d107      	bne.n	80082e4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80082d4:	4b07      	ldr	r3, [pc, #28]	@ (80082f4 <vTaskDelayUntil+0xfc>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082e4:	bf00      	nop
 80082e6:	3728      	adds	r7, #40	@ 0x28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20003044 	.word	0x20003044
 80082f0:	20003020 	.word	0x20003020
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d018      	beq.n	800833c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800830a:	4b14      	ldr	r3, [pc, #80]	@ (800835c <vTaskDelay+0x64>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <vTaskDelay+0x32>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60bb      	str	r3, [r7, #8]
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop
 8008328:	e7fd      	b.n	8008326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800832a:	f000 f883 	bl	8008434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fe03 	bl	8008f3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008336:	f000 f88b 	bl	8008450 <xTaskResumeAll>
 800833a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d107      	bne.n	8008352 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008342:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <vTaskDelay+0x68>)
 8008344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20003044 	.word	0x20003044
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	@ 0x28
 8008368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008372:	463a      	mov	r2, r7
 8008374:	1d39      	adds	r1, r7, #4
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fd98 	bl	8006eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	9202      	str	r2, [sp, #8]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	2300      	movs	r3, #0
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2300      	movs	r3, #0
 8008390:	460a      	mov	r2, r1
 8008392:	4922      	ldr	r1, [pc, #136]	@ (800841c <vTaskStartScheduler+0xb8>)
 8008394:	4822      	ldr	r0, [pc, #136]	@ (8008420 <vTaskStartScheduler+0xbc>)
 8008396:	f7ff fd89 	bl	8007eac <xTaskCreateStatic>
 800839a:	4603      	mov	r3, r0
 800839c:	4a21      	ldr	r2, [pc, #132]	@ (8008424 <vTaskStartScheduler+0xc0>)
 800839e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083a0:	4b20      	ldr	r3, [pc, #128]	@ (8008424 <vTaskStartScheduler+0xc0>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e001      	b.n	80083b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083b8:	f000 fe14 	bl	8008fe4 <xTimerCreateTimerTask>
 80083bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d116      	bne.n	80083f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	613b      	str	r3, [r7, #16]
}
 80083d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083d8:	4b13      	ldr	r3, [pc, #76]	@ (8008428 <vTaskStartScheduler+0xc4>)
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083e0:	4b12      	ldr	r3, [pc, #72]	@ (800842c <vTaskStartScheduler+0xc8>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083e6:	4b12      	ldr	r3, [pc, #72]	@ (8008430 <vTaskStartScheduler+0xcc>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083ec:	f001 f9e0 	bl	80097b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083f0:	e00f      	b.n	8008412 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d10b      	bne.n	8008412 <vTaskStartScheduler+0xae>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	60fb      	str	r3, [r7, #12]
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <vTaskStartScheduler+0xaa>
}
 8008412:	bf00      	nop
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	0800f370 	.word	0x0800f370
 8008420:	08008a55 	.word	0x08008a55
 8008424:	20003040 	.word	0x20003040
 8008428:	2000303c 	.word	0x2000303c
 800842c:	20003028 	.word	0x20003028
 8008430:	20003020 	.word	0x20003020

08008434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <vTaskSuspendAll+0x18>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	4a03      	ldr	r2, [pc, #12]	@ (800844c <vTaskSuspendAll+0x18>)
 8008440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008442:	bf00      	nop
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	20003044 	.word	0x20003044

08008450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800845e:	4b42      	ldr	r3, [pc, #264]	@ (8008568 <xTaskResumeAll+0x118>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <xTaskResumeAll+0x2e>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	603b      	str	r3, [r7, #0]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800847e:	f001 fa3b 	bl	80098f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008482:	4b39      	ldr	r3, [pc, #228]	@ (8008568 <xTaskResumeAll+0x118>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3b01      	subs	r3, #1
 8008488:	4a37      	ldr	r2, [pc, #220]	@ (8008568 <xTaskResumeAll+0x118>)
 800848a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800848c:	4b36      	ldr	r3, [pc, #216]	@ (8008568 <xTaskResumeAll+0x118>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d162      	bne.n	800855a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008494:	4b35      	ldr	r3, [pc, #212]	@ (800856c <xTaskResumeAll+0x11c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d05e      	beq.n	800855a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800849c:	e02f      	b.n	80084fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849e:	4b34      	ldr	r3, [pc, #208]	@ (8008570 <xTaskResumeAll+0x120>)
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3318      	adds	r3, #24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fdbe 	bl	800702c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fdb9 	bl	800702c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4b2d      	ldr	r3, [pc, #180]	@ (8008574 <xTaskResumeAll+0x124>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d903      	bls.n	80084ce <xTaskResumeAll+0x7e>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008574 <xTaskResumeAll+0x124>)
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4a27      	ldr	r2, [pc, #156]	@ (8008578 <xTaskResumeAll+0x128>)
 80084dc:	441a      	add	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f7fe fd44 	bl	8006f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ee:	4b23      	ldr	r3, [pc, #140]	@ (800857c <xTaskResumeAll+0x12c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d302      	bcc.n	80084fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084f8:	4b21      	ldr	r3, [pc, #132]	@ (8008580 <xTaskResumeAll+0x130>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008570 <xTaskResumeAll+0x120>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1cb      	bne.n	800849e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800850c:	f000 fb58 	bl	8008bc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008510:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <xTaskResumeAll+0x134>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d010      	beq.n	800853e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800851c:	f000 f846 	bl	80085ac <xTaskIncrementTick>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008526:	4b16      	ldr	r3, [pc, #88]	@ (8008580 <xTaskResumeAll+0x130>)
 8008528:	2201      	movs	r2, #1
 800852a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3b01      	subs	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f1      	bne.n	800851c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008538:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <xTaskResumeAll+0x134>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800853e:	4b10      	ldr	r3, [pc, #64]	@ (8008580 <xTaskResumeAll+0x130>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008546:	2301      	movs	r3, #1
 8008548:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800854a:	4b0f      	ldr	r3, [pc, #60]	@ (8008588 <xTaskResumeAll+0x138>)
 800854c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800855a:	f001 f9ff 	bl	800995c <vPortExitCritical>

	return xAlreadyYielded;
 800855e:	68bb      	ldr	r3, [r7, #8]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20003044 	.word	0x20003044
 800856c:	2000301c 	.word	0x2000301c
 8008570:	20002fdc 	.word	0x20002fdc
 8008574:	20003024 	.word	0x20003024
 8008578:	20002b4c 	.word	0x20002b4c
 800857c:	20002b48 	.word	0x20002b48
 8008580:	20003030 	.word	0x20003030
 8008584:	2000302c 	.word	0x2000302c
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008592:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <xTaskGetTickCount+0x1c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008598:	687b      	ldr	r3, [r7, #4]
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20003020 	.word	0x20003020

080085ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085b6:	4b4f      	ldr	r3, [pc, #316]	@ (80086f4 <xTaskIncrementTick+0x148>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f040 8090 	bne.w	80086e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085c0:	4b4d      	ldr	r3, [pc, #308]	@ (80086f8 <xTaskIncrementTick+0x14c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085c8:	4a4b      	ldr	r2, [pc, #300]	@ (80086f8 <xTaskIncrementTick+0x14c>)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d121      	bne.n	8008618 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085d4:	4b49      	ldr	r3, [pc, #292]	@ (80086fc <xTaskIncrementTick+0x150>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	603b      	str	r3, [r7, #0]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <xTaskIncrementTick+0x46>
 80085f6:	4b41      	ldr	r3, [pc, #260]	@ (80086fc <xTaskIncrementTick+0x150>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	4b40      	ldr	r3, [pc, #256]	@ (8008700 <xTaskIncrementTick+0x154>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a3e      	ldr	r2, [pc, #248]	@ (80086fc <xTaskIncrementTick+0x150>)
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	4a3e      	ldr	r2, [pc, #248]	@ (8008700 <xTaskIncrementTick+0x154>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	4b3e      	ldr	r3, [pc, #248]	@ (8008704 <xTaskIncrementTick+0x158>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	4a3c      	ldr	r2, [pc, #240]	@ (8008704 <xTaskIncrementTick+0x158>)
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	f000 fad4 	bl	8008bc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008618:	4b3b      	ldr	r3, [pc, #236]	@ (8008708 <xTaskIncrementTick+0x15c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	429a      	cmp	r2, r3
 8008620:	d349      	bcc.n	80086b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008622:	4b36      	ldr	r3, [pc, #216]	@ (80086fc <xTaskIncrementTick+0x150>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862c:	4b36      	ldr	r3, [pc, #216]	@ (8008708 <xTaskIncrementTick+0x15c>)
 800862e:	f04f 32ff 	mov.w	r2, #4294967295
 8008632:	601a      	str	r2, [r3, #0]
					break;
 8008634:	e03f      	b.n	80086b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008636:	4b31      	ldr	r3, [pc, #196]	@ (80086fc <xTaskIncrementTick+0x150>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	429a      	cmp	r2, r3
 800864c:	d203      	bcs.n	8008656 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800864e:	4a2e      	ldr	r2, [pc, #184]	@ (8008708 <xTaskIncrementTick+0x15c>)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008654:	e02f      	b.n	80086b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	3304      	adds	r3, #4
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fce6 	bl	800702c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3318      	adds	r3, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fcdd 	bl	800702c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008676:	4b25      	ldr	r3, [pc, #148]	@ (800870c <xTaskIncrementTick+0x160>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d903      	bls.n	8008686 <xTaskIncrementTick+0xda>
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008682:	4a22      	ldr	r2, [pc, #136]	@ (800870c <xTaskIncrementTick+0x160>)
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4a1f      	ldr	r2, [pc, #124]	@ (8008710 <xTaskIncrementTick+0x164>)
 8008694:	441a      	add	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fe fc68 	bl	8006f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008714 <xTaskIncrementTick+0x168>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3b8      	bcc.n	8008622 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b4:	e7b5      	b.n	8008622 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086b6:	4b17      	ldr	r3, [pc, #92]	@ (8008714 <xTaskIncrementTick+0x168>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086bc:	4914      	ldr	r1, [pc, #80]	@ (8008710 <xTaskIncrementTick+0x164>)
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	440b      	add	r3, r1
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d901      	bls.n	80086d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086d2:	4b11      	ldr	r3, [pc, #68]	@ (8008718 <xTaskIncrementTick+0x16c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80086da:	2301      	movs	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	e004      	b.n	80086ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086e0:	4b0e      	ldr	r3, [pc, #56]	@ (800871c <xTaskIncrementTick+0x170>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a0d      	ldr	r2, [pc, #52]	@ (800871c <xTaskIncrementTick+0x170>)
 80086e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086ea:	697b      	ldr	r3, [r7, #20]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20003044 	.word	0x20003044
 80086f8:	20003020 	.word	0x20003020
 80086fc:	20002fd4 	.word	0x20002fd4
 8008700:	20002fd8 	.word	0x20002fd8
 8008704:	20003034 	.word	0x20003034
 8008708:	2000303c 	.word	0x2000303c
 800870c:	20003024 	.word	0x20003024
 8008710:	20002b4c 	.word	0x20002b4c
 8008714:	20002b48 	.word	0x20002b48
 8008718:	20003030 	.word	0x20003030
 800871c:	2000302c 	.word	0x2000302c

08008720 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008726:	4b28      	ldr	r3, [pc, #160]	@ (80087c8 <vTaskSwitchContext+0xa8>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800872e:	4b27      	ldr	r3, [pc, #156]	@ (80087cc <vTaskSwitchContext+0xac>)
 8008730:	2201      	movs	r2, #1
 8008732:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008734:	e042      	b.n	80087bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008736:	4b25      	ldr	r3, [pc, #148]	@ (80087cc <vTaskSwitchContext+0xac>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873c:	4b24      	ldr	r3, [pc, #144]	@ (80087d0 <vTaskSwitchContext+0xb0>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	e011      	b.n	8008768 <vTaskSwitchContext+0x48>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <vTaskSwitchContext+0x42>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	607b      	str	r3, [r7, #4]
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	e7fd      	b.n	800875e <vTaskSwitchContext+0x3e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b01      	subs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	491a      	ldr	r1, [pc, #104]	@ (80087d4 <vTaskSwitchContext+0xb4>)
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0e3      	beq.n	8008744 <vTaskSwitchContext+0x24>
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4a13      	ldr	r2, [pc, #76]	@ (80087d4 <vTaskSwitchContext+0xb4>)
 8008788:	4413      	add	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	605a      	str	r2, [r3, #4]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3308      	adds	r3, #8
 800879e:	429a      	cmp	r2, r3
 80087a0:	d104      	bne.n	80087ac <vTaskSwitchContext+0x8c>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	605a      	str	r2, [r3, #4]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	4a09      	ldr	r2, [pc, #36]	@ (80087d8 <vTaskSwitchContext+0xb8>)
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	4a06      	ldr	r2, [pc, #24]	@ (80087d0 <vTaskSwitchContext+0xb0>)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6013      	str	r3, [r2, #0]
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	20003044 	.word	0x20003044
 80087cc:	20003030 	.word	0x20003030
 80087d0:	20003024 	.word	0x20003024
 80087d4:	20002b4c 	.word	0x20002b4c
 80087d8:	20002b48 	.word	0x20002b48

080087dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10b      	bne.n	8008804 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	60fb      	str	r3, [r7, #12]
}
 80087fe:	bf00      	nop
 8008800:	bf00      	nop
 8008802:	e7fd      	b.n	8008800 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008804:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <vTaskPlaceOnEventList+0x48>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3318      	adds	r3, #24
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7fe fbd4 	bl	8006fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008812:	2101      	movs	r1, #1
 8008814:	6838      	ldr	r0, [r7, #0]
 8008816:	f000 fb91 	bl	8008f3c <prvAddCurrentTaskToDelayedList>
}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20002b48 	.word	0x20002b48

08008828 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	617b      	str	r3, [r7, #20]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008852:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <vTaskPlaceOnEventListRestricted+0x54>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3318      	adds	r3, #24
 8008858:	4619      	mov	r1, r3
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7fe fb89 	bl	8006f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	68b8      	ldr	r0, [r7, #8]
 8008870:	f000 fb64 	bl	8008f3c <prvAddCurrentTaskToDelayedList>
	}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20002b48 	.word	0x20002b48

08008880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	60fb      	str	r3, [r7, #12]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	3318      	adds	r3, #24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fbba 	bl	800702c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008930 <xTaskRemoveFromEventList+0xb0>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d11d      	bne.n	80088fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fbb1 	bl	800702c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ce:	4b19      	ldr	r3, [pc, #100]	@ (8008934 <xTaskRemoveFromEventList+0xb4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <xTaskRemoveFromEventList+0x5e>
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088da:	4a16      	ldr	r2, [pc, #88]	@ (8008934 <xTaskRemoveFromEventList+0xb4>)
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4a13      	ldr	r2, [pc, #76]	@ (8008938 <xTaskRemoveFromEventList+0xb8>)
 80088ec:	441a      	add	r2, r3
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7fe fb3c 	bl	8006f72 <vListInsertEnd>
 80088fa:	e005      	b.n	8008908 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3318      	adds	r3, #24
 8008900:	4619      	mov	r1, r3
 8008902:	480e      	ldr	r0, [pc, #56]	@ (800893c <xTaskRemoveFromEventList+0xbc>)
 8008904:	f7fe fb35 	bl	8006f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890c:	4b0c      	ldr	r3, [pc, #48]	@ (8008940 <xTaskRemoveFromEventList+0xc0>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008912:	429a      	cmp	r2, r3
 8008914:	d905      	bls.n	8008922 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800891a:	4b0a      	ldr	r3, [pc, #40]	@ (8008944 <xTaskRemoveFromEventList+0xc4>)
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	e001      	b.n	8008926 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008922:	2300      	movs	r3, #0
 8008924:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008926:	697b      	ldr	r3, [r7, #20]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20003044 	.word	0x20003044
 8008934:	20003024 	.word	0x20003024
 8008938:	20002b4c 	.word	0x20002b4c
 800893c:	20002fdc 	.word	0x20002fdc
 8008940:	20002b48 	.word	0x20002b48
 8008944:	20003030 	.word	0x20003030

08008948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008950:	4b06      	ldr	r3, [pc, #24]	@ (800896c <vTaskInternalSetTimeOutState+0x24>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008958:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <vTaskInternalSetTimeOutState+0x28>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	605a      	str	r2, [r3, #4]
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20003034 	.word	0x20003034
 8008970:	20003020 	.word	0x20003020

08008974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10b      	bne.n	800899c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	613b      	str	r3, [r7, #16]
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	60fb      	str	r3, [r7, #12]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80089ba:	f000 ff9d 	bl	80098f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089be:	4b1d      	ldr	r3, [pc, #116]	@ (8008a34 <xTaskCheckForTimeOut+0xc0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d102      	bne.n	80089de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089d8:	2300      	movs	r3, #0
 80089da:	61fb      	str	r3, [r7, #28]
 80089dc:	e023      	b.n	8008a26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b15      	ldr	r3, [pc, #84]	@ (8008a38 <xTaskCheckForTimeOut+0xc4>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d007      	beq.n	80089fa <xTaskCheckForTimeOut+0x86>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d302      	bcc.n	80089fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	e015      	b.n	8008a26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d20b      	bcs.n	8008a1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff ff99 	bl	8008948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	e004      	b.n	8008a26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a26:	f000 ff99 	bl	800995c <vPortExitCritical>

	return xReturn;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3720      	adds	r7, #32
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20003020 	.word	0x20003020
 8008a38:	20003034 	.word	0x20003034

08008a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a40:	4b03      	ldr	r3, [pc, #12]	@ (8008a50 <vTaskMissedYield+0x14>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
}
 8008a46:	bf00      	nop
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20003030 	.word	0x20003030

08008a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a5c:	f000 f852 	bl	8008b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a60:	4b06      	ldr	r3, [pc, #24]	@ (8008a7c <prvIdleTask+0x28>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d9f9      	bls.n	8008a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a68:	4b05      	ldr	r3, [pc, #20]	@ (8008a80 <prvIdleTask+0x2c>)
 8008a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a78:	e7f0      	b.n	8008a5c <prvIdleTask+0x8>
 8008a7a:	bf00      	nop
 8008a7c:	20002b4c 	.word	0x20002b4c
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	607b      	str	r3, [r7, #4]
 8008a8e:	e00c      	b.n	8008aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4613      	mov	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4a12      	ldr	r2, [pc, #72]	@ (8008ae4 <prvInitialiseTaskLists+0x60>)
 8008a9c:	4413      	add	r3, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fa3a 	bl	8006f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	607b      	str	r3, [r7, #4]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b37      	cmp	r3, #55	@ 0x37
 8008aae:	d9ef      	bls.n	8008a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ab0:	480d      	ldr	r0, [pc, #52]	@ (8008ae8 <prvInitialiseTaskLists+0x64>)
 8008ab2:	f7fe fa31 	bl	8006f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ab6:	480d      	ldr	r0, [pc, #52]	@ (8008aec <prvInitialiseTaskLists+0x68>)
 8008ab8:	f7fe fa2e 	bl	8006f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008abc:	480c      	ldr	r0, [pc, #48]	@ (8008af0 <prvInitialiseTaskLists+0x6c>)
 8008abe:	f7fe fa2b 	bl	8006f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ac2:	480c      	ldr	r0, [pc, #48]	@ (8008af4 <prvInitialiseTaskLists+0x70>)
 8008ac4:	f7fe fa28 	bl	8006f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ac8:	480b      	ldr	r0, [pc, #44]	@ (8008af8 <prvInitialiseTaskLists+0x74>)
 8008aca:	f7fe fa25 	bl	8006f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ace:	4b0b      	ldr	r3, [pc, #44]	@ (8008afc <prvInitialiseTaskLists+0x78>)
 8008ad0:	4a05      	ldr	r2, [pc, #20]	@ (8008ae8 <prvInitialiseTaskLists+0x64>)
 8008ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b00 <prvInitialiseTaskLists+0x7c>)
 8008ad6:	4a05      	ldr	r2, [pc, #20]	@ (8008aec <prvInitialiseTaskLists+0x68>)
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20002b4c 	.word	0x20002b4c
 8008ae8:	20002fac 	.word	0x20002fac
 8008aec:	20002fc0 	.word	0x20002fc0
 8008af0:	20002fdc 	.word	0x20002fdc
 8008af4:	20002ff0 	.word	0x20002ff0
 8008af8:	20003008 	.word	0x20003008
 8008afc:	20002fd4 	.word	0x20002fd4
 8008b00:	20002fd8 	.word	0x20002fd8

08008b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b0a:	e019      	b.n	8008b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b0c:	f000 fef4 	bl	80098f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b10:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <prvCheckTasksWaitingTermination+0x50>)
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fe fa85 	bl	800702c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b22:	4b0d      	ldr	r3, [pc, #52]	@ (8008b58 <prvCheckTasksWaitingTermination+0x54>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	4a0b      	ldr	r2, [pc, #44]	@ (8008b58 <prvCheckTasksWaitingTermination+0x54>)
 8008b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <prvCheckTasksWaitingTermination+0x58>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	4a0a      	ldr	r2, [pc, #40]	@ (8008b5c <prvCheckTasksWaitingTermination+0x58>)
 8008b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b36:	f000 ff11 	bl	800995c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f810 	bl	8008b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b40:	4b06      	ldr	r3, [pc, #24]	@ (8008b5c <prvCheckTasksWaitingTermination+0x58>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e1      	bne.n	8008b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b48:	bf00      	nop
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20002ff0 	.word	0x20002ff0
 8008b58:	2000301c 	.word	0x2000301c
 8008b5c:	20003004 	.word	0x20003004

08008b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d108      	bne.n	8008b84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b76:	4618      	mov	r0, r3
 8008b78:	f001 f8ae 	bl	8009cd8 <vPortFree>
				vPortFree( pxTCB );
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f8ab 	bl	8009cd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b82:	e019      	b.n	8008bb8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d103      	bne.n	8008b96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 f8a2 	bl	8009cd8 <vPortFree>
	}
 8008b94:	e010      	b.n	8008bb8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d00b      	beq.n	8008bb8 <prvDeleteTCB+0x58>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60fb      	str	r3, [r7, #12]
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <prvDeleteTCB+0x54>
	}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <prvResetNextTaskUnblockTime+0x38>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <prvResetNextTaskUnblockTime+0x3c>)
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bd8:	e008      	b.n	8008bec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bda:	4b07      	ldr	r3, [pc, #28]	@ (8008bf8 <prvResetNextTaskUnblockTime+0x38>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a04      	ldr	r2, [pc, #16]	@ (8008bfc <prvResetNextTaskUnblockTime+0x3c>)
 8008bea:	6013      	str	r3, [r2, #0]
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	20002fd4 	.word	0x20002fd4
 8008bfc:	2000303c 	.word	0x2000303c

08008c00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008c06:	4b05      	ldr	r3, [pc, #20]	@ (8008c1c <xTaskGetCurrentTaskHandle+0x1c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008c0c:	687b      	ldr	r3, [r7, #4]
	}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20002b48 	.word	0x20002b48

08008c20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <xTaskGetSchedulerState+0x34>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e008      	b.n	8008c46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c34:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <xTaskGetSchedulerState+0x38>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	607b      	str	r3, [r7, #4]
 8008c40:	e001      	b.n	8008c46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c42:	2300      	movs	r3, #0
 8008c44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c46:	687b      	ldr	r3, [r7, #4]
	}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	20003028 	.word	0x20003028
 8008c58:	20003044 	.word	0x20003044

08008c5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d051      	beq.n	8008d16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c76:	4b2a      	ldr	r3, [pc, #168]	@ (8008d20 <xTaskPriorityInherit+0xc4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d241      	bcs.n	8008d04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	db06      	blt.n	8008c96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c88:	4b25      	ldr	r3, [pc, #148]	@ (8008d20 <xTaskPriorityInherit+0xc4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6959      	ldr	r1, [r3, #20]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d24 <xTaskPriorityInherit+0xc8>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	4299      	cmp	r1, r3
 8008cac:	d122      	bne.n	8008cf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe f9ba 	bl	800702c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cb8:	4b19      	ldr	r3, [pc, #100]	@ (8008d20 <xTaskPriorityInherit+0xc4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc6:	4b18      	ldr	r3, [pc, #96]	@ (8008d28 <xTaskPriorityInherit+0xcc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d903      	bls.n	8008cd6 <xTaskPriorityInherit+0x7a>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	4a15      	ldr	r2, [pc, #84]	@ (8008d28 <xTaskPriorityInherit+0xcc>)
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4a10      	ldr	r2, [pc, #64]	@ (8008d24 <xTaskPriorityInherit+0xc8>)
 8008ce4:	441a      	add	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f7fe f940 	bl	8006f72 <vListInsertEnd>
 8008cf2:	e004      	b.n	8008cfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d20 <xTaskPriorityInherit+0xc4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	e008      	b.n	8008d16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d08:	4b05      	ldr	r3, [pc, #20]	@ (8008d20 <xTaskPriorityInherit+0xc4>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d201      	bcs.n	8008d16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d12:	2301      	movs	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d16:	68fb      	ldr	r3, [r7, #12]
	}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20002b48 	.word	0x20002b48
 8008d24:	20002b4c 	.word	0x20002b4c
 8008d28:	20003024 	.word	0x20003024

08008d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d058      	beq.n	8008df4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d42:	4b2f      	ldr	r3, [pc, #188]	@ (8008e00 <xTaskPriorityDisinherit+0xd4>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d00b      	beq.n	8008d64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	60fb      	str	r3, [r7, #12]
}
 8008d5e:	bf00      	nop
 8008d60:	bf00      	nop
 8008d62:	e7fd      	b.n	8008d60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	60bb      	str	r3, [r7, #8]
}
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d88:	1e5a      	subs	r2, r3, #1
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d02c      	beq.n	8008df4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d128      	bne.n	8008df4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe f940 	bl	800702c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008e04 <xTaskPriorityDisinherit+0xd8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d903      	bls.n	8008dd4 <xTaskPriorityDisinherit+0xa8>
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008e04 <xTaskPriorityDisinherit+0xd8>)
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4a09      	ldr	r2, [pc, #36]	@ (8008e08 <xTaskPriorityDisinherit+0xdc>)
 8008de2:	441a      	add	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	3304      	adds	r3, #4
 8008de8:	4619      	mov	r1, r3
 8008dea:	4610      	mov	r0, r2
 8008dec:	f7fe f8c1 	bl	8006f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008df4:	697b      	ldr	r3, [r7, #20]
	}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20002b48 	.word	0x20002b48
 8008e04:	20003024 	.word	0x20003024
 8008e08:	20002b4c 	.word	0x20002b4c

08008e0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d06c      	beq.n	8008efe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10b      	bne.n	8008e44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60fb      	str	r3, [r7, #12]
}
 8008e3e:	bf00      	nop
 8008e40:	bf00      	nop
 8008e42:	e7fd      	b.n	8008e40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d902      	bls.n	8008e54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	61fb      	str	r3, [r7, #28]
 8008e52:	e002      	b.n	8008e5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d04c      	beq.n	8008efe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d147      	bne.n	8008efe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e6e:	4b26      	ldr	r3, [pc, #152]	@ (8008f08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d10b      	bne.n	8008e90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	60bb      	str	r3, [r7, #8]
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	69fa      	ldr	r2, [r7, #28]
 8008e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db04      	blt.n	8008eae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	6959      	ldr	r1, [r3, #20]
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4a13      	ldr	r2, [pc, #76]	@ (8008f0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ebe:	4413      	add	r3, r2
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	d11c      	bne.n	8008efe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe f8af 	bl	800702c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d903      	bls.n	8008ee2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	4a0c      	ldr	r2, [pc, #48]	@ (8008f10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4a07      	ldr	r2, [pc, #28]	@ (8008f0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008ef0:	441a      	add	r2, r3
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fe f83a 	bl	8006f72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008efe:	bf00      	nop
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20002b48 	.word	0x20002b48
 8008f0c:	20002b4c 	.word	0x20002b4c
 8008f10:	20003024 	.word	0x20003024

08008f14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f18:	4b07      	ldr	r3, [pc, #28]	@ (8008f38 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f20:	4b05      	ldr	r3, [pc, #20]	@ (8008f38 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f26:	3201      	adds	r2, #1
 8008f28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008f2a:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
	}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	20002b48 	.word	0x20002b48

08008f3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f46:	4b21      	ldr	r3, [pc, #132]	@ (8008fcc <prvAddCurrentTaskToDelayedList+0x90>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f4c:	4b20      	ldr	r3, [pc, #128]	@ (8008fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe f86a 	bl	800702c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5e:	d10a      	bne.n	8008f76 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d007      	beq.n	8008f76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f66:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4819      	ldr	r0, [pc, #100]	@ (8008fd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f70:	f7fd ffff 	bl	8006f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f74:	e026      	b.n	8008fc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f7e:	4b14      	ldr	r3, [pc, #80]	@ (8008fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d209      	bcs.n	8008fa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f8e:	4b12      	ldr	r3, [pc, #72]	@ (8008fd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f7fe f80d 	bl	8006fba <vListInsert>
}
 8008fa0:	e010      	b.n	8008fc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe f803 	bl	8006fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d202      	bcs.n	8008fc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008fbe:	4a08      	ldr	r2, [pc, #32]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	6013      	str	r3, [r2, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20003020 	.word	0x20003020
 8008fd0:	20002b48 	.word	0x20002b48
 8008fd4:	20003008 	.word	0x20003008
 8008fd8:	20002fd8 	.word	0x20002fd8
 8008fdc:	20002fd4 	.word	0x20002fd4
 8008fe0:	2000303c 	.word	0x2000303c

08008fe4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	@ 0x28
 8008fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fee:	f000 fb13 	bl	8009618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8009068 <xTimerCreateTimerTask+0x84>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d021      	beq.n	800903e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009002:	1d3a      	adds	r2, r7, #4
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	f107 030c 	add.w	r3, r7, #12
 800900c:	4618      	mov	r0, r3
 800900e:	f7fd ff69 	bl	8006ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	9202      	str	r2, [sp, #8]
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	2302      	movs	r3, #2
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	2300      	movs	r3, #0
 8009022:	460a      	mov	r2, r1
 8009024:	4911      	ldr	r1, [pc, #68]	@ (800906c <xTimerCreateTimerTask+0x88>)
 8009026:	4812      	ldr	r0, [pc, #72]	@ (8009070 <xTimerCreateTimerTask+0x8c>)
 8009028:	f7fe ff40 	bl	8007eac <xTaskCreateStatic>
 800902c:	4603      	mov	r3, r0
 800902e:	4a11      	ldr	r2, [pc, #68]	@ (8009074 <xTimerCreateTimerTask+0x90>)
 8009030:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009032:	4b10      	ldr	r3, [pc, #64]	@ (8009074 <xTimerCreateTimerTask+0x90>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800903a:	2301      	movs	r3, #1
 800903c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10b      	bne.n	800905c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	613b      	str	r3, [r7, #16]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800905c:	697b      	ldr	r3, [r7, #20]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20003078 	.word	0x20003078
 800906c:	0800f378 	.word	0x0800f378
 8009070:	080091b1 	.word	0x080091b1
 8009074:	2000307c 	.word	0x2000307c

08009078 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	@ 0x28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009086:	2300      	movs	r3, #0
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	623b      	str	r3, [r7, #32]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090a8:	4b19      	ldr	r3, [pc, #100]	@ (8009110 <xTimerGenericCommand+0x98>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d02a      	beq.n	8009106 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b05      	cmp	r3, #5
 80090c0:	dc18      	bgt.n	80090f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090c2:	f7ff fdad 	bl	8008c20 <xTaskGetSchedulerState>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d109      	bne.n	80090e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090cc:	4b10      	ldr	r3, [pc, #64]	@ (8009110 <xTimerGenericCommand+0x98>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	f107 0110 	add.w	r1, r7, #16
 80090d4:	2300      	movs	r3, #0
 80090d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d8:	f7fe f9d0 	bl	800747c <xQueueGenericSend>
 80090dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80090de:	e012      	b.n	8009106 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <xTimerGenericCommand+0x98>)
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	f107 0110 	add.w	r1, r7, #16
 80090e8:	2300      	movs	r3, #0
 80090ea:	2200      	movs	r2, #0
 80090ec:	f7fe f9c6 	bl	800747c <xQueueGenericSend>
 80090f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80090f2:	e008      	b.n	8009106 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090f4:	4b06      	ldr	r3, [pc, #24]	@ (8009110 <xTimerGenericCommand+0x98>)
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	f107 0110 	add.w	r1, r7, #16
 80090fc:	2300      	movs	r3, #0
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	f7fe fabe 	bl	8007680 <xQueueGenericSendFromISR>
 8009104:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009108:	4618      	mov	r0, r3
 800910a:	3728      	adds	r7, #40	@ 0x28
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20003078 	.word	0x20003078

08009114 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af02      	add	r7, sp, #8
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911e:	4b23      	ldr	r3, [pc, #140]	@ (80091ac <prvProcessExpiredTimer+0x98>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7fd ff7d 	bl	800702c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d023      	beq.n	8009188 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	18d1      	adds	r1, r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	6978      	ldr	r0, [r7, #20]
 800914e:	f000 f8d5 	bl	80092fc <prvInsertTimerInActiveList>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d020      	beq.n	800919a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009158:	2300      	movs	r3, #0
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	2300      	movs	r3, #0
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	2100      	movs	r1, #0
 8009162:	6978      	ldr	r0, [r7, #20]
 8009164:	f7ff ff88 	bl	8009078 <xTimerGenericCommand>
 8009168:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d114      	bne.n	800919a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	6978      	ldr	r0, [r7, #20]
 80091a0:	4798      	blx	r3
}
 80091a2:	bf00      	nop
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20003070 	.word	0x20003070

080091b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091b8:	f107 0308 	add.w	r3, r7, #8
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 f859 	bl	8009274 <prvGetNextExpireTime>
 80091c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f805 	bl	80091d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091ce:	f000 f8d7 	bl	8009380 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091d2:	bf00      	nop
 80091d4:	e7f0      	b.n	80091b8 <prvTimerTask+0x8>
	...

080091d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091e2:	f7ff f927 	bl	8008434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f866 	bl	80092bc <prvSampleTimeNow>
 80091f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d130      	bne.n	800925a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <prvProcessTimerOrBlockTask+0x3c>
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	429a      	cmp	r2, r3
 8009204:	d806      	bhi.n	8009214 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009206:	f7ff f923 	bl	8008450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800920a:	68f9      	ldr	r1, [r7, #12]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff ff81 	bl	8009114 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009212:	e024      	b.n	800925e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d008      	beq.n	800922c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800921a:	4b13      	ldr	r3, [pc, #76]	@ (8009268 <prvProcessTimerOrBlockTask+0x90>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <prvProcessTimerOrBlockTask+0x50>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <prvProcessTimerOrBlockTask+0x52>
 8009228:	2300      	movs	r3, #0
 800922a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800922c:	4b0f      	ldr	r3, [pc, #60]	@ (800926c <prvProcessTimerOrBlockTask+0x94>)
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	4619      	mov	r1, r3
 800923a:	f7fe fe03 	bl	8007e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800923e:	f7ff f907 	bl	8008450 <xTaskResumeAll>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009248:	4b09      	ldr	r3, [pc, #36]	@ (8009270 <prvProcessTimerOrBlockTask+0x98>)
 800924a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	f3bf 8f6f 	isb	sy
}
 8009258:	e001      	b.n	800925e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800925a:	f7ff f8f9 	bl	8008450 <xTaskResumeAll>
}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20003074 	.word	0x20003074
 800926c:	20003078 	.word	0x20003078
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800927c:	4b0e      	ldr	r3, [pc, #56]	@ (80092b8 <prvGetNextExpireTime+0x44>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <prvGetNextExpireTime+0x16>
 8009286:	2201      	movs	r2, #1
 8009288:	e000      	b.n	800928c <prvGetNextExpireTime+0x18>
 800928a:	2200      	movs	r2, #0
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d105      	bne.n	80092a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009298:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <prvGetNextExpireTime+0x44>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	e001      	b.n	80092a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092a8:	68fb      	ldr	r3, [r7, #12]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20003070 	.word	0x20003070

080092bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092c4:	f7ff f962 	bl	800858c <xTaskGetTickCount>
 80092c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092ca:	4b0b      	ldr	r3, [pc, #44]	@ (80092f8 <prvSampleTimeNow+0x3c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d205      	bcs.n	80092e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092d4:	f000 f93a 	bl	800954c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e002      	b.n	80092e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092e6:	4a04      	ldr	r2, [pc, #16]	@ (80092f8 <prvSampleTimeNow+0x3c>)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092ec:	68fb      	ldr	r3, [r7, #12]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20003080 	.word	0x20003080

080092fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800930a:	2300      	movs	r3, #0
 800930c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	429a      	cmp	r2, r3
 8009320:	d812      	bhi.n	8009348 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	1ad2      	subs	r2, r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	429a      	cmp	r2, r3
 800932e:	d302      	bcc.n	8009336 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009330:	2301      	movs	r3, #1
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	e01b      	b.n	800936e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009336:	4b10      	ldr	r3, [pc, #64]	@ (8009378 <prvInsertTimerInActiveList+0x7c>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3304      	adds	r3, #4
 800933e:	4619      	mov	r1, r3
 8009340:	4610      	mov	r0, r2
 8009342:	f7fd fe3a 	bl	8006fba <vListInsert>
 8009346:	e012      	b.n	800936e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d206      	bcs.n	800935e <prvInsertTimerInActiveList+0x62>
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d302      	bcc.n	800935e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	e007      	b.n	800936e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800935e:	4b07      	ldr	r3, [pc, #28]	@ (800937c <prvInsertTimerInActiveList+0x80>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3304      	adds	r3, #4
 8009366:	4619      	mov	r1, r3
 8009368:	4610      	mov	r0, r2
 800936a:	f7fd fe26 	bl	8006fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800936e:	697b      	ldr	r3, [r7, #20]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20003074 	.word	0x20003074
 800937c:	20003070 	.word	0x20003070

08009380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08e      	sub	sp, #56	@ 0x38
 8009384:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009386:	e0ce      	b.n	8009526 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	da19      	bge.n	80093c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800938e:	1d3b      	adds	r3, r7, #4
 8009390:	3304      	adds	r3, #4
 8009392:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10b      	bne.n	80093b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	61fb      	str	r3, [r7, #28]
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	e7fd      	b.n	80093ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093b8:	6850      	ldr	r0, [r2, #4]
 80093ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093bc:	6892      	ldr	r2, [r2, #8]
 80093be:	4611      	mov	r1, r2
 80093c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f2c0 80ae 	blt.w	8009526 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	3304      	adds	r3, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fd fe26 	bl	800702c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093e0:	463b      	mov	r3, r7
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ff6a 	bl	80092bc <prvSampleTimeNow>
 80093e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	f200 8097 	bhi.w	8009520 <prvProcessReceivedCommands+0x1a0>
 80093f2:	a201      	add	r2, pc, #4	@ (adr r2, 80093f8 <prvProcessReceivedCommands+0x78>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	08009421 	.word	0x08009421
 80093fc:	08009421 	.word	0x08009421
 8009400:	08009421 	.word	0x08009421
 8009404:	08009497 	.word	0x08009497
 8009408:	080094ab 	.word	0x080094ab
 800940c:	080094f7 	.word	0x080094f7
 8009410:	08009421 	.word	0x08009421
 8009414:	08009421 	.word	0x08009421
 8009418:	08009497 	.word	0x08009497
 800941c:	080094ab 	.word	0x080094ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009426:	f043 0301 	orr.w	r3, r3, #1
 800942a:	b2da      	uxtb	r2, r3
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	18d1      	adds	r1, r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800943e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009440:	f7ff ff5c 	bl	80092fc <prvInsertTimerInActiveList>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d06c      	beq.n	8009524 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800944a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d061      	beq.n	8009524 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	441a      	add	r2, r3
 8009468:	2300      	movs	r3, #0
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	2300      	movs	r3, #0
 800946e:	2100      	movs	r1, #0
 8009470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009472:	f7ff fe01 	bl	8009078 <xTimerGenericCommand>
 8009476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d152      	bne.n	8009524 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	61bb      	str	r3, [r7, #24]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80094a8:	e03d      	b.n	8009526 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094b0:	f043 0301 	orr.w	r3, r3, #1
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10b      	bne.n	80094e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	617b      	str	r3, [r7, #20]
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	e7fd      	b.n	80094de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e4:	699a      	ldr	r2, [r3, #24]
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	18d1      	adds	r1, r2, r3
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094f0:	f7ff ff04 	bl	80092fc <prvInsertTimerInActiveList>
					break;
 80094f4:	e017      	b.n	8009526 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009506:	f000 fbe7 	bl	8009cd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800950a:	e00c      	b.n	8009526 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009512:	f023 0301 	bic.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800951e:	e002      	b.n	8009526 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009520:	bf00      	nop
 8009522:	e000      	b.n	8009526 <prvProcessReceivedCommands+0x1a6>
					break;
 8009524:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009526:	4b08      	ldr	r3, [pc, #32]	@ (8009548 <prvProcessReceivedCommands+0x1c8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	1d39      	adds	r1, r7, #4
 800952c:	2200      	movs	r2, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe f944 	bl	80077bc <xQueueReceive>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	f47f af26 	bne.w	8009388 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800953c:	bf00      	nop
 800953e:	bf00      	nop
 8009540:	3730      	adds	r7, #48	@ 0x30
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20003078 	.word	0x20003078

0800954c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009552:	e049      	b.n	80095e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009554:	4b2e      	ldr	r3, [pc, #184]	@ (8009610 <prvSwitchTimerLists+0xc4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955e:	4b2c      	ldr	r3, [pc, #176]	@ (8009610 <prvSwitchTimerLists+0xc4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3304      	adds	r3, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd fd5d 	bl	800702c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d02f      	beq.n	80095e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4413      	add	r3, r2
 8009590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	d90e      	bls.n	80095b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009610 <prvSwitchTimerLists+0xc4>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fd fd02 	bl	8006fba <vListInsert>
 80095b6:	e017      	b.n	80095e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095b8:	2300      	movs	r3, #0
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	2300      	movs	r3, #0
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	2100      	movs	r1, #0
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fd58 	bl	8009078 <xTimerGenericCommand>
 80095c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10b      	bne.n	80095e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	603b      	str	r3, [r7, #0]
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	e7fd      	b.n	80095e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095e8:	4b09      	ldr	r3, [pc, #36]	@ (8009610 <prvSwitchTimerLists+0xc4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1b0      	bne.n	8009554 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095f2:	4b07      	ldr	r3, [pc, #28]	@ (8009610 <prvSwitchTimerLists+0xc4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095f8:	4b06      	ldr	r3, [pc, #24]	@ (8009614 <prvSwitchTimerLists+0xc8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a04      	ldr	r2, [pc, #16]	@ (8009610 <prvSwitchTimerLists+0xc4>)
 80095fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009600:	4a04      	ldr	r2, [pc, #16]	@ (8009614 <prvSwitchTimerLists+0xc8>)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	6013      	str	r3, [r2, #0]
}
 8009606:	bf00      	nop
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20003070 	.word	0x20003070
 8009614:	20003074 	.word	0x20003074

08009618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800961e:	f000 f96b 	bl	80098f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009622:	4b15      	ldr	r3, [pc, #84]	@ (8009678 <prvCheckForValidListAndQueue+0x60>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d120      	bne.n	800966c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800962a:	4814      	ldr	r0, [pc, #80]	@ (800967c <prvCheckForValidListAndQueue+0x64>)
 800962c:	f7fd fc74 	bl	8006f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009630:	4813      	ldr	r0, [pc, #76]	@ (8009680 <prvCheckForValidListAndQueue+0x68>)
 8009632:	f7fd fc71 	bl	8006f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009636:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <prvCheckForValidListAndQueue+0x6c>)
 8009638:	4a10      	ldr	r2, [pc, #64]	@ (800967c <prvCheckForValidListAndQueue+0x64>)
 800963a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800963c:	4b12      	ldr	r3, [pc, #72]	@ (8009688 <prvCheckForValidListAndQueue+0x70>)
 800963e:	4a10      	ldr	r2, [pc, #64]	@ (8009680 <prvCheckForValidListAndQueue+0x68>)
 8009640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009642:	2300      	movs	r3, #0
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	4b11      	ldr	r3, [pc, #68]	@ (800968c <prvCheckForValidListAndQueue+0x74>)
 8009648:	4a11      	ldr	r2, [pc, #68]	@ (8009690 <prvCheckForValidListAndQueue+0x78>)
 800964a:	2110      	movs	r1, #16
 800964c:	200a      	movs	r0, #10
 800964e:	f7fd fd81 	bl	8007154 <xQueueGenericCreateStatic>
 8009652:	4603      	mov	r3, r0
 8009654:	4a08      	ldr	r2, [pc, #32]	@ (8009678 <prvCheckForValidListAndQueue+0x60>)
 8009656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009658:	4b07      	ldr	r3, [pc, #28]	@ (8009678 <prvCheckForValidListAndQueue+0x60>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d005      	beq.n	800966c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009660:	4b05      	ldr	r3, [pc, #20]	@ (8009678 <prvCheckForValidListAndQueue+0x60>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	490b      	ldr	r1, [pc, #44]	@ (8009694 <prvCheckForValidListAndQueue+0x7c>)
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fbc2 	bl	8007df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800966c:	f000 f976 	bl	800995c <vPortExitCritical>
}
 8009670:	bf00      	nop
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20003078 	.word	0x20003078
 800967c:	20003048 	.word	0x20003048
 8009680:	2000305c 	.word	0x2000305c
 8009684:	20003070 	.word	0x20003070
 8009688:	20003074 	.word	0x20003074
 800968c:	20003124 	.word	0x20003124
 8009690:	20003084 	.word	0x20003084
 8009694:	0800f380 	.word	0x0800f380

08009698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3b04      	subs	r3, #4
 80096a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80096b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3b04      	subs	r3, #4
 80096b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f023 0201 	bic.w	r2, r3, #1
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3b04      	subs	r3, #4
 80096c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096c8:	4a0c      	ldr	r2, [pc, #48]	@ (80096fc <pxPortInitialiseStack+0x64>)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b14      	subs	r3, #20
 80096d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3b04      	subs	r3, #4
 80096de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f06f 0202 	mvn.w	r2, #2
 80096e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3b20      	subs	r3, #32
 80096ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ee:	68fb      	ldr	r3, [r7, #12]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	08009701 	.word	0x08009701

08009700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800970a:	4b13      	ldr	r3, [pc, #76]	@ (8009758 <prvTaskExitError+0x58>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009712:	d00b      	beq.n	800972c <prvTaskExitError+0x2c>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	60fb      	str	r3, [r7, #12]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <prvTaskExitError+0x28>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60bb      	str	r3, [r7, #8]
}
 800973e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009740:	bf00      	nop
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0fc      	beq.n	8009742 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	2000001c 	.word	0x2000001c
 800975c:	00000000 	.word	0x00000000

08009760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009760:	4b07      	ldr	r3, [pc, #28]	@ (8009780 <pxCurrentTCBConst2>)
 8009762:	6819      	ldr	r1, [r3, #0]
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	f380 8809 	msr	PSP, r0
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8811 	msr	BASEPRI, r0
 800977a:	4770      	bx	lr
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst2>:
 8009780:	20002b48 	.word	0x20002b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009788:	4808      	ldr	r0, [pc, #32]	@ (80097ac <prvPortStartFirstTask+0x24>)
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	6800      	ldr	r0, [r0, #0]
 800978e:	f380 8808 	msr	MSP, r0
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8814 	msr	CONTROL, r0
 800979a:	b662      	cpsie	i
 800979c:	b661      	cpsie	f
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	df00      	svc	0
 80097a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097aa:	bf00      	nop
 80097ac:	e000ed08 	.word	0xe000ed08

080097b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097b6:	4b47      	ldr	r3, [pc, #284]	@ (80098d4 <xPortStartScheduler+0x124>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a47      	ldr	r2, [pc, #284]	@ (80098d8 <xPortStartScheduler+0x128>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10b      	bne.n	80097d8 <xPortStartScheduler+0x28>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60fb      	str	r3, [r7, #12]
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097d8:	4b3e      	ldr	r3, [pc, #248]	@ (80098d4 <xPortStartScheduler+0x124>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a3f      	ldr	r2, [pc, #252]	@ (80098dc <xPortStartScheduler+0x12c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d10b      	bne.n	80097fa <xPortStartScheduler+0x4a>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	613b      	str	r3, [r7, #16]
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	e7fd      	b.n	80097f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097fa:	4b39      	ldr	r3, [pc, #228]	@ (80098e0 <xPortStartScheduler+0x130>)
 80097fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	22ff      	movs	r2, #255	@ 0xff
 800980a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800981c:	b2da      	uxtb	r2, r3
 800981e:	4b31      	ldr	r3, [pc, #196]	@ (80098e4 <xPortStartScheduler+0x134>)
 8009820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009822:	4b31      	ldr	r3, [pc, #196]	@ (80098e8 <xPortStartScheduler+0x138>)
 8009824:	2207      	movs	r2, #7
 8009826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009828:	e009      	b.n	800983e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800982a:	4b2f      	ldr	r3, [pc, #188]	@ (80098e8 <xPortStartScheduler+0x138>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3b01      	subs	r3, #1
 8009830:	4a2d      	ldr	r2, [pc, #180]	@ (80098e8 <xPortStartScheduler+0x138>)
 8009832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	b2db      	uxtb	r3, r3
 800983c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009846:	2b80      	cmp	r3, #128	@ 0x80
 8009848:	d0ef      	beq.n	800982a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800984a:	4b27      	ldr	r3, [pc, #156]	@ (80098e8 <xPortStartScheduler+0x138>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f1c3 0307 	rsb	r3, r3, #7
 8009852:	2b04      	cmp	r3, #4
 8009854:	d00b      	beq.n	800986e <xPortStartScheduler+0xbe>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60bb      	str	r3, [r7, #8]
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800986e:	4b1e      	ldr	r3, [pc, #120]	@ (80098e8 <xPortStartScheduler+0x138>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	4a1c      	ldr	r2, [pc, #112]	@ (80098e8 <xPortStartScheduler+0x138>)
 8009876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009878:	4b1b      	ldr	r3, [pc, #108]	@ (80098e8 <xPortStartScheduler+0x138>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009880:	4a19      	ldr	r2, [pc, #100]	@ (80098e8 <xPortStartScheduler+0x138>)
 8009882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	b2da      	uxtb	r2, r3
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800988c:	4b17      	ldr	r3, [pc, #92]	@ (80098ec <xPortStartScheduler+0x13c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a16      	ldr	r2, [pc, #88]	@ (80098ec <xPortStartScheduler+0x13c>)
 8009892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009898:	4b14      	ldr	r3, [pc, #80]	@ (80098ec <xPortStartScheduler+0x13c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a13      	ldr	r2, [pc, #76]	@ (80098ec <xPortStartScheduler+0x13c>)
 800989e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80098a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098a4:	f000 f8da 	bl	8009a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098a8:	4b11      	ldr	r3, [pc, #68]	@ (80098f0 <xPortStartScheduler+0x140>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098ae:	f000 f8f9 	bl	8009aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098b2:	4b10      	ldr	r3, [pc, #64]	@ (80098f4 <xPortStartScheduler+0x144>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a0f      	ldr	r2, [pc, #60]	@ (80098f4 <xPortStartScheduler+0x144>)
 80098b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80098bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098be:	f7ff ff63 	bl	8009788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098c2:	f7fe ff2d 	bl	8008720 <vTaskSwitchContext>
	prvTaskExitError();
 80098c6:	f7ff ff1b 	bl	8009700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	e000ed00 	.word	0xe000ed00
 80098d8:	410fc271 	.word	0x410fc271
 80098dc:	410fc270 	.word	0x410fc270
 80098e0:	e000e400 	.word	0xe000e400
 80098e4:	20003174 	.word	0x20003174
 80098e8:	20003178 	.word	0x20003178
 80098ec:	e000ed20 	.word	0xe000ed20
 80098f0:	2000001c 	.word	0x2000001c
 80098f4:	e000ef34 	.word	0xe000ef34

080098f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	607b      	str	r3, [r7, #4]
}
 8009910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009912:	4b10      	ldr	r3, [pc, #64]	@ (8009954 <vPortEnterCritical+0x5c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3301      	adds	r3, #1
 8009918:	4a0e      	ldr	r2, [pc, #56]	@ (8009954 <vPortEnterCritical+0x5c>)
 800991a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800991c:	4b0d      	ldr	r3, [pc, #52]	@ (8009954 <vPortEnterCritical+0x5c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d110      	bne.n	8009946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009924:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <vPortEnterCritical+0x60>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <vPortEnterCritical+0x4e>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	603b      	str	r3, [r7, #0]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <vPortEnterCritical+0x4a>
	}
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	2000001c 	.word	0x2000001c
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009962:	4b12      	ldr	r3, [pc, #72]	@ (80099ac <vPortExitCritical+0x50>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <vPortExitCritical+0x26>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	607b      	str	r3, [r7, #4]
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	e7fd      	b.n	800997e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009982:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <vPortExitCritical+0x50>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3b01      	subs	r3, #1
 8009988:	4a08      	ldr	r2, [pc, #32]	@ (80099ac <vPortExitCritical+0x50>)
 800998a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800998c:	4b07      	ldr	r3, [pc, #28]	@ (80099ac <vPortExitCritical+0x50>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d105      	bne.n	80099a0 <vPortExitCritical+0x44>
 8009994:	2300      	movs	r3, #0
 8009996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f383 8811 	msr	BASEPRI, r3
}
 800999e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	2000001c 	.word	0x2000001c

080099b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099b0:	f3ef 8009 	mrs	r0, PSP
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	4b15      	ldr	r3, [pc, #84]	@ (8009a10 <pxCurrentTCBConst>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	f01e 0f10 	tst.w	lr, #16
 80099c0:	bf08      	it	eq
 80099c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	6010      	str	r0, [r2, #0]
 80099cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80099d4:	f380 8811 	msr	BASEPRI, r0
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f7fe fe9e 	bl	8008720 <vTaskSwitchContext>
 80099e4:	f04f 0000 	mov.w	r0, #0
 80099e8:	f380 8811 	msr	BASEPRI, r0
 80099ec:	bc09      	pop	{r0, r3}
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	6808      	ldr	r0, [r1, #0]
 80099f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f6:	f01e 0f10 	tst.w	lr, #16
 80099fa:	bf08      	it	eq
 80099fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a00:	f380 8809 	msr	PSP, r0
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w

08009a10 <pxCurrentTCBConst>:
 8009a10:	20002b48 	.word	0x20002b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	607b      	str	r3, [r7, #4]
}
 8009a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a32:	f7fe fdbb 	bl	80085ac <xTaskIncrementTick>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <xPortSysTickHandler+0x40>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	2300      	movs	r3, #0
 8009a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f383 8811 	msr	BASEPRI, r3
}
 8009a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	@ (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a66:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <vPortSetupTimerInterrupt+0x38>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <vPortSetupTimerInterrupt+0x3c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a0a      	ldr	r2, [pc, #40]	@ (8009a9c <vPortSetupTimerInterrupt+0x40>)
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	099b      	lsrs	r3, r3, #6
 8009a78:	4a09      	ldr	r2, [pc, #36]	@ (8009aa0 <vPortSetupTimerInterrupt+0x44>)
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a7e:	4b04      	ldr	r3, [pc, #16]	@ (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a80:	2207      	movs	r2, #7
 8009a82:	601a      	str	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	e000e010 	.word	0xe000e010
 8009a94:	e000e018 	.word	0xe000e018
 8009a98:	20000010 	.word	0x20000010
 8009a9c:	10624dd3 	.word	0x10624dd3
 8009aa0:	e000e014 	.word	0xe000e014

08009aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ab4 <vPortEnableVFP+0x10>
 8009aa8:	6801      	ldr	r1, [r0, #0]
 8009aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009aae:	6001      	str	r1, [r0, #0]
 8009ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ab2:	bf00      	nop
 8009ab4:	e000ed88 	.word	0xe000ed88

08009ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009abe:	f3ef 8305 	mrs	r3, IPSR
 8009ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b0f      	cmp	r3, #15
 8009ac8:	d915      	bls.n	8009af6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009aca:	4a18      	ldr	r2, [pc, #96]	@ (8009b2c <vPortValidateInterruptPriority+0x74>)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ad4:	4b16      	ldr	r3, [pc, #88]	@ (8009b30 <vPortValidateInterruptPriority+0x78>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	7afa      	ldrb	r2, [r7, #11]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d20b      	bcs.n	8009af6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	e7fd      	b.n	8009af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009af6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b34 <vPortValidateInterruptPriority+0x7c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009afe:	4b0e      	ldr	r3, [pc, #56]	@ (8009b38 <vPortValidateInterruptPriority+0x80>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d90b      	bls.n	8009b1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	603b      	str	r3, [r7, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <vPortValidateInterruptPriority+0x62>
	}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	e000e3f0 	.word	0xe000e3f0
 8009b30:	20003174 	.word	0x20003174
 8009b34:	e000ed0c 	.word	0xe000ed0c
 8009b38:	20003178 	.word	0x20003178

08009b3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08a      	sub	sp, #40	@ 0x28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b48:	f7fe fc74 	bl	8008434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009cc0 <pvPortMalloc+0x184>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b54:	f000 f924 	bl	8009da0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b58:	4b5a      	ldr	r3, [pc, #360]	@ (8009cc4 <pvPortMalloc+0x188>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4013      	ands	r3, r2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f040 8095 	bne.w	8009c90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01e      	beq.n	8009baa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f003 0307 	and.w	r3, r3, #7
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d015      	beq.n	8009baa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	3308      	adds	r3, #8
 8009b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <pvPortMalloc+0x6e>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	617b      	str	r3, [r7, #20]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d06f      	beq.n	8009c90 <pvPortMalloc+0x154>
 8009bb0:	4b45      	ldr	r3, [pc, #276]	@ (8009cc8 <pvPortMalloc+0x18c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d86a      	bhi.n	8009c90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bba:	4b44      	ldr	r3, [pc, #272]	@ (8009ccc <pvPortMalloc+0x190>)
 8009bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bbe:	4b43      	ldr	r3, [pc, #268]	@ (8009ccc <pvPortMalloc+0x190>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bc4:	e004      	b.n	8009bd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d903      	bls.n	8009be2 <pvPortMalloc+0xa6>
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1f1      	bne.n	8009bc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009be2:	4b37      	ldr	r3, [pc, #220]	@ (8009cc0 <pvPortMalloc+0x184>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d051      	beq.n	8009c90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	4413      	add	r3, r2
 8009bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	1ad2      	subs	r2, r2, r3
 8009c06:	2308      	movs	r3, #8
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d920      	bls.n	8009c50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4413      	add	r3, r2
 8009c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00b      	beq.n	8009c38 <pvPortMalloc+0xfc>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	613b      	str	r3, [r7, #16]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c4a:	69b8      	ldr	r0, [r7, #24]
 8009c4c:	f000 f90a 	bl	8009e64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c50:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc8 <pvPortMalloc+0x18c>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8009cc8 <pvPortMalloc+0x18c>)
 8009c5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc8 <pvPortMalloc+0x18c>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd0 <pvPortMalloc+0x194>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d203      	bcs.n	8009c72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c6a:	4b17      	ldr	r3, [pc, #92]	@ (8009cc8 <pvPortMalloc+0x18c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a18      	ldr	r2, [pc, #96]	@ (8009cd0 <pvPortMalloc+0x194>)
 8009c70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	4b13      	ldr	r3, [pc, #76]	@ (8009cc4 <pvPortMalloc+0x188>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c86:	4b13      	ldr	r3, [pc, #76]	@ (8009cd4 <pvPortMalloc+0x198>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	4a11      	ldr	r2, [pc, #68]	@ (8009cd4 <pvPortMalloc+0x198>)
 8009c8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c90:	f7fe fbde 	bl	8008450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00b      	beq.n	8009cb6 <pvPortMalloc+0x17a>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	60fb      	str	r3, [r7, #12]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <pvPortMalloc+0x176>
	return pvReturn;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3728      	adds	r7, #40	@ 0x28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20006d84 	.word	0x20006d84
 8009cc4:	20006d98 	.word	0x20006d98
 8009cc8:	20006d88 	.word	0x20006d88
 8009ccc:	20006d7c 	.word	0x20006d7c
 8009cd0:	20006d8c 	.word	0x20006d8c
 8009cd4:	20006d90 	.word	0x20006d90

08009cd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d04f      	beq.n	8009d8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cea:	2308      	movs	r3, #8
 8009cec:	425b      	negs	r3, r3
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	4b25      	ldr	r3, [pc, #148]	@ (8009d94 <vPortFree+0xbc>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4013      	ands	r3, r2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10b      	bne.n	8009d1e <vPortFree+0x46>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60fb      	str	r3, [r7, #12]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00b      	beq.n	8009d3e <vPortFree+0x66>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	60bb      	str	r3, [r7, #8]
}
 8009d38:	bf00      	nop
 8009d3a:	bf00      	nop
 8009d3c:	e7fd      	b.n	8009d3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <vPortFree+0xbc>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4013      	ands	r3, r2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01e      	beq.n	8009d8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d11a      	bne.n	8009d8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	4b0e      	ldr	r3, [pc, #56]	@ (8009d94 <vPortFree+0xbc>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	43db      	mvns	r3, r3
 8009d5e:	401a      	ands	r2, r3
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d64:	f7fe fb66 	bl	8008434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d98 <vPortFree+0xc0>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4413      	add	r3, r2
 8009d72:	4a09      	ldr	r2, [pc, #36]	@ (8009d98 <vPortFree+0xc0>)
 8009d74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d76:	6938      	ldr	r0, [r7, #16]
 8009d78:	f000 f874 	bl	8009e64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d7c:	4b07      	ldr	r3, [pc, #28]	@ (8009d9c <vPortFree+0xc4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3301      	adds	r3, #1
 8009d82:	4a06      	ldr	r2, [pc, #24]	@ (8009d9c <vPortFree+0xc4>)
 8009d84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d86:	f7fe fb63 	bl	8008450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d8a:	bf00      	nop
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20006d98 	.word	0x20006d98
 8009d98:	20006d88 	.word	0x20006d88
 8009d9c:	20006d94 	.word	0x20006d94

08009da0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009da6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009daa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009dac:	4b27      	ldr	r3, [pc, #156]	@ (8009e4c <prvHeapInit+0xac>)
 8009dae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00c      	beq.n	8009dd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3307      	adds	r3, #7
 8009dbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0307 	bic.w	r3, r3, #7
 8009dc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	4a1f      	ldr	r2, [pc, #124]	@ (8009e4c <prvHeapInit+0xac>)
 8009dd0:	4413      	add	r3, r2
 8009dd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e50 <prvHeapInit+0xb0>)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009dde:	4b1c      	ldr	r3, [pc, #112]	@ (8009e50 <prvHeapInit+0xb0>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	4413      	add	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009dec:	2208      	movs	r2, #8
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	1a9b      	subs	r3, r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4a15      	ldr	r2, [pc, #84]	@ (8009e54 <prvHeapInit+0xb4>)
 8009e00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e02:	4b14      	ldr	r3, [pc, #80]	@ (8009e54 <prvHeapInit+0xb4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2200      	movs	r2, #0
 8009e08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e0a:	4b12      	ldr	r3, [pc, #72]	@ (8009e54 <prvHeapInit+0xb4>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	1ad2      	subs	r2, r2, r3
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e20:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <prvHeapInit+0xb4>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8009e58 <prvHeapInit+0xb8>)
 8009e2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	4a09      	ldr	r2, [pc, #36]	@ (8009e5c <prvHeapInit+0xbc>)
 8009e36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e38:	4b09      	ldr	r3, [pc, #36]	@ (8009e60 <prvHeapInit+0xc0>)
 8009e3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e3e:	601a      	str	r2, [r3, #0]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	2000317c 	.word	0x2000317c
 8009e50:	20006d7c 	.word	0x20006d7c
 8009e54:	20006d84 	.word	0x20006d84
 8009e58:	20006d8c 	.word	0x20006d8c
 8009e5c:	20006d88 	.word	0x20006d88
 8009e60:	20006d98 	.word	0x20006d98

08009e64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e6c:	4b28      	ldr	r3, [pc, #160]	@ (8009f10 <prvInsertBlockIntoFreeList+0xac>)
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e002      	b.n	8009e78 <prvInsertBlockIntoFreeList+0x14>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d8f7      	bhi.n	8009e72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d108      	bne.n	8009ea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	441a      	add	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	441a      	add	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d118      	bne.n	8009eec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4b15      	ldr	r3, [pc, #84]	@ (8009f14 <prvInsertBlockIntoFreeList+0xb0>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d00d      	beq.n	8009ee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	e008      	b.n	8009ef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8009f14 <prvInsertBlockIntoFreeList+0xb0>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	e003      	b.n	8009ef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d002      	beq.n	8009f02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f02:	bf00      	nop
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20006d7c 	.word	0x20006d7c
 8009f14:	20006d84 	.word	0x20006d84

08009f18 <atof>:
 8009f18:	2100      	movs	r1, #0
 8009f1a:	f000 be09 	b.w	800ab30 <strtod>

08009f1e <atoi>:
 8009f1e:	220a      	movs	r2, #10
 8009f20:	2100      	movs	r1, #0
 8009f22:	f000 be8d 	b.w	800ac40 <strtol>

08009f26 <sulp>:
 8009f26:	b570      	push	{r4, r5, r6, lr}
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	ec45 4b10 	vmov	d0, r4, r5
 8009f30:	4616      	mov	r6, r2
 8009f32:	f003 f977 	bl	800d224 <__ulp>
 8009f36:	ec51 0b10 	vmov	r0, r1, d0
 8009f3a:	b17e      	cbz	r6, 8009f5c <sulp+0x36>
 8009f3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dd09      	ble.n	8009f5c <sulp+0x36>
 8009f48:	051b      	lsls	r3, r3, #20
 8009f4a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f4e:	2400      	movs	r4, #0
 8009f50:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f54:	4622      	mov	r2, r4
 8009f56:	462b      	mov	r3, r5
 8009f58:	f7f6 fb66 	bl	8000628 <__aeabi_dmul>
 8009f5c:	ec41 0b10 	vmov	d0, r0, r1
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	0000      	movs	r0, r0
 8009f64:	0000      	movs	r0, r0
	...

08009f68 <_strtod_l>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	b09f      	sub	sp, #124	@ 0x7c
 8009f6e:	460c      	mov	r4, r1
 8009f70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f72:	2200      	movs	r2, #0
 8009f74:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f76:	9005      	str	r0, [sp, #20]
 8009f78:	f04f 0a00 	mov.w	sl, #0
 8009f7c:	f04f 0b00 	mov.w	fp, #0
 8009f80:	460a      	mov	r2, r1
 8009f82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f84:	7811      	ldrb	r1, [r2, #0]
 8009f86:	292b      	cmp	r1, #43	@ 0x2b
 8009f88:	d04a      	beq.n	800a020 <_strtod_l+0xb8>
 8009f8a:	d838      	bhi.n	8009ffe <_strtod_l+0x96>
 8009f8c:	290d      	cmp	r1, #13
 8009f8e:	d832      	bhi.n	8009ff6 <_strtod_l+0x8e>
 8009f90:	2908      	cmp	r1, #8
 8009f92:	d832      	bhi.n	8009ffa <_strtod_l+0x92>
 8009f94:	2900      	cmp	r1, #0
 8009f96:	d03b      	beq.n	800a010 <_strtod_l+0xa8>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009f9e:	782a      	ldrb	r2, [r5, #0]
 8009fa0:	2a30      	cmp	r2, #48	@ 0x30
 8009fa2:	f040 80b2 	bne.w	800a10a <_strtod_l+0x1a2>
 8009fa6:	786a      	ldrb	r2, [r5, #1]
 8009fa8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fac:	2a58      	cmp	r2, #88	@ 0x58
 8009fae:	d16e      	bne.n	800a08e <_strtod_l+0x126>
 8009fb0:	9302      	str	r3, [sp, #8]
 8009fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	ab1a      	add	r3, sp, #104	@ 0x68
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	4a8f      	ldr	r2, [pc, #572]	@ (800a1f8 <_strtod_l+0x290>)
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009fc0:	a919      	add	r1, sp, #100	@ 0x64
 8009fc2:	f002 f9dd 	bl	800c380 <__gethex>
 8009fc6:	f010 060f 	ands.w	r6, r0, #15
 8009fca:	4604      	mov	r4, r0
 8009fcc:	d005      	beq.n	8009fda <_strtod_l+0x72>
 8009fce:	2e06      	cmp	r6, #6
 8009fd0:	d128      	bne.n	800a024 <_strtod_l+0xbc>
 8009fd2:	3501      	adds	r5, #1
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009fda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 858e 	bne.w	800aafe <_strtod_l+0xb96>
 8009fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe4:	b1cb      	cbz	r3, 800a01a <_strtod_l+0xb2>
 8009fe6:	4652      	mov	r2, sl
 8009fe8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009fec:	ec43 2b10 	vmov	d0, r2, r3
 8009ff0:	b01f      	add	sp, #124	@ 0x7c
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	2920      	cmp	r1, #32
 8009ff8:	d1ce      	bne.n	8009f98 <_strtod_l+0x30>
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	e7c1      	b.n	8009f82 <_strtod_l+0x1a>
 8009ffe:	292d      	cmp	r1, #45	@ 0x2d
 800a000:	d1ca      	bne.n	8009f98 <_strtod_l+0x30>
 800a002:	2101      	movs	r1, #1
 800a004:	910e      	str	r1, [sp, #56]	@ 0x38
 800a006:	1c51      	adds	r1, r2, #1
 800a008:	9119      	str	r1, [sp, #100]	@ 0x64
 800a00a:	7852      	ldrb	r2, [r2, #1]
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	d1c5      	bne.n	8009f9c <_strtod_l+0x34>
 800a010:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a012:	9419      	str	r4, [sp, #100]	@ 0x64
 800a014:	2b00      	cmp	r3, #0
 800a016:	f040 8570 	bne.w	800aafa <_strtod_l+0xb92>
 800a01a:	4652      	mov	r2, sl
 800a01c:	465b      	mov	r3, fp
 800a01e:	e7e5      	b.n	8009fec <_strtod_l+0x84>
 800a020:	2100      	movs	r1, #0
 800a022:	e7ef      	b.n	800a004 <_strtod_l+0x9c>
 800a024:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a026:	b13a      	cbz	r2, 800a038 <_strtod_l+0xd0>
 800a028:	2135      	movs	r1, #53	@ 0x35
 800a02a:	a81c      	add	r0, sp, #112	@ 0x70
 800a02c:	f003 f9f4 	bl	800d418 <__copybits>
 800a030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a032:	9805      	ldr	r0, [sp, #20]
 800a034:	f002 fdca 	bl	800cbcc <_Bfree>
 800a038:	3e01      	subs	r6, #1
 800a03a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a03c:	2e04      	cmp	r6, #4
 800a03e:	d806      	bhi.n	800a04e <_strtod_l+0xe6>
 800a040:	e8df f006 	tbb	[pc, r6]
 800a044:	201d0314 	.word	0x201d0314
 800a048:	14          	.byte	0x14
 800a049:	00          	.byte	0x00
 800a04a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a04e:	05e1      	lsls	r1, r4, #23
 800a050:	bf48      	it	mi
 800a052:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a056:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a05a:	0d1b      	lsrs	r3, r3, #20
 800a05c:	051b      	lsls	r3, r3, #20
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1bb      	bne.n	8009fda <_strtod_l+0x72>
 800a062:	f002 f865 	bl	800c130 <__errno>
 800a066:	2322      	movs	r3, #34	@ 0x22
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	e7b6      	b.n	8009fda <_strtod_l+0x72>
 800a06c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a070:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a074:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a078:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a07c:	e7e7      	b.n	800a04e <_strtod_l+0xe6>
 800a07e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a200 <_strtod_l+0x298>
 800a082:	e7e4      	b.n	800a04e <_strtod_l+0xe6>
 800a084:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a088:	f04f 3aff 	mov.w	sl, #4294967295
 800a08c:	e7df      	b.n	800a04e <_strtod_l+0xe6>
 800a08e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	9219      	str	r2, [sp, #100]	@ 0x64
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	2b30      	cmp	r3, #48	@ 0x30
 800a098:	d0f9      	beq.n	800a08e <_strtod_l+0x126>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d09d      	beq.n	8009fda <_strtod_l+0x72>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	2700      	movs	r7, #0
 800a0a2:	9308      	str	r3, [sp, #32]
 800a0a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a0aa:	46b9      	mov	r9, r7
 800a0ac:	220a      	movs	r2, #10
 800a0ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0b0:	7805      	ldrb	r5, [r0, #0]
 800a0b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0b6:	b2d9      	uxtb	r1, r3
 800a0b8:	2909      	cmp	r1, #9
 800a0ba:	d928      	bls.n	800a10e <_strtod_l+0x1a6>
 800a0bc:	494f      	ldr	r1, [pc, #316]	@ (800a1fc <_strtod_l+0x294>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f001 f8a0 	bl	800b204 <strncmp>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d032      	beq.n	800a12e <_strtod_l+0x1c6>
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0ce:	464d      	mov	r5, r9
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2a65      	cmp	r2, #101	@ 0x65
 800a0d4:	d001      	beq.n	800a0da <_strtod_l+0x172>
 800a0d6:	2a45      	cmp	r2, #69	@ 0x45
 800a0d8:	d114      	bne.n	800a104 <_strtod_l+0x19c>
 800a0da:	b91d      	cbnz	r5, 800a0e4 <_strtod_l+0x17c>
 800a0dc:	9a08      	ldr	r2, [sp, #32]
 800a0de:	4302      	orrs	r2, r0
 800a0e0:	d096      	beq.n	800a010 <_strtod_l+0xa8>
 800a0e2:	2500      	movs	r5, #0
 800a0e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0e6:	1c62      	adds	r2, r4, #1
 800a0e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0ea:	7862      	ldrb	r2, [r4, #1]
 800a0ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0ee:	d07a      	beq.n	800a1e6 <_strtod_l+0x27e>
 800a0f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0f2:	d07e      	beq.n	800a1f2 <_strtod_l+0x28a>
 800a0f4:	f04f 0c00 	mov.w	ip, #0
 800a0f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a0fc:	2909      	cmp	r1, #9
 800a0fe:	f240 8085 	bls.w	800a20c <_strtod_l+0x2a4>
 800a102:	9419      	str	r4, [sp, #100]	@ 0x64
 800a104:	f04f 0800 	mov.w	r8, #0
 800a108:	e0a5      	b.n	800a256 <_strtod_l+0x2ee>
 800a10a:	2300      	movs	r3, #0
 800a10c:	e7c8      	b.n	800a0a0 <_strtod_l+0x138>
 800a10e:	f1b9 0f08 	cmp.w	r9, #8
 800a112:	bfd8      	it	le
 800a114:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a116:	f100 0001 	add.w	r0, r0, #1
 800a11a:	bfda      	itte	le
 800a11c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a120:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a122:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a126:	f109 0901 	add.w	r9, r9, #1
 800a12a:	9019      	str	r0, [sp, #100]	@ 0x64
 800a12c:	e7bf      	b.n	800a0ae <_strtod_l+0x146>
 800a12e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	9219      	str	r2, [sp, #100]	@ 0x64
 800a134:	785a      	ldrb	r2, [r3, #1]
 800a136:	f1b9 0f00 	cmp.w	r9, #0
 800a13a:	d03b      	beq.n	800a1b4 <_strtod_l+0x24c>
 800a13c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a13e:	464d      	mov	r5, r9
 800a140:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a144:	2b09      	cmp	r3, #9
 800a146:	d912      	bls.n	800a16e <_strtod_l+0x206>
 800a148:	2301      	movs	r3, #1
 800a14a:	e7c2      	b.n	800a0d2 <_strtod_l+0x16a>
 800a14c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	9219      	str	r2, [sp, #100]	@ 0x64
 800a152:	785a      	ldrb	r2, [r3, #1]
 800a154:	3001      	adds	r0, #1
 800a156:	2a30      	cmp	r2, #48	@ 0x30
 800a158:	d0f8      	beq.n	800a14c <_strtod_l+0x1e4>
 800a15a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a15e:	2b08      	cmp	r3, #8
 800a160:	f200 84d2 	bhi.w	800ab08 <_strtod_l+0xba0>
 800a164:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a166:	900a      	str	r0, [sp, #40]	@ 0x28
 800a168:	2000      	movs	r0, #0
 800a16a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a16c:	4605      	mov	r5, r0
 800a16e:	3a30      	subs	r2, #48	@ 0x30
 800a170:	f100 0301 	add.w	r3, r0, #1
 800a174:	d018      	beq.n	800a1a8 <_strtod_l+0x240>
 800a176:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a178:	4419      	add	r1, r3
 800a17a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a17c:	462e      	mov	r6, r5
 800a17e:	f04f 0e0a 	mov.w	lr, #10
 800a182:	1c71      	adds	r1, r6, #1
 800a184:	eba1 0c05 	sub.w	ip, r1, r5
 800a188:	4563      	cmp	r3, ip
 800a18a:	dc15      	bgt.n	800a1b8 <_strtod_l+0x250>
 800a18c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a190:	182b      	adds	r3, r5, r0
 800a192:	2b08      	cmp	r3, #8
 800a194:	f105 0501 	add.w	r5, r5, #1
 800a198:	4405      	add	r5, r0
 800a19a:	dc1a      	bgt.n	800a1d2 <_strtod_l+0x26a>
 800a19c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a19e:	230a      	movs	r3, #10
 800a1a0:	fb03 2301 	mla	r3, r3, r1, r2
 800a1a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1aa:	1c51      	adds	r1, r2, #1
 800a1ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1ae:	7852      	ldrb	r2, [r2, #1]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	e7c5      	b.n	800a140 <_strtod_l+0x1d8>
 800a1b4:	4648      	mov	r0, r9
 800a1b6:	e7ce      	b.n	800a156 <_strtod_l+0x1ee>
 800a1b8:	2e08      	cmp	r6, #8
 800a1ba:	dc05      	bgt.n	800a1c8 <_strtod_l+0x260>
 800a1bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a1be:	fb0e f606 	mul.w	r6, lr, r6
 800a1c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a1c4:	460e      	mov	r6, r1
 800a1c6:	e7dc      	b.n	800a182 <_strtod_l+0x21a>
 800a1c8:	2910      	cmp	r1, #16
 800a1ca:	bfd8      	it	le
 800a1cc:	fb0e f707 	mulle.w	r7, lr, r7
 800a1d0:	e7f8      	b.n	800a1c4 <_strtod_l+0x25c>
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	bfdc      	itt	le
 800a1d6:	230a      	movle	r3, #10
 800a1d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800a1dc:	e7e3      	b.n	800a1a6 <_strtod_l+0x23e>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e77a      	b.n	800a0dc <_strtod_l+0x174>
 800a1e6:	f04f 0c00 	mov.w	ip, #0
 800a1ea:	1ca2      	adds	r2, r4, #2
 800a1ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1ee:	78a2      	ldrb	r2, [r4, #2]
 800a1f0:	e782      	b.n	800a0f8 <_strtod_l+0x190>
 800a1f2:	f04f 0c01 	mov.w	ip, #1
 800a1f6:	e7f8      	b.n	800a1ea <_strtod_l+0x282>
 800a1f8:	0800f77c 	.word	0x0800f77c
 800a1fc:	0800f46c 	.word	0x0800f46c
 800a200:	7ff00000 	.word	0x7ff00000
 800a204:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a206:	1c51      	adds	r1, r2, #1
 800a208:	9119      	str	r1, [sp, #100]	@ 0x64
 800a20a:	7852      	ldrb	r2, [r2, #1]
 800a20c:	2a30      	cmp	r2, #48	@ 0x30
 800a20e:	d0f9      	beq.n	800a204 <_strtod_l+0x29c>
 800a210:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a214:	2908      	cmp	r1, #8
 800a216:	f63f af75 	bhi.w	800a104 <_strtod_l+0x19c>
 800a21a:	3a30      	subs	r2, #48	@ 0x30
 800a21c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a21e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a220:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a222:	f04f 080a 	mov.w	r8, #10
 800a226:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a228:	1c56      	adds	r6, r2, #1
 800a22a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a22c:	7852      	ldrb	r2, [r2, #1]
 800a22e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a232:	f1be 0f09 	cmp.w	lr, #9
 800a236:	d939      	bls.n	800a2ac <_strtod_l+0x344>
 800a238:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a23a:	1a76      	subs	r6, r6, r1
 800a23c:	2e08      	cmp	r6, #8
 800a23e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a242:	dc03      	bgt.n	800a24c <_strtod_l+0x2e4>
 800a244:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a246:	4588      	cmp	r8, r1
 800a248:	bfa8      	it	ge
 800a24a:	4688      	movge	r8, r1
 800a24c:	f1bc 0f00 	cmp.w	ip, #0
 800a250:	d001      	beq.n	800a256 <_strtod_l+0x2ee>
 800a252:	f1c8 0800 	rsb	r8, r8, #0
 800a256:	2d00      	cmp	r5, #0
 800a258:	d14e      	bne.n	800a2f8 <_strtod_l+0x390>
 800a25a:	9908      	ldr	r1, [sp, #32]
 800a25c:	4308      	orrs	r0, r1
 800a25e:	f47f aebc 	bne.w	8009fda <_strtod_l+0x72>
 800a262:	2b00      	cmp	r3, #0
 800a264:	f47f aed4 	bne.w	800a010 <_strtod_l+0xa8>
 800a268:	2a69      	cmp	r2, #105	@ 0x69
 800a26a:	d028      	beq.n	800a2be <_strtod_l+0x356>
 800a26c:	dc25      	bgt.n	800a2ba <_strtod_l+0x352>
 800a26e:	2a49      	cmp	r2, #73	@ 0x49
 800a270:	d025      	beq.n	800a2be <_strtod_l+0x356>
 800a272:	2a4e      	cmp	r2, #78	@ 0x4e
 800a274:	f47f aecc 	bne.w	800a010 <_strtod_l+0xa8>
 800a278:	499a      	ldr	r1, [pc, #616]	@ (800a4e4 <_strtod_l+0x57c>)
 800a27a:	a819      	add	r0, sp, #100	@ 0x64
 800a27c:	f002 faa2 	bl	800c7c4 <__match>
 800a280:	2800      	cmp	r0, #0
 800a282:	f43f aec5 	beq.w	800a010 <_strtod_l+0xa8>
 800a286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b28      	cmp	r3, #40	@ 0x28
 800a28c:	d12e      	bne.n	800a2ec <_strtod_l+0x384>
 800a28e:	4996      	ldr	r1, [pc, #600]	@ (800a4e8 <_strtod_l+0x580>)
 800a290:	aa1c      	add	r2, sp, #112	@ 0x70
 800a292:	a819      	add	r0, sp, #100	@ 0x64
 800a294:	f002 faaa 	bl	800c7ec <__hexnan>
 800a298:	2805      	cmp	r0, #5
 800a29a:	d127      	bne.n	800a2ec <_strtod_l+0x384>
 800a29c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a29e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a2a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a2a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a2aa:	e696      	b.n	8009fda <_strtod_l+0x72>
 800a2ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2ae:	fb08 2101 	mla	r1, r8, r1, r2
 800a2b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2b8:	e7b5      	b.n	800a226 <_strtod_l+0x2be>
 800a2ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2bc:	e7da      	b.n	800a274 <_strtod_l+0x30c>
 800a2be:	498b      	ldr	r1, [pc, #556]	@ (800a4ec <_strtod_l+0x584>)
 800a2c0:	a819      	add	r0, sp, #100	@ 0x64
 800a2c2:	f002 fa7f 	bl	800c7c4 <__match>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f aea2 	beq.w	800a010 <_strtod_l+0xa8>
 800a2cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2ce:	4988      	ldr	r1, [pc, #544]	@ (800a4f0 <_strtod_l+0x588>)
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	a819      	add	r0, sp, #100	@ 0x64
 800a2d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2d6:	f002 fa75 	bl	800c7c4 <__match>
 800a2da:	b910      	cbnz	r0, 800a2e2 <_strtod_l+0x37a>
 800a2dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2de:	3301      	adds	r3, #1
 800a2e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a500 <_strtod_l+0x598>
 800a2e6:	f04f 0a00 	mov.w	sl, #0
 800a2ea:	e676      	b.n	8009fda <_strtod_l+0x72>
 800a2ec:	4881      	ldr	r0, [pc, #516]	@ (800a4f4 <_strtod_l+0x58c>)
 800a2ee:	f001 ff67 	bl	800c1c0 <nan>
 800a2f2:	ec5b ab10 	vmov	sl, fp, d0
 800a2f6:	e670      	b.n	8009fda <_strtod_l+0x72>
 800a2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a2fc:	eba8 0303 	sub.w	r3, r8, r3
 800a300:	f1b9 0f00 	cmp.w	r9, #0
 800a304:	bf08      	it	eq
 800a306:	46a9      	moveq	r9, r5
 800a308:	2d10      	cmp	r5, #16
 800a30a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a30c:	462c      	mov	r4, r5
 800a30e:	bfa8      	it	ge
 800a310:	2410      	movge	r4, #16
 800a312:	f7f6 f90f 	bl	8000534 <__aeabi_ui2d>
 800a316:	2d09      	cmp	r5, #9
 800a318:	4682      	mov	sl, r0
 800a31a:	468b      	mov	fp, r1
 800a31c:	dc13      	bgt.n	800a346 <_strtod_l+0x3de>
 800a31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	f43f ae5a 	beq.w	8009fda <_strtod_l+0x72>
 800a326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a328:	dd78      	ble.n	800a41c <_strtod_l+0x4b4>
 800a32a:	2b16      	cmp	r3, #22
 800a32c:	dc5f      	bgt.n	800a3ee <_strtod_l+0x486>
 800a32e:	4972      	ldr	r1, [pc, #456]	@ (800a4f8 <_strtod_l+0x590>)
 800a330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	f7f6 f974 	bl	8000628 <__aeabi_dmul>
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	e649      	b.n	8009fda <_strtod_l+0x72>
 800a346:	4b6c      	ldr	r3, [pc, #432]	@ (800a4f8 <_strtod_l+0x590>)
 800a348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a34c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a350:	f7f6 f96a 	bl	8000628 <__aeabi_dmul>
 800a354:	4682      	mov	sl, r0
 800a356:	4638      	mov	r0, r7
 800a358:	468b      	mov	fp, r1
 800a35a:	f7f6 f8eb 	bl	8000534 <__aeabi_ui2d>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4650      	mov	r0, sl
 800a364:	4659      	mov	r1, fp
 800a366:	f7f5 ffa9 	bl	80002bc <__adddf3>
 800a36a:	2d0f      	cmp	r5, #15
 800a36c:	4682      	mov	sl, r0
 800a36e:	468b      	mov	fp, r1
 800a370:	ddd5      	ble.n	800a31e <_strtod_l+0x3b6>
 800a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a374:	1b2c      	subs	r4, r5, r4
 800a376:	441c      	add	r4, r3
 800a378:	2c00      	cmp	r4, #0
 800a37a:	f340 8093 	ble.w	800a4a4 <_strtod_l+0x53c>
 800a37e:	f014 030f 	ands.w	r3, r4, #15
 800a382:	d00a      	beq.n	800a39a <_strtod_l+0x432>
 800a384:	495c      	ldr	r1, [pc, #368]	@ (800a4f8 <_strtod_l+0x590>)
 800a386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a38a:	4652      	mov	r2, sl
 800a38c:	465b      	mov	r3, fp
 800a38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a392:	f7f6 f949 	bl	8000628 <__aeabi_dmul>
 800a396:	4682      	mov	sl, r0
 800a398:	468b      	mov	fp, r1
 800a39a:	f034 040f 	bics.w	r4, r4, #15
 800a39e:	d073      	beq.n	800a488 <_strtod_l+0x520>
 800a3a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a3a4:	dd49      	ble.n	800a43a <_strtod_l+0x4d2>
 800a3a6:	2400      	movs	r4, #0
 800a3a8:	46a0      	mov	r8, r4
 800a3aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3ac:	46a1      	mov	r9, r4
 800a3ae:	9a05      	ldr	r2, [sp, #20]
 800a3b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a500 <_strtod_l+0x598>
 800a3b4:	2322      	movs	r3, #34	@ 0x22
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	f04f 0a00 	mov.w	sl, #0
 800a3bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f43f ae0b 	beq.w	8009fda <_strtod_l+0x72>
 800a3c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3c6:	9805      	ldr	r0, [sp, #20]
 800a3c8:	f002 fc00 	bl	800cbcc <_Bfree>
 800a3cc:	9805      	ldr	r0, [sp, #20]
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	f002 fbfc 	bl	800cbcc <_Bfree>
 800a3d4:	9805      	ldr	r0, [sp, #20]
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	f002 fbf8 	bl	800cbcc <_Bfree>
 800a3dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3de:	9805      	ldr	r0, [sp, #20]
 800a3e0:	f002 fbf4 	bl	800cbcc <_Bfree>
 800a3e4:	9805      	ldr	r0, [sp, #20]
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f002 fbf0 	bl	800cbcc <_Bfree>
 800a3ec:	e5f5      	b.n	8009fda <_strtod_l+0x72>
 800a3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	dbbc      	blt.n	800a372 <_strtod_l+0x40a>
 800a3f8:	4c3f      	ldr	r4, [pc, #252]	@ (800a4f8 <_strtod_l+0x590>)
 800a3fa:	f1c5 050f 	rsb	r5, r5, #15
 800a3fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40a:	f7f6 f90d 	bl	8000628 <__aeabi_dmul>
 800a40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a410:	1b5d      	subs	r5, r3, r5
 800a412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a41a:	e78f      	b.n	800a33c <_strtod_l+0x3d4>
 800a41c:	3316      	adds	r3, #22
 800a41e:	dba8      	blt.n	800a372 <_strtod_l+0x40a>
 800a420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a422:	eba3 0808 	sub.w	r8, r3, r8
 800a426:	4b34      	ldr	r3, [pc, #208]	@ (800a4f8 <_strtod_l+0x590>)
 800a428:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a42c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a430:	4650      	mov	r0, sl
 800a432:	4659      	mov	r1, fp
 800a434:	f7f6 fa22 	bl	800087c <__aeabi_ddiv>
 800a438:	e782      	b.n	800a340 <_strtod_l+0x3d8>
 800a43a:	2300      	movs	r3, #0
 800a43c:	4f2f      	ldr	r7, [pc, #188]	@ (800a4fc <_strtod_l+0x594>)
 800a43e:	1124      	asrs	r4, r4, #4
 800a440:	4650      	mov	r0, sl
 800a442:	4659      	mov	r1, fp
 800a444:	461e      	mov	r6, r3
 800a446:	2c01      	cmp	r4, #1
 800a448:	dc21      	bgt.n	800a48e <_strtod_l+0x526>
 800a44a:	b10b      	cbz	r3, 800a450 <_strtod_l+0x4e8>
 800a44c:	4682      	mov	sl, r0
 800a44e:	468b      	mov	fp, r1
 800a450:	492a      	ldr	r1, [pc, #168]	@ (800a4fc <_strtod_l+0x594>)
 800a452:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a456:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a45a:	4652      	mov	r2, sl
 800a45c:	465b      	mov	r3, fp
 800a45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a462:	f7f6 f8e1 	bl	8000628 <__aeabi_dmul>
 800a466:	4b26      	ldr	r3, [pc, #152]	@ (800a500 <_strtod_l+0x598>)
 800a468:	460a      	mov	r2, r1
 800a46a:	400b      	ands	r3, r1
 800a46c:	4925      	ldr	r1, [pc, #148]	@ (800a504 <_strtod_l+0x59c>)
 800a46e:	428b      	cmp	r3, r1
 800a470:	4682      	mov	sl, r0
 800a472:	d898      	bhi.n	800a3a6 <_strtod_l+0x43e>
 800a474:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf86      	itte	hi
 800a47c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a508 <_strtod_l+0x5a0>
 800a480:	f04f 3aff 	movhi.w	sl, #4294967295
 800a484:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a488:	2300      	movs	r3, #0
 800a48a:	9308      	str	r3, [sp, #32]
 800a48c:	e076      	b.n	800a57c <_strtod_l+0x614>
 800a48e:	07e2      	lsls	r2, r4, #31
 800a490:	d504      	bpl.n	800a49c <_strtod_l+0x534>
 800a492:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a496:	f7f6 f8c7 	bl	8000628 <__aeabi_dmul>
 800a49a:	2301      	movs	r3, #1
 800a49c:	3601      	adds	r6, #1
 800a49e:	1064      	asrs	r4, r4, #1
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	e7d0      	b.n	800a446 <_strtod_l+0x4de>
 800a4a4:	d0f0      	beq.n	800a488 <_strtod_l+0x520>
 800a4a6:	4264      	negs	r4, r4
 800a4a8:	f014 020f 	ands.w	r2, r4, #15
 800a4ac:	d00a      	beq.n	800a4c4 <_strtod_l+0x55c>
 800a4ae:	4b12      	ldr	r3, [pc, #72]	@ (800a4f8 <_strtod_l+0x590>)
 800a4b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	4659      	mov	r1, fp
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f6 f9de 	bl	800087c <__aeabi_ddiv>
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	468b      	mov	fp, r1
 800a4c4:	1124      	asrs	r4, r4, #4
 800a4c6:	d0df      	beq.n	800a488 <_strtod_l+0x520>
 800a4c8:	2c1f      	cmp	r4, #31
 800a4ca:	dd1f      	ble.n	800a50c <_strtod_l+0x5a4>
 800a4cc:	2400      	movs	r4, #0
 800a4ce:	46a0      	mov	r8, r4
 800a4d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4d2:	46a1      	mov	r9, r4
 800a4d4:	9a05      	ldr	r2, [sp, #20]
 800a4d6:	2322      	movs	r3, #34	@ 0x22
 800a4d8:	f04f 0a00 	mov.w	sl, #0
 800a4dc:	f04f 0b00 	mov.w	fp, #0
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	e76b      	b.n	800a3bc <_strtod_l+0x454>
 800a4e4:	0800f477 	.word	0x0800f477
 800a4e8:	0800f768 	.word	0x0800f768
 800a4ec:	0800f46e 	.word	0x0800f46e
 800a4f0:	0800f471 	.word	0x0800f471
 800a4f4:	0800f766 	.word	0x0800f766
 800a4f8:	0800f9b0 	.word	0x0800f9b0
 800a4fc:	0800f988 	.word	0x0800f988
 800a500:	7ff00000 	.word	0x7ff00000
 800a504:	7ca00000 	.word	0x7ca00000
 800a508:	7fefffff 	.word	0x7fefffff
 800a50c:	f014 0310 	ands.w	r3, r4, #16
 800a510:	bf18      	it	ne
 800a512:	236a      	movne	r3, #106	@ 0x6a
 800a514:	4ea9      	ldr	r6, [pc, #676]	@ (800a7bc <_strtod_l+0x854>)
 800a516:	9308      	str	r3, [sp, #32]
 800a518:	4650      	mov	r0, sl
 800a51a:	4659      	mov	r1, fp
 800a51c:	2300      	movs	r3, #0
 800a51e:	07e7      	lsls	r7, r4, #31
 800a520:	d504      	bpl.n	800a52c <_strtod_l+0x5c4>
 800a522:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a526:	f7f6 f87f 	bl	8000628 <__aeabi_dmul>
 800a52a:	2301      	movs	r3, #1
 800a52c:	1064      	asrs	r4, r4, #1
 800a52e:	f106 0608 	add.w	r6, r6, #8
 800a532:	d1f4      	bne.n	800a51e <_strtod_l+0x5b6>
 800a534:	b10b      	cbz	r3, 800a53a <_strtod_l+0x5d2>
 800a536:	4682      	mov	sl, r0
 800a538:	468b      	mov	fp, r1
 800a53a:	9b08      	ldr	r3, [sp, #32]
 800a53c:	b1b3      	cbz	r3, 800a56c <_strtod_l+0x604>
 800a53e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a542:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a546:	2b00      	cmp	r3, #0
 800a548:	4659      	mov	r1, fp
 800a54a:	dd0f      	ble.n	800a56c <_strtod_l+0x604>
 800a54c:	2b1f      	cmp	r3, #31
 800a54e:	dd56      	ble.n	800a5fe <_strtod_l+0x696>
 800a550:	2b34      	cmp	r3, #52	@ 0x34
 800a552:	bfde      	ittt	le
 800a554:	f04f 33ff 	movle.w	r3, #4294967295
 800a558:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a55c:	4093      	lslle	r3, r2
 800a55e:	f04f 0a00 	mov.w	sl, #0
 800a562:	bfcc      	ite	gt
 800a564:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a568:	ea03 0b01 	andle.w	fp, r3, r1
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	4650      	mov	r0, sl
 800a572:	4659      	mov	r1, fp
 800a574:	f7f6 fac0 	bl	8000af8 <__aeabi_dcmpeq>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d1a7      	bne.n	800a4cc <_strtod_l+0x564>
 800a57c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a582:	9805      	ldr	r0, [sp, #20]
 800a584:	462b      	mov	r3, r5
 800a586:	464a      	mov	r2, r9
 800a588:	f002 fb88 	bl	800cc9c <__s2b>
 800a58c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a58e:	2800      	cmp	r0, #0
 800a590:	f43f af09 	beq.w	800a3a6 <_strtod_l+0x43e>
 800a594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a598:	2a00      	cmp	r2, #0
 800a59a:	eba3 0308 	sub.w	r3, r3, r8
 800a59e:	bfa8      	it	ge
 800a5a0:	2300      	movge	r3, #0
 800a5a2:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5a4:	2400      	movs	r4, #0
 800a5a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800a5ac:	46a0      	mov	r8, r4
 800a5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5b0:	9805      	ldr	r0, [sp, #20]
 800a5b2:	6859      	ldr	r1, [r3, #4]
 800a5b4:	f002 faca 	bl	800cb4c <_Balloc>
 800a5b8:	4681      	mov	r9, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f aef7 	beq.w	800a3ae <_strtod_l+0x446>
 800a5c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5c2:	691a      	ldr	r2, [r3, #16]
 800a5c4:	3202      	adds	r2, #2
 800a5c6:	f103 010c 	add.w	r1, r3, #12
 800a5ca:	0092      	lsls	r2, r2, #2
 800a5cc:	300c      	adds	r0, #12
 800a5ce:	f001 fde6 	bl	800c19e <memcpy>
 800a5d2:	ec4b ab10 	vmov	d0, sl, fp
 800a5d6:	9805      	ldr	r0, [sp, #20]
 800a5d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a5da:	a91b      	add	r1, sp, #108	@ 0x6c
 800a5dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5e0:	f002 fe90 	bl	800d304 <__d2b>
 800a5e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f43f aee1 	beq.w	800a3ae <_strtod_l+0x446>
 800a5ec:	9805      	ldr	r0, [sp, #20]
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	f002 fbea 	bl	800cdc8 <__i2b>
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	b948      	cbnz	r0, 800a60c <_strtod_l+0x6a4>
 800a5f8:	f04f 0800 	mov.w	r8, #0
 800a5fc:	e6d7      	b.n	800a3ae <_strtod_l+0x446>
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a602:	fa02 f303 	lsl.w	r3, r2, r3
 800a606:	ea03 0a0a 	and.w	sl, r3, sl
 800a60a:	e7af      	b.n	800a56c <_strtod_l+0x604>
 800a60c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a60e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a610:	2d00      	cmp	r5, #0
 800a612:	bfab      	itete	ge
 800a614:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a616:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a618:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a61a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a61c:	bfac      	ite	ge
 800a61e:	18ef      	addge	r7, r5, r3
 800a620:	1b5e      	sublt	r6, r3, r5
 800a622:	9b08      	ldr	r3, [sp, #32]
 800a624:	1aed      	subs	r5, r5, r3
 800a626:	4415      	add	r5, r2
 800a628:	4b65      	ldr	r3, [pc, #404]	@ (800a7c0 <_strtod_l+0x858>)
 800a62a:	3d01      	subs	r5, #1
 800a62c:	429d      	cmp	r5, r3
 800a62e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a632:	da50      	bge.n	800a6d6 <_strtod_l+0x76e>
 800a634:	1b5b      	subs	r3, r3, r5
 800a636:	2b1f      	cmp	r3, #31
 800a638:	eba2 0203 	sub.w	r2, r2, r3
 800a63c:	f04f 0101 	mov.w	r1, #1
 800a640:	dc3d      	bgt.n	800a6be <_strtod_l+0x756>
 800a642:	fa01 f303 	lsl.w	r3, r1, r3
 800a646:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a648:	2300      	movs	r3, #0
 800a64a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a64c:	18bd      	adds	r5, r7, r2
 800a64e:	9b08      	ldr	r3, [sp, #32]
 800a650:	42af      	cmp	r7, r5
 800a652:	4416      	add	r6, r2
 800a654:	441e      	add	r6, r3
 800a656:	463b      	mov	r3, r7
 800a658:	bfa8      	it	ge
 800a65a:	462b      	movge	r3, r5
 800a65c:	42b3      	cmp	r3, r6
 800a65e:	bfa8      	it	ge
 800a660:	4633      	movge	r3, r6
 800a662:	2b00      	cmp	r3, #0
 800a664:	bfc2      	ittt	gt
 800a666:	1aed      	subgt	r5, r5, r3
 800a668:	1af6      	subgt	r6, r6, r3
 800a66a:	1aff      	subgt	r7, r7, r3
 800a66c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dd16      	ble.n	800a6a0 <_strtod_l+0x738>
 800a672:	4641      	mov	r1, r8
 800a674:	9805      	ldr	r0, [sp, #20]
 800a676:	461a      	mov	r2, r3
 800a678:	f002 fc5e 	bl	800cf38 <__pow5mult>
 800a67c:	4680      	mov	r8, r0
 800a67e:	2800      	cmp	r0, #0
 800a680:	d0ba      	beq.n	800a5f8 <_strtod_l+0x690>
 800a682:	4601      	mov	r1, r0
 800a684:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a686:	9805      	ldr	r0, [sp, #20]
 800a688:	f002 fbb4 	bl	800cdf4 <__multiply>
 800a68c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a68e:	2800      	cmp	r0, #0
 800a690:	f43f ae8d 	beq.w	800a3ae <_strtod_l+0x446>
 800a694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a696:	9805      	ldr	r0, [sp, #20]
 800a698:	f002 fa98 	bl	800cbcc <_Bfree>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a69e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	dc1d      	bgt.n	800a6e0 <_strtod_l+0x778>
 800a6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dd23      	ble.n	800a6f2 <_strtod_l+0x78a>
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a6ae:	9805      	ldr	r0, [sp, #20]
 800a6b0:	f002 fc42 	bl	800cf38 <__pow5mult>
 800a6b4:	4681      	mov	r9, r0
 800a6b6:	b9e0      	cbnz	r0, 800a6f2 <_strtod_l+0x78a>
 800a6b8:	f04f 0900 	mov.w	r9, #0
 800a6bc:	e677      	b.n	800a3ae <_strtod_l+0x446>
 800a6be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a6ca:	35e2      	adds	r5, #226	@ 0xe2
 800a6cc:	fa01 f305 	lsl.w	r3, r1, r5
 800a6d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6d4:	e7ba      	b.n	800a64c <_strtod_l+0x6e4>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6da:	2301      	movs	r3, #1
 800a6dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6de:	e7b5      	b.n	800a64c <_strtod_l+0x6e4>
 800a6e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6e2:	9805      	ldr	r0, [sp, #20]
 800a6e4:	462a      	mov	r2, r5
 800a6e6:	f002 fc81 	bl	800cfec <__lshift>
 800a6ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1d9      	bne.n	800a6a4 <_strtod_l+0x73c>
 800a6f0:	e65d      	b.n	800a3ae <_strtod_l+0x446>
 800a6f2:	2e00      	cmp	r6, #0
 800a6f4:	dd07      	ble.n	800a706 <_strtod_l+0x79e>
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	9805      	ldr	r0, [sp, #20]
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	f002 fc76 	bl	800cfec <__lshift>
 800a700:	4681      	mov	r9, r0
 800a702:	2800      	cmp	r0, #0
 800a704:	d0d8      	beq.n	800a6b8 <_strtod_l+0x750>
 800a706:	2f00      	cmp	r7, #0
 800a708:	dd08      	ble.n	800a71c <_strtod_l+0x7b4>
 800a70a:	4641      	mov	r1, r8
 800a70c:	9805      	ldr	r0, [sp, #20]
 800a70e:	463a      	mov	r2, r7
 800a710:	f002 fc6c 	bl	800cfec <__lshift>
 800a714:	4680      	mov	r8, r0
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f ae49 	beq.w	800a3ae <_strtod_l+0x446>
 800a71c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a71e:	9805      	ldr	r0, [sp, #20]
 800a720:	464a      	mov	r2, r9
 800a722:	f002 fceb 	bl	800d0fc <__mdiff>
 800a726:	4604      	mov	r4, r0
 800a728:	2800      	cmp	r0, #0
 800a72a:	f43f ae40 	beq.w	800a3ae <_strtod_l+0x446>
 800a72e:	68c3      	ldr	r3, [r0, #12]
 800a730:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a732:	2300      	movs	r3, #0
 800a734:	60c3      	str	r3, [r0, #12]
 800a736:	4641      	mov	r1, r8
 800a738:	f002 fcc4 	bl	800d0c4 <__mcmp>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	da45      	bge.n	800a7cc <_strtod_l+0x864>
 800a740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a742:	ea53 030a 	orrs.w	r3, r3, sl
 800a746:	d16b      	bne.n	800a820 <_strtod_l+0x8b8>
 800a748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d167      	bne.n	800a820 <_strtod_l+0x8b8>
 800a750:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a754:	0d1b      	lsrs	r3, r3, #20
 800a756:	051b      	lsls	r3, r3, #20
 800a758:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a75c:	d960      	bls.n	800a820 <_strtod_l+0x8b8>
 800a75e:	6963      	ldr	r3, [r4, #20]
 800a760:	b913      	cbnz	r3, 800a768 <_strtod_l+0x800>
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	2b01      	cmp	r3, #1
 800a766:	dd5b      	ble.n	800a820 <_strtod_l+0x8b8>
 800a768:	4621      	mov	r1, r4
 800a76a:	2201      	movs	r2, #1
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	f002 fc3d 	bl	800cfec <__lshift>
 800a772:	4641      	mov	r1, r8
 800a774:	4604      	mov	r4, r0
 800a776:	f002 fca5 	bl	800d0c4 <__mcmp>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	dd50      	ble.n	800a820 <_strtod_l+0x8b8>
 800a77e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a782:	9a08      	ldr	r2, [sp, #32]
 800a784:	0d1b      	lsrs	r3, r3, #20
 800a786:	051b      	lsls	r3, r3, #20
 800a788:	2a00      	cmp	r2, #0
 800a78a:	d06a      	beq.n	800a862 <_strtod_l+0x8fa>
 800a78c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a790:	d867      	bhi.n	800a862 <_strtod_l+0x8fa>
 800a792:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a796:	f67f ae9d 	bls.w	800a4d4 <_strtod_l+0x56c>
 800a79a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <_strtod_l+0x85c>)
 800a79c:	4650      	mov	r0, sl
 800a79e:	4659      	mov	r1, fp
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7f5 ff41 	bl	8000628 <__aeabi_dmul>
 800a7a6:	4b08      	ldr	r3, [pc, #32]	@ (800a7c8 <_strtod_l+0x860>)
 800a7a8:	400b      	ands	r3, r1
 800a7aa:	4682      	mov	sl, r0
 800a7ac:	468b      	mov	fp, r1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f47f ae08 	bne.w	800a3c4 <_strtod_l+0x45c>
 800a7b4:	9a05      	ldr	r2, [sp, #20]
 800a7b6:	2322      	movs	r3, #34	@ 0x22
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e603      	b.n	800a3c4 <_strtod_l+0x45c>
 800a7bc:	0800f790 	.word	0x0800f790
 800a7c0:	fffffc02 	.word	0xfffffc02
 800a7c4:	39500000 	.word	0x39500000
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a7d0:	d165      	bne.n	800a89e <_strtod_l+0x936>
 800a7d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a7d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7d8:	b35a      	cbz	r2, 800a832 <_strtod_l+0x8ca>
 800a7da:	4a9f      	ldr	r2, [pc, #636]	@ (800aa58 <_strtod_l+0xaf0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d12b      	bne.n	800a838 <_strtod_l+0x8d0>
 800a7e0:	9b08      	ldr	r3, [sp, #32]
 800a7e2:	4651      	mov	r1, sl
 800a7e4:	b303      	cbz	r3, 800a828 <_strtod_l+0x8c0>
 800a7e6:	4b9d      	ldr	r3, [pc, #628]	@ (800aa5c <_strtod_l+0xaf4>)
 800a7e8:	465a      	mov	r2, fp
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f4:	d81b      	bhi.n	800a82e <_strtod_l+0x8c6>
 800a7f6:	0d1b      	lsrs	r3, r3, #20
 800a7f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	4299      	cmp	r1, r3
 800a802:	d119      	bne.n	800a838 <_strtod_l+0x8d0>
 800a804:	4b96      	ldr	r3, [pc, #600]	@ (800aa60 <_strtod_l+0xaf8>)
 800a806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a808:	429a      	cmp	r2, r3
 800a80a:	d102      	bne.n	800a812 <_strtod_l+0x8aa>
 800a80c:	3101      	adds	r1, #1
 800a80e:	f43f adce 	beq.w	800a3ae <_strtod_l+0x446>
 800a812:	4b92      	ldr	r3, [pc, #584]	@ (800aa5c <_strtod_l+0xaf4>)
 800a814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a816:	401a      	ands	r2, r3
 800a818:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a81c:	f04f 0a00 	mov.w	sl, #0
 800a820:	9b08      	ldr	r3, [sp, #32]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1b9      	bne.n	800a79a <_strtod_l+0x832>
 800a826:	e5cd      	b.n	800a3c4 <_strtod_l+0x45c>
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	e7e8      	b.n	800a800 <_strtod_l+0x898>
 800a82e:	4613      	mov	r3, r2
 800a830:	e7e6      	b.n	800a800 <_strtod_l+0x898>
 800a832:	ea53 030a 	orrs.w	r3, r3, sl
 800a836:	d0a2      	beq.n	800a77e <_strtod_l+0x816>
 800a838:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a83a:	b1db      	cbz	r3, 800a874 <_strtod_l+0x90c>
 800a83c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a83e:	4213      	tst	r3, r2
 800a840:	d0ee      	beq.n	800a820 <_strtod_l+0x8b8>
 800a842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a844:	9a08      	ldr	r2, [sp, #32]
 800a846:	4650      	mov	r0, sl
 800a848:	4659      	mov	r1, fp
 800a84a:	b1bb      	cbz	r3, 800a87c <_strtod_l+0x914>
 800a84c:	f7ff fb6b 	bl	8009f26 <sulp>
 800a850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a854:	ec53 2b10 	vmov	r2, r3, d0
 800a858:	f7f5 fd30 	bl	80002bc <__adddf3>
 800a85c:	4682      	mov	sl, r0
 800a85e:	468b      	mov	fp, r1
 800a860:	e7de      	b.n	800a820 <_strtod_l+0x8b8>
 800a862:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a866:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a86a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a86e:	f04f 3aff 	mov.w	sl, #4294967295
 800a872:	e7d5      	b.n	800a820 <_strtod_l+0x8b8>
 800a874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a876:	ea13 0f0a 	tst.w	r3, sl
 800a87a:	e7e1      	b.n	800a840 <_strtod_l+0x8d8>
 800a87c:	f7ff fb53 	bl	8009f26 <sulp>
 800a880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a884:	ec53 2b10 	vmov	r2, r3, d0
 800a888:	f7f5 fd16 	bl	80002b8 <__aeabi_dsub>
 800a88c:	2200      	movs	r2, #0
 800a88e:	2300      	movs	r3, #0
 800a890:	4682      	mov	sl, r0
 800a892:	468b      	mov	fp, r1
 800a894:	f7f6 f930 	bl	8000af8 <__aeabi_dcmpeq>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d0c1      	beq.n	800a820 <_strtod_l+0x8b8>
 800a89c:	e61a      	b.n	800a4d4 <_strtod_l+0x56c>
 800a89e:	4641      	mov	r1, r8
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f002 fd87 	bl	800d3b4 <__ratio>
 800a8a6:	ec57 6b10 	vmov	r6, r7, d0
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f6 f934 	bl	8000b20 <__aeabi_dcmple>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d06f      	beq.n	800a99c <_strtod_l+0xa34>
 800a8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d17a      	bne.n	800a9b8 <_strtod_l+0xa50>
 800a8c2:	f1ba 0f00 	cmp.w	sl, #0
 800a8c6:	d158      	bne.n	800a97a <_strtod_l+0xa12>
 800a8c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d15a      	bne.n	800a988 <_strtod_l+0xa20>
 800a8d2:	4b64      	ldr	r3, [pc, #400]	@ (800aa64 <_strtod_l+0xafc>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f6 f917 	bl	8000b0c <__aeabi_dcmplt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d159      	bne.n	800a996 <_strtod_l+0xa2e>
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	4b60      	ldr	r3, [pc, #384]	@ (800aa68 <_strtod_l+0xb00>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f7f5 fe9d 	bl	8000628 <__aeabi_dmul>
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8f6:	9606      	str	r6, [sp, #24]
 800a8f8:	9307      	str	r3, [sp, #28]
 800a8fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8fe:	4d57      	ldr	r5, [pc, #348]	@ (800aa5c <_strtod_l+0xaf4>)
 800a900:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a906:	401d      	ands	r5, r3
 800a908:	4b58      	ldr	r3, [pc, #352]	@ (800aa6c <_strtod_l+0xb04>)
 800a90a:	429d      	cmp	r5, r3
 800a90c:	f040 80b2 	bne.w	800aa74 <_strtod_l+0xb0c>
 800a910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a912:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a916:	ec4b ab10 	vmov	d0, sl, fp
 800a91a:	f002 fc83 	bl	800d224 <__ulp>
 800a91e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a922:	ec51 0b10 	vmov	r0, r1, d0
 800a926:	f7f5 fe7f 	bl	8000628 <__aeabi_dmul>
 800a92a:	4652      	mov	r2, sl
 800a92c:	465b      	mov	r3, fp
 800a92e:	f7f5 fcc5 	bl	80002bc <__adddf3>
 800a932:	460b      	mov	r3, r1
 800a934:	4949      	ldr	r1, [pc, #292]	@ (800aa5c <_strtod_l+0xaf4>)
 800a936:	4a4e      	ldr	r2, [pc, #312]	@ (800aa70 <_strtod_l+0xb08>)
 800a938:	4019      	ands	r1, r3
 800a93a:	4291      	cmp	r1, r2
 800a93c:	4682      	mov	sl, r0
 800a93e:	d942      	bls.n	800a9c6 <_strtod_l+0xa5e>
 800a940:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a942:	4b47      	ldr	r3, [pc, #284]	@ (800aa60 <_strtod_l+0xaf8>)
 800a944:	429a      	cmp	r2, r3
 800a946:	d103      	bne.n	800a950 <_strtod_l+0x9e8>
 800a948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a94a:	3301      	adds	r3, #1
 800a94c:	f43f ad2f 	beq.w	800a3ae <_strtod_l+0x446>
 800a950:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa60 <_strtod_l+0xaf8>
 800a954:	f04f 3aff 	mov.w	sl, #4294967295
 800a958:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a95a:	9805      	ldr	r0, [sp, #20]
 800a95c:	f002 f936 	bl	800cbcc <_Bfree>
 800a960:	9805      	ldr	r0, [sp, #20]
 800a962:	4649      	mov	r1, r9
 800a964:	f002 f932 	bl	800cbcc <_Bfree>
 800a968:	9805      	ldr	r0, [sp, #20]
 800a96a:	4641      	mov	r1, r8
 800a96c:	f002 f92e 	bl	800cbcc <_Bfree>
 800a970:	9805      	ldr	r0, [sp, #20]
 800a972:	4621      	mov	r1, r4
 800a974:	f002 f92a 	bl	800cbcc <_Bfree>
 800a978:	e619      	b.n	800a5ae <_strtod_l+0x646>
 800a97a:	f1ba 0f01 	cmp.w	sl, #1
 800a97e:	d103      	bne.n	800a988 <_strtod_l+0xa20>
 800a980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	f43f ada6 	beq.w	800a4d4 <_strtod_l+0x56c>
 800a988:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa38 <_strtod_l+0xad0>
 800a98c:	4f35      	ldr	r7, [pc, #212]	@ (800aa64 <_strtod_l+0xafc>)
 800a98e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a992:	2600      	movs	r6, #0
 800a994:	e7b1      	b.n	800a8fa <_strtod_l+0x992>
 800a996:	4f34      	ldr	r7, [pc, #208]	@ (800aa68 <_strtod_l+0xb00>)
 800a998:	2600      	movs	r6, #0
 800a99a:	e7aa      	b.n	800a8f2 <_strtod_l+0x98a>
 800a99c:	4b32      	ldr	r3, [pc, #200]	@ (800aa68 <_strtod_l+0xb00>)
 800a99e:	4630      	mov	r0, r6
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f7f5 fe40 	bl	8000628 <__aeabi_dmul>
 800a9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d09f      	beq.n	800a8f2 <_strtod_l+0x98a>
 800a9b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9b6:	e7a0      	b.n	800a8fa <_strtod_l+0x992>
 800a9b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa40 <_strtod_l+0xad8>
 800a9bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9c0:	ec57 6b17 	vmov	r6, r7, d7
 800a9c4:	e799      	b.n	800a8fa <_strtod_l+0x992>
 800a9c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1c1      	bne.n	800a958 <_strtod_l+0x9f0>
 800a9d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9d8:	0d1b      	lsrs	r3, r3, #20
 800a9da:	051b      	lsls	r3, r3, #20
 800a9dc:	429d      	cmp	r5, r3
 800a9de:	d1bb      	bne.n	800a958 <_strtod_l+0x9f0>
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f6 f992 	bl	8000d0c <__aeabi_d2lz>
 800a9e8:	f7f5 fdf0 	bl	80005cc <__aeabi_l2d>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	f7f5 fc60 	bl	80002b8 <__aeabi_dsub>
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa06:	ea46 060a 	orr.w	r6, r6, sl
 800aa0a:	431e      	orrs	r6, r3
 800aa0c:	d06f      	beq.n	800aaee <_strtod_l+0xb86>
 800aa0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa48 <_strtod_l+0xae0>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f6 f87a 	bl	8000b0c <__aeabi_dcmplt>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	f47f acd3 	bne.w	800a3c4 <_strtod_l+0x45c>
 800aa1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa50 <_strtod_l+0xae8>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa28:	f7f6 f88e 	bl	8000b48 <__aeabi_dcmpgt>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d093      	beq.n	800a958 <_strtod_l+0x9f0>
 800aa30:	e4c8      	b.n	800a3c4 <_strtod_l+0x45c>
 800aa32:	bf00      	nop
 800aa34:	f3af 8000 	nop.w
 800aa38:	00000000 	.word	0x00000000
 800aa3c:	bff00000 	.word	0xbff00000
 800aa40:	00000000 	.word	0x00000000
 800aa44:	3ff00000 	.word	0x3ff00000
 800aa48:	94a03595 	.word	0x94a03595
 800aa4c:	3fdfffff 	.word	0x3fdfffff
 800aa50:	35afe535 	.word	0x35afe535
 800aa54:	3fe00000 	.word	0x3fe00000
 800aa58:	000fffff 	.word	0x000fffff
 800aa5c:	7ff00000 	.word	0x7ff00000
 800aa60:	7fefffff 	.word	0x7fefffff
 800aa64:	3ff00000 	.word	0x3ff00000
 800aa68:	3fe00000 	.word	0x3fe00000
 800aa6c:	7fe00000 	.word	0x7fe00000
 800aa70:	7c9fffff 	.word	0x7c9fffff
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	b323      	cbz	r3, 800aac2 <_strtod_l+0xb5a>
 800aa78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa7c:	d821      	bhi.n	800aac2 <_strtod_l+0xb5a>
 800aa7e:	a328      	add	r3, pc, #160	@ (adr r3, 800ab20 <_strtod_l+0xbb8>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	4630      	mov	r0, r6
 800aa86:	4639      	mov	r1, r7
 800aa88:	f7f6 f84a 	bl	8000b20 <__aeabi_dcmple>
 800aa8c:	b1a0      	cbz	r0, 800aab8 <_strtod_l+0xb50>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7f6 f863 	bl	8000b5c <__aeabi_d2uiz>
 800aa96:	2801      	cmp	r0, #1
 800aa98:	bf38      	it	cc
 800aa9a:	2001      	movcc	r0, #1
 800aa9c:	f7f5 fd4a 	bl	8000534 <__aeabi_ui2d>
 800aaa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	b9fb      	cbnz	r3, 800aae8 <_strtod_l+0xb80>
 800aaa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aaac:	9014      	str	r0, [sp, #80]	@ 0x50
 800aaae:	9315      	str	r3, [sp, #84]	@ 0x54
 800aab0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aab4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aab8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aabe:	1b5b      	subs	r3, r3, r5
 800aac0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aac2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aac6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aaca:	f002 fbab 	bl	800d224 <__ulp>
 800aace:	4650      	mov	r0, sl
 800aad0:	ec53 2b10 	vmov	r2, r3, d0
 800aad4:	4659      	mov	r1, fp
 800aad6:	f7f5 fda7 	bl	8000628 <__aeabi_dmul>
 800aada:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aade:	f7f5 fbed 	bl	80002bc <__adddf3>
 800aae2:	4682      	mov	sl, r0
 800aae4:	468b      	mov	fp, r1
 800aae6:	e770      	b.n	800a9ca <_strtod_l+0xa62>
 800aae8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aaec:	e7e0      	b.n	800aab0 <_strtod_l+0xb48>
 800aaee:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab28 <_strtod_l+0xbc0>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f7f6 f80a 	bl	8000b0c <__aeabi_dcmplt>
 800aaf8:	e798      	b.n	800aa2c <_strtod_l+0xac4>
 800aafa:	2300      	movs	r3, #0
 800aafc:	930e      	str	r3, [sp, #56]	@ 0x38
 800aafe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	f7ff ba6d 	b.w	8009fe2 <_strtod_l+0x7a>
 800ab08:	2a65      	cmp	r2, #101	@ 0x65
 800ab0a:	f43f ab68 	beq.w	800a1de <_strtod_l+0x276>
 800ab0e:	2a45      	cmp	r2, #69	@ 0x45
 800ab10:	f43f ab65 	beq.w	800a1de <_strtod_l+0x276>
 800ab14:	2301      	movs	r3, #1
 800ab16:	f7ff bba0 	b.w	800a25a <_strtod_l+0x2f2>
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
 800ab20:	ffc00000 	.word	0xffc00000
 800ab24:	41dfffff 	.word	0x41dfffff
 800ab28:	94a03595 	.word	0x94a03595
 800ab2c:	3fcfffff 	.word	0x3fcfffff

0800ab30 <strtod>:
 800ab30:	460a      	mov	r2, r1
 800ab32:	4601      	mov	r1, r0
 800ab34:	4802      	ldr	r0, [pc, #8]	@ (800ab40 <strtod+0x10>)
 800ab36:	4b03      	ldr	r3, [pc, #12]	@ (800ab44 <strtod+0x14>)
 800ab38:	6800      	ldr	r0, [r0, #0]
 800ab3a:	f7ff ba15 	b.w	8009f68 <_strtod_l>
 800ab3e:	bf00      	nop
 800ab40:	200001a0 	.word	0x200001a0
 800ab44:	20000034 	.word	0x20000034

0800ab48 <_strtol_l.isra.0>:
 800ab48:	2b24      	cmp	r3, #36	@ 0x24
 800ab4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4e:	4686      	mov	lr, r0
 800ab50:	4690      	mov	r8, r2
 800ab52:	d801      	bhi.n	800ab58 <_strtol_l.isra.0+0x10>
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d106      	bne.n	800ab66 <_strtol_l.isra.0+0x1e>
 800ab58:	f001 faea 	bl	800c130 <__errno>
 800ab5c:	2316      	movs	r3, #22
 800ab5e:	6003      	str	r3, [r0, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab66:	4834      	ldr	r0, [pc, #208]	@ (800ac38 <_strtol_l.isra.0+0xf0>)
 800ab68:	460d      	mov	r5, r1
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab70:	5d06      	ldrb	r6, [r0, r4]
 800ab72:	f016 0608 	ands.w	r6, r6, #8
 800ab76:	d1f8      	bne.n	800ab6a <_strtol_l.isra.0+0x22>
 800ab78:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab7a:	d110      	bne.n	800ab9e <_strtol_l.isra.0+0x56>
 800ab7c:	782c      	ldrb	r4, [r5, #0]
 800ab7e:	2601      	movs	r6, #1
 800ab80:	1c95      	adds	r5, r2, #2
 800ab82:	f033 0210 	bics.w	r2, r3, #16
 800ab86:	d115      	bne.n	800abb4 <_strtol_l.isra.0+0x6c>
 800ab88:	2c30      	cmp	r4, #48	@ 0x30
 800ab8a:	d10d      	bne.n	800aba8 <_strtol_l.isra.0+0x60>
 800ab8c:	782a      	ldrb	r2, [r5, #0]
 800ab8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab92:	2a58      	cmp	r2, #88	@ 0x58
 800ab94:	d108      	bne.n	800aba8 <_strtol_l.isra.0+0x60>
 800ab96:	786c      	ldrb	r4, [r5, #1]
 800ab98:	3502      	adds	r5, #2
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	e00a      	b.n	800abb4 <_strtol_l.isra.0+0x6c>
 800ab9e:	2c2b      	cmp	r4, #43	@ 0x2b
 800aba0:	bf04      	itt	eq
 800aba2:	782c      	ldrbeq	r4, [r5, #0]
 800aba4:	1c95      	addeq	r5, r2, #2
 800aba6:	e7ec      	b.n	800ab82 <_strtol_l.isra.0+0x3a>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1f6      	bne.n	800ab9a <_strtol_l.isra.0+0x52>
 800abac:	2c30      	cmp	r4, #48	@ 0x30
 800abae:	bf14      	ite	ne
 800abb0:	230a      	movne	r3, #10
 800abb2:	2308      	moveq	r3, #8
 800abb4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abbc:	2200      	movs	r2, #0
 800abbe:	fbbc f9f3 	udiv	r9, ip, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	fb03 ca19 	mls	sl, r3, r9, ip
 800abc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abcc:	2f09      	cmp	r7, #9
 800abce:	d80f      	bhi.n	800abf0 <_strtol_l.isra.0+0xa8>
 800abd0:	463c      	mov	r4, r7
 800abd2:	42a3      	cmp	r3, r4
 800abd4:	dd1b      	ble.n	800ac0e <_strtol_l.isra.0+0xc6>
 800abd6:	1c57      	adds	r7, r2, #1
 800abd8:	d007      	beq.n	800abea <_strtol_l.isra.0+0xa2>
 800abda:	4581      	cmp	r9, r0
 800abdc:	d314      	bcc.n	800ac08 <_strtol_l.isra.0+0xc0>
 800abde:	d101      	bne.n	800abe4 <_strtol_l.isra.0+0x9c>
 800abe0:	45a2      	cmp	sl, r4
 800abe2:	db11      	blt.n	800ac08 <_strtol_l.isra.0+0xc0>
 800abe4:	fb00 4003 	mla	r0, r0, r3, r4
 800abe8:	2201      	movs	r2, #1
 800abea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abee:	e7eb      	b.n	800abc8 <_strtol_l.isra.0+0x80>
 800abf0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abf4:	2f19      	cmp	r7, #25
 800abf6:	d801      	bhi.n	800abfc <_strtol_l.isra.0+0xb4>
 800abf8:	3c37      	subs	r4, #55	@ 0x37
 800abfa:	e7ea      	b.n	800abd2 <_strtol_l.isra.0+0x8a>
 800abfc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac00:	2f19      	cmp	r7, #25
 800ac02:	d804      	bhi.n	800ac0e <_strtol_l.isra.0+0xc6>
 800ac04:	3c57      	subs	r4, #87	@ 0x57
 800ac06:	e7e4      	b.n	800abd2 <_strtol_l.isra.0+0x8a>
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0c:	e7ed      	b.n	800abea <_strtol_l.isra.0+0xa2>
 800ac0e:	1c53      	adds	r3, r2, #1
 800ac10:	d108      	bne.n	800ac24 <_strtol_l.isra.0+0xdc>
 800ac12:	2322      	movs	r3, #34	@ 0x22
 800ac14:	f8ce 3000 	str.w	r3, [lr]
 800ac18:	4660      	mov	r0, ip
 800ac1a:	f1b8 0f00 	cmp.w	r8, #0
 800ac1e:	d0a0      	beq.n	800ab62 <_strtol_l.isra.0+0x1a>
 800ac20:	1e69      	subs	r1, r5, #1
 800ac22:	e006      	b.n	800ac32 <_strtol_l.isra.0+0xea>
 800ac24:	b106      	cbz	r6, 800ac28 <_strtol_l.isra.0+0xe0>
 800ac26:	4240      	negs	r0, r0
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	d099      	beq.n	800ab62 <_strtol_l.isra.0+0x1a>
 800ac2e:	2a00      	cmp	r2, #0
 800ac30:	d1f6      	bne.n	800ac20 <_strtol_l.isra.0+0xd8>
 800ac32:	f8c8 1000 	str.w	r1, [r8]
 800ac36:	e794      	b.n	800ab62 <_strtol_l.isra.0+0x1a>
 800ac38:	0800f7b9 	.word	0x0800f7b9

0800ac3c <_strtol_r>:
 800ac3c:	f7ff bf84 	b.w	800ab48 <_strtol_l.isra.0>

0800ac40 <strtol>:
 800ac40:	4613      	mov	r3, r2
 800ac42:	460a      	mov	r2, r1
 800ac44:	4601      	mov	r1, r0
 800ac46:	4802      	ldr	r0, [pc, #8]	@ (800ac50 <strtol+0x10>)
 800ac48:	6800      	ldr	r0, [r0, #0]
 800ac4a:	f7ff bf7d 	b.w	800ab48 <_strtol_l.isra.0>
 800ac4e:	bf00      	nop
 800ac50:	200001a0 	.word	0x200001a0

0800ac54 <std>:
 800ac54:	2300      	movs	r3, #0
 800ac56:	b510      	push	{r4, lr}
 800ac58:	4604      	mov	r4, r0
 800ac5a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac62:	6083      	str	r3, [r0, #8]
 800ac64:	8181      	strh	r1, [r0, #12]
 800ac66:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac68:	81c2      	strh	r2, [r0, #14]
 800ac6a:	6183      	str	r3, [r0, #24]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	2208      	movs	r2, #8
 800ac70:	305c      	adds	r0, #92	@ 0x5c
 800ac72:	f000 faa1 	bl	800b1b8 <memset>
 800ac76:	4b0d      	ldr	r3, [pc, #52]	@ (800acac <std+0x58>)
 800ac78:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac7a:	4b0d      	ldr	r3, [pc, #52]	@ (800acb0 <std+0x5c>)
 800ac7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	@ (800acb4 <std+0x60>)
 800ac80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac82:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <std+0x64>)
 800ac84:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac86:	4b0d      	ldr	r3, [pc, #52]	@ (800acbc <std+0x68>)
 800ac88:	6224      	str	r4, [r4, #32]
 800ac8a:	429c      	cmp	r4, r3
 800ac8c:	d006      	beq.n	800ac9c <std+0x48>
 800ac8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac92:	4294      	cmp	r4, r2
 800ac94:	d002      	beq.n	800ac9c <std+0x48>
 800ac96:	33d0      	adds	r3, #208	@ 0xd0
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	d105      	bne.n	800aca8 <std+0x54>
 800ac9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca4:	f001 ba6e 	b.w	800c184 <__retarget_lock_init_recursive>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	bf00      	nop
 800acac:	0800afd1 	.word	0x0800afd1
 800acb0:	0800aff7 	.word	0x0800aff7
 800acb4:	0800b02f 	.word	0x0800b02f
 800acb8:	0800b053 	.word	0x0800b053
 800acbc:	20006d9c 	.word	0x20006d9c

0800acc0 <stdio_exit_handler>:
 800acc0:	4a02      	ldr	r2, [pc, #8]	@ (800accc <stdio_exit_handler+0xc>)
 800acc2:	4903      	ldr	r1, [pc, #12]	@ (800acd0 <stdio_exit_handler+0x10>)
 800acc4:	4803      	ldr	r0, [pc, #12]	@ (800acd4 <stdio_exit_handler+0x14>)
 800acc6:	f000 b869 	b.w	800ad9c <_fwalk_sglue>
 800acca:	bf00      	nop
 800accc:	20000020 	.word	0x20000020
 800acd0:	0800e53d 	.word	0x0800e53d
 800acd4:	200001a4 	.word	0x200001a4

0800acd8 <cleanup_stdio>:
 800acd8:	6841      	ldr	r1, [r0, #4]
 800acda:	4b0c      	ldr	r3, [pc, #48]	@ (800ad0c <cleanup_stdio+0x34>)
 800acdc:	4299      	cmp	r1, r3
 800acde:	b510      	push	{r4, lr}
 800ace0:	4604      	mov	r4, r0
 800ace2:	d001      	beq.n	800ace8 <cleanup_stdio+0x10>
 800ace4:	f003 fc2a 	bl	800e53c <_fflush_r>
 800ace8:	68a1      	ldr	r1, [r4, #8]
 800acea:	4b09      	ldr	r3, [pc, #36]	@ (800ad10 <cleanup_stdio+0x38>)
 800acec:	4299      	cmp	r1, r3
 800acee:	d002      	beq.n	800acf6 <cleanup_stdio+0x1e>
 800acf0:	4620      	mov	r0, r4
 800acf2:	f003 fc23 	bl	800e53c <_fflush_r>
 800acf6:	68e1      	ldr	r1, [r4, #12]
 800acf8:	4b06      	ldr	r3, [pc, #24]	@ (800ad14 <cleanup_stdio+0x3c>)
 800acfa:	4299      	cmp	r1, r3
 800acfc:	d004      	beq.n	800ad08 <cleanup_stdio+0x30>
 800acfe:	4620      	mov	r0, r4
 800ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad04:	f003 bc1a 	b.w	800e53c <_fflush_r>
 800ad08:	bd10      	pop	{r4, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20006d9c 	.word	0x20006d9c
 800ad10:	20006e04 	.word	0x20006e04
 800ad14:	20006e6c 	.word	0x20006e6c

0800ad18 <global_stdio_init.part.0>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad48 <global_stdio_init.part.0+0x30>)
 800ad1c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad4c <global_stdio_init.part.0+0x34>)
 800ad1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ad50 <global_stdio_init.part.0+0x38>)
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	4620      	mov	r0, r4
 800ad24:	2200      	movs	r2, #0
 800ad26:	2104      	movs	r1, #4
 800ad28:	f7ff ff94 	bl	800ac54 <std>
 800ad2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad30:	2201      	movs	r2, #1
 800ad32:	2109      	movs	r1, #9
 800ad34:	f7ff ff8e 	bl	800ac54 <std>
 800ad38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad42:	2112      	movs	r1, #18
 800ad44:	f7ff bf86 	b.w	800ac54 <std>
 800ad48:	20006ed4 	.word	0x20006ed4
 800ad4c:	20006d9c 	.word	0x20006d9c
 800ad50:	0800acc1 	.word	0x0800acc1

0800ad54 <__sfp_lock_acquire>:
 800ad54:	4801      	ldr	r0, [pc, #4]	@ (800ad5c <__sfp_lock_acquire+0x8>)
 800ad56:	f001 ba17 	b.w	800c188 <__retarget_lock_acquire_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	20006f03 	.word	0x20006f03

0800ad60 <__sfp_lock_release>:
 800ad60:	4801      	ldr	r0, [pc, #4]	@ (800ad68 <__sfp_lock_release+0x8>)
 800ad62:	f001 ba13 	b.w	800c18c <__retarget_lock_release_recursive>
 800ad66:	bf00      	nop
 800ad68:	20006f03 	.word	0x20006f03

0800ad6c <__sinit>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f7ff fff0 	bl	800ad54 <__sfp_lock_acquire>
 800ad74:	6a23      	ldr	r3, [r4, #32]
 800ad76:	b11b      	cbz	r3, 800ad80 <__sinit+0x14>
 800ad78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7c:	f7ff bff0 	b.w	800ad60 <__sfp_lock_release>
 800ad80:	4b04      	ldr	r3, [pc, #16]	@ (800ad94 <__sinit+0x28>)
 800ad82:	6223      	str	r3, [r4, #32]
 800ad84:	4b04      	ldr	r3, [pc, #16]	@ (800ad98 <__sinit+0x2c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f5      	bne.n	800ad78 <__sinit+0xc>
 800ad8c:	f7ff ffc4 	bl	800ad18 <global_stdio_init.part.0>
 800ad90:	e7f2      	b.n	800ad78 <__sinit+0xc>
 800ad92:	bf00      	nop
 800ad94:	0800acd9 	.word	0x0800acd9
 800ad98:	20006ed4 	.word	0x20006ed4

0800ad9c <_fwalk_sglue>:
 800ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada0:	4607      	mov	r7, r0
 800ada2:	4688      	mov	r8, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	2600      	movs	r6, #0
 800ada8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adac:	f1b9 0901 	subs.w	r9, r9, #1
 800adb0:	d505      	bpl.n	800adbe <_fwalk_sglue+0x22>
 800adb2:	6824      	ldr	r4, [r4, #0]
 800adb4:	2c00      	cmp	r4, #0
 800adb6:	d1f7      	bne.n	800ada8 <_fwalk_sglue+0xc>
 800adb8:	4630      	mov	r0, r6
 800adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d907      	bls.n	800add4 <_fwalk_sglue+0x38>
 800adc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adc8:	3301      	adds	r3, #1
 800adca:	d003      	beq.n	800add4 <_fwalk_sglue+0x38>
 800adcc:	4629      	mov	r1, r5
 800adce:	4638      	mov	r0, r7
 800add0:	47c0      	blx	r8
 800add2:	4306      	orrs	r6, r0
 800add4:	3568      	adds	r5, #104	@ 0x68
 800add6:	e7e9      	b.n	800adac <_fwalk_sglue+0x10>

0800add8 <iprintf>:
 800add8:	b40f      	push	{r0, r1, r2, r3}
 800adda:	b507      	push	{r0, r1, r2, lr}
 800addc:	4906      	ldr	r1, [pc, #24]	@ (800adf8 <iprintf+0x20>)
 800adde:	ab04      	add	r3, sp, #16
 800ade0:	6808      	ldr	r0, [r1, #0]
 800ade2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade6:	6881      	ldr	r1, [r0, #8]
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	f002 ff31 	bl	800dc50 <_vfiprintf_r>
 800adee:	b003      	add	sp, #12
 800adf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf4:	b004      	add	sp, #16
 800adf6:	4770      	bx	lr
 800adf8:	200001a0 	.word	0x200001a0

0800adfc <putchar>:
 800adfc:	4b02      	ldr	r3, [pc, #8]	@ (800ae08 <putchar+0xc>)
 800adfe:	4601      	mov	r1, r0
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	6882      	ldr	r2, [r0, #8]
 800ae04:	f003 bc36 	b.w	800e674 <_putc_r>
 800ae08:	200001a0 	.word	0x200001a0

0800ae0c <_puts_r>:
 800ae0c:	6a03      	ldr	r3, [r0, #32]
 800ae0e:	b570      	push	{r4, r5, r6, lr}
 800ae10:	6884      	ldr	r4, [r0, #8]
 800ae12:	4605      	mov	r5, r0
 800ae14:	460e      	mov	r6, r1
 800ae16:	b90b      	cbnz	r3, 800ae1c <_puts_r+0x10>
 800ae18:	f7ff ffa8 	bl	800ad6c <__sinit>
 800ae1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae1e:	07db      	lsls	r3, r3, #31
 800ae20:	d405      	bmi.n	800ae2e <_puts_r+0x22>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	0598      	lsls	r0, r3, #22
 800ae26:	d402      	bmi.n	800ae2e <_puts_r+0x22>
 800ae28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2a:	f001 f9ad 	bl	800c188 <__retarget_lock_acquire_recursive>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	0719      	lsls	r1, r3, #28
 800ae32:	d502      	bpl.n	800ae3a <_puts_r+0x2e>
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d135      	bne.n	800aea6 <_puts_r+0x9a>
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	f000 f94b 	bl	800b0d8 <__swsetup_r>
 800ae42:	b380      	cbz	r0, 800aea6 <_puts_r+0x9a>
 800ae44:	f04f 35ff 	mov.w	r5, #4294967295
 800ae48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae4a:	07da      	lsls	r2, r3, #31
 800ae4c:	d405      	bmi.n	800ae5a <_puts_r+0x4e>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	059b      	lsls	r3, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_puts_r+0x4e>
 800ae54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae56:	f001 f999 	bl	800c18c <__retarget_lock_release_recursive>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	da04      	bge.n	800ae6c <_puts_r+0x60>
 800ae62:	69a2      	ldr	r2, [r4, #24]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	dc17      	bgt.n	800ae98 <_puts_r+0x8c>
 800ae68:	290a      	cmp	r1, #10
 800ae6a:	d015      	beq.n	800ae98 <_puts_r+0x8c>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	6022      	str	r2, [r4, #0]
 800ae72:	7019      	strb	r1, [r3, #0]
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	60a3      	str	r3, [r4, #8]
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	d1ed      	bne.n	800ae5e <_puts_r+0x52>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da11      	bge.n	800aeaa <_puts_r+0x9e>
 800ae86:	4622      	mov	r2, r4
 800ae88:	210a      	movs	r1, #10
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f000 f8e5 	bl	800b05a <__swbuf_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	d0d7      	beq.n	800ae44 <_puts_r+0x38>
 800ae94:	250a      	movs	r5, #10
 800ae96:	e7d7      	b.n	800ae48 <_puts_r+0x3c>
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f000 f8dd 	bl	800b05a <__swbuf_r>
 800aea0:	3001      	adds	r0, #1
 800aea2:	d1e7      	bne.n	800ae74 <_puts_r+0x68>
 800aea4:	e7ce      	b.n	800ae44 <_puts_r+0x38>
 800aea6:	3e01      	subs	r6, #1
 800aea8:	e7e4      	b.n	800ae74 <_puts_r+0x68>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	6022      	str	r2, [r4, #0]
 800aeb0:	220a      	movs	r2, #10
 800aeb2:	701a      	strb	r2, [r3, #0]
 800aeb4:	e7ee      	b.n	800ae94 <_puts_r+0x88>
	...

0800aeb8 <puts>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	@ (800aec4 <puts+0xc>)
 800aeba:	4601      	mov	r1, r0
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	f7ff bfa5 	b.w	800ae0c <_puts_r>
 800aec2:	bf00      	nop
 800aec4:	200001a0 	.word	0x200001a0

0800aec8 <sniprintf>:
 800aec8:	b40c      	push	{r2, r3}
 800aeca:	b530      	push	{r4, r5, lr}
 800aecc:	4b18      	ldr	r3, [pc, #96]	@ (800af30 <sniprintf+0x68>)
 800aece:	1e0c      	subs	r4, r1, #0
 800aed0:	681d      	ldr	r5, [r3, #0]
 800aed2:	b09d      	sub	sp, #116	@ 0x74
 800aed4:	da08      	bge.n	800aee8 <sniprintf+0x20>
 800aed6:	238b      	movs	r3, #139	@ 0x8b
 800aed8:	602b      	str	r3, [r5, #0]
 800aeda:	f04f 30ff 	mov.w	r0, #4294967295
 800aede:	b01d      	add	sp, #116	@ 0x74
 800aee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aee4:	b002      	add	sp, #8
 800aee6:	4770      	bx	lr
 800aee8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aeec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aef0:	f04f 0300 	mov.w	r3, #0
 800aef4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800aef6:	bf14      	ite	ne
 800aef8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aefc:	4623      	moveq	r3, r4
 800aefe:	9304      	str	r3, [sp, #16]
 800af00:	9307      	str	r3, [sp, #28]
 800af02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af06:	9002      	str	r0, [sp, #8]
 800af08:	9006      	str	r0, [sp, #24]
 800af0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800af0e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800af10:	ab21      	add	r3, sp, #132	@ 0x84
 800af12:	a902      	add	r1, sp, #8
 800af14:	4628      	mov	r0, r5
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	f002 fba4 	bl	800d664 <_svfiprintf_r>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	bfbc      	itt	lt
 800af20:	238b      	movlt	r3, #139	@ 0x8b
 800af22:	602b      	strlt	r3, [r5, #0]
 800af24:	2c00      	cmp	r4, #0
 800af26:	d0da      	beq.n	800aede <sniprintf+0x16>
 800af28:	9b02      	ldr	r3, [sp, #8]
 800af2a:	2200      	movs	r2, #0
 800af2c:	701a      	strb	r2, [r3, #0]
 800af2e:	e7d6      	b.n	800aede <sniprintf+0x16>
 800af30:	200001a0 	.word	0x200001a0

0800af34 <siprintf>:
 800af34:	b40e      	push	{r1, r2, r3}
 800af36:	b510      	push	{r4, lr}
 800af38:	b09d      	sub	sp, #116	@ 0x74
 800af3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800af3c:	9002      	str	r0, [sp, #8]
 800af3e:	9006      	str	r0, [sp, #24]
 800af40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af44:	480a      	ldr	r0, [pc, #40]	@ (800af70 <siprintf+0x3c>)
 800af46:	9107      	str	r1, [sp, #28]
 800af48:	9104      	str	r1, [sp, #16]
 800af4a:	490a      	ldr	r1, [pc, #40]	@ (800af74 <siprintf+0x40>)
 800af4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af50:	9105      	str	r1, [sp, #20]
 800af52:	2400      	movs	r4, #0
 800af54:	a902      	add	r1, sp, #8
 800af56:	6800      	ldr	r0, [r0, #0]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800af5c:	f002 fb82 	bl	800d664 <_svfiprintf_r>
 800af60:	9b02      	ldr	r3, [sp, #8]
 800af62:	701c      	strb	r4, [r3, #0]
 800af64:	b01d      	add	sp, #116	@ 0x74
 800af66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6a:	b003      	add	sp, #12
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	200001a0 	.word	0x200001a0
 800af74:	ffff0208 	.word	0xffff0208

0800af78 <siscanf>:
 800af78:	b40e      	push	{r1, r2, r3}
 800af7a:	b570      	push	{r4, r5, r6, lr}
 800af7c:	b09d      	sub	sp, #116	@ 0x74
 800af7e:	ac21      	add	r4, sp, #132	@ 0x84
 800af80:	2500      	movs	r5, #0
 800af82:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800af86:	f854 6b04 	ldr.w	r6, [r4], #4
 800af8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800af8e:	951b      	str	r5, [sp, #108]	@ 0x6c
 800af90:	9002      	str	r0, [sp, #8]
 800af92:	9006      	str	r0, [sp, #24]
 800af94:	f7f5 f92e 	bl	80001f4 <strlen>
 800af98:	4b0b      	ldr	r3, [pc, #44]	@ (800afc8 <siscanf+0x50>)
 800af9a:	9003      	str	r0, [sp, #12]
 800af9c:	9007      	str	r0, [sp, #28]
 800af9e:	480b      	ldr	r0, [pc, #44]	@ (800afcc <siscanf+0x54>)
 800afa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afa6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800afaa:	4632      	mov	r2, r6
 800afac:	4623      	mov	r3, r4
 800afae:	a902      	add	r1, sp, #8
 800afb0:	6800      	ldr	r0, [r0, #0]
 800afb2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800afb4:	9514      	str	r5, [sp, #80]	@ 0x50
 800afb6:	9401      	str	r4, [sp, #4]
 800afb8:	f002 fcaa 	bl	800d910 <__ssvfiscanf_r>
 800afbc:	b01d      	add	sp, #116	@ 0x74
 800afbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afc2:	b003      	add	sp, #12
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	0800aff3 	.word	0x0800aff3
 800afcc:	200001a0 	.word	0x200001a0

0800afd0 <__sread>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	460c      	mov	r4, r1
 800afd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd8:	f001 f886 	bl	800c0e8 <_read_r>
 800afdc:	2800      	cmp	r0, #0
 800afde:	bfab      	itete	ge
 800afe0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afe2:	89a3      	ldrhlt	r3, [r4, #12]
 800afe4:	181b      	addge	r3, r3, r0
 800afe6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afea:	bfac      	ite	ge
 800afec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afee:	81a3      	strhlt	r3, [r4, #12]
 800aff0:	bd10      	pop	{r4, pc}

0800aff2 <__seofread>:
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr

0800aff6 <__swrite>:
 800aff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800affa:	461f      	mov	r7, r3
 800affc:	898b      	ldrh	r3, [r1, #12]
 800affe:	05db      	lsls	r3, r3, #23
 800b000:	4605      	mov	r5, r0
 800b002:	460c      	mov	r4, r1
 800b004:	4616      	mov	r6, r2
 800b006:	d505      	bpl.n	800b014 <__swrite+0x1e>
 800b008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00c:	2302      	movs	r3, #2
 800b00e:	2200      	movs	r2, #0
 800b010:	f001 f858 	bl	800c0c4 <_lseek_r>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b01a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b01e:	81a3      	strh	r3, [r4, #12]
 800b020:	4632      	mov	r2, r6
 800b022:	463b      	mov	r3, r7
 800b024:	4628      	mov	r0, r5
 800b026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b02a:	f001 b86f 	b.w	800c10c <_write_r>

0800b02e <__sseek>:
 800b02e:	b510      	push	{r4, lr}
 800b030:	460c      	mov	r4, r1
 800b032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b036:	f001 f845 	bl	800c0c4 <_lseek_r>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	bf15      	itete	ne
 800b040:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b04a:	81a3      	strheq	r3, [r4, #12]
 800b04c:	bf18      	it	ne
 800b04e:	81a3      	strhne	r3, [r4, #12]
 800b050:	bd10      	pop	{r4, pc}

0800b052 <__sclose>:
 800b052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b056:	f001 b813 	b.w	800c080 <_close_r>

0800b05a <__swbuf_r>:
 800b05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05c:	460e      	mov	r6, r1
 800b05e:	4614      	mov	r4, r2
 800b060:	4605      	mov	r5, r0
 800b062:	b118      	cbz	r0, 800b06c <__swbuf_r+0x12>
 800b064:	6a03      	ldr	r3, [r0, #32]
 800b066:	b90b      	cbnz	r3, 800b06c <__swbuf_r+0x12>
 800b068:	f7ff fe80 	bl	800ad6c <__sinit>
 800b06c:	69a3      	ldr	r3, [r4, #24]
 800b06e:	60a3      	str	r3, [r4, #8]
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	071a      	lsls	r2, r3, #28
 800b074:	d501      	bpl.n	800b07a <__swbuf_r+0x20>
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	b943      	cbnz	r3, 800b08c <__swbuf_r+0x32>
 800b07a:	4621      	mov	r1, r4
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 f82b 	bl	800b0d8 <__swsetup_r>
 800b082:	b118      	cbz	r0, 800b08c <__swbuf_r+0x32>
 800b084:	f04f 37ff 	mov.w	r7, #4294967295
 800b088:	4638      	mov	r0, r7
 800b08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	6922      	ldr	r2, [r4, #16]
 800b090:	1a98      	subs	r0, r3, r2
 800b092:	6963      	ldr	r3, [r4, #20]
 800b094:	b2f6      	uxtb	r6, r6
 800b096:	4283      	cmp	r3, r0
 800b098:	4637      	mov	r7, r6
 800b09a:	dc05      	bgt.n	800b0a8 <__swbuf_r+0x4e>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f003 fa4c 	bl	800e53c <_fflush_r>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d1ed      	bne.n	800b084 <__swbuf_r+0x2a>
 800b0a8:	68a3      	ldr	r3, [r4, #8]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	60a3      	str	r3, [r4, #8]
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	6022      	str	r2, [r4, #0]
 800b0b4:	701e      	strb	r6, [r3, #0]
 800b0b6:	6962      	ldr	r2, [r4, #20]
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d004      	beq.n	800b0c8 <__swbuf_r+0x6e>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	07db      	lsls	r3, r3, #31
 800b0c2:	d5e1      	bpl.n	800b088 <__swbuf_r+0x2e>
 800b0c4:	2e0a      	cmp	r6, #10
 800b0c6:	d1df      	bne.n	800b088 <__swbuf_r+0x2e>
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f003 fa36 	bl	800e53c <_fflush_r>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d0d9      	beq.n	800b088 <__swbuf_r+0x2e>
 800b0d4:	e7d6      	b.n	800b084 <__swbuf_r+0x2a>
	...

0800b0d8 <__swsetup_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4b29      	ldr	r3, [pc, #164]	@ (800b180 <__swsetup_r+0xa8>)
 800b0dc:	4605      	mov	r5, r0
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b118      	cbz	r0, 800b0ec <__swsetup_r+0x14>
 800b0e4:	6a03      	ldr	r3, [r0, #32]
 800b0e6:	b90b      	cbnz	r3, 800b0ec <__swsetup_r+0x14>
 800b0e8:	f7ff fe40 	bl	800ad6c <__sinit>
 800b0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f0:	0719      	lsls	r1, r3, #28
 800b0f2:	d422      	bmi.n	800b13a <__swsetup_r+0x62>
 800b0f4:	06da      	lsls	r2, r3, #27
 800b0f6:	d407      	bmi.n	800b108 <__swsetup_r+0x30>
 800b0f8:	2209      	movs	r2, #9
 800b0fa:	602a      	str	r2, [r5, #0]
 800b0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	f04f 30ff 	mov.w	r0, #4294967295
 800b106:	e033      	b.n	800b170 <__swsetup_r+0x98>
 800b108:	0758      	lsls	r0, r3, #29
 800b10a:	d512      	bpl.n	800b132 <__swsetup_r+0x5a>
 800b10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b10e:	b141      	cbz	r1, 800b122 <__swsetup_r+0x4a>
 800b110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b114:	4299      	cmp	r1, r3
 800b116:	d002      	beq.n	800b11e <__swsetup_r+0x46>
 800b118:	4628      	mov	r0, r5
 800b11a:	f001 f87f 	bl	800c21c <_free_r>
 800b11e:	2300      	movs	r3, #0
 800b120:	6363      	str	r3, [r4, #52]	@ 0x34
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b128:	81a3      	strh	r3, [r4, #12]
 800b12a:	2300      	movs	r3, #0
 800b12c:	6063      	str	r3, [r4, #4]
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f043 0308 	orr.w	r3, r3, #8
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	b94b      	cbnz	r3, 800b152 <__swsetup_r+0x7a>
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b148:	d003      	beq.n	800b152 <__swsetup_r+0x7a>
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f003 fa55 	bl	800e5fc <__smakebuf_r>
 800b152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b156:	f013 0201 	ands.w	r2, r3, #1
 800b15a:	d00a      	beq.n	800b172 <__swsetup_r+0x9a>
 800b15c:	2200      	movs	r2, #0
 800b15e:	60a2      	str	r2, [r4, #8]
 800b160:	6962      	ldr	r2, [r4, #20]
 800b162:	4252      	negs	r2, r2
 800b164:	61a2      	str	r2, [r4, #24]
 800b166:	6922      	ldr	r2, [r4, #16]
 800b168:	b942      	cbnz	r2, 800b17c <__swsetup_r+0xa4>
 800b16a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b16e:	d1c5      	bne.n	800b0fc <__swsetup_r+0x24>
 800b170:	bd38      	pop	{r3, r4, r5, pc}
 800b172:	0799      	lsls	r1, r3, #30
 800b174:	bf58      	it	pl
 800b176:	6962      	ldrpl	r2, [r4, #20]
 800b178:	60a2      	str	r2, [r4, #8]
 800b17a:	e7f4      	b.n	800b166 <__swsetup_r+0x8e>
 800b17c:	2000      	movs	r0, #0
 800b17e:	e7f7      	b.n	800b170 <__swsetup_r+0x98>
 800b180:	200001a0 	.word	0x200001a0

0800b184 <memmove>:
 800b184:	4288      	cmp	r0, r1
 800b186:	b510      	push	{r4, lr}
 800b188:	eb01 0402 	add.w	r4, r1, r2
 800b18c:	d902      	bls.n	800b194 <memmove+0x10>
 800b18e:	4284      	cmp	r4, r0
 800b190:	4623      	mov	r3, r4
 800b192:	d807      	bhi.n	800b1a4 <memmove+0x20>
 800b194:	1e43      	subs	r3, r0, #1
 800b196:	42a1      	cmp	r1, r4
 800b198:	d008      	beq.n	800b1ac <memmove+0x28>
 800b19a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b19e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1a2:	e7f8      	b.n	800b196 <memmove+0x12>
 800b1a4:	4402      	add	r2, r0
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	428a      	cmp	r2, r1
 800b1aa:	d100      	bne.n	800b1ae <memmove+0x2a>
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1b6:	e7f7      	b.n	800b1a8 <memmove+0x24>

0800b1b8 <memset>:
 800b1b8:	4402      	add	r2, r0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d100      	bne.n	800b1c2 <memset+0xa>
 800b1c0:	4770      	bx	lr
 800b1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c6:	e7f9      	b.n	800b1bc <memset+0x4>

0800b1c8 <strchr>:
 800b1c8:	b2c9      	uxtb	r1, r1
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d2:	b112      	cbz	r2, 800b1da <strchr+0x12>
 800b1d4:	428a      	cmp	r2, r1
 800b1d6:	d1f9      	bne.n	800b1cc <strchr+0x4>
 800b1d8:	4770      	bx	lr
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	bf18      	it	ne
 800b1de:	2000      	movne	r0, #0
 800b1e0:	4770      	bx	lr

0800b1e2 <strcspn>:
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	461e      	mov	r6, r3
 800b1e8:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b1ec:	b144      	cbz	r4, 800b200 <strcspn+0x1e>
 800b1ee:	1e4a      	subs	r2, r1, #1
 800b1f0:	e001      	b.n	800b1f6 <strcspn+0x14>
 800b1f2:	42a5      	cmp	r5, r4
 800b1f4:	d004      	beq.n	800b200 <strcspn+0x1e>
 800b1f6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	d1f9      	bne.n	800b1f2 <strcspn+0x10>
 800b1fe:	e7f2      	b.n	800b1e6 <strcspn+0x4>
 800b200:	1a30      	subs	r0, r6, r0
 800b202:	bd70      	pop	{r4, r5, r6, pc}

0800b204 <strncmp>:
 800b204:	b510      	push	{r4, lr}
 800b206:	b16a      	cbz	r2, 800b224 <strncmp+0x20>
 800b208:	3901      	subs	r1, #1
 800b20a:	1884      	adds	r4, r0, r2
 800b20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b210:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b214:	429a      	cmp	r2, r3
 800b216:	d103      	bne.n	800b220 <strncmp+0x1c>
 800b218:	42a0      	cmp	r0, r4
 800b21a:	d001      	beq.n	800b220 <strncmp+0x1c>
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	d1f5      	bne.n	800b20c <strncmp+0x8>
 800b220:	1ad0      	subs	r0, r2, r3
 800b222:	bd10      	pop	{r4, pc}
 800b224:	4610      	mov	r0, r2
 800b226:	e7fc      	b.n	800b222 <strncmp+0x1e>

0800b228 <strncpy>:
 800b228:	b510      	push	{r4, lr}
 800b22a:	3901      	subs	r1, #1
 800b22c:	4603      	mov	r3, r0
 800b22e:	b132      	cbz	r2, 800b23e <strncpy+0x16>
 800b230:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b234:	f803 4b01 	strb.w	r4, [r3], #1
 800b238:	3a01      	subs	r2, #1
 800b23a:	2c00      	cmp	r4, #0
 800b23c:	d1f7      	bne.n	800b22e <strncpy+0x6>
 800b23e:	441a      	add	r2, r3
 800b240:	2100      	movs	r1, #0
 800b242:	4293      	cmp	r3, r2
 800b244:	d100      	bne.n	800b248 <strncpy+0x20>
 800b246:	bd10      	pop	{r4, pc}
 800b248:	f803 1b01 	strb.w	r1, [r3], #1
 800b24c:	e7f9      	b.n	800b242 <strncpy+0x1a>
	...

0800b250 <strtok>:
 800b250:	4b16      	ldr	r3, [pc, #88]	@ (800b2ac <strtok+0x5c>)
 800b252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b256:	681f      	ldr	r7, [r3, #0]
 800b258:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b25a:	4605      	mov	r5, r0
 800b25c:	460e      	mov	r6, r1
 800b25e:	b9ec      	cbnz	r4, 800b29c <strtok+0x4c>
 800b260:	2050      	movs	r0, #80	@ 0x50
 800b262:	f001 fba3 	bl	800c9ac <malloc>
 800b266:	4602      	mov	r2, r0
 800b268:	6478      	str	r0, [r7, #68]	@ 0x44
 800b26a:	b920      	cbnz	r0, 800b276 <strtok+0x26>
 800b26c:	4b10      	ldr	r3, [pc, #64]	@ (800b2b0 <strtok+0x60>)
 800b26e:	4811      	ldr	r0, [pc, #68]	@ (800b2b4 <strtok+0x64>)
 800b270:	215b      	movs	r1, #91	@ 0x5b
 800b272:	f000 ffad 	bl	800c1d0 <__assert_func>
 800b276:	e9c0 4400 	strd	r4, r4, [r0]
 800b27a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b27e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b282:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b286:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b28a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b28e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b292:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b296:	6184      	str	r4, [r0, #24]
 800b298:	7704      	strb	r4, [r0, #28]
 800b29a:	6244      	str	r4, [r0, #36]	@ 0x24
 800b29c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b29e:	4631      	mov	r1, r6
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	f000 b806 	b.w	800b2b8 <__strtok_r>
 800b2ac:	200001a0 	.word	0x200001a0
 800b2b0:	0800f47a 	.word	0x0800f47a
 800b2b4:	0800f491 	.word	0x0800f491

0800b2b8 <__strtok_r>:
 800b2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	b908      	cbnz	r0, 800b2c2 <__strtok_r+0xa>
 800b2be:	6814      	ldr	r4, [r2, #0]
 800b2c0:	b144      	cbz	r4, 800b2d4 <__strtok_r+0x1c>
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b2ce:	b91e      	cbnz	r6, 800b2d8 <__strtok_r+0x20>
 800b2d0:	b965      	cbnz	r5, 800b2ec <__strtok_r+0x34>
 800b2d2:	6015      	str	r5, [r2, #0]
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e005      	b.n	800b2e4 <__strtok_r+0x2c>
 800b2d8:	42b5      	cmp	r5, r6
 800b2da:	d1f6      	bne.n	800b2ca <__strtok_r+0x12>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1f0      	bne.n	800b2c2 <__strtok_r+0xa>
 800b2e0:	6014      	str	r4, [r2, #0]
 800b2e2:	7003      	strb	r3, [r0, #0]
 800b2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	e00c      	b.n	800b304 <__strtok_r+0x4c>
 800b2ea:	b91d      	cbnz	r5, 800b2f4 <__strtok_r+0x3c>
 800b2ec:	4627      	mov	r7, r4
 800b2ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2f2:	460e      	mov	r6, r1
 800b2f4:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	d1f6      	bne.n	800b2ea <__strtok_r+0x32>
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d0f2      	beq.n	800b2e6 <__strtok_r+0x2e>
 800b300:	2300      	movs	r3, #0
 800b302:	703b      	strb	r3, [r7, #0]
 800b304:	6014      	str	r4, [r2, #0]
 800b306:	e7ed      	b.n	800b2e4 <__strtok_r+0x2c>

0800b308 <strstr>:
 800b308:	780a      	ldrb	r2, [r1, #0]
 800b30a:	b570      	push	{r4, r5, r6, lr}
 800b30c:	b96a      	cbnz	r2, 800b32a <strstr+0x22>
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	429a      	cmp	r2, r3
 800b312:	d109      	bne.n	800b328 <strstr+0x20>
 800b314:	460c      	mov	r4, r1
 800b316:	4605      	mov	r5, r0
 800b318:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f6      	beq.n	800b30e <strstr+0x6>
 800b320:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b324:	429e      	cmp	r6, r3
 800b326:	d0f7      	beq.n	800b318 <strstr+0x10>
 800b328:	3001      	adds	r0, #1
 800b32a:	7803      	ldrb	r3, [r0, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1ef      	bne.n	800b310 <strstr+0x8>
 800b330:	4618      	mov	r0, r3
 800b332:	e7ec      	b.n	800b30e <strstr+0x6>

0800b334 <ctime>:
 800b334:	b508      	push	{r3, lr}
 800b336:	f000 f805 	bl	800b344 <localtime>
 800b33a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b33e:	f003 ba41 	b.w	800e7c4 <asctime>
	...

0800b344 <localtime>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4b0b      	ldr	r3, [pc, #44]	@ (800b374 <localtime+0x30>)
 800b348:	681d      	ldr	r5, [r3, #0]
 800b34a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b34c:	4604      	mov	r4, r0
 800b34e:	b953      	cbnz	r3, 800b366 <localtime+0x22>
 800b350:	2024      	movs	r0, #36	@ 0x24
 800b352:	f001 fb2b 	bl	800c9ac <malloc>
 800b356:	4602      	mov	r2, r0
 800b358:	6368      	str	r0, [r5, #52]	@ 0x34
 800b35a:	b920      	cbnz	r0, 800b366 <localtime+0x22>
 800b35c:	4b06      	ldr	r3, [pc, #24]	@ (800b378 <localtime+0x34>)
 800b35e:	4807      	ldr	r0, [pc, #28]	@ (800b37c <localtime+0x38>)
 800b360:	2132      	movs	r1, #50	@ 0x32
 800b362:	f000 ff35 	bl	800c1d0 <__assert_func>
 800b366:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800b368:	4620      	mov	r0, r4
 800b36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b36e:	f000 b807 	b.w	800b380 <localtime_r>
 800b372:	bf00      	nop
 800b374:	200001a0 	.word	0x200001a0
 800b378:	0800f47a 	.word	0x0800f47a
 800b37c:	0800f4eb 	.word	0x0800f4eb

0800b380 <localtime_r>:
 800b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b384:	460c      	mov	r4, r1
 800b386:	4607      	mov	r7, r0
 800b388:	f003 fa64 	bl	800e854 <__gettzinfo>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4605      	mov	r5, r0
 800b390:	4638      	mov	r0, r7
 800b392:	f003 fa63 	bl	800e85c <gmtime_r>
 800b396:	6943      	ldr	r3, [r0, #20]
 800b398:	0799      	lsls	r1, r3, #30
 800b39a:	4604      	mov	r4, r0
 800b39c:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800b3a0:	d106      	bne.n	800b3b0 <localtime_r+0x30>
 800b3a2:	2264      	movs	r2, #100	@ 0x64
 800b3a4:	fb98 f3f2 	sdiv	r3, r8, r2
 800b3a8:	fb02 8313 	mls	r3, r2, r3, r8
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d171      	bne.n	800b494 <localtime_r+0x114>
 800b3b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b3b4:	fb98 f3f2 	sdiv	r3, r8, r2
 800b3b8:	fb02 8313 	mls	r3, r2, r3, r8
 800b3bc:	fab3 f383 	clz	r3, r3
 800b3c0:	095b      	lsrs	r3, r3, #5
 800b3c2:	425e      	negs	r6, r3
 800b3c4:	4b64      	ldr	r3, [pc, #400]	@ (800b558 <localtime_r+0x1d8>)
 800b3c6:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 800b3ca:	441e      	add	r6, r3
 800b3cc:	f000 fc24 	bl	800bc18 <__tz_lock>
 800b3d0:	f000 fc2e 	bl	800bc30 <_tzset_unlocked>
 800b3d4:	4b61      	ldr	r3, [pc, #388]	@ (800b55c <localtime_r+0x1dc>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d06a      	beq.n	800b4b2 <localtime_r+0x132>
 800b3dc:	686b      	ldr	r3, [r5, #4]
 800b3de:	4543      	cmp	r3, r8
 800b3e0:	d15a      	bne.n	800b498 <localtime_r+0x118>
 800b3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e6:	682f      	ldr	r7, [r5, #0]
 800b3e8:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800b3ec:	2f00      	cmp	r7, #0
 800b3ee:	d15b      	bne.n	800b4a8 <localtime_r+0x128>
 800b3f0:	4282      	cmp	r2, r0
 800b3f2:	eb73 0101 	sbcs.w	r1, r3, r1
 800b3f6:	db5e      	blt.n	800b4b6 <localtime_r+0x136>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	6223      	str	r3, [r4, #32]
 800b3fc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b3fe:	6861      	ldr	r1, [r4, #4]
 800b400:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b404:	fb93 f0f2 	sdiv	r0, r3, r2
 800b408:	fb02 3310 	mls	r3, r2, r0, r3
 800b40c:	223c      	movs	r2, #60	@ 0x3c
 800b40e:	fb93 f5f2 	sdiv	r5, r3, r2
 800b412:	fb02 3215 	mls	r2, r2, r5, r3
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	1a9b      	subs	r3, r3, r2
 800b41a:	68a2      	ldr	r2, [r4, #8]
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	1b49      	subs	r1, r1, r5
 800b420:	1a12      	subs	r2, r2, r0
 800b422:	2b3b      	cmp	r3, #59	@ 0x3b
 800b424:	6061      	str	r1, [r4, #4]
 800b426:	60a2      	str	r2, [r4, #8]
 800b428:	dd51      	ble.n	800b4ce <localtime_r+0x14e>
 800b42a:	3101      	adds	r1, #1
 800b42c:	6061      	str	r1, [r4, #4]
 800b42e:	3b3c      	subs	r3, #60	@ 0x3c
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	6863      	ldr	r3, [r4, #4]
 800b434:	2b3b      	cmp	r3, #59	@ 0x3b
 800b436:	dd50      	ble.n	800b4da <localtime_r+0x15a>
 800b438:	3201      	adds	r2, #1
 800b43a:	60a2      	str	r2, [r4, #8]
 800b43c:	3b3c      	subs	r3, #60	@ 0x3c
 800b43e:	6063      	str	r3, [r4, #4]
 800b440:	68a3      	ldr	r3, [r4, #8]
 800b442:	2b17      	cmp	r3, #23
 800b444:	dd4f      	ble.n	800b4e6 <localtime_r+0x166>
 800b446:	69e2      	ldr	r2, [r4, #28]
 800b448:	3201      	adds	r2, #1
 800b44a:	61e2      	str	r2, [r4, #28]
 800b44c:	69a2      	ldr	r2, [r4, #24]
 800b44e:	3201      	adds	r2, #1
 800b450:	2a07      	cmp	r2, #7
 800b452:	bfa8      	it	ge
 800b454:	2200      	movge	r2, #0
 800b456:	61a2      	str	r2, [r4, #24]
 800b458:	68e2      	ldr	r2, [r4, #12]
 800b45a:	3b18      	subs	r3, #24
 800b45c:	3201      	adds	r2, #1
 800b45e:	60a3      	str	r3, [r4, #8]
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	60e2      	str	r2, [r4, #12]
 800b464:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800b468:	428a      	cmp	r2, r1
 800b46a:	dd0e      	ble.n	800b48a <localtime_r+0x10a>
 800b46c:	2b0b      	cmp	r3, #11
 800b46e:	eba2 0201 	sub.w	r2, r2, r1
 800b472:	60e2      	str	r2, [r4, #12]
 800b474:	f103 0201 	add.w	r2, r3, #1
 800b478:	bf09      	itett	eq
 800b47a:	6963      	ldreq	r3, [r4, #20]
 800b47c:	6122      	strne	r2, [r4, #16]
 800b47e:	2200      	moveq	r2, #0
 800b480:	3301      	addeq	r3, #1
 800b482:	bf02      	ittt	eq
 800b484:	6122      	streq	r2, [r4, #16]
 800b486:	6163      	streq	r3, [r4, #20]
 800b488:	61e2      	streq	r2, [r4, #28]
 800b48a:	f000 fbcb 	bl	800bc24 <__tz_unlock>
 800b48e:	4620      	mov	r0, r4
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	2301      	movs	r3, #1
 800b496:	e794      	b.n	800b3c2 <localtime_r+0x42>
 800b498:	4640      	mov	r0, r8
 800b49a:	f000 fb09 	bl	800bab0 <__tzcalc_limits>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d19f      	bne.n	800b3e2 <localtime_r+0x62>
 800b4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a6:	e004      	b.n	800b4b2 <localtime_r+0x132>
 800b4a8:	4282      	cmp	r2, r0
 800b4aa:	eb73 0101 	sbcs.w	r1, r3, r1
 800b4ae:	da02      	bge.n	800b4b6 <localtime_r+0x136>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6223      	str	r3, [r4, #32]
 800b4b4:	e009      	b.n	800b4ca <localtime_r+0x14a>
 800b4b6:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800b4ba:	4282      	cmp	r2, r0
 800b4bc:	418b      	sbcs	r3, r1
 800b4be:	bfb4      	ite	lt
 800b4c0:	2301      	movlt	r3, #1
 800b4c2:	2300      	movge	r3, #0
 800b4c4:	6223      	str	r3, [r4, #32]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d198      	bne.n	800b3fc <localtime_r+0x7c>
 800b4ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800b4cc:	e797      	b.n	800b3fe <localtime_r+0x7e>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	daaf      	bge.n	800b432 <localtime_r+0xb2>
 800b4d2:	3901      	subs	r1, #1
 800b4d4:	6061      	str	r1, [r4, #4]
 800b4d6:	333c      	adds	r3, #60	@ 0x3c
 800b4d8:	e7aa      	b.n	800b430 <localtime_r+0xb0>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	dab0      	bge.n	800b440 <localtime_r+0xc0>
 800b4de:	3a01      	subs	r2, #1
 800b4e0:	60a2      	str	r2, [r4, #8]
 800b4e2:	333c      	adds	r3, #60	@ 0x3c
 800b4e4:	e7ab      	b.n	800b43e <localtime_r+0xbe>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	dacf      	bge.n	800b48a <localtime_r+0x10a>
 800b4ea:	69e2      	ldr	r2, [r4, #28]
 800b4ec:	3a01      	subs	r2, #1
 800b4ee:	61e2      	str	r2, [r4, #28]
 800b4f0:	69a2      	ldr	r2, [r4, #24]
 800b4f2:	3a01      	subs	r2, #1
 800b4f4:	bf48      	it	mi
 800b4f6:	2206      	movmi	r2, #6
 800b4f8:	61a2      	str	r2, [r4, #24]
 800b4fa:	68e2      	ldr	r2, [r4, #12]
 800b4fc:	3318      	adds	r3, #24
 800b4fe:	3a01      	subs	r2, #1
 800b500:	60e2      	str	r2, [r4, #12]
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	2a00      	cmp	r2, #0
 800b506:	d1c0      	bne.n	800b48a <localtime_r+0x10a>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	d405      	bmi.n	800b51a <localtime_r+0x19a>
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b516:	60e3      	str	r3, [r4, #12]
 800b518:	e7b7      	b.n	800b48a <localtime_r+0x10a>
 800b51a:	230b      	movs	r3, #11
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	6963      	ldr	r3, [r4, #20]
 800b520:	1e5a      	subs	r2, r3, #1
 800b522:	6162      	str	r2, [r4, #20]
 800b524:	0792      	lsls	r2, r2, #30
 800b526:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800b52a:	d105      	bne.n	800b538 <localtime_r+0x1b8>
 800b52c:	2164      	movs	r1, #100	@ 0x64
 800b52e:	fb93 f2f1 	sdiv	r2, r3, r1
 800b532:	fb01 3212 	mls	r2, r1, r2, r3
 800b536:	b962      	cbnz	r2, 800b552 <localtime_r+0x1d2>
 800b538:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b53c:	fb93 f1f2 	sdiv	r1, r3, r2
 800b540:	fb02 3311 	mls	r3, r2, r1, r3
 800b544:	fab3 f383 	clz	r3, r3
 800b548:	095b      	lsrs	r3, r3, #5
 800b54a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800b54e:	61e3      	str	r3, [r4, #28]
 800b550:	e7de      	b.n	800b510 <localtime_r+0x190>
 800b552:	2301      	movs	r3, #1
 800b554:	e7f9      	b.n	800b54a <localtime_r+0x1ca>
 800b556:	bf00      	nop
 800b558:	0800f91c 	.word	0x0800f91c
 800b55c:	20006ef8 	.word	0x20006ef8

0800b560 <validate_structure>:
 800b560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b562:	6801      	ldr	r1, [r0, #0]
 800b564:	293b      	cmp	r1, #59	@ 0x3b
 800b566:	4604      	mov	r4, r0
 800b568:	d911      	bls.n	800b58e <validate_structure+0x2e>
 800b56a:	223c      	movs	r2, #60	@ 0x3c
 800b56c:	4668      	mov	r0, sp
 800b56e:	f000 fe4d 	bl	800c20c <div>
 800b572:	9a01      	ldr	r2, [sp, #4]
 800b574:	6863      	ldr	r3, [r4, #4]
 800b576:	9900      	ldr	r1, [sp, #0]
 800b578:	2a00      	cmp	r2, #0
 800b57a:	440b      	add	r3, r1
 800b57c:	6063      	str	r3, [r4, #4]
 800b57e:	bfbb      	ittet	lt
 800b580:	323c      	addlt	r2, #60	@ 0x3c
 800b582:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b586:	6022      	strge	r2, [r4, #0]
 800b588:	6022      	strlt	r2, [r4, #0]
 800b58a:	bfb8      	it	lt
 800b58c:	6063      	strlt	r3, [r4, #4]
 800b58e:	6861      	ldr	r1, [r4, #4]
 800b590:	293b      	cmp	r1, #59	@ 0x3b
 800b592:	d911      	bls.n	800b5b8 <validate_structure+0x58>
 800b594:	223c      	movs	r2, #60	@ 0x3c
 800b596:	4668      	mov	r0, sp
 800b598:	f000 fe38 	bl	800c20c <div>
 800b59c:	9a01      	ldr	r2, [sp, #4]
 800b59e:	68a3      	ldr	r3, [r4, #8]
 800b5a0:	9900      	ldr	r1, [sp, #0]
 800b5a2:	2a00      	cmp	r2, #0
 800b5a4:	440b      	add	r3, r1
 800b5a6:	60a3      	str	r3, [r4, #8]
 800b5a8:	bfbb      	ittet	lt
 800b5aa:	323c      	addlt	r2, #60	@ 0x3c
 800b5ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b5b0:	6062      	strge	r2, [r4, #4]
 800b5b2:	6062      	strlt	r2, [r4, #4]
 800b5b4:	bfb8      	it	lt
 800b5b6:	60a3      	strlt	r3, [r4, #8]
 800b5b8:	68a1      	ldr	r1, [r4, #8]
 800b5ba:	2917      	cmp	r1, #23
 800b5bc:	d911      	bls.n	800b5e2 <validate_structure+0x82>
 800b5be:	2218      	movs	r2, #24
 800b5c0:	4668      	mov	r0, sp
 800b5c2:	f000 fe23 	bl	800c20c <div>
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	68e3      	ldr	r3, [r4, #12]
 800b5ca:	9900      	ldr	r1, [sp, #0]
 800b5cc:	2a00      	cmp	r2, #0
 800b5ce:	440b      	add	r3, r1
 800b5d0:	60e3      	str	r3, [r4, #12]
 800b5d2:	bfbb      	ittet	lt
 800b5d4:	3218      	addlt	r2, #24
 800b5d6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b5da:	60a2      	strge	r2, [r4, #8]
 800b5dc:	60a2      	strlt	r2, [r4, #8]
 800b5de:	bfb8      	it	lt
 800b5e0:	60e3      	strlt	r3, [r4, #12]
 800b5e2:	6921      	ldr	r1, [r4, #16]
 800b5e4:	290b      	cmp	r1, #11
 800b5e6:	d911      	bls.n	800b60c <validate_structure+0xac>
 800b5e8:	220c      	movs	r2, #12
 800b5ea:	4668      	mov	r0, sp
 800b5ec:	f000 fe0e 	bl	800c20c <div>
 800b5f0:	9a01      	ldr	r2, [sp, #4]
 800b5f2:	6963      	ldr	r3, [r4, #20]
 800b5f4:	9900      	ldr	r1, [sp, #0]
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	440b      	add	r3, r1
 800b5fa:	6163      	str	r3, [r4, #20]
 800b5fc:	bfbb      	ittet	lt
 800b5fe:	320c      	addlt	r2, #12
 800b600:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b604:	6122      	strge	r2, [r4, #16]
 800b606:	6122      	strlt	r2, [r4, #16]
 800b608:	bfb8      	it	lt
 800b60a:	6163      	strlt	r3, [r4, #20]
 800b60c:	6963      	ldr	r3, [r4, #20]
 800b60e:	079a      	lsls	r2, r3, #30
 800b610:	d11c      	bne.n	800b64c <validate_structure+0xec>
 800b612:	2164      	movs	r1, #100	@ 0x64
 800b614:	fb93 f2f1 	sdiv	r2, r3, r1
 800b618:	fb01 3212 	mls	r2, r1, r2, r3
 800b61c:	b9c2      	cbnz	r2, 800b650 <validate_structure+0xf0>
 800b61e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800b622:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b626:	fb93 f1f2 	sdiv	r1, r3, r2
 800b62a:	fb02 3311 	mls	r3, r2, r1, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bf0c      	ite	eq
 800b632:	231d      	moveq	r3, #29
 800b634:	231c      	movne	r3, #28
 800b636:	68e2      	ldr	r2, [r4, #12]
 800b638:	2a00      	cmp	r2, #0
 800b63a:	dc0b      	bgt.n	800b654 <validate_structure+0xf4>
 800b63c:	4d31      	ldr	r5, [pc, #196]	@ (800b704 <validate_structure+0x1a4>)
 800b63e:	200b      	movs	r0, #11
 800b640:	2164      	movs	r1, #100	@ 0x64
 800b642:	68e6      	ldr	r6, [r4, #12]
 800b644:	2e00      	cmp	r6, #0
 800b646:	dd30      	ble.n	800b6aa <validate_structure+0x14a>
 800b648:	b003      	add	sp, #12
 800b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64c:	231c      	movs	r3, #28
 800b64e:	e7f2      	b.n	800b636 <validate_structure+0xd6>
 800b650:	231d      	movs	r3, #29
 800b652:	e7f0      	b.n	800b636 <validate_structure+0xd6>
 800b654:	4d2b      	ldr	r5, [pc, #172]	@ (800b704 <validate_structure+0x1a4>)
 800b656:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b65a:	2a01      	cmp	r2, #1
 800b65c:	bf14      	ite	ne
 800b65e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800b662:	4618      	moveq	r0, r3
 800b664:	4281      	cmp	r1, r0
 800b666:	ddef      	ble.n	800b648 <validate_structure+0xe8>
 800b668:	3201      	adds	r2, #1
 800b66a:	1a09      	subs	r1, r1, r0
 800b66c:	2a0c      	cmp	r2, #12
 800b66e:	60e1      	str	r1, [r4, #12]
 800b670:	6122      	str	r2, [r4, #16]
 800b672:	d1f0      	bne.n	800b656 <validate_structure+0xf6>
 800b674:	6963      	ldr	r3, [r4, #20]
 800b676:	2100      	movs	r1, #0
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	6121      	str	r1, [r4, #16]
 800b67c:	0791      	lsls	r1, r2, #30
 800b67e:	6162      	str	r2, [r4, #20]
 800b680:	d13c      	bne.n	800b6fc <validate_structure+0x19c>
 800b682:	2164      	movs	r1, #100	@ 0x64
 800b684:	fb92 f0f1 	sdiv	r0, r2, r1
 800b688:	fb01 2210 	mls	r2, r1, r0, r2
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	d137      	bne.n	800b700 <validate_structure+0x1a0>
 800b690:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800b694:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b698:	fb93 f1f2 	sdiv	r1, r3, r2
 800b69c:	fb02 3311 	mls	r3, r2, r1, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bf0c      	ite	eq
 800b6a4:	231d      	moveq	r3, #29
 800b6a6:	231c      	movne	r3, #28
 800b6a8:	e7d5      	b.n	800b656 <validate_structure+0xf6>
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	3a01      	subs	r2, #1
 800b6ae:	6122      	str	r2, [r4, #16]
 800b6b0:	3201      	adds	r2, #1
 800b6b2:	d116      	bne.n	800b6e2 <validate_structure+0x182>
 800b6b4:	6963      	ldr	r3, [r4, #20]
 800b6b6:	1e5a      	subs	r2, r3, #1
 800b6b8:	0797      	lsls	r7, r2, #30
 800b6ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800b6be:	d119      	bne.n	800b6f4 <validate_structure+0x194>
 800b6c0:	fb92 f7f1 	sdiv	r7, r2, r1
 800b6c4:	fb01 2217 	mls	r2, r1, r7, r2
 800b6c8:	b9b2      	cbnz	r2, 800b6f8 <validate_structure+0x198>
 800b6ca:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800b6ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b6d2:	fb93 f7f2 	sdiv	r7, r3, r2
 800b6d6:	fb02 3317 	mls	r3, r2, r7, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	bf0c      	ite	eq
 800b6de:	231d      	moveq	r3, #29
 800b6e0:	231c      	movne	r3, #28
 800b6e2:	6922      	ldr	r2, [r4, #16]
 800b6e4:	2a01      	cmp	r2, #1
 800b6e6:	bf14      	ite	ne
 800b6e8:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800b6ec:	461a      	moveq	r2, r3
 800b6ee:	4432      	add	r2, r6
 800b6f0:	60e2      	str	r2, [r4, #12]
 800b6f2:	e7a6      	b.n	800b642 <validate_structure+0xe2>
 800b6f4:	231c      	movs	r3, #28
 800b6f6:	e7f4      	b.n	800b6e2 <validate_structure+0x182>
 800b6f8:	231d      	movs	r3, #29
 800b6fa:	e7f2      	b.n	800b6e2 <validate_structure+0x182>
 800b6fc:	231c      	movs	r3, #28
 800b6fe:	e7aa      	b.n	800b656 <validate_structure+0xf6>
 800b700:	231d      	movs	r3, #29
 800b702:	e7a8      	b.n	800b656 <validate_structure+0xf6>
 800b704:	0800f8ec 	.word	0x0800f8ec

0800b708 <mktime>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	b085      	sub	sp, #20
 800b70e:	4607      	mov	r7, r0
 800b710:	f003 f8a0 	bl	800e854 <__gettzinfo>
 800b714:	4681      	mov	r9, r0
 800b716:	4638      	mov	r0, r7
 800b718:	f7ff ff22 	bl	800b560 <validate_structure>
 800b71c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800b720:	223c      	movs	r2, #60	@ 0x3c
 800b722:	fb02 4403 	mla	r4, r2, r3, r4
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	697d      	ldr	r5, [r7, #20]
 800b72a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b72e:	fb02 4403 	mla	r4, r2, r3, r4
 800b732:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800b736:	4ac3      	ldr	r2, [pc, #780]	@ (800ba44 <mktime+0x33c>)
 800b738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b73c:	3e01      	subs	r6, #1
 800b73e:	2b01      	cmp	r3, #1
 800b740:	4416      	add	r6, r2
 800b742:	dd11      	ble.n	800b768 <mktime+0x60>
 800b744:	07a9      	lsls	r1, r5, #30
 800b746:	d10f      	bne.n	800b768 <mktime+0x60>
 800b748:	2264      	movs	r2, #100	@ 0x64
 800b74a:	fb95 f3f2 	sdiv	r3, r5, r2
 800b74e:	fb02 5313 	mls	r3, r2, r3, r5
 800b752:	b943      	cbnz	r3, 800b766 <mktime+0x5e>
 800b754:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b758:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b75c:	fb93 f1f2 	sdiv	r1, r3, r2
 800b760:	fb02 3311 	mls	r3, r2, r1, r3
 800b764:	b903      	cbnz	r3, 800b768 <mktime+0x60>
 800b766:	3601      	adds	r6, #1
 800b768:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800b76c:	3310      	adds	r3, #16
 800b76e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b772:	4293      	cmp	r3, r2
 800b774:	61fe      	str	r6, [r7, #28]
 800b776:	f200 8170 	bhi.w	800ba5a <mktime+0x352>
 800b77a:	2d46      	cmp	r5, #70	@ 0x46
 800b77c:	f340 80b6 	ble.w	800b8ec <mktime+0x1e4>
 800b780:	2346      	movs	r3, #70	@ 0x46
 800b782:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b786:	2164      	movs	r1, #100	@ 0x64
 800b788:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b78c:	079a      	lsls	r2, r3, #30
 800b78e:	f040 80a7 	bne.w	800b8e0 <mktime+0x1d8>
 800b792:	fb93 f2f1 	sdiv	r2, r3, r1
 800b796:	fb01 3212 	mls	r2, r1, r2, r3
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	f040 80a3 	bne.w	800b8e6 <mktime+0x1de>
 800b7a0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b7a4:	fb92 fef0 	sdiv	lr, r2, r0
 800b7a8:	fb00 221e 	mls	r2, r0, lr, r2
 800b7ac:	2a00      	cmp	r2, #0
 800b7ae:	bf0c      	ite	eq
 800b7b0:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b7b4:	4662      	movne	r2, ip
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	429d      	cmp	r5, r3
 800b7ba:	4416      	add	r6, r2
 800b7bc:	d1e6      	bne.n	800b78c <mktime+0x84>
 800b7be:	4ba2      	ldr	r3, [pc, #648]	@ (800ba48 <mktime+0x340>)
 800b7c0:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b7c4:	fbc6 4803 	smlal	r4, r8, r6, r3
 800b7c8:	f000 fa26 	bl	800bc18 <__tz_lock>
 800b7cc:	f000 fa30 	bl	800bc30 <_tzset_unlocked>
 800b7d0:	4b9e      	ldr	r3, [pc, #632]	@ (800ba4c <mktime+0x344>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 8147 	beq.w	800ba68 <mktime+0x360>
 800b7da:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800b7de:	6978      	ldr	r0, [r7, #20]
 800b7e0:	4653      	mov	r3, sl
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	bfa8      	it	ge
 800b7e6:	2301      	movge	r3, #1
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b7ee:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800b7f2:	4283      	cmp	r3, r0
 800b7f4:	f040 80bd 	bne.w	800b972 <mktime+0x26a>
 800b7f8:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800b7fc:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800b800:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800b804:	1a13      	subs	r3, r2, r0
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800b80c:	9302      	str	r3, [sp, #8]
 800b80e:	9a02      	ldr	r2, [sp, #8]
 800b810:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b814:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800b818:	ebb2 0e03 	subs.w	lr, r2, r3
 800b81c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800b820:	4574      	cmp	r4, lr
 800b822:	eb78 0201 	sbcs.w	r2, r8, r1
 800b826:	f280 80c7 	bge.w	800b9b8 <mktime+0x2b0>
 800b82a:	f8d9 2000 	ldr.w	r2, [r9]
 800b82e:	2a00      	cmp	r2, #0
 800b830:	f000 80d0 	beq.w	800b9d4 <mktime+0x2cc>
 800b834:	9a03      	ldr	r2, [sp, #12]
 800b836:	4294      	cmp	r4, r2
 800b838:	eb78 020b 	sbcs.w	r2, r8, fp
 800b83c:	f2c0 8111 	blt.w	800ba62 <mktime+0x35a>
 800b840:	4574      	cmp	r4, lr
 800b842:	eb78 0101 	sbcs.w	r1, r8, r1
 800b846:	bfb4      	ite	lt
 800b848:	f04f 0b01 	movlt.w	fp, #1
 800b84c:	f04f 0b00 	movge.w	fp, #0
 800b850:	f1ba 0f00 	cmp.w	sl, #0
 800b854:	f2c0 8094 	blt.w	800b980 <mktime+0x278>
 800b858:	9a01      	ldr	r2, [sp, #4]
 800b85a:	ea82 0a0b 	eor.w	sl, r2, fp
 800b85e:	f1ba 0f01 	cmp.w	sl, #1
 800b862:	f040 808d 	bne.w	800b980 <mktime+0x278>
 800b866:	f1bb 0f00 	cmp.w	fp, #0
 800b86a:	f000 80c2 	beq.w	800b9f2 <mktime+0x2ea>
 800b86e:	1a1b      	subs	r3, r3, r0
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	441a      	add	r2, r3
 800b874:	191c      	adds	r4, r3, r4
 800b876:	603a      	str	r2, [r7, #0]
 800b878:	4638      	mov	r0, r7
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	9201      	str	r2, [sp, #4]
 800b87e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b882:	f7ff fe6d 	bl	800b560 <validate_structure>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	d078      	beq.n	800b980 <mktime+0x278>
 800b88e:	2b01      	cmp	r3, #1
 800b890:	f300 80b1 	bgt.w	800b9f6 <mktime+0x2ee>
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	bfa8      	it	ge
 800b89a:	469a      	movge	sl, r3
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	eb1a 0303 	adds.w	r3, sl, r3
 800b8a2:	4456      	add	r6, sl
 800b8a4:	f140 80b0 	bpl.w	800ba08 <mktime+0x300>
 800b8a8:	1e6b      	subs	r3, r5, #1
 800b8aa:	0799      	lsls	r1, r3, #30
 800b8ac:	f040 80a6 	bne.w	800b9fc <mktime+0x2f4>
 800b8b0:	2264      	movs	r2, #100	@ 0x64
 800b8b2:	fb93 f1f2 	sdiv	r1, r3, r2
 800b8b6:	fb02 3311 	mls	r3, r2, r1, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f040 80a1 	bne.w	800ba02 <mktime+0x2fa>
 800b8c0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b8c4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800b8c8:	fb95 f2f3 	sdiv	r2, r5, r3
 800b8cc:	fb03 5512 	mls	r5, r3, r2, r5
 800b8d0:	2d00      	cmp	r5, #0
 800b8d2:	f240 136d 	movw	r3, #365	@ 0x16d
 800b8d6:	bf18      	it	ne
 800b8d8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	e04f      	b.n	800b980 <mktime+0x278>
 800b8e0:	f240 126d 	movw	r2, #365	@ 0x16d
 800b8e4:	e767      	b.n	800b7b6 <mktime+0xae>
 800b8e6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b8ea:	e764      	b.n	800b7b6 <mktime+0xae>
 800b8ec:	f43f af67 	beq.w	800b7be <mktime+0xb6>
 800b8f0:	2345      	movs	r3, #69	@ 0x45
 800b8f2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b8f6:	2164      	movs	r1, #100	@ 0x64
 800b8f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b8fc:	e012      	b.n	800b924 <mktime+0x21c>
 800b8fe:	bb62      	cbnz	r2, 800b95a <mktime+0x252>
 800b900:	fb93 f2f1 	sdiv	r2, r3, r1
 800b904:	fb01 3212 	mls	r2, r1, r2, r3
 800b908:	bb52      	cbnz	r2, 800b960 <mktime+0x258>
 800b90a:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b90e:	fb92 fef0 	sdiv	lr, r2, r0
 800b912:	fb00 221e 	mls	r2, r0, lr, r2
 800b916:	2a00      	cmp	r2, #0
 800b918:	bf0c      	ite	eq
 800b91a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b91e:	4662      	movne	r2, ip
 800b920:	1ab6      	subs	r6, r6, r2
 800b922:	3b01      	subs	r3, #1
 800b924:	429d      	cmp	r5, r3
 800b926:	f003 0203 	and.w	r2, r3, #3
 800b92a:	dbe8      	blt.n	800b8fe <mktime+0x1f6>
 800b92c:	b9da      	cbnz	r2, 800b966 <mktime+0x25e>
 800b92e:	2264      	movs	r2, #100	@ 0x64
 800b930:	fb95 f3f2 	sdiv	r3, r5, r2
 800b934:	fb02 5313 	mls	r3, r2, r3, r5
 800b938:	b9c3      	cbnz	r3, 800b96c <mktime+0x264>
 800b93a:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b93e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b942:	fb93 f1f2 	sdiv	r1, r3, r2
 800b946:	fb02 3311 	mls	r3, r2, r1, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f240 136d 	movw	r3, #365	@ 0x16d
 800b950:	bf08      	it	eq
 800b952:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800b956:	1af6      	subs	r6, r6, r3
 800b958:	e731      	b.n	800b7be <mktime+0xb6>
 800b95a:	f240 126d 	movw	r2, #365	@ 0x16d
 800b95e:	e7df      	b.n	800b920 <mktime+0x218>
 800b960:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b964:	e7dc      	b.n	800b920 <mktime+0x218>
 800b966:	f240 136d 	movw	r3, #365	@ 0x16d
 800b96a:	e7f4      	b.n	800b956 <mktime+0x24e>
 800b96c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800b970:	e7f1      	b.n	800b956 <mktime+0x24e>
 800b972:	f000 f89d 	bl	800bab0 <__tzcalc_limits>
 800b976:	2800      	cmp	r0, #0
 800b978:	f47f af3e 	bne.w	800b7f8 <mktime+0xf0>
 800b97c:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b980:	f1bb 0f01 	cmp.w	fp, #1
 800b984:	d172      	bne.n	800ba6c <mktime+0x364>
 800b986:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800b98a:	191c      	adds	r4, r3, r4
 800b98c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b990:	f04f 0b01 	mov.w	fp, #1
 800b994:	f000 f946 	bl	800bc24 <__tz_unlock>
 800b998:	3604      	adds	r6, #4
 800b99a:	2307      	movs	r3, #7
 800b99c:	fb96 f3f3 	sdiv	r3, r6, r3
 800b9a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b9a4:	1af6      	subs	r6, r6, r3
 800b9a6:	d456      	bmi.n	800ba56 <mktime+0x34e>
 800b9a8:	f8c7 b020 	str.w	fp, [r7, #32]
 800b9ac:	61be      	str	r6, [r7, #24]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	4641      	mov	r1, r8
 800b9b2:	b005      	add	sp, #20
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b8:	9a02      	ldr	r2, [sp, #8]
 800b9ba:	1a12      	subs	r2, r2, r0
 800b9bc:	9202      	str	r2, [sp, #8]
 800b9be:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800b9c2:	eb6c 0c02 	sbc.w	ip, ip, r2
 800b9c6:	9a02      	ldr	r2, [sp, #8]
 800b9c8:	4294      	cmp	r4, r2
 800b9ca:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800b9ce:	f6bf af2c 	bge.w	800b82a <mktime+0x122>
 800b9d2:	e7d3      	b.n	800b97c <mktime+0x274>
 800b9d4:	9a03      	ldr	r2, [sp, #12]
 800b9d6:	4294      	cmp	r4, r2
 800b9d8:	eb78 020b 	sbcs.w	r2, r8, fp
 800b9dc:	f6ff af30 	blt.w	800b840 <mktime+0x138>
 800b9e0:	f1ba 0f00 	cmp.w	sl, #0
 800b9e4:	dbcf      	blt.n	800b986 <mktime+0x27e>
 800b9e6:	f04f 0b01 	mov.w	fp, #1
 800b9ea:	e735      	b.n	800b858 <mktime+0x150>
 800b9ec:	f04f 0b00 	mov.w	fp, #0
 800b9f0:	e732      	b.n	800b858 <mktime+0x150>
 800b9f2:	1ac3      	subs	r3, r0, r3
 800b9f4:	e73c      	b.n	800b870 <mktime+0x168>
 800b9f6:	f04f 3aff 	mov.w	sl, #4294967295
 800b9fa:	e74f      	b.n	800b89c <mktime+0x194>
 800b9fc:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800ba00:	e76c      	b.n	800b8dc <mktime+0x1d4>
 800ba02:	f240 136d 	movw	r3, #365	@ 0x16d
 800ba06:	e769      	b.n	800b8dc <mktime+0x1d4>
 800ba08:	07aa      	lsls	r2, r5, #30
 800ba0a:	d117      	bne.n	800ba3c <mktime+0x334>
 800ba0c:	2164      	movs	r1, #100	@ 0x64
 800ba0e:	fb95 f2f1 	sdiv	r2, r5, r1
 800ba12:	fb01 5212 	mls	r2, r1, r2, r5
 800ba16:	b9da      	cbnz	r2, 800ba50 <mktime+0x348>
 800ba18:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ba1c:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800ba20:	fb95 f1f2 	sdiv	r1, r5, r2
 800ba24:	fb02 5511 	mls	r5, r2, r1, r5
 800ba28:	2d00      	cmp	r5, #0
 800ba2a:	f240 126d 	movw	r2, #365	@ 0x16d
 800ba2e:	bf08      	it	eq
 800ba30:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ba34:	4293      	cmp	r3, r2
 800ba36:	bfa8      	it	ge
 800ba38:	1a9b      	subge	r3, r3, r2
 800ba3a:	e74f      	b.n	800b8dc <mktime+0x1d4>
 800ba3c:	f240 126d 	movw	r2, #365	@ 0x16d
 800ba40:	e7f8      	b.n	800ba34 <mktime+0x32c>
 800ba42:	bf00      	nop
 800ba44:	0800f8bc 	.word	0x0800f8bc
 800ba48:	00015180 	.word	0x00015180
 800ba4c:	20006ef8 	.word	0x20006ef8
 800ba50:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ba54:	e7ee      	b.n	800ba34 <mktime+0x32c>
 800ba56:	3607      	adds	r6, #7
 800ba58:	e7a6      	b.n	800b9a8 <mktime+0x2a0>
 800ba5a:	f04f 34ff 	mov.w	r4, #4294967295
 800ba5e:	46a0      	mov	r8, r4
 800ba60:	e7a5      	b.n	800b9ae <mktime+0x2a6>
 800ba62:	f1ba 0f00 	cmp.w	sl, #0
 800ba66:	dac1      	bge.n	800b9ec <mktime+0x2e4>
 800ba68:	f04f 0b00 	mov.w	fp, #0
 800ba6c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ba70:	191c      	adds	r4, r3, r4
 800ba72:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ba76:	e78d      	b.n	800b994 <mktime+0x28c>

0800ba78 <time>:
 800ba78:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800ba7a:	4b0c      	ldr	r3, [pc, #48]	@ (800baac <time+0x34>)
 800ba7c:	f04f 36ff 	mov.w	r6, #4294967295
 800ba80:	f04f 37ff 	mov.w	r7, #4294967295
 800ba84:	4669      	mov	r1, sp
 800ba86:	4604      	mov	r4, r0
 800ba88:	2200      	movs	r2, #0
 800ba8a:	6818      	ldr	r0, [r3, #0]
 800ba8c:	e9cd 6700 	strd	r6, r7, [sp]
 800ba90:	f000 fb06 	bl	800c0a0 <_gettimeofday_r>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	bfb8      	it	lt
 800ba98:	e9cd 6700 	strdlt	r6, r7, [sp]
 800ba9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa0:	b10c      	cbz	r4, 800baa6 <time+0x2e>
 800baa2:	e9c4 0100 	strd	r0, r1, [r4]
 800baa6:	b004      	add	sp, #16
 800baa8:	bdd0      	pop	{r4, r6, r7, pc}
 800baaa:	bf00      	nop
 800baac:	200001a0 	.word	0x200001a0

0800bab0 <__tzcalc_limits>:
 800bab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab4:	4604      	mov	r4, r0
 800bab6:	f002 fecd 	bl	800e854 <__gettzinfo>
 800baba:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800babe:	429c      	cmp	r4, r3
 800bac0:	f340 80a3 	ble.w	800bc0a <__tzcalc_limits+0x15a>
 800bac4:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800bac8:	1865      	adds	r5, r4, r1
 800baca:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800bace:	f240 126d 	movw	r2, #365	@ 0x16d
 800bad2:	10ad      	asrs	r5, r5, #2
 800bad4:	fb02 5503 	mla	r5, r2, r3, r5
 800bad8:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800badc:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800bae0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800bae4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bae8:	441d      	add	r5, r3
 800baea:	19a3      	adds	r3, r4, r6
 800baec:	4e48      	ldr	r6, [pc, #288]	@ (800bc10 <__tzcalc_limits+0x160>)
 800baee:	6044      	str	r4, [r0, #4]
 800baf0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800baf4:	4601      	mov	r1, r0
 800baf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bafa:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800bafe:	441d      	add	r5, r3
 800bb00:	7a0b      	ldrb	r3, [r1, #8]
 800bb02:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800bb06:	2b4a      	cmp	r3, #74	@ 0x4a
 800bb08:	d138      	bne.n	800bb7c <__tzcalc_limits+0xcc>
 800bb0a:	07a2      	lsls	r2, r4, #30
 800bb0c:	eb05 030c 	add.w	r3, r5, ip
 800bb10:	d106      	bne.n	800bb20 <__tzcalc_limits+0x70>
 800bb12:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800bb16:	fb94 f2fe 	sdiv	r2, r4, lr
 800bb1a:	fb0e 4212 	mls	r2, lr, r2, r4
 800bb1e:	b932      	cbnz	r2, 800bb2e <__tzcalc_limits+0x7e>
 800bb20:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800bb24:	fb94 f2fe 	sdiv	r2, r4, lr
 800bb28:	fb0e 4212 	mls	r2, lr, r2, r4
 800bb2c:	bb1a      	cbnz	r2, 800bb76 <__tzcalc_limits+0xc6>
 800bb2e:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800bb32:	bfd4      	ite	le
 800bb34:	f04f 0c00 	movle.w	ip, #0
 800bb38:	f04f 0c01 	movgt.w	ip, #1
 800bb3c:	4463      	add	r3, ip
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	698a      	ldr	r2, [r1, #24]
 800bb42:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800bb46:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800bb4a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800bb4c:	18d2      	adds	r2, r2, r3
 800bb4e:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800bb52:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800bb56:	3128      	adds	r1, #40	@ 0x28
 800bb58:	428f      	cmp	r7, r1
 800bb5a:	d1d1      	bne.n	800bb00 <__tzcalc_limits+0x50>
 800bb5c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800bb60:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800bb64:	428c      	cmp	r4, r1
 800bb66:	4193      	sbcs	r3, r2
 800bb68:	bfb4      	ite	lt
 800bb6a:	2301      	movlt	r3, #1
 800bb6c:	2300      	movge	r3, #0
 800bb6e:	6003      	str	r3, [r0, #0]
 800bb70:	2001      	movs	r0, #1
 800bb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb76:	f04f 0c00 	mov.w	ip, #0
 800bb7a:	e7df      	b.n	800bb3c <__tzcalc_limits+0x8c>
 800bb7c:	2b44      	cmp	r3, #68	@ 0x44
 800bb7e:	d102      	bne.n	800bb86 <__tzcalc_limits+0xd6>
 800bb80:	eb05 030c 	add.w	r3, r5, ip
 800bb84:	e7dc      	b.n	800bb40 <__tzcalc_limits+0x90>
 800bb86:	07a3      	lsls	r3, r4, #30
 800bb88:	d105      	bne.n	800bb96 <__tzcalc_limits+0xe6>
 800bb8a:	2264      	movs	r2, #100	@ 0x64
 800bb8c:	fb94 f3f2 	sdiv	r3, r4, r2
 800bb90:	fb02 4313 	mls	r3, r2, r3, r4
 800bb94:	bb93      	cbnz	r3, 800bbfc <__tzcalc_limits+0x14c>
 800bb96:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bb9a:	fb94 f3f2 	sdiv	r3, r4, r2
 800bb9e:	fb02 4313 	mls	r3, r2, r3, r4
 800bba2:	fab3 f383 	clz	r3, r3
 800bba6:	095b      	lsrs	r3, r3, #5
 800bba8:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800bc14 <__tzcalc_limits+0x164>
 800bbac:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800bbb0:	425b      	negs	r3, r3
 800bbb2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	f04f 0800 	mov.w	r8, #0
 800bbbc:	4473      	add	r3, lr
 800bbbe:	f108 0801 	add.w	r8, r8, #1
 800bbc2:	45c1      	cmp	r9, r8
 800bbc4:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800bbc8:	dc1a      	bgt.n	800bc00 <__tzcalc_limits+0x150>
 800bbca:	f102 0804 	add.w	r8, r2, #4
 800bbce:	2307      	movs	r3, #7
 800bbd0:	fb98 f3f3 	sdiv	r3, r8, r3
 800bbd4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbd8:	eba8 0303 	sub.w	r3, r8, r3
 800bbdc:	ebbc 0c03 	subs.w	ip, ip, r3
 800bbe0:	690b      	ldr	r3, [r1, #16]
 800bbe2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbe6:	bf48      	it	mi
 800bbe8:	f10c 0c07 	addmi.w	ip, ip, #7
 800bbec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbf0:	449c      	add	ip, r3
 800bbf2:	45f4      	cmp	ip, lr
 800bbf4:	da06      	bge.n	800bc04 <__tzcalc_limits+0x154>
 800bbf6:	eb02 030c 	add.w	r3, r2, ip
 800bbfa:	e7a1      	b.n	800bb40 <__tzcalc_limits+0x90>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e7d3      	b.n	800bba8 <__tzcalc_limits+0xf8>
 800bc00:	4472      	add	r2, lr
 800bc02:	e7dc      	b.n	800bbbe <__tzcalc_limits+0x10e>
 800bc04:	f1ac 0c07 	sub.w	ip, ip, #7
 800bc08:	e7f3      	b.n	800bbf2 <__tzcalc_limits+0x142>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	e7b1      	b.n	800bb72 <__tzcalc_limits+0xc2>
 800bc0e:	bf00      	nop
 800bc10:	00015180 	.word	0x00015180
 800bc14:	0800f918 	.word	0x0800f918

0800bc18 <__tz_lock>:
 800bc18:	4801      	ldr	r0, [pc, #4]	@ (800bc20 <__tz_lock+0x8>)
 800bc1a:	f000 bab4 	b.w	800c186 <__retarget_lock_acquire>
 800bc1e:	bf00      	nop
 800bc20:	20006f00 	.word	0x20006f00

0800bc24 <__tz_unlock>:
 800bc24:	4801      	ldr	r0, [pc, #4]	@ (800bc2c <__tz_unlock+0x8>)
 800bc26:	f000 bab0 	b.w	800c18a <__retarget_lock_release>
 800bc2a:	bf00      	nop
 800bc2c:	20006f00 	.word	0x20006f00

0800bc30 <_tzset_unlocked>:
 800bc30:	4b01      	ldr	r3, [pc, #4]	@ (800bc38 <_tzset_unlocked+0x8>)
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	f000 b802 	b.w	800bc3c <_tzset_unlocked_r>
 800bc38:	200001a0 	.word	0x200001a0

0800bc3c <_tzset_unlocked_r>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	b08d      	sub	sp, #52	@ 0x34
 800bc42:	4607      	mov	r7, r0
 800bc44:	f002 fe06 	bl	800e854 <__gettzinfo>
 800bc48:	49bc      	ldr	r1, [pc, #752]	@ (800bf3c <_tzset_unlocked_r+0x300>)
 800bc4a:	4dbd      	ldr	r5, [pc, #756]	@ (800bf40 <_tzset_unlocked_r+0x304>)
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f000 fea4 	bl	800c99c <_getenv_r>
 800bc54:	4606      	mov	r6, r0
 800bc56:	bb10      	cbnz	r0, 800bc9e <_tzset_unlocked_r+0x62>
 800bc58:	4bba      	ldr	r3, [pc, #744]	@ (800bf44 <_tzset_unlocked_r+0x308>)
 800bc5a:	4abb      	ldr	r2, [pc, #748]	@ (800bf48 <_tzset_unlocked_r+0x30c>)
 800bc5c:	6018      	str	r0, [r3, #0]
 800bc5e:	4bbb      	ldr	r3, [pc, #748]	@ (800bf4c <_tzset_unlocked_r+0x310>)
 800bc60:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bc62:	6018      	str	r0, [r3, #0]
 800bc64:	4bba      	ldr	r3, [pc, #744]	@ (800bf50 <_tzset_unlocked_r+0x314>)
 800bc66:	6520      	str	r0, [r4, #80]	@ 0x50
 800bc68:	e9c3 2200 	strd	r2, r2, [r3]
 800bc6c:	214a      	movs	r1, #74	@ 0x4a
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2300      	movs	r3, #0
 800bc72:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800bc76:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800bc7a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800bc7e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800bc82:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800bc86:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800bc8a:	6828      	ldr	r0, [r5, #0]
 800bc8c:	7221      	strb	r1, [r4, #8]
 800bc8e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800bc92:	f000 fe93 	bl	800c9bc <free>
 800bc96:	602e      	str	r6, [r5, #0]
 800bc98:	b00d      	add	sp, #52	@ 0x34
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	6829      	ldr	r1, [r5, #0]
 800bca0:	2900      	cmp	r1, #0
 800bca2:	f040 808e 	bne.w	800bdc2 <_tzset_unlocked_r+0x186>
 800bca6:	6828      	ldr	r0, [r5, #0]
 800bca8:	f000 fe88 	bl	800c9bc <free>
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7f4 faa1 	bl	80001f4 <strlen>
 800bcb2:	1c41      	adds	r1, r0, #1
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f000 feab 	bl	800ca10 <_malloc_r>
 800bcba:	6028      	str	r0, [r5, #0]
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f040 8086 	bne.w	800bdce <_tzset_unlocked_r+0x192>
 800bcc2:	4aa2      	ldr	r2, [pc, #648]	@ (800bf4c <_tzset_unlocked_r+0x310>)
 800bcc4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800bf50 <_tzset_unlocked_r+0x314>
 800bcc8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800bf44 <_tzset_unlocked_r+0x308>
 800bccc:	2300      	movs	r3, #0
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	4aa0      	ldr	r2, [pc, #640]	@ (800bf54 <_tzset_unlocked_r+0x318>)
 800bcd2:	f8ca 3000 	str.w	r3, [sl]
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	2100      	movs	r1, #0
 800bcda:	e9c8 2200 	strd	r2, r2, [r8]
 800bcde:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800bce2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800bce6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800bcea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800bcee:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800bcf2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800bcf6:	224a      	movs	r2, #74	@ 0x4a
 800bcf8:	7222      	strb	r2, [r4, #8]
 800bcfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcfc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800bd00:	6523      	str	r3, [r4, #80]	@ 0x50
 800bd02:	7833      	ldrb	r3, [r6, #0]
 800bd04:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd06:	bf08      	it	eq
 800bd08:	3601      	addeq	r6, #1
 800bd0a:	7833      	ldrb	r3, [r6, #0]
 800bd0c:	2b3c      	cmp	r3, #60	@ 0x3c
 800bd0e:	d162      	bne.n	800bdd6 <_tzset_unlocked_r+0x19a>
 800bd10:	1c75      	adds	r5, r6, #1
 800bd12:	4a91      	ldr	r2, [pc, #580]	@ (800bf58 <_tzset_unlocked_r+0x31c>)
 800bd14:	4991      	ldr	r1, [pc, #580]	@ (800bf5c <_tzset_unlocked_r+0x320>)
 800bd16:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7ff f92d 	bl	800af78 <siscanf>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	ddba      	ble.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bd22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd24:	1eda      	subs	r2, r3, #3
 800bd26:	2a07      	cmp	r2, #7
 800bd28:	d8b6      	bhi.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bd2a:	5ceb      	ldrb	r3, [r5, r3]
 800bd2c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd2e:	d1b3      	bne.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bd30:	3602      	adds	r6, #2
 800bd32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd34:	18f5      	adds	r5, r6, r3
 800bd36:	5cf3      	ldrb	r3, [r6, r3]
 800bd38:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd3a:	d15a      	bne.n	800bdf2 <_tzset_unlocked_r+0x1b6>
 800bd3c:	3501      	adds	r5, #1
 800bd3e:	f04f 39ff 	mov.w	r9, #4294967295
 800bd42:	2300      	movs	r3, #0
 800bd44:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bd48:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bd4c:	af08      	add	r7, sp, #32
 800bd4e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd50:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800bd54:	9303      	str	r3, [sp, #12]
 800bd56:	f10d 031e 	add.w	r3, sp, #30
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	4980      	ldr	r1, [pc, #512]	@ (800bf60 <_tzset_unlocked_r+0x324>)
 800bd5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd60:	aa07      	add	r2, sp, #28
 800bd62:	4628      	mov	r0, r5
 800bd64:	f7ff f908 	bl	800af78 <siscanf>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	dd95      	ble.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bd6c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800bd70:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800bd74:	223c      	movs	r2, #60	@ 0x3c
 800bd76:	fb02 6603 	mla	r6, r2, r3, r6
 800bd7a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800bd7e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800bd82:	fb02 6603 	mla	r6, r2, r3, r6
 800bd86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd88:	fb09 f606 	mul.w	r6, r9, r6
 800bd8c:	eb05 0903 	add.w	r9, r5, r3
 800bd90:	5ceb      	ldrb	r3, [r5, r3]
 800bd92:	2b3c      	cmp	r3, #60	@ 0x3c
 800bd94:	f040 80ee 	bne.w	800bf74 <_tzset_unlocked_r+0x338>
 800bd98:	f109 0501 	add.w	r5, r9, #1
 800bd9c:	4a71      	ldr	r2, [pc, #452]	@ (800bf64 <_tzset_unlocked_r+0x328>)
 800bd9e:	496f      	ldr	r1, [pc, #444]	@ (800bf5c <_tzset_unlocked_r+0x320>)
 800bda0:	ab0a      	add	r3, sp, #40	@ 0x28
 800bda2:	4628      	mov	r0, r5
 800bda4:	f7ff f8e8 	bl	800af78 <siscanf>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	dc28      	bgt.n	800bdfe <_tzset_unlocked_r+0x1c2>
 800bdac:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bdb0:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdb2:	d124      	bne.n	800bdfe <_tzset_unlocked_r+0x1c2>
 800bdb4:	4b68      	ldr	r3, [pc, #416]	@ (800bf58 <_tzset_unlocked_r+0x31c>)
 800bdb6:	62a6      	str	r6, [r4, #40]	@ 0x28
 800bdb8:	e9c8 3300 	strd	r3, r3, [r8]
 800bdbc:	f8ca 6000 	str.w	r6, [sl]
 800bdc0:	e76a      	b.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bdc2:	f7f4 fa0d 	bl	80001e0 <strcmp>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f47f af6d 	bne.w	800bca6 <_tzset_unlocked_r+0x6a>
 800bdcc:	e764      	b.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bdce:	4631      	mov	r1, r6
 800bdd0:	f000 f9dd 	bl	800c18e <strcpy>
 800bdd4:	e775      	b.n	800bcc2 <_tzset_unlocked_r+0x86>
 800bdd6:	4a60      	ldr	r2, [pc, #384]	@ (800bf58 <_tzset_unlocked_r+0x31c>)
 800bdd8:	4963      	ldr	r1, [pc, #396]	@ (800bf68 <_tzset_unlocked_r+0x32c>)
 800bdda:	ab0a      	add	r3, sp, #40	@ 0x28
 800bddc:	4630      	mov	r0, r6
 800bdde:	f7ff f8cb 	bl	800af78 <siscanf>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	f77f af58 	ble.w	800bc98 <_tzset_unlocked_r+0x5c>
 800bde8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdea:	3b03      	subs	r3, #3
 800bdec:	2b07      	cmp	r3, #7
 800bdee:	d9a0      	bls.n	800bd32 <_tzset_unlocked_r+0xf6>
 800bdf0:	e752      	b.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bdf2:	2b2b      	cmp	r3, #43	@ 0x2b
 800bdf4:	bf08      	it	eq
 800bdf6:	3501      	addeq	r5, #1
 800bdf8:	f04f 0901 	mov.w	r9, #1
 800bdfc:	e7a1      	b.n	800bd42 <_tzset_unlocked_r+0x106>
 800bdfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be00:	1eda      	subs	r2, r3, #3
 800be02:	2a07      	cmp	r2, #7
 800be04:	f63f af48 	bhi.w	800bc98 <_tzset_unlocked_r+0x5c>
 800be08:	5ceb      	ldrb	r3, [r5, r3]
 800be0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800be0c:	f47f af44 	bne.w	800bc98 <_tzset_unlocked_r+0x5c>
 800be10:	f109 0902 	add.w	r9, r9, #2
 800be14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be16:	eb09 0503 	add.w	r5, r9, r3
 800be1a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800be1e:	2b2d      	cmp	r3, #45	@ 0x2d
 800be20:	f040 80b7 	bne.w	800bf92 <_tzset_unlocked_r+0x356>
 800be24:	3501      	adds	r5, #1
 800be26:	f04f 39ff 	mov.w	r9, #4294967295
 800be2a:	2300      	movs	r3, #0
 800be2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800be30:	f8ad 301e 	strh.w	r3, [sp, #30]
 800be34:	f8ad 3020 	strh.w	r3, [sp, #32]
 800be38:	930a      	str	r3, [sp, #40]	@ 0x28
 800be3a:	ab0a      	add	r3, sp, #40	@ 0x28
 800be3c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	f10d 031e 	add.w	r3, sp, #30
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	4945      	ldr	r1, [pc, #276]	@ (800bf60 <_tzset_unlocked_r+0x324>)
 800be4a:	ab0a      	add	r3, sp, #40	@ 0x28
 800be4c:	aa07      	add	r2, sp, #28
 800be4e:	4628      	mov	r0, r5
 800be50:	f7ff f892 	bl	800af78 <siscanf>
 800be54:	2800      	cmp	r0, #0
 800be56:	f300 80a2 	bgt.w	800bf9e <_tzset_unlocked_r+0x362>
 800be5a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be62:	4627      	mov	r7, r4
 800be64:	441d      	add	r5, r3
 800be66:	f04f 0b00 	mov.w	fp, #0
 800be6a:	782b      	ldrb	r3, [r5, #0]
 800be6c:	2b2c      	cmp	r3, #44	@ 0x2c
 800be6e:	bf08      	it	eq
 800be70:	3501      	addeq	r5, #1
 800be72:	f895 9000 	ldrb.w	r9, [r5]
 800be76:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800be7a:	f040 80a3 	bne.w	800bfc4 <_tzset_unlocked_r+0x388>
 800be7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800be80:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800be84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800be88:	aa09      	add	r2, sp, #36	@ 0x24
 800be8a:	9200      	str	r2, [sp, #0]
 800be8c:	4937      	ldr	r1, [pc, #220]	@ (800bf6c <_tzset_unlocked_r+0x330>)
 800be8e:	9303      	str	r3, [sp, #12]
 800be90:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800be94:	4628      	mov	r0, r5
 800be96:	f7ff f86f 	bl	800af78 <siscanf>
 800be9a:	2803      	cmp	r0, #3
 800be9c:	f47f aefc 	bne.w	800bc98 <_tzset_unlocked_r+0x5c>
 800bea0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800bea4:	1e4b      	subs	r3, r1, #1
 800bea6:	2b0b      	cmp	r3, #11
 800bea8:	f63f aef6 	bhi.w	800bc98 <_tzset_unlocked_r+0x5c>
 800beac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800beb0:	1e53      	subs	r3, r2, #1
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	f63f aef0 	bhi.w	800bc98 <_tzset_unlocked_r+0x5c>
 800beb8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800bebc:	2b06      	cmp	r3, #6
 800bebe:	f63f aeeb 	bhi.w	800bc98 <_tzset_unlocked_r+0x5c>
 800bec2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800bec6:	f887 9008 	strb.w	r9, [r7, #8]
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bece:	eb05 0903 	add.w	r9, r5, r3
 800bed2:	2500      	movs	r5, #0
 800bed4:	f04f 0302 	mov.w	r3, #2
 800bed8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bedc:	f8ad 501e 	strh.w	r5, [sp, #30]
 800bee0:	f8ad 5020 	strh.w	r5, [sp, #32]
 800bee4:	950a      	str	r5, [sp, #40]	@ 0x28
 800bee6:	f899 3000 	ldrb.w	r3, [r9]
 800beea:	2b2f      	cmp	r3, #47	@ 0x2f
 800beec:	f040 8096 	bne.w	800c01c <_tzset_unlocked_r+0x3e0>
 800bef0:	ab0a      	add	r3, sp, #40	@ 0x28
 800bef2:	aa08      	add	r2, sp, #32
 800bef4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bef8:	f10d 021e 	add.w	r2, sp, #30
 800befc:	9200      	str	r2, [sp, #0]
 800befe:	491c      	ldr	r1, [pc, #112]	@ (800bf70 <_tzset_unlocked_r+0x334>)
 800bf00:	9303      	str	r3, [sp, #12]
 800bf02:	aa07      	add	r2, sp, #28
 800bf04:	4648      	mov	r0, r9
 800bf06:	f7ff f837 	bl	800af78 <siscanf>
 800bf0a:	42a8      	cmp	r0, r5
 800bf0c:	f300 8086 	bgt.w	800c01c <_tzset_unlocked_r+0x3e0>
 800bf10:	214a      	movs	r1, #74	@ 0x4a
 800bf12:	2200      	movs	r2, #0
 800bf14:	2300      	movs	r3, #0
 800bf16:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800bf1a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bf1e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800bf22:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800bf26:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800bf2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800bf2e:	7221      	strb	r1, [r4, #8]
 800bf30:	62a5      	str	r5, [r4, #40]	@ 0x28
 800bf32:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800bf36:	6525      	str	r5, [r4, #80]	@ 0x50
 800bf38:	e6ae      	b.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bf3a:	bf00      	nop
 800bf3c:	0800f544 	.word	0x0800f544
 800bf40:	20006ed8 	.word	0x20006ed8
 800bf44:	20006ef4 	.word	0x20006ef4
 800bf48:	0800f547 	.word	0x0800f547
 800bf4c:	20006ef8 	.word	0x20006ef8
 800bf50:	2000002c 	.word	0x2000002c
 800bf54:	0800f766 	.word	0x0800f766
 800bf58:	20006ee8 	.word	0x20006ee8
 800bf5c:	0800f54b 	.word	0x0800f54b
 800bf60:	0800f580 	.word	0x0800f580
 800bf64:	20006edc 	.word	0x20006edc
 800bf68:	0800f55e 	.word	0x0800f55e
 800bf6c:	0800f56c 	.word	0x0800f56c
 800bf70:	0800f57f 	.word	0x0800f57f
 800bf74:	4a3e      	ldr	r2, [pc, #248]	@ (800c070 <_tzset_unlocked_r+0x434>)
 800bf76:	493f      	ldr	r1, [pc, #252]	@ (800c074 <_tzset_unlocked_r+0x438>)
 800bf78:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf7a:	4648      	mov	r0, r9
 800bf7c:	f7fe fffc 	bl	800af78 <siscanf>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	f77f af17 	ble.w	800bdb4 <_tzset_unlocked_r+0x178>
 800bf86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf88:	3b03      	subs	r3, #3
 800bf8a:	2b07      	cmp	r3, #7
 800bf8c:	f67f af42 	bls.w	800be14 <_tzset_unlocked_r+0x1d8>
 800bf90:	e682      	b.n	800bc98 <_tzset_unlocked_r+0x5c>
 800bf92:	2b2b      	cmp	r3, #43	@ 0x2b
 800bf94:	bf08      	it	eq
 800bf96:	3501      	addeq	r5, #1
 800bf98:	f04f 0901 	mov.w	r9, #1
 800bf9c:	e745      	b.n	800be2a <_tzset_unlocked_r+0x1ee>
 800bf9e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bfa2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bfa6:	213c      	movs	r1, #60	@ 0x3c
 800bfa8:	fb01 3302 	mla	r3, r1, r2, r3
 800bfac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800bfb0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800bfb4:	fb01 3302 	mla	r3, r1, r2, r3
 800bfb8:	fb09 f303 	mul.w	r3, r9, r3
 800bfbc:	e74f      	b.n	800be5e <_tzset_unlocked_r+0x222>
 800bfbe:	f04f 0b01 	mov.w	fp, #1
 800bfc2:	e752      	b.n	800be6a <_tzset_unlocked_r+0x22e>
 800bfc4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800bfc8:	bf06      	itte	eq
 800bfca:	3501      	addeq	r5, #1
 800bfcc:	464b      	moveq	r3, r9
 800bfce:	2344      	movne	r3, #68	@ 0x44
 800bfd0:	220a      	movs	r2, #10
 800bfd2:	a90b      	add	r1, sp, #44	@ 0x2c
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	9305      	str	r3, [sp, #20]
 800bfd8:	f001 fad2 	bl	800d580 <strtoul>
 800bfdc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800bfe0:	9b05      	ldr	r3, [sp, #20]
 800bfe2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800bfe6:	45a9      	cmp	r9, r5
 800bfe8:	d114      	bne.n	800c014 <_tzset_unlocked_r+0x3d8>
 800bfea:	234d      	movs	r3, #77	@ 0x4d
 800bfec:	f1bb 0f00 	cmp.w	fp, #0
 800bff0:	d107      	bne.n	800c002 <_tzset_unlocked_r+0x3c6>
 800bff2:	7223      	strb	r3, [r4, #8]
 800bff4:	2103      	movs	r1, #3
 800bff6:	2302      	movs	r3, #2
 800bff8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800bffc:	f8c4 b014 	str.w	fp, [r4, #20]
 800c000:	e767      	b.n	800bed2 <_tzset_unlocked_r+0x296>
 800c002:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800c006:	220b      	movs	r2, #11
 800c008:	2301      	movs	r3, #1
 800c00a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800c00e:	2300      	movs	r3, #0
 800c010:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800c012:	e75e      	b.n	800bed2 <_tzset_unlocked_r+0x296>
 800c014:	b280      	uxth	r0, r0
 800c016:	723b      	strb	r3, [r7, #8]
 800c018:	6178      	str	r0, [r7, #20]
 800c01a:	e75a      	b.n	800bed2 <_tzset_unlocked_r+0x296>
 800c01c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c020:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c024:	213c      	movs	r1, #60	@ 0x3c
 800c026:	fb01 3302 	mla	r3, r1, r2, r3
 800c02a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c02e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c032:	fb01 3302 	mla	r3, r1, r2, r3
 800c036:	61bb      	str	r3, [r7, #24]
 800c038:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c03a:	3728      	adds	r7, #40	@ 0x28
 800c03c:	444d      	add	r5, r9
 800c03e:	f1bb 0f00 	cmp.w	fp, #0
 800c042:	d0bc      	beq.n	800bfbe <_tzset_unlocked_r+0x382>
 800c044:	9b04      	ldr	r3, [sp, #16]
 800c046:	6523      	str	r3, [r4, #80]	@ 0x50
 800c048:	4b0b      	ldr	r3, [pc, #44]	@ (800c078 <_tzset_unlocked_r+0x43c>)
 800c04a:	f8c8 3000 	str.w	r3, [r8]
 800c04e:	6860      	ldr	r0, [r4, #4]
 800c050:	4b07      	ldr	r3, [pc, #28]	@ (800c070 <_tzset_unlocked_r+0x434>)
 800c052:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c054:	f8c8 3004 	str.w	r3, [r8, #4]
 800c058:	f7ff fd2a 	bl	800bab0 <__tzcalc_limits>
 800c05c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c05e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c060:	f8ca 2000 	str.w	r2, [sl]
 800c064:	1a9b      	subs	r3, r3, r2
 800c066:	4a05      	ldr	r2, [pc, #20]	@ (800c07c <_tzset_unlocked_r+0x440>)
 800c068:	bf18      	it	ne
 800c06a:	2301      	movne	r3, #1
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	e613      	b.n	800bc98 <_tzset_unlocked_r+0x5c>
 800c070:	20006edc 	.word	0x20006edc
 800c074:	0800f55e 	.word	0x0800f55e
 800c078:	20006ee8 	.word	0x20006ee8
 800c07c:	20006ef8 	.word	0x20006ef8

0800c080 <_close_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d06      	ldr	r5, [pc, #24]	@ (800c09c <_close_r+0x1c>)
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	4608      	mov	r0, r1
 800c08a:	602b      	str	r3, [r5, #0]
 800c08c:	f7f7 f8f8 	bl	8003280 <_close>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d102      	bne.n	800c09a <_close_r+0x1a>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	b103      	cbz	r3, 800c09a <_close_r+0x1a>
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	20006efc 	.word	0x20006efc

0800c0a0 <_gettimeofday_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d07      	ldr	r5, [pc, #28]	@ (800c0c0 <_gettimeofday_r+0x20>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	602b      	str	r3, [r5, #0]
 800c0ae:	f7f7 f91b 	bl	80032e8 <_gettimeofday>
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	d102      	bne.n	800c0bc <_gettimeofday_r+0x1c>
 800c0b6:	682b      	ldr	r3, [r5, #0]
 800c0b8:	b103      	cbz	r3, 800c0bc <_gettimeofday_r+0x1c>
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	bd38      	pop	{r3, r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	20006efc 	.word	0x20006efc

0800c0c4 <_lseek_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d07      	ldr	r5, [pc, #28]	@ (800c0e4 <_lseek_r+0x20>)
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	4608      	mov	r0, r1
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	602a      	str	r2, [r5, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f7f7 f8fb 	bl	80032ce <_lseek>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_lseek_r+0x1e>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_lseek_r+0x1e>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	20006efc 	.word	0x20006efc

0800c0e8 <_read_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4d07      	ldr	r5, [pc, #28]	@ (800c108 <_read_r+0x20>)
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	602a      	str	r2, [r5, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	f7f7 f889 	bl	800320e <_read>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_read_r+0x1e>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_read_r+0x1e>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20006efc 	.word	0x20006efc

0800c10c <_write_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d07      	ldr	r5, [pc, #28]	@ (800c12c <_write_r+0x20>)
 800c110:	4604      	mov	r4, r0
 800c112:	4608      	mov	r0, r1
 800c114:	4611      	mov	r1, r2
 800c116:	2200      	movs	r2, #0
 800c118:	602a      	str	r2, [r5, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	f7f7 f894 	bl	8003248 <_write>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_write_r+0x1e>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_write_r+0x1e>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	20006efc 	.word	0x20006efc

0800c130 <__errno>:
 800c130:	4b01      	ldr	r3, [pc, #4]	@ (800c138 <__errno+0x8>)
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	200001a0 	.word	0x200001a0

0800c13c <__libc_init_array>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	4d0d      	ldr	r5, [pc, #52]	@ (800c174 <__libc_init_array+0x38>)
 800c140:	4c0d      	ldr	r4, [pc, #52]	@ (800c178 <__libc_init_array+0x3c>)
 800c142:	1b64      	subs	r4, r4, r5
 800c144:	10a4      	asrs	r4, r4, #2
 800c146:	2600      	movs	r6, #0
 800c148:	42a6      	cmp	r6, r4
 800c14a:	d109      	bne.n	800c160 <__libc_init_array+0x24>
 800c14c:	4d0b      	ldr	r5, [pc, #44]	@ (800c17c <__libc_init_array+0x40>)
 800c14e:	4c0c      	ldr	r4, [pc, #48]	@ (800c180 <__libc_init_array+0x44>)
 800c150:	f002 fcfe 	bl	800eb50 <_init>
 800c154:	1b64      	subs	r4, r4, r5
 800c156:	10a4      	asrs	r4, r4, #2
 800c158:	2600      	movs	r6, #0
 800c15a:	42a6      	cmp	r6, r4
 800c15c:	d105      	bne.n	800c16a <__libc_init_array+0x2e>
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	f855 3b04 	ldr.w	r3, [r5], #4
 800c164:	4798      	blx	r3
 800c166:	3601      	adds	r6, #1
 800c168:	e7ee      	b.n	800c148 <__libc_init_array+0xc>
 800c16a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16e:	4798      	blx	r3
 800c170:	3601      	adds	r6, #1
 800c172:	e7f2      	b.n	800c15a <__libc_init_array+0x1e>
 800c174:	0800fabc 	.word	0x0800fabc
 800c178:	0800fabc 	.word	0x0800fabc
 800c17c:	0800fabc 	.word	0x0800fabc
 800c180:	0800fac0 	.word	0x0800fac0

0800c184 <__retarget_lock_init_recursive>:
 800c184:	4770      	bx	lr

0800c186 <__retarget_lock_acquire>:
 800c186:	4770      	bx	lr

0800c188 <__retarget_lock_acquire_recursive>:
 800c188:	4770      	bx	lr

0800c18a <__retarget_lock_release>:
 800c18a:	4770      	bx	lr

0800c18c <__retarget_lock_release_recursive>:
 800c18c:	4770      	bx	lr

0800c18e <strcpy>:
 800c18e:	4603      	mov	r3, r0
 800c190:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c194:	f803 2b01 	strb.w	r2, [r3], #1
 800c198:	2a00      	cmp	r2, #0
 800c19a:	d1f9      	bne.n	800c190 <strcpy+0x2>
 800c19c:	4770      	bx	lr

0800c19e <memcpy>:
 800c19e:	440a      	add	r2, r1
 800c1a0:	4291      	cmp	r1, r2
 800c1a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1a6:	d100      	bne.n	800c1aa <memcpy+0xc>
 800c1a8:	4770      	bx	lr
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1b4:	4291      	cmp	r1, r2
 800c1b6:	d1f9      	bne.n	800c1ac <memcpy+0xe>
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	0000      	movs	r0, r0
 800c1bc:	0000      	movs	r0, r0
	...

0800c1c0 <nan>:
 800c1c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c1c8 <nan+0x8>
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	7ff80000 	.word	0x7ff80000

0800c1d0 <__assert_func>:
 800c1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1d2:	4614      	mov	r4, r2
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	4b09      	ldr	r3, [pc, #36]	@ (800c1fc <__assert_func+0x2c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4605      	mov	r5, r0
 800c1dc:	68d8      	ldr	r0, [r3, #12]
 800c1de:	b14c      	cbz	r4, 800c1f4 <__assert_func+0x24>
 800c1e0:	4b07      	ldr	r3, [pc, #28]	@ (800c200 <__assert_func+0x30>)
 800c1e2:	9100      	str	r1, [sp, #0]
 800c1e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1e8:	4906      	ldr	r1, [pc, #24]	@ (800c204 <__assert_func+0x34>)
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	f002 f9ce 	bl	800e58c <fiprintf>
 800c1f0:	f002 fc0c 	bl	800ea0c <abort>
 800c1f4:	4b04      	ldr	r3, [pc, #16]	@ (800c208 <__assert_func+0x38>)
 800c1f6:	461c      	mov	r4, r3
 800c1f8:	e7f3      	b.n	800c1e2 <__assert_func+0x12>
 800c1fa:	bf00      	nop
 800c1fc:	200001a0 	.word	0x200001a0
 800c200:	0800f59a 	.word	0x0800f59a
 800c204:	0800f5a7 	.word	0x0800f5a7
 800c208:	0800f766 	.word	0x0800f766

0800c20c <div>:
 800c20c:	b510      	push	{r4, lr}
 800c20e:	fb91 f4f2 	sdiv	r4, r1, r2
 800c212:	fb02 1114 	mls	r1, r2, r4, r1
 800c216:	6004      	str	r4, [r0, #0]
 800c218:	6041      	str	r1, [r0, #4]
 800c21a:	bd10      	pop	{r4, pc}

0800c21c <_free_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4605      	mov	r5, r0
 800c220:	2900      	cmp	r1, #0
 800c222:	d041      	beq.n	800c2a8 <_free_r+0x8c>
 800c224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c228:	1f0c      	subs	r4, r1, #4
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	bfb8      	it	lt
 800c22e:	18e4      	addlt	r4, r4, r3
 800c230:	f000 fc80 	bl	800cb34 <__malloc_lock>
 800c234:	4a1d      	ldr	r2, [pc, #116]	@ (800c2ac <_free_r+0x90>)
 800c236:	6813      	ldr	r3, [r2, #0]
 800c238:	b933      	cbnz	r3, 800c248 <_free_r+0x2c>
 800c23a:	6063      	str	r3, [r4, #4]
 800c23c:	6014      	str	r4, [r2, #0]
 800c23e:	4628      	mov	r0, r5
 800c240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c244:	f000 bc7c 	b.w	800cb40 <__malloc_unlock>
 800c248:	42a3      	cmp	r3, r4
 800c24a:	d908      	bls.n	800c25e <_free_r+0x42>
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	1821      	adds	r1, r4, r0
 800c250:	428b      	cmp	r3, r1
 800c252:	bf01      	itttt	eq
 800c254:	6819      	ldreq	r1, [r3, #0]
 800c256:	685b      	ldreq	r3, [r3, #4]
 800c258:	1809      	addeq	r1, r1, r0
 800c25a:	6021      	streq	r1, [r4, #0]
 800c25c:	e7ed      	b.n	800c23a <_free_r+0x1e>
 800c25e:	461a      	mov	r2, r3
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	b10b      	cbz	r3, 800c268 <_free_r+0x4c>
 800c264:	42a3      	cmp	r3, r4
 800c266:	d9fa      	bls.n	800c25e <_free_r+0x42>
 800c268:	6811      	ldr	r1, [r2, #0]
 800c26a:	1850      	adds	r0, r2, r1
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d10b      	bne.n	800c288 <_free_r+0x6c>
 800c270:	6820      	ldr	r0, [r4, #0]
 800c272:	4401      	add	r1, r0
 800c274:	1850      	adds	r0, r2, r1
 800c276:	4283      	cmp	r3, r0
 800c278:	6011      	str	r1, [r2, #0]
 800c27a:	d1e0      	bne.n	800c23e <_free_r+0x22>
 800c27c:	6818      	ldr	r0, [r3, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	6053      	str	r3, [r2, #4]
 800c282:	4408      	add	r0, r1
 800c284:	6010      	str	r0, [r2, #0]
 800c286:	e7da      	b.n	800c23e <_free_r+0x22>
 800c288:	d902      	bls.n	800c290 <_free_r+0x74>
 800c28a:	230c      	movs	r3, #12
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	e7d6      	b.n	800c23e <_free_r+0x22>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	1821      	adds	r1, r4, r0
 800c294:	428b      	cmp	r3, r1
 800c296:	bf04      	itt	eq
 800c298:	6819      	ldreq	r1, [r3, #0]
 800c29a:	685b      	ldreq	r3, [r3, #4]
 800c29c:	6063      	str	r3, [r4, #4]
 800c29e:	bf04      	itt	eq
 800c2a0:	1809      	addeq	r1, r1, r0
 800c2a2:	6021      	streq	r1, [r4, #0]
 800c2a4:	6054      	str	r4, [r2, #4]
 800c2a6:	e7ca      	b.n	800c23e <_free_r+0x22>
 800c2a8:	bd38      	pop	{r3, r4, r5, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20006f08 	.word	0x20006f08

0800c2b0 <rshift>:
 800c2b0:	6903      	ldr	r3, [r0, #16]
 800c2b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2be:	f100 0414 	add.w	r4, r0, #20
 800c2c2:	dd45      	ble.n	800c350 <rshift+0xa0>
 800c2c4:	f011 011f 	ands.w	r1, r1, #31
 800c2c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2d0:	d10c      	bne.n	800c2ec <rshift+0x3c>
 800c2d2:	f100 0710 	add.w	r7, r0, #16
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	42b1      	cmp	r1, r6
 800c2da:	d334      	bcc.n	800c346 <rshift+0x96>
 800c2dc:	1a9b      	subs	r3, r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	1eea      	subs	r2, r5, #3
 800c2e2:	4296      	cmp	r6, r2
 800c2e4:	bf38      	it	cc
 800c2e6:	2300      	movcc	r3, #0
 800c2e8:	4423      	add	r3, r4
 800c2ea:	e015      	b.n	800c318 <rshift+0x68>
 800c2ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c2f0:	f1c1 0820 	rsb	r8, r1, #32
 800c2f4:	40cf      	lsrs	r7, r1
 800c2f6:	f105 0e04 	add.w	lr, r5, #4
 800c2fa:	46a1      	mov	r9, r4
 800c2fc:	4576      	cmp	r6, lr
 800c2fe:	46f4      	mov	ip, lr
 800c300:	d815      	bhi.n	800c32e <rshift+0x7e>
 800c302:	1a9a      	subs	r2, r3, r2
 800c304:	0092      	lsls	r2, r2, #2
 800c306:	3a04      	subs	r2, #4
 800c308:	3501      	adds	r5, #1
 800c30a:	42ae      	cmp	r6, r5
 800c30c:	bf38      	it	cc
 800c30e:	2200      	movcc	r2, #0
 800c310:	18a3      	adds	r3, r4, r2
 800c312:	50a7      	str	r7, [r4, r2]
 800c314:	b107      	cbz	r7, 800c318 <rshift+0x68>
 800c316:	3304      	adds	r3, #4
 800c318:	1b1a      	subs	r2, r3, r4
 800c31a:	42a3      	cmp	r3, r4
 800c31c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c320:	bf08      	it	eq
 800c322:	2300      	moveq	r3, #0
 800c324:	6102      	str	r2, [r0, #16]
 800c326:	bf08      	it	eq
 800c328:	6143      	streq	r3, [r0, #20]
 800c32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c32e:	f8dc c000 	ldr.w	ip, [ip]
 800c332:	fa0c fc08 	lsl.w	ip, ip, r8
 800c336:	ea4c 0707 	orr.w	r7, ip, r7
 800c33a:	f849 7b04 	str.w	r7, [r9], #4
 800c33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c342:	40cf      	lsrs	r7, r1
 800c344:	e7da      	b.n	800c2fc <rshift+0x4c>
 800c346:	f851 cb04 	ldr.w	ip, [r1], #4
 800c34a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c34e:	e7c3      	b.n	800c2d8 <rshift+0x28>
 800c350:	4623      	mov	r3, r4
 800c352:	e7e1      	b.n	800c318 <rshift+0x68>

0800c354 <__hexdig_fun>:
 800c354:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c358:	2b09      	cmp	r3, #9
 800c35a:	d802      	bhi.n	800c362 <__hexdig_fun+0xe>
 800c35c:	3820      	subs	r0, #32
 800c35e:	b2c0      	uxtb	r0, r0
 800c360:	4770      	bx	lr
 800c362:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c366:	2b05      	cmp	r3, #5
 800c368:	d801      	bhi.n	800c36e <__hexdig_fun+0x1a>
 800c36a:	3847      	subs	r0, #71	@ 0x47
 800c36c:	e7f7      	b.n	800c35e <__hexdig_fun+0xa>
 800c36e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c372:	2b05      	cmp	r3, #5
 800c374:	d801      	bhi.n	800c37a <__hexdig_fun+0x26>
 800c376:	3827      	subs	r0, #39	@ 0x27
 800c378:	e7f1      	b.n	800c35e <__hexdig_fun+0xa>
 800c37a:	2000      	movs	r0, #0
 800c37c:	4770      	bx	lr
	...

0800c380 <__gethex>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	b085      	sub	sp, #20
 800c386:	468a      	mov	sl, r1
 800c388:	9302      	str	r3, [sp, #8]
 800c38a:	680b      	ldr	r3, [r1, #0]
 800c38c:	9001      	str	r0, [sp, #4]
 800c38e:	4690      	mov	r8, r2
 800c390:	1c9c      	adds	r4, r3, #2
 800c392:	46a1      	mov	r9, r4
 800c394:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c398:	2830      	cmp	r0, #48	@ 0x30
 800c39a:	d0fa      	beq.n	800c392 <__gethex+0x12>
 800c39c:	eba9 0303 	sub.w	r3, r9, r3
 800c3a0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3a4:	f7ff ffd6 	bl	800c354 <__hexdig_fun>
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d168      	bne.n	800c480 <__gethex+0x100>
 800c3ae:	49a0      	ldr	r1, [pc, #640]	@ (800c630 <__gethex+0x2b0>)
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f7fe ff26 	bl	800b204 <strncmp>
 800c3b8:	4607      	mov	r7, r0
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d167      	bne.n	800c48e <__gethex+0x10e>
 800c3be:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c3c2:	4626      	mov	r6, r4
 800c3c4:	f7ff ffc6 	bl	800c354 <__hexdig_fun>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d062      	beq.n	800c492 <__gethex+0x112>
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	7818      	ldrb	r0, [r3, #0]
 800c3d0:	2830      	cmp	r0, #48	@ 0x30
 800c3d2:	4699      	mov	r9, r3
 800c3d4:	f103 0301 	add.w	r3, r3, #1
 800c3d8:	d0f9      	beq.n	800c3ce <__gethex+0x4e>
 800c3da:	f7ff ffbb 	bl	800c354 <__hexdig_fun>
 800c3de:	fab0 f580 	clz	r5, r0
 800c3e2:	096d      	lsrs	r5, r5, #5
 800c3e4:	f04f 0b01 	mov.w	fp, #1
 800c3e8:	464a      	mov	r2, r9
 800c3ea:	4616      	mov	r6, r2
 800c3ec:	3201      	adds	r2, #1
 800c3ee:	7830      	ldrb	r0, [r6, #0]
 800c3f0:	f7ff ffb0 	bl	800c354 <__hexdig_fun>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1f8      	bne.n	800c3ea <__gethex+0x6a>
 800c3f8:	498d      	ldr	r1, [pc, #564]	@ (800c630 <__gethex+0x2b0>)
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7fe ff01 	bl	800b204 <strncmp>
 800c402:	2800      	cmp	r0, #0
 800c404:	d13f      	bne.n	800c486 <__gethex+0x106>
 800c406:	b944      	cbnz	r4, 800c41a <__gethex+0x9a>
 800c408:	1c74      	adds	r4, r6, #1
 800c40a:	4622      	mov	r2, r4
 800c40c:	4616      	mov	r6, r2
 800c40e:	3201      	adds	r2, #1
 800c410:	7830      	ldrb	r0, [r6, #0]
 800c412:	f7ff ff9f 	bl	800c354 <__hexdig_fun>
 800c416:	2800      	cmp	r0, #0
 800c418:	d1f8      	bne.n	800c40c <__gethex+0x8c>
 800c41a:	1ba4      	subs	r4, r4, r6
 800c41c:	00a7      	lsls	r7, r4, #2
 800c41e:	7833      	ldrb	r3, [r6, #0]
 800c420:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c424:	2b50      	cmp	r3, #80	@ 0x50
 800c426:	d13e      	bne.n	800c4a6 <__gethex+0x126>
 800c428:	7873      	ldrb	r3, [r6, #1]
 800c42a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c42c:	d033      	beq.n	800c496 <__gethex+0x116>
 800c42e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c430:	d034      	beq.n	800c49c <__gethex+0x11c>
 800c432:	1c71      	adds	r1, r6, #1
 800c434:	2400      	movs	r4, #0
 800c436:	7808      	ldrb	r0, [r1, #0]
 800c438:	f7ff ff8c 	bl	800c354 <__hexdig_fun>
 800c43c:	1e43      	subs	r3, r0, #1
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b18      	cmp	r3, #24
 800c442:	d830      	bhi.n	800c4a6 <__gethex+0x126>
 800c444:	f1a0 0210 	sub.w	r2, r0, #16
 800c448:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c44c:	f7ff ff82 	bl	800c354 <__hexdig_fun>
 800c450:	f100 3cff 	add.w	ip, r0, #4294967295
 800c454:	fa5f fc8c 	uxtb.w	ip, ip
 800c458:	f1bc 0f18 	cmp.w	ip, #24
 800c45c:	f04f 030a 	mov.w	r3, #10
 800c460:	d91e      	bls.n	800c4a0 <__gethex+0x120>
 800c462:	b104      	cbz	r4, 800c466 <__gethex+0xe6>
 800c464:	4252      	negs	r2, r2
 800c466:	4417      	add	r7, r2
 800c468:	f8ca 1000 	str.w	r1, [sl]
 800c46c:	b1ed      	cbz	r5, 800c4aa <__gethex+0x12a>
 800c46e:	f1bb 0f00 	cmp.w	fp, #0
 800c472:	bf0c      	ite	eq
 800c474:	2506      	moveq	r5, #6
 800c476:	2500      	movne	r5, #0
 800c478:	4628      	mov	r0, r5
 800c47a:	b005      	add	sp, #20
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	2500      	movs	r5, #0
 800c482:	462c      	mov	r4, r5
 800c484:	e7b0      	b.n	800c3e8 <__gethex+0x68>
 800c486:	2c00      	cmp	r4, #0
 800c488:	d1c7      	bne.n	800c41a <__gethex+0x9a>
 800c48a:	4627      	mov	r7, r4
 800c48c:	e7c7      	b.n	800c41e <__gethex+0x9e>
 800c48e:	464e      	mov	r6, r9
 800c490:	462f      	mov	r7, r5
 800c492:	2501      	movs	r5, #1
 800c494:	e7c3      	b.n	800c41e <__gethex+0x9e>
 800c496:	2400      	movs	r4, #0
 800c498:	1cb1      	adds	r1, r6, #2
 800c49a:	e7cc      	b.n	800c436 <__gethex+0xb6>
 800c49c:	2401      	movs	r4, #1
 800c49e:	e7fb      	b.n	800c498 <__gethex+0x118>
 800c4a0:	fb03 0002 	mla	r0, r3, r2, r0
 800c4a4:	e7ce      	b.n	800c444 <__gethex+0xc4>
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	e7de      	b.n	800c468 <__gethex+0xe8>
 800c4aa:	eba6 0309 	sub.w	r3, r6, r9
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	2b07      	cmp	r3, #7
 800c4b4:	dc0a      	bgt.n	800c4cc <__gethex+0x14c>
 800c4b6:	9801      	ldr	r0, [sp, #4]
 800c4b8:	f000 fb48 	bl	800cb4c <_Balloc>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	b940      	cbnz	r0, 800c4d2 <__gethex+0x152>
 800c4c0:	4b5c      	ldr	r3, [pc, #368]	@ (800c634 <__gethex+0x2b4>)
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	21e4      	movs	r1, #228	@ 0xe4
 800c4c6:	485c      	ldr	r0, [pc, #368]	@ (800c638 <__gethex+0x2b8>)
 800c4c8:	f7ff fe82 	bl	800c1d0 <__assert_func>
 800c4cc:	3101      	adds	r1, #1
 800c4ce:	105b      	asrs	r3, r3, #1
 800c4d0:	e7ef      	b.n	800c4b2 <__gethex+0x132>
 800c4d2:	f100 0a14 	add.w	sl, r0, #20
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	4655      	mov	r5, sl
 800c4da:	469b      	mov	fp, r3
 800c4dc:	45b1      	cmp	r9, r6
 800c4de:	d337      	bcc.n	800c550 <__gethex+0x1d0>
 800c4e0:	f845 bb04 	str.w	fp, [r5], #4
 800c4e4:	eba5 050a 	sub.w	r5, r5, sl
 800c4e8:	10ad      	asrs	r5, r5, #2
 800c4ea:	6125      	str	r5, [r4, #16]
 800c4ec:	4658      	mov	r0, fp
 800c4ee:	f000 fc1f 	bl	800cd30 <__hi0bits>
 800c4f2:	016d      	lsls	r5, r5, #5
 800c4f4:	f8d8 6000 	ldr.w	r6, [r8]
 800c4f8:	1a2d      	subs	r5, r5, r0
 800c4fa:	42b5      	cmp	r5, r6
 800c4fc:	dd54      	ble.n	800c5a8 <__gethex+0x228>
 800c4fe:	1bad      	subs	r5, r5, r6
 800c500:	4629      	mov	r1, r5
 800c502:	4620      	mov	r0, r4
 800c504:	f000 ffab 	bl	800d45e <__any_on>
 800c508:	4681      	mov	r9, r0
 800c50a:	b178      	cbz	r0, 800c52c <__gethex+0x1ac>
 800c50c:	1e6b      	subs	r3, r5, #1
 800c50e:	1159      	asrs	r1, r3, #5
 800c510:	f003 021f 	and.w	r2, r3, #31
 800c514:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c518:	f04f 0901 	mov.w	r9, #1
 800c51c:	fa09 f202 	lsl.w	r2, r9, r2
 800c520:	420a      	tst	r2, r1
 800c522:	d003      	beq.n	800c52c <__gethex+0x1ac>
 800c524:	454b      	cmp	r3, r9
 800c526:	dc36      	bgt.n	800c596 <__gethex+0x216>
 800c528:	f04f 0902 	mov.w	r9, #2
 800c52c:	4629      	mov	r1, r5
 800c52e:	4620      	mov	r0, r4
 800c530:	f7ff febe 	bl	800c2b0 <rshift>
 800c534:	442f      	add	r7, r5
 800c536:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c53a:	42bb      	cmp	r3, r7
 800c53c:	da42      	bge.n	800c5c4 <__gethex+0x244>
 800c53e:	9801      	ldr	r0, [sp, #4]
 800c540:	4621      	mov	r1, r4
 800c542:	f000 fb43 	bl	800cbcc <_Bfree>
 800c546:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c548:	2300      	movs	r3, #0
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	25a3      	movs	r5, #163	@ 0xa3
 800c54e:	e793      	b.n	800c478 <__gethex+0xf8>
 800c550:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c554:	2a2e      	cmp	r2, #46	@ 0x2e
 800c556:	d012      	beq.n	800c57e <__gethex+0x1fe>
 800c558:	2b20      	cmp	r3, #32
 800c55a:	d104      	bne.n	800c566 <__gethex+0x1e6>
 800c55c:	f845 bb04 	str.w	fp, [r5], #4
 800c560:	f04f 0b00 	mov.w	fp, #0
 800c564:	465b      	mov	r3, fp
 800c566:	7830      	ldrb	r0, [r6, #0]
 800c568:	9303      	str	r3, [sp, #12]
 800c56a:	f7ff fef3 	bl	800c354 <__hexdig_fun>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	f000 000f 	and.w	r0, r0, #15
 800c574:	4098      	lsls	r0, r3
 800c576:	ea4b 0b00 	orr.w	fp, fp, r0
 800c57a:	3304      	adds	r3, #4
 800c57c:	e7ae      	b.n	800c4dc <__gethex+0x15c>
 800c57e:	45b1      	cmp	r9, r6
 800c580:	d8ea      	bhi.n	800c558 <__gethex+0x1d8>
 800c582:	492b      	ldr	r1, [pc, #172]	@ (800c630 <__gethex+0x2b0>)
 800c584:	9303      	str	r3, [sp, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	4630      	mov	r0, r6
 800c58a:	f7fe fe3b 	bl	800b204 <strncmp>
 800c58e:	9b03      	ldr	r3, [sp, #12]
 800c590:	2800      	cmp	r0, #0
 800c592:	d1e1      	bne.n	800c558 <__gethex+0x1d8>
 800c594:	e7a2      	b.n	800c4dc <__gethex+0x15c>
 800c596:	1ea9      	subs	r1, r5, #2
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 ff60 	bl	800d45e <__any_on>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d0c2      	beq.n	800c528 <__gethex+0x1a8>
 800c5a2:	f04f 0903 	mov.w	r9, #3
 800c5a6:	e7c1      	b.n	800c52c <__gethex+0x1ac>
 800c5a8:	da09      	bge.n	800c5be <__gethex+0x23e>
 800c5aa:	1b75      	subs	r5, r6, r5
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	9801      	ldr	r0, [sp, #4]
 800c5b0:	462a      	mov	r2, r5
 800c5b2:	f000 fd1b 	bl	800cfec <__lshift>
 800c5b6:	1b7f      	subs	r7, r7, r5
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	f100 0a14 	add.w	sl, r0, #20
 800c5be:	f04f 0900 	mov.w	r9, #0
 800c5c2:	e7b8      	b.n	800c536 <__gethex+0x1b6>
 800c5c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5c8:	42bd      	cmp	r5, r7
 800c5ca:	dd6f      	ble.n	800c6ac <__gethex+0x32c>
 800c5cc:	1bed      	subs	r5, r5, r7
 800c5ce:	42ae      	cmp	r6, r5
 800c5d0:	dc34      	bgt.n	800c63c <__gethex+0x2bc>
 800c5d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d022      	beq.n	800c620 <__gethex+0x2a0>
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d024      	beq.n	800c628 <__gethex+0x2a8>
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d115      	bne.n	800c60e <__gethex+0x28e>
 800c5e2:	42ae      	cmp	r6, r5
 800c5e4:	d113      	bne.n	800c60e <__gethex+0x28e>
 800c5e6:	2e01      	cmp	r6, #1
 800c5e8:	d10b      	bne.n	800c602 <__gethex+0x282>
 800c5ea:	9a02      	ldr	r2, [sp, #8]
 800c5ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	f8ca 3000 	str.w	r3, [sl]
 800c5fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5fc:	2562      	movs	r5, #98	@ 0x62
 800c5fe:	601c      	str	r4, [r3, #0]
 800c600:	e73a      	b.n	800c478 <__gethex+0xf8>
 800c602:	1e71      	subs	r1, r6, #1
 800c604:	4620      	mov	r0, r4
 800c606:	f000 ff2a 	bl	800d45e <__any_on>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d1ed      	bne.n	800c5ea <__gethex+0x26a>
 800c60e:	9801      	ldr	r0, [sp, #4]
 800c610:	4621      	mov	r1, r4
 800c612:	f000 fadb 	bl	800cbcc <_Bfree>
 800c616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c618:	2300      	movs	r3, #0
 800c61a:	6013      	str	r3, [r2, #0]
 800c61c:	2550      	movs	r5, #80	@ 0x50
 800c61e:	e72b      	b.n	800c478 <__gethex+0xf8>
 800c620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1f3      	bne.n	800c60e <__gethex+0x28e>
 800c626:	e7e0      	b.n	800c5ea <__gethex+0x26a>
 800c628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1dd      	bne.n	800c5ea <__gethex+0x26a>
 800c62e:	e7ee      	b.n	800c60e <__gethex+0x28e>
 800c630:	0800f46c 	.word	0x0800f46c
 800c634:	0800f5d6 	.word	0x0800f5d6
 800c638:	0800f5e7 	.word	0x0800f5e7
 800c63c:	1e6f      	subs	r7, r5, #1
 800c63e:	f1b9 0f00 	cmp.w	r9, #0
 800c642:	d130      	bne.n	800c6a6 <__gethex+0x326>
 800c644:	b127      	cbz	r7, 800c650 <__gethex+0x2d0>
 800c646:	4639      	mov	r1, r7
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 ff08 	bl	800d45e <__any_on>
 800c64e:	4681      	mov	r9, r0
 800c650:	117a      	asrs	r2, r7, #5
 800c652:	2301      	movs	r3, #1
 800c654:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c658:	f007 071f 	and.w	r7, r7, #31
 800c65c:	40bb      	lsls	r3, r7
 800c65e:	4213      	tst	r3, r2
 800c660:	4629      	mov	r1, r5
 800c662:	4620      	mov	r0, r4
 800c664:	bf18      	it	ne
 800c666:	f049 0902 	orrne.w	r9, r9, #2
 800c66a:	f7ff fe21 	bl	800c2b0 <rshift>
 800c66e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c672:	1b76      	subs	r6, r6, r5
 800c674:	2502      	movs	r5, #2
 800c676:	f1b9 0f00 	cmp.w	r9, #0
 800c67a:	d047      	beq.n	800c70c <__gethex+0x38c>
 800c67c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d015      	beq.n	800c6b0 <__gethex+0x330>
 800c684:	2b03      	cmp	r3, #3
 800c686:	d017      	beq.n	800c6b8 <__gethex+0x338>
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d109      	bne.n	800c6a0 <__gethex+0x320>
 800c68c:	f019 0f02 	tst.w	r9, #2
 800c690:	d006      	beq.n	800c6a0 <__gethex+0x320>
 800c692:	f8da 3000 	ldr.w	r3, [sl]
 800c696:	ea49 0903 	orr.w	r9, r9, r3
 800c69a:	f019 0f01 	tst.w	r9, #1
 800c69e:	d10e      	bne.n	800c6be <__gethex+0x33e>
 800c6a0:	f045 0510 	orr.w	r5, r5, #16
 800c6a4:	e032      	b.n	800c70c <__gethex+0x38c>
 800c6a6:	f04f 0901 	mov.w	r9, #1
 800c6aa:	e7d1      	b.n	800c650 <__gethex+0x2d0>
 800c6ac:	2501      	movs	r5, #1
 800c6ae:	e7e2      	b.n	800c676 <__gethex+0x2f6>
 800c6b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6b2:	f1c3 0301 	rsb	r3, r3, #1
 800c6b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0f0      	beq.n	800c6a0 <__gethex+0x320>
 800c6be:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6c2:	f104 0314 	add.w	r3, r4, #20
 800c6c6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6ca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6ce:	f04f 0c00 	mov.w	ip, #0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6dc:	d01b      	beq.n	800c716 <__gethex+0x396>
 800c6de:	3201      	adds	r2, #1
 800c6e0:	6002      	str	r2, [r0, #0]
 800c6e2:	2d02      	cmp	r5, #2
 800c6e4:	f104 0314 	add.w	r3, r4, #20
 800c6e8:	d13c      	bne.n	800c764 <__gethex+0x3e4>
 800c6ea:	f8d8 2000 	ldr.w	r2, [r8]
 800c6ee:	3a01      	subs	r2, #1
 800c6f0:	42b2      	cmp	r2, r6
 800c6f2:	d109      	bne.n	800c708 <__gethex+0x388>
 800c6f4:	1171      	asrs	r1, r6, #5
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6fc:	f006 061f 	and.w	r6, r6, #31
 800c700:	fa02 f606 	lsl.w	r6, r2, r6
 800c704:	421e      	tst	r6, r3
 800c706:	d13a      	bne.n	800c77e <__gethex+0x3fe>
 800c708:	f045 0520 	orr.w	r5, r5, #32
 800c70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c70e:	601c      	str	r4, [r3, #0]
 800c710:	9b02      	ldr	r3, [sp, #8]
 800c712:	601f      	str	r7, [r3, #0]
 800c714:	e6b0      	b.n	800c478 <__gethex+0xf8>
 800c716:	4299      	cmp	r1, r3
 800c718:	f843 cc04 	str.w	ip, [r3, #-4]
 800c71c:	d8d9      	bhi.n	800c6d2 <__gethex+0x352>
 800c71e:	68a3      	ldr	r3, [r4, #8]
 800c720:	459b      	cmp	fp, r3
 800c722:	db17      	blt.n	800c754 <__gethex+0x3d4>
 800c724:	6861      	ldr	r1, [r4, #4]
 800c726:	9801      	ldr	r0, [sp, #4]
 800c728:	3101      	adds	r1, #1
 800c72a:	f000 fa0f 	bl	800cb4c <_Balloc>
 800c72e:	4681      	mov	r9, r0
 800c730:	b918      	cbnz	r0, 800c73a <__gethex+0x3ba>
 800c732:	4b1a      	ldr	r3, [pc, #104]	@ (800c79c <__gethex+0x41c>)
 800c734:	4602      	mov	r2, r0
 800c736:	2184      	movs	r1, #132	@ 0x84
 800c738:	e6c5      	b.n	800c4c6 <__gethex+0x146>
 800c73a:	6922      	ldr	r2, [r4, #16]
 800c73c:	3202      	adds	r2, #2
 800c73e:	f104 010c 	add.w	r1, r4, #12
 800c742:	0092      	lsls	r2, r2, #2
 800c744:	300c      	adds	r0, #12
 800c746:	f7ff fd2a 	bl	800c19e <memcpy>
 800c74a:	4621      	mov	r1, r4
 800c74c:	9801      	ldr	r0, [sp, #4]
 800c74e:	f000 fa3d 	bl	800cbcc <_Bfree>
 800c752:	464c      	mov	r4, r9
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c75c:	6122      	str	r2, [r4, #16]
 800c75e:	2201      	movs	r2, #1
 800c760:	615a      	str	r2, [r3, #20]
 800c762:	e7be      	b.n	800c6e2 <__gethex+0x362>
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	455a      	cmp	r2, fp
 800c768:	dd0b      	ble.n	800c782 <__gethex+0x402>
 800c76a:	2101      	movs	r1, #1
 800c76c:	4620      	mov	r0, r4
 800c76e:	f7ff fd9f 	bl	800c2b0 <rshift>
 800c772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c776:	3701      	adds	r7, #1
 800c778:	42bb      	cmp	r3, r7
 800c77a:	f6ff aee0 	blt.w	800c53e <__gethex+0x1be>
 800c77e:	2501      	movs	r5, #1
 800c780:	e7c2      	b.n	800c708 <__gethex+0x388>
 800c782:	f016 061f 	ands.w	r6, r6, #31
 800c786:	d0fa      	beq.n	800c77e <__gethex+0x3fe>
 800c788:	4453      	add	r3, sl
 800c78a:	f1c6 0620 	rsb	r6, r6, #32
 800c78e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c792:	f000 facd 	bl	800cd30 <__hi0bits>
 800c796:	42b0      	cmp	r0, r6
 800c798:	dbe7      	blt.n	800c76a <__gethex+0x3ea>
 800c79a:	e7f0      	b.n	800c77e <__gethex+0x3fe>
 800c79c:	0800f5d6 	.word	0x0800f5d6

0800c7a0 <L_shift>:
 800c7a0:	f1c2 0208 	rsb	r2, r2, #8
 800c7a4:	0092      	lsls	r2, r2, #2
 800c7a6:	b570      	push	{r4, r5, r6, lr}
 800c7a8:	f1c2 0620 	rsb	r6, r2, #32
 800c7ac:	6843      	ldr	r3, [r0, #4]
 800c7ae:	6804      	ldr	r4, [r0, #0]
 800c7b0:	fa03 f506 	lsl.w	r5, r3, r6
 800c7b4:	432c      	orrs	r4, r5
 800c7b6:	40d3      	lsrs	r3, r2
 800c7b8:	6004      	str	r4, [r0, #0]
 800c7ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7be:	4288      	cmp	r0, r1
 800c7c0:	d3f4      	bcc.n	800c7ac <L_shift+0xc>
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}

0800c7c4 <__match>:
 800c7c4:	b530      	push	{r4, r5, lr}
 800c7c6:	6803      	ldr	r3, [r0, #0]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ce:	b914      	cbnz	r4, 800c7d6 <__match+0x12>
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	2001      	movs	r0, #1
 800c7d4:	bd30      	pop	{r4, r5, pc}
 800c7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c7de:	2d19      	cmp	r5, #25
 800c7e0:	bf98      	it	ls
 800c7e2:	3220      	addls	r2, #32
 800c7e4:	42a2      	cmp	r2, r4
 800c7e6:	d0f0      	beq.n	800c7ca <__match+0x6>
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	e7f3      	b.n	800c7d4 <__match+0x10>

0800c7ec <__hexnan>:
 800c7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f0:	680b      	ldr	r3, [r1, #0]
 800c7f2:	6801      	ldr	r1, [r0, #0]
 800c7f4:	115e      	asrs	r6, r3, #5
 800c7f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7fa:	f013 031f 	ands.w	r3, r3, #31
 800c7fe:	b087      	sub	sp, #28
 800c800:	bf18      	it	ne
 800c802:	3604      	addne	r6, #4
 800c804:	2500      	movs	r5, #0
 800c806:	1f37      	subs	r7, r6, #4
 800c808:	4682      	mov	sl, r0
 800c80a:	4690      	mov	r8, r2
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c812:	46b9      	mov	r9, r7
 800c814:	463c      	mov	r4, r7
 800c816:	9502      	str	r5, [sp, #8]
 800c818:	46ab      	mov	fp, r5
 800c81a:	784a      	ldrb	r2, [r1, #1]
 800c81c:	1c4b      	adds	r3, r1, #1
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	b342      	cbz	r2, 800c874 <__hexnan+0x88>
 800c822:	4610      	mov	r0, r2
 800c824:	9105      	str	r1, [sp, #20]
 800c826:	9204      	str	r2, [sp, #16]
 800c828:	f7ff fd94 	bl	800c354 <__hexdig_fun>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d151      	bne.n	800c8d4 <__hexnan+0xe8>
 800c830:	9a04      	ldr	r2, [sp, #16]
 800c832:	9905      	ldr	r1, [sp, #20]
 800c834:	2a20      	cmp	r2, #32
 800c836:	d818      	bhi.n	800c86a <__hexnan+0x7e>
 800c838:	9b02      	ldr	r3, [sp, #8]
 800c83a:	459b      	cmp	fp, r3
 800c83c:	dd13      	ble.n	800c866 <__hexnan+0x7a>
 800c83e:	454c      	cmp	r4, r9
 800c840:	d206      	bcs.n	800c850 <__hexnan+0x64>
 800c842:	2d07      	cmp	r5, #7
 800c844:	dc04      	bgt.n	800c850 <__hexnan+0x64>
 800c846:	462a      	mov	r2, r5
 800c848:	4649      	mov	r1, r9
 800c84a:	4620      	mov	r0, r4
 800c84c:	f7ff ffa8 	bl	800c7a0 <L_shift>
 800c850:	4544      	cmp	r4, r8
 800c852:	d952      	bls.n	800c8fa <__hexnan+0x10e>
 800c854:	2300      	movs	r3, #0
 800c856:	f1a4 0904 	sub.w	r9, r4, #4
 800c85a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c85e:	f8cd b008 	str.w	fp, [sp, #8]
 800c862:	464c      	mov	r4, r9
 800c864:	461d      	mov	r5, r3
 800c866:	9903      	ldr	r1, [sp, #12]
 800c868:	e7d7      	b.n	800c81a <__hexnan+0x2e>
 800c86a:	2a29      	cmp	r2, #41	@ 0x29
 800c86c:	d157      	bne.n	800c91e <__hexnan+0x132>
 800c86e:	3102      	adds	r1, #2
 800c870:	f8ca 1000 	str.w	r1, [sl]
 800c874:	f1bb 0f00 	cmp.w	fp, #0
 800c878:	d051      	beq.n	800c91e <__hexnan+0x132>
 800c87a:	454c      	cmp	r4, r9
 800c87c:	d206      	bcs.n	800c88c <__hexnan+0xa0>
 800c87e:	2d07      	cmp	r5, #7
 800c880:	dc04      	bgt.n	800c88c <__hexnan+0xa0>
 800c882:	462a      	mov	r2, r5
 800c884:	4649      	mov	r1, r9
 800c886:	4620      	mov	r0, r4
 800c888:	f7ff ff8a 	bl	800c7a0 <L_shift>
 800c88c:	4544      	cmp	r4, r8
 800c88e:	d936      	bls.n	800c8fe <__hexnan+0x112>
 800c890:	f1a8 0204 	sub.w	r2, r8, #4
 800c894:	4623      	mov	r3, r4
 800c896:	f853 1b04 	ldr.w	r1, [r3], #4
 800c89a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c89e:	429f      	cmp	r7, r3
 800c8a0:	d2f9      	bcs.n	800c896 <__hexnan+0xaa>
 800c8a2:	1b3b      	subs	r3, r7, r4
 800c8a4:	f023 0303 	bic.w	r3, r3, #3
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	3401      	adds	r4, #1
 800c8ac:	3e03      	subs	r6, #3
 800c8ae:	42b4      	cmp	r4, r6
 800c8b0:	bf88      	it	hi
 800c8b2:	2304      	movhi	r3, #4
 800c8b4:	4443      	add	r3, r8
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f843 2b04 	str.w	r2, [r3], #4
 800c8bc:	429f      	cmp	r7, r3
 800c8be:	d2fb      	bcs.n	800c8b8 <__hexnan+0xcc>
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	b91b      	cbnz	r3, 800c8cc <__hexnan+0xe0>
 800c8c4:	4547      	cmp	r7, r8
 800c8c6:	d128      	bne.n	800c91a <__hexnan+0x12e>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	603b      	str	r3, [r7, #0]
 800c8cc:	2005      	movs	r0, #5
 800c8ce:	b007      	add	sp, #28
 800c8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d4:	3501      	adds	r5, #1
 800c8d6:	2d08      	cmp	r5, #8
 800c8d8:	f10b 0b01 	add.w	fp, fp, #1
 800c8dc:	dd06      	ble.n	800c8ec <__hexnan+0x100>
 800c8de:	4544      	cmp	r4, r8
 800c8e0:	d9c1      	bls.n	800c866 <__hexnan+0x7a>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8e8:	2501      	movs	r5, #1
 800c8ea:	3c04      	subs	r4, #4
 800c8ec:	6822      	ldr	r2, [r4, #0]
 800c8ee:	f000 000f 	and.w	r0, r0, #15
 800c8f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8f6:	6020      	str	r0, [r4, #0]
 800c8f8:	e7b5      	b.n	800c866 <__hexnan+0x7a>
 800c8fa:	2508      	movs	r5, #8
 800c8fc:	e7b3      	b.n	800c866 <__hexnan+0x7a>
 800c8fe:	9b01      	ldr	r3, [sp, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d0dd      	beq.n	800c8c0 <__hexnan+0xd4>
 800c904:	f1c3 0320 	rsb	r3, r3, #32
 800c908:	f04f 32ff 	mov.w	r2, #4294967295
 800c90c:	40da      	lsrs	r2, r3
 800c90e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c912:	4013      	ands	r3, r2
 800c914:	f846 3c04 	str.w	r3, [r6, #-4]
 800c918:	e7d2      	b.n	800c8c0 <__hexnan+0xd4>
 800c91a:	3f04      	subs	r7, #4
 800c91c:	e7d0      	b.n	800c8c0 <__hexnan+0xd4>
 800c91e:	2004      	movs	r0, #4
 800c920:	e7d5      	b.n	800c8ce <__hexnan+0xe2>
	...

0800c924 <_findenv_r>:
 800c924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c928:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800c998 <_findenv_r+0x74>
 800c92c:	4606      	mov	r6, r0
 800c92e:	4689      	mov	r9, r1
 800c930:	4617      	mov	r7, r2
 800c932:	f002 f887 	bl	800ea44 <__env_lock>
 800c936:	f8da 4000 	ldr.w	r4, [sl]
 800c93a:	b134      	cbz	r4, 800c94a <_findenv_r+0x26>
 800c93c:	464b      	mov	r3, r9
 800c93e:	4698      	mov	r8, r3
 800c940:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c944:	b13a      	cbz	r2, 800c956 <_findenv_r+0x32>
 800c946:	2a3d      	cmp	r2, #61	@ 0x3d
 800c948:	d1f9      	bne.n	800c93e <_findenv_r+0x1a>
 800c94a:	4630      	mov	r0, r6
 800c94c:	f002 f880 	bl	800ea50 <__env_unlock>
 800c950:	2000      	movs	r0, #0
 800c952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c956:	eba8 0809 	sub.w	r8, r8, r9
 800c95a:	46a3      	mov	fp, r4
 800c95c:	f854 0b04 	ldr.w	r0, [r4], #4
 800c960:	2800      	cmp	r0, #0
 800c962:	d0f2      	beq.n	800c94a <_findenv_r+0x26>
 800c964:	4642      	mov	r2, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7fe fc4c 	bl	800b204 <strncmp>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d1f4      	bne.n	800c95a <_findenv_r+0x36>
 800c970:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c974:	eb03 0508 	add.w	r5, r3, r8
 800c978:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c97c:	2b3d      	cmp	r3, #61	@ 0x3d
 800c97e:	d1ec      	bne.n	800c95a <_findenv_r+0x36>
 800c980:	f8da 3000 	ldr.w	r3, [sl]
 800c984:	ebab 0303 	sub.w	r3, fp, r3
 800c988:	109b      	asrs	r3, r3, #2
 800c98a:	4630      	mov	r0, r6
 800c98c:	603b      	str	r3, [r7, #0]
 800c98e:	f002 f85f 	bl	800ea50 <__env_unlock>
 800c992:	1c68      	adds	r0, r5, #1
 800c994:	e7dd      	b.n	800c952 <_findenv_r+0x2e>
 800c996:	bf00      	nop
 800c998:	2000000c 	.word	0x2000000c

0800c99c <_getenv_r>:
 800c99c:	b507      	push	{r0, r1, r2, lr}
 800c99e:	aa01      	add	r2, sp, #4
 800c9a0:	f7ff ffc0 	bl	800c924 <_findenv_r>
 800c9a4:	b003      	add	sp, #12
 800c9a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c9ac <malloc>:
 800c9ac:	4b02      	ldr	r3, [pc, #8]	@ (800c9b8 <malloc+0xc>)
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	f000 b82d 	b.w	800ca10 <_malloc_r>
 800c9b6:	bf00      	nop
 800c9b8:	200001a0 	.word	0x200001a0

0800c9bc <free>:
 800c9bc:	4b02      	ldr	r3, [pc, #8]	@ (800c9c8 <free+0xc>)
 800c9be:	4601      	mov	r1, r0
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	f7ff bc2b 	b.w	800c21c <_free_r>
 800c9c6:	bf00      	nop
 800c9c8:	200001a0 	.word	0x200001a0

0800c9cc <sbrk_aligned>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	4e0f      	ldr	r6, [pc, #60]	@ (800ca0c <sbrk_aligned+0x40>)
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	6831      	ldr	r1, [r6, #0]
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	b911      	cbnz	r1, 800c9de <sbrk_aligned+0x12>
 800c9d8:	f002 f808 	bl	800e9ec <_sbrk_r>
 800c9dc:	6030      	str	r0, [r6, #0]
 800c9de:	4621      	mov	r1, r4
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	f002 f803 	bl	800e9ec <_sbrk_r>
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	d103      	bne.n	800c9f2 <sbrk_aligned+0x26>
 800c9ea:	f04f 34ff 	mov.w	r4, #4294967295
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	bd70      	pop	{r4, r5, r6, pc}
 800c9f2:	1cc4      	adds	r4, r0, #3
 800c9f4:	f024 0403 	bic.w	r4, r4, #3
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d0f8      	beq.n	800c9ee <sbrk_aligned+0x22>
 800c9fc:	1a21      	subs	r1, r4, r0
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f001 fff4 	bl	800e9ec <_sbrk_r>
 800ca04:	3001      	adds	r0, #1
 800ca06:	d1f2      	bne.n	800c9ee <sbrk_aligned+0x22>
 800ca08:	e7ef      	b.n	800c9ea <sbrk_aligned+0x1e>
 800ca0a:	bf00      	nop
 800ca0c:	20006f04 	.word	0x20006f04

0800ca10 <_malloc_r>:
 800ca10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca14:	1ccd      	adds	r5, r1, #3
 800ca16:	f025 0503 	bic.w	r5, r5, #3
 800ca1a:	3508      	adds	r5, #8
 800ca1c:	2d0c      	cmp	r5, #12
 800ca1e:	bf38      	it	cc
 800ca20:	250c      	movcc	r5, #12
 800ca22:	2d00      	cmp	r5, #0
 800ca24:	4606      	mov	r6, r0
 800ca26:	db01      	blt.n	800ca2c <_malloc_r+0x1c>
 800ca28:	42a9      	cmp	r1, r5
 800ca2a:	d904      	bls.n	800ca36 <_malloc_r+0x26>
 800ca2c:	230c      	movs	r3, #12
 800ca2e:	6033      	str	r3, [r6, #0]
 800ca30:	2000      	movs	r0, #0
 800ca32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb0c <_malloc_r+0xfc>
 800ca3a:	f000 f87b 	bl	800cb34 <__malloc_lock>
 800ca3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca42:	461c      	mov	r4, r3
 800ca44:	bb44      	cbnz	r4, 800ca98 <_malloc_r+0x88>
 800ca46:	4629      	mov	r1, r5
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f7ff ffbf 	bl	800c9cc <sbrk_aligned>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	4604      	mov	r4, r0
 800ca52:	d158      	bne.n	800cb06 <_malloc_r+0xf6>
 800ca54:	f8d8 4000 	ldr.w	r4, [r8]
 800ca58:	4627      	mov	r7, r4
 800ca5a:	2f00      	cmp	r7, #0
 800ca5c:	d143      	bne.n	800cae6 <_malloc_r+0xd6>
 800ca5e:	2c00      	cmp	r4, #0
 800ca60:	d04b      	beq.n	800cafa <_malloc_r+0xea>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	4639      	mov	r1, r7
 800ca66:	4630      	mov	r0, r6
 800ca68:	eb04 0903 	add.w	r9, r4, r3
 800ca6c:	f001 ffbe 	bl	800e9ec <_sbrk_r>
 800ca70:	4581      	cmp	r9, r0
 800ca72:	d142      	bne.n	800cafa <_malloc_r+0xea>
 800ca74:	6821      	ldr	r1, [r4, #0]
 800ca76:	1a6d      	subs	r5, r5, r1
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7ff ffa6 	bl	800c9cc <sbrk_aligned>
 800ca80:	3001      	adds	r0, #1
 800ca82:	d03a      	beq.n	800cafa <_malloc_r+0xea>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	442b      	add	r3, r5
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	bb62      	cbnz	r2, 800caec <_malloc_r+0xdc>
 800ca92:	f8c8 7000 	str.w	r7, [r8]
 800ca96:	e00f      	b.n	800cab8 <_malloc_r+0xa8>
 800ca98:	6822      	ldr	r2, [r4, #0]
 800ca9a:	1b52      	subs	r2, r2, r5
 800ca9c:	d420      	bmi.n	800cae0 <_malloc_r+0xd0>
 800ca9e:	2a0b      	cmp	r2, #11
 800caa0:	d917      	bls.n	800cad2 <_malloc_r+0xc2>
 800caa2:	1961      	adds	r1, r4, r5
 800caa4:	42a3      	cmp	r3, r4
 800caa6:	6025      	str	r5, [r4, #0]
 800caa8:	bf18      	it	ne
 800caaa:	6059      	strne	r1, [r3, #4]
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	bf08      	it	eq
 800cab0:	f8c8 1000 	streq.w	r1, [r8]
 800cab4:	5162      	str	r2, [r4, r5]
 800cab6:	604b      	str	r3, [r1, #4]
 800cab8:	4630      	mov	r0, r6
 800caba:	f000 f841 	bl	800cb40 <__malloc_unlock>
 800cabe:	f104 000b 	add.w	r0, r4, #11
 800cac2:	1d23      	adds	r3, r4, #4
 800cac4:	f020 0007 	bic.w	r0, r0, #7
 800cac8:	1ac2      	subs	r2, r0, r3
 800caca:	bf1c      	itt	ne
 800cacc:	1a1b      	subne	r3, r3, r0
 800cace:	50a3      	strne	r3, [r4, r2]
 800cad0:	e7af      	b.n	800ca32 <_malloc_r+0x22>
 800cad2:	6862      	ldr	r2, [r4, #4]
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	bf0c      	ite	eq
 800cad8:	f8c8 2000 	streq.w	r2, [r8]
 800cadc:	605a      	strne	r2, [r3, #4]
 800cade:	e7eb      	b.n	800cab8 <_malloc_r+0xa8>
 800cae0:	4623      	mov	r3, r4
 800cae2:	6864      	ldr	r4, [r4, #4]
 800cae4:	e7ae      	b.n	800ca44 <_malloc_r+0x34>
 800cae6:	463c      	mov	r4, r7
 800cae8:	687f      	ldr	r7, [r7, #4]
 800caea:	e7b6      	b.n	800ca5a <_malloc_r+0x4a>
 800caec:	461a      	mov	r2, r3
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	d1fb      	bne.n	800caec <_malloc_r+0xdc>
 800caf4:	2300      	movs	r3, #0
 800caf6:	6053      	str	r3, [r2, #4]
 800caf8:	e7de      	b.n	800cab8 <_malloc_r+0xa8>
 800cafa:	230c      	movs	r3, #12
 800cafc:	6033      	str	r3, [r6, #0]
 800cafe:	4630      	mov	r0, r6
 800cb00:	f000 f81e 	bl	800cb40 <__malloc_unlock>
 800cb04:	e794      	b.n	800ca30 <_malloc_r+0x20>
 800cb06:	6005      	str	r5, [r0, #0]
 800cb08:	e7d6      	b.n	800cab8 <_malloc_r+0xa8>
 800cb0a:	bf00      	nop
 800cb0c:	20006f08 	.word	0x20006f08

0800cb10 <__ascii_mbtowc>:
 800cb10:	b082      	sub	sp, #8
 800cb12:	b901      	cbnz	r1, 800cb16 <__ascii_mbtowc+0x6>
 800cb14:	a901      	add	r1, sp, #4
 800cb16:	b142      	cbz	r2, 800cb2a <__ascii_mbtowc+0x1a>
 800cb18:	b14b      	cbz	r3, 800cb2e <__ascii_mbtowc+0x1e>
 800cb1a:	7813      	ldrb	r3, [r2, #0]
 800cb1c:	600b      	str	r3, [r1, #0]
 800cb1e:	7812      	ldrb	r2, [r2, #0]
 800cb20:	1e10      	subs	r0, r2, #0
 800cb22:	bf18      	it	ne
 800cb24:	2001      	movne	r0, #1
 800cb26:	b002      	add	sp, #8
 800cb28:	4770      	bx	lr
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	e7fb      	b.n	800cb26 <__ascii_mbtowc+0x16>
 800cb2e:	f06f 0001 	mvn.w	r0, #1
 800cb32:	e7f8      	b.n	800cb26 <__ascii_mbtowc+0x16>

0800cb34 <__malloc_lock>:
 800cb34:	4801      	ldr	r0, [pc, #4]	@ (800cb3c <__malloc_lock+0x8>)
 800cb36:	f7ff bb27 	b.w	800c188 <__retarget_lock_acquire_recursive>
 800cb3a:	bf00      	nop
 800cb3c:	20006f02 	.word	0x20006f02

0800cb40 <__malloc_unlock>:
 800cb40:	4801      	ldr	r0, [pc, #4]	@ (800cb48 <__malloc_unlock+0x8>)
 800cb42:	f7ff bb23 	b.w	800c18c <__retarget_lock_release_recursive>
 800cb46:	bf00      	nop
 800cb48:	20006f02 	.word	0x20006f02

0800cb4c <_Balloc>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	69c6      	ldr	r6, [r0, #28]
 800cb50:	4604      	mov	r4, r0
 800cb52:	460d      	mov	r5, r1
 800cb54:	b976      	cbnz	r6, 800cb74 <_Balloc+0x28>
 800cb56:	2010      	movs	r0, #16
 800cb58:	f7ff ff28 	bl	800c9ac <malloc>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	61e0      	str	r0, [r4, #28]
 800cb60:	b920      	cbnz	r0, 800cb6c <_Balloc+0x20>
 800cb62:	4b18      	ldr	r3, [pc, #96]	@ (800cbc4 <_Balloc+0x78>)
 800cb64:	4818      	ldr	r0, [pc, #96]	@ (800cbc8 <_Balloc+0x7c>)
 800cb66:	216b      	movs	r1, #107	@ 0x6b
 800cb68:	f7ff fb32 	bl	800c1d0 <__assert_func>
 800cb6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb70:	6006      	str	r6, [r0, #0]
 800cb72:	60c6      	str	r6, [r0, #12]
 800cb74:	69e6      	ldr	r6, [r4, #28]
 800cb76:	68f3      	ldr	r3, [r6, #12]
 800cb78:	b183      	cbz	r3, 800cb9c <_Balloc+0x50>
 800cb7a:	69e3      	ldr	r3, [r4, #28]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb82:	b9b8      	cbnz	r0, 800cbb4 <_Balloc+0x68>
 800cb84:	2101      	movs	r1, #1
 800cb86:	fa01 f605 	lsl.w	r6, r1, r5
 800cb8a:	1d72      	adds	r2, r6, #5
 800cb8c:	0092      	lsls	r2, r2, #2
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f001 ff43 	bl	800ea1a <_calloc_r>
 800cb94:	b160      	cbz	r0, 800cbb0 <_Balloc+0x64>
 800cb96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb9a:	e00e      	b.n	800cbba <_Balloc+0x6e>
 800cb9c:	2221      	movs	r2, #33	@ 0x21
 800cb9e:	2104      	movs	r1, #4
 800cba0:	4620      	mov	r0, r4
 800cba2:	f001 ff3a 	bl	800ea1a <_calloc_r>
 800cba6:	69e3      	ldr	r3, [r4, #28]
 800cba8:	60f0      	str	r0, [r6, #12]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e4      	bne.n	800cb7a <_Balloc+0x2e>
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	6802      	ldr	r2, [r0, #0]
 800cbb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbc0:	e7f7      	b.n	800cbb2 <_Balloc+0x66>
 800cbc2:	bf00      	nop
 800cbc4:	0800f47a 	.word	0x0800f47a
 800cbc8:	0800f647 	.word	0x0800f647

0800cbcc <_Bfree>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	69c6      	ldr	r6, [r0, #28]
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	b976      	cbnz	r6, 800cbf4 <_Bfree+0x28>
 800cbd6:	2010      	movs	r0, #16
 800cbd8:	f7ff fee8 	bl	800c9ac <malloc>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	61e8      	str	r0, [r5, #28]
 800cbe0:	b920      	cbnz	r0, 800cbec <_Bfree+0x20>
 800cbe2:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <_Bfree+0x3c>)
 800cbe4:	4809      	ldr	r0, [pc, #36]	@ (800cc0c <_Bfree+0x40>)
 800cbe6:	218f      	movs	r1, #143	@ 0x8f
 800cbe8:	f7ff faf2 	bl	800c1d0 <__assert_func>
 800cbec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf0:	6006      	str	r6, [r0, #0]
 800cbf2:	60c6      	str	r6, [r0, #12]
 800cbf4:	b13c      	cbz	r4, 800cc06 <_Bfree+0x3a>
 800cbf6:	69eb      	ldr	r3, [r5, #28]
 800cbf8:	6862      	ldr	r2, [r4, #4]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc00:	6021      	str	r1, [r4, #0]
 800cc02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	0800f47a 	.word	0x0800f47a
 800cc0c:	0800f647 	.word	0x0800f647

0800cc10 <__multadd>:
 800cc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	690d      	ldr	r5, [r1, #16]
 800cc16:	4607      	mov	r7, r0
 800cc18:	460c      	mov	r4, r1
 800cc1a:	461e      	mov	r6, r3
 800cc1c:	f101 0c14 	add.w	ip, r1, #20
 800cc20:	2000      	movs	r0, #0
 800cc22:	f8dc 3000 	ldr.w	r3, [ip]
 800cc26:	b299      	uxth	r1, r3
 800cc28:	fb02 6101 	mla	r1, r2, r1, r6
 800cc2c:	0c1e      	lsrs	r6, r3, #16
 800cc2e:	0c0b      	lsrs	r3, r1, #16
 800cc30:	fb02 3306 	mla	r3, r2, r6, r3
 800cc34:	b289      	uxth	r1, r1
 800cc36:	3001      	adds	r0, #1
 800cc38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc3c:	4285      	cmp	r5, r0
 800cc3e:	f84c 1b04 	str.w	r1, [ip], #4
 800cc42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc46:	dcec      	bgt.n	800cc22 <__multadd+0x12>
 800cc48:	b30e      	cbz	r6, 800cc8e <__multadd+0x7e>
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	42ab      	cmp	r3, r5
 800cc4e:	dc19      	bgt.n	800cc84 <__multadd+0x74>
 800cc50:	6861      	ldr	r1, [r4, #4]
 800cc52:	4638      	mov	r0, r7
 800cc54:	3101      	adds	r1, #1
 800cc56:	f7ff ff79 	bl	800cb4c <_Balloc>
 800cc5a:	4680      	mov	r8, r0
 800cc5c:	b928      	cbnz	r0, 800cc6a <__multadd+0x5a>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <__multadd+0x84>)
 800cc62:	480d      	ldr	r0, [pc, #52]	@ (800cc98 <__multadd+0x88>)
 800cc64:	21ba      	movs	r1, #186	@ 0xba
 800cc66:	f7ff fab3 	bl	800c1d0 <__assert_func>
 800cc6a:	6922      	ldr	r2, [r4, #16]
 800cc6c:	3202      	adds	r2, #2
 800cc6e:	f104 010c 	add.w	r1, r4, #12
 800cc72:	0092      	lsls	r2, r2, #2
 800cc74:	300c      	adds	r0, #12
 800cc76:	f7ff fa92 	bl	800c19e <memcpy>
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff ffa5 	bl	800cbcc <_Bfree>
 800cc82:	4644      	mov	r4, r8
 800cc84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc88:	3501      	adds	r5, #1
 800cc8a:	615e      	str	r6, [r3, #20]
 800cc8c:	6125      	str	r5, [r4, #16]
 800cc8e:	4620      	mov	r0, r4
 800cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc94:	0800f5d6 	.word	0x0800f5d6
 800cc98:	0800f647 	.word	0x0800f647

0800cc9c <__s2b>:
 800cc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca0:	460c      	mov	r4, r1
 800cca2:	4615      	mov	r5, r2
 800cca4:	461f      	mov	r7, r3
 800cca6:	2209      	movs	r2, #9
 800cca8:	3308      	adds	r3, #8
 800ccaa:	4606      	mov	r6, r0
 800ccac:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	db09      	blt.n	800cccc <__s2b+0x30>
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f7ff ff47 	bl	800cb4c <_Balloc>
 800ccbe:	b940      	cbnz	r0, 800ccd2 <__s2b+0x36>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	4b19      	ldr	r3, [pc, #100]	@ (800cd28 <__s2b+0x8c>)
 800ccc4:	4819      	ldr	r0, [pc, #100]	@ (800cd2c <__s2b+0x90>)
 800ccc6:	21d3      	movs	r1, #211	@ 0xd3
 800ccc8:	f7ff fa82 	bl	800c1d0 <__assert_func>
 800cccc:	0052      	lsls	r2, r2, #1
 800ccce:	3101      	adds	r1, #1
 800ccd0:	e7f0      	b.n	800ccb4 <__s2b+0x18>
 800ccd2:	9b08      	ldr	r3, [sp, #32]
 800ccd4:	6143      	str	r3, [r0, #20]
 800ccd6:	2d09      	cmp	r5, #9
 800ccd8:	f04f 0301 	mov.w	r3, #1
 800ccdc:	6103      	str	r3, [r0, #16]
 800ccde:	dd16      	ble.n	800cd0e <__s2b+0x72>
 800cce0:	f104 0909 	add.w	r9, r4, #9
 800cce4:	46c8      	mov	r8, r9
 800cce6:	442c      	add	r4, r5
 800cce8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccec:	4601      	mov	r1, r0
 800ccee:	3b30      	subs	r3, #48	@ 0x30
 800ccf0:	220a      	movs	r2, #10
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7ff ff8c 	bl	800cc10 <__multadd>
 800ccf8:	45a0      	cmp	r8, r4
 800ccfa:	d1f5      	bne.n	800cce8 <__s2b+0x4c>
 800ccfc:	f1a5 0408 	sub.w	r4, r5, #8
 800cd00:	444c      	add	r4, r9
 800cd02:	1b2d      	subs	r5, r5, r4
 800cd04:	1963      	adds	r3, r4, r5
 800cd06:	42bb      	cmp	r3, r7
 800cd08:	db04      	blt.n	800cd14 <__s2b+0x78>
 800cd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd0e:	340a      	adds	r4, #10
 800cd10:	2509      	movs	r5, #9
 800cd12:	e7f6      	b.n	800cd02 <__s2b+0x66>
 800cd14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd18:	4601      	mov	r1, r0
 800cd1a:	3b30      	subs	r3, #48	@ 0x30
 800cd1c:	220a      	movs	r2, #10
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7ff ff76 	bl	800cc10 <__multadd>
 800cd24:	e7ee      	b.n	800cd04 <__s2b+0x68>
 800cd26:	bf00      	nop
 800cd28:	0800f5d6 	.word	0x0800f5d6
 800cd2c:	0800f647 	.word	0x0800f647

0800cd30 <__hi0bits>:
 800cd30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd34:	4603      	mov	r3, r0
 800cd36:	bf36      	itet	cc
 800cd38:	0403      	lslcc	r3, r0, #16
 800cd3a:	2000      	movcs	r0, #0
 800cd3c:	2010      	movcc	r0, #16
 800cd3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd42:	bf3c      	itt	cc
 800cd44:	021b      	lslcc	r3, r3, #8
 800cd46:	3008      	addcc	r0, #8
 800cd48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd4c:	bf3c      	itt	cc
 800cd4e:	011b      	lslcc	r3, r3, #4
 800cd50:	3004      	addcc	r0, #4
 800cd52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd56:	bf3c      	itt	cc
 800cd58:	009b      	lslcc	r3, r3, #2
 800cd5a:	3002      	addcc	r0, #2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	db05      	blt.n	800cd6c <__hi0bits+0x3c>
 800cd60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd64:	f100 0001 	add.w	r0, r0, #1
 800cd68:	bf08      	it	eq
 800cd6a:	2020      	moveq	r0, #32
 800cd6c:	4770      	bx	lr

0800cd6e <__lo0bits>:
 800cd6e:	6803      	ldr	r3, [r0, #0]
 800cd70:	4602      	mov	r2, r0
 800cd72:	f013 0007 	ands.w	r0, r3, #7
 800cd76:	d00b      	beq.n	800cd90 <__lo0bits+0x22>
 800cd78:	07d9      	lsls	r1, r3, #31
 800cd7a:	d421      	bmi.n	800cdc0 <__lo0bits+0x52>
 800cd7c:	0798      	lsls	r0, r3, #30
 800cd7e:	bf49      	itett	mi
 800cd80:	085b      	lsrmi	r3, r3, #1
 800cd82:	089b      	lsrpl	r3, r3, #2
 800cd84:	2001      	movmi	r0, #1
 800cd86:	6013      	strmi	r3, [r2, #0]
 800cd88:	bf5c      	itt	pl
 800cd8a:	6013      	strpl	r3, [r2, #0]
 800cd8c:	2002      	movpl	r0, #2
 800cd8e:	4770      	bx	lr
 800cd90:	b299      	uxth	r1, r3
 800cd92:	b909      	cbnz	r1, 800cd98 <__lo0bits+0x2a>
 800cd94:	0c1b      	lsrs	r3, r3, #16
 800cd96:	2010      	movs	r0, #16
 800cd98:	b2d9      	uxtb	r1, r3
 800cd9a:	b909      	cbnz	r1, 800cda0 <__lo0bits+0x32>
 800cd9c:	3008      	adds	r0, #8
 800cd9e:	0a1b      	lsrs	r3, r3, #8
 800cda0:	0719      	lsls	r1, r3, #28
 800cda2:	bf04      	itt	eq
 800cda4:	091b      	lsreq	r3, r3, #4
 800cda6:	3004      	addeq	r0, #4
 800cda8:	0799      	lsls	r1, r3, #30
 800cdaa:	bf04      	itt	eq
 800cdac:	089b      	lsreq	r3, r3, #2
 800cdae:	3002      	addeq	r0, #2
 800cdb0:	07d9      	lsls	r1, r3, #31
 800cdb2:	d403      	bmi.n	800cdbc <__lo0bits+0x4e>
 800cdb4:	085b      	lsrs	r3, r3, #1
 800cdb6:	f100 0001 	add.w	r0, r0, #1
 800cdba:	d003      	beq.n	800cdc4 <__lo0bits+0x56>
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	4770      	bx	lr
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	4770      	bx	lr
 800cdc4:	2020      	movs	r0, #32
 800cdc6:	4770      	bx	lr

0800cdc8 <__i2b>:
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	460c      	mov	r4, r1
 800cdcc:	2101      	movs	r1, #1
 800cdce:	f7ff febd 	bl	800cb4c <_Balloc>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	b928      	cbnz	r0, 800cde2 <__i2b+0x1a>
 800cdd6:	4b05      	ldr	r3, [pc, #20]	@ (800cdec <__i2b+0x24>)
 800cdd8:	4805      	ldr	r0, [pc, #20]	@ (800cdf0 <__i2b+0x28>)
 800cdda:	f240 1145 	movw	r1, #325	@ 0x145
 800cdde:	f7ff f9f7 	bl	800c1d0 <__assert_func>
 800cde2:	2301      	movs	r3, #1
 800cde4:	6144      	str	r4, [r0, #20]
 800cde6:	6103      	str	r3, [r0, #16]
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	bf00      	nop
 800cdec:	0800f5d6 	.word	0x0800f5d6
 800cdf0:	0800f647 	.word	0x0800f647

0800cdf4 <__multiply>:
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	4617      	mov	r7, r2
 800cdfa:	690a      	ldr	r2, [r1, #16]
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	bfa8      	it	ge
 800ce02:	463b      	movge	r3, r7
 800ce04:	4689      	mov	r9, r1
 800ce06:	bfa4      	itt	ge
 800ce08:	460f      	movge	r7, r1
 800ce0a:	4699      	movge	r9, r3
 800ce0c:	693d      	ldr	r5, [r7, #16]
 800ce0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	6879      	ldr	r1, [r7, #4]
 800ce16:	eb05 060a 	add.w	r6, r5, sl
 800ce1a:	42b3      	cmp	r3, r6
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	bfb8      	it	lt
 800ce20:	3101      	addlt	r1, #1
 800ce22:	f7ff fe93 	bl	800cb4c <_Balloc>
 800ce26:	b930      	cbnz	r0, 800ce36 <__multiply+0x42>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	4b41      	ldr	r3, [pc, #260]	@ (800cf30 <__multiply+0x13c>)
 800ce2c:	4841      	ldr	r0, [pc, #260]	@ (800cf34 <__multiply+0x140>)
 800ce2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce32:	f7ff f9cd 	bl	800c1d0 <__assert_func>
 800ce36:	f100 0414 	add.w	r4, r0, #20
 800ce3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce3e:	4623      	mov	r3, r4
 800ce40:	2200      	movs	r2, #0
 800ce42:	4573      	cmp	r3, lr
 800ce44:	d320      	bcc.n	800ce88 <__multiply+0x94>
 800ce46:	f107 0814 	add.w	r8, r7, #20
 800ce4a:	f109 0114 	add.w	r1, r9, #20
 800ce4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce56:	9302      	str	r3, [sp, #8]
 800ce58:	1beb      	subs	r3, r5, r7
 800ce5a:	3b15      	subs	r3, #21
 800ce5c:	f023 0303 	bic.w	r3, r3, #3
 800ce60:	3304      	adds	r3, #4
 800ce62:	3715      	adds	r7, #21
 800ce64:	42bd      	cmp	r5, r7
 800ce66:	bf38      	it	cc
 800ce68:	2304      	movcc	r3, #4
 800ce6a:	9301      	str	r3, [sp, #4]
 800ce6c:	9b02      	ldr	r3, [sp, #8]
 800ce6e:	9103      	str	r1, [sp, #12]
 800ce70:	428b      	cmp	r3, r1
 800ce72:	d80c      	bhi.n	800ce8e <__multiply+0x9a>
 800ce74:	2e00      	cmp	r6, #0
 800ce76:	dd03      	ble.n	800ce80 <__multiply+0x8c>
 800ce78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d055      	beq.n	800cf2c <__multiply+0x138>
 800ce80:	6106      	str	r6, [r0, #16]
 800ce82:	b005      	add	sp, #20
 800ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce88:	f843 2b04 	str.w	r2, [r3], #4
 800ce8c:	e7d9      	b.n	800ce42 <__multiply+0x4e>
 800ce8e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce92:	f1ba 0f00 	cmp.w	sl, #0
 800ce96:	d01f      	beq.n	800ced8 <__multiply+0xe4>
 800ce98:	46c4      	mov	ip, r8
 800ce9a:	46a1      	mov	r9, r4
 800ce9c:	2700      	movs	r7, #0
 800ce9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cea2:	f8d9 3000 	ldr.w	r3, [r9]
 800cea6:	fa1f fb82 	uxth.w	fp, r2
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	fb0a 330b 	mla	r3, sl, fp, r3
 800ceb0:	443b      	add	r3, r7
 800ceb2:	f8d9 7000 	ldr.w	r7, [r9]
 800ceb6:	0c12      	lsrs	r2, r2, #16
 800ceb8:	0c3f      	lsrs	r7, r7, #16
 800ceba:	fb0a 7202 	mla	r2, sl, r2, r7
 800cebe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cec8:	4565      	cmp	r5, ip
 800ceca:	f849 3b04 	str.w	r3, [r9], #4
 800cece:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ced2:	d8e4      	bhi.n	800ce9e <__multiply+0xaa>
 800ced4:	9b01      	ldr	r3, [sp, #4]
 800ced6:	50e7      	str	r7, [r4, r3]
 800ced8:	9b03      	ldr	r3, [sp, #12]
 800ceda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cede:	3104      	adds	r1, #4
 800cee0:	f1b9 0f00 	cmp.w	r9, #0
 800cee4:	d020      	beq.n	800cf28 <__multiply+0x134>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	4647      	mov	r7, r8
 800ceea:	46a4      	mov	ip, r4
 800ceec:	f04f 0a00 	mov.w	sl, #0
 800cef0:	f8b7 b000 	ldrh.w	fp, [r7]
 800cef4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cef8:	fb09 220b 	mla	r2, r9, fp, r2
 800cefc:	4452      	add	r2, sl
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf04:	f84c 3b04 	str.w	r3, [ip], #4
 800cf08:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf10:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf14:	fb09 330a 	mla	r3, r9, sl, r3
 800cf18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf1c:	42bd      	cmp	r5, r7
 800cf1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf22:	d8e5      	bhi.n	800cef0 <__multiply+0xfc>
 800cf24:	9a01      	ldr	r2, [sp, #4]
 800cf26:	50a3      	str	r3, [r4, r2]
 800cf28:	3404      	adds	r4, #4
 800cf2a:	e79f      	b.n	800ce6c <__multiply+0x78>
 800cf2c:	3e01      	subs	r6, #1
 800cf2e:	e7a1      	b.n	800ce74 <__multiply+0x80>
 800cf30:	0800f5d6 	.word	0x0800f5d6
 800cf34:	0800f647 	.word	0x0800f647

0800cf38 <__pow5mult>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	4615      	mov	r5, r2
 800cf3e:	f012 0203 	ands.w	r2, r2, #3
 800cf42:	4607      	mov	r7, r0
 800cf44:	460e      	mov	r6, r1
 800cf46:	d007      	beq.n	800cf58 <__pow5mult+0x20>
 800cf48:	4c25      	ldr	r4, [pc, #148]	@ (800cfe0 <__pow5mult+0xa8>)
 800cf4a:	3a01      	subs	r2, #1
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf52:	f7ff fe5d 	bl	800cc10 <__multadd>
 800cf56:	4606      	mov	r6, r0
 800cf58:	10ad      	asrs	r5, r5, #2
 800cf5a:	d03d      	beq.n	800cfd8 <__pow5mult+0xa0>
 800cf5c:	69fc      	ldr	r4, [r7, #28]
 800cf5e:	b97c      	cbnz	r4, 800cf80 <__pow5mult+0x48>
 800cf60:	2010      	movs	r0, #16
 800cf62:	f7ff fd23 	bl	800c9ac <malloc>
 800cf66:	4602      	mov	r2, r0
 800cf68:	61f8      	str	r0, [r7, #28]
 800cf6a:	b928      	cbnz	r0, 800cf78 <__pow5mult+0x40>
 800cf6c:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe4 <__pow5mult+0xac>)
 800cf6e:	481e      	ldr	r0, [pc, #120]	@ (800cfe8 <__pow5mult+0xb0>)
 800cf70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf74:	f7ff f92c 	bl	800c1d0 <__assert_func>
 800cf78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf7c:	6004      	str	r4, [r0, #0]
 800cf7e:	60c4      	str	r4, [r0, #12]
 800cf80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf88:	b94c      	cbnz	r4, 800cf9e <__pow5mult+0x66>
 800cf8a:	f240 2171 	movw	r1, #625	@ 0x271
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f7ff ff1a 	bl	800cdc8 <__i2b>
 800cf94:	2300      	movs	r3, #0
 800cf96:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	6003      	str	r3, [r0, #0]
 800cf9e:	f04f 0900 	mov.w	r9, #0
 800cfa2:	07eb      	lsls	r3, r5, #31
 800cfa4:	d50a      	bpl.n	800cfbc <__pow5mult+0x84>
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f7ff ff22 	bl	800cdf4 <__multiply>
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	f7ff fe09 	bl	800cbcc <_Bfree>
 800cfba:	4646      	mov	r6, r8
 800cfbc:	106d      	asrs	r5, r5, #1
 800cfbe:	d00b      	beq.n	800cfd8 <__pow5mult+0xa0>
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	b938      	cbnz	r0, 800cfd4 <__pow5mult+0x9c>
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4638      	mov	r0, r7
 800cfca:	f7ff ff13 	bl	800cdf4 <__multiply>
 800cfce:	6020      	str	r0, [r4, #0]
 800cfd0:	f8c0 9000 	str.w	r9, [r0]
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	e7e4      	b.n	800cfa2 <__pow5mult+0x6a>
 800cfd8:	4630      	mov	r0, r6
 800cfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfde:	bf00      	nop
 800cfe0:	0800f97c 	.word	0x0800f97c
 800cfe4:	0800f47a 	.word	0x0800f47a
 800cfe8:	0800f647 	.word	0x0800f647

0800cfec <__lshift>:
 800cfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff0:	460c      	mov	r4, r1
 800cff2:	6849      	ldr	r1, [r1, #4]
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cffa:	68a3      	ldr	r3, [r4, #8]
 800cffc:	4607      	mov	r7, r0
 800cffe:	4691      	mov	r9, r2
 800d000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d004:	f108 0601 	add.w	r6, r8, #1
 800d008:	42b3      	cmp	r3, r6
 800d00a:	db0b      	blt.n	800d024 <__lshift+0x38>
 800d00c:	4638      	mov	r0, r7
 800d00e:	f7ff fd9d 	bl	800cb4c <_Balloc>
 800d012:	4605      	mov	r5, r0
 800d014:	b948      	cbnz	r0, 800d02a <__lshift+0x3e>
 800d016:	4602      	mov	r2, r0
 800d018:	4b28      	ldr	r3, [pc, #160]	@ (800d0bc <__lshift+0xd0>)
 800d01a:	4829      	ldr	r0, [pc, #164]	@ (800d0c0 <__lshift+0xd4>)
 800d01c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d020:	f7ff f8d6 	bl	800c1d0 <__assert_func>
 800d024:	3101      	adds	r1, #1
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	e7ee      	b.n	800d008 <__lshift+0x1c>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f100 0114 	add.w	r1, r0, #20
 800d030:	f100 0210 	add.w	r2, r0, #16
 800d034:	4618      	mov	r0, r3
 800d036:	4553      	cmp	r3, sl
 800d038:	db33      	blt.n	800d0a2 <__lshift+0xb6>
 800d03a:	6920      	ldr	r0, [r4, #16]
 800d03c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d040:	f104 0314 	add.w	r3, r4, #20
 800d044:	f019 091f 	ands.w	r9, r9, #31
 800d048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d04c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d050:	d02b      	beq.n	800d0aa <__lshift+0xbe>
 800d052:	f1c9 0e20 	rsb	lr, r9, #32
 800d056:	468a      	mov	sl, r1
 800d058:	2200      	movs	r2, #0
 800d05a:	6818      	ldr	r0, [r3, #0]
 800d05c:	fa00 f009 	lsl.w	r0, r0, r9
 800d060:	4310      	orrs	r0, r2
 800d062:	f84a 0b04 	str.w	r0, [sl], #4
 800d066:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06a:	459c      	cmp	ip, r3
 800d06c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d070:	d8f3      	bhi.n	800d05a <__lshift+0x6e>
 800d072:	ebac 0304 	sub.w	r3, ip, r4
 800d076:	3b15      	subs	r3, #21
 800d078:	f023 0303 	bic.w	r3, r3, #3
 800d07c:	3304      	adds	r3, #4
 800d07e:	f104 0015 	add.w	r0, r4, #21
 800d082:	4560      	cmp	r0, ip
 800d084:	bf88      	it	hi
 800d086:	2304      	movhi	r3, #4
 800d088:	50ca      	str	r2, [r1, r3]
 800d08a:	b10a      	cbz	r2, 800d090 <__lshift+0xa4>
 800d08c:	f108 0602 	add.w	r6, r8, #2
 800d090:	3e01      	subs	r6, #1
 800d092:	4638      	mov	r0, r7
 800d094:	612e      	str	r6, [r5, #16]
 800d096:	4621      	mov	r1, r4
 800d098:	f7ff fd98 	bl	800cbcc <_Bfree>
 800d09c:	4628      	mov	r0, r5
 800d09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	e7c5      	b.n	800d036 <__lshift+0x4a>
 800d0aa:	3904      	subs	r1, #4
 800d0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0b4:	459c      	cmp	ip, r3
 800d0b6:	d8f9      	bhi.n	800d0ac <__lshift+0xc0>
 800d0b8:	e7ea      	b.n	800d090 <__lshift+0xa4>
 800d0ba:	bf00      	nop
 800d0bc:	0800f5d6 	.word	0x0800f5d6
 800d0c0:	0800f647 	.word	0x0800f647

0800d0c4 <__mcmp>:
 800d0c4:	690a      	ldr	r2, [r1, #16]
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	6900      	ldr	r0, [r0, #16]
 800d0ca:	1a80      	subs	r0, r0, r2
 800d0cc:	b530      	push	{r4, r5, lr}
 800d0ce:	d10e      	bne.n	800d0ee <__mcmp+0x2a>
 800d0d0:	3314      	adds	r3, #20
 800d0d2:	3114      	adds	r1, #20
 800d0d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0e4:	4295      	cmp	r5, r2
 800d0e6:	d003      	beq.n	800d0f0 <__mcmp+0x2c>
 800d0e8:	d205      	bcs.n	800d0f6 <__mcmp+0x32>
 800d0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ee:	bd30      	pop	{r4, r5, pc}
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d3f3      	bcc.n	800d0dc <__mcmp+0x18>
 800d0f4:	e7fb      	b.n	800d0ee <__mcmp+0x2a>
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	e7f9      	b.n	800d0ee <__mcmp+0x2a>
	...

0800d0fc <__mdiff>:
 800d0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	4689      	mov	r9, r1
 800d102:	4606      	mov	r6, r0
 800d104:	4611      	mov	r1, r2
 800d106:	4648      	mov	r0, r9
 800d108:	4614      	mov	r4, r2
 800d10a:	f7ff ffdb 	bl	800d0c4 <__mcmp>
 800d10e:	1e05      	subs	r5, r0, #0
 800d110:	d112      	bne.n	800d138 <__mdiff+0x3c>
 800d112:	4629      	mov	r1, r5
 800d114:	4630      	mov	r0, r6
 800d116:	f7ff fd19 	bl	800cb4c <_Balloc>
 800d11a:	4602      	mov	r2, r0
 800d11c:	b928      	cbnz	r0, 800d12a <__mdiff+0x2e>
 800d11e:	4b3f      	ldr	r3, [pc, #252]	@ (800d21c <__mdiff+0x120>)
 800d120:	f240 2137 	movw	r1, #567	@ 0x237
 800d124:	483e      	ldr	r0, [pc, #248]	@ (800d220 <__mdiff+0x124>)
 800d126:	f7ff f853 	bl	800c1d0 <__assert_func>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d130:	4610      	mov	r0, r2
 800d132:	b003      	add	sp, #12
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d138:	bfbc      	itt	lt
 800d13a:	464b      	movlt	r3, r9
 800d13c:	46a1      	movlt	r9, r4
 800d13e:	4630      	mov	r0, r6
 800d140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d144:	bfba      	itte	lt
 800d146:	461c      	movlt	r4, r3
 800d148:	2501      	movlt	r5, #1
 800d14a:	2500      	movge	r5, #0
 800d14c:	f7ff fcfe 	bl	800cb4c <_Balloc>
 800d150:	4602      	mov	r2, r0
 800d152:	b918      	cbnz	r0, 800d15c <__mdiff+0x60>
 800d154:	4b31      	ldr	r3, [pc, #196]	@ (800d21c <__mdiff+0x120>)
 800d156:	f240 2145 	movw	r1, #581	@ 0x245
 800d15a:	e7e3      	b.n	800d124 <__mdiff+0x28>
 800d15c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d160:	6926      	ldr	r6, [r4, #16]
 800d162:	60c5      	str	r5, [r0, #12]
 800d164:	f109 0310 	add.w	r3, r9, #16
 800d168:	f109 0514 	add.w	r5, r9, #20
 800d16c:	f104 0e14 	add.w	lr, r4, #20
 800d170:	f100 0b14 	add.w	fp, r0, #20
 800d174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	46d9      	mov	r9, fp
 800d180:	f04f 0c00 	mov.w	ip, #0
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d18a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	fa1f f38a 	uxth.w	r3, sl
 800d194:	4619      	mov	r1, r3
 800d196:	b283      	uxth	r3, r0
 800d198:	1acb      	subs	r3, r1, r3
 800d19a:	0c00      	lsrs	r0, r0, #16
 800d19c:	4463      	add	r3, ip
 800d19e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1ac:	4576      	cmp	r6, lr
 800d1ae:	f849 3b04 	str.w	r3, [r9], #4
 800d1b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1b6:	d8e5      	bhi.n	800d184 <__mdiff+0x88>
 800d1b8:	1b33      	subs	r3, r6, r4
 800d1ba:	3b15      	subs	r3, #21
 800d1bc:	f023 0303 	bic.w	r3, r3, #3
 800d1c0:	3415      	adds	r4, #21
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	42a6      	cmp	r6, r4
 800d1c6:	bf38      	it	cc
 800d1c8:	2304      	movcc	r3, #4
 800d1ca:	441d      	add	r5, r3
 800d1cc:	445b      	add	r3, fp
 800d1ce:	461e      	mov	r6, r3
 800d1d0:	462c      	mov	r4, r5
 800d1d2:	4544      	cmp	r4, r8
 800d1d4:	d30e      	bcc.n	800d1f4 <__mdiff+0xf8>
 800d1d6:	f108 0103 	add.w	r1, r8, #3
 800d1da:	1b49      	subs	r1, r1, r5
 800d1dc:	f021 0103 	bic.w	r1, r1, #3
 800d1e0:	3d03      	subs	r5, #3
 800d1e2:	45a8      	cmp	r8, r5
 800d1e4:	bf38      	it	cc
 800d1e6:	2100      	movcc	r1, #0
 800d1e8:	440b      	add	r3, r1
 800d1ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1ee:	b191      	cbz	r1, 800d216 <__mdiff+0x11a>
 800d1f0:	6117      	str	r7, [r2, #16]
 800d1f2:	e79d      	b.n	800d130 <__mdiff+0x34>
 800d1f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1f8:	46e6      	mov	lr, ip
 800d1fa:	0c08      	lsrs	r0, r1, #16
 800d1fc:	fa1c fc81 	uxtah	ip, ip, r1
 800d200:	4471      	add	r1, lr
 800d202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d206:	b289      	uxth	r1, r1
 800d208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d20c:	f846 1b04 	str.w	r1, [r6], #4
 800d210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d214:	e7dd      	b.n	800d1d2 <__mdiff+0xd6>
 800d216:	3f01      	subs	r7, #1
 800d218:	e7e7      	b.n	800d1ea <__mdiff+0xee>
 800d21a:	bf00      	nop
 800d21c:	0800f5d6 	.word	0x0800f5d6
 800d220:	0800f647 	.word	0x0800f647

0800d224 <__ulp>:
 800d224:	b082      	sub	sp, #8
 800d226:	ed8d 0b00 	vstr	d0, [sp]
 800d22a:	9a01      	ldr	r2, [sp, #4]
 800d22c:	4b0f      	ldr	r3, [pc, #60]	@ (800d26c <__ulp+0x48>)
 800d22e:	4013      	ands	r3, r2
 800d230:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d234:	2b00      	cmp	r3, #0
 800d236:	dc08      	bgt.n	800d24a <__ulp+0x26>
 800d238:	425b      	negs	r3, r3
 800d23a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d23e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d242:	da04      	bge.n	800d24e <__ulp+0x2a>
 800d244:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d248:	4113      	asrs	r3, r2
 800d24a:	2200      	movs	r2, #0
 800d24c:	e008      	b.n	800d260 <__ulp+0x3c>
 800d24e:	f1a2 0314 	sub.w	r3, r2, #20
 800d252:	2b1e      	cmp	r3, #30
 800d254:	bfda      	itte	le
 800d256:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d25a:	40da      	lsrle	r2, r3
 800d25c:	2201      	movgt	r2, #1
 800d25e:	2300      	movs	r3, #0
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	ec41 0b10 	vmov	d0, r0, r1
 800d268:	b002      	add	sp, #8
 800d26a:	4770      	bx	lr
 800d26c:	7ff00000 	.word	0x7ff00000

0800d270 <__b2d>:
 800d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	6906      	ldr	r6, [r0, #16]
 800d276:	f100 0814 	add.w	r8, r0, #20
 800d27a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d27e:	1f37      	subs	r7, r6, #4
 800d280:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d284:	4610      	mov	r0, r2
 800d286:	f7ff fd53 	bl	800cd30 <__hi0bits>
 800d28a:	f1c0 0320 	rsb	r3, r0, #32
 800d28e:	280a      	cmp	r0, #10
 800d290:	600b      	str	r3, [r1, #0]
 800d292:	491b      	ldr	r1, [pc, #108]	@ (800d300 <__b2d+0x90>)
 800d294:	dc15      	bgt.n	800d2c2 <__b2d+0x52>
 800d296:	f1c0 0c0b 	rsb	ip, r0, #11
 800d29a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d29e:	45b8      	cmp	r8, r7
 800d2a0:	ea43 0501 	orr.w	r5, r3, r1
 800d2a4:	bf34      	ite	cc
 800d2a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2aa:	2300      	movcs	r3, #0
 800d2ac:	3015      	adds	r0, #21
 800d2ae:	fa02 f000 	lsl.w	r0, r2, r0
 800d2b2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d2b6:	4303      	orrs	r3, r0
 800d2b8:	461c      	mov	r4, r3
 800d2ba:	ec45 4b10 	vmov	d0, r4, r5
 800d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c2:	45b8      	cmp	r8, r7
 800d2c4:	bf3a      	itte	cc
 800d2c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2ca:	f1a6 0708 	subcc.w	r7, r6, #8
 800d2ce:	2300      	movcs	r3, #0
 800d2d0:	380b      	subs	r0, #11
 800d2d2:	d012      	beq.n	800d2fa <__b2d+0x8a>
 800d2d4:	f1c0 0120 	rsb	r1, r0, #32
 800d2d8:	fa23 f401 	lsr.w	r4, r3, r1
 800d2dc:	4082      	lsls	r2, r0
 800d2de:	4322      	orrs	r2, r4
 800d2e0:	4547      	cmp	r7, r8
 800d2e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d2e6:	bf8c      	ite	hi
 800d2e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2ec:	2200      	movls	r2, #0
 800d2ee:	4083      	lsls	r3, r0
 800d2f0:	40ca      	lsrs	r2, r1
 800d2f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	e7de      	b.n	800d2b8 <__b2d+0x48>
 800d2fa:	ea42 0501 	orr.w	r5, r2, r1
 800d2fe:	e7db      	b.n	800d2b8 <__b2d+0x48>
 800d300:	3ff00000 	.word	0x3ff00000

0800d304 <__d2b>:
 800d304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d308:	460f      	mov	r7, r1
 800d30a:	2101      	movs	r1, #1
 800d30c:	ec59 8b10 	vmov	r8, r9, d0
 800d310:	4616      	mov	r6, r2
 800d312:	f7ff fc1b 	bl	800cb4c <_Balloc>
 800d316:	4604      	mov	r4, r0
 800d318:	b930      	cbnz	r0, 800d328 <__d2b+0x24>
 800d31a:	4602      	mov	r2, r0
 800d31c:	4b23      	ldr	r3, [pc, #140]	@ (800d3ac <__d2b+0xa8>)
 800d31e:	4824      	ldr	r0, [pc, #144]	@ (800d3b0 <__d2b+0xac>)
 800d320:	f240 310f 	movw	r1, #783	@ 0x30f
 800d324:	f7fe ff54 	bl	800c1d0 <__assert_func>
 800d328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d32c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d330:	b10d      	cbz	r5, 800d336 <__d2b+0x32>
 800d332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	f1b8 0300 	subs.w	r3, r8, #0
 800d33c:	d023      	beq.n	800d386 <__d2b+0x82>
 800d33e:	4668      	mov	r0, sp
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	f7ff fd14 	bl	800cd6e <__lo0bits>
 800d346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d34a:	b1d0      	cbz	r0, 800d382 <__d2b+0x7e>
 800d34c:	f1c0 0320 	rsb	r3, r0, #32
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	430b      	orrs	r3, r1
 800d356:	40c2      	lsrs	r2, r0
 800d358:	6163      	str	r3, [r4, #20]
 800d35a:	9201      	str	r2, [sp, #4]
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	61a3      	str	r3, [r4, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	bf0c      	ite	eq
 800d364:	2201      	moveq	r2, #1
 800d366:	2202      	movne	r2, #2
 800d368:	6122      	str	r2, [r4, #16]
 800d36a:	b1a5      	cbz	r5, 800d396 <__d2b+0x92>
 800d36c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d370:	4405      	add	r5, r0
 800d372:	603d      	str	r5, [r7, #0]
 800d374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d378:	6030      	str	r0, [r6, #0]
 800d37a:	4620      	mov	r0, r4
 800d37c:	b003      	add	sp, #12
 800d37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d382:	6161      	str	r1, [r4, #20]
 800d384:	e7ea      	b.n	800d35c <__d2b+0x58>
 800d386:	a801      	add	r0, sp, #4
 800d388:	f7ff fcf1 	bl	800cd6e <__lo0bits>
 800d38c:	9b01      	ldr	r3, [sp, #4]
 800d38e:	6163      	str	r3, [r4, #20]
 800d390:	3020      	adds	r0, #32
 800d392:	2201      	movs	r2, #1
 800d394:	e7e8      	b.n	800d368 <__d2b+0x64>
 800d396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d39a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d39e:	6038      	str	r0, [r7, #0]
 800d3a0:	6918      	ldr	r0, [r3, #16]
 800d3a2:	f7ff fcc5 	bl	800cd30 <__hi0bits>
 800d3a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3aa:	e7e5      	b.n	800d378 <__d2b+0x74>
 800d3ac:	0800f5d6 	.word	0x0800f5d6
 800d3b0:	0800f647 	.word	0x0800f647

0800d3b4 <__ratio>:
 800d3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	b085      	sub	sp, #20
 800d3ba:	e9cd 1000 	strd	r1, r0, [sp]
 800d3be:	a902      	add	r1, sp, #8
 800d3c0:	f7ff ff56 	bl	800d270 <__b2d>
 800d3c4:	9800      	ldr	r0, [sp, #0]
 800d3c6:	a903      	add	r1, sp, #12
 800d3c8:	ec55 4b10 	vmov	r4, r5, d0
 800d3cc:	f7ff ff50 	bl	800d270 <__b2d>
 800d3d0:	9b01      	ldr	r3, [sp, #4]
 800d3d2:	6919      	ldr	r1, [r3, #16]
 800d3d4:	9b00      	ldr	r3, [sp, #0]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	1ac9      	subs	r1, r1, r3
 800d3da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	ec5b ab10 	vmov	sl, fp, d0
 800d3e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	bfce      	itee	gt
 800d3ec:	462a      	movgt	r2, r5
 800d3ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3f2:	465a      	movle	r2, fp
 800d3f4:	462f      	mov	r7, r5
 800d3f6:	46d9      	mov	r9, fp
 800d3f8:	bfcc      	ite	gt
 800d3fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d402:	464b      	mov	r3, r9
 800d404:	4652      	mov	r2, sl
 800d406:	4620      	mov	r0, r4
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 fa37 	bl	800087c <__aeabi_ddiv>
 800d40e:	ec41 0b10 	vmov	d0, r0, r1
 800d412:	b005      	add	sp, #20
 800d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d418 <__copybits>:
 800d418:	3901      	subs	r1, #1
 800d41a:	b570      	push	{r4, r5, r6, lr}
 800d41c:	1149      	asrs	r1, r1, #5
 800d41e:	6914      	ldr	r4, [r2, #16]
 800d420:	3101      	adds	r1, #1
 800d422:	f102 0314 	add.w	r3, r2, #20
 800d426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d42a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d42e:	1f05      	subs	r5, r0, #4
 800d430:	42a3      	cmp	r3, r4
 800d432:	d30c      	bcc.n	800d44e <__copybits+0x36>
 800d434:	1aa3      	subs	r3, r4, r2
 800d436:	3b11      	subs	r3, #17
 800d438:	f023 0303 	bic.w	r3, r3, #3
 800d43c:	3211      	adds	r2, #17
 800d43e:	42a2      	cmp	r2, r4
 800d440:	bf88      	it	hi
 800d442:	2300      	movhi	r3, #0
 800d444:	4418      	add	r0, r3
 800d446:	2300      	movs	r3, #0
 800d448:	4288      	cmp	r0, r1
 800d44a:	d305      	bcc.n	800d458 <__copybits+0x40>
 800d44c:	bd70      	pop	{r4, r5, r6, pc}
 800d44e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d452:	f845 6f04 	str.w	r6, [r5, #4]!
 800d456:	e7eb      	b.n	800d430 <__copybits+0x18>
 800d458:	f840 3b04 	str.w	r3, [r0], #4
 800d45c:	e7f4      	b.n	800d448 <__copybits+0x30>

0800d45e <__any_on>:
 800d45e:	f100 0214 	add.w	r2, r0, #20
 800d462:	6900      	ldr	r0, [r0, #16]
 800d464:	114b      	asrs	r3, r1, #5
 800d466:	4298      	cmp	r0, r3
 800d468:	b510      	push	{r4, lr}
 800d46a:	db11      	blt.n	800d490 <__any_on+0x32>
 800d46c:	dd0a      	ble.n	800d484 <__any_on+0x26>
 800d46e:	f011 011f 	ands.w	r1, r1, #31
 800d472:	d007      	beq.n	800d484 <__any_on+0x26>
 800d474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d478:	fa24 f001 	lsr.w	r0, r4, r1
 800d47c:	fa00 f101 	lsl.w	r1, r0, r1
 800d480:	428c      	cmp	r4, r1
 800d482:	d10b      	bne.n	800d49c <__any_on+0x3e>
 800d484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d488:	4293      	cmp	r3, r2
 800d48a:	d803      	bhi.n	800d494 <__any_on+0x36>
 800d48c:	2000      	movs	r0, #0
 800d48e:	bd10      	pop	{r4, pc}
 800d490:	4603      	mov	r3, r0
 800d492:	e7f7      	b.n	800d484 <__any_on+0x26>
 800d494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d498:	2900      	cmp	r1, #0
 800d49a:	d0f5      	beq.n	800d488 <__any_on+0x2a>
 800d49c:	2001      	movs	r0, #1
 800d49e:	e7f6      	b.n	800d48e <__any_on+0x30>

0800d4a0 <_strtoul_l.isra.0>:
 800d4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4a4:	4e34      	ldr	r6, [pc, #208]	@ (800d578 <_strtoul_l.isra.0+0xd8>)
 800d4a6:	4686      	mov	lr, r0
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4b0:	5d37      	ldrb	r7, [r6, r4]
 800d4b2:	f017 0708 	ands.w	r7, r7, #8
 800d4b6:	d1f8      	bne.n	800d4aa <_strtoul_l.isra.0+0xa>
 800d4b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d4ba:	d110      	bne.n	800d4de <_strtoul_l.isra.0+0x3e>
 800d4bc:	782c      	ldrb	r4, [r5, #0]
 800d4be:	2701      	movs	r7, #1
 800d4c0:	1c85      	adds	r5, r0, #2
 800d4c2:	f033 0010 	bics.w	r0, r3, #16
 800d4c6:	d115      	bne.n	800d4f4 <_strtoul_l.isra.0+0x54>
 800d4c8:	2c30      	cmp	r4, #48	@ 0x30
 800d4ca:	d10d      	bne.n	800d4e8 <_strtoul_l.isra.0+0x48>
 800d4cc:	7828      	ldrb	r0, [r5, #0]
 800d4ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d4d2:	2858      	cmp	r0, #88	@ 0x58
 800d4d4:	d108      	bne.n	800d4e8 <_strtoul_l.isra.0+0x48>
 800d4d6:	786c      	ldrb	r4, [r5, #1]
 800d4d8:	3502      	adds	r5, #2
 800d4da:	2310      	movs	r3, #16
 800d4dc:	e00a      	b.n	800d4f4 <_strtoul_l.isra.0+0x54>
 800d4de:	2c2b      	cmp	r4, #43	@ 0x2b
 800d4e0:	bf04      	itt	eq
 800d4e2:	782c      	ldrbeq	r4, [r5, #0]
 800d4e4:	1c85      	addeq	r5, r0, #2
 800d4e6:	e7ec      	b.n	800d4c2 <_strtoul_l.isra.0+0x22>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1f6      	bne.n	800d4da <_strtoul_l.isra.0+0x3a>
 800d4ec:	2c30      	cmp	r4, #48	@ 0x30
 800d4ee:	bf14      	ite	ne
 800d4f0:	230a      	movne	r3, #10
 800d4f2:	2308      	moveq	r3, #8
 800d4f4:	f04f 38ff 	mov.w	r8, #4294967295
 800d4f8:	2600      	movs	r6, #0
 800d4fa:	fbb8 f8f3 	udiv	r8, r8, r3
 800d4fe:	fb03 f908 	mul.w	r9, r3, r8
 800d502:	ea6f 0909 	mvn.w	r9, r9
 800d506:	4630      	mov	r0, r6
 800d508:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d50c:	f1bc 0f09 	cmp.w	ip, #9
 800d510:	d810      	bhi.n	800d534 <_strtoul_l.isra.0+0x94>
 800d512:	4664      	mov	r4, ip
 800d514:	42a3      	cmp	r3, r4
 800d516:	dd1e      	ble.n	800d556 <_strtoul_l.isra.0+0xb6>
 800d518:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d51c:	d007      	beq.n	800d52e <_strtoul_l.isra.0+0x8e>
 800d51e:	4580      	cmp	r8, r0
 800d520:	d316      	bcc.n	800d550 <_strtoul_l.isra.0+0xb0>
 800d522:	d101      	bne.n	800d528 <_strtoul_l.isra.0+0x88>
 800d524:	45a1      	cmp	r9, r4
 800d526:	db13      	blt.n	800d550 <_strtoul_l.isra.0+0xb0>
 800d528:	fb00 4003 	mla	r0, r0, r3, r4
 800d52c:	2601      	movs	r6, #1
 800d52e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d532:	e7e9      	b.n	800d508 <_strtoul_l.isra.0+0x68>
 800d534:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d538:	f1bc 0f19 	cmp.w	ip, #25
 800d53c:	d801      	bhi.n	800d542 <_strtoul_l.isra.0+0xa2>
 800d53e:	3c37      	subs	r4, #55	@ 0x37
 800d540:	e7e8      	b.n	800d514 <_strtoul_l.isra.0+0x74>
 800d542:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d546:	f1bc 0f19 	cmp.w	ip, #25
 800d54a:	d804      	bhi.n	800d556 <_strtoul_l.isra.0+0xb6>
 800d54c:	3c57      	subs	r4, #87	@ 0x57
 800d54e:	e7e1      	b.n	800d514 <_strtoul_l.isra.0+0x74>
 800d550:	f04f 36ff 	mov.w	r6, #4294967295
 800d554:	e7eb      	b.n	800d52e <_strtoul_l.isra.0+0x8e>
 800d556:	1c73      	adds	r3, r6, #1
 800d558:	d106      	bne.n	800d568 <_strtoul_l.isra.0+0xc8>
 800d55a:	2322      	movs	r3, #34	@ 0x22
 800d55c:	f8ce 3000 	str.w	r3, [lr]
 800d560:	4630      	mov	r0, r6
 800d562:	b932      	cbnz	r2, 800d572 <_strtoul_l.isra.0+0xd2>
 800d564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d568:	b107      	cbz	r7, 800d56c <_strtoul_l.isra.0+0xcc>
 800d56a:	4240      	negs	r0, r0
 800d56c:	2a00      	cmp	r2, #0
 800d56e:	d0f9      	beq.n	800d564 <_strtoul_l.isra.0+0xc4>
 800d570:	b106      	cbz	r6, 800d574 <_strtoul_l.isra.0+0xd4>
 800d572:	1e69      	subs	r1, r5, #1
 800d574:	6011      	str	r1, [r2, #0]
 800d576:	e7f5      	b.n	800d564 <_strtoul_l.isra.0+0xc4>
 800d578:	0800f7b9 	.word	0x0800f7b9

0800d57c <_strtoul_r>:
 800d57c:	f7ff bf90 	b.w	800d4a0 <_strtoul_l.isra.0>

0800d580 <strtoul>:
 800d580:	4613      	mov	r3, r2
 800d582:	460a      	mov	r2, r1
 800d584:	4601      	mov	r1, r0
 800d586:	4802      	ldr	r0, [pc, #8]	@ (800d590 <strtoul+0x10>)
 800d588:	6800      	ldr	r0, [r0, #0]
 800d58a:	f7ff bf89 	b.w	800d4a0 <_strtoul_l.isra.0>
 800d58e:	bf00      	nop
 800d590:	200001a0 	.word	0x200001a0

0800d594 <__ascii_wctomb>:
 800d594:	4603      	mov	r3, r0
 800d596:	4608      	mov	r0, r1
 800d598:	b141      	cbz	r1, 800d5ac <__ascii_wctomb+0x18>
 800d59a:	2aff      	cmp	r2, #255	@ 0xff
 800d59c:	d904      	bls.n	800d5a8 <__ascii_wctomb+0x14>
 800d59e:	228a      	movs	r2, #138	@ 0x8a
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a6:	4770      	bx	lr
 800d5a8:	700a      	strb	r2, [r1, #0]
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	4770      	bx	lr

0800d5ae <__ssputs_r>:
 800d5ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b2:	688e      	ldr	r6, [r1, #8]
 800d5b4:	461f      	mov	r7, r3
 800d5b6:	42be      	cmp	r6, r7
 800d5b8:	680b      	ldr	r3, [r1, #0]
 800d5ba:	4682      	mov	sl, r0
 800d5bc:	460c      	mov	r4, r1
 800d5be:	4690      	mov	r8, r2
 800d5c0:	d82d      	bhi.n	800d61e <__ssputs_r+0x70>
 800d5c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5c6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5ca:	d026      	beq.n	800d61a <__ssputs_r+0x6c>
 800d5cc:	6965      	ldr	r5, [r4, #20]
 800d5ce:	6909      	ldr	r1, [r1, #16]
 800d5d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5d4:	eba3 0901 	sub.w	r9, r3, r1
 800d5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5dc:	1c7b      	adds	r3, r7, #1
 800d5de:	444b      	add	r3, r9
 800d5e0:	106d      	asrs	r5, r5, #1
 800d5e2:	429d      	cmp	r5, r3
 800d5e4:	bf38      	it	cc
 800d5e6:	461d      	movcc	r5, r3
 800d5e8:	0553      	lsls	r3, r2, #21
 800d5ea:	d527      	bpl.n	800d63c <__ssputs_r+0x8e>
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7ff fa0f 	bl	800ca10 <_malloc_r>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b360      	cbz	r0, 800d650 <__ssputs_r+0xa2>
 800d5f6:	6921      	ldr	r1, [r4, #16]
 800d5f8:	464a      	mov	r2, r9
 800d5fa:	f7fe fdd0 	bl	800c19e <memcpy>
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d608:	81a3      	strh	r3, [r4, #12]
 800d60a:	6126      	str	r6, [r4, #16]
 800d60c:	6165      	str	r5, [r4, #20]
 800d60e:	444e      	add	r6, r9
 800d610:	eba5 0509 	sub.w	r5, r5, r9
 800d614:	6026      	str	r6, [r4, #0]
 800d616:	60a5      	str	r5, [r4, #8]
 800d618:	463e      	mov	r6, r7
 800d61a:	42be      	cmp	r6, r7
 800d61c:	d900      	bls.n	800d620 <__ssputs_r+0x72>
 800d61e:	463e      	mov	r6, r7
 800d620:	6820      	ldr	r0, [r4, #0]
 800d622:	4632      	mov	r2, r6
 800d624:	4641      	mov	r1, r8
 800d626:	f7fd fdad 	bl	800b184 <memmove>
 800d62a:	68a3      	ldr	r3, [r4, #8]
 800d62c:	1b9b      	subs	r3, r3, r6
 800d62e:	60a3      	str	r3, [r4, #8]
 800d630:	6823      	ldr	r3, [r4, #0]
 800d632:	4433      	add	r3, r6
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	2000      	movs	r0, #0
 800d638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63c:	462a      	mov	r2, r5
 800d63e:	f001 fa0d 	bl	800ea5c <_realloc_r>
 800d642:	4606      	mov	r6, r0
 800d644:	2800      	cmp	r0, #0
 800d646:	d1e0      	bne.n	800d60a <__ssputs_r+0x5c>
 800d648:	6921      	ldr	r1, [r4, #16]
 800d64a:	4650      	mov	r0, sl
 800d64c:	f7fe fde6 	bl	800c21c <_free_r>
 800d650:	230c      	movs	r3, #12
 800d652:	f8ca 3000 	str.w	r3, [sl]
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d65c:	81a3      	strh	r3, [r4, #12]
 800d65e:	f04f 30ff 	mov.w	r0, #4294967295
 800d662:	e7e9      	b.n	800d638 <__ssputs_r+0x8a>

0800d664 <_svfiprintf_r>:
 800d664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	4698      	mov	r8, r3
 800d66a:	898b      	ldrh	r3, [r1, #12]
 800d66c:	061b      	lsls	r3, r3, #24
 800d66e:	b09d      	sub	sp, #116	@ 0x74
 800d670:	4607      	mov	r7, r0
 800d672:	460d      	mov	r5, r1
 800d674:	4614      	mov	r4, r2
 800d676:	d510      	bpl.n	800d69a <_svfiprintf_r+0x36>
 800d678:	690b      	ldr	r3, [r1, #16]
 800d67a:	b973      	cbnz	r3, 800d69a <_svfiprintf_r+0x36>
 800d67c:	2140      	movs	r1, #64	@ 0x40
 800d67e:	f7ff f9c7 	bl	800ca10 <_malloc_r>
 800d682:	6028      	str	r0, [r5, #0]
 800d684:	6128      	str	r0, [r5, #16]
 800d686:	b930      	cbnz	r0, 800d696 <_svfiprintf_r+0x32>
 800d688:	230c      	movs	r3, #12
 800d68a:	603b      	str	r3, [r7, #0]
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	b01d      	add	sp, #116	@ 0x74
 800d692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d696:	2340      	movs	r3, #64	@ 0x40
 800d698:	616b      	str	r3, [r5, #20]
 800d69a:	2300      	movs	r3, #0
 800d69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d69e:	2320      	movs	r3, #32
 800d6a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a8:	2330      	movs	r3, #48	@ 0x30
 800d6aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d848 <_svfiprintf_r+0x1e4>
 800d6ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6b2:	f04f 0901 	mov.w	r9, #1
 800d6b6:	4623      	mov	r3, r4
 800d6b8:	469a      	mov	sl, r3
 800d6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6be:	b10a      	cbz	r2, 800d6c4 <_svfiprintf_r+0x60>
 800d6c0:	2a25      	cmp	r2, #37	@ 0x25
 800d6c2:	d1f9      	bne.n	800d6b8 <_svfiprintf_r+0x54>
 800d6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c8:	d00b      	beq.n	800d6e2 <_svfiprintf_r+0x7e>
 800d6ca:	465b      	mov	r3, fp
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	f7ff ff6c 	bl	800d5ae <__ssputs_r>
 800d6d6:	3001      	adds	r0, #1
 800d6d8:	f000 80a7 	beq.w	800d82a <_svfiprintf_r+0x1c6>
 800d6dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6de:	445a      	add	r2, fp
 800d6e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f000 809f 	beq.w	800d82a <_svfiprintf_r+0x1c6>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f6:	f10a 0a01 	add.w	sl, sl, #1
 800d6fa:	9304      	str	r3, [sp, #16]
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d702:	931a      	str	r3, [sp, #104]	@ 0x68
 800d704:	4654      	mov	r4, sl
 800d706:	2205      	movs	r2, #5
 800d708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70c:	484e      	ldr	r0, [pc, #312]	@ (800d848 <_svfiprintf_r+0x1e4>)
 800d70e:	f7f2 fd7f 	bl	8000210 <memchr>
 800d712:	9a04      	ldr	r2, [sp, #16]
 800d714:	b9d8      	cbnz	r0, 800d74e <_svfiprintf_r+0xea>
 800d716:	06d0      	lsls	r0, r2, #27
 800d718:	bf44      	itt	mi
 800d71a:	2320      	movmi	r3, #32
 800d71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d720:	0711      	lsls	r1, r2, #28
 800d722:	bf44      	itt	mi
 800d724:	232b      	movmi	r3, #43	@ 0x2b
 800d726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d72a:	f89a 3000 	ldrb.w	r3, [sl]
 800d72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d730:	d015      	beq.n	800d75e <_svfiprintf_r+0xfa>
 800d732:	9a07      	ldr	r2, [sp, #28]
 800d734:	4654      	mov	r4, sl
 800d736:	2000      	movs	r0, #0
 800d738:	f04f 0c0a 	mov.w	ip, #10
 800d73c:	4621      	mov	r1, r4
 800d73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d742:	3b30      	subs	r3, #48	@ 0x30
 800d744:	2b09      	cmp	r3, #9
 800d746:	d94b      	bls.n	800d7e0 <_svfiprintf_r+0x17c>
 800d748:	b1b0      	cbz	r0, 800d778 <_svfiprintf_r+0x114>
 800d74a:	9207      	str	r2, [sp, #28]
 800d74c:	e014      	b.n	800d778 <_svfiprintf_r+0x114>
 800d74e:	eba0 0308 	sub.w	r3, r0, r8
 800d752:	fa09 f303 	lsl.w	r3, r9, r3
 800d756:	4313      	orrs	r3, r2
 800d758:	9304      	str	r3, [sp, #16]
 800d75a:	46a2      	mov	sl, r4
 800d75c:	e7d2      	b.n	800d704 <_svfiprintf_r+0xa0>
 800d75e:	9b03      	ldr	r3, [sp, #12]
 800d760:	1d19      	adds	r1, r3, #4
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	9103      	str	r1, [sp, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	bfbb      	ittet	lt
 800d76a:	425b      	neglt	r3, r3
 800d76c:	f042 0202 	orrlt.w	r2, r2, #2
 800d770:	9307      	strge	r3, [sp, #28]
 800d772:	9307      	strlt	r3, [sp, #28]
 800d774:	bfb8      	it	lt
 800d776:	9204      	strlt	r2, [sp, #16]
 800d778:	7823      	ldrb	r3, [r4, #0]
 800d77a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d77c:	d10a      	bne.n	800d794 <_svfiprintf_r+0x130>
 800d77e:	7863      	ldrb	r3, [r4, #1]
 800d780:	2b2a      	cmp	r3, #42	@ 0x2a
 800d782:	d132      	bne.n	800d7ea <_svfiprintf_r+0x186>
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	1d1a      	adds	r2, r3, #4
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	9203      	str	r2, [sp, #12]
 800d78c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d790:	3402      	adds	r4, #2
 800d792:	9305      	str	r3, [sp, #20]
 800d794:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d858 <_svfiprintf_r+0x1f4>
 800d798:	7821      	ldrb	r1, [r4, #0]
 800d79a:	2203      	movs	r2, #3
 800d79c:	4650      	mov	r0, sl
 800d79e:	f7f2 fd37 	bl	8000210 <memchr>
 800d7a2:	b138      	cbz	r0, 800d7b4 <_svfiprintf_r+0x150>
 800d7a4:	9b04      	ldr	r3, [sp, #16]
 800d7a6:	eba0 000a 	sub.w	r0, r0, sl
 800d7aa:	2240      	movs	r2, #64	@ 0x40
 800d7ac:	4082      	lsls	r2, r0
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	3401      	adds	r4, #1
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b8:	4824      	ldr	r0, [pc, #144]	@ (800d84c <_svfiprintf_r+0x1e8>)
 800d7ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7be:	2206      	movs	r2, #6
 800d7c0:	f7f2 fd26 	bl	8000210 <memchr>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d036      	beq.n	800d836 <_svfiprintf_r+0x1d2>
 800d7c8:	4b21      	ldr	r3, [pc, #132]	@ (800d850 <_svfiprintf_r+0x1ec>)
 800d7ca:	bb1b      	cbnz	r3, 800d814 <_svfiprintf_r+0x1b0>
 800d7cc:	9b03      	ldr	r3, [sp, #12]
 800d7ce:	3307      	adds	r3, #7
 800d7d0:	f023 0307 	bic.w	r3, r3, #7
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	9303      	str	r3, [sp, #12]
 800d7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7da:	4433      	add	r3, r6
 800d7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7de:	e76a      	b.n	800d6b6 <_svfiprintf_r+0x52>
 800d7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	e7a8      	b.n	800d73c <_svfiprintf_r+0xd8>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	3401      	adds	r4, #1
 800d7ee:	9305      	str	r3, [sp, #20]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	f04f 0c0a 	mov.w	ip, #10
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7fc:	3a30      	subs	r2, #48	@ 0x30
 800d7fe:	2a09      	cmp	r2, #9
 800d800:	d903      	bls.n	800d80a <_svfiprintf_r+0x1a6>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0c6      	beq.n	800d794 <_svfiprintf_r+0x130>
 800d806:	9105      	str	r1, [sp, #20]
 800d808:	e7c4      	b.n	800d794 <_svfiprintf_r+0x130>
 800d80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d80e:	4604      	mov	r4, r0
 800d810:	2301      	movs	r3, #1
 800d812:	e7f0      	b.n	800d7f6 <_svfiprintf_r+0x192>
 800d814:	ab03      	add	r3, sp, #12
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	462a      	mov	r2, r5
 800d81a:	4b0e      	ldr	r3, [pc, #56]	@ (800d854 <_svfiprintf_r+0x1f0>)
 800d81c:	a904      	add	r1, sp, #16
 800d81e:	4638      	mov	r0, r7
 800d820:	f3af 8000 	nop.w
 800d824:	1c42      	adds	r2, r0, #1
 800d826:	4606      	mov	r6, r0
 800d828:	d1d6      	bne.n	800d7d8 <_svfiprintf_r+0x174>
 800d82a:	89ab      	ldrh	r3, [r5, #12]
 800d82c:	065b      	lsls	r3, r3, #25
 800d82e:	f53f af2d 	bmi.w	800d68c <_svfiprintf_r+0x28>
 800d832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d834:	e72c      	b.n	800d690 <_svfiprintf_r+0x2c>
 800d836:	ab03      	add	r3, sp, #12
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	462a      	mov	r2, r5
 800d83c:	4b05      	ldr	r3, [pc, #20]	@ (800d854 <_svfiprintf_r+0x1f0>)
 800d83e:	a904      	add	r1, sp, #16
 800d840:	4638      	mov	r0, r7
 800d842:	f000 fb8b 	bl	800df5c <_printf_i>
 800d846:	e7ed      	b.n	800d824 <_svfiprintf_r+0x1c0>
 800d848:	0800f6a0 	.word	0x0800f6a0
 800d84c:	0800f6aa 	.word	0x0800f6aa
 800d850:	00000000 	.word	0x00000000
 800d854:	0800d5af 	.word	0x0800d5af
 800d858:	0800f6a6 	.word	0x0800f6a6

0800d85c <_sungetc_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	1c4b      	adds	r3, r1, #1
 800d860:	4614      	mov	r4, r2
 800d862:	d103      	bne.n	800d86c <_sungetc_r+0x10>
 800d864:	f04f 35ff 	mov.w	r5, #4294967295
 800d868:	4628      	mov	r0, r5
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	8993      	ldrh	r3, [r2, #12]
 800d86e:	f023 0320 	bic.w	r3, r3, #32
 800d872:	8193      	strh	r3, [r2, #12]
 800d874:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d876:	6852      	ldr	r2, [r2, #4]
 800d878:	b2cd      	uxtb	r5, r1
 800d87a:	b18b      	cbz	r3, 800d8a0 <_sungetc_r+0x44>
 800d87c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d87e:	4293      	cmp	r3, r2
 800d880:	dd08      	ble.n	800d894 <_sungetc_r+0x38>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	1e5a      	subs	r2, r3, #1
 800d886:	6022      	str	r2, [r4, #0]
 800d888:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d88c:	6863      	ldr	r3, [r4, #4]
 800d88e:	3301      	adds	r3, #1
 800d890:	6063      	str	r3, [r4, #4]
 800d892:	e7e9      	b.n	800d868 <_sungetc_r+0xc>
 800d894:	4621      	mov	r1, r4
 800d896:	f000 ff5a 	bl	800e74e <__submore>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0f1      	beq.n	800d882 <_sungetc_r+0x26>
 800d89e:	e7e1      	b.n	800d864 <_sungetc_r+0x8>
 800d8a0:	6921      	ldr	r1, [r4, #16]
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	b151      	cbz	r1, 800d8bc <_sungetc_r+0x60>
 800d8a6:	4299      	cmp	r1, r3
 800d8a8:	d208      	bcs.n	800d8bc <_sungetc_r+0x60>
 800d8aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d8ae:	42a9      	cmp	r1, r5
 800d8b0:	d104      	bne.n	800d8bc <_sungetc_r+0x60>
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	3201      	adds	r2, #1
 800d8b6:	6023      	str	r3, [r4, #0]
 800d8b8:	6062      	str	r2, [r4, #4]
 800d8ba:	e7d5      	b.n	800d868 <_sungetc_r+0xc>
 800d8bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d8c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d8ca:	4623      	mov	r3, r4
 800d8cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e7dc      	b.n	800d890 <_sungetc_r+0x34>

0800d8d6 <__ssrefill_r>:
 800d8d6:	b510      	push	{r4, lr}
 800d8d8:	460c      	mov	r4, r1
 800d8da:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d8dc:	b169      	cbz	r1, 800d8fa <__ssrefill_r+0x24>
 800d8de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8e2:	4299      	cmp	r1, r3
 800d8e4:	d001      	beq.n	800d8ea <__ssrefill_r+0x14>
 800d8e6:	f7fe fc99 	bl	800c21c <_free_r>
 800d8ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8ec:	6063      	str	r3, [r4, #4]
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	6360      	str	r0, [r4, #52]	@ 0x34
 800d8f2:	b113      	cbz	r3, 800d8fa <__ssrefill_r+0x24>
 800d8f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d8f6:	6023      	str	r3, [r4, #0]
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	6923      	ldr	r3, [r4, #16]
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	2300      	movs	r3, #0
 800d900:	6063      	str	r3, [r4, #4]
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	f043 0320 	orr.w	r3, r3, #32
 800d908:	81a3      	strh	r3, [r4, #12]
 800d90a:	f04f 30ff 	mov.w	r0, #4294967295
 800d90e:	e7f3      	b.n	800d8f8 <__ssrefill_r+0x22>

0800d910 <__ssvfiscanf_r>:
 800d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	460c      	mov	r4, r1
 800d916:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d91a:	2100      	movs	r1, #0
 800d91c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d920:	49a6      	ldr	r1, [pc, #664]	@ (800dbbc <__ssvfiscanf_r+0x2ac>)
 800d922:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d924:	f10d 0804 	add.w	r8, sp, #4
 800d928:	49a5      	ldr	r1, [pc, #660]	@ (800dbc0 <__ssvfiscanf_r+0x2b0>)
 800d92a:	4fa6      	ldr	r7, [pc, #664]	@ (800dbc4 <__ssvfiscanf_r+0x2b4>)
 800d92c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d930:	4606      	mov	r6, r0
 800d932:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	f892 9000 	ldrb.w	r9, [r2]
 800d93a:	f1b9 0f00 	cmp.w	r9, #0
 800d93e:	f000 8158 	beq.w	800dbf2 <__ssvfiscanf_r+0x2e2>
 800d942:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d946:	f013 0308 	ands.w	r3, r3, #8
 800d94a:	f102 0501 	add.w	r5, r2, #1
 800d94e:	d019      	beq.n	800d984 <__ssvfiscanf_r+0x74>
 800d950:	6863      	ldr	r3, [r4, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	dd0f      	ble.n	800d976 <__ssvfiscanf_r+0x66>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	781a      	ldrb	r2, [r3, #0]
 800d95a:	5cba      	ldrb	r2, [r7, r2]
 800d95c:	0712      	lsls	r2, r2, #28
 800d95e:	d401      	bmi.n	800d964 <__ssvfiscanf_r+0x54>
 800d960:	462a      	mov	r2, r5
 800d962:	e7e8      	b.n	800d936 <__ssvfiscanf_r+0x26>
 800d964:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d966:	3201      	adds	r2, #1
 800d968:	9245      	str	r2, [sp, #276]	@ 0x114
 800d96a:	6862      	ldr	r2, [r4, #4]
 800d96c:	3301      	adds	r3, #1
 800d96e:	3a01      	subs	r2, #1
 800d970:	6062      	str	r2, [r4, #4]
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	e7ec      	b.n	800d950 <__ssvfiscanf_r+0x40>
 800d976:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d978:	4621      	mov	r1, r4
 800d97a:	4630      	mov	r0, r6
 800d97c:	4798      	blx	r3
 800d97e:	2800      	cmp	r0, #0
 800d980:	d0e9      	beq.n	800d956 <__ssvfiscanf_r+0x46>
 800d982:	e7ed      	b.n	800d960 <__ssvfiscanf_r+0x50>
 800d984:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d988:	f040 8085 	bne.w	800da96 <__ssvfiscanf_r+0x186>
 800d98c:	9341      	str	r3, [sp, #260]	@ 0x104
 800d98e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d990:	7853      	ldrb	r3, [r2, #1]
 800d992:	2b2a      	cmp	r3, #42	@ 0x2a
 800d994:	bf02      	ittt	eq
 800d996:	2310      	moveq	r3, #16
 800d998:	1c95      	addeq	r5, r2, #2
 800d99a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d99c:	220a      	movs	r2, #10
 800d99e:	46aa      	mov	sl, r5
 800d9a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d9a4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d9a8:	2b09      	cmp	r3, #9
 800d9aa:	d91e      	bls.n	800d9ea <__ssvfiscanf_r+0xda>
 800d9ac:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800dbc8 <__ssvfiscanf_r+0x2b8>
 800d9b0:	2203      	movs	r2, #3
 800d9b2:	4658      	mov	r0, fp
 800d9b4:	f7f2 fc2c 	bl	8000210 <memchr>
 800d9b8:	b138      	cbz	r0, 800d9ca <__ssvfiscanf_r+0xba>
 800d9ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9bc:	eba0 000b 	sub.w	r0, r0, fp
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	4083      	lsls	r3, r0
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	9341      	str	r3, [sp, #260]	@ 0x104
 800d9c8:	4655      	mov	r5, sl
 800d9ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d9ce:	2b78      	cmp	r3, #120	@ 0x78
 800d9d0:	d806      	bhi.n	800d9e0 <__ssvfiscanf_r+0xd0>
 800d9d2:	2b57      	cmp	r3, #87	@ 0x57
 800d9d4:	d810      	bhi.n	800d9f8 <__ssvfiscanf_r+0xe8>
 800d9d6:	2b25      	cmp	r3, #37	@ 0x25
 800d9d8:	d05d      	beq.n	800da96 <__ssvfiscanf_r+0x186>
 800d9da:	d857      	bhi.n	800da8c <__ssvfiscanf_r+0x17c>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d075      	beq.n	800dacc <__ssvfiscanf_r+0x1bc>
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d9e4:	230a      	movs	r3, #10
 800d9e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800d9e8:	e088      	b.n	800dafc <__ssvfiscanf_r+0x1ec>
 800d9ea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d9ec:	fb02 1103 	mla	r1, r2, r3, r1
 800d9f0:	3930      	subs	r1, #48	@ 0x30
 800d9f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d9f4:	4655      	mov	r5, sl
 800d9f6:	e7d2      	b.n	800d99e <__ssvfiscanf_r+0x8e>
 800d9f8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d9fc:	2a20      	cmp	r2, #32
 800d9fe:	d8ef      	bhi.n	800d9e0 <__ssvfiscanf_r+0xd0>
 800da00:	a101      	add	r1, pc, #4	@ (adr r1, 800da08 <__ssvfiscanf_r+0xf8>)
 800da02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da06:	bf00      	nop
 800da08:	0800dadb 	.word	0x0800dadb
 800da0c:	0800d9e1 	.word	0x0800d9e1
 800da10:	0800d9e1 	.word	0x0800d9e1
 800da14:	0800db35 	.word	0x0800db35
 800da18:	0800d9e1 	.word	0x0800d9e1
 800da1c:	0800d9e1 	.word	0x0800d9e1
 800da20:	0800d9e1 	.word	0x0800d9e1
 800da24:	0800d9e1 	.word	0x0800d9e1
 800da28:	0800d9e1 	.word	0x0800d9e1
 800da2c:	0800d9e1 	.word	0x0800d9e1
 800da30:	0800d9e1 	.word	0x0800d9e1
 800da34:	0800db4b 	.word	0x0800db4b
 800da38:	0800db31 	.word	0x0800db31
 800da3c:	0800da93 	.word	0x0800da93
 800da40:	0800da93 	.word	0x0800da93
 800da44:	0800da93 	.word	0x0800da93
 800da48:	0800d9e1 	.word	0x0800d9e1
 800da4c:	0800daed 	.word	0x0800daed
 800da50:	0800d9e1 	.word	0x0800d9e1
 800da54:	0800d9e1 	.word	0x0800d9e1
 800da58:	0800d9e1 	.word	0x0800d9e1
 800da5c:	0800d9e1 	.word	0x0800d9e1
 800da60:	0800db5b 	.word	0x0800db5b
 800da64:	0800daf5 	.word	0x0800daf5
 800da68:	0800dad3 	.word	0x0800dad3
 800da6c:	0800d9e1 	.word	0x0800d9e1
 800da70:	0800d9e1 	.word	0x0800d9e1
 800da74:	0800db57 	.word	0x0800db57
 800da78:	0800d9e1 	.word	0x0800d9e1
 800da7c:	0800db31 	.word	0x0800db31
 800da80:	0800d9e1 	.word	0x0800d9e1
 800da84:	0800d9e1 	.word	0x0800d9e1
 800da88:	0800dadb 	.word	0x0800dadb
 800da8c:	3b45      	subs	r3, #69	@ 0x45
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d8a6      	bhi.n	800d9e0 <__ssvfiscanf_r+0xd0>
 800da92:	2305      	movs	r3, #5
 800da94:	e031      	b.n	800dafa <__ssvfiscanf_r+0x1ea>
 800da96:	6863      	ldr	r3, [r4, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	dd0d      	ble.n	800dab8 <__ssvfiscanf_r+0x1a8>
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	454a      	cmp	r2, r9
 800daa2:	f040 80a6 	bne.w	800dbf2 <__ssvfiscanf_r+0x2e2>
 800daa6:	3301      	adds	r3, #1
 800daa8:	6862      	ldr	r2, [r4, #4]
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800daae:	3a01      	subs	r2, #1
 800dab0:	3301      	adds	r3, #1
 800dab2:	6062      	str	r2, [r4, #4]
 800dab4:	9345      	str	r3, [sp, #276]	@ 0x114
 800dab6:	e753      	b.n	800d960 <__ssvfiscanf_r+0x50>
 800dab8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800daba:	4621      	mov	r1, r4
 800dabc:	4630      	mov	r0, r6
 800dabe:	4798      	blx	r3
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d0eb      	beq.n	800da9c <__ssvfiscanf_r+0x18c>
 800dac4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dac6:	2800      	cmp	r0, #0
 800dac8:	f040 808b 	bne.w	800dbe2 <__ssvfiscanf_r+0x2d2>
 800dacc:	f04f 30ff 	mov.w	r0, #4294967295
 800dad0:	e08b      	b.n	800dbea <__ssvfiscanf_r+0x2da>
 800dad2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dad4:	f042 0220 	orr.w	r2, r2, #32
 800dad8:	9241      	str	r2, [sp, #260]	@ 0x104
 800dada:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dadc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dae0:	9241      	str	r2, [sp, #260]	@ 0x104
 800dae2:	2210      	movs	r2, #16
 800dae4:	2b6e      	cmp	r3, #110	@ 0x6e
 800dae6:	9242      	str	r2, [sp, #264]	@ 0x108
 800dae8:	d902      	bls.n	800daf0 <__ssvfiscanf_r+0x1e0>
 800daea:	e005      	b.n	800daf8 <__ssvfiscanf_r+0x1e8>
 800daec:	2300      	movs	r3, #0
 800daee:	9342      	str	r3, [sp, #264]	@ 0x108
 800daf0:	2303      	movs	r3, #3
 800daf2:	e002      	b.n	800dafa <__ssvfiscanf_r+0x1ea>
 800daf4:	2308      	movs	r3, #8
 800daf6:	9342      	str	r3, [sp, #264]	@ 0x108
 800daf8:	2304      	movs	r3, #4
 800dafa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dafc:	6863      	ldr	r3, [r4, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	dd39      	ble.n	800db76 <__ssvfiscanf_r+0x266>
 800db02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db04:	0659      	lsls	r1, r3, #25
 800db06:	d404      	bmi.n	800db12 <__ssvfiscanf_r+0x202>
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	5cba      	ldrb	r2, [r7, r2]
 800db0e:	0712      	lsls	r2, r2, #28
 800db10:	d438      	bmi.n	800db84 <__ssvfiscanf_r+0x274>
 800db12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800db14:	2b02      	cmp	r3, #2
 800db16:	dc47      	bgt.n	800dba8 <__ssvfiscanf_r+0x298>
 800db18:	466b      	mov	r3, sp
 800db1a:	4622      	mov	r2, r4
 800db1c:	a941      	add	r1, sp, #260	@ 0x104
 800db1e:	4630      	mov	r0, r6
 800db20:	f000 fb3a 	bl	800e198 <_scanf_chars>
 800db24:	2801      	cmp	r0, #1
 800db26:	d064      	beq.n	800dbf2 <__ssvfiscanf_r+0x2e2>
 800db28:	2802      	cmp	r0, #2
 800db2a:	f47f af19 	bne.w	800d960 <__ssvfiscanf_r+0x50>
 800db2e:	e7c9      	b.n	800dac4 <__ssvfiscanf_r+0x1b4>
 800db30:	220a      	movs	r2, #10
 800db32:	e7d7      	b.n	800dae4 <__ssvfiscanf_r+0x1d4>
 800db34:	4629      	mov	r1, r5
 800db36:	4640      	mov	r0, r8
 800db38:	f000 fdd0 	bl	800e6dc <__sccl>
 800db3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db42:	9341      	str	r3, [sp, #260]	@ 0x104
 800db44:	4605      	mov	r5, r0
 800db46:	2301      	movs	r3, #1
 800db48:	e7d7      	b.n	800dafa <__ssvfiscanf_r+0x1ea>
 800db4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db50:	9341      	str	r3, [sp, #260]	@ 0x104
 800db52:	2300      	movs	r3, #0
 800db54:	e7d1      	b.n	800dafa <__ssvfiscanf_r+0x1ea>
 800db56:	2302      	movs	r3, #2
 800db58:	e7cf      	b.n	800dafa <__ssvfiscanf_r+0x1ea>
 800db5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800db5c:	06c3      	lsls	r3, r0, #27
 800db5e:	f53f aeff 	bmi.w	800d960 <__ssvfiscanf_r+0x50>
 800db62:	9b00      	ldr	r3, [sp, #0]
 800db64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db66:	1d19      	adds	r1, r3, #4
 800db68:	9100      	str	r1, [sp, #0]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	07c0      	lsls	r0, r0, #31
 800db6e:	bf4c      	ite	mi
 800db70:	801a      	strhmi	r2, [r3, #0]
 800db72:	601a      	strpl	r2, [r3, #0]
 800db74:	e6f4      	b.n	800d960 <__ssvfiscanf_r+0x50>
 800db76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800db78:	4621      	mov	r1, r4
 800db7a:	4630      	mov	r0, r6
 800db7c:	4798      	blx	r3
 800db7e:	2800      	cmp	r0, #0
 800db80:	d0bf      	beq.n	800db02 <__ssvfiscanf_r+0x1f2>
 800db82:	e79f      	b.n	800dac4 <__ssvfiscanf_r+0x1b4>
 800db84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db86:	3201      	adds	r2, #1
 800db88:	9245      	str	r2, [sp, #276]	@ 0x114
 800db8a:	6862      	ldr	r2, [r4, #4]
 800db8c:	3a01      	subs	r2, #1
 800db8e:	2a00      	cmp	r2, #0
 800db90:	6062      	str	r2, [r4, #4]
 800db92:	dd02      	ble.n	800db9a <__ssvfiscanf_r+0x28a>
 800db94:	3301      	adds	r3, #1
 800db96:	6023      	str	r3, [r4, #0]
 800db98:	e7b6      	b.n	800db08 <__ssvfiscanf_r+0x1f8>
 800db9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800db9c:	4621      	mov	r1, r4
 800db9e:	4630      	mov	r0, r6
 800dba0:	4798      	blx	r3
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d0b0      	beq.n	800db08 <__ssvfiscanf_r+0x1f8>
 800dba6:	e78d      	b.n	800dac4 <__ssvfiscanf_r+0x1b4>
 800dba8:	2b04      	cmp	r3, #4
 800dbaa:	dc0f      	bgt.n	800dbcc <__ssvfiscanf_r+0x2bc>
 800dbac:	466b      	mov	r3, sp
 800dbae:	4622      	mov	r2, r4
 800dbb0:	a941      	add	r1, sp, #260	@ 0x104
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f000 fb4a 	bl	800e24c <_scanf_i>
 800dbb8:	e7b4      	b.n	800db24 <__ssvfiscanf_r+0x214>
 800dbba:	bf00      	nop
 800dbbc:	0800d85d 	.word	0x0800d85d
 800dbc0:	0800d8d7 	.word	0x0800d8d7
 800dbc4:	0800f7b9 	.word	0x0800f7b9
 800dbc8:	0800f6a6 	.word	0x0800f6a6
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf8 <__ssvfiscanf_r+0x2e8>)
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f43f aec6 	beq.w	800d960 <__ssvfiscanf_r+0x50>
 800dbd4:	466b      	mov	r3, sp
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	a941      	add	r1, sp, #260	@ 0x104
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f3af 8000 	nop.w
 800dbe0:	e7a0      	b.n	800db24 <__ssvfiscanf_r+0x214>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	065b      	lsls	r3, r3, #25
 800dbe6:	f53f af71 	bmi.w	800dacc <__ssvfiscanf_r+0x1bc>
 800dbea:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800dbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dbf4:	e7f9      	b.n	800dbea <__ssvfiscanf_r+0x2da>
 800dbf6:	bf00      	nop
 800dbf8:	00000000 	.word	0x00000000

0800dbfc <__sfputc_r>:
 800dbfc:	6893      	ldr	r3, [r2, #8]
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	b410      	push	{r4}
 800dc04:	6093      	str	r3, [r2, #8]
 800dc06:	da08      	bge.n	800dc1a <__sfputc_r+0x1e>
 800dc08:	6994      	ldr	r4, [r2, #24]
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	db01      	blt.n	800dc12 <__sfputc_r+0x16>
 800dc0e:	290a      	cmp	r1, #10
 800dc10:	d103      	bne.n	800dc1a <__sfputc_r+0x1e>
 800dc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc16:	f7fd ba20 	b.w	800b05a <__swbuf_r>
 800dc1a:	6813      	ldr	r3, [r2, #0]
 800dc1c:	1c58      	adds	r0, r3, #1
 800dc1e:	6010      	str	r0, [r2, #0]
 800dc20:	7019      	strb	r1, [r3, #0]
 800dc22:	4608      	mov	r0, r1
 800dc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <__sfputs_r>:
 800dc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
 800dc30:	4614      	mov	r4, r2
 800dc32:	18d5      	adds	r5, r2, r3
 800dc34:	42ac      	cmp	r4, r5
 800dc36:	d101      	bne.n	800dc3c <__sfputs_r+0x12>
 800dc38:	2000      	movs	r0, #0
 800dc3a:	e007      	b.n	800dc4c <__sfputs_r+0x22>
 800dc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc40:	463a      	mov	r2, r7
 800dc42:	4630      	mov	r0, r6
 800dc44:	f7ff ffda 	bl	800dbfc <__sfputc_r>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d1f3      	bne.n	800dc34 <__sfputs_r+0xa>
 800dc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc50 <_vfiprintf_r>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	460d      	mov	r5, r1
 800dc56:	b09d      	sub	sp, #116	@ 0x74
 800dc58:	4614      	mov	r4, r2
 800dc5a:	4698      	mov	r8, r3
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	b118      	cbz	r0, 800dc68 <_vfiprintf_r+0x18>
 800dc60:	6a03      	ldr	r3, [r0, #32]
 800dc62:	b90b      	cbnz	r3, 800dc68 <_vfiprintf_r+0x18>
 800dc64:	f7fd f882 	bl	800ad6c <__sinit>
 800dc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc6a:	07d9      	lsls	r1, r3, #31
 800dc6c:	d405      	bmi.n	800dc7a <_vfiprintf_r+0x2a>
 800dc6e:	89ab      	ldrh	r3, [r5, #12]
 800dc70:	059a      	lsls	r2, r3, #22
 800dc72:	d402      	bmi.n	800dc7a <_vfiprintf_r+0x2a>
 800dc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc76:	f7fe fa87 	bl	800c188 <__retarget_lock_acquire_recursive>
 800dc7a:	89ab      	ldrh	r3, [r5, #12]
 800dc7c:	071b      	lsls	r3, r3, #28
 800dc7e:	d501      	bpl.n	800dc84 <_vfiprintf_r+0x34>
 800dc80:	692b      	ldr	r3, [r5, #16]
 800dc82:	b99b      	cbnz	r3, 800dcac <_vfiprintf_r+0x5c>
 800dc84:	4629      	mov	r1, r5
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7fd fa26 	bl	800b0d8 <__swsetup_r>
 800dc8c:	b170      	cbz	r0, 800dcac <_vfiprintf_r+0x5c>
 800dc8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc90:	07dc      	lsls	r4, r3, #31
 800dc92:	d504      	bpl.n	800dc9e <_vfiprintf_r+0x4e>
 800dc94:	f04f 30ff 	mov.w	r0, #4294967295
 800dc98:	b01d      	add	sp, #116	@ 0x74
 800dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	0598      	lsls	r0, r3, #22
 800dca2:	d4f7      	bmi.n	800dc94 <_vfiprintf_r+0x44>
 800dca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dca6:	f7fe fa71 	bl	800c18c <__retarget_lock_release_recursive>
 800dcaa:	e7f3      	b.n	800dc94 <_vfiprintf_r+0x44>
 800dcac:	2300      	movs	r3, #0
 800dcae:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb0:	2320      	movs	r3, #32
 800dcb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcba:	2330      	movs	r3, #48	@ 0x30
 800dcbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de6c <_vfiprintf_r+0x21c>
 800dcc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcc4:	f04f 0901 	mov.w	r9, #1
 800dcc8:	4623      	mov	r3, r4
 800dcca:	469a      	mov	sl, r3
 800dccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcd0:	b10a      	cbz	r2, 800dcd6 <_vfiprintf_r+0x86>
 800dcd2:	2a25      	cmp	r2, #37	@ 0x25
 800dcd4:	d1f9      	bne.n	800dcca <_vfiprintf_r+0x7a>
 800dcd6:	ebba 0b04 	subs.w	fp, sl, r4
 800dcda:	d00b      	beq.n	800dcf4 <_vfiprintf_r+0xa4>
 800dcdc:	465b      	mov	r3, fp
 800dcde:	4622      	mov	r2, r4
 800dce0:	4629      	mov	r1, r5
 800dce2:	4630      	mov	r0, r6
 800dce4:	f7ff ffa1 	bl	800dc2a <__sfputs_r>
 800dce8:	3001      	adds	r0, #1
 800dcea:	f000 80a7 	beq.w	800de3c <_vfiprintf_r+0x1ec>
 800dcee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcf0:	445a      	add	r2, fp
 800dcf2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 809f 	beq.w	800de3c <_vfiprintf_r+0x1ec>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	f04f 32ff 	mov.w	r2, #4294967295
 800dd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd08:	f10a 0a01 	add.w	sl, sl, #1
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	9307      	str	r3, [sp, #28]
 800dd10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd14:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd16:	4654      	mov	r4, sl
 800dd18:	2205      	movs	r2, #5
 800dd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1e:	4853      	ldr	r0, [pc, #332]	@ (800de6c <_vfiprintf_r+0x21c>)
 800dd20:	f7f2 fa76 	bl	8000210 <memchr>
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	b9d8      	cbnz	r0, 800dd60 <_vfiprintf_r+0x110>
 800dd28:	06d1      	lsls	r1, r2, #27
 800dd2a:	bf44      	itt	mi
 800dd2c:	2320      	movmi	r3, #32
 800dd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd32:	0713      	lsls	r3, r2, #28
 800dd34:	bf44      	itt	mi
 800dd36:	232b      	movmi	r3, #43	@ 0x2b
 800dd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd40:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd42:	d015      	beq.n	800dd70 <_vfiprintf_r+0x120>
 800dd44:	9a07      	ldr	r2, [sp, #28]
 800dd46:	4654      	mov	r4, sl
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f04f 0c0a 	mov.w	ip, #10
 800dd4e:	4621      	mov	r1, r4
 800dd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd54:	3b30      	subs	r3, #48	@ 0x30
 800dd56:	2b09      	cmp	r3, #9
 800dd58:	d94b      	bls.n	800ddf2 <_vfiprintf_r+0x1a2>
 800dd5a:	b1b0      	cbz	r0, 800dd8a <_vfiprintf_r+0x13a>
 800dd5c:	9207      	str	r2, [sp, #28]
 800dd5e:	e014      	b.n	800dd8a <_vfiprintf_r+0x13a>
 800dd60:	eba0 0308 	sub.w	r3, r0, r8
 800dd64:	fa09 f303 	lsl.w	r3, r9, r3
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	9304      	str	r3, [sp, #16]
 800dd6c:	46a2      	mov	sl, r4
 800dd6e:	e7d2      	b.n	800dd16 <_vfiprintf_r+0xc6>
 800dd70:	9b03      	ldr	r3, [sp, #12]
 800dd72:	1d19      	adds	r1, r3, #4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	9103      	str	r1, [sp, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	bfbb      	ittet	lt
 800dd7c:	425b      	neglt	r3, r3
 800dd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800dd82:	9307      	strge	r3, [sp, #28]
 800dd84:	9307      	strlt	r3, [sp, #28]
 800dd86:	bfb8      	it	lt
 800dd88:	9204      	strlt	r2, [sp, #16]
 800dd8a:	7823      	ldrb	r3, [r4, #0]
 800dd8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd8e:	d10a      	bne.n	800dda6 <_vfiprintf_r+0x156>
 800dd90:	7863      	ldrb	r3, [r4, #1]
 800dd92:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd94:	d132      	bne.n	800ddfc <_vfiprintf_r+0x1ac>
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	1d1a      	adds	r2, r3, #4
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	9203      	str	r2, [sp, #12]
 800dd9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dda2:	3402      	adds	r4, #2
 800dda4:	9305      	str	r3, [sp, #20]
 800dda6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de7c <_vfiprintf_r+0x22c>
 800ddaa:	7821      	ldrb	r1, [r4, #0]
 800ddac:	2203      	movs	r2, #3
 800ddae:	4650      	mov	r0, sl
 800ddb0:	f7f2 fa2e 	bl	8000210 <memchr>
 800ddb4:	b138      	cbz	r0, 800ddc6 <_vfiprintf_r+0x176>
 800ddb6:	9b04      	ldr	r3, [sp, #16]
 800ddb8:	eba0 000a 	sub.w	r0, r0, sl
 800ddbc:	2240      	movs	r2, #64	@ 0x40
 800ddbe:	4082      	lsls	r2, r0
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	3401      	adds	r4, #1
 800ddc4:	9304      	str	r3, [sp, #16]
 800ddc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddca:	4829      	ldr	r0, [pc, #164]	@ (800de70 <_vfiprintf_r+0x220>)
 800ddcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ddd0:	2206      	movs	r2, #6
 800ddd2:	f7f2 fa1d 	bl	8000210 <memchr>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d03f      	beq.n	800de5a <_vfiprintf_r+0x20a>
 800ddda:	4b26      	ldr	r3, [pc, #152]	@ (800de74 <_vfiprintf_r+0x224>)
 800dddc:	bb1b      	cbnz	r3, 800de26 <_vfiprintf_r+0x1d6>
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	3307      	adds	r3, #7
 800dde2:	f023 0307 	bic.w	r3, r3, #7
 800dde6:	3308      	adds	r3, #8
 800dde8:	9303      	str	r3, [sp, #12]
 800ddea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddec:	443b      	add	r3, r7
 800ddee:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddf0:	e76a      	b.n	800dcc8 <_vfiprintf_r+0x78>
 800ddf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	e7a8      	b.n	800dd4e <_vfiprintf_r+0xfe>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	3401      	adds	r4, #1
 800de00:	9305      	str	r3, [sp, #20]
 800de02:	4619      	mov	r1, r3
 800de04:	f04f 0c0a 	mov.w	ip, #10
 800de08:	4620      	mov	r0, r4
 800de0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de0e:	3a30      	subs	r2, #48	@ 0x30
 800de10:	2a09      	cmp	r2, #9
 800de12:	d903      	bls.n	800de1c <_vfiprintf_r+0x1cc>
 800de14:	2b00      	cmp	r3, #0
 800de16:	d0c6      	beq.n	800dda6 <_vfiprintf_r+0x156>
 800de18:	9105      	str	r1, [sp, #20]
 800de1a:	e7c4      	b.n	800dda6 <_vfiprintf_r+0x156>
 800de1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de20:	4604      	mov	r4, r0
 800de22:	2301      	movs	r3, #1
 800de24:	e7f0      	b.n	800de08 <_vfiprintf_r+0x1b8>
 800de26:	ab03      	add	r3, sp, #12
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	462a      	mov	r2, r5
 800de2c:	4b12      	ldr	r3, [pc, #72]	@ (800de78 <_vfiprintf_r+0x228>)
 800de2e:	a904      	add	r1, sp, #16
 800de30:	4630      	mov	r0, r6
 800de32:	f3af 8000 	nop.w
 800de36:	4607      	mov	r7, r0
 800de38:	1c78      	adds	r0, r7, #1
 800de3a:	d1d6      	bne.n	800ddea <_vfiprintf_r+0x19a>
 800de3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de3e:	07d9      	lsls	r1, r3, #31
 800de40:	d405      	bmi.n	800de4e <_vfiprintf_r+0x1fe>
 800de42:	89ab      	ldrh	r3, [r5, #12]
 800de44:	059a      	lsls	r2, r3, #22
 800de46:	d402      	bmi.n	800de4e <_vfiprintf_r+0x1fe>
 800de48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de4a:	f7fe f99f 	bl	800c18c <__retarget_lock_release_recursive>
 800de4e:	89ab      	ldrh	r3, [r5, #12]
 800de50:	065b      	lsls	r3, r3, #25
 800de52:	f53f af1f 	bmi.w	800dc94 <_vfiprintf_r+0x44>
 800de56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de58:	e71e      	b.n	800dc98 <_vfiprintf_r+0x48>
 800de5a:	ab03      	add	r3, sp, #12
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	462a      	mov	r2, r5
 800de60:	4b05      	ldr	r3, [pc, #20]	@ (800de78 <_vfiprintf_r+0x228>)
 800de62:	a904      	add	r1, sp, #16
 800de64:	4630      	mov	r0, r6
 800de66:	f000 f879 	bl	800df5c <_printf_i>
 800de6a:	e7e4      	b.n	800de36 <_vfiprintf_r+0x1e6>
 800de6c:	0800f6a0 	.word	0x0800f6a0
 800de70:	0800f6aa 	.word	0x0800f6aa
 800de74:	00000000 	.word	0x00000000
 800de78:	0800dc2b 	.word	0x0800dc2b
 800de7c:	0800f6a6 	.word	0x0800f6a6

0800de80 <_printf_common>:
 800de80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de84:	4616      	mov	r6, r2
 800de86:	4698      	mov	r8, r3
 800de88:	688a      	ldr	r2, [r1, #8]
 800de8a:	690b      	ldr	r3, [r1, #16]
 800de8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de90:	4293      	cmp	r3, r2
 800de92:	bfb8      	it	lt
 800de94:	4613      	movlt	r3, r2
 800de96:	6033      	str	r3, [r6, #0]
 800de98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de9c:	4607      	mov	r7, r0
 800de9e:	460c      	mov	r4, r1
 800dea0:	b10a      	cbz	r2, 800dea6 <_printf_common+0x26>
 800dea2:	3301      	adds	r3, #1
 800dea4:	6033      	str	r3, [r6, #0]
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	0699      	lsls	r1, r3, #26
 800deaa:	bf42      	ittt	mi
 800deac:	6833      	ldrmi	r3, [r6, #0]
 800deae:	3302      	addmi	r3, #2
 800deb0:	6033      	strmi	r3, [r6, #0]
 800deb2:	6825      	ldr	r5, [r4, #0]
 800deb4:	f015 0506 	ands.w	r5, r5, #6
 800deb8:	d106      	bne.n	800dec8 <_printf_common+0x48>
 800deba:	f104 0a19 	add.w	sl, r4, #25
 800debe:	68e3      	ldr	r3, [r4, #12]
 800dec0:	6832      	ldr	r2, [r6, #0]
 800dec2:	1a9b      	subs	r3, r3, r2
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	dc26      	bgt.n	800df16 <_printf_common+0x96>
 800dec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800decc:	6822      	ldr	r2, [r4, #0]
 800dece:	3b00      	subs	r3, #0
 800ded0:	bf18      	it	ne
 800ded2:	2301      	movne	r3, #1
 800ded4:	0692      	lsls	r2, r2, #26
 800ded6:	d42b      	bmi.n	800df30 <_printf_common+0xb0>
 800ded8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dedc:	4641      	mov	r1, r8
 800dede:	4638      	mov	r0, r7
 800dee0:	47c8      	blx	r9
 800dee2:	3001      	adds	r0, #1
 800dee4:	d01e      	beq.n	800df24 <_printf_common+0xa4>
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	6922      	ldr	r2, [r4, #16]
 800deea:	f003 0306 	and.w	r3, r3, #6
 800deee:	2b04      	cmp	r3, #4
 800def0:	bf02      	ittt	eq
 800def2:	68e5      	ldreq	r5, [r4, #12]
 800def4:	6833      	ldreq	r3, [r6, #0]
 800def6:	1aed      	subeq	r5, r5, r3
 800def8:	68a3      	ldr	r3, [r4, #8]
 800defa:	bf0c      	ite	eq
 800defc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df00:	2500      	movne	r5, #0
 800df02:	4293      	cmp	r3, r2
 800df04:	bfc4      	itt	gt
 800df06:	1a9b      	subgt	r3, r3, r2
 800df08:	18ed      	addgt	r5, r5, r3
 800df0a:	2600      	movs	r6, #0
 800df0c:	341a      	adds	r4, #26
 800df0e:	42b5      	cmp	r5, r6
 800df10:	d11a      	bne.n	800df48 <_printf_common+0xc8>
 800df12:	2000      	movs	r0, #0
 800df14:	e008      	b.n	800df28 <_printf_common+0xa8>
 800df16:	2301      	movs	r3, #1
 800df18:	4652      	mov	r2, sl
 800df1a:	4641      	mov	r1, r8
 800df1c:	4638      	mov	r0, r7
 800df1e:	47c8      	blx	r9
 800df20:	3001      	adds	r0, #1
 800df22:	d103      	bne.n	800df2c <_printf_common+0xac>
 800df24:	f04f 30ff 	mov.w	r0, #4294967295
 800df28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2c:	3501      	adds	r5, #1
 800df2e:	e7c6      	b.n	800debe <_printf_common+0x3e>
 800df30:	18e1      	adds	r1, r4, r3
 800df32:	1c5a      	adds	r2, r3, #1
 800df34:	2030      	movs	r0, #48	@ 0x30
 800df36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df3a:	4422      	add	r2, r4
 800df3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df44:	3302      	adds	r3, #2
 800df46:	e7c7      	b.n	800ded8 <_printf_common+0x58>
 800df48:	2301      	movs	r3, #1
 800df4a:	4622      	mov	r2, r4
 800df4c:	4641      	mov	r1, r8
 800df4e:	4638      	mov	r0, r7
 800df50:	47c8      	blx	r9
 800df52:	3001      	adds	r0, #1
 800df54:	d0e6      	beq.n	800df24 <_printf_common+0xa4>
 800df56:	3601      	adds	r6, #1
 800df58:	e7d9      	b.n	800df0e <_printf_common+0x8e>
	...

0800df5c <_printf_i>:
 800df5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df60:	7e0f      	ldrb	r7, [r1, #24]
 800df62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df64:	2f78      	cmp	r7, #120	@ 0x78
 800df66:	4691      	mov	r9, r2
 800df68:	4680      	mov	r8, r0
 800df6a:	460c      	mov	r4, r1
 800df6c:	469a      	mov	sl, r3
 800df6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df72:	d807      	bhi.n	800df84 <_printf_i+0x28>
 800df74:	2f62      	cmp	r7, #98	@ 0x62
 800df76:	d80a      	bhi.n	800df8e <_printf_i+0x32>
 800df78:	2f00      	cmp	r7, #0
 800df7a:	f000 80d1 	beq.w	800e120 <_printf_i+0x1c4>
 800df7e:	2f58      	cmp	r7, #88	@ 0x58
 800df80:	f000 80b8 	beq.w	800e0f4 <_printf_i+0x198>
 800df84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df8c:	e03a      	b.n	800e004 <_printf_i+0xa8>
 800df8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df92:	2b15      	cmp	r3, #21
 800df94:	d8f6      	bhi.n	800df84 <_printf_i+0x28>
 800df96:	a101      	add	r1, pc, #4	@ (adr r1, 800df9c <_printf_i+0x40>)
 800df98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df9c:	0800dff5 	.word	0x0800dff5
 800dfa0:	0800e009 	.word	0x0800e009
 800dfa4:	0800df85 	.word	0x0800df85
 800dfa8:	0800df85 	.word	0x0800df85
 800dfac:	0800df85 	.word	0x0800df85
 800dfb0:	0800df85 	.word	0x0800df85
 800dfb4:	0800e009 	.word	0x0800e009
 800dfb8:	0800df85 	.word	0x0800df85
 800dfbc:	0800df85 	.word	0x0800df85
 800dfc0:	0800df85 	.word	0x0800df85
 800dfc4:	0800df85 	.word	0x0800df85
 800dfc8:	0800e107 	.word	0x0800e107
 800dfcc:	0800e033 	.word	0x0800e033
 800dfd0:	0800e0c1 	.word	0x0800e0c1
 800dfd4:	0800df85 	.word	0x0800df85
 800dfd8:	0800df85 	.word	0x0800df85
 800dfdc:	0800e129 	.word	0x0800e129
 800dfe0:	0800df85 	.word	0x0800df85
 800dfe4:	0800e033 	.word	0x0800e033
 800dfe8:	0800df85 	.word	0x0800df85
 800dfec:	0800df85 	.word	0x0800df85
 800dff0:	0800e0c9 	.word	0x0800e0c9
 800dff4:	6833      	ldr	r3, [r6, #0]
 800dff6:	1d1a      	adds	r2, r3, #4
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	6032      	str	r2, [r6, #0]
 800dffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e004:	2301      	movs	r3, #1
 800e006:	e09c      	b.n	800e142 <_printf_i+0x1e6>
 800e008:	6833      	ldr	r3, [r6, #0]
 800e00a:	6820      	ldr	r0, [r4, #0]
 800e00c:	1d19      	adds	r1, r3, #4
 800e00e:	6031      	str	r1, [r6, #0]
 800e010:	0606      	lsls	r6, r0, #24
 800e012:	d501      	bpl.n	800e018 <_printf_i+0xbc>
 800e014:	681d      	ldr	r5, [r3, #0]
 800e016:	e003      	b.n	800e020 <_printf_i+0xc4>
 800e018:	0645      	lsls	r5, r0, #25
 800e01a:	d5fb      	bpl.n	800e014 <_printf_i+0xb8>
 800e01c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e020:	2d00      	cmp	r5, #0
 800e022:	da03      	bge.n	800e02c <_printf_i+0xd0>
 800e024:	232d      	movs	r3, #45	@ 0x2d
 800e026:	426d      	negs	r5, r5
 800e028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e02c:	4858      	ldr	r0, [pc, #352]	@ (800e190 <_printf_i+0x234>)
 800e02e:	230a      	movs	r3, #10
 800e030:	e011      	b.n	800e056 <_printf_i+0xfa>
 800e032:	6821      	ldr	r1, [r4, #0]
 800e034:	6833      	ldr	r3, [r6, #0]
 800e036:	0608      	lsls	r0, r1, #24
 800e038:	f853 5b04 	ldr.w	r5, [r3], #4
 800e03c:	d402      	bmi.n	800e044 <_printf_i+0xe8>
 800e03e:	0649      	lsls	r1, r1, #25
 800e040:	bf48      	it	mi
 800e042:	b2ad      	uxthmi	r5, r5
 800e044:	2f6f      	cmp	r7, #111	@ 0x6f
 800e046:	4852      	ldr	r0, [pc, #328]	@ (800e190 <_printf_i+0x234>)
 800e048:	6033      	str	r3, [r6, #0]
 800e04a:	bf14      	ite	ne
 800e04c:	230a      	movne	r3, #10
 800e04e:	2308      	moveq	r3, #8
 800e050:	2100      	movs	r1, #0
 800e052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e056:	6866      	ldr	r6, [r4, #4]
 800e058:	60a6      	str	r6, [r4, #8]
 800e05a:	2e00      	cmp	r6, #0
 800e05c:	db05      	blt.n	800e06a <_printf_i+0x10e>
 800e05e:	6821      	ldr	r1, [r4, #0]
 800e060:	432e      	orrs	r6, r5
 800e062:	f021 0104 	bic.w	r1, r1, #4
 800e066:	6021      	str	r1, [r4, #0]
 800e068:	d04b      	beq.n	800e102 <_printf_i+0x1a6>
 800e06a:	4616      	mov	r6, r2
 800e06c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e070:	fb03 5711 	mls	r7, r3, r1, r5
 800e074:	5dc7      	ldrb	r7, [r0, r7]
 800e076:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e07a:	462f      	mov	r7, r5
 800e07c:	42bb      	cmp	r3, r7
 800e07e:	460d      	mov	r5, r1
 800e080:	d9f4      	bls.n	800e06c <_printf_i+0x110>
 800e082:	2b08      	cmp	r3, #8
 800e084:	d10b      	bne.n	800e09e <_printf_i+0x142>
 800e086:	6823      	ldr	r3, [r4, #0]
 800e088:	07df      	lsls	r7, r3, #31
 800e08a:	d508      	bpl.n	800e09e <_printf_i+0x142>
 800e08c:	6923      	ldr	r3, [r4, #16]
 800e08e:	6861      	ldr	r1, [r4, #4]
 800e090:	4299      	cmp	r1, r3
 800e092:	bfde      	ittt	le
 800e094:	2330      	movle	r3, #48	@ 0x30
 800e096:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e09a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e09e:	1b92      	subs	r2, r2, r6
 800e0a0:	6122      	str	r2, [r4, #16]
 800e0a2:	f8cd a000 	str.w	sl, [sp]
 800e0a6:	464b      	mov	r3, r9
 800e0a8:	aa03      	add	r2, sp, #12
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	f7ff fee7 	bl	800de80 <_printf_common>
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	d14a      	bne.n	800e14c <_printf_i+0x1f0>
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ba:	b004      	add	sp, #16
 800e0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c0:	6823      	ldr	r3, [r4, #0]
 800e0c2:	f043 0320 	orr.w	r3, r3, #32
 800e0c6:	6023      	str	r3, [r4, #0]
 800e0c8:	4832      	ldr	r0, [pc, #200]	@ (800e194 <_printf_i+0x238>)
 800e0ca:	2778      	movs	r7, #120	@ 0x78
 800e0cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	6831      	ldr	r1, [r6, #0]
 800e0d4:	061f      	lsls	r7, r3, #24
 800e0d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0da:	d402      	bmi.n	800e0e2 <_printf_i+0x186>
 800e0dc:	065f      	lsls	r7, r3, #25
 800e0de:	bf48      	it	mi
 800e0e0:	b2ad      	uxthmi	r5, r5
 800e0e2:	6031      	str	r1, [r6, #0]
 800e0e4:	07d9      	lsls	r1, r3, #31
 800e0e6:	bf44      	itt	mi
 800e0e8:	f043 0320 	orrmi.w	r3, r3, #32
 800e0ec:	6023      	strmi	r3, [r4, #0]
 800e0ee:	b11d      	cbz	r5, 800e0f8 <_printf_i+0x19c>
 800e0f0:	2310      	movs	r3, #16
 800e0f2:	e7ad      	b.n	800e050 <_printf_i+0xf4>
 800e0f4:	4826      	ldr	r0, [pc, #152]	@ (800e190 <_printf_i+0x234>)
 800e0f6:	e7e9      	b.n	800e0cc <_printf_i+0x170>
 800e0f8:	6823      	ldr	r3, [r4, #0]
 800e0fa:	f023 0320 	bic.w	r3, r3, #32
 800e0fe:	6023      	str	r3, [r4, #0]
 800e100:	e7f6      	b.n	800e0f0 <_printf_i+0x194>
 800e102:	4616      	mov	r6, r2
 800e104:	e7bd      	b.n	800e082 <_printf_i+0x126>
 800e106:	6833      	ldr	r3, [r6, #0]
 800e108:	6825      	ldr	r5, [r4, #0]
 800e10a:	6961      	ldr	r1, [r4, #20]
 800e10c:	1d18      	adds	r0, r3, #4
 800e10e:	6030      	str	r0, [r6, #0]
 800e110:	062e      	lsls	r6, r5, #24
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	d501      	bpl.n	800e11a <_printf_i+0x1be>
 800e116:	6019      	str	r1, [r3, #0]
 800e118:	e002      	b.n	800e120 <_printf_i+0x1c4>
 800e11a:	0668      	lsls	r0, r5, #25
 800e11c:	d5fb      	bpl.n	800e116 <_printf_i+0x1ba>
 800e11e:	8019      	strh	r1, [r3, #0]
 800e120:	2300      	movs	r3, #0
 800e122:	6123      	str	r3, [r4, #16]
 800e124:	4616      	mov	r6, r2
 800e126:	e7bc      	b.n	800e0a2 <_printf_i+0x146>
 800e128:	6833      	ldr	r3, [r6, #0]
 800e12a:	1d1a      	adds	r2, r3, #4
 800e12c:	6032      	str	r2, [r6, #0]
 800e12e:	681e      	ldr	r6, [r3, #0]
 800e130:	6862      	ldr	r2, [r4, #4]
 800e132:	2100      	movs	r1, #0
 800e134:	4630      	mov	r0, r6
 800e136:	f7f2 f86b 	bl	8000210 <memchr>
 800e13a:	b108      	cbz	r0, 800e140 <_printf_i+0x1e4>
 800e13c:	1b80      	subs	r0, r0, r6
 800e13e:	6060      	str	r0, [r4, #4]
 800e140:	6863      	ldr	r3, [r4, #4]
 800e142:	6123      	str	r3, [r4, #16]
 800e144:	2300      	movs	r3, #0
 800e146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e14a:	e7aa      	b.n	800e0a2 <_printf_i+0x146>
 800e14c:	6923      	ldr	r3, [r4, #16]
 800e14e:	4632      	mov	r2, r6
 800e150:	4649      	mov	r1, r9
 800e152:	4640      	mov	r0, r8
 800e154:	47d0      	blx	sl
 800e156:	3001      	adds	r0, #1
 800e158:	d0ad      	beq.n	800e0b6 <_printf_i+0x15a>
 800e15a:	6823      	ldr	r3, [r4, #0]
 800e15c:	079b      	lsls	r3, r3, #30
 800e15e:	d413      	bmi.n	800e188 <_printf_i+0x22c>
 800e160:	68e0      	ldr	r0, [r4, #12]
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	4298      	cmp	r0, r3
 800e166:	bfb8      	it	lt
 800e168:	4618      	movlt	r0, r3
 800e16a:	e7a6      	b.n	800e0ba <_printf_i+0x15e>
 800e16c:	2301      	movs	r3, #1
 800e16e:	4632      	mov	r2, r6
 800e170:	4649      	mov	r1, r9
 800e172:	4640      	mov	r0, r8
 800e174:	47d0      	blx	sl
 800e176:	3001      	adds	r0, #1
 800e178:	d09d      	beq.n	800e0b6 <_printf_i+0x15a>
 800e17a:	3501      	adds	r5, #1
 800e17c:	68e3      	ldr	r3, [r4, #12]
 800e17e:	9903      	ldr	r1, [sp, #12]
 800e180:	1a5b      	subs	r3, r3, r1
 800e182:	42ab      	cmp	r3, r5
 800e184:	dcf2      	bgt.n	800e16c <_printf_i+0x210>
 800e186:	e7eb      	b.n	800e160 <_printf_i+0x204>
 800e188:	2500      	movs	r5, #0
 800e18a:	f104 0619 	add.w	r6, r4, #25
 800e18e:	e7f5      	b.n	800e17c <_printf_i+0x220>
 800e190:	0800f6b1 	.word	0x0800f6b1
 800e194:	0800f6c2 	.word	0x0800f6c2

0800e198 <_scanf_chars>:
 800e198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	4615      	mov	r5, r2
 800e19e:	688a      	ldr	r2, [r1, #8]
 800e1a0:	4680      	mov	r8, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	b932      	cbnz	r2, 800e1b4 <_scanf_chars+0x1c>
 800e1a6:	698a      	ldr	r2, [r1, #24]
 800e1a8:	2a00      	cmp	r2, #0
 800e1aa:	bf14      	ite	ne
 800e1ac:	f04f 32ff 	movne.w	r2, #4294967295
 800e1b0:	2201      	moveq	r2, #1
 800e1b2:	608a      	str	r2, [r1, #8]
 800e1b4:	6822      	ldr	r2, [r4, #0]
 800e1b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e248 <_scanf_chars+0xb0>
 800e1ba:	06d1      	lsls	r1, r2, #27
 800e1bc:	bf5f      	itttt	pl
 800e1be:	681a      	ldrpl	r2, [r3, #0]
 800e1c0:	1d11      	addpl	r1, r2, #4
 800e1c2:	6019      	strpl	r1, [r3, #0]
 800e1c4:	6816      	ldrpl	r6, [r2, #0]
 800e1c6:	2700      	movs	r7, #0
 800e1c8:	69a0      	ldr	r0, [r4, #24]
 800e1ca:	b188      	cbz	r0, 800e1f0 <_scanf_chars+0x58>
 800e1cc:	2801      	cmp	r0, #1
 800e1ce:	d107      	bne.n	800e1e0 <_scanf_chars+0x48>
 800e1d0:	682b      	ldr	r3, [r5, #0]
 800e1d2:	781a      	ldrb	r2, [r3, #0]
 800e1d4:	6963      	ldr	r3, [r4, #20]
 800e1d6:	5c9b      	ldrb	r3, [r3, r2]
 800e1d8:	b953      	cbnz	r3, 800e1f0 <_scanf_chars+0x58>
 800e1da:	2f00      	cmp	r7, #0
 800e1dc:	d031      	beq.n	800e242 <_scanf_chars+0xaa>
 800e1de:	e022      	b.n	800e226 <_scanf_chars+0x8e>
 800e1e0:	2802      	cmp	r0, #2
 800e1e2:	d120      	bne.n	800e226 <_scanf_chars+0x8e>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e1ec:	071b      	lsls	r3, r3, #28
 800e1ee:	d41a      	bmi.n	800e226 <_scanf_chars+0x8e>
 800e1f0:	6823      	ldr	r3, [r4, #0]
 800e1f2:	06da      	lsls	r2, r3, #27
 800e1f4:	bf5e      	ittt	pl
 800e1f6:	682b      	ldrpl	r3, [r5, #0]
 800e1f8:	781b      	ldrbpl	r3, [r3, #0]
 800e1fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e1fe:	682a      	ldr	r2, [r5, #0]
 800e200:	686b      	ldr	r3, [r5, #4]
 800e202:	3201      	adds	r2, #1
 800e204:	602a      	str	r2, [r5, #0]
 800e206:	68a2      	ldr	r2, [r4, #8]
 800e208:	3b01      	subs	r3, #1
 800e20a:	3a01      	subs	r2, #1
 800e20c:	606b      	str	r3, [r5, #4]
 800e20e:	3701      	adds	r7, #1
 800e210:	60a2      	str	r2, [r4, #8]
 800e212:	b142      	cbz	r2, 800e226 <_scanf_chars+0x8e>
 800e214:	2b00      	cmp	r3, #0
 800e216:	dcd7      	bgt.n	800e1c8 <_scanf_chars+0x30>
 800e218:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e21c:	4629      	mov	r1, r5
 800e21e:	4640      	mov	r0, r8
 800e220:	4798      	blx	r3
 800e222:	2800      	cmp	r0, #0
 800e224:	d0d0      	beq.n	800e1c8 <_scanf_chars+0x30>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	f013 0310 	ands.w	r3, r3, #16
 800e22c:	d105      	bne.n	800e23a <_scanf_chars+0xa2>
 800e22e:	68e2      	ldr	r2, [r4, #12]
 800e230:	3201      	adds	r2, #1
 800e232:	60e2      	str	r2, [r4, #12]
 800e234:	69a2      	ldr	r2, [r4, #24]
 800e236:	b102      	cbz	r2, 800e23a <_scanf_chars+0xa2>
 800e238:	7033      	strb	r3, [r6, #0]
 800e23a:	6923      	ldr	r3, [r4, #16]
 800e23c:	443b      	add	r3, r7
 800e23e:	6123      	str	r3, [r4, #16]
 800e240:	2000      	movs	r0, #0
 800e242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e246:	bf00      	nop
 800e248:	0800f7b9 	.word	0x0800f7b9

0800e24c <_scanf_i>:
 800e24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e250:	4698      	mov	r8, r3
 800e252:	4b74      	ldr	r3, [pc, #464]	@ (800e424 <_scanf_i+0x1d8>)
 800e254:	460c      	mov	r4, r1
 800e256:	4682      	mov	sl, r0
 800e258:	4616      	mov	r6, r2
 800e25a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e25e:	b087      	sub	sp, #28
 800e260:	ab03      	add	r3, sp, #12
 800e262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e266:	4b70      	ldr	r3, [pc, #448]	@ (800e428 <_scanf_i+0x1dc>)
 800e268:	69a1      	ldr	r1, [r4, #24]
 800e26a:	4a70      	ldr	r2, [pc, #448]	@ (800e42c <_scanf_i+0x1e0>)
 800e26c:	2903      	cmp	r1, #3
 800e26e:	bf08      	it	eq
 800e270:	461a      	moveq	r2, r3
 800e272:	68a3      	ldr	r3, [r4, #8]
 800e274:	9201      	str	r2, [sp, #4]
 800e276:	1e5a      	subs	r2, r3, #1
 800e278:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e27c:	bf88      	it	hi
 800e27e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e282:	4627      	mov	r7, r4
 800e284:	bf82      	ittt	hi
 800e286:	eb03 0905 	addhi.w	r9, r3, r5
 800e28a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e28e:	60a3      	strhi	r3, [r4, #8]
 800e290:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e294:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e298:	bf98      	it	ls
 800e29a:	f04f 0900 	movls.w	r9, #0
 800e29e:	6023      	str	r3, [r4, #0]
 800e2a0:	463d      	mov	r5, r7
 800e2a2:	f04f 0b00 	mov.w	fp, #0
 800e2a6:	6831      	ldr	r1, [r6, #0]
 800e2a8:	ab03      	add	r3, sp, #12
 800e2aa:	7809      	ldrb	r1, [r1, #0]
 800e2ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e2b0:	2202      	movs	r2, #2
 800e2b2:	f7f1 ffad 	bl	8000210 <memchr>
 800e2b6:	b328      	cbz	r0, 800e304 <_scanf_i+0xb8>
 800e2b8:	f1bb 0f01 	cmp.w	fp, #1
 800e2bc:	d159      	bne.n	800e372 <_scanf_i+0x126>
 800e2be:	6862      	ldr	r2, [r4, #4]
 800e2c0:	b92a      	cbnz	r2, 800e2ce <_scanf_i+0x82>
 800e2c2:	6822      	ldr	r2, [r4, #0]
 800e2c4:	2108      	movs	r1, #8
 800e2c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2ca:	6061      	str	r1, [r4, #4]
 800e2cc:	6022      	str	r2, [r4, #0]
 800e2ce:	6822      	ldr	r2, [r4, #0]
 800e2d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e2d4:	6022      	str	r2, [r4, #0]
 800e2d6:	68a2      	ldr	r2, [r4, #8]
 800e2d8:	1e51      	subs	r1, r2, #1
 800e2da:	60a1      	str	r1, [r4, #8]
 800e2dc:	b192      	cbz	r2, 800e304 <_scanf_i+0xb8>
 800e2de:	6832      	ldr	r2, [r6, #0]
 800e2e0:	1c51      	adds	r1, r2, #1
 800e2e2:	6031      	str	r1, [r6, #0]
 800e2e4:	7812      	ldrb	r2, [r2, #0]
 800e2e6:	f805 2b01 	strb.w	r2, [r5], #1
 800e2ea:	6872      	ldr	r2, [r6, #4]
 800e2ec:	3a01      	subs	r2, #1
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	6072      	str	r2, [r6, #4]
 800e2f2:	dc07      	bgt.n	800e304 <_scanf_i+0xb8>
 800e2f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e2f8:	4631      	mov	r1, r6
 800e2fa:	4650      	mov	r0, sl
 800e2fc:	4790      	blx	r2
 800e2fe:	2800      	cmp	r0, #0
 800e300:	f040 8085 	bne.w	800e40e <_scanf_i+0x1c2>
 800e304:	f10b 0b01 	add.w	fp, fp, #1
 800e308:	f1bb 0f03 	cmp.w	fp, #3
 800e30c:	d1cb      	bne.n	800e2a6 <_scanf_i+0x5a>
 800e30e:	6863      	ldr	r3, [r4, #4]
 800e310:	b90b      	cbnz	r3, 800e316 <_scanf_i+0xca>
 800e312:	230a      	movs	r3, #10
 800e314:	6063      	str	r3, [r4, #4]
 800e316:	6863      	ldr	r3, [r4, #4]
 800e318:	4945      	ldr	r1, [pc, #276]	@ (800e430 <_scanf_i+0x1e4>)
 800e31a:	6960      	ldr	r0, [r4, #20]
 800e31c:	1ac9      	subs	r1, r1, r3
 800e31e:	f000 f9dd 	bl	800e6dc <__sccl>
 800e322:	f04f 0b00 	mov.w	fp, #0
 800e326:	68a3      	ldr	r3, [r4, #8]
 800e328:	6822      	ldr	r2, [r4, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d03d      	beq.n	800e3aa <_scanf_i+0x15e>
 800e32e:	6831      	ldr	r1, [r6, #0]
 800e330:	6960      	ldr	r0, [r4, #20]
 800e332:	f891 c000 	ldrb.w	ip, [r1]
 800e336:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d035      	beq.n	800e3aa <_scanf_i+0x15e>
 800e33e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e342:	d124      	bne.n	800e38e <_scanf_i+0x142>
 800e344:	0510      	lsls	r0, r2, #20
 800e346:	d522      	bpl.n	800e38e <_scanf_i+0x142>
 800e348:	f10b 0b01 	add.w	fp, fp, #1
 800e34c:	f1b9 0f00 	cmp.w	r9, #0
 800e350:	d003      	beq.n	800e35a <_scanf_i+0x10e>
 800e352:	3301      	adds	r3, #1
 800e354:	f109 39ff 	add.w	r9, r9, #4294967295
 800e358:	60a3      	str	r3, [r4, #8]
 800e35a:	6873      	ldr	r3, [r6, #4]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	2b00      	cmp	r3, #0
 800e360:	6073      	str	r3, [r6, #4]
 800e362:	dd1b      	ble.n	800e39c <_scanf_i+0x150>
 800e364:	6833      	ldr	r3, [r6, #0]
 800e366:	3301      	adds	r3, #1
 800e368:	6033      	str	r3, [r6, #0]
 800e36a:	68a3      	ldr	r3, [r4, #8]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	60a3      	str	r3, [r4, #8]
 800e370:	e7d9      	b.n	800e326 <_scanf_i+0xda>
 800e372:	f1bb 0f02 	cmp.w	fp, #2
 800e376:	d1ae      	bne.n	800e2d6 <_scanf_i+0x8a>
 800e378:	6822      	ldr	r2, [r4, #0]
 800e37a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e37e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e382:	d1c4      	bne.n	800e30e <_scanf_i+0xc2>
 800e384:	2110      	movs	r1, #16
 800e386:	6061      	str	r1, [r4, #4]
 800e388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e38c:	e7a2      	b.n	800e2d4 <_scanf_i+0x88>
 800e38e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e392:	6022      	str	r2, [r4, #0]
 800e394:	780b      	ldrb	r3, [r1, #0]
 800e396:	f805 3b01 	strb.w	r3, [r5], #1
 800e39a:	e7de      	b.n	800e35a <_scanf_i+0x10e>
 800e39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	4650      	mov	r0, sl
 800e3a4:	4798      	blx	r3
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d0df      	beq.n	800e36a <_scanf_i+0x11e>
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	05d9      	lsls	r1, r3, #23
 800e3ae:	d50d      	bpl.n	800e3cc <_scanf_i+0x180>
 800e3b0:	42bd      	cmp	r5, r7
 800e3b2:	d909      	bls.n	800e3c8 <_scanf_i+0x17c>
 800e3b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e3b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3bc:	4632      	mov	r2, r6
 800e3be:	4650      	mov	r0, sl
 800e3c0:	4798      	blx	r3
 800e3c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800e3c6:	464d      	mov	r5, r9
 800e3c8:	42bd      	cmp	r5, r7
 800e3ca:	d028      	beq.n	800e41e <_scanf_i+0x1d2>
 800e3cc:	6822      	ldr	r2, [r4, #0]
 800e3ce:	f012 0210 	ands.w	r2, r2, #16
 800e3d2:	d113      	bne.n	800e3fc <_scanf_i+0x1b0>
 800e3d4:	702a      	strb	r2, [r5, #0]
 800e3d6:	6863      	ldr	r3, [r4, #4]
 800e3d8:	9e01      	ldr	r6, [sp, #4]
 800e3da:	4639      	mov	r1, r7
 800e3dc:	4650      	mov	r0, sl
 800e3de:	47b0      	blx	r6
 800e3e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e3e4:	6821      	ldr	r1, [r4, #0]
 800e3e6:	1d1a      	adds	r2, r3, #4
 800e3e8:	f8c8 2000 	str.w	r2, [r8]
 800e3ec:	f011 0f20 	tst.w	r1, #32
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	d00f      	beq.n	800e414 <_scanf_i+0x1c8>
 800e3f4:	6018      	str	r0, [r3, #0]
 800e3f6:	68e3      	ldr	r3, [r4, #12]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	60e3      	str	r3, [r4, #12]
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	1bed      	subs	r5, r5, r7
 800e400:	445d      	add	r5, fp
 800e402:	442b      	add	r3, r5
 800e404:	6123      	str	r3, [r4, #16]
 800e406:	2000      	movs	r0, #0
 800e408:	b007      	add	sp, #28
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	f04f 0b00 	mov.w	fp, #0
 800e412:	e7ca      	b.n	800e3aa <_scanf_i+0x15e>
 800e414:	07ca      	lsls	r2, r1, #31
 800e416:	bf4c      	ite	mi
 800e418:	8018      	strhmi	r0, [r3, #0]
 800e41a:	6018      	strpl	r0, [r3, #0]
 800e41c:	e7eb      	b.n	800e3f6 <_scanf_i+0x1aa>
 800e41e:	2001      	movs	r0, #1
 800e420:	e7f2      	b.n	800e408 <_scanf_i+0x1bc>
 800e422:	bf00      	nop
 800e424:	0800f388 	.word	0x0800f388
 800e428:	0800ac3d 	.word	0x0800ac3d
 800e42c:	0800d57d 	.word	0x0800d57d
 800e430:	0800f6e3 	.word	0x0800f6e3

0800e434 <__sflush_r>:
 800e434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e43c:	0716      	lsls	r6, r2, #28
 800e43e:	4605      	mov	r5, r0
 800e440:	460c      	mov	r4, r1
 800e442:	d454      	bmi.n	800e4ee <__sflush_r+0xba>
 800e444:	684b      	ldr	r3, [r1, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	dc02      	bgt.n	800e450 <__sflush_r+0x1c>
 800e44a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	dd48      	ble.n	800e4e2 <__sflush_r+0xae>
 800e450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e452:	2e00      	cmp	r6, #0
 800e454:	d045      	beq.n	800e4e2 <__sflush_r+0xae>
 800e456:	2300      	movs	r3, #0
 800e458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e45c:	682f      	ldr	r7, [r5, #0]
 800e45e:	6a21      	ldr	r1, [r4, #32]
 800e460:	602b      	str	r3, [r5, #0]
 800e462:	d030      	beq.n	800e4c6 <__sflush_r+0x92>
 800e464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	0759      	lsls	r1, r3, #29
 800e46a:	d505      	bpl.n	800e478 <__sflush_r+0x44>
 800e46c:	6863      	ldr	r3, [r4, #4]
 800e46e:	1ad2      	subs	r2, r2, r3
 800e470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e472:	b10b      	cbz	r3, 800e478 <__sflush_r+0x44>
 800e474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e476:	1ad2      	subs	r2, r2, r3
 800e478:	2300      	movs	r3, #0
 800e47a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e47c:	6a21      	ldr	r1, [r4, #32]
 800e47e:	4628      	mov	r0, r5
 800e480:	47b0      	blx	r6
 800e482:	1c43      	adds	r3, r0, #1
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	d106      	bne.n	800e496 <__sflush_r+0x62>
 800e488:	6829      	ldr	r1, [r5, #0]
 800e48a:	291d      	cmp	r1, #29
 800e48c:	d82b      	bhi.n	800e4e6 <__sflush_r+0xb2>
 800e48e:	4a2a      	ldr	r2, [pc, #168]	@ (800e538 <__sflush_r+0x104>)
 800e490:	40ca      	lsrs	r2, r1
 800e492:	07d6      	lsls	r6, r2, #31
 800e494:	d527      	bpl.n	800e4e6 <__sflush_r+0xb2>
 800e496:	2200      	movs	r2, #0
 800e498:	6062      	str	r2, [r4, #4]
 800e49a:	04d9      	lsls	r1, r3, #19
 800e49c:	6922      	ldr	r2, [r4, #16]
 800e49e:	6022      	str	r2, [r4, #0]
 800e4a0:	d504      	bpl.n	800e4ac <__sflush_r+0x78>
 800e4a2:	1c42      	adds	r2, r0, #1
 800e4a4:	d101      	bne.n	800e4aa <__sflush_r+0x76>
 800e4a6:	682b      	ldr	r3, [r5, #0]
 800e4a8:	b903      	cbnz	r3, 800e4ac <__sflush_r+0x78>
 800e4aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ae:	602f      	str	r7, [r5, #0]
 800e4b0:	b1b9      	cbz	r1, 800e4e2 <__sflush_r+0xae>
 800e4b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4b6:	4299      	cmp	r1, r3
 800e4b8:	d002      	beq.n	800e4c0 <__sflush_r+0x8c>
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7fd feae 	bl	800c21c <_free_r>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4c4:	e00d      	b.n	800e4e2 <__sflush_r+0xae>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b0      	blx	r6
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	1c50      	adds	r0, r2, #1
 800e4d0:	d1c9      	bne.n	800e466 <__sflush_r+0x32>
 800e4d2:	682b      	ldr	r3, [r5, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d0c6      	beq.n	800e466 <__sflush_r+0x32>
 800e4d8:	2b1d      	cmp	r3, #29
 800e4da:	d001      	beq.n	800e4e0 <__sflush_r+0xac>
 800e4dc:	2b16      	cmp	r3, #22
 800e4de:	d11e      	bne.n	800e51e <__sflush_r+0xea>
 800e4e0:	602f      	str	r7, [r5, #0]
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	e022      	b.n	800e52c <__sflush_r+0xf8>
 800e4e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ea:	b21b      	sxth	r3, r3
 800e4ec:	e01b      	b.n	800e526 <__sflush_r+0xf2>
 800e4ee:	690f      	ldr	r7, [r1, #16]
 800e4f0:	2f00      	cmp	r7, #0
 800e4f2:	d0f6      	beq.n	800e4e2 <__sflush_r+0xae>
 800e4f4:	0793      	lsls	r3, r2, #30
 800e4f6:	680e      	ldr	r6, [r1, #0]
 800e4f8:	bf08      	it	eq
 800e4fa:	694b      	ldreq	r3, [r1, #20]
 800e4fc:	600f      	str	r7, [r1, #0]
 800e4fe:	bf18      	it	ne
 800e500:	2300      	movne	r3, #0
 800e502:	eba6 0807 	sub.w	r8, r6, r7
 800e506:	608b      	str	r3, [r1, #8]
 800e508:	f1b8 0f00 	cmp.w	r8, #0
 800e50c:	dde9      	ble.n	800e4e2 <__sflush_r+0xae>
 800e50e:	6a21      	ldr	r1, [r4, #32]
 800e510:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e512:	4643      	mov	r3, r8
 800e514:	463a      	mov	r2, r7
 800e516:	4628      	mov	r0, r5
 800e518:	47b0      	blx	r6
 800e51a:	2800      	cmp	r0, #0
 800e51c:	dc08      	bgt.n	800e530 <__sflush_r+0xfc>
 800e51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	f04f 30ff 	mov.w	r0, #4294967295
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	4407      	add	r7, r0
 800e532:	eba8 0800 	sub.w	r8, r8, r0
 800e536:	e7e7      	b.n	800e508 <__sflush_r+0xd4>
 800e538:	20400001 	.word	0x20400001

0800e53c <_fflush_r>:
 800e53c:	b538      	push	{r3, r4, r5, lr}
 800e53e:	690b      	ldr	r3, [r1, #16]
 800e540:	4605      	mov	r5, r0
 800e542:	460c      	mov	r4, r1
 800e544:	b913      	cbnz	r3, 800e54c <_fflush_r+0x10>
 800e546:	2500      	movs	r5, #0
 800e548:	4628      	mov	r0, r5
 800e54a:	bd38      	pop	{r3, r4, r5, pc}
 800e54c:	b118      	cbz	r0, 800e556 <_fflush_r+0x1a>
 800e54e:	6a03      	ldr	r3, [r0, #32]
 800e550:	b90b      	cbnz	r3, 800e556 <_fflush_r+0x1a>
 800e552:	f7fc fc0b 	bl	800ad6c <__sinit>
 800e556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0f3      	beq.n	800e546 <_fflush_r+0xa>
 800e55e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e560:	07d0      	lsls	r0, r2, #31
 800e562:	d404      	bmi.n	800e56e <_fflush_r+0x32>
 800e564:	0599      	lsls	r1, r3, #22
 800e566:	d402      	bmi.n	800e56e <_fflush_r+0x32>
 800e568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e56a:	f7fd fe0d 	bl	800c188 <__retarget_lock_acquire_recursive>
 800e56e:	4628      	mov	r0, r5
 800e570:	4621      	mov	r1, r4
 800e572:	f7ff ff5f 	bl	800e434 <__sflush_r>
 800e576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e578:	07da      	lsls	r2, r3, #31
 800e57a:	4605      	mov	r5, r0
 800e57c:	d4e4      	bmi.n	800e548 <_fflush_r+0xc>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	059b      	lsls	r3, r3, #22
 800e582:	d4e1      	bmi.n	800e548 <_fflush_r+0xc>
 800e584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e586:	f7fd fe01 	bl	800c18c <__retarget_lock_release_recursive>
 800e58a:	e7dd      	b.n	800e548 <_fflush_r+0xc>

0800e58c <fiprintf>:
 800e58c:	b40e      	push	{r1, r2, r3}
 800e58e:	b503      	push	{r0, r1, lr}
 800e590:	4601      	mov	r1, r0
 800e592:	ab03      	add	r3, sp, #12
 800e594:	4805      	ldr	r0, [pc, #20]	@ (800e5ac <fiprintf+0x20>)
 800e596:	f853 2b04 	ldr.w	r2, [r3], #4
 800e59a:	6800      	ldr	r0, [r0, #0]
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	f7ff fb57 	bl	800dc50 <_vfiprintf_r>
 800e5a2:	b002      	add	sp, #8
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b003      	add	sp, #12
 800e5aa:	4770      	bx	lr
 800e5ac:	200001a0 	.word	0x200001a0

0800e5b0 <__swhatbuf_r>:
 800e5b0:	b570      	push	{r4, r5, r6, lr}
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b8:	2900      	cmp	r1, #0
 800e5ba:	b096      	sub	sp, #88	@ 0x58
 800e5bc:	4615      	mov	r5, r2
 800e5be:	461e      	mov	r6, r3
 800e5c0:	da0d      	bge.n	800e5de <__swhatbuf_r+0x2e>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5c8:	f04f 0100 	mov.w	r1, #0
 800e5cc:	bf14      	ite	ne
 800e5ce:	2340      	movne	r3, #64	@ 0x40
 800e5d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	6031      	str	r1, [r6, #0]
 800e5d8:	602b      	str	r3, [r5, #0]
 800e5da:	b016      	add	sp, #88	@ 0x58
 800e5dc:	bd70      	pop	{r4, r5, r6, pc}
 800e5de:	466a      	mov	r2, sp
 800e5e0:	f000 f9e2 	bl	800e9a8 <_fstat_r>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dbec      	blt.n	800e5c2 <__swhatbuf_r+0x12>
 800e5e8:	9901      	ldr	r1, [sp, #4]
 800e5ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5f2:	4259      	negs	r1, r3
 800e5f4:	4159      	adcs	r1, r3
 800e5f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5fa:	e7eb      	b.n	800e5d4 <__swhatbuf_r+0x24>

0800e5fc <__smakebuf_r>:
 800e5fc:	898b      	ldrh	r3, [r1, #12]
 800e5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e600:	079d      	lsls	r5, r3, #30
 800e602:	4606      	mov	r6, r0
 800e604:	460c      	mov	r4, r1
 800e606:	d507      	bpl.n	800e618 <__smakebuf_r+0x1c>
 800e608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	6123      	str	r3, [r4, #16]
 800e610:	2301      	movs	r3, #1
 800e612:	6163      	str	r3, [r4, #20]
 800e614:	b003      	add	sp, #12
 800e616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e618:	ab01      	add	r3, sp, #4
 800e61a:	466a      	mov	r2, sp
 800e61c:	f7ff ffc8 	bl	800e5b0 <__swhatbuf_r>
 800e620:	9f00      	ldr	r7, [sp, #0]
 800e622:	4605      	mov	r5, r0
 800e624:	4639      	mov	r1, r7
 800e626:	4630      	mov	r0, r6
 800e628:	f7fe f9f2 	bl	800ca10 <_malloc_r>
 800e62c:	b948      	cbnz	r0, 800e642 <__smakebuf_r+0x46>
 800e62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e632:	059a      	lsls	r2, r3, #22
 800e634:	d4ee      	bmi.n	800e614 <__smakebuf_r+0x18>
 800e636:	f023 0303 	bic.w	r3, r3, #3
 800e63a:	f043 0302 	orr.w	r3, r3, #2
 800e63e:	81a3      	strh	r3, [r4, #12]
 800e640:	e7e2      	b.n	800e608 <__smakebuf_r+0xc>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	6020      	str	r0, [r4, #0]
 800e646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e64a:	81a3      	strh	r3, [r4, #12]
 800e64c:	9b01      	ldr	r3, [sp, #4]
 800e64e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e652:	b15b      	cbz	r3, 800e66c <__smakebuf_r+0x70>
 800e654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e658:	4630      	mov	r0, r6
 800e65a:	f000 f9b7 	bl	800e9cc <_isatty_r>
 800e65e:	b128      	cbz	r0, 800e66c <__smakebuf_r+0x70>
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	f023 0303 	bic.w	r3, r3, #3
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	431d      	orrs	r5, r3
 800e670:	81a5      	strh	r5, [r4, #12]
 800e672:	e7cf      	b.n	800e614 <__smakebuf_r+0x18>

0800e674 <_putc_r>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	460d      	mov	r5, r1
 800e678:	4614      	mov	r4, r2
 800e67a:	4606      	mov	r6, r0
 800e67c:	b118      	cbz	r0, 800e686 <_putc_r+0x12>
 800e67e:	6a03      	ldr	r3, [r0, #32]
 800e680:	b90b      	cbnz	r3, 800e686 <_putc_r+0x12>
 800e682:	f7fc fb73 	bl	800ad6c <__sinit>
 800e686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e688:	07d8      	lsls	r0, r3, #31
 800e68a:	d405      	bmi.n	800e698 <_putc_r+0x24>
 800e68c:	89a3      	ldrh	r3, [r4, #12]
 800e68e:	0599      	lsls	r1, r3, #22
 800e690:	d402      	bmi.n	800e698 <_putc_r+0x24>
 800e692:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e694:	f7fd fd78 	bl	800c188 <__retarget_lock_acquire_recursive>
 800e698:	68a3      	ldr	r3, [r4, #8]
 800e69a:	3b01      	subs	r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	60a3      	str	r3, [r4, #8]
 800e6a0:	da05      	bge.n	800e6ae <_putc_r+0x3a>
 800e6a2:	69a2      	ldr	r2, [r4, #24]
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	db12      	blt.n	800e6ce <_putc_r+0x5a>
 800e6a8:	b2eb      	uxtb	r3, r5
 800e6aa:	2b0a      	cmp	r3, #10
 800e6ac:	d00f      	beq.n	800e6ce <_putc_r+0x5a>
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	1c5a      	adds	r2, r3, #1
 800e6b2:	6022      	str	r2, [r4, #0]
 800e6b4:	701d      	strb	r5, [r3, #0]
 800e6b6:	b2ed      	uxtb	r5, r5
 800e6b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6ba:	07da      	lsls	r2, r3, #31
 800e6bc:	d405      	bmi.n	800e6ca <_putc_r+0x56>
 800e6be:	89a3      	ldrh	r3, [r4, #12]
 800e6c0:	059b      	lsls	r3, r3, #22
 800e6c2:	d402      	bmi.n	800e6ca <_putc_r+0x56>
 800e6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6c6:	f7fd fd61 	bl	800c18c <__retarget_lock_release_recursive>
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	bd70      	pop	{r4, r5, r6, pc}
 800e6ce:	4629      	mov	r1, r5
 800e6d0:	4622      	mov	r2, r4
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7fc fcc1 	bl	800b05a <__swbuf_r>
 800e6d8:	4605      	mov	r5, r0
 800e6da:	e7ed      	b.n	800e6b8 <_putc_r+0x44>

0800e6dc <__sccl>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	780b      	ldrb	r3, [r1, #0]
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	2b5e      	cmp	r3, #94	@ 0x5e
 800e6e4:	bf0b      	itete	eq
 800e6e6:	784b      	ldrbeq	r3, [r1, #1]
 800e6e8:	1c4a      	addne	r2, r1, #1
 800e6ea:	1c8a      	addeq	r2, r1, #2
 800e6ec:	2100      	movne	r1, #0
 800e6ee:	bf08      	it	eq
 800e6f0:	2101      	moveq	r1, #1
 800e6f2:	3801      	subs	r0, #1
 800e6f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e6f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e6fc:	42a8      	cmp	r0, r5
 800e6fe:	d1fb      	bne.n	800e6f8 <__sccl+0x1c>
 800e700:	b90b      	cbnz	r3, 800e706 <__sccl+0x2a>
 800e702:	1e50      	subs	r0, r2, #1
 800e704:	bd70      	pop	{r4, r5, r6, pc}
 800e706:	f081 0101 	eor.w	r1, r1, #1
 800e70a:	54e1      	strb	r1, [r4, r3]
 800e70c:	4610      	mov	r0, r2
 800e70e:	4602      	mov	r2, r0
 800e710:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e714:	2d2d      	cmp	r5, #45	@ 0x2d
 800e716:	d005      	beq.n	800e724 <__sccl+0x48>
 800e718:	2d5d      	cmp	r5, #93	@ 0x5d
 800e71a:	d016      	beq.n	800e74a <__sccl+0x6e>
 800e71c:	2d00      	cmp	r5, #0
 800e71e:	d0f1      	beq.n	800e704 <__sccl+0x28>
 800e720:	462b      	mov	r3, r5
 800e722:	e7f2      	b.n	800e70a <__sccl+0x2e>
 800e724:	7846      	ldrb	r6, [r0, #1]
 800e726:	2e5d      	cmp	r6, #93	@ 0x5d
 800e728:	d0fa      	beq.n	800e720 <__sccl+0x44>
 800e72a:	42b3      	cmp	r3, r6
 800e72c:	dcf8      	bgt.n	800e720 <__sccl+0x44>
 800e72e:	3002      	adds	r0, #2
 800e730:	461a      	mov	r2, r3
 800e732:	3201      	adds	r2, #1
 800e734:	4296      	cmp	r6, r2
 800e736:	54a1      	strb	r1, [r4, r2]
 800e738:	dcfb      	bgt.n	800e732 <__sccl+0x56>
 800e73a:	1af2      	subs	r2, r6, r3
 800e73c:	3a01      	subs	r2, #1
 800e73e:	1c5d      	adds	r5, r3, #1
 800e740:	42b3      	cmp	r3, r6
 800e742:	bfa8      	it	ge
 800e744:	2200      	movge	r2, #0
 800e746:	18ab      	adds	r3, r5, r2
 800e748:	e7e1      	b.n	800e70e <__sccl+0x32>
 800e74a:	4610      	mov	r0, r2
 800e74c:	e7da      	b.n	800e704 <__sccl+0x28>

0800e74e <__submore>:
 800e74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e752:	460c      	mov	r4, r1
 800e754:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e756:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e75a:	4299      	cmp	r1, r3
 800e75c:	d11d      	bne.n	800e79a <__submore+0x4c>
 800e75e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e762:	f7fe f955 	bl	800ca10 <_malloc_r>
 800e766:	b918      	cbnz	r0, 800e770 <__submore+0x22>
 800e768:	f04f 30ff 	mov.w	r0, #4294967295
 800e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e774:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e776:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e77a:	6360      	str	r0, [r4, #52]	@ 0x34
 800e77c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e780:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e784:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e788:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e78c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e790:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e794:	6020      	str	r0, [r4, #0]
 800e796:	2000      	movs	r0, #0
 800e798:	e7e8      	b.n	800e76c <__submore+0x1e>
 800e79a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e79c:	0077      	lsls	r7, r6, #1
 800e79e:	463a      	mov	r2, r7
 800e7a0:	f000 f95c 	bl	800ea5c <_realloc_r>
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d0de      	beq.n	800e768 <__submore+0x1a>
 800e7aa:	eb00 0806 	add.w	r8, r0, r6
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	4632      	mov	r2, r6
 800e7b2:	4640      	mov	r0, r8
 800e7b4:	f7fd fcf3 	bl	800c19e <memcpy>
 800e7b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e7bc:	f8c4 8000 	str.w	r8, [r4]
 800e7c0:	e7e9      	b.n	800e796 <__submore+0x48>
	...

0800e7c4 <asctime>:
 800e7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800e7fc <asctime+0x38>)
 800e7c6:	b570      	push	{r4, r5, r6, lr}
 800e7c8:	681d      	ldr	r5, [r3, #0]
 800e7ca:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	b976      	cbnz	r6, 800e7ee <asctime+0x2a>
 800e7d0:	201a      	movs	r0, #26
 800e7d2:	f7fe f8eb 	bl	800c9ac <malloc>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	63a8      	str	r0, [r5, #56]	@ 0x38
 800e7da:	b920      	cbnz	r0, 800e7e6 <asctime+0x22>
 800e7dc:	4b08      	ldr	r3, [pc, #32]	@ (800e800 <asctime+0x3c>)
 800e7de:	4809      	ldr	r0, [pc, #36]	@ (800e804 <asctime+0x40>)
 800e7e0:	213b      	movs	r1, #59	@ 0x3b
 800e7e2:	f7fd fcf5 	bl	800c1d0 <__assert_func>
 800e7e6:	221a      	movs	r2, #26
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	f7fc fce5 	bl	800b1b8 <memset>
 800e7ee:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7f6:	f000 b807 	b.w	800e808 <asctime_r>
 800e7fa:	bf00      	nop
 800e7fc:	200001a0 	.word	0x200001a0
 800e800:	0800f47a 	.word	0x0800f47a
 800e804:	0800f6ee 	.word	0x0800f6ee

0800e808 <asctime_r>:
 800e808:	b510      	push	{r4, lr}
 800e80a:	460c      	mov	r4, r1
 800e80c:	6941      	ldr	r1, [r0, #20]
 800e80e:	6903      	ldr	r3, [r0, #16]
 800e810:	6982      	ldr	r2, [r0, #24]
 800e812:	b086      	sub	sp, #24
 800e814:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 800e818:	9104      	str	r1, [sp, #16]
 800e81a:	6801      	ldr	r1, [r0, #0]
 800e81c:	9103      	str	r1, [sp, #12]
 800e81e:	6841      	ldr	r1, [r0, #4]
 800e820:	9102      	str	r1, [sp, #8]
 800e822:	6881      	ldr	r1, [r0, #8]
 800e824:	9101      	str	r1, [sp, #4]
 800e826:	68c1      	ldr	r1, [r0, #12]
 800e828:	9100      	str	r1, [sp, #0]
 800e82a:	4907      	ldr	r1, [pc, #28]	@ (800e848 <asctime_r+0x40>)
 800e82c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e830:	440b      	add	r3, r1
 800e832:	4906      	ldr	r1, [pc, #24]	@ (800e84c <asctime_r+0x44>)
 800e834:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e838:	440a      	add	r2, r1
 800e83a:	4620      	mov	r0, r4
 800e83c:	4904      	ldr	r1, [pc, #16]	@ (800e850 <asctime_r+0x48>)
 800e83e:	f7fc fb79 	bl	800af34 <siprintf>
 800e842:	4620      	mov	r0, r4
 800e844:	b006      	add	sp, #24
 800e846:	bd10      	pop	{r4, pc}
 800e848:	0800fa78 	.word	0x0800fa78
 800e84c:	0800fa9c 	.word	0x0800fa9c
 800e850:	0800f747 	.word	0x0800f747

0800e854 <__gettzinfo>:
 800e854:	4800      	ldr	r0, [pc, #0]	@ (800e858 <__gettzinfo+0x4>)
 800e856:	4770      	bx	lr
 800e858:	200001f0 	.word	0x200001f0

0800e85c <gmtime_r>:
 800e85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e860:	4a4d      	ldr	r2, [pc, #308]	@ (800e998 <gmtime_r+0x13c>)
 800e862:	460c      	mov	r4, r1
 800e864:	2300      	movs	r3, #0
 800e866:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e86a:	f7f2 f9e7 	bl	8000c3c <__aeabi_ldivmod>
 800e86e:	2a00      	cmp	r2, #0
 800e870:	bfbc      	itt	lt
 800e872:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800e876:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800e87a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800e87e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800e882:	fbb2 f3f1 	udiv	r3, r2, r1
 800e886:	fb01 2213 	mls	r2, r1, r3, r2
 800e88a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800e88e:	bfac      	ite	ge
 800e890:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800e894:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800e898:	60a3      	str	r3, [r4, #8]
 800e89a:	fbb2 f3f1 	udiv	r3, r2, r1
 800e89e:	fb01 2213 	mls	r2, r1, r3, r2
 800e8a2:	6063      	str	r3, [r4, #4]
 800e8a4:	6022      	str	r2, [r4, #0]
 800e8a6:	1cc3      	adds	r3, r0, #3
 800e8a8:	2207      	movs	r2, #7
 800e8aa:	fb93 f2f2 	sdiv	r2, r3, r2
 800e8ae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	4939      	ldr	r1, [pc, #228]	@ (800e99c <gmtime_r+0x140>)
 800e8b6:	d555      	bpl.n	800e964 <gmtime_r+0x108>
 800e8b8:	3307      	adds	r3, #7
 800e8ba:	61a3      	str	r3, [r4, #24]
 800e8bc:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 800e8c0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800e8c4:	fb93 f1f1 	sdiv	r1, r3, r1
 800e8c8:	4b35      	ldr	r3, [pc, #212]	@ (800e9a0 <gmtime_r+0x144>)
 800e8ca:	fb03 0001 	mla	r0, r3, r1, r0
 800e8ce:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800e8d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800e8d6:	4403      	add	r3, r0
 800e8d8:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800e8dc:	fbb0 f2fc 	udiv	r2, r0, ip
 800e8e0:	1a9b      	subs	r3, r3, r2
 800e8e2:	f240 176d 	movw	r7, #365	@ 0x16d
 800e8e6:	4a2f      	ldr	r2, [pc, #188]	@ (800e9a4 <gmtime_r+0x148>)
 800e8e8:	fbb0 f2f2 	udiv	r2, r0, r2
 800e8ec:	2664      	movs	r6, #100	@ 0x64
 800e8ee:	1a9b      	subs	r3, r3, r2
 800e8f0:	fbb3 f2f7 	udiv	r2, r3, r7
 800e8f4:	fbb3 f3fc 	udiv	r3, r3, ip
 800e8f8:	fbb2 f5f6 	udiv	r5, r2, r6
 800e8fc:	1aeb      	subs	r3, r5, r3
 800e8fe:	4403      	add	r3, r0
 800e900:	fb07 3312 	mls	r3, r7, r2, r3
 800e904:	2099      	movs	r0, #153	@ 0x99
 800e906:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800e90a:	3702      	adds	r7, #2
 800e90c:	f103 0e01 	add.w	lr, r3, #1
 800e910:	fbb7 fcf0 	udiv	ip, r7, r0
 800e914:	fb00 f00c 	mul.w	r0, r0, ip
 800e918:	3002      	adds	r0, #2
 800e91a:	f04f 0805 	mov.w	r8, #5
 800e91e:	fbb0 f0f8 	udiv	r0, r0, r8
 800e922:	ebae 0000 	sub.w	r0, lr, r0
 800e926:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800e92a:	4577      	cmp	r7, lr
 800e92c:	bf8c      	ite	hi
 800e92e:	f06f 0709 	mvnhi.w	r7, #9
 800e932:	2702      	movls	r7, #2
 800e934:	4467      	add	r7, ip
 800e936:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800e93a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e93e:	2f01      	cmp	r7, #1
 800e940:	bf98      	it	ls
 800e942:	3101      	addls	r1, #1
 800e944:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800e948:	d312      	bcc.n	800e970 <gmtime_r+0x114>
 800e94a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e94e:	61e3      	str	r3, [r4, #28]
 800e950:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800e954:	2300      	movs	r3, #0
 800e956:	60e0      	str	r0, [r4, #12]
 800e958:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800e95c:	6223      	str	r3, [r4, #32]
 800e95e:	4620      	mov	r0, r4
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e964:	2800      	cmp	r0, #0
 800e966:	61a3      	str	r3, [r4, #24]
 800e968:	dba8      	blt.n	800e8bc <gmtime_r+0x60>
 800e96a:	fb90 f1f1 	sdiv	r1, r0, r1
 800e96e:	e7ab      	b.n	800e8c8 <gmtime_r+0x6c>
 800e970:	f012 0f03 	tst.w	r2, #3
 800e974:	d102      	bne.n	800e97c <gmtime_r+0x120>
 800e976:	fb06 2515 	mls	r5, r6, r5, r2
 800e97a:	b95d      	cbnz	r5, 800e994 <gmtime_r+0x138>
 800e97c:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800e980:	fbb2 f6f5 	udiv	r6, r2, r5
 800e984:	fb05 2216 	mls	r2, r5, r6, r2
 800e988:	fab2 f282 	clz	r2, r2
 800e98c:	0952      	lsrs	r2, r2, #5
 800e98e:	333b      	adds	r3, #59	@ 0x3b
 800e990:	4413      	add	r3, r2
 800e992:	e7dc      	b.n	800e94e <gmtime_r+0xf2>
 800e994:	2201      	movs	r2, #1
 800e996:	e7fa      	b.n	800e98e <gmtime_r+0x132>
 800e998:	00015180 	.word	0x00015180
 800e99c:	00023ab1 	.word	0x00023ab1
 800e9a0:	fffdc54f 	.word	0xfffdc54f
 800e9a4:	00023ab0 	.word	0x00023ab0

0800e9a8 <_fstat_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d07      	ldr	r5, [pc, #28]	@ (800e9c8 <_fstat_r+0x20>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	602b      	str	r3, [r5, #0]
 800e9b6:	f7f4 fc6f 	bl	8003298 <_fstat>
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	d102      	bne.n	800e9c4 <_fstat_r+0x1c>
 800e9be:	682b      	ldr	r3, [r5, #0]
 800e9c0:	b103      	cbz	r3, 800e9c4 <_fstat_r+0x1c>
 800e9c2:	6023      	str	r3, [r4, #0]
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20006efc 	.word	0x20006efc

0800e9cc <_isatty_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d06      	ldr	r5, [pc, #24]	@ (800e9e8 <_isatty_r+0x1c>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	602b      	str	r3, [r5, #0]
 800e9d8:	f7f4 fc6e 	bl	80032b8 <_isatty>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_isatty_r+0x1a>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_isatty_r+0x1a>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	20006efc 	.word	0x20006efc

0800e9ec <_sbrk_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d06      	ldr	r5, [pc, #24]	@ (800ea08 <_sbrk_r+0x1c>)
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	602b      	str	r3, [r5, #0]
 800e9f8:	f7f4 fc8c 	bl	8003314 <_sbrk>
 800e9fc:	1c43      	adds	r3, r0, #1
 800e9fe:	d102      	bne.n	800ea06 <_sbrk_r+0x1a>
 800ea00:	682b      	ldr	r3, [r5, #0]
 800ea02:	b103      	cbz	r3, 800ea06 <_sbrk_r+0x1a>
 800ea04:	6023      	str	r3, [r4, #0]
 800ea06:	bd38      	pop	{r3, r4, r5, pc}
 800ea08:	20006efc 	.word	0x20006efc

0800ea0c <abort>:
 800ea0c:	b508      	push	{r3, lr}
 800ea0e:	2006      	movs	r0, #6
 800ea10:	f000 f87a 	bl	800eb08 <raise>
 800ea14:	2001      	movs	r0, #1
 800ea16:	f7f4 fbef 	bl	80031f8 <_exit>

0800ea1a <_calloc_r>:
 800ea1a:	b570      	push	{r4, r5, r6, lr}
 800ea1c:	fba1 5402 	umull	r5, r4, r1, r2
 800ea20:	b934      	cbnz	r4, 800ea30 <_calloc_r+0x16>
 800ea22:	4629      	mov	r1, r5
 800ea24:	f7fd fff4 	bl	800ca10 <_malloc_r>
 800ea28:	4606      	mov	r6, r0
 800ea2a:	b928      	cbnz	r0, 800ea38 <_calloc_r+0x1e>
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	220c      	movs	r2, #12
 800ea32:	6002      	str	r2, [r0, #0]
 800ea34:	2600      	movs	r6, #0
 800ea36:	e7f9      	b.n	800ea2c <_calloc_r+0x12>
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	f7fc fbbc 	bl	800b1b8 <memset>
 800ea40:	e7f4      	b.n	800ea2c <_calloc_r+0x12>
	...

0800ea44 <__env_lock>:
 800ea44:	4801      	ldr	r0, [pc, #4]	@ (800ea4c <__env_lock+0x8>)
 800ea46:	f7fd bb9f 	b.w	800c188 <__retarget_lock_acquire_recursive>
 800ea4a:	bf00      	nop
 800ea4c:	20006f01 	.word	0x20006f01

0800ea50 <__env_unlock>:
 800ea50:	4801      	ldr	r0, [pc, #4]	@ (800ea58 <__env_unlock+0x8>)
 800ea52:	f7fd bb9b 	b.w	800c18c <__retarget_lock_release_recursive>
 800ea56:	bf00      	nop
 800ea58:	20006f01 	.word	0x20006f01

0800ea5c <_realloc_r>:
 800ea5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea60:	4607      	mov	r7, r0
 800ea62:	4614      	mov	r4, r2
 800ea64:	460d      	mov	r5, r1
 800ea66:	b921      	cbnz	r1, 800ea72 <_realloc_r+0x16>
 800ea68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	f7fd bfcf 	b.w	800ca10 <_malloc_r>
 800ea72:	b92a      	cbnz	r2, 800ea80 <_realloc_r+0x24>
 800ea74:	f7fd fbd2 	bl	800c21c <_free_r>
 800ea78:	4625      	mov	r5, r4
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea80:	f000 f85e 	bl	800eb40 <_malloc_usable_size_r>
 800ea84:	4284      	cmp	r4, r0
 800ea86:	4606      	mov	r6, r0
 800ea88:	d802      	bhi.n	800ea90 <_realloc_r+0x34>
 800ea8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea8e:	d8f4      	bhi.n	800ea7a <_realloc_r+0x1e>
 800ea90:	4621      	mov	r1, r4
 800ea92:	4638      	mov	r0, r7
 800ea94:	f7fd ffbc 	bl	800ca10 <_malloc_r>
 800ea98:	4680      	mov	r8, r0
 800ea9a:	b908      	cbnz	r0, 800eaa0 <_realloc_r+0x44>
 800ea9c:	4645      	mov	r5, r8
 800ea9e:	e7ec      	b.n	800ea7a <_realloc_r+0x1e>
 800eaa0:	42b4      	cmp	r4, r6
 800eaa2:	4622      	mov	r2, r4
 800eaa4:	4629      	mov	r1, r5
 800eaa6:	bf28      	it	cs
 800eaa8:	4632      	movcs	r2, r6
 800eaaa:	f7fd fb78 	bl	800c19e <memcpy>
 800eaae:	4629      	mov	r1, r5
 800eab0:	4638      	mov	r0, r7
 800eab2:	f7fd fbb3 	bl	800c21c <_free_r>
 800eab6:	e7f1      	b.n	800ea9c <_realloc_r+0x40>

0800eab8 <_raise_r>:
 800eab8:	291f      	cmp	r1, #31
 800eaba:	b538      	push	{r3, r4, r5, lr}
 800eabc:	4605      	mov	r5, r0
 800eabe:	460c      	mov	r4, r1
 800eac0:	d904      	bls.n	800eacc <_raise_r+0x14>
 800eac2:	2316      	movs	r3, #22
 800eac4:	6003      	str	r3, [r0, #0]
 800eac6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaca:	bd38      	pop	{r3, r4, r5, pc}
 800eacc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eace:	b112      	cbz	r2, 800ead6 <_raise_r+0x1e>
 800ead0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ead4:	b94b      	cbnz	r3, 800eaea <_raise_r+0x32>
 800ead6:	4628      	mov	r0, r5
 800ead8:	f000 f830 	bl	800eb3c <_getpid_r>
 800eadc:	4622      	mov	r2, r4
 800eade:	4601      	mov	r1, r0
 800eae0:	4628      	mov	r0, r5
 800eae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eae6:	f000 b817 	b.w	800eb18 <_kill_r>
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d00a      	beq.n	800eb04 <_raise_r+0x4c>
 800eaee:	1c59      	adds	r1, r3, #1
 800eaf0:	d103      	bne.n	800eafa <_raise_r+0x42>
 800eaf2:	2316      	movs	r3, #22
 800eaf4:	6003      	str	r3, [r0, #0]
 800eaf6:	2001      	movs	r0, #1
 800eaf8:	e7e7      	b.n	800eaca <_raise_r+0x12>
 800eafa:	2100      	movs	r1, #0
 800eafc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb00:	4620      	mov	r0, r4
 800eb02:	4798      	blx	r3
 800eb04:	2000      	movs	r0, #0
 800eb06:	e7e0      	b.n	800eaca <_raise_r+0x12>

0800eb08 <raise>:
 800eb08:	4b02      	ldr	r3, [pc, #8]	@ (800eb14 <raise+0xc>)
 800eb0a:	4601      	mov	r1, r0
 800eb0c:	6818      	ldr	r0, [r3, #0]
 800eb0e:	f7ff bfd3 	b.w	800eab8 <_raise_r>
 800eb12:	bf00      	nop
 800eb14:	200001a0 	.word	0x200001a0

0800eb18 <_kill_r>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	4d07      	ldr	r5, [pc, #28]	@ (800eb38 <_kill_r+0x20>)
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	4604      	mov	r4, r0
 800eb20:	4608      	mov	r0, r1
 800eb22:	4611      	mov	r1, r2
 800eb24:	602b      	str	r3, [r5, #0]
 800eb26:	f7f4 fb57 	bl	80031d8 <_kill>
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	d102      	bne.n	800eb34 <_kill_r+0x1c>
 800eb2e:	682b      	ldr	r3, [r5, #0]
 800eb30:	b103      	cbz	r3, 800eb34 <_kill_r+0x1c>
 800eb32:	6023      	str	r3, [r4, #0]
 800eb34:	bd38      	pop	{r3, r4, r5, pc}
 800eb36:	bf00      	nop
 800eb38:	20006efc 	.word	0x20006efc

0800eb3c <_getpid_r>:
 800eb3c:	f7f4 bb44 	b.w	80031c8 <_getpid>

0800eb40 <_malloc_usable_size_r>:
 800eb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb44:	1f18      	subs	r0, r3, #4
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bfbc      	itt	lt
 800eb4a:	580b      	ldrlt	r3, [r1, r0]
 800eb4c:	18c0      	addlt	r0, r0, r3
 800eb4e:	4770      	bx	lr

0800eb50 <_init>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	bf00      	nop
 800eb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb56:	bc08      	pop	{r3}
 800eb58:	469e      	mov	lr, r3
 800eb5a:	4770      	bx	lr

0800eb5c <_fini>:
 800eb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb5e:	bf00      	nop
 800eb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb62:	bc08      	pop	{r3}
 800eb64:	469e      	mov	lr, r3
 800eb66:	4770      	bx	lr
