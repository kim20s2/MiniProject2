
nucleo_f411re_uart2_printf_uart6_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000128e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b4  08012a88  08012a88  00013a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c3c  08013c3c  00015250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013c3c  08013c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c44  08013c44  00015250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c44  08013c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013c48  08013c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08013c4c  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d2c  20000250  08013e9c  00015250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006f7c  08013e9c  00015f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fa5  00000000  00000000  00015280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a7a  00000000  00000000  00039225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002018  00000000  00000000  0003eca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001920  00000000  00000000  00040cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e593  00000000  00000000  000425d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029b5b  00000000  00000000  00060b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a65c2  00000000  00000000  0008a6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3b0  00000000  00000000  00130ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0013b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012a6c 	.word	0x08012a6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	08012a6c 	.word	0x08012a6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 ba09 	b.w	80010ec <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9be 	b.w	80010ec <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <Aiot_Task>:
int esp_is_wifi_ready(void);
void AiotClient_Init(void);   // 기존 초기화 함수 extern 선언

// Aiot_Task.c
void Aiot_Task(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 80010f8:	f002 f980 	bl	80033fc <AiotClient_Init>

    for(;;) {
        int wifi_ok = esp_is_wifi_ready();
 80010fc:	f002 faee 	bl	80036dc <esp_is_wifi_ready>
 8001100:	6178      	str	r0, [r7, #20]
        int tcp_ok  = esp_get_status();
 8001102:	f001 ffa5 	bl	8003050 <esp_get_status>
 8001106:	6138      	str	r0, [r7, #16]

        if (!wifi_ok) {
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <Aiot_Task+0x28>
            vTaskDelay(pdMS_TO_TICKS(2000));
 800110e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001112:	f009 ff39 	bl	800af88 <vTaskDelay>
            continue;
 8001116:	e01f      	b.n	8001158 <Aiot_Task+0x68>
        }

        if (tcp_ok != 0) {  // 연결 안 되었을 때만 접속
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d018      	beq.n	8001150 <Aiot_Task+0x60>
            printf("server connecting ...\r\n");
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <Aiot_Task+0x6c>)
 8001120:	f00d f978 	bl	800e414 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever)==osOK) {
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <Aiot_Task+0x70>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fc7f 	bl	8009a30 <osMutexAcquire>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <Aiot_Task+0x60>
                int rc = esp_client_conn();
 8001138:	f001 feb4 	bl	8002ea4 <esp_client_conn>
 800113c:	60f8      	str	r0, [r7, #12]
                osMutexRelease(ESP_MutexHandle);
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <Aiot_Task+0x70>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f008 fcbf 	bl	8009ac6 <osMutexRelease>
                printf("[AIOT] conn rc=%d\r\n", rc);
 8001148:	68f9      	ldr	r1, [r7, #12]
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <Aiot_Task+0x74>)
 800114c:	f00d f8f2 	bl	800e334 <iprintf>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(10000));
 8001150:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001154:	f009 ff18 	bl	800af88 <vTaskDelay>
    for(;;) {
 8001158:	e7d0      	b.n	80010fc <Aiot_Task+0xc>
 800115a:	bf00      	nop
 800115c:	08012a88 	.word	0x08012a88
 8001160:	200024a4 	.word	0x200024a4
 8001164:	08012aa0 	.word	0x08012aa0

08001168 <LED_ON>:
#define LED_Pin         GPIO_PIN_5

#define FAN_GPIO_Port   GPIOB
#define FAN_Pin         GPIO_PIN_4

static inline void LED_ON(void){  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); }
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <LED_ON+0x14>)
 8001172:	f004 f911 	bl	8005398 <HAL_GPIO_WritePin>
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800

08001180 <LED_OFF>:
static inline void LED_OFF(void){ HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); }
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <LED_OFF+0x14>)
 800118a:	f004 f905 	bl	8005398 <HAL_GPIO_WritePin>
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020800 	.word	0x40020800

08001198 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
 800119c:	2201      	movs	r2, #1
 800119e:	2110      	movs	r1, #16
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <FAN_ON+0x14>)
 80011a2:	f004 f8f9 	bl	8005398 <HAL_GPIO_WritePin>
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40020400 	.word	0x40020400

080011b0 <FAN_OFF>:
static inline void FAN_OFF(void){ HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET); }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	2110      	movs	r1, #16
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <FAN_OFF+0x14>)
 80011ba:	f004 f8ed 	bl	8005398 <HAL_GPIO_WritePin>
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020400 	.word	0x40020400

080011c8 <esp_event>:
extern osMutexId_t ESP_MutexHandle;
extern cb_data_t cb_data;
void esp_event(const char *recvBuf);

void esp_event(const char *recvBuf)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0aa      	sub	sp, #168	@ 0xa8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	227f      	movs	r2, #127	@ 0x7f
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00d fadc 	bl	800e7a4 <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	210a      	movs	r1, #10
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00d faa3 	bl	800e744 <strchr>
 80011fe:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 8001202:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <esp_event+0x4a>
 800120a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	210d      	movs	r1, #13
 8001218:	4618      	mov	r0, r3
 800121a:	f00d fa93 	bl	800e744 <strchr>
 800121e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 8001222:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <esp_event+0x6a>
 800122a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4955      	ldr	r1, [pc, #340]	@ (8001394 <esp_event+0x1cc>)
 800123e:	4618      	mov	r0, r3
 8001240:	f00d fac4 	bl	800e7cc <strtok>
 8001244:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 8001248:	e011      	b.n	800126e <esp_event+0xa6>
    {
        pArray[idx++] = token;
 800124a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	33a8      	adds	r3, #168	@ 0xa8
 8001258:	443b      	add	r3, r7
 800125a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800125e:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 8001262:	494c      	ldr	r1, [pc, #304]	@ (8001394 <esp_event+0x1cc>)
 8001264:	2000      	movs	r0, #0
 8001266:	f00d fab1 	bl	800e7cc <strtok>
 800126a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 800126e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <esp_event+0xb6>
 8001276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800127a:	2b03      	cmp	r3, #3
 800127c:	dde5      	ble.n	800124a <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d07c      	beq.n	800137e <esp_event+0x1b6>
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d079      	beq.n	800137e <esp_event+0x1b6>
    {
        if (strcmp(pArray[1], "LED") == 0)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4942      	ldr	r1, [pc, #264]	@ (8001398 <esp_event+0x1d0>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ffa6 	bl	80001e0 <strcmp>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d11b      	bne.n	80012d2 <esp_event+0x10a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	493f      	ldr	r1, [pc, #252]	@ (800139c <esp_event+0x1d4>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ff9e 	bl	80001e0 <strcmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d105      	bne.n	80012b6 <esp_event+0xee>
                LED_ON();
 80012aa:	f7ff ff5d 	bl	8001168 <LED_ON>
                printf("LED turned ON\r\n");
 80012ae:	483c      	ldr	r0, [pc, #240]	@ (80013a0 <esp_event+0x1d8>)
 80012b0:	f00d f8b0 	bl	800e414 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80012b4:	e068      	b.n	8001388 <esp_event+0x1c0>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	493a      	ldr	r1, [pc, #232]	@ (80013a4 <esp_event+0x1dc>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff90 	bl	80001e0 <strcmp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d160      	bne.n	8001388 <esp_event+0x1c0>
                LED_OFF();
 80012c6:	f7ff ff5b 	bl	8001180 <LED_OFF>
                printf("LED turned OFF\r\n");
 80012ca:	4837      	ldr	r0, [pc, #220]	@ (80013a8 <esp_event+0x1e0>)
 80012cc:	f00d f8a2 	bl	800e414 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80012d0:	e05a      	b.n	8001388 <esp_event+0x1c0>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4935      	ldr	r1, [pc, #212]	@ (80013ac <esp_event+0x1e4>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff82 	bl	80001e0 <strcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d121      	bne.n	8001326 <esp_event+0x15e>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	492d      	ldr	r1, [pc, #180]	@ (800139c <esp_event+0x1d4>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff7a 	bl	80001e0 <strcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d108      	bne.n	8001304 <esp_event+0x13c>
            	fan_hold = 1;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <esp_event+0x1e8>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
                FAN_ON();
 80012f8:	f7ff ff4e 	bl	8001198 <FAN_ON>
                printf("FAN turned ON\r\n");
 80012fc:	482d      	ldr	r0, [pc, #180]	@ (80013b4 <esp_event+0x1ec>)
 80012fe:	f00d f889 	bl	800e414 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001302:	e041      	b.n	8001388 <esp_event+0x1c0>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	4927      	ldr	r1, [pc, #156]	@ (80013a4 <esp_event+0x1dc>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff69 	bl	80001e0 <strcmp>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d139      	bne.n	8001388 <esp_event+0x1c0>
            	fan_hold = 0;
 8001314:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <esp_event+0x1e8>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
                FAN_OFF();
 800131a:	f7ff ff49 	bl	80011b0 <FAN_OFF>
                printf("FAN turned OFF\r\n");
 800131e:	4826      	ldr	r0, [pc, #152]	@ (80013b8 <esp_event+0x1f0>)
 8001320:	f00d f878 	bl	800e414 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001324:	e030      	b.n	8001388 <esp_event+0x1c0>
            }
        }
        else if (strcmp(pArray[1], "SERVO") == 0)   // ★ 추가
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4924      	ldr	r1, [pc, #144]	@ (80013bc <esp_event+0x1f4>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff58 	bl	80001e0 <strcmp>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11d      	bne.n	8001372 <esp_event+0x1aa>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	4918      	ldr	r1, [pc, #96]	@ (800139c <esp_event+0x1d4>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ff50 	bl	80001e0 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d106      	bne.n	8001354 <esp_event+0x18c>
                Servo_SetAngle(90);  // 90도
 8001346:	205a      	movs	r0, #90	@ 0x5a
 8001348:	f000 fcc0 	bl	8001ccc <Servo_SetAngle>
                printf("SERVO -> 90 deg\r\n");
 800134c:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <esp_event+0x1f8>)
 800134e:	f00d f861 	bl	800e414 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001352:	e019      	b.n	8001388 <esp_event+0x1c0>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4913      	ldr	r1, [pc, #76]	@ (80013a4 <esp_event+0x1dc>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff41 	bl	80001e0 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <esp_event+0x1c0>
                Servo_SetAngle(0);   // 0도
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fcb1 	bl	8001ccc <Servo_SetAngle>
                printf("SERVO -> 0 deg\r\n");
 800136a:	4816      	ldr	r0, [pc, #88]	@ (80013c4 <esp_event+0x1fc>)
 800136c:	f00d f852 	bl	800e414 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001370:	e00a      	b.n	8001388 <esp_event+0x1c0>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4619      	mov	r1, r3
 8001376:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <esp_event+0x200>)
 8001378:	f00c ffdc 	bl	800e334 <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 800137c:	e004      	b.n	8001388 <esp_event+0x1c0>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4812      	ldr	r0, [pc, #72]	@ (80013cc <esp_event+0x204>)
 8001382:	f00c ffd7 	bl	800e334 <iprintf>
    }
}
 8001386:	e000      	b.n	800138a <esp_event+0x1c2>
        if (strcmp(pArray[1], "LED") == 0)
 8001388:	bf00      	nop
}
 800138a:	bf00      	nop
 800138c:	37a8      	adds	r7, #168	@ 0xa8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	08012ab4 	.word	0x08012ab4
 8001398:	08012abc 	.word	0x08012abc
 800139c:	08012ac0 	.word	0x08012ac0
 80013a0:	08012ac4 	.word	0x08012ac4
 80013a4:	08012ad4 	.word	0x08012ad4
 80013a8:	08012ad8 	.word	0x08012ad8
 80013ac:	08012ae8 	.word	0x08012ae8
 80013b0:	200022d4 	.word	0x200022d4
 80013b4:	08012aec 	.word	0x08012aec
 80013b8:	08012afc 	.word	0x08012afc
 80013bc:	08012b0c 	.word	0x08012b0c
 80013c0:	08012b14 	.word	0x08012b14
 80013c4:	08012b28 	.word	0x08012b28
 80013c8:	08012b38 	.word	0x08012b38
 80013cc:	08012b50 	.word	0x08012b50

080013d0 <try_extract_ipd_payload>:

// +IPD,<len>:...   (CIPMUX=0)
// +IPD,<id>,<len>:...  (CIPMUX=1)
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b092      	sub	sp, #72	@ 0x48
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
    int copied = 0, consumed = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80013de:	2300      	movs	r3, #0
 80013e0:	643b      	str	r3, [r7, #64]	@ 0x40

    taskENTER_CRITICAL();
 80013e2:	f00b f8e1 	bl	800c5a8 <vPortEnterCritical>
    int n = cb_data.length;
 80013e6:	4b70      	ldr	r3, [pc, #448]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 80013e8:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80013ec:	623b      	str	r3, [r7, #32]
    if (n > 0) {
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f340 80d2 	ble.w	800159a <try_extract_ipd_payload+0x1ca>
        int start = -1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i + 4 < n; ++i) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001400:	e023      	b.n	800144a <try_extract_ipd_payload+0x7a>
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 8001402:	4a69      	ldr	r2, [pc, #420]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b2b      	cmp	r3, #43	@ 0x2b
 800140c:	d11a      	bne.n	8001444 <try_extract_ipd_payload+0x74>
 800140e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001410:	3301      	adds	r3, #1
 8001412:	4a65      	ldr	r2, [pc, #404]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	2b49      	cmp	r3, #73	@ 0x49
 8001418:	d114      	bne.n	8001444 <try_extract_ipd_payload+0x74>
 800141a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800141c:	3302      	adds	r3, #2
 800141e:	4a62      	ldr	r2, [pc, #392]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	2b50      	cmp	r3, #80	@ 0x50
 8001424:	d10e      	bne.n	8001444 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 8001426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001428:	3303      	adds	r3, #3
 800142a:	4a5f      	ldr	r2, [pc, #380]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 800142e:	2b44      	cmp	r3, #68	@ 0x44
 8001430:	d108      	bne.n	8001444 <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 8001432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001434:	3304      	adds	r3, #4
 8001436:	4a5c      	ldr	r2, [pc, #368]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	2b2c      	cmp	r3, #44	@ 0x2c
 800143c:	d102      	bne.n	8001444 <try_extract_ipd_payload+0x74>
 800143e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001442:	e007      	b.n	8001454 <try_extract_ipd_payload+0x84>
        for (int i = 0; i + 4 < n; ++i) {
 8001444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001446:	3301      	adds	r3, #1
 8001448:	63bb      	str	r3, [r7, #56]	@ 0x38
 800144a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144c:	3304      	adds	r3, #4
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	dcd6      	bgt.n	8001402 <try_extract_ipd_payload+0x32>
        }
        if (start >= 0) {
 8001454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001456:	2b00      	cmp	r3, #0
 8001458:	f2c0 8088 	blt.w	800156c <try_extract_ipd_payload+0x19c>
            int p = start + 5;
 800145c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800145e:	3305      	adds	r3, #5
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34

            // (1) optional link id
            int q = p;
 8001462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001464:	633b      	str	r3, [r7, #48]	@ 0x30
            while (q < n && cb_data.buf[q]>='0' && cb_data.buf[q]<='9') q++;
 8001466:	e002      	b.n	800146e <try_extract_ipd_payload+0x9e>
 8001468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800146a:	3301      	adds	r3, #1
 800146c:	633b      	str	r3, [r7, #48]	@ 0x30
 800146e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	429a      	cmp	r2, r3
 8001474:	da0b      	bge.n	800148e <try_extract_ipd_payload+0xbe>
 8001476:	4a4c      	ldr	r2, [pc, #304]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001480:	d905      	bls.n	800148e <try_extract_ipd_payload+0xbe>
 8001482:	4a49      	ldr	r2, [pc, #292]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b39      	cmp	r3, #57	@ 0x39
 800148c:	d9ec      	bls.n	8001468 <try_extract_ipd_payload+0x98>
            if (q < n && cb_data.buf[q] == ',') {
 800148e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	429a      	cmp	r2, r3
 8001494:	da08      	bge.n	80014a8 <try_extract_ipd_payload+0xd8>
 8001496:	4a44      	ldr	r2, [pc, #272]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2c      	cmp	r3, #44	@ 0x2c
 80014a0:	d102      	bne.n	80014a8 <try_extract_ipd_payload+0xd8>
                p = q + 1; // had link id -> p now at len
 80014a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a4:	3301      	adds	r3, #1
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
            } // else: single mode, p already at len

            // (2) parse length until ':'
            int len_start = p, colon = -1;
 80014a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b6:	e01b      	b.n	80014f0 <try_extract_ipd_payload+0x120>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 80014b8:	4a3b      	ldr	r2, [pc, #236]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80014c2:	d102      	bne.n	80014ca <try_extract_ipd_payload+0xfa>
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014c8:	e01b      	b.n	8001502 <try_extract_ipd_payload+0x132>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { len_start = -1; break; }
 80014ca:	4a37      	ldr	r2, [pc, #220]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80014d4:	d905      	bls.n	80014e2 <try_extract_ipd_payload+0x112>
 80014d6:	4a34      	ldr	r2, [pc, #208]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b39      	cmp	r3, #57	@ 0x39
 80014e0:	d903      	bls.n	80014ea <try_extract_ipd_payload+0x11a>
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e8:	e00b      	b.n	8001502 <try_extract_ipd_payload+0x132>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	da04      	bge.n	8001502 <try_extract_ipd_payload+0x132>
 80014f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fa:	3309      	adds	r3, #9
 80014fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014fe:	429a      	cmp	r2, r3
 8001500:	ddda      	ble.n	80014b8 <try_extract_ipd_payload+0xe8>
            }
            if (len_start >= 0 && colon > 0) {
 8001502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001504:	2b00      	cmp	r3, #0
 8001506:	db31      	blt.n	800156c <try_extract_ipd_payload+0x19c>
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	2b00      	cmp	r3, #0
 800150c:	dd2e      	ble.n	800156c <try_extract_ipd_payload+0x19c>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	4a25      	ldr	r2, [pc, #148]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001512:	4413      	add	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f00b fb5a 	bl	800cbce <atoi>
 800151a:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 800151c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151e:	3301      	adds	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 8001522:	6a3a      	ldr	r2, [r7, #32]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b00      	cmp	r3, #0
 800152e:	dd1d      	ble.n	800156c <try_extract_ipd_payload+0x19c>
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	db19      	blt.n	800156c <try_extract_ipd_payload+0x19c>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	4293      	cmp	r3, r2
 8001540:	bfa8      	it	ge
 8001542:	4613      	movge	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4a17      	ldr	r2, [pc, #92]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 800154a:	4413      	add	r3, r2
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f00e f8e6 	bl	800f722 <memcpy>
                    dst[cpy] = 0;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	647b      	str	r3, [r7, #68]	@ 0x44
                    consumed = payload_start + ipd_len;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }
        }
        if (consumed > 0) {
 800156c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	dd13      	ble.n	800159a <try_extract_ipd_payload+0x1ca>
            int left = n - consumed;
 8001572:	6a3a      	ldr	r2, [r7, #32]
 8001574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove(cb_data.buf, &cb_data.buf[consumed], left);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd07      	ble.n	8001590 <try_extract_ipd_payload+0x1c0>
 8001580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001584:	4413      	add	r3, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 800158c:	f00d f8b8 	bl	800e700 <memmove>
            cb_data.length = left;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <try_extract_ipd_payload+0x1d8>)
 8001596:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
        }
    }
    taskEXIT_CRITICAL();
 800159a:	f00b f837 	bl	800c60c <vPortExitCritical>
    return copied;
 800159e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3748      	adds	r7, #72	@ 0x48
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20001acc 	.word	0x20001acc

080015ac <Command_Task>:

void Command_Task(void *argument)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0c4      	sub	sp, #272	@ 0x110
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015ba:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <Command_Task+0x74>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fa34 	bl	8009a30 <osMutexAcquire>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d123      	bne.n	8001616 <Command_Task+0x6a>
			int got = try_extract_ipd_payload(payload, sizeof(payload));
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fefa 	bl	80013d0 <try_extract_ipd_payload>
 80015dc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
			osMutexRelease(ESP_MutexHandle);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <Command_Task+0x74>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 fa6e 	bl	8009ac6 <osMutexRelease>
			if (got > 0) {
 80015ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dd11      	ble.n	8001616 <Command_Task+0x6a>
				// strip CR/LF
				payload[strcspn(payload, "\r\n")] = '\0';
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	490b      	ldr	r1, [pc, #44]	@ (8001624 <Command_Task+0x78>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00d f8b0 	bl	800e75e <strcspn>
 80015fe:	4602      	mov	r2, r0
 8001600:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]
				esp_event(payload);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fdd9 	bl	80011c8 <esp_event>
			}
		}
        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 8001616:	200a      	movs	r0, #10
 8001618:	f009 fcb6 	bl	800af88 <vTaskDelay>
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 800161c:	e7ce      	b.n	80015bc <Command_Task+0x10>
 800161e:	bf00      	nop
 8001620:	200024a4 	.word	0x200024a4
 8001624:	08012b70 	.word	0x08012b70

08001628 <pty_text>:
extern volatile float g_t1h;  // °C
extern volatile int   g_reh;  // %
extern volatile int   g_pty;  // PTY 코드

// 강수 텍스트
static const char* pty_text(int code) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    switch (code) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b07      	cmp	r3, #7
 8001634:	d822      	bhi.n	800167c <pty_text+0x54>
 8001636:	a201      	add	r2, pc, #4	@ (adr r2, 800163c <pty_text+0x14>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800165d 	.word	0x0800165d
 8001640:	08001661 	.word	0x08001661
 8001644:	08001665 	.word	0x08001665
 8001648:	08001669 	.word	0x08001669
 800164c:	0800166d 	.word	0x0800166d
 8001650:	08001671 	.word	0x08001671
 8001654:	08001675 	.word	0x08001675
 8001658:	08001679 	.word	0x08001679
        case 0: return "SUN";
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <pty_text+0x64>)
 800165e:	e00e      	b.n	800167e <pty_text+0x56>
        case 1: return "RAIN";
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <pty_text+0x68>)
 8001662:	e00c      	b.n	800167e <pty_text+0x56>
        case 2: return "R/S";
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <pty_text+0x6c>)
 8001666:	e00a      	b.n	800167e <pty_text+0x56>
        case 3: return "SNOW";
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <pty_text+0x70>)
 800166a:	e008      	b.n	800167e <pty_text+0x56>
        case 4: return "SHWR";
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <pty_text+0x74>)
 800166e:	e006      	b.n	800167e <pty_text+0x56>
        case 5: return "DROP";
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <pty_text+0x78>)
 8001672:	e004      	b.n	800167e <pty_text+0x56>
        case 6: return "D/S";
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <pty_text+0x7c>)
 8001676:	e002      	b.n	800167e <pty_text+0x56>
        case 7: return "SFLT";
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <pty_text+0x80>)
 800167a:	e000      	b.n	800167e <pty_text+0x56>
        default: return "?";
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <pty_text+0x84>)
    }
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	08012b74 	.word	0x08012b74
 8001690:	08012b78 	.word	0x08012b78
 8001694:	08012b80 	.word	0x08012b80
 8001698:	08012b84 	.word	0x08012b84
 800169c:	08012b8c 	.word	0x08012b8c
 80016a0:	08012b94 	.word	0x08012b94
 80016a4:	08012b9c 	.word	0x08012b9c
 80016a8:	08012ba0 	.word	0x08012ba0
 80016ac:	08012ba8 	.word	0x08012ba8

080016b0 <LCD_Task>:

void LCD_Task(void *argument)
{
 80016b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	b09d      	sub	sp, #116	@ 0x74
 80016b6:	af04      	add	r7, sp, #16
 80016b8:	6078      	str	r0, [r7, #4]
    LCD_Init();
 80016ba:	f002 f85b 	bl	8003774 <LCD_Init>
    LCD_Clear();
 80016be:	f002 f883 	bl	80037c8 <LCD_Clear>

    time_t base_epoch = 0;
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    uint32_t tick = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t last_sync_sec = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	653b      	str	r3, [r7, #80]	@ 0x50

    // 최초 동기화
    if (osMutexAcquire(NTP_MutexHandle, pdMS_TO_TICKS(200)) == osOK) {
 80016d6:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <LCD_Task+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	21c8      	movs	r1, #200	@ 0xc8
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 f9a7 	bl	8009a30 <osMutexAcquire>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10a      	bne.n	80016fe <LCD_Task+0x4e>
        base_epoch = ntp_time;
 80016e8:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <LCD_Task+0x1c8>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        osMutexRelease(NTP_MutexHandle);
 80016f2:	4b60      	ldr	r3, [pc, #384]	@ (8001874 <LCD_Task+0x1c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f008 f9e5 	bl	8009ac6 <osMutexRelease>
 80016fc:	e004      	b.n	8001708 <LCD_Task+0x58>
    } else {
        base_epoch = time(NULL);
 80016fe:	2000      	movs	r0, #0
 8001700:	f00d fc78 	bl	800eff4 <time>
 8001704:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
    }
    last_sync_sec = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	653b      	str	r3, [r7, #80]	@ 0x50
    tick = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	657b      	str	r3, [r7, #84]	@ 0x54

    TickType_t last = xTaskGetTickCount();
 8001710:	f009 fd84 	bl	800b21c <xTaskGetTickCount>
 8001714:	4603      	mov	r3, r0
 8001716:	63bb      	str	r3, [r7, #56]	@ 0x38
    const TickType_t period = pdMS_TO_TICKS(1000);
 8001718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171c:	643b      	str	r3, [r7, #64]	@ 0x40

    for (;;)
    {
        // 40초마다 NTP 재동기화
        if ((tick - last_sync_sec) >= 30) {
 800171e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b1d      	cmp	r3, #29
 8001726:	d91a      	bls.n	800175e <LCD_Task+0xae>
            if (osMutexAcquire(NTP_MutexHandle, pdMS_TO_TICKS(50)) == osOK) {
 8001728:	4b52      	ldr	r3, [pc, #328]	@ (8001874 <LCD_Task+0x1c4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2132      	movs	r1, #50	@ 0x32
 800172e:	4618      	mov	r0, r3
 8001730:	f008 f97e 	bl	8009a30 <osMutexAcquire>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <LCD_Task+0xa0>
                base_epoch = ntp_time;
 800173a:	4b4f      	ldr	r3, [pc, #316]	@ (8001878 <LCD_Task+0x1c8>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
                osMutexRelease(NTP_MutexHandle);
 8001744:	4b4b      	ldr	r3, [pc, #300]	@ (8001874 <LCD_Task+0x1c4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f008 f9bc 	bl	8009ac6 <osMutexRelease>
 800174e:	e004      	b.n	800175a <LCD_Task+0xaa>
            } else {
                base_epoch = time(NULL);
 8001750:	2000      	movs	r0, #0
 8001752:	f00d fc4f 	bl	800eff4 <time>
 8001756:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
            }
            last_sync_sec = tick;
 800175a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175c:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        // 현재 시각 계산
        time_t now = base_epoch + (time_t)(tick - last_sync_sec);
 800175e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2200      	movs	r2, #0
 8001766:	461c      	mov	r4, r3
 8001768:	4615      	mov	r5, r2
 800176a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800176e:	eb14 0802 	adds.w	r8, r4, r2
 8001772:	eb45 0903 	adc.w	r9, r5, r3
 8001776:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
        struct tm *k = localtime(&now);
 800177a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800177e:	4618      	mov	r0, r3
 8001780:	f00d f89e 	bl	800e8c0 <localtime>
 8001784:	63f8      	str	r0, [r7, #60]	@ 0x3c

        // 1행: 시간 고정 위치 출력
        char line1[17];
        snprintf(line1, sizeof(line1), "%02d-%02d %02d:%02d:%02d",
                 (k->tm_mon + 1), k->tm_mday, k->tm_hour, k->tm_min, k->tm_sec);
 8001786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001788:	691b      	ldr	r3, [r3, #16]
        snprintf(line1, sizeof(line1), "%02d-%02d %02d:%02d:%02d",
 800178a:	f103 0c01 	add.w	ip, r3, #1
 800178e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001794:	6892      	ldr	r2, [r2, #8]
 8001796:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001798:	6849      	ldr	r1, [r1, #4]
 800179a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800179c:	6800      	ldr	r0, [r0, #0]
 800179e:	f107 061c 	add.w	r6, r7, #28
 80017a2:	9003      	str	r0, [sp, #12]
 80017a4:	9102      	str	r1, [sp, #8]
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4663      	mov	r3, ip
 80017ac:	4a33      	ldr	r2, [pc, #204]	@ (800187c <LCD_Task+0x1cc>)
 80017ae:	2111      	movs	r1, #17
 80017b0:	4630      	mov	r0, r6
 80017b2:	f00c fe37 	bl	800e424 <sniprintf>
        LCD_SetCursor(0, 0);
 80017b6:	2100      	movs	r1, #0
 80017b8:	2000      	movs	r0, #0
 80017ba:	f002 f80f 	bl	80037dc <LCD_SetCursor>
        LCD_Print(line1);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 f82c 	bl	8003820 <LCD_Print>

        // 2행: 날씨 표시
        float t_c = 0.0f; int rh = -1; int pty = -1;
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	647b      	str	r3, [r7, #68]	@ 0x44
        if (osMutexAcquire(Weather_MutexHandle, pdMS_TO_TICKS(10)) == osOK) {
 80017da:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <LCD_Task+0x1d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	210a      	movs	r1, #10
 80017e0:	4618      	mov	r0, r3
 80017e2:	f008 f925 	bl	8009a30 <osMutexAcquire>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <LCD_Task+0x158>
            t_c = g_t1h;
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <LCD_Task+0x1d4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            rh = g_reh;
 80017f2:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <LCD_Task+0x1d8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	64bb      	str	r3, [r7, #72]	@ 0x48
            pty = g_pty;
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <LCD_Task+0x1dc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	647b      	str	r3, [r7, #68]	@ 0x44
            osMutexRelease(Weather_MutexHandle);
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <LCD_Task+0x1d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f008 f95f 	bl	8009ac6 <osMutexRelease>
        }

        char line2[17];
        if (rh >= 0 && pty >= 0) {
 8001808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800180a:	2b00      	cmp	r3, #0
 800180c:	db17      	blt.n	800183e <LCD_Task+0x18e>
 800180e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001810:	2b00      	cmp	r3, #0
 8001812:	db14      	blt.n	800183e <LCD_Task+0x18e>
            snprintf(line2, sizeof(line2), "T=%2.1f H=%d %s", t_c, rh, pty_text(pty));
 8001814:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001816:	f7fe feaf 	bl	8000578 <__aeabi_f2d>
 800181a:	4682      	mov	sl, r0
 800181c:	468b      	mov	fp, r1
 800181e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001820:	f7ff ff02 	bl	8001628 <pty_text>
 8001824:	4603      	mov	r3, r0
 8001826:	f107 0008 	add.w	r0, r7, #8
 800182a:	9303      	str	r3, [sp, #12]
 800182c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	e9cd ab00 	strd	sl, fp, [sp]
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <LCD_Task+0x1e0>)
 8001836:	2111      	movs	r1, #17
 8001838:	f00c fdf4 	bl	800e424 <sniprintf>
 800183c:	e006      	b.n	800184c <LCD_Task+0x19c>
        } else {
            snprintf(line2, sizeof(line2), "Weather: --");
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <LCD_Task+0x1e4>)
 8001844:	2111      	movs	r1, #17
 8001846:	4618      	mov	r0, r3
 8001848:	f00c fdec 	bl	800e424 <sniprintf>
        }
        LCD_SetCursor(1, 0);
 800184c:	2100      	movs	r1, #0
 800184e:	2001      	movs	r0, #1
 8001850:	f001 ffc4 	bl	80037dc <LCD_SetCursor>
        LCD_Print(line2);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4618      	mov	r0, r3
 800185a:	f001 ffe1 	bl	8003820 <LCD_Print>

        tick++;
 800185e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001860:	3301      	adds	r3, #1
 8001862:	657b      	str	r3, [r7, #84]	@ 0x54
        vTaskDelayUntil(&last, period); // 정확히 1Hz 주기
 8001864:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001868:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800186a:	4618      	mov	r0, r3
 800186c:	f009 fb0c 	bl	800ae88 <vTaskDelayUntil>
    {
 8001870:	e755      	b.n	800171e <LCD_Task+0x6e>
 8001872:	bf00      	nop
 8001874:	200024a8 	.word	0x200024a8
 8001878:	200022d8 	.word	0x200022d8
 800187c:	08012bac 	.word	0x08012bac
 8001880:	200024ac 	.word	0x200024ac
 8001884:	2000027c 	.word	0x2000027c
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004
 8001890:	08012bc8 	.word	0x08012bc8
 8001894:	08012bd8 	.word	0x08012bd8

08001898 <NTP_Task>:
#define NTPTIME_TASK_PERIOD_MS 30000

int esp_is_wifi_ready(void);

void NTP_Task(void *argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	81fb      	strh	r3, [r7, #14]
    TickType_t last = xTaskGetTickCount();
 80018a4:	f009 fcba 	bl	800b21c <xTaskGetTickCount>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60bb      	str	r3, [r7, #8]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 80018ac:	f247 5330 	movw	r3, #30000	@ 0x7530
 80018b0:	613b      	str	r3, [r7, #16]
    static int s_ntp_cfg_ok = 0;
    //int toggle = 0;

    for(;;)
    {
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80018b2:	f001 ff13 	bl	80036dc <esp_is_wifi_ready>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d104      	bne.n	80018c6 <NTP_Task+0x2e>
 80018bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018c0:	f009 fb62 	bl	800af88 <vTaskDelay>
 80018c4:	e060      	b.n	8001988 <NTP_Task+0xf0>
		if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 80018c6:	4b31      	ldr	r3, [pc, #196]	@ (800198c <NTP_Task+0xf4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	4618      	mov	r0, r3
 80018d0:	f008 f8ae 	bl	8009a30 <osMutexAcquire>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d150      	bne.n	800197c <NTP_Task+0xe4>
			if (!s_ntp_cfg_ok) {
 80018da:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <NTP_Task+0xf8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <NTP_Task+0x5a>
				if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 80018e2:	f001 fed1 	bl	8003688 <esp_ntp_config>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <NTP_Task+0x5a>
 80018ec:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <NTP_Task+0xf8>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
				}
			if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 80018f2:	f107 020e 	add.w	r2, r7, #14
 80018f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018fa:	4926      	ldr	r1, [pc, #152]	@ (8001994 <NTP_Task+0xfc>)
 80018fc:	4826      	ldr	r0, [pc, #152]	@ (8001998 <NTP_Task+0x100>)
 80018fe:	f001 f95f 	bl	8002bc0 <esp_at_command>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d134      	bne.n	8001972 <NTP_Task+0xda>
				char *p = strtok(response, "\r\n");
 8001908:	4924      	ldr	r1, [pc, #144]	@ (800199c <NTP_Task+0x104>)
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <NTP_Task+0xfc>)
 800190c:	f00c ff5e 	bl	800e7cc <strtok>
 8001910:	6178      	str	r0, [r7, #20]
				//printf("NTP connected!\r\n");
				while (p) {
 8001912:	e029      	b.n	8001968 <NTP_Task+0xd0>
					if (parse_cipsntptime_line(p, &epoch) == 0) {
 8001914:	4922      	ldr	r1, [pc, #136]	@ (80019a0 <NTP_Task+0x108>)
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f001 fdba 	bl	8003490 <parse_cipsntptime_line>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d11d      	bne.n	800195e <NTP_Task+0xc6>
						printf("NTP Time (KST): %s\r", ctime(&epoch));
 8001922:	481f      	ldr	r0, [pc, #124]	@ (80019a0 <NTP_Task+0x108>)
 8001924:	f00c ffc4 	bl	800e8b0 <ctime>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	481d      	ldr	r0, [pc, #116]	@ (80019a4 <NTP_Task+0x10c>)
 800192e:	f00c fd01 	bl	800e334 <iprintf>
						} else {
							Servo_SetAngle(0);
							printf("[SERVO TEST] -> 0 deg\r\n");
						}
						*/
						if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <NTP_Task+0x110>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f04f 31ff 	mov.w	r1, #4294967295
 800193a:	4618      	mov	r0, r3
 800193c:	f008 f878 	bl	8009a30 <osMutexAcquire>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d114      	bne.n	8001970 <NTP_Task+0xd8>
							ntp_time = epoch;
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <NTP_Task+0x108>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	4917      	ldr	r1, [pc, #92]	@ (80019ac <NTP_Task+0x114>)
 800194e:	e9c1 2300 	strd	r2, r3, [r1]
							osMutexRelease(NTP_MutexHandle);
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <NTP_Task+0x110>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f008 f8b5 	bl	8009ac6 <osMutexRelease>
						}
						break;
 800195c:	e008      	b.n	8001970 <NTP_Task+0xd8>
					}
					p = strtok(NULL, "\r\n");
 800195e:	490f      	ldr	r1, [pc, #60]	@ (800199c <NTP_Task+0x104>)
 8001960:	2000      	movs	r0, #0
 8001962:	f00c ff33 	bl	800e7cc <strtok>
 8001966:	6178      	str	r0, [r7, #20]
				while (p) {
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1d2      	bne.n	8001914 <NTP_Task+0x7c>
 800196e:	e000      	b.n	8001972 <NTP_Task+0xda>
						break;
 8001970:	bf00      	nop
				}
		}
			osMutexRelease(ESP_MutexHandle);
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <NTP_Task+0xf4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f008 f8a5 	bl	8009ac6 <osMutexRelease>
		}

        vTaskDelayUntil(&last, period);
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	6939      	ldr	r1, [r7, #16]
 8001982:	4618      	mov	r0, r3
 8001984:	f009 fa80 	bl	800ae88 <vTaskDelayUntil>
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 8001988:	e793      	b.n	80018b2 <NTP_Task+0x1a>
 800198a:	bf00      	nop
 800198c:	200024a4 	.word	0x200024a4
 8001990:	2000026c 	.word	0x2000026c
 8001994:	20001294 	.word	0x20001294
 8001998:	08012be4 	.word	0x08012be4
 800199c:	08012bf8 	.word	0x08012bf8
 80019a0:	20000270 	.word	0x20000270
 80019a4:	08012bfc 	.word	0x08012bfc
 80019a8:	200024a8 	.word	0x200024a8
 80019ac:	200022d8 	.word	0x200022d8

080019b0 <LED_ON>:
static inline void LED_ON(void){  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); }
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	2201      	movs	r2, #1
 80019b6:	2120      	movs	r1, #32
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <LED_ON+0x14>)
 80019ba:	f003 fced 	bl	8005398 <HAL_GPIO_WritePin>
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020800 	.word	0x40020800

080019c8 <LED_OFF>:
static inline void LED_OFF(void){ HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); }
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	2200      	movs	r2, #0
 80019ce:	2120      	movs	r1, #32
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <LED_OFF+0x14>)
 80019d2:	f003 fce1 	bl	8005398 <HAL_GPIO_WritePin>
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40020800 	.word	0x40020800

080019e0 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	2201      	movs	r2, #1
 80019e6:	2110      	movs	r1, #16
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <FAN_ON+0x14>)
 80019ea:	f003 fcd5 	bl	8005398 <HAL_GPIO_WritePin>
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40020400 	.word	0x40020400

080019f8 <FAN_OFF>:
static inline void FAN_OFF(void){ HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET); }
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	2200      	movs	r2, #0
 80019fe:	2110      	movs	r1, #16
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <FAN_OFF+0x14>)
 8001a02:	f003 fcc9 	bl	8005398 <HAL_GPIO_WritePin>
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020400 	.word	0x40020400

08001a10 <MS2T>:
#include <stdint.h>
#include <stdio.h>


// ── 보조: ms→tick (CMSIS v2) ──
static inline uint32_t MS2T(uint32_t ms){
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
    return (uint32_t)((((uint64_t)ms) * osKernelGetTickFreq()) / 1000U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	469a      	mov	sl, r3
 8001a20:	4693      	mov	fp, r2
 8001a22:	f007 fe9c 	bl	800975e <osKernelGetTickFreq>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4698      	mov	r8, r3
 8001a2c:	4691      	mov	r9, r2
 8001a2e:	fb08 f20b 	mul.w	r2, r8, fp
 8001a32:	fb0a f309 	mul.w	r3, sl, r9
 8001a36:	4413      	add	r3, r2
 8001a38:	fbaa 4508 	umull	r4, r5, sl, r8
 8001a3c:	442b      	add	r3, r5
 8001a3e:	461d      	mov	r5, r3
 8001a40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7ff f984 	bl	8000d58 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a60 <PIR_Task>:
}

// 보조 함수/변수들은 그대로 (MS2T, s_last_motion, PIR_ArmIdleTimer 등)

void PIR_Task(void *argument)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    osDelay(30000);  // 워밍업
 8001a68:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001a6c:	f007 ff12 	bl	8009894 <osDelay>

    const uint32_t period     = MS2T(50);
 8001a70:	2032      	movs	r0, #50	@ 0x32
 8001a72:	f7ff ffcd 	bl	8001a10 <MS2T>
 8001a76:	61f8      	str	r0, [r7, #28]
    const uint32_t OFF_WINDOW = MS2T(10000);
 8001a78:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a7c:	f7ff ffc8 	bl	8001a10 <MS2T>
 8001a80:	61b8      	str	r0, [r7, #24]
    uint32_t next_wake = osKernelGetTickCount() + period;
 8001a82:	f007 fe57 	bl	8009734 <osKernelGetTickCount>
 8001a86:	4602      	mov	r2, r0
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24

    uint8_t  hi_cnt = 0, lo_cnt = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    // 디바운스/재무장 임계
    const uint8_t HI_THR      = 8;   // 6 * 50ms = 300ms 이상 High면 감지로 인정
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	75fb      	strb	r3, [r7, #23]
    const uint8_t LO_THR      = 2;   // 100ms (즉시 Lo 판정용)
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	75bb      	strb	r3, [r7, #22]
    const uint8_t ARM_LO_THR  = 30;  // 20 * 50ms = 1s 이상 Low일 때만 "다음 감지 허용"
 8001aa2:	231e      	movs	r3, #30
 8001aa4:	757b      	strb	r3, [r7, #21]
    bool high_blocked = false;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bool ready = false;  // 다음 감지를 받을 준비가 되었는지
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3020 	strb.w	r3, [r7, #32]

    for (;;)
    {
        uint32_t now = osKernelGetTickCount();
 8001ab2:	f007 fe3f 	bl	8009734 <osKernelGetTickCount>
 8001ab6:	6138      	str	r0, [r7, #16]
        GPIO_PinState s = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 8001ab8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001abc:	483e      	ldr	r0, [pc, #248]	@ (8001bb8 <PIR_Task+0x158>)
 8001abe:	f003 fc53 	bl	8005368 <HAL_GPIO_ReadPin>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]

        if (s == GPIO_PIN_SET) {
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d12f      	bne.n	8001b2c <PIR_Task+0xcc>
            if (hi_cnt < 255) hi_cnt++;
 8001acc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ad0:	2bff      	cmp	r3, #255	@ 0xff
 8001ad2:	d004      	beq.n	8001ade <PIR_Task+0x7e>
 8001ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lo_cnt = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            // ★ 상승 에지 1회 처리: 'ready'일 때만
            if (ready && !high_blocked && hi_cnt >= HI_THR) {
 8001ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03f      	beq.n	8001b6c <PIR_Task+0x10c>
 8001aec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001af0:	f083 0301 	eor.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d038      	beq.n	8001b6c <PIR_Task+0x10c>
 8001afa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d333      	bcc.n	8001b6c <PIR_Task+0x10c>
                s_last_motion = now;
 8001b04:	4a2d      	ldr	r2, [pc, #180]	@ (8001bbc <PIR_Task+0x15c>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6013      	str	r3, [r2, #0]
                printf("Sensing Something\r\n");
 8001b0a:	482d      	ldr	r0, [pc, #180]	@ (8001bc0 <PIR_Task+0x160>)
 8001b0c:	f00c fc82 	bl	800e414 <puts>
                fan_hold = 1;
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <PIR_Task+0x164>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
                FAN_ON();
 8001b16:	f7ff ff63 	bl	80019e0 <FAN_ON>
                LED_ON();
 8001b1a:	f7ff ff49 	bl	80019b0 <LED_ON>
                high_blocked = true;   // 현재 High 구간은 한 번만 처리
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                ready = false;         // 다음 감지를 받기 전엔 재무장 필요
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3020 	strb.w	r3, [r7, #32]
 8001b2a:	e01f      	b.n	8001b6c <PIR_Task+0x10c>
            }
        } else { // LOW
            if (lo_cnt < 255) lo_cnt++;
 8001b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b30:	2bff      	cmp	r3, #255	@ 0xff
 8001b32:	d004      	beq.n	8001b3e <PIR_Task+0xde>
 8001b34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            hi_cnt = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            // High 구간 끝났다고 표시
            if (high_blocked && lo_cnt >= LO_THR) {
 8001b44:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <PIR_Task+0xfc>
 8001b4c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b50:	7dbb      	ldrb	r3, [r7, #22]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d302      	bcc.n	8001b5c <PIR_Task+0xfc>
                high_blocked = false;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            }
            // ★ 충분히 LOW가 지속되면(1s) 다음 감지 '재무장'
            if (lo_cnt >= ARM_LO_THR) {
 8001b5c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b60:	7d7b      	ldrb	r3, [r7, #21]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d302      	bcc.n	8001b6c <PIR_Task+0x10c>
                ready = true;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3020 	strb.w	r3, [r7, #32]
            }
        }

        // 타임아웃: 마지막 감지 후 10초 & 현재 LOW가 안정적일 때 OFF
        if (s_last_motion != 0 &&
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <PIR_Task+0x15c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d018      	beq.n	8001ba6 <PIR_Task+0x146>
            (now - s_last_motion) >= OFF_WINDOW &&
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <PIR_Task+0x15c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
        if (s_last_motion != 0 &&
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d811      	bhi.n	8001ba6 <PIR_Task+0x146>
            (now - s_last_motion) >= OFF_WINDOW &&
 8001b82:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d30c      	bcc.n	8001ba6 <PIR_Task+0x146>
            lo_cnt >= LO_THR) {
            printf("Sensing Nothing\r\n");
 8001b8c:	480e      	ldr	r0, [pc, #56]	@ (8001bc8 <PIR_Task+0x168>)
 8001b8e:	f00c fc41 	bl	800e414 <puts>
            fan_hold = 0;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <PIR_Task+0x164>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
            FAN_OFF();
 8001b98:	f7ff ff2e 	bl	80019f8 <FAN_OFF>
            LED_OFF();
 8001b9c:	f7ff ff14 	bl	80019c8 <LED_OFF>
            s_last_motion = 0;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <PIR_Task+0x15c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
        }

        osDelayUntil(next_wake);
 8001ba6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ba8:	f007 fe8f 	bl	80098ca <osDelayUntil>
        next_wake += period;
 8001bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001bb4:	e77d      	b.n	8001ab2 <PIR_Task+0x52>
 8001bb6:	bf00      	nop
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	20000278 	.word	0x20000278
 8001bc0:	08012c10 	.word	0x08012c10
 8001bc4:	200022d4 	.word	0x200022d4
 8001bc8:	08012c24 	.word	0x08012c24

08001bcc <LED_ON>:
static inline void LED_ON(void){  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); }
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <LED_ON+0x14>)
 8001bd6:	f003 fbdf 	bl	8005398 <HAL_GPIO_WritePin>
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020800 	.word	0x40020800

08001be4 <FAN_ON>:
static inline void FAN_ON(void){  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_SET); }
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	2201      	movs	r2, #1
 8001bea:	2110      	movs	r1, #16
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <FAN_ON+0x14>)
 8001bee:	f003 fbd3 	bl	8005398 <HAL_GPIO_WritePin>
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020400 	.word	0x40020400

08001bfc <is_allowed>:
// 허용 UID (예: 5바이트, BCC 포함) — UART로 찍어본 뒤 그대로 넣으세요
static const uint8_t allowed[][5] = {
	{0x3D,0xD6,0xBA,0x01,0x50},
};

static int is_allowed(const uint8_t *uid5) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  for (size_t i=0;i<sizeof(allowed)/sizeof(allowed[0]);++i)
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e012      	b.n	8001c30 <is_allowed+0x34>
    if (memcmp(uid5, allowed[i], 5)==0) return 1;
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <is_allowed+0x44>)
 8001c14:	4413      	add	r3, r2
 8001c16:	2205      	movs	r2, #5
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f00c fd60 	bl	800e6e0 <memcmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <is_allowed+0x2e>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e006      	b.n	8001c38 <is_allowed+0x3c>
  for (size_t i=0;i<sizeof(allowed)/sizeof(allowed[0]);++i)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0e9      	beq.n	8001c0a <is_allowed+0xe>
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0801341c 	.word	0x0801341c

08001c44 <RFID_Task>:

void RFID_Task(void *argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  MFRC522_Init();
 8001c4c:	f002 fae2 	bl	8004214 <MFRC522_Init>
  //int toggle = 0;
  for(;;){
    uint8_t atqa[2];
    if (MFRC522_Request(PICC_REQIDL, atqa) == MI_OK) {
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	2026      	movs	r0, #38	@ 0x26
 8001c58:	f002 fc2c 	bl	80044b4 <MFRC522_Request>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <RFID_Task+0x4c>
      uint8_t uid[5];
      if (MFRC522_Anticoll(uid) == MI_OK) {
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fc4b 	bl	8004502 <MFRC522_Anticoll>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10e      	bne.n	8001c90 <RFID_Task+0x4c>
       // printf("[RFID] UID=%02X %02X %02X %02X %02X\r\n", uid[0],uid[1],uid[2],uid[3],uid[4]);

        if (is_allowed(uid)) {
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ffc0 	bl	8001bfc <is_allowed>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <RFID_Task+0x4c>
          printf("RFID Sensored!\r\n");
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <RFID_Task+0x54>)
 8001c84:	f00c fbc6 	bl	800e414 <puts>
          // 인증 성공 → PC4 LED, FAN ON (예: 5초)
          LED_ON();
 8001c88:	f7ff ffa0 	bl	8001bcc <LED_ON>
          //fan_hold = 1;
          FAN_ON();
 8001c8c:	f7ff ffaa 	bl	8001be4 <FAN_ON>
          //LED_OFF();
          //FAN_OFF();
        }
      }
    }
    osDelay(100); // 폴링 주기
 8001c90:	2064      	movs	r0, #100	@ 0x64
 8001c92:	f007 fdff 	bl	8009894 <osDelay>
  for(;;){
 8001c96:	e7db      	b.n	8001c50 <RFID_Task+0xc>
 8001c98:	08012c38 	.word	0x08012c38

08001c9c <Servo_Init>:
#define SERVO_MIN_US   500    // 0°
#define SERVO_MID_US   1500   // 90°
#define SERVO_MAX_US   2500   // 180°

void Servo_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <Servo_Init+0x2c>)
 8001ca4:	f005 fe90 	bl	80079c8 <HAL_TIM_PWM_Start>

    // 고급 타이머(TIM1/8)에서 출력이 안 나오면 MOE를 켜야 할 수 있음
    // (대부분 HAL_TIM_PWM_Start로 충분하지만, 안 나오면 아래 한 줄 추가)
    __HAL_TIM_MOE_ENABLE(&htim1);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <Servo_Init+0x2c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <Servo_Init+0x2c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cb6:	645a      	str	r2, [r3, #68]	@ 0x44

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_MIN_US); // 초기 0°
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <Servo_Init+0x2c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200023ac 	.word	0x200023ac

08001ccc <Servo_SetAngle>:

void Servo_SetAngle(int angle)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    if (angle < 0) angle = 0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da01      	bge.n	8001cde <Servo_SetAngle+0x12>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
    if (angle > 180) angle = 180;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2bb4      	cmp	r3, #180	@ 0xb4
 8001ce2:	dd01      	ble.n	8001ce8 <Servo_SetAngle+0x1c>
 8001ce4:	23b4      	movs	r3, #180	@ 0xb4
 8001ce6:	607b      	str	r3, [r7, #4]

    uint32_t pulse = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US) / 180);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <Servo_SetAngle+0x50>)
 8001cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf8:	441a      	add	r2, r3
 8001cfa:	11d2      	asrs	r2, r2, #7
 8001cfc:	17db      	asrs	r3, r3, #31
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001d04:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <Servo_SetAngle+0x54>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	b60b60b7 	.word	0xb60b60b7
 8001d20:	200023ac 	.word	0x200023ac

08001d24 <FAN_ON>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2110      	movs	r1, #16
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <FAN_ON+0x14>)
 8001d2e:	f003 fb33 	bl	8005398 <HAL_GPIO_WritePin>
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40020400 	.word	0x40020400

08001d3c <FAN_OFF>:
static inline void FAN_OFF(void){ HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET); }
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	2200      	movs	r2, #0
 8001d42:	2110      	movs	r1, #16
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <FAN_OFF+0x14>)
 8001d46:	f003 fb27 	bl	8005398 <HAL_GPIO_WritePin>
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020400 	.word	0x40020400

08001d54 <TH_Task>:
#include "LED_FAN.h"
#include <stdio.h>
#include "FanHold.h"

void TH_Task(void *argument)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    // 초기 지연(전원 안정화)
    osDelay(2000);
 8001d5c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d60:	f007 fd98 	bl	8009894 <osDelay>

    for(;;){
        uint8_t t=0, h=0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	72fb      	strb	r3, [r7, #11]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	72bb      	strb	r3, [r7, #10]
        int rc = DHT11_Read(&t, &h);
 8001d6c:	f107 020a 	add.w	r2, r7, #10
 8001d70:	f107 030b 	add.w	r3, r7, #11
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fe5a 	bl	8002a30 <DHT11_Read>
 8001d7c:	60f8      	str	r0, [r7, #12]
        if (rc == 0) {
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d114      	bne.n	8001dae <TH_Task+0x5a>
            printf("[DHT11] T=%uC H=%u%%\r\n", t, h);
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	4619      	mov	r1, r3
 8001d88:	7abb      	ldrb	r3, [r7, #10]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <TH_Task+0x6c>)
 8001d8e:	f00c fad1 	bl	800e334 <iprintf>
            if (t >= 30) {
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	2b1d      	cmp	r3, #29
 8001d96:	d902      	bls.n	8001d9e <TH_Task+0x4a>
                FAN_ON();
 8001d98:	f7ff ffc4 	bl	8001d24 <FAN_ON>
 8001d9c:	e00b      	b.n	8001db6 <TH_Task+0x62>
            } else {
            	if(fan_hold == 0)
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <TH_Task+0x70>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <TH_Task+0x62>
            		FAN_OFF();
 8001da8:	f7ff ffc8 	bl	8001d3c <FAN_OFF>
 8001dac:	e003      	b.n	8001db6 <TH_Task+0x62>
            }
            // LED도 상태표시 원하면:
            // (t>=28) ? LED_ON() : LED_OFF();
        } else {
            printf("[DHT11] Read Fail rc=%d\r\n", rc);
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <TH_Task+0x74>)
 8001db2:	f00c fabf 	bl	800e334 <iprintf>
            // 실패 시 팬 유지/정지 정책 선택:
            // FAN_OFF();
        }

        osDelay(10000); // 2초 주기 (DHT11은 1~2s 주기 권장)
 8001db6:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001dba:	f007 fd6b 	bl	8009894 <osDelay>
    for(;;){
 8001dbe:	e7d1      	b.n	8001d64 <TH_Task+0x10>
 8001dc0:	08012c48 	.word	0x08012c48
 8001dc4:	200022d4 	.word	0x200022d4
 8001dc8:	08012c60 	.word	0x08012c60

08001dcc <set_ryg>:
extern char response[MAX_ESP_RX_BUFFER];

int esp_is_wifi_ready(void);

static void set_ryg(int r, int y, int g)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, r ? GPIO_PIN_SET : GPIO_PIN_RESET); // RED
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dea:	480f      	ldr	r0, [pc, #60]	@ (8001e28 <set_ryg+0x5c>)
 8001dec:	f003 fad4 	bl	8005398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, y ? GPIO_PIN_SET : GPIO_PIN_RESET); // YELLOW
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e02:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <set_ryg+0x5c>)
 8001e04:	f003 fac8 	bl	8005398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, g ? GPIO_PIN_SET : GPIO_PIN_RESET); // GREEN
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e1a:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <set_ryg+0x5c>)
 8001e1c:	f003 fabc 	bl	8005398 <HAL_GPIO_WritePin>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40020400 	.word	0x40020400

08001e2c <json_pick_value>:
// ★ esp.c에 추가한 프로브 함수 원형
int esp_link1_tcp_probe(const char *ip_or_host, int port);

// 간단 JSON 파서: "category":"T1H" ... "obsrValue": 27  또는 "obsrValue":"27"
static int json_pick_value(const char *json, const char *cat, char *out, int out_sz)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b098      	sub	sp, #96	@ 0x60
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
    char key[64];
    snprintf(key, sizeof(key), "\"category\":\"%s\"", cat);
 8001e3a:	f107 0010 	add.w	r0, r7, #16
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4a3a      	ldr	r2, [pc, #232]	@ (8001f2c <json_pick_value+0x100>)
 8001e42:	2140      	movs	r1, #64	@ 0x40
 8001e44:	f00c faee 	bl	800e424 <sniprintf>
    const char *p = strstr(json, key);
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f00c fd18 	bl	800e884 <strstr>
 8001e54:	6538      	str	r0, [r7, #80]	@ 0x50
    if (!p) return -1;
 8001e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <json_pick_value+0x36>
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	e05f      	b.n	8001f22 <json_pick_value+0xf6>

    const char *v = strstr(p, "\"obsrValue\"");
 8001e62:	4933      	ldr	r1, [pc, #204]	@ (8001f30 <json_pick_value+0x104>)
 8001e64:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001e66:	f00c fd0d 	bl	800e884 <strstr>
 8001e6a:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 8001e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <json_pick_value+0x4c>
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e054      	b.n	8001f22 <json_pick_value+0xf6>
    v = strchr(v, ':');
 8001e78:	213a      	movs	r1, #58	@ 0x3a
 8001e7a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e7c:	f00c fc62 	bl	800e744 <strchr>
 8001e80:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 8001e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <json_pick_value+0x62>
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8c:	e049      	b.n	8001f22 <json_pick_value+0xf6>
    v++; // skip ':'
 8001e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e90:	3301      	adds	r3, #1
 8001e92:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // 공백/따옴표 스킵
    while (*v==' ' || *v=='\"') v++;
 8001e94:	e002      	b.n	8001e9c <json_pick_value+0x70>
 8001e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e98:	3301      	adds	r3, #1
 8001e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d0f8      	beq.n	8001e96 <json_pick_value+0x6a>
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b22      	cmp	r3, #34	@ 0x22
 8001eaa:	d0f4      	beq.n	8001e96 <json_pick_value+0x6a>

    // 숫자/텍스트 토큰 끝까지
    const char *e = v;
 8001eac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eae:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*e && *e!='\"' && *e!='\r' && *e!='\n' && *e!=',' && *e!='}') e++;
 8001eb0:	e002      	b.n	8001eb8 <json_pick_value+0x8c>
 8001eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <json_pick_value+0xbc>
 8001ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b22      	cmp	r3, #34	@ 0x22
 8001ec6:	d00f      	beq.n	8001ee8 <json_pick_value+0xbc>
 8001ec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b0d      	cmp	r3, #13
 8001ece:	d00b      	beq.n	8001ee8 <json_pick_value+0xbc>
 8001ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b0a      	cmp	r3, #10
 8001ed6:	d007      	beq.n	8001ee8 <json_pick_value+0xbc>
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ede:	d003      	beq.n	8001ee8 <json_pick_value+0xbc>
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ee6:	d1e4      	bne.n	8001eb2 <json_pick_value+0x86>

    int len = (int)(e - v);
 8001ee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (len <= 0) return -1;
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	dc02      	bgt.n	8001efc <json_pick_value+0xd0>
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e012      	b.n	8001f22 <json_pick_value+0xf6>
    if (len >= out_sz) len = out_sz - 1;
 8001efc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	db02      	blt.n	8001f0a <json_pick_value+0xde>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	657b      	str	r3, [r7, #84]	@ 0x54
    memcpy(out, v, len);
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f00d fc06 	bl	800f722 <memcpy>
    out[len] = 0;
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
    return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3760      	adds	r7, #96	@ 0x60
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08012c7c 	.word	0x08012c7c
 8001f30:	08012c8c 	.word	0x08012c8c

08001f34 <strip_ipd_markers>:

// ESP01 "+IPD,<link>,<len>:" 마커 제거 → 순수 HTTP/JSON만 남김
static int strip_ipd_markers(const char *in, char *out, int out_sz)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
    int w = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *p = in;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 8001f48:	e077      	b.n	800203a <strip_ipd_markers+0x106>
        const char *tag = strstr(p, "+IPD,");
 8001f4a:	4946      	ldr	r1, [pc, #280]	@ (8002064 <strip_ipd_markers+0x130>)
 8001f4c:	6a38      	ldr	r0, [r7, #32]
 8001f4e:	f00c fc99 	bl	800e884 <strstr>
 8001f52:	6138      	str	r0, [r7, #16]
        if (!tag) {
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d11d      	bne.n	8001f96 <strip_ipd_markers+0x62>
            int remain = (int)strlen(p);
 8001f5a:	6a38      	ldr	r0, [r7, #32]
 8001f5c:	f7fe f9a0 	bl	80002a0 <strlen>
 8001f60:	4603      	mov	r3, r0
 8001f62:	61fb      	str	r3, [r7, #28]
            if (remain > out_sz - 1 - w) remain = out_sz - 1 - w;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	dd04      	ble.n	8001f7c <strip_ipd_markers+0x48>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	61fb      	str	r3, [r7, #28]
            memcpy(out + w, p, remain);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	4413      	add	r3, r2
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00d fbcb 	bl	800f722 <memcpy>
            w += remain;
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f94:	e05b      	b.n	800204e <strip_ipd_markers+0x11a>
        }
        int seg = (int)(tag - p);
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	61bb      	str	r3, [r7, #24]
        if (seg > 0) {
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	dd17      	ble.n	8001fd4 <strip_ipd_markers+0xa0>
            if (seg > out_sz - 1 - w) seg = out_sz - 1 - w;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1e5a      	subs	r2, r3, #1
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	dd04      	ble.n	8001fbc <strip_ipd_markers+0x88>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1e5a      	subs	r2, r3, #1
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	61bb      	str	r3, [r7, #24]
            memcpy(out + w, p, seg);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00d fbab 	bl	800f722 <memcpy>
            w += seg;
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        const char *q = tag + 5; // after "+IPD,"
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	3305      	adds	r3, #5
 8001fd8:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // link
 8001fda:	e002      	b.n	8001fe2 <strip_ipd_markers+0xae>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <strip_ipd_markers+0xc6>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ff0:	d903      	bls.n	8001ffa <strip_ipd_markers+0xc6>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b39      	cmp	r3, #57	@ 0x39
 8001ff8:	d9f0      	bls.n	8001fdc <strip_ipd_markers+0xa8>
        if (*q==',') q++;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b2c      	cmp	r3, #44	@ 0x2c
 8002000:	d106      	bne.n	8002010 <strip_ipd_markers+0xdc>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // len
 8002008:	e002      	b.n	8002010 <strip_ipd_markers+0xdc>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <strip_ipd_markers+0xf4>
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b2f      	cmp	r3, #47	@ 0x2f
 800201e:	d903      	bls.n	8002028 <strip_ipd_markers+0xf4>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b39      	cmp	r3, #57	@ 0x39
 8002026:	d9f0      	bls.n	800200a <strip_ipd_markers+0xd6>
        if (*q==':') q++;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b3a      	cmp	r3, #58	@ 0x3a
 800202e:	d102      	bne.n	8002036 <strip_ipd_markers+0x102>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
        p = q;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <strip_ipd_markers+0x11a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3b01      	subs	r3, #1
 8002046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002048:	429a      	cmp	r2, r3
 800204a:	f6ff af7e 	blt.w	8001f4a <strip_ipd_markers+0x16>
    }
    out[w] = 0;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	4413      	add	r3, r2
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
    return w;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800205a:	4618      	mov	r0, r3
 800205c:	3728      	adds	r7, #40	@ 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	08012c98 	.word	0x08012c98

08002068 <dechunk_simple>:

// Transfer-Encoding: chunked 간단 디청크
static int dechunk_simple(const char *in, char *out, int out_sz)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
    int w = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
    const char *p = in;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	61bb      	str	r3, [r7, #24]
    while (*p) {
 800207c:	e044      	b.n	8002108 <dechunk_simple+0xa0>
        int sz = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
        if (sscanf(p, "%x", &sz) != 1) break;
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	461a      	mov	r2, r3
 8002088:	492a      	ldr	r1, [pc, #168]	@ (8002134 <dechunk_simple+0xcc>)
 800208a:	69b8      	ldr	r0, [r7, #24]
 800208c:	f00c fa22 	bl	800e4d4 <siscanf>
 8002090:	4603      	mov	r3, r0
 8002092:	2b01      	cmp	r3, #1
 8002094:	d13d      	bne.n	8002112 <dechunk_simple+0xaa>
        const char *nl = strstr(p, "\r\n");
 8002096:	4928      	ldr	r1, [pc, #160]	@ (8002138 <dechunk_simple+0xd0>)
 8002098:	69b8      	ldr	r0, [r7, #24]
 800209a:	f00c fbf3 	bl	800e884 <strstr>
 800209e:	6178      	str	r0, [r7, #20]
        if (!nl) break;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d037      	beq.n	8002116 <dechunk_simple+0xae>
        p = nl + 2;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3302      	adds	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
        if (sz == 0) break;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d033      	beq.n	800211a <dechunk_simple+0xb2>
        if (w + sz > out_sz - 1) sz = out_sz - 1 - w;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dc04      	bgt.n	80020c8 <dechunk_simple+0x60>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	613b      	str	r3, [r7, #16]
        if (sz <= 0) break;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	dd27      	ble.n	800211e <dechunk_simple+0xb6>
        memcpy(out + w, p, sz);
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	4413      	add	r3, r2
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	4618      	mov	r0, r3
 80020da:	f00d fb22 	bl	800f722 <memcpy>
        w += sz;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	61fb      	str	r3, [r7, #28]
        p += sz;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	461a      	mov	r2, r3
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4413      	add	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if (p[0]=='\r' && p[1]=='\n') p += 2;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b0d      	cmp	r3, #13
 80020f6:	d107      	bne.n	8002108 <dechunk_simple+0xa0>
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	3301      	adds	r3, #1
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b0a      	cmp	r3, #10
 8002100:	d102      	bne.n	8002108 <dechunk_simple+0xa0>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3302      	adds	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
    while (*p) {
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1b6      	bne.n	800207e <dechunk_simple+0x16>
 8002110:	e006      	b.n	8002120 <dechunk_simple+0xb8>
        if (sscanf(p, "%x", &sz) != 1) break;
 8002112:	bf00      	nop
 8002114:	e004      	b.n	8002120 <dechunk_simple+0xb8>
        if (!nl) break;
 8002116:	bf00      	nop
 8002118:	e002      	b.n	8002120 <dechunk_simple+0xb8>
        if (sz == 0) break;
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <dechunk_simple+0xb8>
        if (sz <= 0) break;
 800211e:	bf00      	nop
    }
    out[w] = 0;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4413      	add	r3, r2
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
    return w;
 800212a:	69fb      	ldr	r3, [r7, #28]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	08012ca0 	.word	0x08012ca0
 8002138:	08012ca4 	.word	0x08012ca4

0800213c <kma_ultra_fcst_base>:

static int kma_ultra_fcst_base(char *date8, char *time4)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	@ 0x30
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
    time_t t;
    // NTP에서 얻은 epoch 사용
    if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <kma_ultra_fcst_base+0xb0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f04f 31ff 	mov.w	r1, #4294967295
 800214e:	4618      	mov	r0, r3
 8002150:	f007 fc6e 	bl	8009a30 <osMutexAcquire>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <kma_ultra_fcst_base+0x34>
        t = ntp_time;
 800215a:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <kma_ultra_fcst_base+0xb4>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	e9c7 2302 	strd	r2, r3, [r7, #8]
        osMutexRelease(NTP_MutexHandle);
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <kma_ultra_fcst_base+0xb0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f007 fcac 	bl	8009ac6 <osMutexRelease>
 800216e:	e006      	b.n	800217e <kma_ultra_fcst_base+0x42>
    } else {
        t = time(NULL); // fallback
 8002170:	2000      	movs	r0, #0
 8002172:	f00c ff3f 	bl	800eff4 <time>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    struct tm *k = localtime(&t);
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4618      	mov	r0, r3
 8002184:	f00c fb9c 	bl	800e8c0 <localtime>
 8002188:	6278      	str	r0, [r7, #36]	@ 0x24
    int yyyy = k->tm_year + 1900;
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8002192:	623b      	str	r3, [r7, #32]
    int mm   = k->tm_mon + 1;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
    int dd   = k->tm_mday;
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
    int hh   = k->tm_hour;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	617b      	str	r3, [r7, #20]
    int mi   = k->tm_min;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]

    mi = (mi / 10) * 10; //10분단위로 내림
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <kma_ultra_fcst_base+0xb8>)
 80021b2:	fb82 1203 	smull	r1, r2, r2, r3
 80021b6:	1092      	asrs	r2, r2, #2
 80021b8:	17db      	asrs	r3, r3, #31
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	613b      	str	r3, [r7, #16]

    // 1시간 단위라서 분은 무시
    sprintf(date8, "%04d%02d%02d", yyyy, mm, dd);
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	490a      	ldr	r1, [pc, #40]	@ (80021f8 <kma_ultra_fcst_base+0xbc>)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f00c f95d 	bl	800e490 <siprintf>
    sprintf(time4, "%02d%02d", hh, mi);   // hh시 정각
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4908      	ldr	r1, [pc, #32]	@ (80021fc <kma_ultra_fcst_base+0xc0>)
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f00c f957 	bl	800e490 <siprintf>
    //printf("%02d:%02d:00->", hh, mi);
    return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3728      	adds	r7, #40	@ 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200024a8 	.word	0x200024a8
 80021f0:	200022d8 	.word	0x200022d8
 80021f4:	66666667 	.word	0x66666667
 80021f8:	08012ca8 	.word	0x08012ca8
 80021fc:	08012cb8 	.word	0x08012cb8

08002200 <pty_text>:

static const char* pty_text(int code)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    switch (code) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b07      	cmp	r3, #7
 800220c:	d822      	bhi.n	8002254 <pty_text+0x54>
 800220e:	a201      	add	r2, pc, #4	@ (adr r2, 8002214 <pty_text+0x14>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002235 	.word	0x08002235
 8002218:	08002239 	.word	0x08002239
 800221c:	0800223d 	.word	0x0800223d
 8002220:	08002241 	.word	0x08002241
 8002224:	08002245 	.word	0x08002245
 8002228:	08002249 	.word	0x08002249
 800222c:	0800224d 	.word	0x0800224d
 8002230:	08002251 	.word	0x08002251
        case 0: return "Sun";
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <pty_text+0x64>)
 8002236:	e00e      	b.n	8002256 <pty_text+0x56>
        case 1: return "Rain";
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <pty_text+0x68>)
 800223a:	e00c      	b.n	8002256 <pty_text+0x56>
        case 2: return "Rain/Snow";
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <pty_text+0x6c>)
 800223e:	e00a      	b.n	8002256 <pty_text+0x56>
        case 3: return "Snow";
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <pty_text+0x70>)
 8002242:	e008      	b.n	8002256 <pty_text+0x56>
        case 4: return "Shower";
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <pty_text+0x74>)
 8002246:	e006      	b.n	8002256 <pty_text+0x56>
        case 5: return "RainDrop";
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <pty_text+0x78>)
 800224a:	e004      	b.n	8002256 <pty_text+0x56>
        case 6: return "RainDrop/SnowFlying";
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <pty_text+0x7c>)
 800224e:	e002      	b.n	8002256 <pty_text+0x56>
        case 7: return "SnowFlying";
 8002250:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <pty_text+0x80>)
 8002252:	e000      	b.n	8002256 <pty_text+0x56>
        default: return "?";
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <pty_text+0x84>)
    }
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	08012cc4 	.word	0x08012cc4
 8002268:	08012cc8 	.word	0x08012cc8
 800226c:	08012cd0 	.word	0x08012cd0
 8002270:	08012cdc 	.word	0x08012cdc
 8002274:	08012ce4 	.word	0x08012ce4
 8002278:	08012cec 	.word	0x08012cec
 800227c:	08012cf8 	.word	0x08012cf8
 8002280:	08012d0c 	.word	0x08012d0c
 8002284:	08012d18 	.word	0x08012d18

08002288 <Weather_Task>:


void Weather_Task(void *argument)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	f6ad 3db8 	subw	sp, sp, #3000	@ 0xbb8
 800228e:	af04      	add	r7, sp, #16
 8002290:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 8002294:	f6a3 33a4 	subw	r3, r3, #2980	@ 0xba4
 8002298:	6018      	str	r0, [r3, #0]
    const char *KMA_HOST = "apihub.kma.go.kr";
 800229a:	4b7c      	ldr	r3, [pc, #496]	@ (800248c <Weather_Task+0x204>)
 800229c:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
    const char *KMA_IP   = "203.247.96.25";   // nslookup 결과
 80022a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002490 <Weather_Task+0x208>)
 80022a2:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
    const int NX = 55, NY = 126;              // 격자 좌표(원하면 변경)
 80022a6:	2337      	movs	r3, #55	@ 0x37
 80022a8:	f8c7 3b80 	str.w	r3, [r7, #2944]	@ 0xb80
 80022ac:	237e      	movs	r3, #126	@ 0x7e
 80022ae:	f8c7 3b7c 	str.w	r3, [r7, #2940]	@ 0xb7c
    int prev = -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	f8c7 3ba4 	str.w	r3, [r7, #2980]	@ 0xba4
    uint16_t length;

    for (;;)
    {
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80022ba:	f001 fa0f 	bl	80036dc <esp_is_wifi_ready>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <Weather_Task+0x46>
 80022c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022c8:	f008 fe5e 	bl	800af88 <vTaskDelay>
 80022cc:	e2ec      	b.n	80028a8 <Weather_Task+0x620>
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 80022ce:	4b71      	ldr	r3, [pc, #452]	@ (8002494 <Weather_Task+0x20c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f04f 31ff 	mov.w	r1, #4294967295
 80022d6:	4618      	mov	r0, r3
 80022d8:	f007 fbaa 	bl	8009a30 <osMutexAcquire>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 82de 	bne.w	80028a0 <Weather_Task+0x618>
            // 1) 링크1 열기
            char cmd[128];
            sprintf(cmd, "AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", KMA_IP);
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	f8d7 2b84 	ldr.w	r2, [r7, #2948]	@ 0xb84
 80022ec:	496a      	ldr	r1, [pc, #424]	@ (8002498 <Weather_Task+0x210>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00c f8ce 	bl	800e490 <siprintf>
            if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) == 0) {
 80022f4:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 80022f8:	f107 0008 	add.w	r0, r7, #8
 80022fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002300:	4966      	ldr	r1, [pc, #408]	@ (800249c <Weather_Task+0x214>)
 8002302:	f000 fc5d 	bl	8002bc0 <esp_at_command>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 82c1 	bne.w	8002890 <Weather_Task+0x608>
                //printf("[WEATHER] Link1 TCP connect OK\r\n");

                // 2) HTTP GET 문자열 준비
                char http_req[640];
                char base_date[9], base_time[5];
                kma_ultra_fcst_base(base_date, base_time);
 800230e:	f607 3248 	addw	r2, r7, #2888	@ 0xb48
 8002312:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff0f 	bl	800213c <kma_ultra_fcst_base>

                sprintf(http_req,
 800231e:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8002322:	f507 6235 	add.w	r2, r7, #2896	@ 0xb50
 8002326:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800232a:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	f8d7 3b80 	ldr.w	r3, [r7, #2944]	@ 0xb80
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	460b      	mov	r3, r1
 800233e:	4958      	ldr	r1, [pc, #352]	@ (80024a0 <Weather_Task+0x218>)
 8002340:	f00c f8a6 	bl	800e490 <siprintf>
                    "Connection: close\r\n\r\n",
                    base_date, base_time, NX, NY, KMA_HOST);


                // 3) AT+CIPSEND=1,<len>
                sprintf(cmd, "AT+CIPSEND=1,%d\r\n", (int)strlen(http_req));
 8002344:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002348:	4618      	mov	r0, r3
 800234a:	f7fd ffa9 	bl	80002a0 <strlen>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4953      	ldr	r1, [pc, #332]	@ (80024a4 <Weather_Task+0x21c>)
 8002358:	4618      	mov	r0, r3
 800235a:	f00c f899 	bl	800e490 <siprintf>
                if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 2000) == 0) {
 800235e:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8002362:	f107 0008 	add.w	r0, r7, #8
 8002366:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800236a:	494c      	ldr	r1, [pc, #304]	@ (800249c <Weather_Task+0x214>)
 800236c:	f000 fc28 	bl	8002bc0 <esp_at_command>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 8283 	bne.w	800287e <Weather_Task+0x5f6>
                    // (권장) 프롬프트 안정화
                    vTaskDelay(pdMS_TO_TICKS(50));
 8002378:	2032      	movs	r0, #50	@ 0x32
 800237a:	f008 fe05 	bl	800af88 <vTaskDelay>

                    // 4) payload 송신 (단순 송신)
                    HAL_UART_Transmit(&huart6, (uint8_t*)http_req, strlen(http_req), 500);
 800237e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002382:	4618      	mov	r0, r3
 8002384:	f7fd ff8c 	bl	80002a0 <strlen>
 8002388:	4603      	mov	r3, r0
 800238a:	b29a      	uxth	r2, r3
 800238c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002390:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002394:	4844      	ldr	r0, [pc, #272]	@ (80024a8 <Weather_Task+0x220>)
 8002396:	f006 f933 	bl	8008600 <HAL_UART_Transmit>

                    // 5) 응답 수신: cb_data에서 rx로 누적 수집 (최대 8초, CLOSED 감지 시 조기 종료)
                    char rx[MAX_ESP_RX_BUFFER];
                    int  copied = 0, elapsed = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 3ba0 	str.w	r3, [r7, #2976]	@ 0xba0
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
                    memset(rx, 0, sizeof(rx));
 80023a6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80023aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00c f9bf 	bl	800e734 <memset>

                    for (;;) {
                        // CLOSED 들어오면 서버가 응답 끝내고 소켓 닫았다는 의미
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 80023b6:	493d      	ldr	r1, [pc, #244]	@ (80024ac <Weather_Task+0x224>)
 80023b8:	483d      	ldr	r0, [pc, #244]	@ (80024b0 <Weather_Task+0x228>)
 80023ba:	f00c fa63 	bl	800e884 <strstr>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d142      	bne.n	800244a <Weather_Task+0x1c2>

                        if (cb_data.length > 0) {
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <Weather_Task+0x228>)
 80023c6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d02f      	beq.n	800242e <Weather_Task+0x1a6>
                            taskENTER_CRITICAL();
 80023ce:	f00a f8eb 	bl	800c5a8 <vPortEnterCritical>
                            int n = cb_data.length;
 80023d2:	4b37      	ldr	r3, [pc, #220]	@ (80024b0 <Weather_Task+0x228>)
 80023d4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80023d8:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
                            if (n > (int)sizeof(rx) - 1 - copied) n = sizeof(rx) - 1 - copied;
 80023dc:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 80023e0:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 80023e4:	3307      	adds	r3, #7
 80023e6:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	@ 0xb98
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dd06      	ble.n	80023fc <Weather_Task+0x174>
 80023ee:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 80023f2:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 80023f6:	3307      	adds	r3, #7
 80023f8:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
                            memcpy(rx + copied, cb_data.buf, n);
 80023fc:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 8002400:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8002404:	4413      	add	r3, r2
 8002406:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	@ 0xb98
 800240a:	4929      	ldr	r1, [pc, #164]	@ (80024b0 <Weather_Task+0x228>)
 800240c:	4618      	mov	r0, r3
 800240e:	f00d f988 	bl	800f722 <memcpy>
                            cb_data.length = 0;   // 소비
 8002412:	4b27      	ldr	r3, [pc, #156]	@ (80024b0 <Weather_Task+0x228>)
 8002414:	2200      	movs	r2, #0
 8002416:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
                            taskEXIT_CRITICAL();
 800241a:	f00a f8f7 	bl	800c60c <vPortExitCritical>
                            copied += n;
 800241e:	f8d7 2ba0 	ldr.w	r2, [r7, #2976]	@ 0xba0
 8002422:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8002426:	4413      	add	r3, r2
 8002428:	f8c7 3ba0 	str.w	r3, [r7, #2976]	@ 0xba0
 800242c:	e7c3      	b.n	80023b6 <Weather_Task+0x12e>
                        } else {
                            vTaskDelay(pdMS_TO_TICKS(20));
 800242e:	2014      	movs	r0, #20
 8002430:	f008 fdaa 	bl	800af88 <vTaskDelay>
                            elapsed += 20;
 8002434:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 8002438:	3314      	adds	r3, #20
 800243a:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 800243e:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 8002442:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002446:	da02      	bge.n	800244e <Weather_Task+0x1c6>
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8002448:	e7b5      	b.n	80023b6 <Weather_Task+0x12e>
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <Weather_Task+0x1c8>
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 800244e:	bf00      	nop
                    // 디버그: 원본 앞머리
                   // { char head[200]={0}; snprintf(head,sizeof(head)-1,"%.*s",180,rx);
                   //   printf("[WEATHER] RAW head: %s\r\n", head); }

					// ---- HTTP 헤더/본문 분리 ----
					char *http = strstr(rx, "HTTP/1.1 ");
 8002450:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002454:	4917      	ldr	r1, [pc, #92]	@ (80024b4 <Weather_Task+0x22c>)
 8002456:	4618      	mov	r0, r3
 8002458:	f00c fa14 	bl	800e884 <strstr>
 800245c:	f8c7 0b78 	str.w	r0, [r7, #2936]	@ 0xb78
					char *hdr_end = http ? strstr(http, "\r\n\r\n") : NULL;
 8002460:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <Weather_Task+0x1ee>
 8002468:	4913      	ldr	r1, [pc, #76]	@ (80024b8 <Weather_Task+0x230>)
 800246a:	f8d7 0b78 	ldr.w	r0, [r7, #2936]	@ 0xb78
 800246e:	f00c fa09 	bl	800e884 <strstr>
 8002472:	4603      	mov	r3, r0
 8002474:	e000      	b.n	8002478 <Weather_Task+0x1f0>
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3b74 	str.w	r3, [r7, #2932]	@ 0xb74
					char *body = hdr_end ? (hdr_end + 4) : rx;
 800247c:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <Weather_Task+0x234>
 8002484:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8002488:	3304      	adds	r3, #4
 800248a:	e019      	b.n	80024c0 <Weather_Task+0x238>
 800248c:	08012d1c 	.word	0x08012d1c
 8002490:	08012d30 	.word	0x08012d30
 8002494:	200024a4 	.word	0x200024a4
 8002498:	08012d40 	.word	0x08012d40
 800249c:	20001294 	.word	0x20001294
 80024a0:	08012d60 	.word	0x08012d60
 80024a4:	08012e34 	.word	0x08012e34
 80024a8:	2000243c 	.word	0x2000243c
 80024ac:	08012e48 	.word	0x08012e48
 80024b0:	20001acc 	.word	0x20001acc
 80024b4:	08012e50 	.word	0x08012e50
 80024b8:	08012e5c 	.word	0x08012e5c
 80024bc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80024c0:	f8c7 3b70 	str.w	r3, [r7, #2928]	@ 0xb70

					// 헤더에서 chunked 여부 확인
					int is_chunked = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
					if (http && hdr_end) {
 80024ca:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01e      	beq.n	8002510 <Weather_Task+0x288>
 80024d2:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01a      	beq.n	8002510 <Weather_Task+0x288>
						char save = *hdr_end; *hdr_end = 0;
 80024da:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f887 3b6f 	strb.w	r3, [r7, #2927]	@ 0xb6f
 80024e4:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
						is_chunked = (strstr(http, "Transfer-Encoding: chunked") != NULL);
 80024ec:	49c6      	ldr	r1, [pc, #792]	@ (8002808 <Weather_Task+0x580>)
 80024ee:	f8d7 0b78 	ldr.w	r0, [r7, #2936]	@ 0xb78
 80024f2:	f00c f9c7 	bl	800e884 <strstr>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
						*hdr_end = save;
 8002506:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 800250a:	f897 2b6f 	ldrb.w	r2, [r7, #2927]	@ 0xb6f
 800250e:	701a      	strb	r2, [r3, #0]
					}

					// 1) +IPD 마커 제거
					static char no_ipd[MAX_ESP_RX_BUFFER];
					strip_ipd_markers(body, no_ipd, sizeof(no_ipd));
 8002510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002514:	49bd      	ldr	r1, [pc, #756]	@ (800280c <Weather_Task+0x584>)
 8002516:	f8d7 0b70 	ldr.w	r0, [r7, #2928]	@ 0xb70
 800251a:	f7ff fd0b 	bl	8001f34 <strip_ipd_markers>

					// 2) (필요시) 디청크
					static char json_buf[MAX_ESP_RX_BUFFER];
					const char *json_src = no_ipd;
 800251e:	4bbb      	ldr	r3, [pc, #748]	@ (800280c <Weather_Task+0x584>)
 8002520:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
					if (is_chunked) {
 8002524:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <Weather_Task+0x2b6>
						dechunk_simple(no_ipd, json_buf, sizeof(json_buf));
 800252c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002530:	49b7      	ldr	r1, [pc, #732]	@ (8002810 <Weather_Task+0x588>)
 8002532:	48b6      	ldr	r0, [pc, #728]	@ (800280c <Weather_Task+0x584>)
 8002534:	f7ff fd98 	bl	8002068 <dechunk_simple>
						json_src = json_buf;
 8002538:	4bb5      	ldr	r3, [pc, #724]	@ (8002810 <Weather_Task+0x588>)
 800253a:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
					}

                    if (strstr(rx, "HTTP/1.1 200")) {
 800253e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002542:	49b4      	ldr	r1, [pc, #720]	@ (8002814 <Weather_Task+0x58c>)
 8002544:	4618      	mov	r0, r3
 8002546:	f00c f99d 	bl	800e884 <strstr>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8191 	beq.w	8002874 <Weather_Task+0x5ec>
                        char t1h[16] = "?", reh[16] = "?", pty[16] = "?", rn1[16] = "?";
 8002552:	233f      	movs	r3, #63	@ 0x3f
 8002554:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
 8002558:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	233f      	movs	r3, #63	@ 0x3f
 8002566:	f8c7 3b28 	str.w	r3, [r7, #2856]	@ 0xb28
 800256a:	f607 332c 	addw	r3, r7, #2860	@ 0xb2c
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	233f      	movs	r3, #63	@ 0x3f
 8002578:	f8c7 3b18 	str.w	r3, [r7, #2840]	@ 0xb18
 800257c:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	233f      	movs	r3, #63	@ 0x3f
 800258a:	f8c7 3b08 	str.w	r3, [r7, #2824]	@ 0xb08
 800258e:	f607 330c 	addw	r3, r7, #2828	@ 0xb0c
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
                        json_pick_value(json_src, "T1H", t1h, sizeof(t1h));
 800259a:	f607 3238 	addw	r2, r7, #2872	@ 0xb38
 800259e:	2310      	movs	r3, #16
 80025a0:	499d      	ldr	r1, [pc, #628]	@ (8002818 <Weather_Task+0x590>)
 80025a2:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 80025a6:	f7ff fc41 	bl	8001e2c <json_pick_value>
                        json_pick_value(json_src, "REH", reh, sizeof(reh));
 80025aa:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 80025ae:	2310      	movs	r3, #16
 80025b0:	499a      	ldr	r1, [pc, #616]	@ (800281c <Weather_Task+0x594>)
 80025b2:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 80025b6:	f7ff fc39 	bl	8001e2c <json_pick_value>
                        json_pick_value(json_src, "PTY", pty, sizeof(pty));
 80025ba:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 80025be:	2310      	movs	r3, #16
 80025c0:	4997      	ldr	r1, [pc, #604]	@ (8002820 <Weather_Task+0x598>)
 80025c2:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 80025c6:	f7ff fc31 	bl	8001e2c <json_pick_value>
                        json_pick_value(json_src, "RN1", rn1, sizeof(rn1));
 80025ca:	f607 3208 	addw	r2, r7, #2824	@ 0xb08
 80025ce:	2310      	movs	r3, #16
 80025d0:	4994      	ldr	r1, [pc, #592]	@ (8002824 <Weather_Task+0x59c>)
 80025d2:	f8d7 0b90 	ldr.w	r0, [r7, #2960]	@ 0xb90
 80025d6:	f7ff fc29 	bl	8001e2c <json_pick_value>

                        int pty_code = atoi(pty);
 80025da:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80025de:	4618      	mov	r0, r3
 80025e0:	f00a faf5 	bl	800cbce <atoi>
 80025e4:	f8c7 0b68 	str.w	r0, [r7, #2920]	@ 0xb68
                        float temp_c = atof(t1h);  // 현재기온
 80025e8:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00a faeb 	bl	800cbc8 <atof>
 80025f2:	ec53 2b10 	vmov	r2, r3, d0
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fb0d 	bl	8000c18 <__aeabi_d2f>
 80025fe:	4603      	mov	r3, r0
 8002600:	f607 3264 	addw	r2, r7, #2916	@ 0xb64
 8002604:	6013      	str	r3, [r2, #0]
                        float hum = atoi(reh);     // 현재습도
 8002606:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800260a:	4618      	mov	r0, r3
 800260c:	f00a fadf 	bl	800cbce <atoi>
 8002610:	ee07 0a90 	vmov	s15, r0
 8002614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002618:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800261c:	edc3 7a00 	vstr	s15, [r3]

                        printf("[WEATHER][Gangseo-gu] T=%s°C, H=%s%%, RAIN=%s, RN1=%smm\r\n",
 8002620:	f8d7 0b68 	ldr.w	r0, [r7, #2920]	@ 0xb68
 8002624:	f7ff fdec 	bl	8002200 <pty_text>
 8002628:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 800262c:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8002630:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4603      	mov	r3, r0
 8002638:	487b      	ldr	r0, [pc, #492]	@ (8002828 <Weather_Task+0x5a0>)
 800263a:	f00b fe7b 	bl	800e334 <iprintf>
                               t1h, reh, pty_text(pty_code), rn1);

                        if (prev != pty_code) {						// default:0, 비가오면 0, 비가안오면 90
 800263e:	f8d7 2ba4 	ldr.w	r2, [r7, #2980]	@ 0xba4
 8002642:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002646:	429a      	cmp	r2, r3
 8002648:	d00d      	beq.n	8002666 <Weather_Task+0x3de>
                             prev = pty_code;
 800264a:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 800264e:	f8c7 3ba4 	str.w	r3, [r7, #2980]	@ 0xba4
                             Servo_SetAngle(pty_code ? 90 : 0);
 8002652:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <Weather_Task+0x3d6>
 800265a:	235a      	movs	r3, #90	@ 0x5a
 800265c:	e000      	b.n	8002660 <Weather_Task+0x3d8>
 800265e:	2300      	movs	r3, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb33 	bl	8001ccc <Servo_SetAngle>
                         }

                        int ok = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
                        if (!(temp_c > -50.0f && temp_c < 70.0f)) ok = 0;   // 말이 되는 기온 범위
 800266c:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 800282c <Weather_Task+0x5a4>
 8002678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	bfcc      	ite	gt
 8002682:	2301      	movgt	r3, #1
 8002684:	2300      	movle	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f083 0301 	eor.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d112      	bne.n	80026b8 <Weather_Task+0x430>
 8002692:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002830 <Weather_Task+0x5a8>
 800269e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	bf4c      	ite	mi
 80026a8:	2301      	movmi	r3, #1
 80026aa:	2300      	movpl	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <Weather_Task+0x436>
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
                        if (!(hum > 0 && hum <= 100))       ok = 0;  // 습도 0~100%
 80026be:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	bfcc      	ite	gt
 80026d0:	2301      	movgt	r3, #1
 80026d2:	2300      	movle	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d112      	bne.n	8002706 <Weather_Task+0x47e>
 80026e0:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8002834 <Weather_Task+0x5ac>
 80026ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	bf94      	ite	ls
 80026f6:	2301      	movls	r3, #1
 80026f8:	2300      	movhi	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f083 0301 	eor.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <Weather_Task+0x484>
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
                        if (!(pty_code >= 0 && pty_code <= 7)) ok = 0;  // PTY 0..7
 800270c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002710:	2b00      	cmp	r3, #0
 8002712:	db03      	blt.n	800271c <Weather_Task+0x494>
 8002714:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002718:	2b07      	cmp	r3, #7
 800271a:	dd02      	ble.n	8002722 <Weather_Task+0x49a>
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c

                        // ★ LCD용 공유 값 업데이트
                        if (ok) {
 8002722:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d028      	beq.n	800277c <Weather_Task+0x4f4>
							if (osMutexAcquire(Weather_MutexHandle, osWaitForever) == osOK) {
 800272a:	4b43      	ldr	r3, [pc, #268]	@ (8002838 <Weather_Task+0x5b0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f04f 31ff 	mov.w	r1, #4294967295
 8002732:	4618      	mov	r0, r3
 8002734:	f007 f97c 	bl	8009a30 <osMutexAcquire>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11e      	bne.n	800277c <Weather_Task+0x4f4>
								g_t1h = (float)atof(t1h);
 800273e:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8002742:	4618      	mov	r0, r3
 8002744:	f00a fa40 	bl	800cbc8 <atof>
 8002748:	ec53 2b10 	vmov	r2, r3, d0
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f7fe fa62 	bl	8000c18 <__aeabi_d2f>
 8002754:	4603      	mov	r3, r0
 8002756:	4a39      	ldr	r2, [pc, #228]	@ (800283c <Weather_Task+0x5b4>)
 8002758:	6013      	str	r3, [r2, #0]
								g_reh = atoi(reh);
 800275a:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800275e:	4618      	mov	r0, r3
 8002760:	f00a fa35 	bl	800cbce <atoi>
 8002764:	4603      	mov	r3, r0
 8002766:	4a36      	ldr	r2, [pc, #216]	@ (8002840 <Weather_Task+0x5b8>)
 8002768:	6013      	str	r3, [r2, #0]
								g_pty = pty_code;
 800276a:	4a36      	ldr	r2, [pc, #216]	@ (8002844 <Weather_Task+0x5bc>)
 800276c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002770:	6013      	str	r3, [r2, #0]
								osMutexRelease(Weather_MutexHandle);
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <Weather_Task+0x5b0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f007 f9a5 	bl	8009ac6 <osMutexRelease>
							}
                        }

                        int is_precip = (pty_code != 0);
 800277c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c

                        if (is_precip || temp_c >= 35.0f) {
 800278e:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <Weather_Task+0x524>
 8002796:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002848 <Weather_Task+0x5c0>
 80027a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	db11      	blt.n	80027d0 <Weather_Task+0x548>
                            set_ryg(1, 0, 0);  // RED
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff fb0b 	bl	8001dcc <set_ryg>
                            printf("[RYG] RED ON (precip=%d, T=%.1f)\r\n", is_precip, temp_c);
 80027b6:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	f7fd fedc 	bl	8000578 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	f8d7 1b5c 	ldr.w	r1, [r7, #2908]	@ 0xb5c
 80027c8:	4820      	ldr	r0, [pc, #128]	@ (800284c <Weather_Task+0x5c4>)
 80027ca:	f00b fdb3 	bl	800e334 <iprintf>
 80027ce:	e056      	b.n	800287e <Weather_Task+0x5f6>
                        } else if (temp_c >= 30.0f) {
 80027d0:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 80027d4:	edd3 7a00 	vldr	s15, [r3]
 80027d8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80027dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	db36      	blt.n	8002854 <Weather_Task+0x5cc>
                            set_ryg(0, 1, 0);  // YELLOW
 80027e6:	2200      	movs	r2, #0
 80027e8:	2101      	movs	r1, #1
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff faee 	bl	8001dcc <set_ryg>
                            printf("[RYG] YELLOW ON (T=%.1f)\r\n", temp_c);
 80027f0:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	f7fd febf 	bl	8000578 <__aeabi_f2d>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4814      	ldr	r0, [pc, #80]	@ (8002850 <Weather_Task+0x5c8>)
 8002800:	f00b fd98 	bl	800e334 <iprintf>
 8002804:	e03b      	b.n	800287e <Weather_Task+0x5f6>
 8002806:	bf00      	nop
 8002808:	08012e64 	.word	0x08012e64
 800280c:	20000280 	.word	0x20000280
 8002810:	20000a80 	.word	0x20000a80
 8002814:	08012e80 	.word	0x08012e80
 8002818:	08012e90 	.word	0x08012e90
 800281c:	08012e94 	.word	0x08012e94
 8002820:	08012e98 	.word	0x08012e98
 8002824:	08012e9c 	.word	0x08012e9c
 8002828:	08012ea0 	.word	0x08012ea0
 800282c:	c2480000 	.word	0xc2480000
 8002830:	428c0000 	.word	0x428c0000
 8002834:	42c80000 	.word	0x42c80000
 8002838:	200024ac 	.word	0x200024ac
 800283c:	2000027c 	.word	0x2000027c
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004
 8002848:	420c0000 	.word	0x420c0000
 800284c:	08012edc 	.word	0x08012edc
 8002850:	08012f00 	.word	0x08012f00
                        } else {
                            set_ryg(0, 0, 1);  // GREEN
 8002854:	2201      	movs	r2, #1
 8002856:	2100      	movs	r1, #0
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fab7 	bl	8001dcc <set_ryg>
                            printf("[RYG] GREEN ON (T=%.1f)\r\n", temp_c);
 800285e:	f607 3364 	addw	r3, r7, #2916	@ 0xb64
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	f7fd fe88 	bl	8000578 <__aeabi_f2d>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	480f      	ldr	r0, [pc, #60]	@ (80028ac <Weather_Task+0x624>)
 800286e:	f00b fd61 	bl	800e334 <iprintf>
 8002872:	e004      	b.n	800287e <Weather_Task+0x5f6>
                        }
                    } else {
                        printf("[WEATHER] HTTP not 200 (len=%d)\r\n", copied);
 8002874:	f8d7 1ba0 	ldr.w	r1, [r7, #2976]	@ 0xba0
 8002878:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <Weather_Task+0x628>)
 800287a:	f00b fd5b 	bl	800e334 <iprintf>
                    }
                }
                // 6) 링크1 닫기
                esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
 800287e:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8002882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002886:	490b      	ldr	r1, [pc, #44]	@ (80028b4 <Weather_Task+0x62c>)
 8002888:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <Weather_Task+0x630>)
 800288a:	f000 f999 	bl	8002bc0 <esp_at_command>
 800288e:	e002      	b.n	8002896 <Weather_Task+0x60e>
            } else {
                printf("[WEATHER] Link1 TCP connect FAIL\r\n");
 8002890:	480a      	ldr	r0, [pc, #40]	@ (80028bc <Weather_Task+0x634>)
 8002892:	f00b fdbf 	bl	800e414 <puts>
            }

            osMutexRelease(ESP_MutexHandle);
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <Weather_Task+0x638>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f007 f913 	bl	8009ac6 <osMutexRelease>
        }

        vTaskDelay(pdMS_TO_TICKS(60000));  // 60초 주기
 80028a0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80028a4:	f008 fb70 	bl	800af88 <vTaskDelay>
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80028a8:	e507      	b.n	80022ba <Weather_Task+0x32>
 80028aa:	bf00      	nop
 80028ac:	08012f1c 	.word	0x08012f1c
 80028b0:	08012f38 	.word	0x08012f38
 80028b4:	20001294 	.word	0x20001294
 80028b8:	08012f5c 	.word	0x08012f5c
 80028bc:	08012f6c 	.word	0x08012f6c
 80028c0:	200024a4 	.word	0x200024a4

080028c4 <DWT_Delay_Init>:

// ─────────── DWT 기반 us 지연 ───────────
static uint8_t dwt_inited = 0;

void DWT_Delay_Init(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    if (!dwt_inited) {
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <DWT_Delay_Init+0x34>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10e      	bne.n	80028ee <DWT_Delay_Init+0x2a>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80028d0:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <DWT_Delay_Init+0x38>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <DWT_Delay_Init+0x38>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // cycle counter enable
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <DWT_Delay_Init+0x3c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <DWT_Delay_Init+0x3c>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6013      	str	r3, [r2, #0]
        dwt_inited = 1;
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <DWT_Delay_Init+0x34>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
    }
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	20001280 	.word	0x20001280
 80028fc:	e000edf0 	.word	0xe000edf0
 8002900:	e0001000 	.word	0xe0001000

08002904 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    uint32_t clk = HAL_RCC_GetHCLKFreq();   // F411: 보통 84MHz
 800290c:	f003 fe60 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 8002910:	6178      	str	r0, [r7, #20]
    uint32_t cycles = (clk / 1000000) * us;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <DWT_Delay_us+0x44>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9a      	lsrs	r2, r3, #18
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	613b      	str	r3, [r7, #16]
    uint32_t start = DWT->CYCCNT;
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <DWT_Delay_us+0x48>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
    while ((DWT->CYCCNT - start) < cycles) { __NOP(); }
 800292a:	e000      	b.n	800292e <DWT_Delay_us+0x2a>
 800292c:	bf00      	nop
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <DWT_Delay_us+0x48>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f7      	bhi.n	800292c <DWT_Delay_us+0x28>
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	431bde83 	.word	0x431bde83
 800294c:	e0001000 	.word	0xe0001000

08002950 <DHT_SetOutput>:

// ─────────── GPIO 모드 전환 ───────────
static void DHT_SetOutput(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef g = {0};
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
    g.Pin = DHT_Pin;
 8002964:	2302      	movs	r3, #2
 8002966:	607b      	str	r3, [r7, #4]
    g.Mode = GPIO_MODE_OUTPUT_PP;  // PP로 충분 (보드에 풀업 존재: KY-015 모듈)
 8002968:	2301      	movs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
    g.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT_GPIO_Port, &g);
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4803      	ldr	r0, [pc, #12]	@ (8002988 <DHT_SetOutput+0x38>)
 800297a:	f002 fb71 	bl	8005060 <HAL_GPIO_Init>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40020000 	.word	0x40020000

0800298c <DHT_SetInput>:

static void DHT_SetInput(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef g = {0};
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
    g.Pin = DHT_Pin;
 80029a0:	2302      	movs	r3, #2
 80029a2:	607b      	str	r3, [r7, #4]
    g.Mode = GPIO_MODE_INPUT;      // 풀업은 모듈에 있음. 없으면 PULLUP으로
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
    g.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
    g.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT_GPIO_Port, &g);
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <DHT_SetInput+0x38>)
 80029b6:	f002 fb53 	bl	8005060 <HAL_GPIO_Init>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40020000 	.word	0x40020000

080029c8 <wait_level_with_timeout>:

static int wait_level_with_timeout(GPIO_PinState level, uint32_t timeout_us)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
    uint32_t clk = HAL_RCC_GetHCLKFreq();
 80029d4:	f003 fdfc 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 80029d8:	6178      	str	r0, [r7, #20]
    uint32_t cycles_to = (clk/1000000)*timeout_us;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a11      	ldr	r2, [pc, #68]	@ (8002a24 <wait_level_with_timeout+0x5c>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9a      	lsrs	r2, r3, #18
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	613b      	str	r3, [r7, #16]
    uint32_t start = DWT->CYCCNT;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <wait_level_with_timeout+0x60>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) != level) {
 80029f2:	e009      	b.n	8002a08 <wait_level_with_timeout+0x40>
        if ((DWT->CYCCNT - start) > cycles_to) return -1;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <wait_level_with_timeout+0x60>)
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d202      	bcs.n	8002a08 <wait_level_with_timeout+0x40>
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e009      	b.n	8002a1c <wait_level_with_timeout+0x54>
    while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) != level) {
 8002a08:	2102      	movs	r1, #2
 8002a0a:	4808      	ldr	r0, [pc, #32]	@ (8002a2c <wait_level_with_timeout+0x64>)
 8002a0c:	f002 fcac 	bl	8005368 <HAL_GPIO_ReadPin>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d1ec      	bne.n	80029f4 <wait_level_with_timeout+0x2c>
    }
    return 0;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	431bde83 	.word	0x431bde83
 8002a28:	e0001000 	.word	0xe0001000
 8002a2c:	40020000 	.word	0x40020000

08002a30 <DHT11_Read>:

// 반환 0 = OK, <0 = 에러
int DHT11_Read(uint8_t *temp_c, uint8_t *rh)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	@ 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
    uint8_t data[5] = {0};
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	711a      	strb	r2, [r3, #4]

    DWT_Delay_Init();
 8002a44:	f7ff ff3e 	bl	80028c4 <DWT_Delay_Init>

    // 1) 스타트 신호 (MCU -> 센서)
    DHT_SetOutput();
 8002a48:	f7ff ff82 	bl	8002950 <DHT_SetOutput>
    HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4858      	ldr	r0, [pc, #352]	@ (8002bb4 <DHT11_Read+0x184>)
 8002a52:	f002 fca1 	bl	8005398 <HAL_GPIO_WritePin>
    HAL_Delay(18);                     // >=18ms
 8002a56:	2012      	movs	r0, #18
 8002a58:	f002 f93a 	bl	8004cd0 <HAL_Delay>
    HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2102      	movs	r1, #2
 8002a60:	4854      	ldr	r0, [pc, #336]	@ (8002bb4 <DHT11_Read+0x184>)
 8002a62:	f002 fc99 	bl	8005398 <HAL_GPIO_WritePin>
    DWT_Delay_us(30);                  // 20~40us
 8002a66:	201e      	movs	r0, #30
 8002a68:	f7ff ff4c 	bl	8002904 <DWT_Delay_us>
    DHT_SetInput();
 8002a6c:	f7ff ff8e 	bl	800298c <DHT_SetInput>

    // 2) 센서 응답: LOW 80us + HIGH 80us
    if (wait_level_with_timeout(GPIO_PIN_RESET, 100) < 0) return -1;
 8002a70:	2164      	movs	r1, #100	@ 0x64
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff ffa8 	bl	80029c8 <wait_level_with_timeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da02      	bge.n	8002a84 <DHT11_Read+0x54>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e092      	b.n	8002baa <DHT11_Read+0x17a>
    if (wait_level_with_timeout(GPIO_PIN_SET,   120) < 0) return -2;
 8002a84:	2178      	movs	r1, #120	@ 0x78
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff ff9e 	bl	80029c8 <wait_level_with_timeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da02      	bge.n	8002a98 <DHT11_Read+0x68>
 8002a92:	f06f 0301 	mvn.w	r3, #1
 8002a96:	e088      	b.n	8002baa <DHT11_Read+0x17a>
    if (wait_level_with_timeout(GPIO_PIN_RESET, 120) < 0) return -3; // 데이터 시작 전 LOW 50us 진입
 8002a98:	2178      	movs	r1, #120	@ 0x78
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff ff94 	bl	80029c8 <wait_level_with_timeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	da02      	bge.n	8002aac <DHT11_Read+0x7c>
 8002aa6:	f06f 0302 	mvn.w	r3, #2
 8002aaa:	e07e      	b.n	8002baa <DHT11_Read+0x17a>

    // 3) 40비트 수신
    taskENTER_CRITICAL();
 8002aac:	f009 fd7c 	bl	800c5a8 <vPortEnterCritical>
    for (int i=0; i<40; i++) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab4:	e054      	b.n	8002b60 <DHT11_Read+0x130>
        // LOW(≈50us) 종료 대기
        if (wait_level_with_timeout(GPIO_PIN_SET, 150) < 0) return -4;
 8002ab6:	2196      	movs	r1, #150	@ 0x96
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f7ff ff85 	bl	80029c8 <wait_level_with_timeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da02      	bge.n	8002aca <DHT11_Read+0x9a>
 8002ac4:	f06f 0303 	mvn.w	r3, #3
 8002ac8:	e06f      	b.n	8002baa <DHT11_Read+0x17a>

        // HIGH 길이 측정
        uint32_t start = DWT->CYCCNT;
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <DHT11_Read+0x188>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61fb      	str	r3, [r7, #28]
        if (wait_level_with_timeout(GPIO_PIN_RESET, 150) < 0) return -5;
 8002ad0:	2196      	movs	r1, #150	@ 0x96
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7ff ff78 	bl	80029c8 <wait_level_with_timeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da02      	bge.n	8002ae4 <DHT11_Read+0xb4>
 8002ade:	f06f 0304 	mvn.w	r3, #4
 8002ae2:	e062      	b.n	8002baa <DHT11_Read+0x17a>
        uint32_t width_cycles = DWT->CYCCNT - start;
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <DHT11_Read+0x188>)
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	61bb      	str	r3, [r7, #24]

        // 약 26~28us = 0, 약 70us = 1
        // 임계 50us로 분기
        uint32_t cycles_50us = (HAL_RCC_GetHCLKFreq()/1000000)*45;
 8002aee:	f003 fd6f 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <DHT11_Read+0x18c>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0c9a      	lsrs	r2, r3, #18
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	011a      	lsls	r2, r3, #4
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
        uint8_t bit = (width_cycles > cycles_50us) ? 1 : 0;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	bf8c      	ite	hi
 8002b10:	2301      	movhi	r3, #1
 8002b12:	2300      	movls	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	74fb      	strb	r3, [r7, #19]

        data[i/8] <<= 1;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da00      	bge.n	8002b20 <DHT11_Read+0xf0>
 8002b1e:	3307      	adds	r3, #7
 8002b20:	10db      	asrs	r3, r3, #3
 8002b22:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002b26:	443a      	add	r2, r7
 8002b28:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8002b2c:	0052      	lsls	r2, r2, #1
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	3328      	adds	r3, #40	@ 0x28
 8002b32:	443b      	add	r3, r7
 8002b34:	f803 2c1c 	strb.w	r2, [r3, #-28]
        data[i/8] |= bit;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da00      	bge.n	8002b40 <DHT11_Read+0x110>
 8002b3e:	3307      	adds	r3, #7
 8002b40:	10db      	asrs	r3, r3, #3
 8002b42:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002b46:	443a      	add	r2, r7
 8002b48:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8002b4c:	7cfa      	ldrb	r2, [r7, #19]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	3328      	adds	r3, #40	@ 0x28
 8002b54:	443b      	add	r3, r7
 8002b56:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i=0; i<40; i++) {
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	2b27      	cmp	r3, #39	@ 0x27
 8002b64:	dda7      	ble.n	8002ab6 <DHT11_Read+0x86>
    }
    taskEXIT_CRITICAL();
 8002b66:	f009 fd51 	bl	800c60c <vPortExitCritical>

    // 4) 체크섬
    uint8_t sum = (uint8_t)(data[0] + data[1] + data[2] + data[3]);
 8002b6a:	7b3a      	ldrb	r2, [r7, #12]
 8002b6c:	7b7b      	ldrb	r3, [r7, #13]
 8002b6e:	4413      	add	r3, r2
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	7bbb      	ldrb	r3, [r7, #14]
 8002b74:	4413      	add	r3, r2
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (sum != data[4]) return -6;
 8002b80:	7c3b      	ldrb	r3, [r7, #16]
 8002b82:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d002      	beq.n	8002b90 <DHT11_Read+0x160>
 8002b8a:	f06f 0305 	mvn.w	r3, #5
 8002b8e:	e00c      	b.n	8002baa <DHT11_Read+0x17a>

    // DHT11 포맷: RH int, RH dec, T int, T dec, checksum
    if (rh)   *rh   = data[0];    // 정수부
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <DHT11_Read+0x16c>
 8002b96:	7b3a      	ldrb	r2, [r7, #12]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	701a      	strb	r2, [r3, #0]
    if (temp_c) *temp_c = data[2];
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <DHT11_Read+0x178>
 8002ba2:	7bba      	ldrb	r2, [r7, #14]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	701a      	strb	r2, [r3, #0]

    return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3728      	adds	r7, #40	@ 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40020000 	.word	0x40020000
 8002bb8:	e0001000 	.word	0xe0001000
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <esp_at_command>:
//==================uart6=========================
static uint8_t data;
cb_data_t cb_data;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	807b      	strh	r3, [r7, #2]
	*length = 0;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8002bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd8:	2100      	movs	r1, #0
 8002bda:	68b8      	ldr	r0, [r7, #8]
 8002bdc:	f00b fdaa 	bl	800e734 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 8002be0:	f640 0204 	movw	r2, #2052	@ 0x804
 8002be4:	2100      	movs	r1, #0
 8002be6:	482f      	ldr	r0, [pc, #188]	@ (8002ca4 <esp_at_command+0xe4>)
 8002be8:	f00b fda4 	bl	800e734 <memset>

    cb_data.length = 0;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <esp_at_command+0xe4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7fd fb53 	bl	80002a0 <strlen>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	2364      	movs	r3, #100	@ 0x64
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	4829      	ldr	r0, [pc, #164]	@ (8002ca8 <esp_at_command+0xe8>)
 8002c04:	f005 fcfc 	bl	8008600 <HAL_UART_Transmit>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d03f      	beq.n	8002c8e <esp_at_command+0xce>
		return -1;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	e042      	b.n	8002c9a <esp_at_command+0xda>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER) return -2;
 8002c14:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c16:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c1e:	d302      	bcc.n	8002c26 <esp_at_command+0x66>
 8002c20:	f06f 0301 	mvn.w	r3, #1
 8002c24:	e039      	b.n	8002c9a <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL) return -3;
 8002c26:	4921      	ldr	r1, [pc, #132]	@ (8002cac <esp_at_command+0xec>)
 8002c28:	481e      	ldr	r0, [pc, #120]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c2a:	f00b fe2b 	bl	800e884 <strstr>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <esp_at_command+0x7a>
 8002c34:	f06f 0302 	mvn.w	r3, #2
 8002c38:	e02f      	b.n	8002c9a <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 8002c3a:	491d      	ldr	r1, [pc, #116]	@ (8002cb0 <esp_at_command+0xf0>)
 8002c3c:	4819      	ldr	r0, [pc, #100]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c3e:	f00b fe21 	bl	800e884 <strstr>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <esp_at_command+0x94>
		{
			printf("ESP: TCP connection closed.\r\n");
 8002c48:	481a      	ldr	r0, [pc, #104]	@ (8002cb4 <esp_at_command+0xf4>)
 8002c4a:	f00b fbe3 	bl	800e414 <puts>
			//esp_client_conn();   // 자동 재연결
			return -5;
 8002c4e:	f06f 0304 	mvn.w	r3, #4
 8002c52:	e022      	b.n	8002c9a <esp_at_command+0xda>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 8002c54:	4918      	ldr	r1, [pc, #96]	@ (8002cb8 <esp_at_command+0xf8>)
 8002c56:	4813      	ldr	r0, [pc, #76]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c58:	f00b fe14 	bl	800e884 <strstr>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00e      	beq.n	8002c80 <esp_at_command+0xc0>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c64:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002c68:	461a      	mov	r2, r3
 8002c6a:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c6c:	68b8      	ldr	r0, [r7, #8]
 8002c6e:	f00c fd58 	bl	800f722 <memcpy>
			*length = cb_data.length;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <esp_at_command+0xe4>)
 8002c74:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	@ 0x800
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	801a      	strh	r2, [r3, #0]
			return 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e00c      	b.n	8002c9a <esp_at_command+0xda>
		}

		time_out -= 10;
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	3b0a      	subs	r3, #10
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f002 f821 	bl	8004cd0 <HAL_Delay>
	while (time_out > 0)
 8002c8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dcbe      	bgt.n	8002c14 <esp_at_command+0x54>
	}
	return -4; // Timeout
 8002c96:	f06f 0303 	mvn.w	r3, #3
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20001acc 	.word	0x20001acc
 8002ca8:	2000243c 	.word	0x2000243c
 8002cac:	08012f90 	.word	0x08012f90
 8002cb0:	08012f98 	.word	0x08012f98
 8002cb4:	08012fa0 	.word	0x08012fa0
 8002cb8:	08012fc0 	.word	0x08012fc0

08002cbc <esp_read_line>:

// 한 줄씩 ESP 응답 읽기

int esp_read_line(char *buf, int buf_size, int timeout_ms)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
    int elapsed = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]

    memset(buf, 0, buf_size);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f00b fd2c 	bl	800e734 <memset>

    while (elapsed < timeout_ms)
 8002cdc:	e03e      	b.n	8002d5c <esp_read_line+0xa0>
    {
        if (cb_data.length > 0)
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <esp_read_line+0xb4>)
 8002ce0:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d031      	beq.n	8002d4c <esp_read_line+0x90>
        {
            char c = cb_data.buf[0];
 8002ce8:	4b21      	ldr	r3, [pc, #132]	@ (8002d70 <esp_read_line+0xb4>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	75fb      	strb	r3, [r7, #23]

            // 버퍼 앞으로 이동
            memmove(cb_data.buf, cb_data.buf + 1, cb_data.length - 1);
 8002cee:	4921      	ldr	r1, [pc, #132]	@ (8002d74 <esp_read_line+0xb8>)
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <esp_read_line+0xb4>)
 8002cf2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	481d      	ldr	r0, [pc, #116]	@ (8002d70 <esp_read_line+0xb4>)
 8002cfc:	f00b fd00 	bl	800e700 <memmove>
            cb_data.length--;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <esp_read_line+0xb4>)
 8002d02:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <esp_read_line+0xb4>)
 8002d0c:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

            if (c == '\n' || c == '\r')
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b0a      	cmp	r3, #10
 8002d14:	d002      	beq.n	8002d1c <esp_read_line+0x60>
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	2b0d      	cmp	r3, #13
 8002d1a:	d109      	bne.n	8002d30 <esp_read_line+0x74>
            {
                if (i == 0) // 빈 줄 무시
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01b      	beq.n	8002d5a <esp_read_line+0x9e>
                    continue;
                buf[i] = 0;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
                return i; // 읽은 길이 반환
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	e01a      	b.n	8002d66 <esp_read_line+0xaa>
            }

            if (i < buf_size - 1)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	da10      	bge.n	8002d5c <esp_read_line+0xa0>
                buf[i++] = c;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	61fa      	str	r2, [r7, #28]
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	7dfa      	ldrb	r2, [r7, #23]
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e007      	b.n	8002d5c <esp_read_line+0xa0>
        }
        else
        {
            HAL_Delay(1);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f001 ffbf 	bl	8004cd0 <HAL_Delay>
            elapsed += 1;
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	e000      	b.n	8002d5c <esp_read_line+0xa0>
                    continue;
 8002d5a:	bf00      	nop
    while (elapsed < timeout_ms)
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	dbbc      	blt.n	8002cde <esp_read_line+0x22>
        }
    }
    return 0; // 타임아웃
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20001acc 	.word	0x20001acc
 8002d74:	20001acd 	.word	0x20001acd

08002d78 <esp_reset>:


static int esp_reset(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002d82:	1dba      	adds	r2, r7, #6
 8002d84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d88:	4909      	ldr	r1, [pc, #36]	@ (8002db0 <esp_reset+0x38>)
 8002d8a:	480a      	ldr	r0, [pc, #40]	@ (8002db4 <esp_reset+0x3c>)
 8002d8c:	f7ff ff18 	bl	8002bc0 <esp_at_command>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <esp_reset+0x24>
    {
    	return -1;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	e004      	b.n	8002da6 <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8002d9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002da0:	f001 ff96 	bl	8004cd0 <HAL_Delay>
    return 0;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20001294 	.word	0x20001294
 8002db4:	08012fc4 	.word	0x08012fc4

08002db8 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002dc6:	f107 020a 	add.w	r2, r7, #10
 8002dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dce:	492d      	ldr	r1, [pc, #180]	@ (8002e84 <request_ip_addr+0xcc>)
 8002dd0:	482d      	ldr	r0, [pc, #180]	@ (8002e88 <request_ip_addr+0xd0>)
 8002dd2:	f7ff fef5 	bl	8002bc0 <esp_at_command>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8002ddc:	482b      	ldr	r0, [pc, #172]	@ (8002e8c <request_ip_addr+0xd4>)
 8002dde:	f00b fb19 	bl	800e414 <puts>
 8002de2:	e049      	b.n	8002e78 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8002de4:	492a      	ldr	r1, [pc, #168]	@ (8002e90 <request_ip_addr+0xd8>)
 8002de6:	4827      	ldr	r0, [pc, #156]	@ (8002e84 <request_ip_addr+0xcc>)
 8002de8:	f00b fcf0 	bl	800e7cc <strtok>
 8002dec:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03e      	beq.n	8002e72 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	e009      	b.n	8002e0e <request_ip_addr+0x56>
                printf("%c", response[i]);
 8002dfa:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <request_ip_addr+0xcc>)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f00b faa8 	bl	800e358 <putchar>
            for(int i = 0 ; i < length ; i++)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	461a      	mov	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	dbf0      	blt.n	8002dfa <request_ip_addr+0x42>
        }

        while(line != NULL)
 8002e18:	e02b      	b.n	8002e72 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8002e1a:	491e      	ldr	r1, [pc, #120]	@ (8002e94 <request_ip_addr+0xdc>)
 8002e1c:	6978      	ldr	r0, [r7, #20]
 8002e1e:	f00b fd31 	bl	800e884 <strstr>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01f      	beq.n	8002e68 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8002e28:	491b      	ldr	r1, [pc, #108]	@ (8002e98 <request_ip_addr+0xe0>)
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f00b fcce 	bl	800e7cc <strtok>
                ip = strtok(NULL, "\"");
 8002e30:	4919      	ldr	r1, [pc, #100]	@ (8002e98 <request_ip_addr+0xe0>)
 8002e32:	2000      	movs	r0, #0
 8002e34:	f00b fcca 	bl	800e7cc <strtok>
 8002e38:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8002e3a:	4918      	ldr	r1, [pc, #96]	@ (8002e9c <request_ip_addr+0xe4>)
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7fd f9cf 	bl	80001e0 <strcmp>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00f      	beq.n	8002e68 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8002e48:	2210      	movs	r2, #16
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4814      	ldr	r0, [pc, #80]	@ (8002ea0 <request_ip_addr+0xe8>)
 8002e4e:	f00b fc71 	bl	800e734 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7fd fa24 	bl	80002a0 <strlen>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4810      	ldr	r0, [pc, #64]	@ (8002ea0 <request_ip_addr+0xe8>)
 8002e60:	f00c fc5f 	bl	800f722 <memcpy>
                    return 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e009      	b.n	8002e7c <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8002e68:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <request_ip_addr+0xd8>)
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f00b fcae 	bl	800e7cc <strtok>
 8002e70:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1d0      	bne.n	8002e1a <request_ip_addr+0x62>
        }
    }
    return -1;
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20001294 	.word	0x20001294
 8002e88:	0801300c 	.word	0x0801300c
 8002e8c:	08013018 	.word	0x08013018
 8002e90:	08013000 	.word	0x08013000
 8002e94:	08013038 	.word	0x08013038
 8002e98:	08013008 	.word	0x08013008
 8002e9c:	08012fd0 	.word	0x08012fd0
 8002ea0:	20001284 	.word	0x20001284

08002ea4 <esp_client_conn>:

int esp_client_conn(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0ce      	sub	sp, #312	@ 0x138
 8002ea8:	af02      	add	r7, sp, #8
    char at_cmd[96]; uint16_t length=0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    char line[128]; int n;

    // 1) TCP connect
    sprintf(at_cmd, "AT+CIPSTART=0,\"TCP\",\"%s\",%d\r\n", DST_IP, DST_PORT);
 8002eb0:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8002eb4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002eb8:	4a58      	ldr	r2, [pc, #352]	@ (800301c <esp_client_conn+0x178>)
 8002eba:	4959      	ldr	r1, [pc, #356]	@ (8003020 <esp_client_conn+0x17c>)
 8002ebc:	f00b fae8 	bl	800e490 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,8000)!=0) return -1;
 8002ec0:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 8002ec4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8002ec8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ecc:	4955      	ldr	r1, [pc, #340]	@ (8003024 <esp_client_conn+0x180>)
 8002ece:	f7ff fe77 	bl	8002bc0 <esp_at_command>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <esp_client_conn+0x3a>
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e098      	b.n	8003010 <esp_client_conn+0x16c>

    // 2) "CONNECT" or "ALREADY" 대기 (최대 5초)
    TickType_t deadline = xTaskGetTickCount() + pdMS_TO_TICKS(5000);
 8002ede:	f008 f99d 	bl	800b21c <xTaskGetTickCount>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002ee8:	3308      	adds	r3, #8
 8002eea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int connected = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    while (xTaskGetTickCount() < deadline) {
 8002ef4:	e03a      	b.n	8002f6c <esp_client_conn+0xc8>
        n = esp_read_line(line, sizeof(line), 200);    // cb_data에서 한 줄씩 뽑기
 8002ef6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002efa:	22c8      	movs	r2, #200	@ 0xc8
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fedc 	bl	8002cbc <esp_read_line>
 8002f04:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        if (n > 0) {
 8002f08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dd2a      	ble.n	8002f66 <esp_client_conn+0xc2>
            if (strstr(line, "CONNECT") || strstr(line, "ALREADY")) { connected = 1; break; }
 8002f10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f14:	4944      	ldr	r1, [pc, #272]	@ (8003028 <esp_client_conn+0x184>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00b fcb4 	bl	800e884 <strstr>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <esp_client_conn+0x90>
 8002f22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f26:	4941      	ldr	r1, [pc, #260]	@ (800302c <esp_client_conn+0x188>)
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f00b fcab 	bl	800e884 <strstr>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <esp_client_conn+0x98>
 8002f34:	2301      	movs	r3, #1
 8002f36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f3a:	e01e      	b.n	8002f7a <esp_client_conn+0xd6>
            if (strstr(line, "ERROR") || strstr(line, "FAIL")) return -2; // 즉시 실패
 8002f3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f40:	493b      	ldr	r1, [pc, #236]	@ (8003030 <esp_client_conn+0x18c>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f00b fc9e 	bl	800e884 <strstr>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <esp_client_conn+0xbc>
 8002f4e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f52:	4938      	ldr	r1, [pc, #224]	@ (8003034 <esp_client_conn+0x190>)
 8002f54:	4618      	mov	r0, r3
 8002f56:	f00b fc95 	bl	800e884 <strstr>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <esp_client_conn+0xc8>
 8002f60:	f06f 0301 	mvn.w	r3, #1
 8002f64:	e054      	b.n	8003010 <esp_client_conn+0x16c>
        } else {
            // 짧게 쉬고 다시 시도
            vTaskDelay(pdMS_TO_TICKS(50));
 8002f66:	2032      	movs	r0, #50	@ 0x32
 8002f68:	f008 f80e 	bl	800af88 <vTaskDelay>
    while (xTaskGetTickCount() < deadline) {
 8002f6c:	f008 f956 	bl	800b21c <xTaskGetTickCount>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d8bd      	bhi.n	8002ef6 <esp_client_conn+0x52>
        }
    }
    if (!connected) {
 8002f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d114      	bne.n	8002fac <esp_client_conn+0x108>
        // 최후 수단: 상태 폴링으로 연결 확인
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n",(uint8_t*)response,&length,700)!=0 ||
 8002f82:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 8002f86:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8002f8a:	4926      	ldr	r1, [pc, #152]	@ (8003024 <esp_client_conn+0x180>)
 8002f8c:	482a      	ldr	r0, [pc, #168]	@ (8003038 <esp_client_conn+0x194>)
 8002f8e:	f7ff fe17 	bl	8002bc0 <esp_at_command>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <esp_client_conn+0x102>
            !strstr((char*)response,"STATUS:3")) {
 8002f98:	4928      	ldr	r1, [pc, #160]	@ (800303c <esp_client_conn+0x198>)
 8002f9a:	4822      	ldr	r0, [pc, #136]	@ (8003024 <esp_client_conn+0x180>)
 8002f9c:	f00b fc72 	bl	800e884 <strstr>
 8002fa0:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n",(uint8_t*)response,&length,700)!=0 ||
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <esp_client_conn+0x108>
            return -3; // 연결 안됨
 8002fa6:	f06f 0302 	mvn.w	r3, #2
 8002faa:	e031      	b.n	8003010 <esp_client_conn+0x16c>
        }
    }

    // 3) 로그인 payload 전송
    char payload[64];
    snprintf(payload,sizeof(payload),"[%s:%s]", LOGID, PASSWD);
 8002fac:	4638      	mov	r0, r7
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <esp_client_conn+0x19c>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <esp_client_conn+0x1a0>)
 8002fb4:	4a24      	ldr	r2, [pc, #144]	@ (8003048 <esp_client_conn+0x1a4>)
 8002fb6:	2140      	movs	r1, #64	@ 0x40
 8002fb8:	f00b fa34 	bl	800e424 <sniprintf>

    sprintf(at_cmd,"AT+CIPSEND=0,%d\r\n",(int)strlen(payload));
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd f96e 	bl	80002a0 <strlen>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002fcc:	491f      	ldr	r1, [pc, #124]	@ (800304c <esp_client_conn+0x1a8>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00b fa5e 	bl	800e490 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,3000)!=0) return -4;
 8002fd4:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 8002fd8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8002fdc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002fe0:	4910      	ldr	r1, [pc, #64]	@ (8003024 <esp_client_conn+0x180>)
 8002fe2:	f7ff fded 	bl	8002bc0 <esp_at_command>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <esp_client_conn+0x14e>
 8002fec:	f06f 0303 	mvn.w	r3, #3
 8002ff0:	e00e      	b.n	8003010 <esp_client_conn+0x16c>
    if (esp_at_command((uint8_t*)payload,(uint8_t*)response,&length,3000)!=0) return -5;
 8002ff2:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002ffc:	4909      	ldr	r1, [pc, #36]	@ (8003024 <esp_client_conn+0x180>)
 8002ffe:	f7ff fddf 	bl	8002bc0 <esp_at_command>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <esp_client_conn+0x16a>
 8003008:	f06f 0304 	mvn.w	r3, #4
 800300c:	e000      	b.n	8003010 <esp_client_conn+0x16c>

    return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	08013044 	.word	0x08013044
 8003020:	08013050 	.word	0x08013050
 8003024:	20001294 	.word	0x20001294
 8003028:	08013070 	.word	0x08013070
 800302c:	08013078 	.word	0x08013078
 8003030:	08012f90 	.word	0x08012f90
 8003034:	08013080 	.word	0x08013080
 8003038:	08013088 	.word	0x08013088
 800303c:	08013098 	.word	0x08013098
 8003040:	080130b4 	.word	0x080130b4
 8003044:	080130a4 	.word	0x080130a4
 8003048:	080130ac 	.word	0x080130ac
 800304c:	080130bc 	.word	0x080130bc

08003050 <esp_get_status>:


int esp_get_status(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
    // 0 : Link0 connected
    // -1: Link0 not connected
    uint16_t length = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	807b      	strh	r3, [r7, #2]
    int ret = -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	607b      	str	r3, [r7, #4]

    if (osMutexAcquire(ESP_MutexHandle, 1000) == osOK) {
 8003060:	4b1c      	ldr	r3, [pc, #112]	@ (80030d4 <esp_get_status+0x84>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003068:	4618      	mov	r0, r3
 800306a:	f006 fce1 	bl	8009a30 <osMutexAcquire>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d129      	bne.n	80030c8 <esp_get_status+0x78>
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n", (uint8_t*)response, &length, 1500) == 0) {
 8003074:	1cba      	adds	r2, r7, #2
 8003076:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800307a:	4917      	ldr	r1, [pc, #92]	@ (80030d8 <esp_get_status+0x88>)
 800307c:	4817      	ldr	r0, [pc, #92]	@ (80030dc <esp_get_status+0x8c>)
 800307e:	f7ff fd9f 	bl	8002bc0 <esp_at_command>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11a      	bne.n	80030be <esp_get_status+0x6e>
            // MUX=1 응답에서 "+CIPSTATUS:0,..." 라인이 있으면 Link0가 실제 연결 상태
            if (strstr((char*)response, "+CIPSTATUS:0") &&
 8003088:	4915      	ldr	r1, [pc, #84]	@ (80030e0 <esp_get_status+0x90>)
 800308a:	4813      	ldr	r0, [pc, #76]	@ (80030d8 <esp_get_status+0x88>)
 800308c:	f00b fbfa 	bl	800e884 <strstr>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <esp_get_status+0x68>
                (strstr((char*)response, "\"TCP\"") || strstr((char*)response, "\"UDP\""))) {
 8003096:	4913      	ldr	r1, [pc, #76]	@ (80030e4 <esp_get_status+0x94>)
 8003098:	480f      	ldr	r0, [pc, #60]	@ (80030d8 <esp_get_status+0x88>)
 800309a:	f00b fbf3 	bl	800e884 <strstr>
 800309e:	4603      	mov	r3, r0
            if (strstr((char*)response, "+CIPSTATUS:0") &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <esp_get_status+0x62>
                (strstr((char*)response, "\"TCP\"") || strstr((char*)response, "\"UDP\""))) {
 80030a4:	4910      	ldr	r1, [pc, #64]	@ (80030e8 <esp_get_status+0x98>)
 80030a6:	480c      	ldr	r0, [pc, #48]	@ (80030d8 <esp_get_status+0x88>)
 80030a8:	f00b fbec 	bl	800e884 <strstr>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <esp_get_status+0x68>
                ret = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	e002      	b.n	80030be <esp_get_status+0x6e>
            } else {
                ret = -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	607b      	str	r3, [r7, #4]
            }
        }
        osMutexRelease(ESP_MutexHandle);
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <esp_get_status+0x84>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f006 fcff 	bl	8009ac6 <osMutexRelease>
    }
    return ret;
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200024a4 	.word	0x200024a4
 80030d8:	20001294 	.word	0x20001294
 80030dc:	08013088 	.word	0x08013088
 80030e0:	080130d0 	.word	0x080130d0
 80030e4:	080130e0 	.word	0x080130e0
 80030e8:	080130e8 	.word	0x080130e8

080030ec <drv_esp_init>:

 int drv_esp_init(void)
 {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 80030f2:	2210      	movs	r2, #16
 80030f4:	2100      	movs	r1, #0
 80030f6:	4817      	ldr	r0, [pc, #92]	@ (8003154 <drv_esp_init+0x68>)
 80030f8:	f00b fb1c 	bl	800e734 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 80030fc:	f640 0204 	movw	r2, #2052	@ 0x804
 8003100:	2100      	movs	r1, #0
 8003102:	4815      	ldr	r0, [pc, #84]	@ (8003158 <drv_esp_init+0x6c>)
 8003104:	f00b fb16 	bl	800e734 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 8003108:	2201      	movs	r2, #1
 800310a:	4914      	ldr	r1, [pc, #80]	@ (800315c <drv_esp_init+0x70>)
 800310c:	4814      	ldr	r0, [pc, #80]	@ (8003160 <drv_esp_init+0x74>)
 800310e:	f005 fb02 	bl	8008716 <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e011      	b.n	800313c <drv_esp_init+0x50>
         uint16_t len=0;
 8003118:	2300      	movs	r3, #0
 800311a:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 800311c:	1cba      	adds	r2, r7, #2
 800311e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003122:	4910      	ldr	r1, [pc, #64]	@ (8003164 <drv_esp_init+0x78>)
 8003124:	4810      	ldr	r0, [pc, #64]	@ (8003168 <drv_esp_init+0x7c>)
 8003126:	f7ff fd4b 	bl	8002bc0 <esp_at_command>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <drv_esp_init+0x58>
         HAL_Delay(100);
 8003130:	2064      	movs	r0, #100	@ 0x64
 8003132:	f001 fdcd 	bl	8004cd0 <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3301      	adds	r3, #1
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	ddea      	ble.n	8003118 <drv_esp_init+0x2c>
 8003142:	e000      	b.n	8003146 <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8003144:	bf00      	nop
     }
     return esp_reset();
 8003146:	f7ff fe17 	bl	8002d78 <esp_reset>
 800314a:	4603      	mov	r3, r0
 }
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20001284 	.word	0x20001284
 8003158:	20001acc 	.word	0x20001acc
 800315c:	20001acb 	.word	0x20001acb
 8003160:	2000243c 	.word	0x2000243c
 8003164:	20001294 	.word	0x20001294
 8003168:	080130f0 	.word	0x080130f0

0800316c <reset_func>:

void reset_func()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8003170:	4808      	ldr	r0, [pc, #32]	@ (8003194 <reset_func+0x28>)
 8003172:	f00b f8df 	bl	800e334 <iprintf>
	if(esp_reset() == 0)
 8003176:	f7ff fdff 	bl	8002d78 <esp_reset>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <reset_func+0x1c>
			printf("OK\r\n");
 8003180:	4805      	ldr	r0, [pc, #20]	@ (8003198 <reset_func+0x2c>)
 8003182:	f00b f947 	bl	800e414 <puts>
	else
			printf("fail\r\n");
}
 8003186:	e002      	b.n	800318e <reset_func+0x22>
			printf("fail\r\n");
 8003188:	4804      	ldr	r0, [pc, #16]	@ (800319c <reset_func+0x30>)
 800318a:	f00b f943 	bl	800e414 <puts>
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	080130f8 	.word	0x080130f8
 8003198:	08013108 	.word	0x08013108
 800319c:	0801310c 	.word	0x0801310c

080031a0 <version_func>:

void version_func()
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 80031aa:	4813      	ldr	r0, [pc, #76]	@ (80031f8 <version_func+0x58>)
 80031ac:	f00b f932 	bl	800e414 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80031b0:	1cba      	adds	r2, r7, #2
 80031b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b6:	4911      	ldr	r1, [pc, #68]	@ (80031fc <version_func+0x5c>)
 80031b8:	4811      	ldr	r0, [pc, #68]	@ (8003200 <version_func+0x60>)
 80031ba:	f7ff fd01 	bl	8002bc0 <esp_at_command>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <version_func+0x2c>
      printf("ap scan command fail\r\n");
 80031c4:	480f      	ldr	r0, [pc, #60]	@ (8003204 <version_func+0x64>)
 80031c6:	f00b f925 	bl	800e414 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 80031ca:	e011      	b.n	80031f0 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	e009      	b.n	80031e6 <version_func+0x46>
          printf("%c", response[i]);
 80031d2:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <version_func+0x5c>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f00b f8bc 	bl	800e358 <putchar>
      for(int i = 0 ; i < length ; i++)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	dbf0      	blt.n	80031d2 <version_func+0x32>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	08013114 	.word	0x08013114
 80031fc:	20001294 	.word	0x20001294
 8003200:	0801312c 	.word	0x0801312c
 8003204:	08013138 	.word	0x08013138

08003208 <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b096      	sub	sp, #88	@ 0x58
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint16_t length=0; char at_cmd[MAX_ESP_COMMAND_LEN]={0};
 8003212:	2300      	movs	r3, #0
 8003214:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003218:	f107 0308 	add.w	r3, r7, #8
 800321c:	2240      	movs	r2, #64	@ 0x40
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f00b fa87 	bl	800e734 <memset>
  if(!ssid || !passwd){ printf("invalid command : ap_conn <ssid> <passwd>\r\n"); return; }
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <ap_conn_func+0x2a>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <ap_conn_func+0x32>
 8003232:	4838      	ldr	r0, [pc, #224]	@ (8003314 <ap_conn_func+0x10c>)
 8003234:	f00b f8ee 	bl	800e414 <puts>
 8003238:	e069      	b.n	800330e <ap_conn_func+0x106>

  esp_at_command((uint8_t*)"AT+CWMODE=1\r\n",(uint8_t*)response,&length,1500);
 800323a:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800323e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003242:	4935      	ldr	r1, [pc, #212]	@ (8003318 <ap_conn_func+0x110>)
 8003244:	4835      	ldr	r0, [pc, #212]	@ (800331c <ap_conn_func+0x114>)
 8003246:	f7ff fcbb 	bl	8002bc0 <esp_at_command>
  esp_at_command((uint8_t*)"AT+CWQAP\r\n",(uint8_t*)response,&length,1500); HAL_Delay(200);
 800324a:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800324e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003252:	4931      	ldr	r1, [pc, #196]	@ (8003318 <ap_conn_func+0x110>)
 8003254:	4832      	ldr	r0, [pc, #200]	@ (8003320 <ap_conn_func+0x118>)
 8003256:	f7ff fcb3 	bl	8002bc0 <esp_at_command>
 800325a:	20c8      	movs	r0, #200	@ 0xc8
 800325c:	f001 fd38 	bl	8004cd0 <HAL_Delay>

  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, passwd);
 8003260:	f107 0008 	add.w	r0, r7, #8
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	492e      	ldr	r1, [pc, #184]	@ (8003324 <ap_conn_func+0x11c>)
 800326a:	f00b f911 	bl	800e490 <siprintf>
  int rc = esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,30000);
 800326e:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8003272:	f107 0008 	add.w	r0, r7, #8
 8003276:	f247 5330 	movw	r3, #30000	@ 0x7530
 800327a:	4927      	ldr	r1, [pc, #156]	@ (8003318 <ap_conn_func+0x110>)
 800327c:	f7ff fca0 	bl	8002bc0 <esp_at_command>
 8003280:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (rc!=0) {
 8003282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d03f      	beq.n	8003308 <ap_conn_func+0x100>
    int ok=0;
 8003288:	2300      	movs	r3, #0
 800328a:	657b      	str	r3, [r7, #84]	@ 0x54
    for (int i=0;i<10 && !ok;i++){
 800328c:	2300      	movs	r3, #0
 800328e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003290:	e02d      	b.n	80032ee <ap_conn_func+0xe6>
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8003292:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8003296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800329a:	491f      	ldr	r1, [pc, #124]	@ (8003318 <ap_conn_func+0x110>)
 800329c:	4822      	ldr	r0, [pc, #136]	@ (8003328 <ap_conn_func+0x120>)
 800329e:	f7ff fc8f 	bl	8002bc0 <esp_at_command>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11b      	bne.n	80032e0 <ap_conn_func+0xd8>
          strstr(response, "+CWJAP:")) {
 80032a8:	4920      	ldr	r1, [pc, #128]	@ (800332c <ap_conn_func+0x124>)
 80032aa:	481b      	ldr	r0, [pc, #108]	@ (8003318 <ap_conn_func+0x110>)
 80032ac:	f00b faea 	bl	800e884 <strstr>
 80032b0:	4603      	mov	r3, r0
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d014      	beq.n	80032e0 <ap_conn_func+0xd8>
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80032b6:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80032ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032be:	4916      	ldr	r1, [pc, #88]	@ (8003318 <ap_conn_func+0x110>)
 80032c0:	481b      	ldr	r0, [pc, #108]	@ (8003330 <ap_conn_func+0x128>)
 80032c2:	f7ff fc7d 	bl	8002bc0 <esp_at_command>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 80032cc:	4919      	ldr	r1, [pc, #100]	@ (8003334 <ap_conn_func+0x12c>)
 80032ce:	4812      	ldr	r0, [pc, #72]	@ (8003318 <ap_conn_func+0x110>)
 80032d0:	f00b fad8 	bl	800e884 <strstr>
 80032d4:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 80032da:	2301      	movs	r3, #1
 80032dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80032de:	e00c      	b.n	80032fa <ap_conn_func+0xf2>
      }
      HAL_Delay(1000);
 80032e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032e4:	f001 fcf4 	bl	8004cd0 <HAL_Delay>
    for (int i=0;i<10 && !ok;i++){
 80032e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032ea:	3301      	adds	r3, #1
 80032ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80032ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	dc02      	bgt.n	80032fa <ap_conn_func+0xf2>
 80032f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0cb      	beq.n	8003292 <ap_conn_func+0x8a>
    }
    if (!ok){ printf("ap join failed (no SSID/IP)\r\n"); return; }
 80032fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <ap_conn_func+0x100>
 8003300:	480d      	ldr	r0, [pc, #52]	@ (8003338 <ap_conn_func+0x130>)
 8003302:	f00b f887 	bl	800e414 <puts>
 8003306:	e002      	b.n	800330e <ap_conn_func+0x106>
  }
  printf("WIFI GOT IP\r\n");
 8003308:	480c      	ldr	r0, [pc, #48]	@ (800333c <ap_conn_func+0x134>)
 800330a:	f00b f883 	bl	800e414 <puts>
}
 800330e:	3758      	adds	r7, #88	@ 0x58
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08013150 	.word	0x08013150
 8003318:	20001294 	.word	0x20001294
 800331c:	0801317c 	.word	0x0801317c
 8003320:	0801318c 	.word	0x0801318c
 8003324:	08013198 	.word	0x08013198
 8003328:	080131b0 	.word	0x080131b0
 800332c:	080131bc 	.word	0x080131bc
 8003330:	08012fd8 	.word	0x08012fd8
 8003334:	080131c4 	.word	0x080131c4
 8003338:	080131d4 	.word	0x080131d4
 800333c:	080131f4 	.word	0x080131f4

08003340 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a23      	ldr	r2, [pc, #140]	@ (80033dc <HAL_UART_RxCpltCallback+0x9c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d117      	bne.n	8003382 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8003352:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <HAL_UART_RxCpltCallback+0xa0>)
 8003354:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8003358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335c:	d20c      	bcs.n	8003378 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_UART_RxCpltCallback+0xa0>)
 8003360:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	b291      	uxth	r1, r2
 8003368:	4a1d      	ldr	r2, [pc, #116]	@ (80033e0 <HAL_UART_RxCpltCallback+0xa0>)
 800336a:	f8a2 1800 	strh.w	r1, [r2, #2048]	@ 0x800
 800336e:	461a      	mov	r2, r3
 8003370:	4b1c      	ldr	r3, [pc, #112]	@ (80033e4 <HAL_UART_RxCpltCallback+0xa4>)
 8003372:	7819      	ldrb	r1, [r3, #0]
 8003374:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_UART_RxCpltCallback+0xa0>)
 8003376:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 8003378:	2201      	movs	r2, #1
 800337a:	491a      	ldr	r1, [pc, #104]	@ (80033e4 <HAL_UART_RxCpltCallback+0xa4>)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f005 f9ca 	bl	8008716 <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	@ (80033e8 <HAL_UART_RxCpltCallback+0xa8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d122      	bne.n	80033d2 <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 800338c:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <HAL_UART_RxCpltCallback+0xac>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <HAL_UART_RxCpltCallback+0xb0>)
 8003392:	7811      	ldrb	r1, [r2, #0]
 8003394:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <HAL_UART_RxCpltCallback+0xb4>)
 8003396:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 8003398:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <HAL_UART_RxCpltCallback+0xac>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a15      	ldr	r2, [pc, #84]	@ (80033f4 <HAL_UART_RxCpltCallback+0xb4>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b0d      	cmp	r3, #13
 80033a4:	d10b      	bne.n	80033be <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_UART_RxCpltCallback+0xac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_UART_RxCpltCallback+0xb4>)
 80033ac:	2100      	movs	r1, #0
 80033ae:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_UART_RxCpltCallback+0xb8>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
            i = 0;
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <HAL_UART_RxCpltCallback+0xac>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e004      	b.n	80033c8 <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_UART_RxCpltCallback+0xac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_UART_RxCpltCallback+0xac>)
 80033c6:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 80033c8:	2201      	movs	r2, #1
 80033ca:	4909      	ldr	r1, [pc, #36]	@ (80033f0 <HAL_UART_RxCpltCallback+0xb0>)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f005 f9a2 	bl	8008716 <HAL_UART_Receive_IT>
    }
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40011400 	.word	0x40011400
 80033e0:	20001acc 	.word	0x20001acc
 80033e4:	20001acb 	.word	0x20001acb
 80033e8:	40004400 	.word	0x40004400
 80033ec:	200022d0 	.word	0x200022d0
 80033f0:	20001aca 	.word	0x20001aca
 80033f4:	20001a98 	.word	0x20001a98
 80033f8:	20001a94 	.word	0x20001a94

080033fc <AiotClient_Init>:



void AiotClient_Init()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
	reset_func();
 8003402:	f7ff feb3 	bl	800316c <reset_func>
	version_func();
 8003406:	f7ff fecb 	bl	80031a0 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 800340a:	490a      	ldr	r1, [pc, #40]	@ (8003434 <AiotClient_Init+0x38>)
 800340c:	480a      	ldr	r0, [pc, #40]	@ (8003438 <AiotClient_Init+0x3c>)
 800340e:	f7ff fefb 	bl	8003208 <ap_conn_func>
	request_ip_addr(1);
 8003412:	2001      	movs	r0, #1
 8003414:	f7ff fcd0 	bl	8002db8 <request_ip_addr>

    // ★ 멀티커넥션 ON
	uint16_t length = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t*)"AT+CIPMUX=1\r\n", (uint8_t*)response, &length, 1000);
 800341c:	1dba      	adds	r2, r7, #6
 800341e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003422:	4906      	ldr	r1, [pc, #24]	@ (800343c <AiotClient_Init+0x40>)
 8003424:	4806      	ldr	r0, [pc, #24]	@ (8003440 <AiotClient_Init+0x44>)
 8003426:	f7ff fbcb 	bl	8002bc0 <esp_at_command>

	//esp_client_conn();
	//esp_get_status();
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	0801323c 	.word	0x0801323c
 8003438:	08013248 	.word	0x08013248
 800343c:	20001294 	.word	0x20001294
 8003440:	08013250 	.word	0x08013250

08003444 <drv_uart_init>:
}


//==================uart2=========================
int drv_uart_init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8003448:	2201      	movs	r2, #1
 800344a:	4903      	ldr	r1, [pc, #12]	@ (8003458 <drv_uart_init+0x14>)
 800344c:	4803      	ldr	r0, [pc, #12]	@ (800345c <drv_uart_init+0x18>)
 800344e:	f005 f962 	bl	8008716 <HAL_UART_Receive_IT>
    return 0;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20001aca 	.word	0x20001aca
 800345c:	200023f4 	.word	0x200023f4

08003460 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8003468:	1d39      	adds	r1, r7, #4
 800346a:	230a      	movs	r3, #10
 800346c:	2201      	movs	r2, #1
 800346e:	4807      	ldr	r0, [pc, #28]	@ (800348c <__io_putchar+0x2c>)
 8003470:	f005 f8c6 	bl	8008600 <HAL_UART_Transmit>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <__io_putchar+0x1e>
        return ch;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	e001      	b.n	8003482 <__io_putchar+0x22>
    return -1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200023f4 	.word	0x200023f4

08003490 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b09a      	sub	sp, #104	@ 0x68
 8003494:	af06      	add	r7, sp, #24
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 800349a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800349e:	2224      	movs	r2, #36	@ 0x24
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f00b f946 	bl	800e734 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 80034a8:	4969      	ldr	r1, [pc, #420]	@ (8003650 <parse_cipsntptime_line+0x1c0>)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f00b f9ea 	bl	800e884 <strstr>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <parse_cipsntptime_line+0x2c>
        return -1;
 80034b6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ba:	e0c5      	b.n	8003648 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 80034bc:	f107 0120 	add.w	r1, r7, #32
 80034c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	9304      	str	r3, [sp, #16]
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	9303      	str	r3, [sp, #12]
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	460b      	mov	r3, r1
 80034e4:	495b      	ldr	r1, [pc, #364]	@ (8003654 <parse_cipsntptime_line+0x1c4>)
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f00a fff4 	bl	800e4d4 <siscanf>
 80034ec:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 80034ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034f0:	2b07      	cmp	r3, #7
 80034f2:	f040 80a7 	bne.w	8003644 <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 80034f6:	f107 0320 	add.w	r3, r7, #32
 80034fa:	4957      	ldr	r1, [pc, #348]	@ (8003658 <parse_cipsntptime_line+0x1c8>)
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fc fe6f 	bl	80001e0 <strcmp>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <parse_cipsntptime_line+0x7e>
 8003508:	2300      	movs	r3, #0
 800350a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800350c:	e082      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	4952      	ldr	r1, [pc, #328]	@ (800365c <parse_cipsntptime_line+0x1cc>)
 8003514:	4618      	mov	r0, r3
 8003516:	f7fc fe63 	bl	80001e0 <strcmp>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <parse_cipsntptime_line+0x96>
 8003520:	2301      	movs	r3, #1
 8003522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003524:	e076      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 8003526:	f107 0320 	add.w	r3, r7, #32
 800352a:	494d      	ldr	r1, [pc, #308]	@ (8003660 <parse_cipsntptime_line+0x1d0>)
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc fe57 	bl	80001e0 <strcmp>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <parse_cipsntptime_line+0xae>
 8003538:	2302      	movs	r3, #2
 800353a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800353c:	e06a      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 800353e:	f107 0320 	add.w	r3, r7, #32
 8003542:	4948      	ldr	r1, [pc, #288]	@ (8003664 <parse_cipsntptime_line+0x1d4>)
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc fe4b 	bl	80001e0 <strcmp>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <parse_cipsntptime_line+0xc6>
 8003550:	2303      	movs	r3, #3
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003554:	e05e      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 8003556:	f107 0320 	add.w	r3, r7, #32
 800355a:	4943      	ldr	r1, [pc, #268]	@ (8003668 <parse_cipsntptime_line+0x1d8>)
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc fe3f 	bl	80001e0 <strcmp>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <parse_cipsntptime_line+0xde>
 8003568:	2304      	movs	r3, #4
 800356a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800356c:	e052      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 800356e:	f107 0320 	add.w	r3, r7, #32
 8003572:	493e      	ldr	r1, [pc, #248]	@ (800366c <parse_cipsntptime_line+0x1dc>)
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc fe33 	bl	80001e0 <strcmp>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <parse_cipsntptime_line+0xf6>
 8003580:	2305      	movs	r3, #5
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003584:	e046      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 8003586:	f107 0320 	add.w	r3, r7, #32
 800358a:	4939      	ldr	r1, [pc, #228]	@ (8003670 <parse_cipsntptime_line+0x1e0>)
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc fe27 	bl	80001e0 <strcmp>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <parse_cipsntptime_line+0x10e>
 8003598:	2306      	movs	r3, #6
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800359c:	e03a      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 800359e:	f107 0320 	add.w	r3, r7, #32
 80035a2:	4934      	ldr	r1, [pc, #208]	@ (8003674 <parse_cipsntptime_line+0x1e4>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc fe1b 	bl	80001e0 <strcmp>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <parse_cipsntptime_line+0x126>
 80035b0:	2307      	movs	r3, #7
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035b4:	e02e      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 80035b6:	f107 0320 	add.w	r3, r7, #32
 80035ba:	492f      	ldr	r1, [pc, #188]	@ (8003678 <parse_cipsntptime_line+0x1e8>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc fe0f 	bl	80001e0 <strcmp>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <parse_cipsntptime_line+0x13e>
 80035c8:	2308      	movs	r3, #8
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035cc:	e022      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 80035ce:	f107 0320 	add.w	r3, r7, #32
 80035d2:	492a      	ldr	r1, [pc, #168]	@ (800367c <parse_cipsntptime_line+0x1ec>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc fe03 	bl	80001e0 <strcmp>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <parse_cipsntptime_line+0x156>
 80035e0:	2309      	movs	r3, #9
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035e4:	e016      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 80035e6:	f107 0320 	add.w	r3, r7, #32
 80035ea:	4925      	ldr	r1, [pc, #148]	@ (8003680 <parse_cipsntptime_line+0x1f0>)
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc fdf7 	bl	80001e0 <strcmp>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <parse_cipsntptime_line+0x16e>
 80035f8:	230a      	movs	r3, #10
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035fc:	e00a      	b.n	8003614 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 80035fe:	f107 0320 	add.w	r3, r7, #32
 8003602:	4920      	ldr	r1, [pc, #128]	@ (8003684 <parse_cipsntptime_line+0x1f4>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc fdeb 	bl	80001e0 <strcmp>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <parse_cipsntptime_line+0x184>
 8003610:	230b      	movs	r3, #11
 8003612:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 800362c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003630:	4618      	mov	r0, r3
 8003632:	f00b fb27 	bl	800ec84 <mktime>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8003640:	2300      	movs	r3, #0
 8003642:	e001      	b.n	8003648 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 8003644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003648:	4618      	mov	r0, r3
 800364a:	3750      	adds	r7, #80	@ 0x50
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	08013260 	.word	0x08013260
 8003654:	08013270 	.word	0x08013270
 8003658:	08013294 	.word	0x08013294
 800365c:	08013298 	.word	0x08013298
 8003660:	0801329c 	.word	0x0801329c
 8003664:	080132a0 	.word	0x080132a0
 8003668:	080132a4 	.word	0x080132a4
 800366c:	080132a8 	.word	0x080132a8
 8003670:	080132ac 	.word	0x080132ac
 8003674:	080132b0 	.word	0x080132b0
 8003678:	080132b4 	.word	0x080132b4
 800367c:	080132b8 	.word	0x080132b8
 8003680:	080132bc 	.word	0x080132bc
 8003684:	080132c0 	.word	0x080132c0

08003688 <esp_ntp_config>:

int esp_ntp_config(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b0a0      	sub	sp, #128	@ 0x80
 800368c:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 800368e:	463b      	mov	r3, r7
 8003690:	4a0f      	ldr	r2, [pc, #60]	@ (80036d0 <esp_ntp_config+0x48>)
 8003692:	4910      	ldr	r1, [pc, #64]	@ (80036d4 <esp_ntp_config+0x4c>)
 8003694:	4618      	mov	r0, r3
 8003696:	f00a fefb 	bl	800e490 <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 800369a:	463b      	mov	r3, r7
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc fdff 	bl	80002a0 <strlen>
 80036a2:	4603      	mov	r3, r0
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	4639      	mov	r1, r7
 80036a8:	2364      	movs	r3, #100	@ 0x64
 80036aa:	480b      	ldr	r0, [pc, #44]	@ (80036d8 <esp_ntp_config+0x50>)
 80036ac:	f004 ffa8 	bl	8008600 <HAL_UART_Transmit>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <esp_ntp_config+0x34>
        return -1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e004      	b.n	80036c6 <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 80036bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80036c0:	f007 fc62 	bl	800af88 <vTaskDelay>
    return 0;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3780      	adds	r7, #128	@ 0x80
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	080132c4 	.word	0x080132c4
 80036d4:	080132d8 	.word	0x080132d8
 80036d8:	2000243c 	.word	0x2000243c

080036dc <esp_is_wifi_ready>:
    return 0;
}

// esp.c
int esp_is_wifi_ready(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	807b      	strh	r3, [r7, #2]
    int ok = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]

    if (osMutexAcquire(ESP_MutexHandle, 1000) == osOK) {
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <esp_is_wifi_ready+0x80>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f006 f99c 	bl	8009a30 <osMutexAcquire>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d128      	bne.n	8003750 <esp_is_wifi_ready+0x74>
        if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80036fe:	1cba      	adds	r2, r7, #2
 8003700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003704:	4916      	ldr	r1, [pc, #88]	@ (8003760 <esp_is_wifi_ready+0x84>)
 8003706:	4817      	ldr	r0, [pc, #92]	@ (8003764 <esp_is_wifi_ready+0x88>)
 8003708:	f7ff fa5a 	bl	8002bc0 <esp_at_command>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <esp_is_wifi_ready+0x6a>
            strstr((char*)response, "+CWJAP:")) {
 8003712:	4915      	ldr	r1, [pc, #84]	@ (8003768 <esp_is_wifi_ready+0x8c>)
 8003714:	4812      	ldr	r0, [pc, #72]	@ (8003760 <esp_is_wifi_ready+0x84>)
 8003716:	f00b f8b5 	bl	800e884 <strstr>
 800371a:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <esp_is_wifi_ready+0x6a>
            if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8003720:	1cba      	adds	r2, r7, #2
 8003722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003726:	490e      	ldr	r1, [pc, #56]	@ (8003760 <esp_is_wifi_ready+0x84>)
 8003728:	4810      	ldr	r0, [pc, #64]	@ (800376c <esp_is_wifi_ready+0x90>)
 800372a:	f7ff fa49 	bl	8002bc0 <esp_at_command>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <esp_is_wifi_ready+0x6a>
                !strstr((char*)response, "ip:\"0.0.0.0\"")) {
 8003734:	490e      	ldr	r1, [pc, #56]	@ (8003770 <esp_is_wifi_ready+0x94>)
 8003736:	480a      	ldr	r0, [pc, #40]	@ (8003760 <esp_is_wifi_ready+0x84>)
 8003738:	f00b f8a4 	bl	800e884 <strstr>
 800373c:	4603      	mov	r3, r0
            if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <esp_is_wifi_ready+0x6a>
                ok = 1;
 8003742:	2301      	movs	r3, #1
 8003744:	607b      	str	r3, [r7, #4]
            }
        }
        osMutexRelease(ESP_MutexHandle);
 8003746:	4b05      	ldr	r3, [pc, #20]	@ (800375c <esp_is_wifi_ready+0x80>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f006 f9bb 	bl	8009ac6 <osMutexRelease>
    }
    return ok;
 8003750:	687b      	ldr	r3, [r7, #4]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200024a4 	.word	0x200024a4
 8003760:	20001294 	.word	0x20001294
 8003764:	080131b0 	.word	0x080131b0
 8003768:	080131bc 	.word	0x080131bc
 800376c:	08012fd8 	.word	0x08012fd8
 8003770:	080131c4 	.word	0x080131c4

08003774 <LCD_Init>:
// 전역 상태
static uint8_t backlight = 0x08; // 기본 백라이트 ON

// 초기화
void LCD_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // 전원 안정화 대기
 8003778:	2032      	movs	r0, #50	@ 0x32
 800377a:	f001 faa9 	bl	8004cd0 <HAL_Delay>

    // 4비트 모드 진입 시퀀스
    LCD_Write4Bits(0x30);
 800377e:	2030      	movs	r0, #48	@ 0x30
 8003780:	f000 f8b1 	bl	80038e6 <LCD_Write4Bits>
    HAL_Delay(5);
 8003784:	2005      	movs	r0, #5
 8003786:	f001 faa3 	bl	8004cd0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 800378a:	2030      	movs	r0, #48	@ 0x30
 800378c:	f000 f8ab 	bl	80038e6 <LCD_Write4Bits>
    HAL_Delay(5);
 8003790:	2005      	movs	r0, #5
 8003792:	f001 fa9d 	bl	8004cd0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 8003796:	2030      	movs	r0, #48	@ 0x30
 8003798:	f000 f8a5 	bl	80038e6 <LCD_Write4Bits>
    HAL_Delay(5);
 800379c:	2005      	movs	r0, #5
 800379e:	f001 fa97 	bl	8004cd0 <HAL_Delay>
    LCD_Write4Bits(0x20);  // 4bit 모드
 80037a2:	2020      	movs	r0, #32
 80037a4:	f000 f89f 	bl	80038e6 <LCD_Write4Bits>

    // 기능 설정
    LCD_SendCmd(LCD_CMD_FUNCTION_SET | LCD_FUNCTION_2LINE | LCD_FUNCTION_5x8);
 80037a8:	2028      	movs	r0, #40	@ 0x28
 80037aa:	f000 f84f 	bl	800384c <LCD_SendCmd>
    // 표시 켜기
    LCD_SendCmd(LCD_CMD_DISPLAY_CTRL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 80037ae:	200c      	movs	r0, #12
 80037b0:	f000 f84c 	bl	800384c <LCD_SendCmd>
    // 화면 지우기
    LCD_Clear();
 80037b4:	f000 f808 	bl	80037c8 <LCD_Clear>
    // 엔트리 모드 설정
    LCD_SendCmd(LCD_CMD_ENTRY_MODE | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DEC);
 80037b8:	2006      	movs	r0, #6
 80037ba:	f000 f847 	bl	800384c <LCD_SendCmd>

    HAL_Delay(100);
 80037be:	2064      	movs	r0, #100	@ 0x64
 80037c0:	f001 fa86 	bl	8004cd0 <HAL_Delay>
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <LCD_Clear>:

void LCD_Clear(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
    LCD_SendCmd(LCD_CMD_CLEAR);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f000 f83d 	bl	800384c <LCD_SendCmd>
    HAL_Delay(2);
 80037d2:	2002      	movs	r0, #2
 80037d4:	f001 fa7c 	bl	8004cd0 <HAL_Delay>
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}

080037dc <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	460a      	mov	r2, r1
 80037e6:	71fb      	strb	r3, [r7, #7]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71bb      	strb	r3, [r7, #6]
    static uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 1) row = 1; // 1602는 2라인
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d901      	bls.n	80037f6 <LCD_SetCursor+0x1a>
 80037f2:	2301      	movs	r3, #1
 80037f4:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(LCD_CMD_SET_DDRAM | (col + row_offsets[row]));
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	4a08      	ldr	r2, [pc, #32]	@ (800381c <LCD_SetCursor+0x40>)
 80037fa:	5cd2      	ldrb	r2, [r2, r3]
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	4413      	add	r3, r2
 8003800:	b2db      	uxtb	r3, r3
 8003802:	b25b      	sxtb	r3, r3
 8003804:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003808:	b25b      	sxtb	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f81d 	bl	800384c <LCD_SendCmd>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000000c 	.word	0x2000000c

08003820 <LCD_Print>:

void LCD_Print(const char *str)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
    while (*str) {
 8003828:	e007      	b.n	800383a <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f81a 	bl	8003868 <LCD_SendData>
        str++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3301      	adds	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
    while (*str) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f3      	bne.n	800382a <LCD_Print+0xa>
    }
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <LCD_SendCmd>:
    LCD_Print(buf);
}

// 내부 함수 ===========================
static void LCD_SendCmd(uint8_t cmd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f812 	bl	8003884 <LCD_Send>
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	2101      	movs	r1, #1
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f804 	bl	8003884 <LCD_Send>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t mode)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	460a      	mov	r2, r1
 800388e:	71fb      	strb	r3, [r7, #7]
 8003890:	4613      	mov	r3, r2
 8003892:	71bb      	strb	r3, [r7, #6]
    uint8_t highNib = data & 0xF0;
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f023 030f 	bic.w	r3, r3, #15
 800389a:	73fb      	strb	r3, [r7, #15]
    uint8_t lowNib  = (data << 4) & 0xF0;
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	73bb      	strb	r3, [r7, #14]

    LCD_Write4Bits(highNib | (mode ? 0x01 : 0x00));
 80038a2:	79bb      	ldrb	r3, [r7, #6]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	b25a      	sxtb	r2, r3
 80038b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f813 	bl	80038e6 <LCD_Write4Bits>
    LCD_Write4Bits(lowNib  | (mode ? 0x01 : 0x00));
 80038c0:	79bb      	ldrb	r3, [r7, #6]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	b25a      	sxtb	r2, r3
 80038ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f804 	bl	80038e6 <LCD_Write4Bits>
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <LCD_Write4Bits>:

static void LCD_Write4Bits(uint8_t data)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data);
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f808 	bl	8003908 <LCD_ExpanderWrite>
    LCD_PulseEnable(data);
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f820 	bl	8003940 <LCD_PulseEnable>
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <LCD_ExpanderWrite>:

static void LCD_ExpanderWrite(uint8_t data)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
    uint8_t val = data | backlight;
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <LCD_ExpanderWrite+0x30>)
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4313      	orrs	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &val, 1, 10);
 800391e:	f107 020f 	add.w	r2, r7, #15
 8003922:	230a      	movs	r3, #10
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	214e      	movs	r1, #78	@ 0x4e
 800392a:	4804      	ldr	r0, [pc, #16]	@ (800393c <LCD_ExpanderWrite+0x34>)
 800392c:	f001 fe92 	bl	8005654 <HAL_I2C_Master_Transmit>
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000008 	.word	0x20000008
 800393c:	200022e0 	.word	0x200022e0

08003940 <LCD_PulseEnable>:

static void LCD_PulseEnable(uint8_t data)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data | 0x04); // EN=1
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffd8 	bl	8003908 <LCD_ExpanderWrite>
    HAL_Delay(1);
 8003958:	2001      	movs	r0, #1
 800395a:	f001 f9b9 	bl	8004cd0 <HAL_Delay>
    LCD_ExpanderWrite(data & ~0x04); // EN=0
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ffce 	bl	8003908 <LCD_ExpanderWrite>
    HAL_Delay(1);
 800396c:	2001      	movs	r0, #1
 800396e:	f001 f9af 	bl	8004cd0 <HAL_Delay>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003986:	f001 f931 	bl	8004bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800398a:	f000 f8c9 	bl	8003b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800398e:	f000 fb19 	bl	8003fc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003992:	f000 fac3 	bl	8003f1c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003996:	f000 faeb 	bl	8003f70 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800399a:	f000 f95b 	bl	8003c54 <MX_RTC_Init>
  MX_I2C1_Init();
 800399e:	f000 f92b 	bl	8003bf8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80039a2:	f000 fa19 	bl	8003dd8 <MX_TIM1_Init>
  MX_SPI1_Init();
 80039a6:	f000 f9e1 	bl	8003d6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 80039aa:	f7fe f977 	bl	8001c9c <Servo_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80039ae:	2100      	movs	r1, #0
 80039b0:	483a      	ldr	r0, [pc, #232]	@ (8003a9c <main+0x120>)
 80039b2:	f004 f809 	bl	80079c8 <HAL_TIM_PWM_Start>
  printf("Start main() - wifi\r\n");
 80039b6:	483a      	ldr	r0, [pc, #232]	@ (8003aa0 <main+0x124>)
 80039b8:	f00a fd2c 	bl	800e414 <puts>
  ret |= drv_uart_init();
 80039bc:	f7ff fd42 	bl	8003444 <drv_uart_init>
 80039c0:	4602      	mov	r2, r0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 80039c8:	f7ff fb90 	bl	80030ec <drv_esp_init>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <main+0x68>
  {
	  printf("Esp response error\r\n");
 80039da:	4832      	ldr	r0, [pc, #200]	@ (8003aa4 <main+0x128>)
 80039dc:	f00a fd1a 	bl	800e414 <puts>
	  Error_Handler();
 80039e0:	f000 fb96 	bl	8004110 <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80039e4:	f005 fe5c 	bl	80096a0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 80039e8:	482f      	ldr	r0, [pc, #188]	@ (8003aa8 <main+0x12c>)
 80039ea:	f005 ff9b 	bl	8009924 <osMutexNew>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4a2e      	ldr	r2, [pc, #184]	@ (8003aac <main+0x130>)
 80039f2:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 80039f4:	482e      	ldr	r0, [pc, #184]	@ (8003ab0 <main+0x134>)
 80039f6:	f005 ff95 	bl	8009924 <osMutexNew>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab4 <main+0x138>)
 80039fe:	6013      	str	r3, [r2, #0]

  /* creation of Weather_Mutex */
  Weather_MutexHandle = osMutexNew(&Weather_Mutex_attributes);
 8003a00:	482d      	ldr	r0, [pc, #180]	@ (8003ab8 <main+0x13c>)
 8003a02:	f005 ff8f 	bl	8009924 <osMutexNew>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <main+0x140>)
 8003a0a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 8003a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <main+0x144>)
 8003a0e:	2100      	movs	r1, #0
 8003a10:	482c      	ldr	r0, [pc, #176]	@ (8003ac4 <main+0x148>)
 8003a12:	f005 fead 	bl	8009770 <osThreadNew>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac8 <main+0x14c>)
 8003a1a:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003acc <main+0x150>)
 8003a1e:	2100      	movs	r1, #0
 8003a20:	482b      	ldr	r0, [pc, #172]	@ (8003ad0 <main+0x154>)
 8003a22:	f005 fea5 	bl	8009770 <osThreadNew>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad4 <main+0x158>)
 8003a2a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <main+0x15c>)
 8003a2e:	2100      	movs	r1, #0
 8003a30:	482a      	ldr	r0, [pc, #168]	@ (8003adc <main+0x160>)
 8003a32:	f005 fe9d 	bl	8009770 <osThreadNew>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4a29      	ldr	r2, [pc, #164]	@ (8003ae0 <main+0x164>)
 8003a3a:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 8003a3c:	4a29      	ldr	r2, [pc, #164]	@ (8003ae4 <main+0x168>)
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4829      	ldr	r0, [pc, #164]	@ (8003ae8 <main+0x16c>)
 8003a42:	f005 fe95 	bl	8009770 <osThreadNew>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <main+0x170>)
 8003a4a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(LCD_Task, NULL, &LCDTask_attributes);
 8003a4c:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <main+0x174>)
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4828      	ldr	r0, [pc, #160]	@ (8003af4 <main+0x178>)
 8003a52:	f005 fe8d 	bl	8009770 <osThreadNew>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4a27      	ldr	r2, [pc, #156]	@ (8003af8 <main+0x17c>)
 8003a5a:	6013      	str	r3, [r2, #0]

  /* creation of RFIDTask */
  RFIDTaskHandle = osThreadNew(RFID_Task, NULL, &RFIDTask_attributes);
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <main+0x180>)
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4827      	ldr	r0, [pc, #156]	@ (8003b00 <main+0x184>)
 8003a62:	f005 fe85 	bl	8009770 <osThreadNew>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4a26      	ldr	r2, [pc, #152]	@ (8003b04 <main+0x188>)
 8003a6a:	6013      	str	r3, [r2, #0]

  /* creation of THTask */
  THTaskHandle = osThreadNew(TH_Task, NULL, &THTask_attributes);
 8003a6c:	4a26      	ldr	r2, [pc, #152]	@ (8003b08 <main+0x18c>)
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4826      	ldr	r0, [pc, #152]	@ (8003b0c <main+0x190>)
 8003a72:	f005 fe7d 	bl	8009770 <osThreadNew>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4a25      	ldr	r2, [pc, #148]	@ (8003b10 <main+0x194>)
 8003a7a:	6013      	str	r3, [r2, #0]

  /* creation of PIRTask */
  PIRTaskHandle = osThreadNew(PIR_Task, NULL, &PIRTask_attributes);
 8003a7c:	4a25      	ldr	r2, [pc, #148]	@ (8003b14 <main+0x198>)
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4825      	ldr	r0, [pc, #148]	@ (8003b18 <main+0x19c>)
 8003a82:	f005 fe75 	bl	8009770 <osThreadNew>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4a24      	ldr	r2, [pc, #144]	@ (8003b1c <main+0x1a0>)
 8003a8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003a8c:	f005 fe2c 	bl	80096e8 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8003a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a94:	f005 fefe 	bl	8009894 <osDelay>
 8003a98:	e7fa      	b.n	8003a90 <main+0x114>
 8003a9a:	bf00      	nop
 8003a9c:	200023ac 	.word	0x200023ac
 8003aa0:	080133cc 	.word	0x080133cc
 8003aa4:	080133e4 	.word	0x080133e4
 8003aa8:	08013544 	.word	0x08013544
 8003aac:	200024a4 	.word	0x200024a4
 8003ab0:	08013554 	.word	0x08013554
 8003ab4:	200024a8 	.word	0x200024a8
 8003ab8:	08013564 	.word	0x08013564
 8003abc:	200024ac 	.word	0x200024ac
 8003ac0:	08013424 	.word	0x08013424
 8003ac4:	080010f1 	.word	0x080010f1
 8003ac8:	20002484 	.word	0x20002484
 8003acc:	08013448 	.word	0x08013448
 8003ad0:	08001899 	.word	0x08001899
 8003ad4:	20002488 	.word	0x20002488
 8003ad8:	0801346c 	.word	0x0801346c
 8003adc:	08002289 	.word	0x08002289
 8003ae0:	2000248c 	.word	0x2000248c
 8003ae4:	08013490 	.word	0x08013490
 8003ae8:	080015ad 	.word	0x080015ad
 8003aec:	20002490 	.word	0x20002490
 8003af0:	080134b4 	.word	0x080134b4
 8003af4:	080016b1 	.word	0x080016b1
 8003af8:	20002494 	.word	0x20002494
 8003afc:	080134d8 	.word	0x080134d8
 8003b00:	08001c45 	.word	0x08001c45
 8003b04:	20002498 	.word	0x20002498
 8003b08:	080134fc 	.word	0x080134fc
 8003b0c:	08001d55 	.word	0x08001d55
 8003b10:	2000249c 	.word	0x2000249c
 8003b14:	08013520 	.word	0x08013520
 8003b18:	08001a61 	.word	0x08001a61
 8003b1c:	200024a0 	.word	0x200024a0

08003b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b094      	sub	sp, #80	@ 0x50
 8003b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b26:	f107 0320 	add.w	r3, r7, #32
 8003b2a:	2230      	movs	r2, #48	@ 0x30
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00a fe00 	bl	800e734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	4b29      	ldr	r3, [pc, #164]	@ (8003bf0 <SystemClock_Config+0xd0>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	4a28      	ldr	r2, [pc, #160]	@ (8003bf0 <SystemClock_Config+0xd0>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b54:	4b26      	ldr	r3, [pc, #152]	@ (8003bf0 <SystemClock_Config+0xd0>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <SystemClock_Config+0xd4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <SystemClock_Config+0xd4>)
 8003b6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <SystemClock_Config+0xd4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b7c:	2309      	movs	r3, #9
 8003b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b86:	2301      	movs	r3, #1
 8003b88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b94:	2308      	movs	r3, #8
 8003b96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003b98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba6:	f107 0320 	add.w	r3, r7, #32
 8003baa:	4618      	mov	r0, r3
 8003bac:	f002 f8ac 	bl	8005d08 <HAL_RCC_OscConfig>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003bb6:	f000 faab 	bl	8004110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bba:	230f      	movs	r3, #15
 8003bbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003bd0:	f107 030c 	add.w	r3, r7, #12
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 fb0e 	bl	80061f8 <HAL_RCC_ClockConfig>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003be2:	f000 fa95 	bl	8004110 <Error_Handler>
  }
}
 8003be6:	bf00      	nop
 8003be8:	3750      	adds	r7, #80	@ 0x50
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000

08003bf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003bfe:	4a13      	ldr	r2, [pc, #76]	@ (8003c4c <MX_I2C1_Init+0x54>)
 8003c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c02:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c04:	4a12      	ldr	r2, [pc, #72]	@ (8003c50 <MX_I2C1_Init+0x58>)
 8003c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c28:	4b07      	ldr	r3, [pc, #28]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c34:	4804      	ldr	r0, [pc, #16]	@ (8003c48 <MX_I2C1_Init+0x50>)
 8003c36:	f001 fbc9 	bl	80053cc <HAL_I2C_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c40:	f000 fa66 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200022e0 	.word	0x200022e0
 8003c4c:	40005400 	.word	0x40005400
 8003c50:	000186a0 	.word	0x000186a0

08003c54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b090      	sub	sp, #64	@ 0x40
 8003c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003c6e:	463b      	mov	r3, r7
 8003c70:	2228      	movs	r2, #40	@ 0x28
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f00a fd5d 	bl	800e734 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d68 <MX_RTC_Init+0x114>)
 8003c7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c80:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c86:	4b37      	ldr	r3, [pc, #220]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003c88:	227f      	movs	r2, #127	@ 0x7f
 8003c8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c8c:	4b35      	ldr	r3, [pc, #212]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003c8e:	22ff      	movs	r2, #255	@ 0xff
 8003c90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c92:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c98:	4b32      	ldr	r3, [pc, #200]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c9e:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ca4:	482f      	ldr	r0, [pc, #188]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003ca6:	f002 fdb7 	bl	8006818 <HAL_RTC_Init>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003cb0:	f000 fa2e 	bl	8004110 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4823      	ldr	r0, [pc, #140]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003cd8:	f002 fe1f 	bl	800691a <HAL_RTC_SetTime>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003ce2:	f000 fa15 	bl	8004110 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d02:	2201      	movs	r2, #1
 8003d04:	4619      	mov	r1, r3
 8003d06:	4817      	ldr	r0, [pc, #92]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003d08:	f002 fea1 	bl	8006a4e <HAL_RTC_SetDate>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003d12:	f000 f9fd 	bl	8004110 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003d46:	463b      	mov	r3, r7
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4805      	ldr	r0, [pc, #20]	@ (8003d64 <MX_RTC_Init+0x110>)
 8003d4e:	f002 ff03 	bl	8006b58 <HAL_RTC_SetAlarm_IT>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003d58:	f000 f9da 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d5c:	bf00      	nop
 8003d5e:	3740      	adds	r7, #64	@ 0x40
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20002334 	.word	0x20002334
 8003d68:	40002800 	.word	0x40002800

08003d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d70:	4b17      	ldr	r3, [pc, #92]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d72:	4a18      	ldr	r2, [pc, #96]	@ (8003dd4 <MX_SPI1_Init+0x68>)
 8003d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d76:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8a:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003da0:	2218      	movs	r2, #24
 8003da2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003db8:	220a      	movs	r2, #10
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003dbc:	4804      	ldr	r0, [pc, #16]	@ (8003dd0 <MX_SPI1_Init+0x64>)
 8003dbe:	f003 f909 	bl	8006fd4 <HAL_SPI_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003dc8:	f000 f9a2 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20002354 	.word	0x20002354
 8003dd4:	40013000 	.word	0x40013000

08003dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b096      	sub	sp, #88	@ 0x58
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	609a      	str	r2, [r3, #8]
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	611a      	str	r2, [r3, #16]
 8003e06:	615a      	str	r2, [r3, #20]
 8003e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f00a fc8f 	bl	800e734 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e16:	4b3f      	ldr	r3, [pc, #252]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e18:	4a3f      	ldr	r2, [pc, #252]	@ (8003f18 <MX_TIM1_Init+0x140>)
 8003e1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e1e:	2253      	movs	r2, #83	@ 0x53
 8003e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e22:	4b3c      	ldr	r3, [pc, #240]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003e28:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e2a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003e2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e30:	4b38      	ldr	r3, [pc, #224]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e36:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e3c:	4b35      	ldr	r3, [pc, #212]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e42:	4834      	ldr	r0, [pc, #208]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e44:	f003 fd18 	bl	8007878 <HAL_TIM_Base_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003e4e:	f000 f95f 	bl	8004110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	482d      	ldr	r0, [pc, #180]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e60:	f003 ff24 	bl	8007cac <HAL_TIM_ConfigClockSource>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e6a:	f000 f951 	bl	8004110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e6e:	4829      	ldr	r0, [pc, #164]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e70:	f003 fd51 	bl	8007916 <HAL_TIM_PWM_Init>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003e7a:	f000 f949 	bl	8004110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4821      	ldr	r0, [pc, #132]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003e8e:	f004 faa7 	bl	80083e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003e98:	f000 f93a 	bl	8004110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e9c:	2360      	movs	r3, #96	@ 0x60
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8003ea0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4814      	ldr	r0, [pc, #80]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003ec4:	f003 fe30 	bl	8007b28 <HAL_TIM_PWM_ConfigChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003ece:	f000 f91f 	bl	8004110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ee6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003eea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ef0:	1d3b      	adds	r3, r7, #4
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4807      	ldr	r0, [pc, #28]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003ef6:	f004 fae1 	bl	80084bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003f00:	f000 f906 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f04:	4803      	ldr	r0, [pc, #12]	@ (8003f14 <MX_TIM1_Init+0x13c>)
 8003f06:	f000 fc4b 	bl	80047a0 <HAL_TIM_MspPostInit>

}
 8003f0a:	bf00      	nop
 8003f0c:	3758      	adds	r7, #88	@ 0x58
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	200023ac 	.word	0x200023ac
 8003f18:	40010000 	.word	0x40010000

08003f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f20:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f22:	4a12      	ldr	r2, [pc, #72]	@ (8003f6c <MX_USART2_UART_Init+0x50>)
 8003f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f40:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f42:	220c      	movs	r2, #12
 8003f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f46:	4b08      	ldr	r3, [pc, #32]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f52:	4805      	ldr	r0, [pc, #20]	@ (8003f68 <MX_USART2_UART_Init+0x4c>)
 8003f54:	f004 fb04 	bl	8008560 <HAL_UART_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f5e:	f000 f8d7 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200023f4 	.word	0x200023f4
 8003f6c:	40004400 	.word	0x40004400

08003f70 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f74:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f76:	4a12      	ldr	r2, [pc, #72]	@ (8003fc0 <MX_USART6_UART_Init+0x50>)
 8003f78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8003f7a:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f7c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003f80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f82:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f88:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f94:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f96:	220c      	movs	r2, #12
 8003f98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003fa6:	4805      	ldr	r0, [pc, #20]	@ (8003fbc <MX_USART6_UART_Init+0x4c>)
 8003fa8:	f004 fada 	bl	8008560 <HAL_UART_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003fb2:	f000 f8ad 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2000243c 	.word	0x2000243c
 8003fc0:	40011400 	.word	0x40011400

08003fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	@ 0x28
 8003fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fca:	f107 0314 	add.w	r3, r7, #20
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	4b48      	ldr	r3, [pc, #288]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	4a47      	ldr	r2, [pc, #284]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fea:	4b45      	ldr	r3, [pc, #276]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	4b41      	ldr	r3, [pc, #260]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	4a40      	ldr	r2, [pc, #256]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004004:	6313      	str	r3, [r2, #48]	@ 0x30
 8004006:	4b3e      	ldr	r3, [pc, #248]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	4b3a      	ldr	r3, [pc, #232]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	4a39      	ldr	r2, [pc, #228]	@ (8004100 <MX_GPIO_Init+0x13c>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6313      	str	r3, [r2, #48]	@ 0x30
 8004022:	4b37      	ldr	r3, [pc, #220]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	4b33      	ldr	r3, [pc, #204]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	4a32      	ldr	r2, [pc, #200]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	6313      	str	r3, [r2, #48]	@ 0x30
 800403e:	4b30      	ldr	r3, [pc, #192]	@ (8004100 <MX_GPIO_Init+0x13c>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TH_Sensor_Pin|RFID_SDA_Pin, GPIO_PIN_RESET);
 800404a:	2200      	movs	r2, #0
 800404c:	2112      	movs	r1, #18
 800404e:	482d      	ldr	r0, [pc, #180]	@ (8004104 <MX_GPIO_Init+0x140>)
 8004050:	f001 f9a2 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RFID_RST_Pin|LED_Pin, GPIO_PIN_RESET);
 8004054:	2200      	movs	r2, #0
 8004056:	2130      	movs	r1, #48	@ 0x30
 8004058:	482b      	ldr	r0, [pc, #172]	@ (8004108 <MX_GPIO_Init+0x144>)
 800405a:	f001 f99d 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin, GPIO_PIN_RESET);
 800405e:	2200      	movs	r2, #0
 8004060:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8004064:	4829      	ldr	r0, [pc, #164]	@ (800410c <MX_GPIO_Init+0x148>)
 8004066:	f001 f997 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800406a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800406e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004070:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	4619      	mov	r1, r3
 8004080:	4821      	ldr	r0, [pc, #132]	@ (8004108 <MX_GPIO_Init+0x144>)
 8004082:	f000 ffed 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : TH_Sensor_Pin RFID_SDA_Pin */
  GPIO_InitStruct.Pin = TH_Sensor_Pin|RFID_SDA_Pin;
 8004086:	2312      	movs	r3, #18
 8004088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800408a:	2301      	movs	r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004096:	f107 0314 	add.w	r3, r7, #20
 800409a:	4619      	mov	r1, r3
 800409c:	4819      	ldr	r0, [pc, #100]	@ (8004104 <MX_GPIO_Init+0x140>)
 800409e:	f000 ffdf 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_RST_Pin LED_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|LED_Pin;
 80040a2:	2330      	movs	r3, #48	@ 0x30
 80040a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	4619      	mov	r1, r3
 80040b8:	4813      	ldr	r0, [pc, #76]	@ (8004108 <MX_GPIO_Init+0x144>)
 80040ba:	f000 ffd1 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 FAN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin;
 80040be:	f24e 0310 	movw	r3, #57360	@ 0xe010
 80040c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c4:	2301      	movs	r3, #1
 80040c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4619      	mov	r1, r3
 80040d6:	480d      	ldr	r0, [pc, #52]	@ (800410c <MX_GPIO_Init+0x148>)
 80040d8:	f000 ffc2 	bl	8005060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Sensor_Pin */
  GPIO_InitStruct.Pin = PIR_Sensor_Pin;
 80040dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040e6:	2302      	movs	r3, #2
 80040e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_Sensor_GPIO_Port, &GPIO_InitStruct);
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	4619      	mov	r1, r3
 80040f0:	4804      	ldr	r0, [pc, #16]	@ (8004104 <MX_GPIO_Init+0x140>)
 80040f2:	f000 ffb5 	bl	8005060 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80040f6:	bf00      	nop
 80040f8:	3728      	adds	r7, #40	@ 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40020000 	.word	0x40020000
 8004108:	40020800 	.word	0x40020800
 800410c:	40020400 	.word	0x40020400

08004110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004114:	b672      	cpsid	i
}
 8004116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <Error_Handler+0x8>

0800411c <CS_LOW>:
#include "mfrc522.h"
#include <string.h>

// ===== 로컬 유틸 =====
static inline void CS_LOW(void)  { HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port,  MFRC522_CS_Pin,  GPIO_PIN_RESET); }
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
 8004120:	2200      	movs	r2, #0
 8004122:	2110      	movs	r1, #16
 8004124:	4802      	ldr	r0, [pc, #8]	@ (8004130 <CS_LOW+0x14>)
 8004126:	f001 f937 	bl	8005398 <HAL_GPIO_WritePin>
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40020000 	.word	0x40020000

08004134 <CS_HIGH>:
static inline void CS_HIGH(void) { HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port,  MFRC522_CS_Pin,  GPIO_PIN_SET);   }
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
 8004138:	2201      	movs	r2, #1
 800413a:	2110      	movs	r1, #16
 800413c:	4802      	ldr	r0, [pc, #8]	@ (8004148 <CS_HIGH+0x14>)
 800413e:	f001 f92b 	bl	8005398 <HAL_GPIO_WritePin>
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40020000 	.word	0x40020000

0800414c <RST_HIGH>:
static inline void RST_LOW(void) { HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, GPIO_PIN_RESET); }
static inline void RST_HIGH(void){ HAL_GPIO_WritePin(MFRC522_RST_GPIO_Port, MFRC522_RST_Pin, GPIO_PIN_SET);   }
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
 8004150:	2201      	movs	r2, #1
 8004152:	2110      	movs	r1, #16
 8004154:	4802      	ldr	r0, [pc, #8]	@ (8004160 <RST_HIGH+0x14>)
 8004156:	f001 f91f 	bl	8005398 <HAL_GPIO_WritePin>
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40020800 	.word	0x40020800

08004164 <MFRC522_ReadReg>:
static void     MFRC522_CalcCRC(uint8_t *data, uint8_t len, uint8_t *out);


// ===== 레지스터 R/W =====
uint8_t MFRC522_ReadReg(uint8_t reg)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
    uint8_t addr = ((reg << 1) & 0x7E) | 0x80; // read bit=1
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	b25b      	sxtb	r3, r3
 8004176:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800417a:	b25b      	sxtb	r3, r3
 800417c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004180:	b25b      	sxtb	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	73fb      	strb	r3, [r7, #15]
    uint8_t rx=0, dummy=0;
 8004186:	2300      	movs	r3, #0
 8004188:	73bb      	strb	r3, [r7, #14]
 800418a:	2300      	movs	r3, #0
 800418c:	737b      	strb	r3, [r7, #13]
    CS_LOW();
 800418e:	f7ff ffc5 	bl	800411c <CS_LOW>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 10);
 8004192:	f107 010f 	add.w	r1, r7, #15
 8004196:	230a      	movs	r3, #10
 8004198:	2201      	movs	r2, #1
 800419a:	480a      	ldr	r0, [pc, #40]	@ (80041c4 <MFRC522_ReadReg+0x60>)
 800419c:	f002 ffa3 	bl	80070e6 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive(&hspi1, &dummy, &rx, 1, 10);
 80041a0:	f107 020e 	add.w	r2, r7, #14
 80041a4:	f107 010d 	add.w	r1, r7, #13
 80041a8:	230a      	movs	r3, #10
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2301      	movs	r3, #1
 80041ae:	4805      	ldr	r0, [pc, #20]	@ (80041c4 <MFRC522_ReadReg+0x60>)
 80041b0:	f003 f8dd 	bl	800736e <HAL_SPI_TransmitReceive>
    CS_HIGH();
 80041b4:	f7ff ffbe 	bl	8004134 <CS_HIGH>
    return rx;
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20002354 	.word	0x20002354

080041c8 <MFRC522_WriteReg>:

void MFRC522_WriteReg(uint8_t reg, uint8_t val)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	460a      	mov	r2, r1
 80041d2:	71fb      	strb	r3, [r7, #7]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = ((reg << 1) & 0x7E); // write bit=0
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	73fb      	strb	r3, [r7, #15]
    CS_LOW();
 80041e6:	f7ff ff99 	bl	800411c <CS_LOW>
    HAL_SPI_Transmit(&hspi1, &addr, 1, 10);
 80041ea:	f107 010f 	add.w	r1, r7, #15
 80041ee:	230a      	movs	r3, #10
 80041f0:	2201      	movs	r2, #1
 80041f2:	4807      	ldr	r0, [pc, #28]	@ (8004210 <MFRC522_WriteReg+0x48>)
 80041f4:	f002 ff77 	bl	80070e6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &val, 1, 10);
 80041f8:	1db9      	adds	r1, r7, #6
 80041fa:	230a      	movs	r3, #10
 80041fc:	2201      	movs	r2, #1
 80041fe:	4804      	ldr	r0, [pc, #16]	@ (8004210 <MFRC522_WriteReg+0x48>)
 8004200:	f002 ff71 	bl	80070e6 <HAL_SPI_Transmit>
    CS_HIGH();
 8004204:	f7ff ff96 	bl	8004134 <CS_HIGH>
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20002354 	.word	0x20002354

08004214 <MFRC522_Init>:

// ===== 초기화 =====
void MFRC522_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
    // 핀 기본 상태
    CS_HIGH();
 8004218:	f7ff ff8c 	bl	8004134 <CS_HIGH>
    RST_HIGH();
 800421c:	f7ff ff96 	bl	800414c <RST_HIGH>
    HAL_Delay(50);
 8004220:	2032      	movs	r0, #50	@ 0x32
 8004222:	f000 fd55 	bl	8004cd0 <HAL_Delay>

    PCD_Reset();
 8004226:	f000 f81c 	bl	8004262 <PCD_Reset>

    // Timer: TModeReg, TPrescalerReg, TReloadReg 설정 (표준)
    MFRC522_WriteReg(TModeReg,      0x8D);   // TAuto=1, TAutoRestart
 800422a:	218d      	movs	r1, #141	@ 0x8d
 800422c:	202a      	movs	r0, #42	@ 0x2a
 800422e:	f7ff ffcb 	bl	80041c8 <MFRC522_WriteReg>
    MFRC522_WriteReg(TPrescalerReg, 0x3E);
 8004232:	213e      	movs	r1, #62	@ 0x3e
 8004234:	202b      	movs	r0, #43	@ 0x2b
 8004236:	f7ff ffc7 	bl	80041c8 <MFRC522_WriteReg>
    MFRC522_WriteReg(TReloadRegL,   30);
 800423a:	211e      	movs	r1, #30
 800423c:	202d      	movs	r0, #45	@ 0x2d
 800423e:	f7ff ffc3 	bl	80041c8 <MFRC522_WriteReg>
    MFRC522_WriteReg(TReloadRegH,   0);
 8004242:	2100      	movs	r1, #0
 8004244:	202c      	movs	r0, #44	@ 0x2c
 8004246:	f7ff ffbf 	bl	80041c8 <MFRC522_WriteReg>

    MFRC522_WriteReg(TxASKReg,      0x40);   // 强制100%ASK
 800424a:	2140      	movs	r1, #64	@ 0x40
 800424c:	2015      	movs	r0, #21
 800424e:	f7ff ffbb 	bl	80041c8 <MFRC522_WriteReg>
    MFRC522_WriteReg(ModeReg,       0x3D);   // CRC 초기값 0x6363
 8004252:	213d      	movs	r1, #61	@ 0x3d
 8004254:	2011      	movs	r0, #17
 8004256:	f7ff ffb7 	bl	80041c8 <MFRC522_WriteReg>

    MFRC522_AntennaOn();
 800425a:	f000 f80d 	bl	8004278 <MFRC522_AntennaOn>
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}

08004262 <PCD_Reset>:

static void PCD_Reset(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0
    MFRC522_WriteReg(CommandReg, PCD_SoftReset);
 8004266:	210f      	movs	r1, #15
 8004268:	2001      	movs	r0, #1
 800426a:	f7ff ffad 	bl	80041c8 <MFRC522_WriteReg>
    HAL_Delay(50);
 800426e:	2032      	movs	r0, #50	@ 0x32
 8004270:	f000 fd2e 	bl	8004cd0 <HAL_Delay>
    // 일부 보드에서 RST 핀을 실제로 Low/High 토글해야 할 수 있음
    // RST_LOW(); HAL_Delay(2); RST_HIGH(); HAL_Delay(50);
}
 8004274:	bf00      	nop
 8004276:	bd80      	pop	{r7, pc}

08004278 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
    uint8_t v = MFRC522_ReadReg(TxControlReg);
 800427e:	2014      	movs	r0, #20
 8004280:	f7ff ff70 	bl	8004164 <MFRC522_ReadReg>
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
    if (!(v & 0x03)) {
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <MFRC522_AntennaOn+0x2a>
        MFRC522_WriteReg(TxControlReg, v | 0x03);
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f043 0303 	orr.w	r3, r3, #3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4619      	mov	r1, r3
 800429c:	2014      	movs	r0, #20
 800429e:	f7ff ff93 	bl	80041c8 <MFRC522_WriteReg>
    }
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <SetBitMask>:
    ClearBitMask(TxControlReg, 0x03);
}

// ===== 비트 마스크 =====
static void SetBitMask(uint8_t reg, uint8_t mask)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	460a      	mov	r2, r1
 80042b4:	71fb      	strb	r3, [r7, #7]
 80042b6:	4613      	mov	r3, r2
 80042b8:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadReg(reg);
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff51 	bl	8004164 <MFRC522_ReadReg>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteReg(reg, tmp | mask);
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	79bb      	ldrb	r3, [r7, #6]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff78 	bl	80041c8 <MFRC522_WriteReg>
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <ClearBitMask>:

static void ClearBitMask(uint8_t reg, uint8_t mask)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	460a      	mov	r2, r1
 80042ea:	71fb      	strb	r3, [r7, #7]
 80042ec:	4613      	mov	r3, r2
 80042ee:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadReg(reg);
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff36 	bl	8004164 <MFRC522_ReadReg>
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteReg(reg, tmp & (~mask));
 80042fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004300:	43db      	mvns	r3, r3
 8004302:	b25a      	sxtb	r2, r3
 8004304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004308:	4013      	ands	r3, r2
 800430a:	b25b      	sxtb	r3, r3
 800430c:	b2da      	uxtb	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff58 	bl	80041c8 <MFRC522_WriteReg>
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <PCD_ToCard>:
}

// ===== 카드와 통신 =====
static uint8_t PCD_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
                          uint8_t *backData, uint16_t *backLen)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	4603      	mov	r3, r0
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	4613      	mov	r3, r2
 8004330:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8004332:	2302      	movs	r3, #2
 8004334:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8004336:	2300      	movs	r3, #0
 8004338:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 800433a:	2300      	movs	r3, #0
 800433c:	777b      	strb	r3, [r7, #29]

    if (command == PCD_MFAuthent) {
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b0e      	cmp	r3, #14
 8004342:	d104      	bne.n	800434e <PCD_ToCard+0x2e>
        irqEn   = 0x12;
 8004344:	2312      	movs	r3, #18
 8004346:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8004348:	2310      	movs	r3, #16
 800434a:	777b      	strb	r3, [r7, #29]
 800434c:	e006      	b.n	800435c <PCD_ToCard+0x3c>
    } else if (command == PCD_Transceive) {
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d103      	bne.n	800435c <PCD_ToCard+0x3c>
        irqEn   = 0x77;
 8004354:	2377      	movs	r3, #119	@ 0x77
 8004356:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 8004358:	2330      	movs	r3, #48	@ 0x30
 800435a:	777b      	strb	r3, [r7, #29]
    }

    MFRC522_WriteReg(ComIEnReg, irqEn | 0x80);
 800435c:	7fbb      	ldrb	r3, [r7, #30]
 800435e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	2002      	movs	r0, #2
 8004368:	f7ff ff2e 	bl	80041c8 <MFRC522_WriteReg>
    ClearBitMask(ComIrqReg, 0x80);      // Clear all IRQ
 800436c:	2180      	movs	r1, #128	@ 0x80
 800436e:	2004      	movs	r0, #4
 8004370:	f7ff ffb6 	bl	80042e0 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);     // Flush FIFO
 8004374:	2180      	movs	r1, #128	@ 0x80
 8004376:	200a      	movs	r0, #10
 8004378:	f7ff ff97 	bl	80042aa <SetBitMask>
    MFRC522_WriteReg(CommandReg, PCD_Idle);
 800437c:	2100      	movs	r1, #0
 800437e:	2001      	movs	r0, #1
 8004380:	f7ff ff22 	bl	80041c8 <MFRC522_WriteReg>

    for (uint8_t i=0;i<sendLen;i++) MFRC522_WriteReg(FIFODataReg, sendData[i]);
 8004384:	2300      	movs	r3, #0
 8004386:	773b      	strb	r3, [r7, #28]
 8004388:	e00a      	b.n	80043a0 <PCD_ToCard+0x80>
 800438a:	7f3b      	ldrb	r3, [r7, #28]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4413      	add	r3, r2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	2009      	movs	r0, #9
 8004396:	f7ff ff17 	bl	80041c8 <MFRC522_WriteReg>
 800439a:	7f3b      	ldrb	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	773b      	strb	r3, [r7, #28]
 80043a0:	7f3a      	ldrb	r2, [r7, #28]
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3f0      	bcc.n	800438a <PCD_ToCard+0x6a>
    MFRC522_WriteReg(CommandReg, command);
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	4619      	mov	r1, r3
 80043ac:	2001      	movs	r0, #1
 80043ae:	f7ff ff0b 	bl	80041c8 <MFRC522_WriteReg>
    if (command == PCD_Transceive) SetBitMask(BitFramingReg, 0x80); // StartSend
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d103      	bne.n	80043c0 <PCD_ToCard+0xa0>
 80043b8:	2180      	movs	r1, #128	@ 0x80
 80043ba:	200d      	movs	r0, #13
 80043bc:	f7ff ff75 	bl	80042aa <SetBitMask>

    // 대기
    uint16_t i = 2000;
 80043c0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80043c4:	837b      	strh	r3, [r7, #26]
    do {
        uint8_t n = MFRC522_ReadReg(ComIrqReg);
 80043c6:	2004      	movs	r0, #4
 80043c8:	f7ff fecc 	bl	8004164 <MFRC522_ReadReg>
 80043cc:	4603      	mov	r3, r0
 80043ce:	763b      	strb	r3, [r7, #24]
        if (n & waitIRq) break;
 80043d0:	7e3a      	ldrb	r2, [r7, #24]
 80043d2:	7f7b      	ldrb	r3, [r7, #29]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <PCD_ToCard+0xd4>
        if (n & 0x01)    break; // Timer
 80043dc:	7e3b      	ldrb	r3, [r7, #24]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d108      	bne.n	80043f8 <PCD_ToCard+0xd8>
    } while (--i);
 80043e6:	8b7b      	ldrh	r3, [r7, #26]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	837b      	strh	r3, [r7, #26]
 80043ec:	8b7b      	ldrh	r3, [r7, #26]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e9      	bne.n	80043c6 <PCD_ToCard+0xa6>
 80043f2:	e002      	b.n	80043fa <PCD_ToCard+0xda>
        if (n & waitIRq) break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <PCD_ToCard+0xda>
        if (n & 0x01)    break; // Timer
 80043f8:	bf00      	nop

    ClearBitMask(BitFramingReg, 0x80);
 80043fa:	2180      	movs	r1, #128	@ 0x80
 80043fc:	200d      	movs	r0, #13
 80043fe:	f7ff ff6f 	bl	80042e0 <ClearBitMask>

    if (i) {
 8004402:	8b7b      	ldrh	r3, [r7, #26]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d04e      	beq.n	80044a6 <PCD_ToCard+0x186>
        if (!(MFRC522_ReadReg(ErrorReg) & 0x1B)) {
 8004408:	2006      	movs	r0, #6
 800440a:	f7ff feab 	bl	8004164 <MFRC522_ReadReg>
 800440e:	4603      	mov	r3, r0
 8004410:	f003 031b 	and.w	r3, r3, #27
 8004414:	2b00      	cmp	r3, #0
 8004416:	d143      	bne.n	80044a0 <PCD_ToCard+0x180>
            status = MI_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
            if (backData && backLen) {
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d043      	beq.n	80044aa <PCD_ToCard+0x18a>
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	2b00      	cmp	r3, #0
 8004426:	d040      	beq.n	80044aa <PCD_ToCard+0x18a>
                uint8_t n = MFRC522_ReadReg(FIFOLevelReg);
 8004428:	200a      	movs	r0, #10
 800442a:	f7ff fe9b 	bl	8004164 <MFRC522_ReadReg>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
                uint8_t lastBits = MFRC522_ReadReg(ControlReg) & 0x07;
 8004432:	200c      	movs	r0, #12
 8004434:	f7ff fe96 	bl	8004164 <MFRC522_ReadReg>
 8004438:	4603      	mov	r3, r0
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	75bb      	strb	r3, [r7, #22]
                if (lastBits) *backLen = (n-1)*8 + lastBits;
 8004440:	7dbb      	ldrb	r3, [r7, #22]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <PCD_ToCard+0x13e>
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	3b01      	subs	r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	b29a      	uxth	r2, r3
 8004450:	7dbb      	ldrb	r3, [r7, #22]
 8004452:	b29b      	uxth	r3, r3
 8004454:	4413      	add	r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	e005      	b.n	800446a <PCD_ToCard+0x14a>
                else          *backLen =  n   *8;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	b29b      	uxth	r3, r3
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	b29a      	uxth	r2, r3
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	801a      	strh	r2, [r3, #0]

                // 바이트 단위로 복사
                uint8_t bytes = (*backLen + 7) / 8;
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	3307      	adds	r3, #7
 8004470:	2b00      	cmp	r3, #0
 8004472:	da00      	bge.n	8004476 <PCD_ToCard+0x156>
 8004474:	3307      	adds	r3, #7
 8004476:	10db      	asrs	r3, r3, #3
 8004478:	757b      	strb	r3, [r7, #21]
                for (uint8_t j=0;j<bytes;j++)
 800447a:	2300      	movs	r3, #0
 800447c:	767b      	strb	r3, [r7, #25]
 800447e:	e00a      	b.n	8004496 <PCD_ToCard+0x176>
                    backData[j] = MFRC522_ReadReg(FIFODataReg);
 8004480:	7e7b      	ldrb	r3, [r7, #25]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	18d4      	adds	r4, r2, r3
 8004486:	2009      	movs	r0, #9
 8004488:	f7ff fe6c 	bl	8004164 <MFRC522_ReadReg>
 800448c:	4603      	mov	r3, r0
 800448e:	7023      	strb	r3, [r4, #0]
                for (uint8_t j=0;j<bytes;j++)
 8004490:	7e7b      	ldrb	r3, [r7, #25]
 8004492:	3301      	adds	r3, #1
 8004494:	767b      	strb	r3, [r7, #25]
 8004496:	7e7a      	ldrb	r2, [r7, #25]
 8004498:	7d7b      	ldrb	r3, [r7, #21]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3f0      	bcc.n	8004480 <PCD_ToCard+0x160>
 800449e:	e004      	b.n	80044aa <PCD_ToCard+0x18a>
            }
        } else status = MI_ERR;
 80044a0:	2302      	movs	r3, #2
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e001      	b.n	80044aa <PCD_ToCard+0x18a>
    } else {
        status = MI_ERR;
 80044a6:	2302      	movs	r3, #2
 80044a8:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3724      	adds	r7, #36	@ 0x24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd90      	pop	{r4, r7, pc}

080044b4 <MFRC522_Request>:

// ===== 카드 탐지 (REQA/ALL) =====
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *ATQA)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	71fb      	strb	r3, [r7, #7]
    MFRC522_WriteReg(BitFramingReg, 0x07); // 7bits send
 80044c0:	2107      	movs	r1, #7
 80044c2:	200d      	movs	r0, #13
 80044c4:	f7ff fe80 	bl	80041c8 <MFRC522_WriteReg>
    uint8_t buf[1] = { reqMode };
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	733b      	strb	r3, [r7, #12]
    uint16_t backBits = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	817b      	strh	r3, [r7, #10]

    uint8_t status = PCD_ToCard(PCD_Transceive, buf, 1, ATQA, &backBits);
 80044d0:	f107 010c 	add.w	r1, r7, #12
 80044d4:	f107 030a 	add.w	r3, r7, #10
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	200c      	movs	r0, #12
 80044e0:	f7ff ff1e 	bl	8004320 <PCD_ToCard>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK || backBits != 0x10) return MI_ERR;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <MFRC522_Request+0x40>
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d001      	beq.n	80044f8 <MFRC522_Request+0x44>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e000      	b.n	80044fa <MFRC522_Request+0x46>
    return MI_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <MFRC522_Anticoll>:

// ===== 충돌 방지 & UID 읽기 =====
uint8_t MFRC522_Anticoll(uint8_t *uid)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	@ 0x28
 8004506:	af02      	add	r7, sp, #8
 8004508:	6078      	str	r0, [r7, #4]
    MFRC522_WriteReg(BitFramingReg, 0x00); // 8bits
 800450a:	2100      	movs	r1, #0
 800450c:	200d      	movs	r0, #13
 800450e:	f7ff fe5b 	bl	80041c8 <MFRC522_WriteReg>

    uint8_t serBuf[2] = { PICC_ANTICOLL, 0x20 };
 8004512:	f242 0393 	movw	r3, #8339	@ 0x2093
 8004516:	833b      	strh	r3, [r7, #24]
    uint8_t backData[10] = {0};
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	811a      	strh	r2, [r3, #8]
    uint16_t backBits = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	817b      	strh	r3, [r7, #10]

    uint8_t status = PCD_ToCard(PCD_Transceive, serBuf, 2, backData, &backBits);
 8004528:	f107 020c 	add.w	r2, r7, #12
 800452c:	f107 0118 	add.w	r1, r7, #24
 8004530:	f107 030a 	add.w	r3, r7, #10
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4613      	mov	r3, r2
 8004538:	2202      	movs	r2, #2
 800453a:	200c      	movs	r0, #12
 800453c:	f7ff fef0 	bl	8004320 <PCD_ToCard>
 8004540:	4603      	mov	r3, r0
 8004542:	76fb      	strb	r3, [r7, #27]
    if (status != MI_OK) return MI_ERR;
 8004544:	7efb      	ldrb	r3, [r7, #27]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MFRC522_Anticoll+0x4c>
 800454a:	2302      	movs	r3, #2
 800454c:	e012      	b.n	8004574 <MFRC522_Anticoll+0x72>

    // backData[0..4] (4바이트 UID + BCC)
    // 간단히 UID만 복사 (앞 5바이트)
    for (int i=0;i<5;i++) uid[i] = backData[i];
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e00b      	b.n	800456c <MFRC522_Anticoll+0x6a>
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	f107 010c 	add.w	r1, r7, #12
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	440a      	add	r2, r1
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b04      	cmp	r3, #4
 8004570:	ddf0      	ble.n	8004554 <MFRC522_Anticoll+0x52>
    return MI_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_MspInit+0x54>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	4a11      	ldr	r2, [pc, #68]	@ (80045d0 <HAL_MspInit+0x54>)
 800458c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004590:	6453      	str	r3, [r2, #68]	@ 0x44
 8004592:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <HAL_MspInit+0x54>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_MspInit+0x54>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	4a0a      	ldr	r2, [pc, #40]	@ (80045d0 <HAL_MspInit+0x54>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <HAL_MspInit+0x54>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	210f      	movs	r1, #15
 80045be:	f06f 0001 	mvn.w	r0, #1
 80045c2:	f000 fc84 	bl	8004ece <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800

080045d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a19      	ldr	r2, [pc, #100]	@ (8004658 <HAL_I2C_MspInit+0x84>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d12c      	bne.n	8004650 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	4b18      	ldr	r3, [pc, #96]	@ (800465c <HAL_I2C_MspInit+0x88>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	4a17      	ldr	r2, [pc, #92]	@ (800465c <HAL_I2C_MspInit+0x88>)
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6313      	str	r3, [r2, #48]	@ 0x30
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_I2C_MspInit+0x88>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004618:	2312      	movs	r3, #18
 800461a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004620:	2303      	movs	r3, #3
 8004622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004624:	2304      	movs	r3, #4
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4619      	mov	r1, r3
 800462e:	480c      	ldr	r0, [pc, #48]	@ (8004660 <HAL_I2C_MspInit+0x8c>)
 8004630:	f000 fd16 	bl	8005060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	4b08      	ldr	r3, [pc, #32]	@ (800465c <HAL_I2C_MspInit+0x88>)
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	4a07      	ldr	r2, [pc, #28]	@ (800465c <HAL_I2C_MspInit+0x88>)
 800463e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004642:	6413      	str	r3, [r2, #64]	@ 0x40
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <HAL_I2C_MspInit+0x88>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004650:	bf00      	nop
 8004652:	3728      	adds	r7, #40	@ 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40005400 	.word	0x40005400
 800465c:	40023800 	.word	0x40023800
 8004660:	40020400 	.word	0x40020400

08004664 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
 800467c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a10      	ldr	r2, [pc, #64]	@ (80046c4 <HAL_RTC_MspInit+0x60>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d119      	bne.n	80046bc <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004688:	2302      	movs	r3, #2
 800468a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800468c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004690:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f001 ffce 	bl	8006638 <HAL_RCCEx_PeriphCLKConfig>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80046a2:	f7ff fd35 	bl	8004110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046a6:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <HAL_RTC_MspInit+0x64>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2105      	movs	r1, #5
 80046b0:	2029      	movs	r0, #41	@ 0x29
 80046b2:	f000 fc0c 	bl	8004ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80046b6:	2029      	movs	r0, #41	@ 0x29
 80046b8:	f000 fc25 	bl	8004f06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80046bc:	bf00      	nop
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40002800 	.word	0x40002800
 80046c8:	42470e3c 	.word	0x42470e3c

080046cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	@ 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_SPI_MspInit+0x84>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d12b      	bne.n	8004746 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <HAL_SPI_MspInit+0x88>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	4a17      	ldr	r2, [pc, #92]	@ (8004754 <HAL_SPI_MspInit+0x88>)
 80046f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_SPI_MspInit+0x88>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_SPI_MspInit+0x88>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	4a10      	ldr	r2, [pc, #64]	@ (8004754 <HAL_SPI_MspInit+0x88>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6313      	str	r3, [r2, #48]	@ 0x30
 800471a:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <HAL_SPI_MspInit+0x88>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004726:	23e0      	movs	r3, #224	@ 0xe0
 8004728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004736:	2305      	movs	r3, #5
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4619      	mov	r1, r3
 8004740:	4805      	ldr	r0, [pc, #20]	@ (8004758 <HAL_SPI_MspInit+0x8c>)
 8004742:	f000 fc8d 	bl	8005060 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004746:	bf00      	nop
 8004748:	3728      	adds	r7, #40	@ 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40013000 	.word	0x40013000
 8004754:	40023800 	.word	0x40023800
 8004758:	40020000 	.word	0x40020000

0800475c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0b      	ldr	r2, [pc, #44]	@ (8004798 <HAL_TIM_Base_MspInit+0x3c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10d      	bne.n	800478a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <HAL_TIM_Base_MspInit+0x40>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	4a09      	ldr	r2, [pc, #36]	@ (800479c <HAL_TIM_Base_MspInit+0x40>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6453      	str	r3, [r2, #68]	@ 0x44
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <HAL_TIM_Base_MspInit+0x40>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40023800 	.word	0x40023800

080047a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a12      	ldr	r2, [pc, #72]	@ (8004808 <HAL_TIM_MspPostInit+0x68>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d11e      	bne.n	8004800 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_TIM_MspPostInit+0x6c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	4a10      	ldr	r2, [pc, #64]	@ (800480c <HAL_TIM_MspPostInit+0x6c>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d2:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <HAL_TIM_MspPostInit+0x6c>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80047de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	2302      	movs	r3, #2
 80047e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f4:	f107 030c 	add.w	r3, r7, #12
 80047f8:	4619      	mov	r1, r3
 80047fa:	4805      	ldr	r0, [pc, #20]	@ (8004810 <HAL_TIM_MspPostInit+0x70>)
 80047fc:	f000 fc30 	bl	8005060 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004800:	bf00      	nop
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40010000 	.word	0x40010000
 800480c:	40023800 	.word	0x40023800
 8004810:	40020000 	.word	0x40020000

08004814 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08c      	sub	sp, #48	@ 0x30
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	f107 031c 	add.w	r3, r7, #28
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3a      	ldr	r2, [pc, #232]	@ (800491c <HAL_UART_MspInit+0x108>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d134      	bne.n	80048a0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	4a38      	ldr	r2, [pc, #224]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 8004840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004844:	6413      	str	r3, [r2, #64]	@ 0x40
 8004846:	4b36      	ldr	r3, [pc, #216]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	4b32      	ldr	r3, [pc, #200]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	4a31      	ldr	r2, [pc, #196]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6313      	str	r3, [r2, #48]	@ 0x30
 8004862:	4b2f      	ldr	r3, [pc, #188]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800486e:	230c      	movs	r3, #12
 8004870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487a:	2303      	movs	r3, #3
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800487e:	2307      	movs	r3, #7
 8004880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004882:	f107 031c 	add.w	r3, r7, #28
 8004886:	4619      	mov	r1, r3
 8004888:	4826      	ldr	r0, [pc, #152]	@ (8004924 <HAL_UART_MspInit+0x110>)
 800488a:	f000 fbe9 	bl	8005060 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	2105      	movs	r1, #5
 8004892:	2026      	movs	r0, #38	@ 0x26
 8004894:	f000 fb1b 	bl	8004ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004898:	2026      	movs	r0, #38	@ 0x26
 800489a:	f000 fb34 	bl	8004f06 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800489e:	e038      	b.n	8004912 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a20      	ldr	r2, [pc, #128]	@ (8004928 <HAL_UART_MspInit+0x114>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d133      	bne.n	8004912 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 80048b4:	f043 0320 	orr.w	r3, r3, #32
 80048b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ba:	4b19      	ldr	r3, [pc, #100]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	4a14      	ldr	r2, [pc, #80]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d6:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_UART_MspInit+0x10c>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048e2:	23c0      	movs	r3, #192	@ 0xc0
 80048e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e6:	2302      	movs	r3, #2
 80048e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ee:	2303      	movs	r3, #3
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048f2:	2308      	movs	r3, #8
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f6:	f107 031c 	add.w	r3, r7, #28
 80048fa:	4619      	mov	r1, r3
 80048fc:	480b      	ldr	r0, [pc, #44]	@ (800492c <HAL_UART_MspInit+0x118>)
 80048fe:	f000 fbaf 	bl	8005060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004902:	2200      	movs	r2, #0
 8004904:	2105      	movs	r1, #5
 8004906:	2047      	movs	r0, #71	@ 0x47
 8004908:	f000 fae1 	bl	8004ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800490c:	2047      	movs	r0, #71	@ 0x47
 800490e:	f000 fafa 	bl	8004f06 <HAL_NVIC_EnableIRQ>
}
 8004912:	bf00      	nop
 8004914:	3730      	adds	r7, #48	@ 0x30
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40004400 	.word	0x40004400
 8004920:	40023800 	.word	0x40023800
 8004924:	40020000 	.word	0x40020000
 8004928:	40011400 	.word	0x40011400
 800492c:	40020800 	.word	0x40020800

08004930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <NMI_Handler+0x4>

08004938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <HardFault_Handler+0x4>

08004940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <MemManage_Handler+0x4>

08004948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <BusFault_Handler+0x4>

08004950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <UsageFault_Handler+0x4>

08004958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800496a:	f000 f991 	bl	8004c90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800496e:	f006 ffb1 	bl	800b8d4 <xTaskGetSchedulerState>
 8004972:	4603      	mov	r3, r0
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004978:	f007 fea6 	bl	800c6c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}

08004980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004984:	4802      	ldr	r0, [pc, #8]	@ (8004990 <USART2_IRQHandler+0x10>)
 8004986:	f003 feeb 	bl	8008760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	200023f4 	.word	0x200023f4

08004994 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004998:	4802      	ldr	r0, [pc, #8]	@ (80049a4 <RTC_Alarm_IRQHandler+0x10>)
 800499a:	f002 fa21 	bl	8006de0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20002334 	.word	0x20002334

080049a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80049ac:	4802      	ldr	r0, [pc, #8]	@ (80049b8 <USART6_IRQHandler+0x10>)
 80049ae:	f003 fed7 	bl	8008760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	2000243c 	.word	0x2000243c

080049bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return 1;
 80049c0:	2301      	movs	r3, #1
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <_kill>:

int _kill(int pid, int sig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049d6:	f00a fe6d 	bl	800f6b4 <__errno>
 80049da:	4603      	mov	r3, r0
 80049dc:	2216      	movs	r2, #22
 80049de:	601a      	str	r2, [r3, #0]
  return -1;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_exit>:

void _exit (int status)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049f4:	f04f 31ff 	mov.w	r1, #4294967295
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ffe7 	bl	80049cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <_exit+0x12>

08004a02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e00a      	b.n	8004a2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a14:	f3af 8000 	nop.w
 8004a18:	4601      	mov	r1, r0
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	60ba      	str	r2, [r7, #8]
 8004a20:	b2ca      	uxtb	r2, r1
 8004a22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3301      	adds	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	dbf0      	blt.n	8004a14 <_read+0x12>
  }

  return len;
 8004a32:	687b      	ldr	r3, [r7, #4]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e009      	b.n	8004a62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	60ba      	str	r2, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fd02 	bl	8003460 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	dbf1      	blt.n	8004a4e <_write+0x12>
  }
  return len;
 8004a6a:	687b      	ldr	r3, [r7, #4]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <_close>:

int _close(int file)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_isatty>:

int _isatty(int file)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ab4:	2301      	movs	r3, #1
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <_gettimeofday>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int _gettimeofday(struct timeval *tv, void *tzvp) {
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
    tv->tv_sec = 0;
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9c1 2300 	strd	r2, r3, [r1]
    tv->tv_usec = 0;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
    return 0;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <_sbrk+0x5c>)
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <_sbrk+0x60>)
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b1c:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <_sbrk+0x64>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <_sbrk+0x64>)
 8004b26:	4a12      	ldr	r2, [pc, #72]	@ (8004b70 <_sbrk+0x68>)
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <_sbrk+0x64>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d207      	bcs.n	8004b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b38:	f00a fdbc 	bl	800f6b4 <__errno>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	220c      	movs	r2, #12
 8004b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	e009      	b.n	8004b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b48:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <_sbrk+0x64>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b4e:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <_sbrk+0x64>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	4a05      	ldr	r2, [pc, #20]	@ (8004b6c <_sbrk+0x64>)
 8004b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20020000 	.word	0x20020000
 8004b68:	00000400 	.word	0x00000400
 8004b6c:	200024b4 	.word	0x200024b4
 8004b70:	20006f80 	.word	0x20006f80

08004b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <SystemInit+0x20>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	4a05      	ldr	r2, [pc, #20]	@ (8004b94 <SystemInit+0x20>)
 8004b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b9c:	f7ff ffea 	bl	8004b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ba0:	480c      	ldr	r0, [pc, #48]	@ (8004bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ba2:	490d      	ldr	r1, [pc, #52]	@ (8004bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ba8:	e002      	b.n	8004bb0 <LoopCopyDataInit>

08004baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bae:	3304      	adds	r3, #4

08004bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb4:	d3f9      	bcc.n	8004baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bbc:	e001      	b.n	8004bc2 <LoopFillZerobss>

08004bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc0:	3204      	adds	r2, #4

08004bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc4:	d3fb      	bcc.n	8004bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bc6:	f00a fd7b 	bl	800f6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bca:	f7fe fed7 	bl	800397c <main>
  bx  lr    
 8004bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bd8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004bdc:	08013c4c 	.word	0x08013c4c
  ldr r2, =_sbss
 8004be0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004be4:	20006f7c 	.word	0x20006f7c

08004be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004be8:	e7fe      	b.n	8004be8 <ADC_IRQHandler>
	...

08004bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <HAL_Init+0x40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c2c <HAL_Init+0x40>)
 8004bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_Init+0x40>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0a      	ldr	r2, [pc, #40]	@ (8004c2c <HAL_Init+0x40>)
 8004c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c08:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <HAL_Init+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <HAL_Init+0x40>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c14:	2003      	movs	r0, #3
 8004c16:	f000 f94f 	bl	8004eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c1a:	200f      	movs	r0, #15
 8004c1c:	f000 f808 	bl	8004c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c20:	f7ff fcac 	bl	800457c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00

08004c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c38:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <HAL_InitTick+0x54>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b12      	ldr	r3, [pc, #72]	@ (8004c88 <HAL_InitTick+0x58>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f967 	bl	8004f22 <HAL_SYSTICK_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00e      	b.n	8004c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b0f      	cmp	r3, #15
 8004c62:	d80a      	bhi.n	8004c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c64:	2200      	movs	r2, #0
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	f000 f92f 	bl	8004ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c70:	4a06      	ldr	r2, [pc, #24]	@ (8004c8c <HAL_InitTick+0x5c>)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000014 	.word	0x20000014
 8004c88:	2000001c 	.word	0x2000001c
 8004c8c:	20000018 	.word	0x20000018

08004c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_IncTick+0x20>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_IncTick+0x24>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	4a04      	ldr	r2, [pc, #16]	@ (8004cb4 <HAL_IncTick+0x24>)
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000001c 	.word	0x2000001c
 8004cb4:	200024b8 	.word	0x200024b8

08004cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return uwTick;
 8004cbc:	4b03      	ldr	r3, [pc, #12]	@ (8004ccc <HAL_GetTick+0x14>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	200024b8 	.word	0x200024b8

08004cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cd8:	f7ff ffee 	bl	8004cb8 <HAL_GetTick>
 8004cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d005      	beq.n	8004cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cea:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <HAL_Delay+0x44>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cf6:	bf00      	nop
 8004cf8:	f7ff ffde 	bl	8004cb8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d8f7      	bhi.n	8004cf8 <HAL_Delay+0x28>
  {
  }
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	2000001c 	.word	0x2000001c

08004d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d34:	4013      	ands	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4a:	4a04      	ldr	r2, [pc, #16]	@ (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	60d3      	str	r3, [r2, #12]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d64:	4b04      	ldr	r3, [pc, #16]	@ (8004d78 <__NVIC_GetPriorityGrouping+0x18>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 0307 	and.w	r3, r3, #7
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db0b      	blt.n	8004da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4907      	ldr	r1, [pc, #28]	@ (8004db4 <__NVIC_EnableIRQ+0x38>)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db0a      	blt.n	8004de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	490c      	ldr	r1, [pc, #48]	@ (8004e04 <__NVIC_SetPriority+0x4c>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de0:	e00a      	b.n	8004df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4908      	ldr	r1, [pc, #32]	@ (8004e08 <__NVIC_SetPriority+0x50>)
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	3b04      	subs	r3, #4
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	761a      	strb	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f1c3 0307 	rsb	r3, r3, #7
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	bf28      	it	cs
 8004e2a:	2304      	movcs	r3, #4
 8004e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d902      	bls.n	8004e3c <NVIC_EncodePriority+0x30>
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3b03      	subs	r3, #3
 8004e3a:	e000      	b.n	8004e3e <NVIC_EncodePriority+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	401a      	ands	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e54:	f04f 31ff 	mov.w	r1, #4294967295
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43d9      	mvns	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	4313      	orrs	r3, r2
         );
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	@ 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e84:	d301      	bcc.n	8004e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e86:	2301      	movs	r3, #1
 8004e88:	e00f      	b.n	8004eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <SysTick_Config+0x40>)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e92:	210f      	movs	r1, #15
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	f7ff ff8e 	bl	8004db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e9c:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <SysTick_Config+0x40>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ea2:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <SysTick_Config+0x40>)
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	e000e010 	.word	0xe000e010

08004eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ff29 	bl	8004d18 <__NVIC_SetPriorityGrouping>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee0:	f7ff ff3e 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8004ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f7ff ff8e 	bl	8004e0c <NVIC_EncodePriority>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff ff5d 	bl	8004db8 <__NVIC_SetPriority>
}
 8004efe:	bf00      	nop
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ff31 	bl	8004d7c <__NVIC_EnableIRQ>
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff ffa2 	bl	8004e74 <SysTick_Config>
 8004f30:	4603      	mov	r3, r0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f48:	f7ff feb6 	bl	8004cb8 <HAL_GetTick>
 8004f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d008      	beq.n	8004f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2280      	movs	r2, #128	@ 0x80
 8004f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e052      	b.n	8005012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0216 	bic.w	r2, r2, #22
 8004f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <HAL_DMA_Abort+0x62>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0208 	bic.w	r2, r2, #8
 8004faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fbc:	e013      	b.n	8004fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fbe:	f7ff fe7b 	bl	8004cb8 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d90c      	bls.n	8004fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e015      	b.n	8005012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e4      	bne.n	8004fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	223f      	movs	r2, #63	@ 0x3f
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d004      	beq.n	8005038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2280      	movs	r2, #128	@ 0x80
 8005032:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e00c      	b.n	8005052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2205      	movs	r2, #5
 800503c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	@ 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	e159      	b.n	8005330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800507c:	2201      	movs	r2, #1
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4013      	ands	r3, r2
 800508e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	429a      	cmp	r2, r3
 8005096:	f040 8148 	bne.w	800532a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d005      	beq.n	80050b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d130      	bne.n	8005114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	2203      	movs	r2, #3
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050e8:	2201      	movs	r2, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 0201 	and.w	r2, r3, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	2b03      	cmp	r3, #3
 800511e:	d017      	beq.n	8005150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	2203      	movs	r2, #3
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d123      	bne.n	80051a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	08da      	lsrs	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3208      	adds	r2, #8
 8005164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	220f      	movs	r2, #15
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	08da      	lsrs	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3208      	adds	r2, #8
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 0203 	and.w	r2, r3, #3
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a2 	beq.w	800532a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	4b57      	ldr	r3, [pc, #348]	@ (8005348 <HAL_GPIO_Init+0x2e8>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	4a56      	ldr	r2, [pc, #344]	@ (8005348 <HAL_GPIO_Init+0x2e8>)
 80051f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80051f6:	4b54      	ldr	r3, [pc, #336]	@ (8005348 <HAL_GPIO_Init+0x2e8>)
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005202:	4a52      	ldr	r2, [pc, #328]	@ (800534c <HAL_GPIO_Init+0x2ec>)
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	3302      	adds	r3, #2
 800520a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	220f      	movs	r2, #15
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a49      	ldr	r2, [pc, #292]	@ (8005350 <HAL_GPIO_Init+0x2f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d019      	beq.n	8005262 <HAL_GPIO_Init+0x202>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a48      	ldr	r2, [pc, #288]	@ (8005354 <HAL_GPIO_Init+0x2f4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_GPIO_Init+0x1fe>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a47      	ldr	r2, [pc, #284]	@ (8005358 <HAL_GPIO_Init+0x2f8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00d      	beq.n	800525a <HAL_GPIO_Init+0x1fa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a46      	ldr	r2, [pc, #280]	@ (800535c <HAL_GPIO_Init+0x2fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <HAL_GPIO_Init+0x1f6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a45      	ldr	r2, [pc, #276]	@ (8005360 <HAL_GPIO_Init+0x300>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_GPIO_Init+0x1f2>
 800524e:	2304      	movs	r3, #4
 8005250:	e008      	b.n	8005264 <HAL_GPIO_Init+0x204>
 8005252:	2307      	movs	r3, #7
 8005254:	e006      	b.n	8005264 <HAL_GPIO_Init+0x204>
 8005256:	2303      	movs	r3, #3
 8005258:	e004      	b.n	8005264 <HAL_GPIO_Init+0x204>
 800525a:	2302      	movs	r3, #2
 800525c:	e002      	b.n	8005264 <HAL_GPIO_Init+0x204>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_GPIO_Init+0x204>
 8005262:	2300      	movs	r3, #0
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	f002 0203 	and.w	r2, r2, #3
 800526a:	0092      	lsls	r2, r2, #2
 800526c:	4093      	lsls	r3, r2
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4313      	orrs	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005274:	4935      	ldr	r1, [pc, #212]	@ (800534c <HAL_GPIO_Init+0x2ec>)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	089b      	lsrs	r3, r3, #2
 800527a:	3302      	adds	r3, #2
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005282:	4b38      	ldr	r3, [pc, #224]	@ (8005364 <HAL_GPIO_Init+0x304>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005364 <HAL_GPIO_Init+0x304>)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005364 <HAL_GPIO_Init+0x304>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052d0:	4a24      	ldr	r2, [pc, #144]	@ (8005364 <HAL_GPIO_Init+0x304>)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052d6:	4b23      	ldr	r3, [pc, #140]	@ (8005364 <HAL_GPIO_Init+0x304>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005364 <HAL_GPIO_Init+0x304>)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005300:	4b18      	ldr	r3, [pc, #96]	@ (8005364 <HAL_GPIO_Init+0x304>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005324:	4a0f      	ldr	r2, [pc, #60]	@ (8005364 <HAL_GPIO_Init+0x304>)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3301      	adds	r3, #1
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	f67f aea2 	bls.w	800507c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	3724      	adds	r7, #36	@ 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	40013800 	.word	0x40013800
 8005350:	40020000 	.word	0x40020000
 8005354:	40020400 	.word	0x40020400
 8005358:	40020800 	.word	0x40020800
 800535c:	40020c00 	.word	0x40020c00
 8005360:	40021000 	.word	0x40021000
 8005364:	40013c00 	.word	0x40013c00

08005368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	887b      	ldrh	r3, [r7, #2]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e001      	b.n	800538a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	807b      	strh	r3, [r7, #2]
 80053a4:	4613      	mov	r3, r2
 80053a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a8:	787b      	ldrb	r3, [r7, #1]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053b4:	e003      	b.n	80053be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053b6:	887b      	ldrh	r3, [r7, #2]
 80053b8:	041a      	lsls	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	619a      	str	r2, [r3, #24]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e12b      	b.n	8005636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff f8ee 	bl	80045d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	@ 0x24
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800541e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800542e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005430:	f001 f8da 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8005434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4a81      	ldr	r2, [pc, #516]	@ (8005640 <HAL_I2C_Init+0x274>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d807      	bhi.n	8005450 <HAL_I2C_Init+0x84>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a80      	ldr	r2, [pc, #512]	@ (8005644 <HAL_I2C_Init+0x278>)
 8005444:	4293      	cmp	r3, r2
 8005446:	bf94      	ite	ls
 8005448:	2301      	movls	r3, #1
 800544a:	2300      	movhi	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e006      	b.n	800545e <HAL_I2C_Init+0x92>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a7d      	ldr	r2, [pc, #500]	@ (8005648 <HAL_I2C_Init+0x27c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	bf94      	ite	ls
 8005458:	2301      	movls	r3, #1
 800545a:	2300      	movhi	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0e7      	b.n	8005636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a78      	ldr	r2, [pc, #480]	@ (800564c <HAL_I2C_Init+0x280>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0c9b      	lsrs	r3, r3, #18
 8005470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4a6a      	ldr	r2, [pc, #424]	@ (8005640 <HAL_I2C_Init+0x274>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <HAL_I2C_Init+0xd4>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3301      	adds	r3, #1
 800549e:	e009      	b.n	80054b4 <HAL_I2C_Init+0xe8>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	4a69      	ldr	r2, [pc, #420]	@ (8005650 <HAL_I2C_Init+0x284>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	099b      	lsrs	r3, r3, #6
 80054b2:	3301      	adds	r3, #1
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	495c      	ldr	r1, [pc, #368]	@ (8005640 <HAL_I2C_Init+0x274>)
 80054d0:	428b      	cmp	r3, r1
 80054d2:	d819      	bhi.n	8005508 <HAL_I2C_Init+0x13c>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1e59      	subs	r1, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054e8:	400b      	ands	r3, r1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_I2C_Init+0x138>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1e59      	subs	r1, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054fc:	3301      	adds	r3, #1
 80054fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005502:	e051      	b.n	80055a8 <HAL_I2C_Init+0x1dc>
 8005504:	2304      	movs	r3, #4
 8005506:	e04f      	b.n	80055a8 <HAL_I2C_Init+0x1dc>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d111      	bne.n	8005534 <HAL_I2C_Init+0x168>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1e58      	subs	r0, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6859      	ldr	r1, [r3, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	440b      	add	r3, r1
 800551e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005522:	3301      	adds	r3, #1
 8005524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e012      	b.n	800555a <HAL_I2C_Init+0x18e>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1e58      	subs	r0, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	0099      	lsls	r1, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	fbb0 f3f3 	udiv	r3, r0, r3
 800554a:	3301      	adds	r3, #1
 800554c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005550:	2b00      	cmp	r3, #0
 8005552:	bf0c      	ite	eq
 8005554:	2301      	moveq	r3, #1
 8005556:	2300      	movne	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Init+0x196>
 800555e:	2301      	movs	r3, #1
 8005560:	e022      	b.n	80055a8 <HAL_I2C_Init+0x1dc>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10e      	bne.n	8005588 <HAL_I2C_Init+0x1bc>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1e58      	subs	r0, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	460b      	mov	r3, r1
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	440b      	add	r3, r1
 8005578:	fbb0 f3f3 	udiv	r3, r0, r3
 800557c:	3301      	adds	r3, #1
 800557e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005586:	e00f      	b.n	80055a8 <HAL_I2C_Init+0x1dc>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1e58      	subs	r0, r3, #1
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	0099      	lsls	r1, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	fbb0 f3f3 	udiv	r3, r0, r3
 800559e:	3301      	adds	r3, #1
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	6809      	ldr	r1, [r1, #0]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6911      	ldr	r1, [r2, #16]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68d2      	ldr	r2, [r2, #12]
 80055e2:	4311      	orrs	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	000186a0 	.word	0x000186a0
 8005644:	001e847f 	.word	0x001e847f
 8005648:	003d08ff 	.word	0x003d08ff
 800564c:	431bde83 	.word	0x431bde83
 8005650:	10624dd3 	.word	0x10624dd3

08005654 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	461a      	mov	r2, r3
 8005660:	460b      	mov	r3, r1
 8005662:	817b      	strh	r3, [r7, #10]
 8005664:	4613      	mov	r3, r2
 8005666:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005668:	f7ff fb26 	bl	8004cb8 <HAL_GetTick>
 800566c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	f040 80e0 	bne.w	800583c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	2319      	movs	r3, #25
 8005682:	2201      	movs	r2, #1
 8005684:	4970      	ldr	r1, [pc, #448]	@ (8005848 <HAL_I2C_Master_Transmit+0x1f4>)
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f964 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
 8005694:	e0d3      	b.n	800583e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_I2C_Master_Transmit+0x50>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0cc      	b.n	800583e <HAL_I2C_Master_Transmit+0x1ea>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d007      	beq.n	80056ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2221      	movs	r2, #33	@ 0x21
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2210      	movs	r2, #16
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	893a      	ldrh	r2, [r7, #8]
 80056fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a50      	ldr	r2, [pc, #320]	@ (800584c <HAL_I2C_Master_Transmit+0x1f8>)
 800570a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800570c:	8979      	ldrh	r1, [r7, #10]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	6a3a      	ldr	r2, [r7, #32]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f89c 	bl	8005850 <I2C_MasterRequestWrite>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e08d      	b.n	800583e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005738:	e066      	b.n	8005808 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	6a39      	ldr	r1, [r7, #32]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fa22 	bl	8005b88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	2b04      	cmp	r3, #4
 8005750:	d107      	bne.n	8005762 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005760:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e06b      	b.n	800583e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d11b      	bne.n	80057dc <HAL_I2C_Master_Transmit+0x188>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	6a39      	ldr	r1, [r7, #32]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa19 	bl	8005c18 <I2C_WaitOnBTFFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d107      	bne.n	8005804 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005802:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e01a      	b.n	800583e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d194      	bne.n	800573a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800581e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e000      	b.n	800583e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
  }
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	00100002 	.word	0x00100002
 800584c:	ffff0000 	.word	0xffff0000

08005850 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	460b      	mov	r3, r1
 800585e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d006      	beq.n	800587a <I2C_MasterRequestWrite+0x2a>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d003      	beq.n	800587a <I2C_MasterRequestWrite+0x2a>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005878:	d108      	bne.n	800588c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e00b      	b.n	80058a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	2b12      	cmp	r3, #18
 8005892:	d107      	bne.n	80058a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f84f 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ca:	d103      	bne.n	80058d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e035      	b.n	8005944 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058e0:	d108      	bne.n	80058f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058e2:	897b      	ldrh	r3, [r7, #10]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	e01b      	b.n	800592c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058f4:	897b      	ldrh	r3, [r7, #10]
 80058f6:	11db      	asrs	r3, r3, #7
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f003 0306 	and.w	r3, r3, #6
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f063 030f 	orn	r3, r3, #15
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	490e      	ldr	r1, [pc, #56]	@ (800594c <I2C_MasterRequestWrite+0xfc>)
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f898 	bl	8005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e010      	b.n	8005944 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4907      	ldr	r1, [pc, #28]	@ (8005950 <I2C_MasterRequestWrite+0x100>)
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f888 	bl	8005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	00010008 	.word	0x00010008
 8005950:	00010002 	.word	0x00010002

08005954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005964:	e048      	b.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d044      	beq.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7ff f9a3 	bl	8004cb8 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d139      	bne.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	0c1b      	lsrs	r3, r3, #16
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b01      	cmp	r3, #1
 800598c:	d10d      	bne.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	43da      	mvns	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4013      	ands	r3, r2
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	e00c      	b.n	80059c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	43da      	mvns	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d116      	bne.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e023      	b.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10d      	bne.n	8005a1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	43da      	mvns	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	e00c      	b.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	43da      	mvns	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d093      	beq.n	8005966 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a56:	e071      	b.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a66:	d123      	bne.n	8005ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	f043 0204 	orr.w	r2, r3, #4
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e067      	b.n	8005b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d041      	beq.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab8:	f7ff f8fe 	bl	8004cb8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d136      	bne.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10c      	bne.n	8005af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e00b      	b.n	8005b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	43da      	mvns	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e021      	b.n	8005b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10c      	bne.n	8005b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	43da      	mvns	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4013      	ands	r3, r2
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e00b      	b.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f47f af6d 	bne.w	8005a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b94:	e034      	b.n	8005c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f886 	bl	8005ca8 <I2C_IsAcknowledgeFailed>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e034      	b.n	8005c10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d028      	beq.n	8005c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bae:	f7ff f883 	bl	8004cb8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11d      	bne.n	8005c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bce:	2b80      	cmp	r3, #128	@ 0x80
 8005bd0:	d016      	beq.n	8005c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e007      	b.n	8005c10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0a:	2b80      	cmp	r3, #128	@ 0x80
 8005c0c:	d1c3      	bne.n	8005b96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c24:	e034      	b.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 f83e 	bl	8005ca8 <I2C_IsAcknowledgeFailed>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e034      	b.n	8005ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d028      	beq.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7ff f83b 	bl	8004cb8 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11d      	bne.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d016      	beq.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e007      	b.n	8005ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d1c3      	bne.n	8005c26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cbe:	d11b      	bne.n	8005cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	f043 0204 	orr.w	r2, r3, #4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e267      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d26:	4b88      	ldr	r3, [pc, #544]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d32:	4b85      	ldr	r3, [pc, #532]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d112      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3e:	4b82      	ldr	r3, [pc, #520]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e242      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a75      	ldr	r2, [pc, #468]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b70      	ldr	r3, [pc, #448]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b6d      	ldr	r3, [pc, #436]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6c      	ldr	r2, [pc, #432]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b69      	ldr	r3, [pc, #420]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b66      	ldr	r3, [pc, #408]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a65      	ldr	r2, [pc, #404]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fe ff7a 	bl	8004cb8 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fe ff76 	bl	8004cb8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	@ 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e207      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b5b      	ldr	r3, [pc, #364]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7fe ff66 	bl	8004cb8 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fe ff62 	bl	8004cb8 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	@ 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1f3      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	4b51      	ldr	r3, [pc, #324]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d063      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2a:	4b47      	ldr	r3, [pc, #284]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d11c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e36:	4b44      	ldr	r3, [pc, #272]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d116      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e42:	4b41      	ldr	r3, [pc, #260]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e1c7      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4937      	ldr	r1, [pc, #220]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	e03a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e78:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fe ff1b 	bl	8004cb8 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fe ff17 	bl	8004cb8 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e1a8      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	4b2b      	ldr	r3, [pc, #172]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea4:	4b28      	ldr	r3, [pc, #160]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4925      	ldr	r1, [pc, #148]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eba:	4b24      	ldr	r3, [pc, #144]	@ (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fe fefa 	bl	8004cb8 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fe fef6 	bl	8004cb8 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e187      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	4b1b      	ldr	r3, [pc, #108]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d036      	beq.n	8005f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efa:	4b15      	ldr	r3, [pc, #84]	@ (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fe feda 	bl	8004cb8 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fe fed6 	bl	8004cb8 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e167      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f28:	4b09      	ldr	r3, [pc, #36]	@ (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fe fec3 	bl	8004cb8 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	e00e      	b.n	8005f54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fe febf 	bl	8004cb8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d907      	bls.n	8005f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e150      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	42470000 	.word	0x42470000
 8005f50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b88      	ldr	r3, [pc, #544]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ea      	bne.n	8005f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8097 	beq.w	800609c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	4b81      	ldr	r3, [pc, #516]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b7d      	ldr	r3, [pc, #500]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	4a7c      	ldr	r2, [pc, #496]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b77      	ldr	r3, [pc, #476]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b74      	ldr	r3, [pc, #464]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a73      	ldr	r2, [pc, #460]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7fe fe7f 	bl	8004cb8 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7fe fe7b 	bl	8004cb8 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e10c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800617c <HAL_RCC_OscConfig+0x474>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
 8005fe4:	4b64      	ldr	r3, [pc, #400]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe8:	4a63      	ldr	r2, [pc, #396]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff0:	e01c      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x30c>
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	6713      	str	r3, [r2, #112]	@ 0x70
 8006006:	4b5c      	ldr	r3, [pc, #368]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600a:	4a5b      	ldr	r2, [pc, #364]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	@ 0x70
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8006014:	4b58      	ldr	r3, [pc, #352]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006018:	4a57      	ldr	r2, [pc, #348]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006020:	4b55      	ldr	r3, [pc, #340]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006024:	4a54      	ldr	r2, [pc, #336]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fe fe40 	bl	8004cb8 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fe fe3c 	bl	8004cb8 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0cb      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	4b49      	ldr	r3, [pc, #292]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ee      	beq.n	800603c <HAL_RCC_OscConfig+0x334>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006060:	f7fe fe2a 	bl	8004cb8 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fe fe26 	bl	8004cb8 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0b5      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	4b3e      	ldr	r3, [pc, #248]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ee      	bne.n	8006068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	4a38      	ldr	r2, [pc, #224]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800609a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a1 	beq.w	80061e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a6:	4b34      	ldr	r3, [pc, #208]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d05c      	beq.n	800616c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d141      	bne.n	800613e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ba:	4b31      	ldr	r3, [pc, #196]	@ (8006180 <HAL_RCC_OscConfig+0x478>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fe fdfa 	bl	8004cb8 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c8:	f7fe fdf6 	bl	8004cb8 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e087      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	061b      	lsls	r3, r3, #24
 800610a:	491b      	ldr	r1, [pc, #108]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <HAL_RCC_OscConfig+0x478>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fe fdcf 	bl	8004cb8 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611e:	f7fe fdcb 	bl	8004cb8 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e05c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x416>
 800613c:	e054      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613e:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <HAL_RCC_OscConfig+0x478>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fe fdb8 	bl	8004cb8 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614c:	f7fe fdb4 	bl	8004cb8 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e045      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <HAL_RCC_OscConfig+0x470>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x444>
 800616a:	e03d      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e038      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006184:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <HAL_RCC_OscConfig+0x4ec>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d028      	beq.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d121      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d11a      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061bc:	4293      	cmp	r3, r2
 80061be:	d111      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800

080061f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0cc      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800620c:	4b68      	ldr	r3, [pc, #416]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90c      	bls.n	8006234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b65      	ldr	r3, [pc, #404]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b63      	ldr	r3, [pc, #396]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0b8      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800624c:	4b59      	ldr	r3, [pc, #356]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a58      	ldr	r2, [pc, #352]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006256:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006264:	4b53      	ldr	r3, [pc, #332]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a52      	ldr	r2, [pc, #328]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800626e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006270:	4b50      	ldr	r3, [pc, #320]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	494d      	ldr	r1, [pc, #308]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d044      	beq.n	8006318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b47      	ldr	r3, [pc, #284]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b6:	4b3f      	ldr	r3, [pc, #252]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e06f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c6:	4b3b      	ldr	r3, [pc, #236]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e067      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d6:	4b37      	ldr	r3, [pc, #220]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0203 	bic.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4934      	ldr	r1, [pc, #208]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e8:	f7fe fce6 	bl	8004cb8 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f0:	f7fe fce2 	bl	8004cb8 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e04f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	4b2b      	ldr	r3, [pc, #172]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 020c 	and.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	429a      	cmp	r2, r3
 8006316:	d1eb      	bne.n	80062f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006318:	4b25      	ldr	r3, [pc, #148]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d20c      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4b22      	ldr	r3, [pc, #136]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632e:	4b20      	ldr	r3, [pc, #128]	@ (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e032      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800634c:	4b19      	ldr	r3, [pc, #100]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4916      	ldr	r1, [pc, #88]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	490e      	ldr	r1, [pc, #56]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800637e:	f000 f821 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	490a      	ldr	r1, [pc, #40]	@ (80063b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	5ccb      	ldrb	r3, [r1, r3]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	4a09      	ldr	r2, [pc, #36]	@ (80063bc <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800639a:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <HAL_RCC_ClockConfig+0x1c8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fc46 	bl	8004c30 <HAL_InitTick>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	08013574 	.word	0x08013574
 80063bc:	20000014 	.word	0x20000014
 80063c0:	20000018 	.word	0x20000018

080063c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b094      	sub	sp, #80	@ 0x50
 80063ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063dc:	4b79      	ldr	r3, [pc, #484]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d00d      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x40>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	f200 80e1 	bhi.w	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x34>
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d003      	beq.n	80063fe <HAL_RCC_GetSysClockFreq+0x3a>
 80063f6:	e0db      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f8:	4b73      	ldr	r3, [pc, #460]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80063fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063fc:	e0db      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063fe:	4b73      	ldr	r3, [pc, #460]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x208>)
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006402:	e0d8      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006404:	4b6f      	ldr	r3, [pc, #444]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800640c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640e:	4b6d      	ldr	r3, [pc, #436]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d063      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b6a      	ldr	r3, [pc, #424]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2200      	movs	r2, #0
 8006422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006424:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30
 800642e:	2300      	movs	r3, #0
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	f04f 0000 	mov.w	r0, #0
 800643e:	f04f 0100 	mov.w	r1, #0
 8006442:	0159      	lsls	r1, r3, #5
 8006444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006448:	0150      	lsls	r0, r2, #5
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4621      	mov	r1, r4
 8006450:	1a51      	subs	r1, r2, r1
 8006452:	6139      	str	r1, [r7, #16]
 8006454:	4629      	mov	r1, r5
 8006456:	eb63 0301 	sbc.w	r3, r3, r1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006468:	4659      	mov	r1, fp
 800646a:	018b      	lsls	r3, r1, #6
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006472:	4651      	mov	r1, sl
 8006474:	018a      	lsls	r2, r1, #6
 8006476:	4651      	mov	r1, sl
 8006478:	ebb2 0801 	subs.w	r8, r2, r1
 800647c:	4659      	mov	r1, fp
 800647e:	eb63 0901 	sbc.w	r9, r3, r1
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006496:	4690      	mov	r8, r2
 8006498:	4699      	mov	r9, r3
 800649a:	4623      	mov	r3, r4
 800649c:	eb18 0303 	adds.w	r3, r8, r3
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	462b      	mov	r3, r5
 80064a4:	eb49 0303 	adc.w	r3, r9, r3
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064b6:	4629      	mov	r1, r5
 80064b8:	024b      	lsls	r3, r1, #9
 80064ba:	4621      	mov	r1, r4
 80064bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064c0:	4621      	mov	r1, r4
 80064c2:	024a      	lsls	r2, r1, #9
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ca:	2200      	movs	r2, #0
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064d4:	f7fa fc40 	bl	8000d58 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e0:	e058      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b38      	ldr	r3, [pc, #224]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	2200      	movs	r2, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	4611      	mov	r1, r2
 80064ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	f04f 0000 	mov.w	r0, #0
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	0159      	lsls	r1, r3, #5
 800650a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800650e:	0150      	lsls	r0, r2, #5
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4641      	mov	r1, r8
 8006516:	ebb2 0a01 	subs.w	sl, r2, r1
 800651a:	4649      	mov	r1, r9
 800651c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800652c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006534:	ebb2 040a 	subs.w	r4, r2, sl
 8006538:	eb63 050b 	sbc.w	r5, r3, fp
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	00eb      	lsls	r3, r5, #3
 8006546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654a:	00e2      	lsls	r2, r4, #3
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	4643      	mov	r3, r8
 8006552:	18e3      	adds	r3, r4, r3
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	464b      	mov	r3, r9
 8006558:	eb45 0303 	adc.w	r3, r5, r3
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800656a:	4629      	mov	r1, r5
 800656c:	028b      	lsls	r3, r1, #10
 800656e:	4621      	mov	r1, r4
 8006570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006574:	4621      	mov	r1, r4
 8006576:	028a      	lsls	r2, r1, #10
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657e:	2200      	movs	r2, #0
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	61fa      	str	r2, [r7, #28]
 8006584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006588:	f7fa fbe6 	bl	8000d58 <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4613      	mov	r3, r2
 8006592:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006594:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	3301      	adds	r3, #1
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80065a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ae:	e002      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065b0:	4b05      	ldr	r3, [pc, #20]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3750      	adds	r7, #80	@ 0x50
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	00f42400 	.word	0x00f42400
 80065cc:	007a1200 	.word	0x007a1200

080065d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d4:	4b03      	ldr	r3, [pc, #12]	@ (80065e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000014 	.word	0x20000014

080065e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065ec:	f7ff fff0 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b05      	ldr	r3, [pc, #20]	@ (8006608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	0a9b      	lsrs	r3, r3, #10
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	4903      	ldr	r1, [pc, #12]	@ (800660c <HAL_RCC_GetPCLK1Freq+0x24>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40023800 	.word	0x40023800
 800660c:	08013584 	.word	0x08013584

08006610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006614:	f7ff ffdc 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0b5b      	lsrs	r3, r3, #13
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	4903      	ldr	r1, [pc, #12]	@ (8006634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40023800 	.word	0x40023800
 8006634:	08013584 	.word	0x08013584

08006638 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d038      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006660:	4b68      	ldr	r3, [pc, #416]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006666:	f7fe fb27 	bl	8004cb8 <HAL_GetTick>
 800666a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800666c:	e008      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800666e:	f7fe fb23 	bl	8004cb8 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0bd      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006680:	4b61      	ldr	r3, [pc, #388]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f0      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	071b      	lsls	r3, r3, #28
 800669e:	495a      	ldr	r1, [pc, #360]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066a6:	4b57      	ldr	r3, [pc, #348]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ac:	f7fe fb04 	bl	8004cb8 <HAL_GetTick>
 80066b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066b4:	f7fe fb00 	bl	8004cb8 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e09a      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c6:	4b50      	ldr	r3, [pc, #320]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8083 	beq.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	4b48      	ldr	r3, [pc, #288]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	4a47      	ldr	r2, [pc, #284]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80066f0:	4b45      	ldr	r3, [pc, #276]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066fc:	4b43      	ldr	r3, [pc, #268]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a42      	ldr	r2, [pc, #264]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006706:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006708:	f7fe fad6 	bl	8004cb8 <HAL_GetTick>
 800670c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fe fad2 	bl	8004cb8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e06c      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006722:	4b3a      	ldr	r3, [pc, #232]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800672e:	4b36      	ldr	r3, [pc, #216]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006736:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02f      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d028      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800674c:	4b2e      	ldr	r3, [pc, #184]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006754:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006756:	4b2e      	ldr	r3, [pc, #184]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800675c:	4b2c      	ldr	r3, [pc, #176]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006762:	4a29      	ldr	r2, [pc, #164]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006768:	4b27      	ldr	r3, [pc, #156]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d114      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006774:	f7fe faa0 	bl	8004cb8 <HAL_GetTick>
 8006778:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677a:	e00a      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fe fa9c 	bl	8004cb8 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e034      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006792:	4b1d      	ldr	r3, [pc, #116]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ee      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067aa:	d10d      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067ac:	4b16      	ldr	r3, [pc, #88]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c0:	4911      	ldr	r1, [pc, #68]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
 80067c6:	e005      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80067c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80067d2:	6093      	str	r3, [r2, #8]
 80067d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e0:	4909      	ldr	r1, [pc, #36]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7d1a      	ldrb	r2, [r3, #20]
 80067f6:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80067f8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	42470068 	.word	0x42470068
 8006808:	40023800 	.word	0x40023800
 800680c:	40007000 	.word	0x40007000
 8006810:	42470e40 	.word	0x42470e40
 8006814:	424711e0 	.word	0x424711e0

08006818 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e073      	b.n	8006912 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	7f5b      	ldrb	r3, [r3, #29]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fd ff12 	bl	8004664 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	d055      	beq.n	8006900 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	22ca      	movs	r2, #202	@ 0xca
 800685a:	625a      	str	r2, [r3, #36]	@ 0x24
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2253      	movs	r2, #83	@ 0x53
 8006862:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb31 	bl	8006ecc <RTC_EnterInitMode>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d12c      	bne.n	80068ce <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006886:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6899      	ldr	r1, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68d2      	ldr	r2, [r2, #12]
 80068ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6919      	ldr	r1, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	041a      	lsls	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fb38 	bl	8006f3a <RTC_ExitInitMode>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d110      	bne.n	80068f6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80068e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	22ff      	movs	r2, #255	@ 0xff
 80068fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80068fe:	e001      	b.n	8006904 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800691a:	b590      	push	{r4, r7, lr}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	7f1b      	ldrb	r3, [r3, #28]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_RTC_SetTime+0x1c>
 8006932:	2302      	movs	r3, #2
 8006934:	e087      	b.n	8006a46 <HAL_RTC_SetTime+0x12c>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2202      	movs	r2, #2
 8006940:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d126      	bne.n	8006996 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb0f 	bl	8006f84 <RTC_ByteToBcd2>
 8006966:	4603      	mov	r3, r0
 8006968:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb08 	bl	8006f84 <RTC_ByteToBcd2>
 8006974:	4603      	mov	r3, r0
 8006976:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006978:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	789b      	ldrb	r3, [r3, #2]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fb00 	bl	8006f84 <RTC_ByteToBcd2>
 8006984:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006986:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	78db      	ldrb	r3, [r3, #3]
 800698e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e018      	b.n	80069c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2200      	movs	r2, #0
 80069a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069b6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	78db      	ldrb	r3, [r3, #3]
 80069c2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	22ca      	movs	r2, #202	@ 0xca
 80069ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2253      	movs	r2, #83	@ 0x53
 80069d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fa77 	bl	8006ecc <RTC_EnterInitMode>
 80069de:	4603      	mov	r3, r0
 80069e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80069e2:	7cfb      	ldrb	r3, [r7, #19]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d120      	bne.n	8006a2a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80069f2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80069f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6899      	ldr	r1, [r3, #8]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 fa8a 	bl	8006f3a <RTC_ExitInitMode>
 8006a26:	4603      	mov	r3, r0
 8006a28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006a2a:	7cfb      	ldrb	r3, [r7, #19]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	22ff      	movs	r2, #255	@ 0xff
 8006a3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]

  return status;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd90      	pop	{r4, r7, pc}

08006a4e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a4e:	b590      	push	{r4, r7, lr}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	7f1b      	ldrb	r3, [r3, #28]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_RTC_SetDate+0x1c>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e071      	b.n	8006b4e <HAL_RTC_SetDate+0x100>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2202      	movs	r2, #2
 8006a74:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10e      	bne.n	8006a9a <HAL_RTC_SetDate+0x4c>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	f023 0310 	bic.w	r3, r3, #16
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	330a      	adds	r3, #10
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11c      	bne.n	8006ada <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	78db      	ldrb	r3, [r3, #3]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fa6d 	bl	8006f84 <RTC_ByteToBcd2>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fa66 	bl	8006f84 <RTC_ByteToBcd2>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006abc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	789b      	ldrb	r3, [r3, #2]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fa5e 	bl	8006f84 <RTC_ByteToBcd2>
 8006ac8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006aca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e00e      	b.n	8006af8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006ae6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006aec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	22ca      	movs	r2, #202	@ 0xca
 8006afe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2253      	movs	r2, #83	@ 0x53
 8006b06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f9df 	bl	8006ecc <RTC_EnterInitMode>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b12:	7cfb      	ldrb	r3, [r7, #19]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10c      	bne.n	8006b32 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006b22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b26:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fa06 	bl	8006f3a <RTC_ExitInitMode>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006b32:	7cfb      	ldrb	r3, [r7, #19]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	22ff      	movs	r2, #255	@ 0xff
 8006b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]

  return status;
 8006b4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd90      	pop	{r4, r7, pc}
	...

08006b58 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b089      	sub	sp, #36	@ 0x24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006b64:	4b9b      	ldr	r3, [pc, #620]	@ (8006dd4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a9b      	ldr	r2, [pc, #620]	@ (8006dd8 <HAL_RTC_SetAlarm_IT+0x280>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	0adb      	lsrs	r3, r3, #11
 8006b70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	7f1b      	ldrb	r3, [r3, #28]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_RTC_SetAlarm_IT+0x36>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e11e      	b.n	8006dcc <HAL_RTC_SetAlarm_IT+0x274>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2202      	movs	r2, #2
 8006b98:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d137      	bne.n	8006c10 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 f9e3 	bl	8006f84 <RTC_ByteToBcd2>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f9dc 	bl	8006f84 <RTC_ByteToBcd2>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006bd0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	789b      	ldrb	r3, [r3, #2]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f9d4 	bl	8006f84 <RTC_ByteToBcd2>
 8006bdc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bde:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006be8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f9c6 	bl	8006f84 <RTC_ByteToBcd2>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006bfc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006c04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	e023      	b.n	8006c58 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d102      	bne.n	8006c24 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006c30:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006c36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006c3e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c46:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006c48:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006c4e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006c54:	4313      	orrs	r3, r2
 8006c56:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006c60:	4313      	orrs	r3, r2
 8006c62:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	22ca      	movs	r2, #202	@ 0xca
 8006c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2253      	movs	r2, #83	@ 0x53
 8006c72:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7c:	d142      	bne.n	8006d04 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c8c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006c9e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	22ff      	movs	r2, #255	@ 0xff
 8006cb2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e083      	b.n	8006dcc <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0e6      	beq.n	8006ca0 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cf0:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d00:	609a      	str	r2, [r3, #8]
 8006d02:	e04c      	b.n	8006d9e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006d12:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006d24:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006d26:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd8 <HAL_RTC_SetAlarm_IT+0x280>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	0adb      	lsrs	r3, r3, #11
 8006d32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	22ff      	movs	r2, #255	@ 0xff
 8006d4e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2203      	movs	r2, #3
 8006d54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e035      	b.n	8006dcc <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0e6      	beq.n	8006d3c <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d8c:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ddc <HAL_RTC_SetAlarm_IT+0x284>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a0e      	ldr	r2, [pc, #56]	@ (8006ddc <HAL_RTC_SetAlarm_IT+0x284>)
 8006da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006da8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006daa:	4b0c      	ldr	r3, [pc, #48]	@ (8006ddc <HAL_RTC_SetAlarm_IT+0x284>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	4a0b      	ldr	r2, [pc, #44]	@ (8006ddc <HAL_RTC_SetAlarm_IT+0x284>)
 8006db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	22ff      	movs	r2, #255	@ 0xff
 8006dbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3724      	adds	r7, #36	@ 0x24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd90      	pop	{r4, r7, pc}
 8006dd4:	20000014 	.word	0x20000014
 8006dd8:	10624dd3 	.word	0x10624dd3
 8006ddc:	40013c00 	.word	0x40013c00

08006de0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006de8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e68 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006dea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006dee:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d012      	beq.n	8006e24 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006e1c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f824 	bl	8006e6c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d012      	beq.n	8006e58 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006e50:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8b4 	bl	8006fc0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	775a      	strb	r2, [r3, #29]
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40013c00 	.word	0x40013c00

08006e6c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a0d      	ldr	r2, [pc, #52]	@ (8006ec8 <HAL_RTC_WaitForSynchro+0x48>)
 8006e92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e94:	f7fd ff10 	bl	8004cb8 <HAL_GetTick>
 8006e98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e9a:	e009      	b.n	8006eb0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e9c:	f7fd ff0c 	bl	8004cb8 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e007      	b.n	8006ec0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ee      	beq.n	8006e9c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	00013f5f 	.word	0x00013f5f

08006ecc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d122      	bne.n	8006f30 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ef8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006efa:	f7fd fedd 	bl	8004cb8 <HAL_GetTick>
 8006efe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f00:	e00c      	b.n	8006f1c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f02:	f7fd fed9 	bl	8004cb8 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f10:	d904      	bls.n	8006f1c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2204      	movs	r2, #4
 8006f16:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d102      	bne.n	8006f30 <RTC_EnterInitMode+0x64>
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d1e8      	bne.n	8006f02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f54:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff ff8b 	bl	8006e80 <HAL_RTC_WaitForSynchro>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2204      	movs	r2, #4
 8006f74:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006f92:	e005      	b.n	8006fa0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	3b0a      	subs	r3, #10
 8006f9e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b09      	cmp	r3, #9
 8006fa4:	d8f6      	bhi.n	8006f94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	b2db      	uxtb	r3, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e07b      	b.n	80070de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d108      	bne.n	8007000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff6:	d009      	beq.n	800700c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	61da      	str	r2, [r3, #28]
 8006ffe:	e005      	b.n	800700c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fd fb50 	bl	80046cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007090:	ea42 0103 	orr.w	r1, r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	0c1b      	lsrs	r3, r3, #16
 80070aa:	f003 0104 	and.w	r1, r3, #4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	f003 0210 	and.w	r2, r3, #16
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b088      	sub	sp, #32
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070f6:	f7fd fddf 	bl	8004cb8 <HAL_GetTick>
 80070fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d001      	beq.n	8007110 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800710c:	2302      	movs	r3, #2
 800710e:	e12a      	b.n	8007366 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_SPI_Transmit+0x36>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e122      	b.n	8007366 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_SPI_Transmit+0x48>
 800712a:	2302      	movs	r3, #2
 800712c:	e11b      	b.n	8007366 <HAL_SPI_Transmit+0x280>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2203      	movs	r2, #3
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717c:	d10f      	bne.n	800719e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800718c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800719c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d007      	beq.n	80071bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071c4:	d152      	bne.n	800726c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_SPI_Transmit+0xee>
 80071ce:	8b7b      	ldrh	r3, [r7, #26]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d145      	bne.n	8007260 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d8:	881a      	ldrh	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e4:	1c9a      	adds	r2, r3, #2
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071f8:	e032      	b.n	8007260 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b02      	cmp	r3, #2
 8007206:	d112      	bne.n	800722e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720c:	881a      	ldrh	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	1c9a      	adds	r2, r3, #2
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800722c:	e018      	b.n	8007260 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800722e:	f7fd fd43 	bl	8004cb8 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d803      	bhi.n	8007246 <HAL_SPI_Transmit+0x160>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d102      	bne.n	800724c <HAL_SPI_Transmit+0x166>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e082      	b.n	8007366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1c7      	bne.n	80071fa <HAL_SPI_Transmit+0x114>
 800726a:	e053      	b.n	8007314 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_SPI_Transmit+0x194>
 8007274:	8b7b      	ldrh	r3, [r7, #26]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d147      	bne.n	800730a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072a0:	e033      	b.n	800730a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d113      	bne.n	80072d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072d6:	e018      	b.n	800730a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d8:	f7fd fcee 	bl	8004cb8 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d803      	bhi.n	80072f0 <HAL_SPI_Transmit+0x20a>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Transmit+0x210>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e02d      	b.n	8007366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1c6      	bne.n	80072a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fa59 	bl	80077d0 <SPI_EndRxTxTransaction>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007364:	2300      	movs	r3, #0
  }
}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b08a      	sub	sp, #40	@ 0x28
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800737c:	2301      	movs	r3, #1
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007380:	f7fd fc9a 	bl	8004cb8 <HAL_GetTick>
 8007384:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800738c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007394:	887b      	ldrh	r3, [r7, #2]
 8007396:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007398:	7ffb      	ldrb	r3, [r7, #31]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d00c      	beq.n	80073b8 <HAL_SPI_TransmitReceive+0x4a>
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073a4:	d106      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x46>
 80073ae:	7ffb      	ldrb	r3, [r7, #31]
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d001      	beq.n	80073b8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
 80073b6:	e17f      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_SPI_TransmitReceive+0x5c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_SPI_TransmitReceive+0x5c>
 80073c4:	887b      	ldrh	r3, [r7, #2]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e174      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x6e>
 80073d8:	2302      	movs	r3, #2
 80073da:	e16d      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d003      	beq.n	80073f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2205      	movs	r2, #5
 80073f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	887a      	ldrh	r2, [r7, #2]
 8007408:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	887a      	ldrh	r2, [r7, #2]
 800740e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	887a      	ldrh	r2, [r7, #2]
 800741a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007438:	2b40      	cmp	r3, #64	@ 0x40
 800743a:	d007      	beq.n	800744c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800744a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007454:	d17e      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_SPI_TransmitReceive+0xf6>
 800745e:	8afb      	ldrh	r3, [r7, #22]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d16c      	bne.n	800753e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007488:	e059      	b.n	800753e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b02      	cmp	r3, #2
 8007496:	d11b      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x162>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d016      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x162>
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d113      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	881a      	ldrh	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	1c9a      	adds	r2, r3, #2
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d119      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x1a4>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d014      	beq.n	8007512 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f2:	b292      	uxth	r2, r2
 80074f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074fa:	1c9a      	adds	r2, r3, #2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800750e:	2301      	movs	r3, #1
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007512:	f7fd fbd1 	bl	8004cb8 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751e:	429a      	cmp	r2, r3
 8007520:	d80d      	bhi.n	800753e <HAL_SPI_TransmitReceive+0x1d0>
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d009      	beq.n	800753e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e0bc      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1a0      	bne.n	800748a <HAL_SPI_TransmitReceive+0x11c>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d19b      	bne.n	800748a <HAL_SPI_TransmitReceive+0x11c>
 8007552:	e082      	b.n	800765a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <HAL_SPI_TransmitReceive+0x1f4>
 800755c:	8afb      	ldrh	r3, [r7, #22]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d171      	bne.n	8007646 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007588:	e05d      	b.n	8007646 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d11c      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x264>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d017      	beq.n	80075d2 <HAL_SPI_TransmitReceive+0x264>
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d114      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d119      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x2a6>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007610:	2301      	movs	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007614:	f7fd fb50 	bl	8004cb8 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007620:	429a      	cmp	r2, r3
 8007622:	d803      	bhi.n	800762c <HAL_SPI_TransmitReceive+0x2be>
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d102      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x2c4>
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e038      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d19c      	bne.n	800758a <HAL_SPI_TransmitReceive+0x21c>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d197      	bne.n	800758a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800765a:	6a3a      	ldr	r2, [r7, #32]
 800765c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f8b6 	bl	80077d0 <SPI_EndRxTxTransaction>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d008      	beq.n	800767c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2220      	movs	r2, #32
 800766e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e01d      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80076b6:	2300      	movs	r3, #0
  }
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3728      	adds	r7, #40	@ 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076d0:	f7fd faf2 	bl	8004cb8 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4413      	add	r3, r2
 80076de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076e0:	f7fd faea 	bl	8004cb8 <HAL_GetTick>
 80076e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076e6:	4b39      	ldr	r3, [pc, #228]	@ (80077cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	015b      	lsls	r3, r3, #5
 80076ec:	0d1b      	lsrs	r3, r3, #20
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	fb02 f303 	mul.w	r3, r2, r3
 80076f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076f6:	e055      	b.n	80077a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d051      	beq.n	80077a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007700:	f7fd fada 	bl	8004cb8 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	429a      	cmp	r2, r3
 800770e:	d902      	bls.n	8007716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d13d      	bne.n	8007792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800772e:	d111      	bne.n	8007754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007738:	d004      	beq.n	8007744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007742:	d107      	bne.n	8007754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800775c:	d10f      	bne.n	800777e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800777c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e018      	b.n	80077c4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	e002      	b.n	80077a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4013      	ands	r3, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d19a      	bne.n	80076f8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000014 	.word	0x20000014

080077d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2201      	movs	r2, #1
 80077e4:	2102      	movs	r1, #2
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff ff6a 	bl	80076c0 <SPI_WaitFlagStateUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d007      	beq.n	8007802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e032      	b.n	8007868 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007802:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <SPI_EndRxTxTransaction+0xa0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1b      	ldr	r2, [pc, #108]	@ (8007874 <SPI_EndRxTxTransaction+0xa4>)
 8007808:	fba2 2303 	umull	r2, r3, r2, r3
 800780c:	0d5b      	lsrs	r3, r3, #21
 800780e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007820:	d112      	bne.n	8007848 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	2180      	movs	r1, #128	@ 0x80
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff ff47 	bl	80076c0 <SPI_WaitFlagStateUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d016      	beq.n	8007866 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783c:	f043 0220 	orr.w	r2, r3, #32
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e00f      	b.n	8007868 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	3b01      	subs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785e:	2b80      	cmp	r3, #128	@ 0x80
 8007860:	d0f2      	beq.n	8007848 <SPI_EndRxTxTransaction+0x78>
 8007862:	e000      	b.n	8007866 <SPI_EndRxTxTransaction+0x96>
        break;
 8007864:	bf00      	nop
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20000014 	.word	0x20000014
 8007874:	165e9f81 	.word	0x165e9f81

08007878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e041      	b.n	800790e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fc ff5c 	bl	800475c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f000 fac0 	bl	8007e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e041      	b.n	80079ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f839 	bl	80079b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2202      	movs	r2, #2
 8007946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f000 fa71 	bl	8007e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <HAL_TIM_PWM_Start+0x24>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	bf14      	ite	ne
 80079e4:	2301      	movne	r3, #1
 80079e6:	2300      	moveq	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	e022      	b.n	8007a32 <HAL_TIM_PWM_Start+0x6a>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d109      	bne.n	8007a06 <HAL_TIM_PWM_Start+0x3e>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	bf14      	ite	ne
 80079fe:	2301      	movne	r3, #1
 8007a00:	2300      	moveq	r3, #0
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	e015      	b.n	8007a32 <HAL_TIM_PWM_Start+0x6a>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d109      	bne.n	8007a20 <HAL_TIM_PWM_Start+0x58>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	bf14      	ite	ne
 8007a18:	2301      	movne	r3, #1
 8007a1a:	2300      	moveq	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	e008      	b.n	8007a32 <HAL_TIM_PWM_Start+0x6a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	bf14      	ite	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e068      	b.n	8007b0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <HAL_TIM_PWM_Start+0x82>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a48:	e013      	b.n	8007a72 <HAL_TIM_PWM_Start+0xaa>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d104      	bne.n	8007a5a <HAL_TIM_PWM_Start+0x92>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a58:	e00b      	b.n	8007a72 <HAL_TIM_PWM_Start+0xaa>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d104      	bne.n	8007a6a <HAL_TIM_PWM_Start+0xa2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a68:	e003      	b.n	8007a72 <HAL_TIM_PWM_Start+0xaa>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2201      	movs	r2, #1
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fc8a 	bl	8008394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a23      	ldr	r2, [pc, #140]	@ (8007b14 <HAL_TIM_PWM_Start+0x14c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d107      	bne.n	8007a9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b14 <HAL_TIM_PWM_Start+0x14c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d018      	beq.n	8007ad6 <HAL_TIM_PWM_Start+0x10e>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aac:	d013      	beq.n	8007ad6 <HAL_TIM_PWM_Start+0x10e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	@ (8007b18 <HAL_TIM_PWM_Start+0x150>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_TIM_PWM_Start+0x10e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a17      	ldr	r2, [pc, #92]	@ (8007b1c <HAL_TIM_PWM_Start+0x154>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d009      	beq.n	8007ad6 <HAL_TIM_PWM_Start+0x10e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a16      	ldr	r2, [pc, #88]	@ (8007b20 <HAL_TIM_PWM_Start+0x158>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_TIM_PWM_Start+0x10e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a14      	ldr	r2, [pc, #80]	@ (8007b24 <HAL_TIM_PWM_Start+0x15c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d111      	bne.n	8007afa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2b06      	cmp	r3, #6
 8007ae6:	d010      	beq.n	8007b0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af8:	e007      	b.n	8007b0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40014000 	.word	0x40014000

08007b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e0ae      	b.n	8007ca4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b0c      	cmp	r3, #12
 8007b52:	f200 809f 	bhi.w	8007c94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b56:	a201      	add	r2, pc, #4	@ (adr r2, 8007b5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b91 	.word	0x08007b91
 8007b60:	08007c95 	.word	0x08007c95
 8007b64:	08007c95 	.word	0x08007c95
 8007b68:	08007c95 	.word	0x08007c95
 8007b6c:	08007bd1 	.word	0x08007bd1
 8007b70:	08007c95 	.word	0x08007c95
 8007b74:	08007c95 	.word	0x08007c95
 8007b78:	08007c95 	.word	0x08007c95
 8007b7c:	08007c13 	.word	0x08007c13
 8007b80:	08007c95 	.word	0x08007c95
 8007b84:	08007c95 	.word	0x08007c95
 8007b88:	08007c95 	.word	0x08007c95
 8007b8c:	08007c53 	.word	0x08007c53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68b9      	ldr	r1, [r7, #8]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 f9d6 	bl	8007f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0208 	orr.w	r2, r2, #8
 8007baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0204 	bic.w	r2, r2, #4
 8007bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6999      	ldr	r1, [r3, #24]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	619a      	str	r2, [r3, #24]
      break;
 8007bce:	e064      	b.n	8007c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fa1c 	bl	8008014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6999      	ldr	r1, [r3, #24]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	021a      	lsls	r2, r3, #8
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	619a      	str	r2, [r3, #24]
      break;
 8007c10:	e043      	b.n	8007c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fa67 	bl	80080ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0208 	orr.w	r2, r2, #8
 8007c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0204 	bic.w	r2, r2, #4
 8007c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69d9      	ldr	r1, [r3, #28]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	61da      	str	r2, [r3, #28]
      break;
 8007c50:	e023      	b.n	8007c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fab1 	bl	80081c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69da      	ldr	r2, [r3, #28]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69d9      	ldr	r1, [r3, #28]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	021a      	lsls	r2, r3, #8
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	61da      	str	r2, [r3, #28]
      break;
 8007c92:	e002      	b.n	8007c9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
      break;
 8007c98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e0b4      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x186>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d00:	d03e      	beq.n	8007d80 <HAL_TIM_ConfigClockSource+0xd4>
 8007d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d06:	f200 8087 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d0e:	f000 8086 	beq.w	8007e1e <HAL_TIM_ConfigClockSource+0x172>
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d16:	d87f      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d18:	2b70      	cmp	r3, #112	@ 0x70
 8007d1a:	d01a      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0xa6>
 8007d1c:	2b70      	cmp	r3, #112	@ 0x70
 8007d1e:	d87b      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d20:	2b60      	cmp	r3, #96	@ 0x60
 8007d22:	d050      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8007d24:	2b60      	cmp	r3, #96	@ 0x60
 8007d26:	d877      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d28:	2b50      	cmp	r3, #80	@ 0x50
 8007d2a:	d03c      	beq.n	8007da6 <HAL_TIM_ConfigClockSource+0xfa>
 8007d2c:	2b50      	cmp	r3, #80	@ 0x50
 8007d2e:	d873      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d30:	2b40      	cmp	r3, #64	@ 0x40
 8007d32:	d058      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x13a>
 8007d34:	2b40      	cmp	r3, #64	@ 0x40
 8007d36:	d86f      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d38:	2b30      	cmp	r3, #48	@ 0x30
 8007d3a:	d064      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x15a>
 8007d3c:	2b30      	cmp	r3, #48	@ 0x30
 8007d3e:	d86b      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d060      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x15a>
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d867      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d05c      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x15a>
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d05a      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x15a>
 8007d50:	e062      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d62:	f000 faf7 	bl	8008354 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	609a      	str	r2, [r3, #8]
      break;
 8007d7e:	e04f      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d90:	f000 fae0 	bl	8008354 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007da2:	609a      	str	r2, [r3, #8]
      break;
 8007da4:	e03c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db2:	461a      	mov	r2, r3
 8007db4:	f000 fa54 	bl	8008260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2150      	movs	r1, #80	@ 0x50
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 faad 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007dc4:	e02c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f000 fa73 	bl	80082be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2160      	movs	r1, #96	@ 0x60
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fa9d 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007de4:	e01c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df2:	461a      	mov	r2, r3
 8007df4:	f000 fa34 	bl	8008260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2140      	movs	r1, #64	@ 0x40
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fa8d 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007e04:	e00c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f000 fa84 	bl	800831e <TIM_ITRx_SetConfig>
      break;
 8007e16:	e003      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1c:	e000      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a37      	ldr	r2, [pc, #220]	@ (8007f2c <TIM_Base_SetConfig+0xf0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00f      	beq.n	8007e74 <TIM_Base_SetConfig+0x38>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e5a:	d00b      	beq.n	8007e74 <TIM_Base_SetConfig+0x38>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a34      	ldr	r2, [pc, #208]	@ (8007f30 <TIM_Base_SetConfig+0xf4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_Base_SetConfig+0x38>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a33      	ldr	r2, [pc, #204]	@ (8007f34 <TIM_Base_SetConfig+0xf8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0x38>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a32      	ldr	r2, [pc, #200]	@ (8007f38 <TIM_Base_SetConfig+0xfc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d108      	bne.n	8007e86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a28      	ldr	r2, [pc, #160]	@ (8007f2c <TIM_Base_SetConfig+0xf0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01b      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e94:	d017      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a25      	ldr	r2, [pc, #148]	@ (8007f30 <TIM_Base_SetConfig+0xf4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a24      	ldr	r2, [pc, #144]	@ (8007f34 <TIM_Base_SetConfig+0xf8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00f      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a23      	ldr	r2, [pc, #140]	@ (8007f38 <TIM_Base_SetConfig+0xfc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00b      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a22      	ldr	r2, [pc, #136]	@ (8007f3c <TIM_Base_SetConfig+0x100>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d007      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a21      	ldr	r2, [pc, #132]	@ (8007f40 <TIM_Base_SetConfig+0x104>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d003      	beq.n	8007ec6 <TIM_Base_SetConfig+0x8a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a20      	ldr	r2, [pc, #128]	@ (8007f44 <TIM_Base_SetConfig+0x108>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d108      	bne.n	8007ed8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8007f2c <TIM_Base_SetConfig+0xf0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d103      	bne.n	8007f06 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f043 0204 	orr.w	r2, r3, #4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	601a      	str	r2, [r3, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40010000 	.word	0x40010000
 8007f30:	40000400 	.word	0x40000400
 8007f34:	40000800 	.word	0x40000800
 8007f38:	40000c00 	.word	0x40000c00
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800

08007f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f023 0201 	bic.w	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 0302 	bic.w	r3, r3, #2
 8007f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008010 <TIM_OC1_SetConfig+0xc8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d10c      	bne.n	8007fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0308 	bic.w	r3, r3, #8
 8007faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f023 0304 	bic.w	r3, r3, #4
 8007fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a13      	ldr	r2, [pc, #76]	@ (8008010 <TIM_OC1_SetConfig+0xc8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d111      	bne.n	8007fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40010000 	.word	0x40010000

08008014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	f023 0210 	bic.w	r2, r3, #16
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800804a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0320 	bic.w	r3, r3, #32
 800805e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1e      	ldr	r2, [pc, #120]	@ (80080e8 <TIM_OC2_SetConfig+0xd4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d10d      	bne.n	8008090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800807a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800808e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a15      	ldr	r2, [pc, #84]	@ (80080e8 <TIM_OC2_SetConfig+0xd4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d113      	bne.n	80080c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800809e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40010000 	.word	0x40010000

080080ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0303 	bic.w	r3, r3, #3
 8008122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a1d      	ldr	r2, [pc, #116]	@ (80081bc <TIM_OC3_SetConfig+0xd0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d10d      	bne.n	8008166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a14      	ldr	r2, [pc, #80]	@ (80081bc <TIM_OC3_SetConfig+0xd0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d113      	bne.n	8008196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800817c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	621a      	str	r2, [r3, #32]
}
 80081b0:	bf00      	nop
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	40010000 	.word	0x40010000

080081c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800820a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	031b      	lsls	r3, r3, #12
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a10      	ldr	r2, [pc, #64]	@ (800825c <TIM_OC4_SetConfig+0x9c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d109      	bne.n	8008234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	019b      	lsls	r3, r3, #6
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	4313      	orrs	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000

08008260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800828a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f023 030a 	bic.w	r3, r3, #10
 800829c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	621a      	str	r2, [r3, #32]
}
 80082b2:	bf00      	nop
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082be:	b480      	push	{r7}
 80082c0:	b087      	sub	sp, #28
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	f023 0210 	bic.w	r2, r3, #16
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	031b      	lsls	r3, r3, #12
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	621a      	str	r2, [r3, #32]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	f043 0307 	orr.w	r3, r3, #7
 8008340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	609a      	str	r2, [r3, #8]
}
 8008348:	bf00      	nop
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800836e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	021a      	lsls	r2, r3, #8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	431a      	orrs	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	609a      	str	r2, [r3, #8]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 031f 	and.w	r3, r3, #31
 80083a6:	2201      	movs	r2, #1
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1a      	ldr	r2, [r3, #32]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	43db      	mvns	r3, r3
 80083b6:	401a      	ands	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a1a      	ldr	r2, [r3, #32]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	fa01 f303 	lsl.w	r3, r1, r3
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e050      	b.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800841e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1c      	ldr	r2, [pc, #112]	@ (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008444:	d013      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a18      	ldr	r2, [pc, #96]	@ (80084ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a16      	ldr	r2, [pc, #88]	@ (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a15      	ldr	r2, [pc, #84]	@ (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a13      	ldr	r2, [pc, #76]	@ (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d10c      	bne.n	8008488 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4313      	orrs	r3, r2
 800847e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	40014000 	.word	0x40014000

080084bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e03d      	b.n	8008554 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	4313      	orrs	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e042      	b.n	80085f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d106      	bne.n	800858c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fc f944 	bl	8004814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2224      	movs	r2, #36	@ 0x24
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fdd3 	bl	8009150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	691a      	ldr	r2, [r3, #16]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695a      	ldr	r2, [r3, #20]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	@ 0x28
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b20      	cmp	r3, #32
 800861e:	d175      	bne.n	800870c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <HAL_UART_Transmit+0x2c>
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e06e      	b.n	800870e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2221      	movs	r2, #33	@ 0x21
 800863a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800863e:	f7fc fb3b 	bl	8004cb8 <HAL_GetTick>
 8008642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	88fa      	ldrh	r2, [r7, #6]
 8008648:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	88fa      	ldrh	r2, [r7, #6]
 800864e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008658:	d108      	bne.n	800866c <HAL_UART_Transmit+0x6c>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d104      	bne.n	800866c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	61bb      	str	r3, [r7, #24]
 800866a:	e003      	b.n	8008674 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008670:	2300      	movs	r3, #0
 8008672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008674:	e02e      	b.n	80086d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2200      	movs	r2, #0
 800867e:	2180      	movs	r1, #128	@ 0x80
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fb37 	bl	8008cf4 <UART_WaitOnFlagUntilTimeout>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d005      	beq.n	8008698 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e03a      	b.n	800870e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10b      	bne.n	80086b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	3302      	adds	r3, #2
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	e007      	b.n	80086c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	781a      	ldrb	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	3301      	adds	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1cb      	bne.n	8008676 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2200      	movs	r2, #0
 80086e6:	2140      	movs	r1, #64	@ 0x40
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fb03 	bl	8008cf4 <UART_WaitOnFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e006      	b.n	800870e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e000      	b.n	800870e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800870c:	2302      	movs	r3, #2
  }
}
 800870e:	4618      	mov	r0, r3
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	4613      	mov	r3, r2
 8008722:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b20      	cmp	r3, #32
 800872e:	d112      	bne.n	8008756 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <HAL_UART_Receive_IT+0x26>
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e00b      	b.n	8008758 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	461a      	mov	r2, r3
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fb2a 	bl	8008da6 <UART_Start_Receive_IT>
 8008752:	4603      	mov	r3, r0
 8008754:	e000      	b.n	8008758 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008756:	2302      	movs	r3, #2
  }
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b0ba      	sub	sp, #232	@ 0xe8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008786:	2300      	movs	r3, #0
 8008788:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800878c:	2300      	movs	r3, #0
 800878e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 030f 	and.w	r3, r3, #15
 800879a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800879e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10f      	bne.n	80087c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <HAL_UART_IRQHandler+0x66>
 80087b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fc07 	bl	8008fd2 <UART_Receive_IT>
      return;
 80087c4:	e273      	b.n	8008cae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80de 	beq.w	800898c <HAL_UART_IRQHandler+0x22c>
 80087d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80d1 	beq.w	800898c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <HAL_UART_IRQHandler+0xae>
 80087f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008806:	f043 0201 	orr.w	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800880e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00b      	beq.n	8008832 <HAL_UART_IRQHandler+0xd2>
 800881a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882a:	f043 0202 	orr.w	r2, r3, #2
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_UART_IRQHandler+0xf6>
 800883e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	f043 0204 	orr.w	r2, r3, #4
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885a:	f003 0308 	and.w	r3, r3, #8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <HAL_UART_IRQHandler+0x126>
 8008862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d105      	bne.n	800887a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800886e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800887e:	f043 0208 	orr.w	r2, r3, #8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 820a 	beq.w	8008ca4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_UART_IRQHandler+0x14e>
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fb92 	bl	8008fd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b8:	2b40      	cmp	r3, #64	@ 0x40
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ca:	f003 0308 	and.w	r3, r3, #8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <HAL_UART_IRQHandler+0x17a>
 80088d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d04f      	beq.n	800897a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa9d 	bl	8008e1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ea:	2b40      	cmp	r3, #64	@ 0x40
 80088ec:	d141      	bne.n	8008972 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3314      	adds	r3, #20
 80088f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008904:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800890c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3314      	adds	r3, #20
 8008916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800891a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800891e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1d9      	bne.n	80088ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d013      	beq.n	800896a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008946:	4a8a      	ldr	r2, [pc, #552]	@ (8008b70 <HAL_UART_IRQHandler+0x410>)
 8008948:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894e:	4618      	mov	r0, r3
 8008950:	f7fc fb63 	bl	800501a <HAL_DMA_Abort_IT>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d016      	beq.n	8008988 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	e00e      	b.n	8008988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9ac 	bl	8008cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008970:	e00a      	b.n	8008988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f9a8 	bl	8008cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	e006      	b.n	8008988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f9a4 	bl	8008cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008986:	e18d      	b.n	8008ca4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008988:	bf00      	nop
    return;
 800898a:	e18b      	b.n	8008ca4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008990:	2b01      	cmp	r3, #1
 8008992:	f040 8167 	bne.w	8008c64 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800899a:	f003 0310 	and.w	r3, r3, #16
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8160 	beq.w	8008c64 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a8:	f003 0310 	and.w	r3, r3, #16
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8159 	beq.w	8008c64 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089b2:	2300      	movs	r3, #0
 80089b4:	60bb      	str	r3, [r7, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60bb      	str	r3, [r7, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d2:	2b40      	cmp	r3, #64	@ 0x40
 80089d4:	f040 80ce 	bne.w	8008b74 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 80a9 	beq.w	8008b40 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089f6:	429a      	cmp	r2, r3
 80089f8:	f080 80a2 	bcs.w	8008b40 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0e:	f000 8088 	beq.w	8008b22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	330c      	adds	r3, #12
 8008a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	330c      	adds	r3, #12
 8008a3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1d9      	bne.n	8008a12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e1      	bne.n	8008a5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3314      	adds	r3, #20
 8008aa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3314      	adds	r3, #20
 8008aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e3      	bne.n	8008a9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	330c      	adds	r3, #12
 8008ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008af2:	f023 0310 	bic.w	r3, r3, #16
 8008af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008b04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e3      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fc fa0c 	bl	8004f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f8cf 	bl	8008cdc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008b3e:	e0b3      	b.n	8008ca8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	f040 80ad 	bne.w	8008ca8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b58:	f040 80a6 	bne.w	8008ca8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f8b7 	bl	8008cdc <HAL_UARTEx_RxEventCallback>
      return;
 8008b6e:	e09b      	b.n	8008ca8 <HAL_UART_IRQHandler+0x548>
 8008b70:	08008ee1 	.word	0x08008ee1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 808e 	beq.w	8008cac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8089 	beq.w	8008cac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e3      	bne.n	8008b9a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3314      	adds	r3, #20
 8008bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	623b      	str	r3, [r7, #32]
   return(result);
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e3      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0310 	bic.w	r3, r3, #16
 8008c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008c3c:	61fa      	str	r2, [r7, #28]
 8008c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	69b9      	ldr	r1, [r7, #24]
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e3      	bne.n	8008c18 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f83d 	bl	8008cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c62:	e023      	b.n	8008cac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d009      	beq.n	8008c84 <HAL_UART_IRQHandler+0x524>
 8008c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f940 	bl	8008f02 <UART_Transmit_IT>
    return;
 8008c82:	e014      	b.n	8008cae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00e      	beq.n	8008cae <HAL_UART_IRQHandler+0x54e>
 8008c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f980 	bl	8008fa2 <UART_EndTransmit_IT>
    return;
 8008ca2:	e004      	b.n	8008cae <HAL_UART_IRQHandler+0x54e>
    return;
 8008ca4:	bf00      	nop
 8008ca6:	e002      	b.n	8008cae <HAL_UART_IRQHandler+0x54e>
      return;
 8008ca8:	bf00      	nop
 8008caa:	e000      	b.n	8008cae <HAL_UART_IRQHandler+0x54e>
      return;
 8008cac:	bf00      	nop
  }
}
 8008cae:	37e8      	adds	r7, #232	@ 0xe8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	4613      	mov	r3, r2
 8008d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d04:	e03b      	b.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0c:	d037      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d0e:	f7fb ffd3 	bl	8004cb8 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	6a3a      	ldr	r2, [r7, #32]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d302      	bcc.n	8008d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e03a      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f003 0304 	and.w	r3, r3, #4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d023      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b80      	cmp	r3, #128	@ 0x80
 8008d3a:	d020      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b40      	cmp	r3, #64	@ 0x40
 8008d40:	d01d      	beq.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d116      	bne.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f857 	bl	8008e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2208      	movs	r2, #8
 8008d70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e00f      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	4013      	ands	r3, r2
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2301      	moveq	r3, #1
 8008d90:	2300      	movne	r3, #0
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d0b4      	beq.n	8008d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	4613      	mov	r3, r2
 8008db2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	88fa      	ldrh	r2, [r7, #6]
 8008dbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	88fa      	ldrh	r2, [r7, #6]
 8008dc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2222      	movs	r2, #34	@ 0x22
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d007      	beq.n	8008dec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0220 	orr.w	r2, r2, #32
 8008e0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b095      	sub	sp, #84	@ 0x54
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	330c      	adds	r3, #12
 8008e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e42:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d119      	bne.n	8008ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	330c      	adds	r3, #12
 8008e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f023 0310 	bic.w	r3, r3, #16
 8008ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	330c      	adds	r3, #12
 8008eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eb2:	61ba      	str	r2, [r7, #24]
 8008eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e5      	bne.n	8008e92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ed4:	bf00      	nop
 8008ed6:	3754      	adds	r7, #84	@ 0x54
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fee7 	bl	8008cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008efa:	bf00      	nop
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b21      	cmp	r3, #33	@ 0x21
 8008f14:	d13e      	bne.n	8008f94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f1e:	d114      	bne.n	8008f4a <UART_Transmit_IT+0x48>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d110      	bne.n	8008f4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	1c9a      	adds	r2, r3, #2
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	621a      	str	r2, [r3, #32]
 8008f48:	e008      	b.n	8008f5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	1c59      	adds	r1, r3, #1
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6211      	str	r1, [r2, #32]
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10f      	bne.n	8008f90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	e000      	b.n	8008f96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f94:	2302      	movs	r3, #2
  }
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fe76 	bl	8008cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b08c      	sub	sp, #48	@ 0x30
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b22      	cmp	r3, #34	@ 0x22
 8008fec:	f040 80aa 	bne.w	8009144 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff8:	d115      	bne.n	8009026 <UART_Receive_IT+0x54>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d111      	bne.n	8009026 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009006:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	b29b      	uxth	r3, r3
 8009010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009014:	b29a      	uxth	r2, r3
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901e:	1c9a      	adds	r2, r3, #2
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	629a      	str	r2, [r3, #40]	@ 0x28
 8009024:	e024      	b.n	8009070 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009034:	d007      	beq.n	8009046 <UART_Receive_IT+0x74>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10a      	bne.n	8009054 <UART_Receive_IT+0x82>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009050:	701a      	strb	r2, [r3, #0]
 8009052:	e008      	b.n	8009066 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009060:	b2da      	uxtb	r2, r3
 8009062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009064:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29b      	uxth	r3, r3
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	4619      	mov	r1, r3
 800907e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009080:	2b00      	cmp	r3, #0
 8009082:	d15d      	bne.n	8009140 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0220 	bic.w	r2, r2, #32
 8009092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80090a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0201 	bic.w	r2, r2, #1
 80090b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d135      	bne.n	8009136 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	330c      	adds	r3, #12
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	e853 3f00 	ldrex	r3, [r3]
 80090de:	613b      	str	r3, [r7, #16]
   return(result);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	f023 0310 	bic.w	r3, r3, #16
 80090e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	330c      	adds	r3, #12
 80090ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f0:	623a      	str	r2, [r7, #32]
 80090f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	69f9      	ldr	r1, [r7, #28]
 80090f6:	6a3a      	ldr	r2, [r7, #32]
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e5      	bne.n	80090d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0310 	and.w	r3, r3, #16
 800910e:	2b10      	cmp	r3, #16
 8009110:	d10a      	bne.n	8009128 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fdd4 	bl	8008cdc <HAL_UARTEx_RxEventCallback>
 8009134:	e002      	b.n	800913c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fa f902 	bl	8003340 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	e002      	b.n	8009146 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	3730      	adds	r7, #48	@ 0x30
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009154:	b0c0      	sub	sp, #256	@ 0x100
 8009156:	af00      	add	r7, sp, #0
 8009158:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916c:	68d9      	ldr	r1, [r3, #12]
 800916e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	ea40 0301 	orr.w	r3, r0, r1
 8009178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	431a      	orrs	r2, r3
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	431a      	orrs	r2, r3
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80091a8:	f021 010c 	bic.w	r1, r1, #12
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80091b6:	430b      	orrs	r3, r1
 80091b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ca:	6999      	ldr	r1, [r3, #24]
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	ea40 0301 	orr.w	r3, r0, r1
 80091d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b8f      	ldr	r3, [pc, #572]	@ (800941c <UART_SetConfig+0x2cc>)
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d005      	beq.n	80091f0 <UART_SetConfig+0xa0>
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b8d      	ldr	r3, [pc, #564]	@ (8009420 <UART_SetConfig+0x2d0>)
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d104      	bne.n	80091fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091f0:	f7fd fa0e 	bl	8006610 <HAL_RCC_GetPCLK2Freq>
 80091f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80091f8:	e003      	b.n	8009202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091fa:	f7fd f9f5 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 80091fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800920c:	f040 810c 	bne.w	8009428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009214:	2200      	movs	r2, #0
 8009216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800921a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800921e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009222:	4622      	mov	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	1891      	adds	r1, r2, r2
 8009228:	65b9      	str	r1, [r7, #88]	@ 0x58
 800922a:	415b      	adcs	r3, r3
 800922c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800922e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009232:	4621      	mov	r1, r4
 8009234:	eb12 0801 	adds.w	r8, r2, r1
 8009238:	4629      	mov	r1, r5
 800923a:	eb43 0901 	adc.w	r9, r3, r1
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800924a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800924e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009252:	4690      	mov	r8, r2
 8009254:	4699      	mov	r9, r3
 8009256:	4623      	mov	r3, r4
 8009258:	eb18 0303 	adds.w	r3, r8, r3
 800925c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009260:	462b      	mov	r3, r5
 8009262:	eb49 0303 	adc.w	r3, r9, r3
 8009266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009276:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800927a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800927e:	460b      	mov	r3, r1
 8009280:	18db      	adds	r3, r3, r3
 8009282:	653b      	str	r3, [r7, #80]	@ 0x50
 8009284:	4613      	mov	r3, r2
 8009286:	eb42 0303 	adc.w	r3, r2, r3
 800928a:	657b      	str	r3, [r7, #84]	@ 0x54
 800928c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009294:	f7f7 fd60 	bl	8000d58 <__aeabi_uldivmod>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4b61      	ldr	r3, [pc, #388]	@ (8009424 <UART_SetConfig+0x2d4>)
 800929e:	fba3 2302 	umull	r2, r3, r3, r2
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	011c      	lsls	r4, r3, #4
 80092a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80092b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	1891      	adds	r1, r2, r2
 80092be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80092c0:	415b      	adcs	r3, r3
 80092c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80092c8:	4641      	mov	r1, r8
 80092ca:	eb12 0a01 	adds.w	sl, r2, r1
 80092ce:	4649      	mov	r1, r9
 80092d0:	eb43 0b01 	adc.w	fp, r3, r1
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092e8:	4692      	mov	sl, r2
 80092ea:	469b      	mov	fp, r3
 80092ec:	4643      	mov	r3, r8
 80092ee:	eb1a 0303 	adds.w	r3, sl, r3
 80092f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092f6:	464b      	mov	r3, r9
 80092f8:	eb4b 0303 	adc.w	r3, fp, r3
 80092fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800930c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009314:	460b      	mov	r3, r1
 8009316:	18db      	adds	r3, r3, r3
 8009318:	643b      	str	r3, [r7, #64]	@ 0x40
 800931a:	4613      	mov	r3, r2
 800931c:	eb42 0303 	adc.w	r3, r2, r3
 8009320:	647b      	str	r3, [r7, #68]	@ 0x44
 8009322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800932a:	f7f7 fd15 	bl	8000d58 <__aeabi_uldivmod>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4611      	mov	r1, r2
 8009334:	4b3b      	ldr	r3, [pc, #236]	@ (8009424 <UART_SetConfig+0x2d4>)
 8009336:	fba3 2301 	umull	r2, r3, r3, r1
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2264      	movs	r2, #100	@ 0x64
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	1acb      	subs	r3, r1, r3
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800934a:	4b36      	ldr	r3, [pc, #216]	@ (8009424 <UART_SetConfig+0x2d4>)
 800934c:	fba3 2302 	umull	r2, r3, r3, r2
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009358:	441c      	add	r4, r3
 800935a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009364:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	1891      	adds	r1, r2, r2
 8009372:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009374:	415b      	adcs	r3, r3
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800937c:	4641      	mov	r1, r8
 800937e:	1851      	adds	r1, r2, r1
 8009380:	6339      	str	r1, [r7, #48]	@ 0x30
 8009382:	4649      	mov	r1, r9
 8009384:	414b      	adcs	r3, r1
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009394:	4659      	mov	r1, fp
 8009396:	00cb      	lsls	r3, r1, #3
 8009398:	4651      	mov	r1, sl
 800939a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800939e:	4651      	mov	r1, sl
 80093a0:	00ca      	lsls	r2, r1, #3
 80093a2:	4610      	mov	r0, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	4642      	mov	r2, r8
 80093aa:	189b      	adds	r3, r3, r2
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093b0:	464b      	mov	r3, r9
 80093b2:	460a      	mov	r2, r1
 80093b4:	eb42 0303 	adc.w	r3, r2, r3
 80093b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80093cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80093d0:	460b      	mov	r3, r1
 80093d2:	18db      	adds	r3, r3, r3
 80093d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093d6:	4613      	mov	r3, r2
 80093d8:	eb42 0303 	adc.w	r3, r2, r3
 80093dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80093e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80093e6:	f7f7 fcb7 	bl	8000d58 <__aeabi_uldivmod>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <UART_SetConfig+0x2d4>)
 80093f0:	fba3 1302 	umull	r1, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	2164      	movs	r1, #100	@ 0x64
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	3332      	adds	r3, #50	@ 0x32
 8009402:	4a08      	ldr	r2, [pc, #32]	@ (8009424 <UART_SetConfig+0x2d4>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	f003 0207 	and.w	r2, r3, #7
 800940e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4422      	add	r2, r4
 8009416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009418:	e106      	b.n	8009628 <UART_SetConfig+0x4d8>
 800941a:	bf00      	nop
 800941c:	40011000 	.word	0x40011000
 8009420:	40011400 	.word	0x40011400
 8009424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800942c:	2200      	movs	r2, #0
 800942e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009432:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800943a:	4642      	mov	r2, r8
 800943c:	464b      	mov	r3, r9
 800943e:	1891      	adds	r1, r2, r2
 8009440:	6239      	str	r1, [r7, #32]
 8009442:	415b      	adcs	r3, r3
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
 8009446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800944a:	4641      	mov	r1, r8
 800944c:	1854      	adds	r4, r2, r1
 800944e:	4649      	mov	r1, r9
 8009450:	eb43 0501 	adc.w	r5, r3, r1
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	f04f 0300 	mov.w	r3, #0
 800945c:	00eb      	lsls	r3, r5, #3
 800945e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009462:	00e2      	lsls	r2, r4, #3
 8009464:	4614      	mov	r4, r2
 8009466:	461d      	mov	r5, r3
 8009468:	4643      	mov	r3, r8
 800946a:	18e3      	adds	r3, r4, r3
 800946c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009470:	464b      	mov	r3, r9
 8009472:	eb45 0303 	adc.w	r3, r5, r3
 8009476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009486:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009496:	4629      	mov	r1, r5
 8009498:	008b      	lsls	r3, r1, #2
 800949a:	4621      	mov	r1, r4
 800949c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094a0:	4621      	mov	r1, r4
 80094a2:	008a      	lsls	r2, r1, #2
 80094a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80094a8:	f7f7 fc56 	bl	8000d58 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4b60      	ldr	r3, [pc, #384]	@ (8009634 <UART_SetConfig+0x4e4>)
 80094b2:	fba3 2302 	umull	r2, r3, r3, r2
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	011c      	lsls	r4, r3, #4
 80094ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80094c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80094c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	1891      	adds	r1, r2, r2
 80094d2:	61b9      	str	r1, [r7, #24]
 80094d4:	415b      	adcs	r3, r3
 80094d6:	61fb      	str	r3, [r7, #28]
 80094d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094dc:	4641      	mov	r1, r8
 80094de:	1851      	adds	r1, r2, r1
 80094e0:	6139      	str	r1, [r7, #16]
 80094e2:	4649      	mov	r1, r9
 80094e4:	414b      	adcs	r3, r1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094f4:	4659      	mov	r1, fp
 80094f6:	00cb      	lsls	r3, r1, #3
 80094f8:	4651      	mov	r1, sl
 80094fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094fe:	4651      	mov	r1, sl
 8009500:	00ca      	lsls	r2, r1, #3
 8009502:	4610      	mov	r0, r2
 8009504:	4619      	mov	r1, r3
 8009506:	4603      	mov	r3, r0
 8009508:	4642      	mov	r2, r8
 800950a:	189b      	adds	r3, r3, r2
 800950c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009510:	464b      	mov	r3, r9
 8009512:	460a      	mov	r2, r1
 8009514:	eb42 0303 	adc.w	r3, r2, r3
 8009518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009526:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009534:	4649      	mov	r1, r9
 8009536:	008b      	lsls	r3, r1, #2
 8009538:	4641      	mov	r1, r8
 800953a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800953e:	4641      	mov	r1, r8
 8009540:	008a      	lsls	r2, r1, #2
 8009542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009546:	f7f7 fc07 	bl	8000d58 <__aeabi_uldivmod>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4611      	mov	r1, r2
 8009550:	4b38      	ldr	r3, [pc, #224]	@ (8009634 <UART_SetConfig+0x4e4>)
 8009552:	fba3 2301 	umull	r2, r3, r3, r1
 8009556:	095b      	lsrs	r3, r3, #5
 8009558:	2264      	movs	r2, #100	@ 0x64
 800955a:	fb02 f303 	mul.w	r3, r2, r3
 800955e:	1acb      	subs	r3, r1, r3
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	3332      	adds	r3, #50	@ 0x32
 8009564:	4a33      	ldr	r2, [pc, #204]	@ (8009634 <UART_SetConfig+0x4e4>)
 8009566:	fba2 2303 	umull	r2, r3, r2, r3
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009570:	441c      	add	r4, r3
 8009572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009576:	2200      	movs	r2, #0
 8009578:	673b      	str	r3, [r7, #112]	@ 0x70
 800957a:	677a      	str	r2, [r7, #116]	@ 0x74
 800957c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	1891      	adds	r1, r2, r2
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	415b      	adcs	r3, r3
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009590:	4641      	mov	r1, r8
 8009592:	1851      	adds	r1, r2, r1
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	4649      	mov	r1, r9
 8009598:	414b      	adcs	r3, r1
 800959a:	607b      	str	r3, [r7, #4]
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095a8:	4659      	mov	r1, fp
 80095aa:	00cb      	lsls	r3, r1, #3
 80095ac:	4651      	mov	r1, sl
 80095ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095b2:	4651      	mov	r1, sl
 80095b4:	00ca      	lsls	r2, r1, #3
 80095b6:	4610      	mov	r0, r2
 80095b8:	4619      	mov	r1, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	4642      	mov	r2, r8
 80095be:	189b      	adds	r3, r3, r2
 80095c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095c2:	464b      	mov	r3, r9
 80095c4:	460a      	mov	r2, r1
 80095c6:	eb42 0303 	adc.w	r3, r2, r3
 80095ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80095cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80095d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80095e4:	4649      	mov	r1, r9
 80095e6:	008b      	lsls	r3, r1, #2
 80095e8:	4641      	mov	r1, r8
 80095ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ee:	4641      	mov	r1, r8
 80095f0:	008a      	lsls	r2, r1, #2
 80095f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80095f6:	f7f7 fbaf 	bl	8000d58 <__aeabi_uldivmod>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009634 <UART_SetConfig+0x4e4>)
 8009600:	fba3 1302 	umull	r1, r3, r3, r2
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	2164      	movs	r1, #100	@ 0x64
 8009608:	fb01 f303 	mul.w	r3, r1, r3
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	3332      	adds	r3, #50	@ 0x32
 8009612:	4a08      	ldr	r2, [pc, #32]	@ (8009634 <UART_SetConfig+0x4e4>)
 8009614:	fba2 2303 	umull	r2, r3, r2, r3
 8009618:	095b      	lsrs	r3, r3, #5
 800961a:	f003 020f 	and.w	r2, r3, #15
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4422      	add	r2, r4
 8009626:	609a      	str	r2, [r3, #8]
}
 8009628:	bf00      	nop
 800962a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800962e:	46bd      	mov	sp, r7
 8009630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009634:	51eb851f 	.word	0x51eb851f

08009638 <__NVIC_SetPriority>:
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009648:	2b00      	cmp	r3, #0
 800964a:	db0a      	blt.n	8009662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	b2da      	uxtb	r2, r3
 8009650:	490c      	ldr	r1, [pc, #48]	@ (8009684 <__NVIC_SetPriority+0x4c>)
 8009652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009656:	0112      	lsls	r2, r2, #4
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	440b      	add	r3, r1
 800965c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009660:	e00a      	b.n	8009678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	4908      	ldr	r1, [pc, #32]	@ (8009688 <__NVIC_SetPriority+0x50>)
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	f003 030f 	and.w	r3, r3, #15
 800966e:	3b04      	subs	r3, #4
 8009670:	0112      	lsls	r2, r2, #4
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	440b      	add	r3, r1
 8009676:	761a      	strb	r2, [r3, #24]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	e000e100 	.word	0xe000e100
 8009688:	e000ed00 	.word	0xe000ed00

0800968c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009690:	2100      	movs	r1, #0
 8009692:	f06f 0004 	mvn.w	r0, #4
 8009696:	f7ff ffcf 	bl	8009638 <__NVIC_SetPriority>
#endif
}
 800969a:	bf00      	nop
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a6:	f3ef 8305 	mrs	r3, IPSR
 80096aa:	603b      	str	r3, [r7, #0]
  return(result);
 80096ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096b2:	f06f 0305 	mvn.w	r3, #5
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	e00c      	b.n	80096d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096ba:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <osKernelInitialize+0x44>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096c2:	4b08      	ldr	r3, [pc, #32]	@ (80096e4 <osKernelInitialize+0x44>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	e002      	b.n	80096d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096d4:	687b      	ldr	r3, [r7, #4]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	200024bc 	.word	0x200024bc

080096e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ee:	f3ef 8305 	mrs	r3, IPSR
 80096f2:	603b      	str	r3, [r7, #0]
  return(result);
 80096f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <osKernelStart+0x1a>
    stat = osErrorISR;
 80096fa:	f06f 0305 	mvn.w	r3, #5
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	e010      	b.n	8009724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009702:	4b0b      	ldr	r3, [pc, #44]	@ (8009730 <osKernelStart+0x48>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d109      	bne.n	800971e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800970a:	f7ff ffbf 	bl	800968c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800970e:	4b08      	ldr	r3, [pc, #32]	@ (8009730 <osKernelStart+0x48>)
 8009710:	2202      	movs	r2, #2
 8009712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009714:	f001 fc6e 	bl	800aff4 <vTaskStartScheduler>
      stat = osOK;
 8009718:	2300      	movs	r3, #0
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	e002      	b.n	8009724 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800971e:	f04f 33ff 	mov.w	r3, #4294967295
 8009722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009724:	687b      	ldr	r3, [r7, #4]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	200024bc 	.word	0x200024bc

08009734 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800973a:	f3ef 8305 	mrs	r3, IPSR
 800973e:	603b      	str	r3, [r7, #0]
  return(result);
 8009740:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009746:	f001 fd79 	bl	800b23c <xTaskGetTickCountFromISR>
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	e002      	b.n	8009754 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800974e:	f001 fd65 	bl	800b21c <xTaskGetTickCount>
 8009752:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009754:	687b      	ldr	r3, [r7, #4]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800975e:	b480      	push	{r7}
 8009760:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8009766:	4618      	mov	r0, r3
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009770:	b580      	push	{r7, lr}
 8009772:	b08e      	sub	sp, #56	@ 0x38
 8009774:	af04      	add	r7, sp, #16
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800977c:	2300      	movs	r3, #0
 800977e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009780:	f3ef 8305 	mrs	r3, IPSR
 8009784:	617b      	str	r3, [r7, #20]
  return(result);
 8009786:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009788:	2b00      	cmp	r3, #0
 800978a:	d17e      	bne.n	800988a <osThreadNew+0x11a>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d07b      	beq.n	800988a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009792:	2380      	movs	r3, #128	@ 0x80
 8009794:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009796:	2318      	movs	r3, #24
 8009798:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800979e:	f04f 33ff 	mov.w	r3, #4294967295
 80097a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d045      	beq.n	8009836 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <osThreadNew+0x48>
        name = attr->name;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d008      	beq.n	80097de <osThreadNew+0x6e>
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	2b38      	cmp	r3, #56	@ 0x38
 80097d0:	d805      	bhi.n	80097de <osThreadNew+0x6e>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <osThreadNew+0x72>
        return (NULL);
 80097de:	2300      	movs	r3, #0
 80097e0:	e054      	b.n	800988c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	089b      	lsrs	r3, r3, #2
 80097f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00e      	beq.n	8009818 <osThreadNew+0xa8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8009800:	d90a      	bls.n	8009818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009806:	2b00      	cmp	r3, #0
 8009808:	d006      	beq.n	8009818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <osThreadNew+0xa8>
        mem = 1;
 8009812:	2301      	movs	r3, #1
 8009814:	61bb      	str	r3, [r7, #24]
 8009816:	e010      	b.n	800983a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10c      	bne.n	800983a <osThreadNew+0xca>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d108      	bne.n	800983a <osThreadNew+0xca>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d104      	bne.n	800983a <osThreadNew+0xca>
          mem = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	e001      	b.n	800983a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d110      	bne.n	8009862 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009848:	9202      	str	r2, [sp, #8]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	6a3a      	ldr	r2, [r7, #32]
 8009854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f001 f970 	bl	800ab3c <xTaskCreateStatic>
 800985c:	4603      	mov	r3, r0
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	e013      	b.n	800988a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d110      	bne.n	800988a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	b29a      	uxth	r2, r3
 800986c:	f107 0310 	add.w	r3, r7, #16
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f001 f9be 	bl	800abfc <xTaskCreate>
 8009880:	4603      	mov	r3, r0
 8009882:	2b01      	cmp	r3, #1
 8009884:	d001      	beq.n	800988a <osThreadNew+0x11a>
            hTask = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800988a:	693b      	ldr	r3, [r7, #16]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	@ 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989c:	f3ef 8305 	mrs	r3, IPSR
 80098a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80098a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <osDelay+0x1c>
    stat = osErrorISR;
 80098a8:	f06f 0305 	mvn.w	r3, #5
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	e007      	b.n	80098c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fb64 	bl	800af88 <vTaskDelay>
    }
  }

  return (stat);
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b086      	sub	sp, #24
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d2:	f3ef 8305 	mrs	r3, IPSR
 80098d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80098d8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80098de:	f06f 0305 	mvn.w	r3, #5
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	e019      	b.n	800991a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80098ea:	f001 fc97 	bl	800b21c <xTaskGetTickCount>
 80098ee:	4603      	mov	r3, r0
 80098f0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d009      	beq.n	8009914 <osDelayUntil+0x4a>
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	db06      	blt.n	8009914 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009906:	f107 0308 	add.w	r3, r7, #8
 800990a:	6939      	ldr	r1, [r7, #16]
 800990c:	4618      	mov	r0, r3
 800990e:	f001 fabb 	bl	800ae88 <vTaskDelayUntil>
 8009912:	e002      	b.n	800991a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009914:	f06f 0303 	mvn.w	r3, #3
 8009918:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800991a:	697b      	ldr	r3, [r7, #20]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009930:	f3ef 8305 	mrs	r3, IPSR
 8009934:	60bb      	str	r3, [r7, #8]
  return(result);
 8009936:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009938:	2b00      	cmp	r3, #0
 800993a:	d174      	bne.n	8009a26 <osMutexNew+0x102>
    if (attr != NULL) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <osMutexNew+0x26>
      type = attr->attr_bits;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e001      	b.n	800994e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <osMutexNew+0x3a>
      rmtx = 1U;
 8009958:	2301      	movs	r3, #1
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e001      	b.n	8009962 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d15c      	bne.n	8009a26 <osMutexNew+0x102>
      mem = -1;
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d015      	beq.n	80099a4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <osMutexNew+0x6a>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	2b4f      	cmp	r3, #79	@ 0x4f
 8009986:	d902      	bls.n	800998e <osMutexNew+0x6a>
          mem = 1;
 8009988:	2301      	movs	r3, #1
 800998a:	613b      	str	r3, [r7, #16]
 800998c:	e00c      	b.n	80099a8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d108      	bne.n	80099a8 <osMutexNew+0x84>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <osMutexNew+0x84>
            mem = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	e001      	b.n	80099a8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d112      	bne.n	80099d4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	4619      	mov	r1, r3
 80099ba:	2004      	movs	r0, #4
 80099bc:	f000 fb1f 	bl	8009ffe <xQueueCreateMutexStatic>
 80099c0:	61f8      	str	r0, [r7, #28]
 80099c2:	e016      	b.n	80099f2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	4619      	mov	r1, r3
 80099ca:	2001      	movs	r0, #1
 80099cc:	f000 fb17 	bl	8009ffe <xQueueCreateMutexStatic>
 80099d0:	61f8      	str	r0, [r7, #28]
 80099d2:	e00e      	b.n	80099f2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80099e0:	2004      	movs	r0, #4
 80099e2:	f000 faf4 	bl	8009fce <xQueueCreateMutex>
 80099e6:	61f8      	str	r0, [r7, #28]
 80099e8:	e003      	b.n	80099f2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80099ea:	2001      	movs	r0, #1
 80099ec:	f000 faef 	bl	8009fce <xQueueCreateMutex>
 80099f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00c      	beq.n	8009a12 <osMutexNew+0xee>
        if (attr != NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <osMutexNew+0xe2>
          name = attr->name;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	e001      	b.n	8009a0a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	69f8      	ldr	r0, [r7, #28]
 8009a0e:	f001 f837 	bl	800aa80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d006      	beq.n	8009a26 <osMutexNew+0x102>
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	f043 0301 	orr.w	r3, r3, #1
 8009a24:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009a26:	69fb      	ldr	r3, [r7, #28]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f023 0301 	bic.w	r3, r3, #1
 8009a40:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a4e:	f3ef 8305 	mrs	r3, IPSR
 8009a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a54:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009a5a:	f06f 0305 	mvn.w	r3, #5
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	e02c      	b.n	8009abc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d103      	bne.n	8009a70 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009a68:	f06f 0303 	mvn.w	r3, #3
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	e025      	b.n	8009abc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d011      	beq.n	8009a9a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6938      	ldr	r0, [r7, #16]
 8009a7a:	f000 fb10 	bl	800a09e <xQueueTakeMutexRecursive>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d01b      	beq.n	8009abc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009a8a:	f06f 0301 	mvn.w	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e014      	b.n	8009abc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009a92:	f06f 0302 	mvn.w	r3, #2
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e010      	b.n	8009abc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6938      	ldr	r0, [r7, #16]
 8009a9e:	f000 fdb7 	bl	800a610 <xQueueSemaphoreTake>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d009      	beq.n	8009abc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009aae:	f06f 0301 	mvn.w	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e002      	b.n	8009abc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009ab6:	f06f 0302 	mvn.w	r3, #2
 8009aba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009abc:	697b      	ldr	r3, [r7, #20]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b086      	sub	sp, #24
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f023 0301 	bic.w	r3, r3, #1
 8009ad4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae2:	f3ef 8305 	mrs	r3, IPSR
 8009ae6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <osMutexRelease+0x30>
    stat = osErrorISR;
 8009aee:	f06f 0305 	mvn.w	r3, #5
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	e01f      	b.n	8009b36 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d103      	bne.n	8009b04 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009afc:	f06f 0303 	mvn.w	r3, #3
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e018      	b.n	8009b36 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009b0a:	6938      	ldr	r0, [r7, #16]
 8009b0c:	f000 fa92 	bl	800a034 <xQueueGiveMutexRecursive>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d00f      	beq.n	8009b36 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009b16:	f06f 0302 	mvn.w	r3, #2
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e00b      	b.n	8009b36 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2200      	movs	r2, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	6938      	ldr	r0, [r7, #16]
 8009b26:	f000 faf1 	bl	800a10c <xQueueGenericSend>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d002      	beq.n	8009b36 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009b30:	f06f 0302 	mvn.w	r3, #2
 8009b34:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009b36:	697b      	ldr	r3, [r7, #20]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4a07      	ldr	r2, [pc, #28]	@ (8009b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8009b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4a06      	ldr	r2, [pc, #24]	@ (8009b70 <vApplicationGetIdleTaskMemory+0x30>)
 8009b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2280      	movs	r2, #128	@ 0x80
 8009b5c:	601a      	str	r2, [r3, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	200024c0 	.word	0x200024c0
 8009b70:	2000251c 	.word	0x2000251c

08009b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4a07      	ldr	r2, [pc, #28]	@ (8009ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4a06      	ldr	r2, [pc, #24]	@ (8009ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8009b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b92:	601a      	str	r2, [r3, #0]
}
 8009b94:	bf00      	nop
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	2000271c 	.word	0x2000271c
 8009ba4:	20002778 	.word	0x20002778

08009ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f103 0208 	add.w	r2, r3, #8
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f103 0208 	add.w	r2, r3, #8
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f103 0208 	add.w	r2, r3, #8
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c02:	b480      	push	{r7}
 8009c04:	b085      	sub	sp, #20
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	601a      	str	r2, [r3, #0]
}
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b085      	sub	sp, #20
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c60:	d103      	bne.n	8009c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	e00c      	b.n	8009c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e002      	b.n	8009c78 <vListInsert+0x2e>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d2f6      	bcs.n	8009c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6892      	ldr	r2, [r2, #8]
 8009cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6852      	ldr	r2, [r2, #4]
 8009cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d103      	bne.n	8009cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	1e5a      	subs	r2, r3, #1
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	e7fd      	b.n	8009d38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d3c:	f002 fc34 	bl	800c5a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	441a      	add	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d72:	fb01 f303 	mul.w	r3, r1, r3
 8009d76:	441a      	add	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	22ff      	movs	r2, #255	@ 0xff
 8009d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	22ff      	movs	r2, #255	@ 0xff
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d114      	bne.n	8009dbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01a      	beq.n	8009dd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3310      	adds	r3, #16
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fbc8 	bl	800b534 <xTaskRemoveFromEventList>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d012      	beq.n	8009dd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009daa:	4b0d      	ldr	r3, [pc, #52]	@ (8009de0 <xQueueGenericReset+0xd0>)
 8009dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	e009      	b.n	8009dd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3310      	adds	r3, #16
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fef1 	bl	8009ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3324      	adds	r3, #36	@ 0x24
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff feec 	bl	8009ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dd0:	f002 fc1c 	bl	800c60c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dd4:	2301      	movs	r3, #1
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08e      	sub	sp, #56	@ 0x38
 8009de8:	af02      	add	r7, sp, #8
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10b      	bne.n	8009e10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e0a:	bf00      	nop
 8009e0c:	bf00      	nop
 8009e0e:	e7fd      	b.n	8009e0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10b      	bne.n	8009e2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e28:	bf00      	nop
 8009e2a:	bf00      	nop
 8009e2c:	e7fd      	b.n	8009e2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <xQueueGenericCreateStatic+0x56>
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <xQueueGenericCreateStatic+0x5a>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <xQueueGenericCreateStatic+0x5c>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10b      	bne.n	8009e5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	623b      	str	r3, [r7, #32]
}
 8009e56:	bf00      	nop
 8009e58:	bf00      	nop
 8009e5a:	e7fd      	b.n	8009e58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <xQueueGenericCreateStatic+0x84>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <xQueueGenericCreateStatic+0x88>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <xQueueGenericCreateStatic+0x8a>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10b      	bne.n	8009e8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	61fb      	str	r3, [r7, #28]
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	e7fd      	b.n	8009e86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e8a:	2350      	movs	r3, #80	@ 0x50
 8009e8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b50      	cmp	r3, #80	@ 0x50
 8009e92:	d00b      	beq.n	8009eac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	61bb      	str	r3, [r7, #24]
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009eac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00d      	beq.n	8009ed4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ec0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f840 	bl	8009f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3730      	adds	r7, #48	@ 0x30
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b08a      	sub	sp, #40	@ 0x28
 8009ee2:	af02      	add	r7, sp, #8
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10b      	bne.n	8009f0a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	613b      	str	r3, [r7, #16]
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	e7fd      	b.n	8009f06 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3350      	adds	r3, #80	@ 0x50
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 fc67 	bl	800c7ec <pvPortMalloc>
 8009f1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	3350      	adds	r3, #80	@ 0x50
 8009f2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f805 	bl	8009f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	601a      	str	r2, [r3, #0]
 8009f6e:	e002      	b.n	8009f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f82:	2101      	movs	r1, #1
 8009f84:	69b8      	ldr	r0, [r7, #24]
 8009f86:	f7ff fec3 	bl	8009d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00e      	beq.n	8009fc6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f8a3 	bl	800a10c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	617b      	str	r3, [r7, #20]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6939      	ldr	r1, [r7, #16]
 8009fe6:	6978      	ldr	r0, [r7, #20]
 8009fe8:	f7ff ff79 	bl	8009ede <xQueueGenericCreate>
 8009fec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff ffd3 	bl	8009f9a <prvInitialiseMutex>

		return xNewQueue;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b088      	sub	sp, #32
 800a002:	af02      	add	r7, sp, #8
 800a004:	4603      	mov	r3, r0
 800a006:	6039      	str	r1, [r7, #0]
 800a008:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a00a:	2301      	movs	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	2300      	movs	r3, #0
 800a010:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2200      	movs	r2, #0
 800a01a:	6939      	ldr	r1, [r7, #16]
 800a01c:	6978      	ldr	r0, [r7, #20]
 800a01e:	f7ff fee1 	bl	8009de4 <xQueueGenericCreateStatic>
 800a022:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff ffb8 	bl	8009f9a <prvInitialiseMutex>

		return xNewQueue;
 800a02a:	68fb      	ldr	r3, [r7, #12]
	}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a034:	b590      	push	{r4, r7, lr}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60fb      	str	r3, [r7, #12]
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	689c      	ldr	r4, [r3, #8]
 800a062:	f001 fc27 	bl	800b8b4 <xTaskGetCurrentTaskHandle>
 800a066:	4603      	mov	r3, r0
 800a068:	429c      	cmp	r4, r3
 800a06a:	d111      	bne.n	800a090 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	1e5a      	subs	r2, r3, #1
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d105      	bne.n	800a08a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a07e:	2300      	movs	r3, #0
 800a080:	2200      	movs	r2, #0
 800a082:	2100      	movs	r1, #0
 800a084:	6938      	ldr	r0, [r7, #16]
 800a086:	f000 f841 	bl	800a10c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a08a:	2301      	movs	r3, #1
 800a08c:	617b      	str	r3, [r7, #20]
 800a08e:	e001      	b.n	800a094 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a094:	697b      	ldr	r3, [r7, #20]
	}
 800a096:	4618      	mov	r0, r3
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd90      	pop	{r4, r7, pc}

0800a09e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a09e:	b590      	push	{r4, r7, lr}
 800a0a0:	b087      	sub	sp, #28
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60fb      	str	r3, [r7, #12]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	689c      	ldr	r4, [r3, #8]
 800a0ce:	f001 fbf1 	bl	800b8b4 <xTaskGetCurrentTaskHandle>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	d107      	bne.n	800a0e8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e00c      	b.n	800a102 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6938      	ldr	r0, [r7, #16]
 800a0ec:	f000 fa90 	bl	800a610 <xQueueSemaphoreTake>
 800a0f0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a102:	697b      	ldr	r3, [r7, #20]
	}
 800a104:	4618      	mov	r0, r3
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd90      	pop	{r4, r7, pc}

0800a10c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08e      	sub	sp, #56	@ 0x38
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a11a:	2300      	movs	r3, #0
 800a11c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueGenericSend+0x34>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d103      	bne.n	800a14e <xQueueGenericSend+0x42>
 800a146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <xQueueGenericSend+0x46>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <xQueueGenericSend+0x48>
 800a152:	2300      	movs	r3, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <xQueueGenericSend+0x64>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b02      	cmp	r3, #2
 800a174:	d103      	bne.n	800a17e <xQueueGenericSend+0x72>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <xQueueGenericSend+0x76>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueGenericSend+0x78>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xQueueGenericSend+0x94>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	623b      	str	r3, [r7, #32]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1a0:	f001 fb98 	bl	800b8d4 <xTaskGetSchedulerState>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d102      	bne.n	800a1b0 <xQueueGenericSend+0xa4>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <xQueueGenericSend+0xa8>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <xQueueGenericSend+0xaa>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10b      	bne.n	800a1d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	61fb      	str	r3, [r7, #28]
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	e7fd      	b.n	800a1ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1d2:	f002 f9e9 	bl	800c5a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d302      	bcc.n	800a1e8 <xQueueGenericSend+0xdc>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d129      	bne.n	800a23c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1ee:	f000 fb37 	bl	800a860 <prvCopyDataToQueue>
 800a1f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d010      	beq.n	800a21e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	3324      	adds	r3, #36	@ 0x24
 800a200:	4618      	mov	r0, r3
 800a202:	f001 f997 	bl	800b534 <xTaskRemoveFromEventList>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d013      	beq.n	800a234 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a20c:	4b3f      	ldr	r3, [pc, #252]	@ (800a30c <xQueueGenericSend+0x200>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	e00a      	b.n	800a234 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a224:	4b39      	ldr	r3, [pc, #228]	@ (800a30c <xQueueGenericSend+0x200>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a234:	f002 f9ea 	bl	800c60c <vPortExitCritical>
				return pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	e063      	b.n	800a304 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d103      	bne.n	800a24a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a242:	f002 f9e3 	bl	800c60c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a246:	2300      	movs	r3, #0
 800a248:	e05c      	b.n	800a304 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f9d1 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a25a:	2301      	movs	r3, #1
 800a25c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a25e:	f002 f9d5 	bl	800c60c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a262:	f000 ff2f 	bl	800b0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a266:	f002 f99f 	bl	800c5a8 <vPortEnterCritical>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a270:	b25b      	sxtb	r3, r3
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a276:	d103      	bne.n	800a280 <xQueueGenericSend+0x174>
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a286:	b25b      	sxtb	r3, r3
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d103      	bne.n	800a296 <xQueueGenericSend+0x18a>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a296:	f002 f9b9 	bl	800c60c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a29a:	1d3a      	adds	r2, r7, #4
 800a29c:	f107 0314 	add.w	r3, r7, #20
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 f9c0 	bl	800b628 <xTaskCheckForTimeOut>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d124      	bne.n	800a2f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b0:	f000 fbce 	bl	800aa50 <prvIsQueueFull>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d018      	beq.n	800a2ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	3310      	adds	r3, #16
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f001 f8e4 	bl	800b490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2ca:	f000 fb59 	bl	800a980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2ce:	f000 ff07 	bl	800b0e0 <xTaskResumeAll>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f47f af7c 	bne.w	800a1d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2da:	4b0c      	ldr	r3, [pc, #48]	@ (800a30c <xQueueGenericSend+0x200>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	e772      	b.n	800a1d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2ee:	f000 fb47 	bl	800a980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2f2:	f000 fef5 	bl	800b0e0 <xTaskResumeAll>
 800a2f6:	e76c      	b.n	800a1d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2fa:	f000 fb41 	bl	800a980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2fe:	f000 feef 	bl	800b0e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a304:	4618      	mov	r0, r3
 800a306:	3738      	adds	r7, #56	@ 0x38
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	e000ed04 	.word	0xe000ed04

0800a310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b090      	sub	sp, #64	@ 0x40
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10b      	bne.n	800a340 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	e7fd      	b.n	800a33c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d103      	bne.n	800a34e <xQueueGenericSendFromISR+0x3e>
 800a346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <xQueueGenericSendFromISR+0x42>
 800a34e:	2301      	movs	r3, #1
 800a350:	e000      	b.n	800a354 <xQueueGenericSendFromISR+0x44>
 800a352:	2300      	movs	r3, #0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10b      	bne.n	800a370 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a36a:	bf00      	nop
 800a36c:	bf00      	nop
 800a36e:	e7fd      	b.n	800a36c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d103      	bne.n	800a37e <xQueueGenericSendFromISR+0x6e>
 800a376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <xQueueGenericSendFromISR+0x72>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <xQueueGenericSendFromISR+0x74>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10b      	bne.n	800a3a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	623b      	str	r3, [r7, #32]
}
 800a39a:	bf00      	nop
 800a39c:	bf00      	nop
 800a39e:	e7fd      	b.n	800a39c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3a0:	f002 f9e2 	bl	800c768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3a4:	f3ef 8211 	mrs	r2, BASEPRI
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	61fa      	str	r2, [r7, #28]
 800a3ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d302      	bcc.n	800a3d2 <xQueueGenericSendFromISR+0xc2>
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d12f      	bne.n	800a432 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3e8:	f000 fa3a 	bl	800a860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f4:	d112      	bne.n	800a41c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d016      	beq.n	800a42c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	3324      	adds	r3, #36	@ 0x24
 800a402:	4618      	mov	r0, r3
 800a404:	f001 f896 	bl	800b534 <xTaskRemoveFromEventList>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00e      	beq.n	800a42c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00b      	beq.n	800a42c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	e007      	b.n	800a42c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a41c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a420:	3301      	adds	r3, #1
 800a422:	b2db      	uxtb	r3, r3
 800a424:	b25a      	sxtb	r2, r3
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a42c:	2301      	movs	r3, #1
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a430:	e001      	b.n	800a436 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a432:	2300      	movs	r3, #0
 800a434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a438:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a440:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a444:	4618      	mov	r0, r3
 800a446:	3740      	adds	r7, #64	@ 0x40
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08c      	sub	sp, #48	@ 0x30
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a458:	2300      	movs	r3, #0
 800a45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10b      	bne.n	800a47e <xQueueReceive+0x32>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	623b      	str	r3, [r7, #32]
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <xQueueReceive+0x40>
 800a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <xQueueReceive+0x44>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e000      	b.n	800a492 <xQueueReceive+0x46>
 800a490:	2300      	movs	r3, #0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10b      	bne.n	800a4ae <xQueueReceive+0x62>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	61fb      	str	r3, [r7, #28]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ae:	f001 fa11 	bl	800b8d4 <xTaskGetSchedulerState>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <xQueueReceive+0x72>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <xQueueReceive+0x76>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <xQueueReceive+0x78>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <xQueueReceive+0x94>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	61bb      	str	r3, [r7, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e0:	f002 f862 	bl	800c5a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01f      	beq.n	800a530 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4f4:	f000 fa1e 	bl	800a934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fa:	1e5a      	subs	r2, r3, #1
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00f      	beq.n	800a528 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	3310      	adds	r3, #16
 800a50c:	4618      	mov	r0, r3
 800a50e:	f001 f811 	bl	800b534 <xTaskRemoveFromEventList>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d007      	beq.n	800a528 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a518:	4b3c      	ldr	r3, [pc, #240]	@ (800a60c <xQueueReceive+0x1c0>)
 800a51a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a528:	f002 f870 	bl	800c60c <vPortExitCritical>
				return pdPASS;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e069      	b.n	800a604 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d103      	bne.n	800a53e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a536:	f002 f869 	bl	800c60c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e062      	b.n	800a604 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a544:	f107 0310 	add.w	r3, r7, #16
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 f857 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a54e:	2301      	movs	r3, #1
 800a550:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a552:	f002 f85b 	bl	800c60c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a556:	f000 fdb5 	bl	800b0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a55a:	f002 f825 	bl	800c5a8 <vPortEnterCritical>
 800a55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a564:	b25b      	sxtb	r3, r3
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d103      	bne.n	800a574 <xQueueReceive+0x128>
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a576:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d103      	bne.n	800a58a <xQueueReceive+0x13e>
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a58a:	f002 f83f 	bl	800c60c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a58e:	1d3a      	adds	r2, r7, #4
 800a590:	f107 0310 	add.w	r3, r7, #16
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f001 f846 	bl	800b628 <xTaskCheckForTimeOut>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d123      	bne.n	800a5ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5a4:	f000 fa3e 	bl	800aa24 <prvIsQueueEmpty>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d017      	beq.n	800a5de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	3324      	adds	r3, #36	@ 0x24
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 ff6a 	bl	800b490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5be:	f000 f9df 	bl	800a980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5c2:	f000 fd8d 	bl	800b0e0 <xTaskResumeAll>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d189      	bne.n	800a4e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a60c <xQueueReceive+0x1c0>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	e780      	b.n	800a4e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e0:	f000 f9ce 	bl	800a980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5e4:	f000 fd7c 	bl	800b0e0 <xTaskResumeAll>
 800a5e8:	e77a      	b.n	800a4e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ec:	f000 f9c8 	bl	800a980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f0:	f000 fd76 	bl	800b0e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f6:	f000 fa15 	bl	800aa24 <prvIsQueueEmpty>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f43f af6f 	beq.w	800a4e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a602:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a604:	4618      	mov	r0, r3
 800a606:	3730      	adds	r7, #48	@ 0x30
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	e000ed04 	.word	0xe000ed04

0800a610 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08e      	sub	sp, #56	@ 0x38
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a61a:	2300      	movs	r3, #0
 800a61c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10b      	bne.n	800a644 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	623b      	str	r3, [r7, #32]
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	e7fd      	b.n	800a640 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	61fb      	str	r3, [r7, #28]
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	e7fd      	b.n	800a660 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a664:	f001 f936 	bl	800b8d4 <xTaskGetSchedulerState>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <xQueueSemaphoreTake+0x64>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <xQueueSemaphoreTake+0x68>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <xQueueSemaphoreTake+0x6a>
 800a678:	2300      	movs	r3, #0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	61bb      	str	r3, [r7, #24]
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	e7fd      	b.n	800a692 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a696:	f001 ff87 	bl	800c5a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d024      	beq.n	800a6f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	1e5a      	subs	r2, r3, #1
 800a6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d104      	bne.n	800a6c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a6b6:	f001 fa87 	bl	800bbc8 <pvTaskIncrementMutexHeldCount>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00f      	beq.n	800a6e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	3310      	adds	r3, #16
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 ff31 	bl	800b534 <xTaskRemoveFromEventList>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d007      	beq.n	800a6e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6d8:	4b54      	ldr	r3, [pc, #336]	@ (800a82c <xQueueSemaphoreTake+0x21c>)
 800a6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6e8:	f001 ff90 	bl	800c60c <vPortExitCritical>
				return pdPASS;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e098      	b.n	800a822 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d112      	bne.n	800a71c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	617b      	str	r3, [r7, #20]
}
 800a70e:	bf00      	nop
 800a710:	bf00      	nop
 800a712:	e7fd      	b.n	800a710 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a714:	f001 ff7a 	bl	800c60c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a718:	2300      	movs	r3, #0
 800a71a:	e082      	b.n	800a822 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a722:	f107 030c 	add.w	r3, r7, #12
 800a726:	4618      	mov	r0, r3
 800a728:	f000 ff68 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a730:	f001 ff6c 	bl	800c60c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a734:	f000 fcc6 	bl	800b0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a738:	f001 ff36 	bl	800c5a8 <vPortEnterCritical>
 800a73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a742:	b25b      	sxtb	r3, r3
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a748:	d103      	bne.n	800a752 <xQueueSemaphoreTake+0x142>
 800a74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a754:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a758:	b25b      	sxtb	r3, r3
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75e:	d103      	bne.n	800a768 <xQueueSemaphoreTake+0x158>
 800a760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a768:	f001 ff50 	bl	800c60c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a76c:	463a      	mov	r2, r7
 800a76e:	f107 030c 	add.w	r3, r7, #12
 800a772:	4611      	mov	r1, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f000 ff57 	bl	800b628 <xTaskCheckForTimeOut>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d132      	bne.n	800a7e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a782:	f000 f94f 	bl	800aa24 <prvIsQueueEmpty>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d026      	beq.n	800a7da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d109      	bne.n	800a7a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a794:	f001 ff08 	bl	800c5a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f001 f8b7 	bl	800b910 <xTaskPriorityInherit>
 800a7a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a7a4:	f001 ff32 	bl	800c60c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7aa:	3324      	adds	r3, #36	@ 0x24
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 fe6d 	bl	800b490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7b8:	f000 f8e2 	bl	800a980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7bc:	f000 fc90 	bl	800b0e0 <xTaskResumeAll>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f47f af67 	bne.w	800a696 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a7c8:	4b18      	ldr	r3, [pc, #96]	@ (800a82c <xQueueSemaphoreTake+0x21c>)
 800a7ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	e75d      	b.n	800a696 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a7da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7dc:	f000 f8d0 	bl	800a980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7e0:	f000 fc7e 	bl	800b0e0 <xTaskResumeAll>
 800a7e4:	e757      	b.n	800a696 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a7e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7e8:	f000 f8ca 	bl	800a980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ec:	f000 fc78 	bl	800b0e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7f2:	f000 f917 	bl	800aa24 <prvIsQueueEmpty>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f43f af4c 	beq.w	800a696 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00d      	beq.n	800a820 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a804:	f001 fed0 	bl	800c5a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a808:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a80a:	f000 f811 	bl	800a830 <prvGetDisinheritPriorityAfterTimeout>
 800a80e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a816:	4618      	mov	r0, r3
 800a818:	f001 f952 	bl	800bac0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a81c:	f001 fef6 	bl	800c60c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a822:	4618      	mov	r0, r3
 800a824:	3738      	adds	r7, #56	@ 0x38
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	e000ed04 	.word	0xe000ed04

0800a830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d006      	beq.n	800a84e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e001      	b.n	800a852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a852:	68fb      	ldr	r3, [r7, #12]
	}
 800a854:	4618      	mov	r0, r3
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10d      	bne.n	800a89a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d14d      	bne.n	800a922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f001 f8a8 	bl	800b9e0 <xTaskPriorityDisinherit>
 800a890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	609a      	str	r2, [r3, #8]
 800a898:	e043      	b.n	800a922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d119      	bne.n	800a8d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6858      	ldr	r0, [r3, #4]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	f004 ff39 	bl	800f722 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b8:	441a      	add	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d32b      	bcc.n	800a922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	e026      	b.n	800a922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68d8      	ldr	r0, [r3, #12]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8dc:	461a      	mov	r2, r3
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	f004 ff1f 	bl	800f722 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	441a      	add	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d207      	bcs.n	800a910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a908:	425b      	negs	r3, r3
 800a90a:	441a      	add	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d105      	bne.n	800a922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3b01      	subs	r3, #1
 800a920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a92a:	697b      	ldr	r3, [r7, #20]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d018      	beq.n	800a978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94e:	441a      	add	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d303      	bcc.n	800a968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68d9      	ldr	r1, [r3, #12]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a970:	461a      	mov	r2, r3
 800a972:	6838      	ldr	r0, [r7, #0]
 800a974:	f004 fed5 	bl	800f722 <memcpy>
	}
}
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a988:	f001 fe0e 	bl	800c5a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a994:	e011      	b.n	800a9ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d012      	beq.n	800a9c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3324      	adds	r3, #36	@ 0x24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 fdc6 	bl	800b534 <xTaskRemoveFromEventList>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9ae:	f000 fe9f 	bl	800b6f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dce9      	bgt.n	800a996 <prvUnlockQueue+0x16>
 800a9c2:	e000      	b.n	800a9c6 <prvUnlockQueue+0x46>
					break;
 800a9c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	22ff      	movs	r2, #255	@ 0xff
 800a9ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a9ce:	f001 fe1d 	bl	800c60c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9d2:	f001 fde9 	bl	800c5a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9de:	e011      	b.n	800aa04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d012      	beq.n	800aa0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3310      	adds	r3, #16
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fda1 	bl	800b534 <xTaskRemoveFromEventList>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9f8:	f000 fe7a 	bl	800b6f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dce9      	bgt.n	800a9e0 <prvUnlockQueue+0x60>
 800aa0c:	e000      	b.n	800aa10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	22ff      	movs	r2, #255	@ 0xff
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa18:	f001 fdf8 	bl	800c60c <vPortExitCritical>
}
 800aa1c:	bf00      	nop
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa2c:	f001 fdbc 	bl	800c5a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	e001      	b.n	800aa42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa42:	f001 fde3 	bl	800c60c <vPortExitCritical>

	return xReturn;
 800aa46:	68fb      	ldr	r3, [r7, #12]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa58:	f001 fda6 	bl	800c5a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d102      	bne.n	800aa6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	e001      	b.n	800aa72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa72:	f001 fdcb 	bl	800c60c <vPortExitCritical>

	return xReturn;
 800aa76:	68fb      	ldr	r3, [r7, #12]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e014      	b.n	800aaba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa90:	4a0f      	ldr	r2, [pc, #60]	@ (800aad0 <vQueueAddToRegistry+0x50>)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10b      	bne.n	800aab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa9c:	490c      	ldr	r1, [pc, #48]	@ (800aad0 <vQueueAddToRegistry+0x50>)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aaa6:	4a0a      	ldr	r2, [pc, #40]	@ (800aad0 <vQueueAddToRegistry+0x50>)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	4413      	add	r3, r2
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aab2:	e006      	b.n	800aac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b07      	cmp	r3, #7
 800aabe:	d9e7      	bls.n	800aa90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20002b78 	.word	0x20002b78

0800aad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aae4:	f001 fd60 	bl	800c5a8 <vPortEnterCritical>
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaee:	b25b      	sxtb	r3, r3
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf4:	d103      	bne.n	800aafe <vQueueWaitForMessageRestricted+0x2a>
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab04:	b25b      	sxtb	r3, r3
 800ab06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0a:	d103      	bne.n	800ab14 <vQueueWaitForMessageRestricted+0x40>
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab14:	f001 fd7a 	bl	800c60c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	3324      	adds	r3, #36	@ 0x24
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fcd7 	bl	800b4dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab2e:	6978      	ldr	r0, [r7, #20]
 800ab30:	f7ff ff26 	bl	800a980 <prvUnlockQueue>
	}
 800ab34:	bf00      	nop
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08e      	sub	sp, #56	@ 0x38
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	623b      	str	r3, [r7, #32]
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	e7fd      	b.n	800ab64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	61fb      	str	r3, [r7, #28]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab86:	235c      	movs	r3, #92	@ 0x5c
 800ab88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab8e:	d00b      	beq.n	800aba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	61bb      	str	r3, [r7, #24]
}
 800aba2:	bf00      	nop
 800aba4:	bf00      	nop
 800aba6:	e7fd      	b.n	800aba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	2b00      	cmp	r3, #0
 800abae:	d01e      	beq.n	800abee <xTaskCreateStatic+0xb2>
 800abb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d01b      	beq.n	800abee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abc8:	2300      	movs	r3, #0
 800abca:	9303      	str	r3, [sp, #12]
 800abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	f107 0314 	add.w	r3, r7, #20
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 f850 	bl	800ac86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abe8:	f000 f8de 	bl	800ada8 <prvAddNewTaskToReadyList>
 800abec:	e001      	b.n	800abf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abf2:	697b      	ldr	r3, [r7, #20]
	}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3728      	adds	r7, #40	@ 0x28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08c      	sub	sp, #48	@ 0x30
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac0c:	88fb      	ldrh	r3, [r7, #6]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fdeb 	bl	800c7ec <pvPortMalloc>
 800ac16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00e      	beq.n	800ac3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac1e:	205c      	movs	r0, #92	@ 0x5c
 800ac20:	f001 fde4 	bl	800c7ec <pvPortMalloc>
 800ac24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac32:	e005      	b.n	800ac40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac34:	6978      	ldr	r0, [r7, #20]
 800ac36:	f001 fea7 	bl	800c988 <vPortFree>
 800ac3a:	e001      	b.n	800ac40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d017      	beq.n	800ac76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac4e:	88fa      	ldrh	r2, [r7, #6]
 800ac50:	2300      	movs	r3, #0
 800ac52:	9303      	str	r3, [sp, #12]
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	9302      	str	r3, [sp, #8]
 800ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	68b9      	ldr	r1, [r7, #8]
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 f80e 	bl	800ac86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac6a:	69f8      	ldr	r0, [r7, #28]
 800ac6c:	f000 f89c 	bl	800ada8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac70:	2301      	movs	r3, #1
 800ac72:	61bb      	str	r3, [r7, #24]
 800ac74:	e002      	b.n	800ac7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b088      	sub	sp, #32
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	60f8      	str	r0, [r7, #12]
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	21a5      	movs	r1, #165	@ 0xa5
 800aca0:	f003 fd48 	bl	800e734 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acae:	3b01      	subs	r3, #1
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	f023 0307 	bic.w	r3, r3, #7
 800acbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	f003 0307 	and.w	r3, r3, #7
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	617b      	str	r3, [r7, #20]
}
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	e7fd      	b.n	800acdc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01f      	beq.n	800ad26 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ace6:	2300      	movs	r3, #0
 800ace8:	61fb      	str	r3, [r7, #28]
 800acea:	e012      	b.n	800ad12 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	4413      	add	r3, r2
 800acf2:	7819      	ldrb	r1, [r3, #0]
 800acf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	3334      	adds	r3, #52	@ 0x34
 800acfc:	460a      	mov	r2, r1
 800acfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	4413      	add	r3, r2
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	61fb      	str	r3, [r7, #28]
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	2b0f      	cmp	r3, #15
 800ad16:	d9e9      	bls.n	800acec <prvInitialiseNewTask+0x66>
 800ad18:	e000      	b.n	800ad1c <prvInitialiseNewTask+0x96>
			{
				break;
 800ad1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad24:	e003      	b.n	800ad2e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad30:	2b37      	cmp	r3, #55	@ 0x37
 800ad32:	d901      	bls.n	800ad38 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad34:	2337      	movs	r3, #55	@ 0x37
 800ad36:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad42:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad46:	2200      	movs	r2, #0
 800ad48:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe ff4a 	bl	8009be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	3318      	adds	r3, #24
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe ff45 	bl	8009be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad72:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	2200      	movs	r2, #0
 800ad78:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	68f9      	ldr	r1, [r7, #12]
 800ad86:	69b8      	ldr	r0, [r7, #24]
 800ad88:	f001 fae0 	bl	800c34c <pxPortInitialiseStack>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad9e:	bf00      	nop
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adb0:	f001 fbfa 	bl	800c5a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adb4:	4b2d      	ldr	r3, [pc, #180]	@ (800ae6c <prvAddNewTaskToReadyList+0xc4>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3301      	adds	r3, #1
 800adba:	4a2c      	ldr	r2, [pc, #176]	@ (800ae6c <prvAddNewTaskToReadyList+0xc4>)
 800adbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adbe:	4b2c      	ldr	r3, [pc, #176]	@ (800ae70 <prvAddNewTaskToReadyList+0xc8>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adc6:	4a2a      	ldr	r2, [pc, #168]	@ (800ae70 <prvAddNewTaskToReadyList+0xc8>)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adcc:	4b27      	ldr	r3, [pc, #156]	@ (800ae6c <prvAddNewTaskToReadyList+0xc4>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d110      	bne.n	800adf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800add4:	f000 fcb0 	bl	800b738 <prvInitialiseTaskLists>
 800add8:	e00d      	b.n	800adf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adda:	4b26      	ldr	r3, [pc, #152]	@ (800ae74 <prvAddNewTaskToReadyList+0xcc>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ade2:	4b23      	ldr	r3, [pc, #140]	@ (800ae70 <prvAddNewTaskToReadyList+0xc8>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adec:	429a      	cmp	r2, r3
 800adee:	d802      	bhi.n	800adf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adf0:	4a1f      	ldr	r2, [pc, #124]	@ (800ae70 <prvAddNewTaskToReadyList+0xc8>)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adf6:	4b20      	ldr	r3, [pc, #128]	@ (800ae78 <prvAddNewTaskToReadyList+0xd0>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	4a1e      	ldr	r2, [pc, #120]	@ (800ae78 <prvAddNewTaskToReadyList+0xd0>)
 800adfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae00:	4b1d      	ldr	r3, [pc, #116]	@ (800ae78 <prvAddNewTaskToReadyList+0xd0>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ae7c <prvAddNewTaskToReadyList+0xd4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d903      	bls.n	800ae1c <prvAddNewTaskToReadyList+0x74>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae18:	4a18      	ldr	r2, [pc, #96]	@ (800ae7c <prvAddNewTaskToReadyList+0xd4>)
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4a15      	ldr	r2, [pc, #84]	@ (800ae80 <prvAddNewTaskToReadyList+0xd8>)
 800ae2a:	441a      	add	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fe fee5 	bl	8009c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae38:	f001 fbe8 	bl	800c60c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae74 <prvAddNewTaskToReadyList+0xcc>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00e      	beq.n	800ae62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae44:	4b0a      	ldr	r3, [pc, #40]	@ (800ae70 <prvAddNewTaskToReadyList+0xc8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d207      	bcs.n	800ae62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae52:	4b0c      	ldr	r3, [pc, #48]	@ (800ae84 <prvAddNewTaskToReadyList+0xdc>)
 800ae54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	2000308c 	.word	0x2000308c
 800ae70:	20002bb8 	.word	0x20002bb8
 800ae74:	20003098 	.word	0x20003098
 800ae78:	200030a8 	.word	0x200030a8
 800ae7c:	20003094 	.word	0x20003094
 800ae80:	20002bbc 	.word	0x20002bbc
 800ae84:	e000ed04 	.word	0xe000ed04

0800ae88 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	@ 0x28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10b      	bne.n	800aeb4 <vTaskDelayUntil+0x2c>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	617b      	str	r3, [r7, #20]
}
 800aeae:	bf00      	nop
 800aeb0:	bf00      	nop
 800aeb2:	e7fd      	b.n	800aeb0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10b      	bne.n	800aed2 <vTaskDelayUntil+0x4a>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	613b      	str	r3, [r7, #16]
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	e7fd      	b.n	800aece <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800aed2:	4b2a      	ldr	r3, [pc, #168]	@ (800af7c <vTaskDelayUntil+0xf4>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00b      	beq.n	800aef2 <vTaskDelayUntil+0x6a>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	60fb      	str	r3, [r7, #12]
}
 800aeec:	bf00      	nop
 800aeee:	bf00      	nop
 800aef0:	e7fd      	b.n	800aeee <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800aef2:	f000 f8e7 	bl	800b0c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800aef6:	4b22      	ldr	r3, [pc, #136]	@ (800af80 <vTaskDelayUntil+0xf8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	4413      	add	r3, r2
 800af04:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6a3a      	ldr	r2, [r7, #32]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d20b      	bcs.n	800af28 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	69fa      	ldr	r2, [r7, #28]
 800af16:	429a      	cmp	r2, r3
 800af18:	d211      	bcs.n	800af3e <vTaskDelayUntil+0xb6>
 800af1a:	69fa      	ldr	r2, [r7, #28]
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d90d      	bls.n	800af3e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af22:	2301      	movs	r3, #1
 800af24:	627b      	str	r3, [r7, #36]	@ 0x24
 800af26:	e00a      	b.n	800af3e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d303      	bcc.n	800af3a <vTaskDelayUntil+0xb2>
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	429a      	cmp	r2, r3
 800af38:	d901      	bls.n	800af3e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800af3a:	2301      	movs	r3, #1
 800af3c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69fa      	ldr	r2, [r7, #28]
 800af42:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	d006      	beq.n	800af58 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fe4c 	bl	800bbf0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800af58:	f000 f8c2 	bl	800b0e0 <xTaskResumeAll>
 800af5c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d107      	bne.n	800af74 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800af64:	4b07      	ldr	r3, [pc, #28]	@ (800af84 <vTaskDelayUntil+0xfc>)
 800af66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af74:	bf00      	nop
 800af76:	3728      	adds	r7, #40	@ 0x28
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	200030b4 	.word	0x200030b4
 800af80:	20003090 	.word	0x20003090
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d018      	beq.n	800afcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af9a:	4b14      	ldr	r3, [pc, #80]	@ (800afec <vTaskDelay+0x64>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00b      	beq.n	800afba <vTaskDelay+0x32>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	60bb      	str	r3, [r7, #8]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afba:	f000 f883 	bl	800b0c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afbe:	2100      	movs	r1, #0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fe15 	bl	800bbf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afc6:	f000 f88b 	bl	800b0e0 <xTaskResumeAll>
 800afca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800afd2:	4b07      	ldr	r3, [pc, #28]	@ (800aff0 <vTaskDelay+0x68>)
 800afd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afe2:	bf00      	nop
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	200030b4 	.word	0x200030b4
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	@ 0x28
 800aff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b002:	463a      	mov	r2, r7
 800b004:	1d39      	adds	r1, r7, #4
 800b006:	f107 0308 	add.w	r3, r7, #8
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fd98 	bl	8009b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	9202      	str	r2, [sp, #8]
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	2300      	movs	r3, #0
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	2300      	movs	r3, #0
 800b020:	460a      	mov	r2, r1
 800b022:	4922      	ldr	r1, [pc, #136]	@ (800b0ac <vTaskStartScheduler+0xb8>)
 800b024:	4822      	ldr	r0, [pc, #136]	@ (800b0b0 <vTaskStartScheduler+0xbc>)
 800b026:	f7ff fd89 	bl	800ab3c <xTaskCreateStatic>
 800b02a:	4603      	mov	r3, r0
 800b02c:	4a21      	ldr	r2, [pc, #132]	@ (800b0b4 <vTaskStartScheduler+0xc0>)
 800b02e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b030:	4b20      	ldr	r3, [pc, #128]	@ (800b0b4 <vTaskStartScheduler+0xc0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b038:	2301      	movs	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e001      	b.n	800b042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d102      	bne.n	800b04e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b048:	f000 fe26 	bl	800bc98 <xTimerCreateTimerTask>
 800b04c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d116      	bne.n	800b082 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	613b      	str	r3, [r7, #16]
}
 800b066:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b068:	4b13      	ldr	r3, [pc, #76]	@ (800b0b8 <vTaskStartScheduler+0xc4>)
 800b06a:	f04f 32ff 	mov.w	r2, #4294967295
 800b06e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b070:	4b12      	ldr	r3, [pc, #72]	@ (800b0bc <vTaskStartScheduler+0xc8>)
 800b072:	2201      	movs	r2, #1
 800b074:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b076:	4b12      	ldr	r3, [pc, #72]	@ (800b0c0 <vTaskStartScheduler+0xcc>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b07c:	f001 f9f0 	bl	800c460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b080:	e00f      	b.n	800b0a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b088:	d10b      	bne.n	800b0a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	60fb      	str	r3, [r7, #12]
}
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	e7fd      	b.n	800b09e <vTaskStartScheduler+0xaa>
}
 800b0a2:	bf00      	nop
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	080133f8 	.word	0x080133f8
 800b0b0:	0800b709 	.word	0x0800b709
 800b0b4:	200030b0 	.word	0x200030b0
 800b0b8:	200030ac 	.word	0x200030ac
 800b0bc:	20003098 	.word	0x20003098
 800b0c0:	20003090 	.word	0x20003090

0800b0c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0c8:	4b04      	ldr	r3, [pc, #16]	@ (800b0dc <vTaskSuspendAll+0x18>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	4a03      	ldr	r2, [pc, #12]	@ (800b0dc <vTaskSuspendAll+0x18>)
 800b0d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	200030b4 	.word	0x200030b4

0800b0e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0ee:	4b42      	ldr	r3, [pc, #264]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10b      	bne.n	800b10e <xTaskResumeAll+0x2e>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	603b      	str	r3, [r7, #0]
}
 800b108:	bf00      	nop
 800b10a:	bf00      	nop
 800b10c:	e7fd      	b.n	800b10a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b10e:	f001 fa4b 	bl	800c5a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b112:	4b39      	ldr	r3, [pc, #228]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3b01      	subs	r3, #1
 800b118:	4a37      	ldr	r2, [pc, #220]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b11a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b11c:	4b36      	ldr	r3, [pc, #216]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d162      	bne.n	800b1ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b124:	4b35      	ldr	r3, [pc, #212]	@ (800b1fc <xTaskResumeAll+0x11c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d05e      	beq.n	800b1ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b12c:	e02f      	b.n	800b18e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12e:	4b34      	ldr	r3, [pc, #208]	@ (800b200 <xTaskResumeAll+0x120>)
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3318      	adds	r3, #24
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fe fdbe 	bl	8009cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3304      	adds	r3, #4
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe fdb9 	bl	8009cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b14e:	4b2d      	ldr	r3, [pc, #180]	@ (800b204 <xTaskResumeAll+0x124>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	429a      	cmp	r2, r3
 800b154:	d903      	bls.n	800b15e <xTaskResumeAll+0x7e>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15a:	4a2a      	ldr	r2, [pc, #168]	@ (800b204 <xTaskResumeAll+0x124>)
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4a27      	ldr	r2, [pc, #156]	@ (800b208 <xTaskResumeAll+0x128>)
 800b16c:	441a      	add	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3304      	adds	r3, #4
 800b172:	4619      	mov	r1, r3
 800b174:	4610      	mov	r0, r2
 800b176:	f7fe fd44 	bl	8009c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b17e:	4b23      	ldr	r3, [pc, #140]	@ (800b20c <xTaskResumeAll+0x12c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d302      	bcc.n	800b18e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b188:	4b21      	ldr	r3, [pc, #132]	@ (800b210 <xTaskResumeAll+0x130>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b18e:	4b1c      	ldr	r3, [pc, #112]	@ (800b200 <xTaskResumeAll+0x120>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1cb      	bne.n	800b12e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b19c:	f000 fb6a 	bl	800b874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <xTaskResumeAll+0x134>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d010      	beq.n	800b1ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1ac:	f000 f858 	bl	800b260 <xTaskIncrementTick>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b1b6:	4b16      	ldr	r3, [pc, #88]	@ (800b210 <xTaskResumeAll+0x130>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f1      	bne.n	800b1ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b1c8:	4b12      	ldr	r3, [pc, #72]	@ (800b214 <xTaskResumeAll+0x134>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1ce:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <xTaskResumeAll+0x130>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d009      	beq.n	800b1ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1da:	4b0f      	ldr	r3, [pc, #60]	@ (800b218 <xTaskResumeAll+0x138>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1ea:	f001 fa0f 	bl	800c60c <vPortExitCritical>

	return xAlreadyYielded;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	200030b4 	.word	0x200030b4
 800b1fc:	2000308c 	.word	0x2000308c
 800b200:	2000304c 	.word	0x2000304c
 800b204:	20003094 	.word	0x20003094
 800b208:	20002bbc 	.word	0x20002bbc
 800b20c:	20002bb8 	.word	0x20002bb8
 800b210:	200030a0 	.word	0x200030a0
 800b214:	2000309c 	.word	0x2000309c
 800b218:	e000ed04 	.word	0xe000ed04

0800b21c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b222:	4b05      	ldr	r3, [pc, #20]	@ (800b238 <xTaskGetTickCount+0x1c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b228:	687b      	ldr	r3, [r7, #4]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	20003090 	.word	0x20003090

0800b23c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b242:	f001 fa91 	bl	800c768 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b246:	2300      	movs	r3, #0
 800b248:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b24a:	4b04      	ldr	r3, [pc, #16]	@ (800b25c <xTaskGetTickCountFromISR+0x20>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b250:	683b      	ldr	r3, [r7, #0]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20003090 	.word	0x20003090

0800b260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b26a:	4b4f      	ldr	r3, [pc, #316]	@ (800b3a8 <xTaskIncrementTick+0x148>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f040 8090 	bne.w	800b394 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b274:	4b4d      	ldr	r3, [pc, #308]	@ (800b3ac <xTaskIncrementTick+0x14c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3301      	adds	r3, #1
 800b27a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b27c:	4a4b      	ldr	r2, [pc, #300]	@ (800b3ac <xTaskIncrementTick+0x14c>)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d121      	bne.n	800b2cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b288:	4b49      	ldr	r3, [pc, #292]	@ (800b3b0 <xTaskIncrementTick+0x150>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00b      	beq.n	800b2aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	603b      	str	r3, [r7, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop
 800b2a8:	e7fd      	b.n	800b2a6 <xTaskIncrementTick+0x46>
 800b2aa:	4b41      	ldr	r3, [pc, #260]	@ (800b3b0 <xTaskIncrementTick+0x150>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	4b40      	ldr	r3, [pc, #256]	@ (800b3b4 <xTaskIncrementTick+0x154>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b3b0 <xTaskIncrementTick+0x150>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	4a3e      	ldr	r2, [pc, #248]	@ (800b3b4 <xTaskIncrementTick+0x154>)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	4b3e      	ldr	r3, [pc, #248]	@ (800b3b8 <xTaskIncrementTick+0x158>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	4a3c      	ldr	r2, [pc, #240]	@ (800b3b8 <xTaskIncrementTick+0x158>)
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	f000 fad4 	bl	800b874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b3bc <xTaskIncrementTick+0x15c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d349      	bcc.n	800b36a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2d6:	4b36      	ldr	r3, [pc, #216]	@ (800b3b0 <xTaskIncrementTick+0x150>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d104      	bne.n	800b2ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e0:	4b36      	ldr	r3, [pc, #216]	@ (800b3bc <xTaskIncrementTick+0x15c>)
 800b2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e6:	601a      	str	r2, [r3, #0]
					break;
 800b2e8:	e03f      	b.n	800b36a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ea:	4b31      	ldr	r3, [pc, #196]	@ (800b3b0 <xTaskIncrementTick+0x150>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d203      	bcs.n	800b30a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b302:	4a2e      	ldr	r2, [pc, #184]	@ (800b3bc <xTaskIncrementTick+0x15c>)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b308:	e02f      	b.n	800b36a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	3304      	adds	r3, #4
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fcd4 	bl	8009cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d004      	beq.n	800b326 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	3318      	adds	r3, #24
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe fccb 	bl	8009cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32a:	4b25      	ldr	r3, [pc, #148]	@ (800b3c0 <xTaskIncrementTick+0x160>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d903      	bls.n	800b33a <xTaskIncrementTick+0xda>
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b336:	4a22      	ldr	r2, [pc, #136]	@ (800b3c0 <xTaskIncrementTick+0x160>)
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4a1f      	ldr	r2, [pc, #124]	@ (800b3c4 <xTaskIncrementTick+0x164>)
 800b348:	441a      	add	r2, r3
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	3304      	adds	r3, #4
 800b34e:	4619      	mov	r1, r3
 800b350:	4610      	mov	r0, r2
 800b352:	f7fe fc56 	bl	8009c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b35a:	4b1b      	ldr	r3, [pc, #108]	@ (800b3c8 <xTaskIncrementTick+0x168>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b360:	429a      	cmp	r2, r3
 800b362:	d3b8      	bcc.n	800b2d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b368:	e7b5      	b.n	800b2d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b36a:	4b17      	ldr	r3, [pc, #92]	@ (800b3c8 <xTaskIncrementTick+0x168>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b370:	4914      	ldr	r1, [pc, #80]	@ (800b3c4 <xTaskIncrementTick+0x164>)
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	440b      	add	r3, r1
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d901      	bls.n	800b386 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b382:	2301      	movs	r3, #1
 800b384:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b386:	4b11      	ldr	r3, [pc, #68]	@ (800b3cc <xTaskIncrementTick+0x16c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d007      	beq.n	800b39e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b38e:	2301      	movs	r3, #1
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	e004      	b.n	800b39e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b394:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d0 <xTaskIncrementTick+0x170>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a0d      	ldr	r2, [pc, #52]	@ (800b3d0 <xTaskIncrementTick+0x170>)
 800b39c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b39e:	697b      	ldr	r3, [r7, #20]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	200030b4 	.word	0x200030b4
 800b3ac:	20003090 	.word	0x20003090
 800b3b0:	20003044 	.word	0x20003044
 800b3b4:	20003048 	.word	0x20003048
 800b3b8:	200030a4 	.word	0x200030a4
 800b3bc:	200030ac 	.word	0x200030ac
 800b3c0:	20003094 	.word	0x20003094
 800b3c4:	20002bbc 	.word	0x20002bbc
 800b3c8:	20002bb8 	.word	0x20002bb8
 800b3cc:	200030a0 	.word	0x200030a0
 800b3d0:	2000309c 	.word	0x2000309c

0800b3d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3da:	4b28      	ldr	r3, [pc, #160]	@ (800b47c <vTaskSwitchContext+0xa8>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3e2:	4b27      	ldr	r3, [pc, #156]	@ (800b480 <vTaskSwitchContext+0xac>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3e8:	e042      	b.n	800b470 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b3ea:	4b25      	ldr	r3, [pc, #148]	@ (800b480 <vTaskSwitchContext+0xac>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f0:	4b24      	ldr	r3, [pc, #144]	@ (800b484 <vTaskSwitchContext+0xb0>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	e011      	b.n	800b41c <vTaskSwitchContext+0x48>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10b      	bne.n	800b416 <vTaskSwitchContext+0x42>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	607b      	str	r3, [r7, #4]
}
 800b410:	bf00      	nop
 800b412:	bf00      	nop
 800b414:	e7fd      	b.n	800b412 <vTaskSwitchContext+0x3e>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3b01      	subs	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	491a      	ldr	r1, [pc, #104]	@ (800b488 <vTaskSwitchContext+0xb4>)
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d0e3      	beq.n	800b3f8 <vTaskSwitchContext+0x24>
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4a13      	ldr	r2, [pc, #76]	@ (800b488 <vTaskSwitchContext+0xb4>)
 800b43c:	4413      	add	r3, r2
 800b43e:	60bb      	str	r3, [r7, #8]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	605a      	str	r2, [r3, #4]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	3308      	adds	r3, #8
 800b452:	429a      	cmp	r2, r3
 800b454:	d104      	bne.n	800b460 <vTaskSwitchContext+0x8c>
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	605a      	str	r2, [r3, #4]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	4a09      	ldr	r2, [pc, #36]	@ (800b48c <vTaskSwitchContext+0xb8>)
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	4a06      	ldr	r2, [pc, #24]	@ (800b484 <vTaskSwitchContext+0xb0>)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6013      	str	r3, [r2, #0]
}
 800b470:	bf00      	nop
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	200030b4 	.word	0x200030b4
 800b480:	200030a0 	.word	0x200030a0
 800b484:	20003094 	.word	0x20003094
 800b488:	20002bbc 	.word	0x20002bbc
 800b48c:	20002bb8 	.word	0x20002bb8

0800b490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10b      	bne.n	800b4b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	60fb      	str	r3, [r7, #12]
}
 800b4b2:	bf00      	nop
 800b4b4:	bf00      	nop
 800b4b6:	e7fd      	b.n	800b4b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4b8:	4b07      	ldr	r3, [pc, #28]	@ (800b4d8 <vTaskPlaceOnEventList+0x48>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3318      	adds	r3, #24
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7fe fbc2 	bl	8009c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	6838      	ldr	r0, [r7, #0]
 800b4ca:	f000 fb91 	bl	800bbf0 <prvAddCurrentTaskToDelayedList>
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20002bb8 	.word	0x20002bb8

0800b4dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10b      	bne.n	800b506 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	617b      	str	r3, [r7, #20]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b506:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <vTaskPlaceOnEventListRestricted+0x54>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3318      	adds	r3, #24
 800b50c:	4619      	mov	r1, r3
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7fe fb77 	bl	8009c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295
 800b51e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b520:	6879      	ldr	r1, [r7, #4]
 800b522:	68b8      	ldr	r0, [r7, #8]
 800b524:	f000 fb64 	bl	800bbf0 <prvAddCurrentTaskToDelayedList>
	}
 800b528:	bf00      	nop
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20002bb8 	.word	0x20002bb8

0800b534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10b      	bne.n	800b562 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60fb      	str	r3, [r7, #12]
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	e7fd      	b.n	800b55e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	3318      	adds	r3, #24
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe fba8 	bl	8009cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b56c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e4 <xTaskRemoveFromEventList+0xb0>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d11d      	bne.n	800b5b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	3304      	adds	r3, #4
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe fb9f 	bl	8009cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b582:	4b19      	ldr	r3, [pc, #100]	@ (800b5e8 <xTaskRemoveFromEventList+0xb4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d903      	bls.n	800b592 <xTaskRemoveFromEventList+0x5e>
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58e:	4a16      	ldr	r2, [pc, #88]	@ (800b5e8 <xTaskRemoveFromEventList+0xb4>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4a13      	ldr	r2, [pc, #76]	@ (800b5ec <xTaskRemoveFromEventList+0xb8>)
 800b5a0:	441a      	add	r2, r3
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f7fe fb2a 	bl	8009c02 <vListInsertEnd>
 800b5ae:	e005      	b.n	800b5bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	480e      	ldr	r0, [pc, #56]	@ (800b5f0 <xTaskRemoveFromEventList+0xbc>)
 800b5b8:	f7fe fb23 	bl	8009c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f4 <xTaskRemoveFromEventList+0xc0>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d905      	bls.n	800b5d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f8 <xTaskRemoveFromEventList+0xc4>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	e001      	b.n	800b5da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5da:	697b      	ldr	r3, [r7, #20]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	200030b4 	.word	0x200030b4
 800b5e8:	20003094 	.word	0x20003094
 800b5ec:	20002bbc 	.word	0x20002bbc
 800b5f0:	2000304c 	.word	0x2000304c
 800b5f4:	20002bb8 	.word	0x20002bb8
 800b5f8:	200030a0 	.word	0x200030a0

0800b5fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b604:	4b06      	ldr	r3, [pc, #24]	@ (800b620 <vTaskInternalSetTimeOutState+0x24>)
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b60c:	4b05      	ldr	r3, [pc, #20]	@ (800b624 <vTaskInternalSetTimeOutState+0x28>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	605a      	str	r2, [r3, #4]
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	200030a4 	.word	0x200030a4
 800b624:	20003090 	.word	0x20003090

0800b628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10b      	bne.n	800b650 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	613b      	str	r3, [r7, #16]
}
 800b64a:	bf00      	nop
 800b64c:	bf00      	nop
 800b64e:	e7fd      	b.n	800b64c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10b      	bne.n	800b66e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	60fb      	str	r3, [r7, #12]
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e7fd      	b.n	800b66a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b66e:	f000 ff9b 	bl	800c5a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b672:	4b1d      	ldr	r3, [pc, #116]	@ (800b6e8 <xTaskCheckForTimeOut+0xc0>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68a:	d102      	bne.n	800b692 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b68c:	2300      	movs	r3, #0
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	e023      	b.n	800b6da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b15      	ldr	r3, [pc, #84]	@ (800b6ec <xTaskCheckForTimeOut+0xc4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d007      	beq.n	800b6ae <xTaskCheckForTimeOut+0x86>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	69ba      	ldr	r2, [r7, #24]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d302      	bcc.n	800b6ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	61fb      	str	r3, [r7, #28]
 800b6ac:	e015      	b.n	800b6da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d20b      	bcs.n	800b6d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	1ad2      	subs	r2, r2, r3
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff ff99 	bl	800b5fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	61fb      	str	r3, [r7, #28]
 800b6ce:	e004      	b.n	800b6da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6da:	f000 ff97 	bl	800c60c <vPortExitCritical>

	return xReturn;
 800b6de:	69fb      	ldr	r3, [r7, #28]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20003090 	.word	0x20003090
 800b6ec:	200030a4 	.word	0x200030a4

0800b6f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6f4:	4b03      	ldr	r3, [pc, #12]	@ (800b704 <vTaskMissedYield+0x14>)
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	200030a0 	.word	0x200030a0

0800b708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b710:	f000 f852 	bl	800b7b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b714:	4b06      	ldr	r3, [pc, #24]	@ (800b730 <prvIdleTask+0x28>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d9f9      	bls.n	800b710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b71c:	4b05      	ldr	r3, [pc, #20]	@ (800b734 <prvIdleTask+0x2c>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b72c:	e7f0      	b.n	800b710 <prvIdleTask+0x8>
 800b72e:	bf00      	nop
 800b730:	20002bbc 	.word	0x20002bbc
 800b734:	e000ed04 	.word	0xe000ed04

0800b738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b73e:	2300      	movs	r3, #0
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	e00c      	b.n	800b75e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	4613      	mov	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4a12      	ldr	r2, [pc, #72]	@ (800b798 <prvInitialiseTaskLists+0x60>)
 800b750:	4413      	add	r3, r2
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe fa28 	bl	8009ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3301      	adds	r3, #1
 800b75c:	607b      	str	r3, [r7, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b37      	cmp	r3, #55	@ 0x37
 800b762:	d9ef      	bls.n	800b744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b764:	480d      	ldr	r0, [pc, #52]	@ (800b79c <prvInitialiseTaskLists+0x64>)
 800b766:	f7fe fa1f 	bl	8009ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b76a:	480d      	ldr	r0, [pc, #52]	@ (800b7a0 <prvInitialiseTaskLists+0x68>)
 800b76c:	f7fe fa1c 	bl	8009ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b770:	480c      	ldr	r0, [pc, #48]	@ (800b7a4 <prvInitialiseTaskLists+0x6c>)
 800b772:	f7fe fa19 	bl	8009ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b776:	480c      	ldr	r0, [pc, #48]	@ (800b7a8 <prvInitialiseTaskLists+0x70>)
 800b778:	f7fe fa16 	bl	8009ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b77c:	480b      	ldr	r0, [pc, #44]	@ (800b7ac <prvInitialiseTaskLists+0x74>)
 800b77e:	f7fe fa13 	bl	8009ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b782:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <prvInitialiseTaskLists+0x78>)
 800b784:	4a05      	ldr	r2, [pc, #20]	@ (800b79c <prvInitialiseTaskLists+0x64>)
 800b786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b788:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <prvInitialiseTaskLists+0x7c>)
 800b78a:	4a05      	ldr	r2, [pc, #20]	@ (800b7a0 <prvInitialiseTaskLists+0x68>)
 800b78c:	601a      	str	r2, [r3, #0]
}
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20002bbc 	.word	0x20002bbc
 800b79c:	2000301c 	.word	0x2000301c
 800b7a0:	20003030 	.word	0x20003030
 800b7a4:	2000304c 	.word	0x2000304c
 800b7a8:	20003060 	.word	0x20003060
 800b7ac:	20003078 	.word	0x20003078
 800b7b0:	20003044 	.word	0x20003044
 800b7b4:	20003048 	.word	0x20003048

0800b7b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7be:	e019      	b.n	800b7f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7c0:	f000 fef2 	bl	800c5a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c4:	4b10      	ldr	r3, [pc, #64]	@ (800b808 <prvCheckTasksWaitingTermination+0x50>)
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fa73 	bl	8009cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b80c <prvCheckTasksWaitingTermination+0x54>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	4a0b      	ldr	r2, [pc, #44]	@ (800b80c <prvCheckTasksWaitingTermination+0x54>)
 800b7de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b810 <prvCheckTasksWaitingTermination+0x58>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	4a0a      	ldr	r2, [pc, #40]	@ (800b810 <prvCheckTasksWaitingTermination+0x58>)
 800b7e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7ea:	f000 ff0f 	bl	800c60c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f810 	bl	800b814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f4:	4b06      	ldr	r3, [pc, #24]	@ (800b810 <prvCheckTasksWaitingTermination+0x58>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e1      	bne.n	800b7c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7fc:	bf00      	nop
 800b7fe:	bf00      	nop
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20003060 	.word	0x20003060
 800b80c:	2000308c 	.word	0x2000308c
 800b810:	20003074 	.word	0x20003074

0800b814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b822:	2b00      	cmp	r3, #0
 800b824:	d108      	bne.n	800b838 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 f8ac 	bl	800c988 <vPortFree>
				vPortFree( pxTCB );
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f001 f8a9 	bl	800c988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b836:	e019      	b.n	800b86c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d103      	bne.n	800b84a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 f8a0 	bl	800c988 <vPortFree>
	}
 800b848:	e010      	b.n	800b86c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b850:	2b02      	cmp	r3, #2
 800b852:	d00b      	beq.n	800b86c <prvDeleteTCB+0x58>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	60fb      	str	r3, [r7, #12]
}
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	e7fd      	b.n	800b868 <prvDeleteTCB+0x54>
	}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b87a:	4b0c      	ldr	r3, [pc, #48]	@ (800b8ac <prvResetNextTaskUnblockTime+0x38>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d104      	bne.n	800b88e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b884:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b886:	f04f 32ff 	mov.w	r2, #4294967295
 800b88a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b88c:	e008      	b.n	800b8a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b88e:	4b07      	ldr	r3, [pc, #28]	@ (800b8ac <prvResetNextTaskUnblockTime+0x38>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	4a04      	ldr	r2, [pc, #16]	@ (800b8b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b89e:	6013      	str	r3, [r2, #0]
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	20003044 	.word	0x20003044
 800b8b0:	200030ac 	.word	0x200030ac

0800b8b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b8ba:	4b05      	ldr	r3, [pc, #20]	@ (800b8d0 <xTaskGetCurrentTaskHandle+0x1c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b8c0:	687b      	ldr	r3, [r7, #4]
	}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	20002bb8 	.word	0x20002bb8

0800b8d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8da:	4b0b      	ldr	r3, [pc, #44]	@ (800b908 <xTaskGetSchedulerState+0x34>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d102      	bne.n	800b8e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	607b      	str	r3, [r7, #4]
 800b8e6:	e008      	b.n	800b8fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8e8:	4b08      	ldr	r3, [pc, #32]	@ (800b90c <xTaskGetSchedulerState+0x38>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	607b      	str	r3, [r7, #4]
 800b8f4:	e001      	b.n	800b8fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8fa:	687b      	ldr	r3, [r7, #4]
	}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	20003098 	.word	0x20003098
 800b90c:	200030b4 	.word	0x200030b4

0800b910 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b91c:	2300      	movs	r3, #0
 800b91e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d051      	beq.n	800b9ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4b2a      	ldr	r3, [pc, #168]	@ (800b9d4 <xTaskPriorityInherit+0xc4>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b930:	429a      	cmp	r2, r3
 800b932:	d241      	bcs.n	800b9b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	699b      	ldr	r3, [r3, #24]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	db06      	blt.n	800b94a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b93c:	4b25      	ldr	r3, [pc, #148]	@ (800b9d4 <xTaskPriorityInherit+0xc4>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b942:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	6959      	ldr	r1, [r3, #20]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d8 <xTaskPriorityInherit+0xc8>)
 800b95c:	4413      	add	r3, r2
 800b95e:	4299      	cmp	r1, r3
 800b960:	d122      	bne.n	800b9a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	3304      	adds	r3, #4
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe f9a8 	bl	8009cbc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b96c:	4b19      	ldr	r3, [pc, #100]	@ (800b9d4 <xTaskPriorityInherit+0xc4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97a:	4b18      	ldr	r3, [pc, #96]	@ (800b9dc <xTaskPriorityInherit+0xcc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d903      	bls.n	800b98a <xTaskPriorityInherit+0x7a>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b986:	4a15      	ldr	r2, [pc, #84]	@ (800b9dc <xTaskPriorityInherit+0xcc>)
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b98e:	4613      	mov	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4a10      	ldr	r2, [pc, #64]	@ (800b9d8 <xTaskPriorityInherit+0xc8>)
 800b998:	441a      	add	r2, r3
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	f7fe f92e 	bl	8009c02 <vListInsertEnd>
 800b9a6:	e004      	b.n	800b9b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d4 <xTaskPriorityInherit+0xc4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	60fb      	str	r3, [r7, #12]
 800b9b6:	e008      	b.n	800b9ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9bc:	4b05      	ldr	r3, [pc, #20]	@ (800b9d4 <xTaskPriorityInherit+0xc4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d201      	bcs.n	800b9ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
	}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20002bb8 	.word	0x20002bb8
 800b9d8:	20002bbc 	.word	0x20002bbc
 800b9dc:	20003094 	.word	0x20003094

0800b9e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d058      	beq.n	800baa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9f6:	4b2f      	ldr	r3, [pc, #188]	@ (800bab4 <xTaskPriorityDisinherit+0xd4>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d00b      	beq.n	800ba18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	bf00      	nop
 800ba16:	e7fd      	b.n	800ba14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10b      	bne.n	800ba38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60bb      	str	r3, [r7, #8]
}
 800ba32:	bf00      	nop
 800ba34:	bf00      	nop
 800ba36:	e7fd      	b.n	800ba34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba3c:	1e5a      	subs	r2, r3, #1
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d02c      	beq.n	800baa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d128      	bne.n	800baa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe f92e 	bl	8009cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba78:	4b0f      	ldr	r3, [pc, #60]	@ (800bab8 <xTaskPriorityDisinherit+0xd8>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d903      	bls.n	800ba88 <xTaskPriorityDisinherit+0xa8>
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba84:	4a0c      	ldr	r2, [pc, #48]	@ (800bab8 <xTaskPriorityDisinherit+0xd8>)
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4a09      	ldr	r2, [pc, #36]	@ (800babc <xTaskPriorityDisinherit+0xdc>)
 800ba96:	441a      	add	r2, r3
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f7fe f8af 	bl	8009c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800baa4:	2301      	movs	r3, #1
 800baa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800baa8:	697b      	ldr	r3, [r7, #20]
	}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20002bb8 	.word	0x20002bb8
 800bab8:	20003094 	.word	0x20003094
 800babc:	20002bbc 	.word	0x20002bbc

0800bac0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bace:	2301      	movs	r3, #1
 800bad0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d06c      	beq.n	800bbb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10b      	bne.n	800baf8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	bf00      	nop
 800baf6:	e7fd      	b.n	800baf4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d902      	bls.n	800bb08 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	61fb      	str	r3, [r7, #28]
 800bb06:	e002      	b.n	800bb0e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb0c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb12:	69fa      	ldr	r2, [r7, #28]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d04c      	beq.n	800bbb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d147      	bne.n	800bbb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb22:	4b26      	ldr	r3, [pc, #152]	@ (800bbbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69ba      	ldr	r2, [r7, #24]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d10b      	bne.n	800bb44 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	60bb      	str	r3, [r7, #8]
}
 800bb3e:	bf00      	nop
 800bb40:	bf00      	nop
 800bb42:	e7fd      	b.n	800bb40 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	69fa      	ldr	r2, [r7, #28]
 800bb4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	db04      	blt.n	800bb62 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	6959      	ldr	r1, [r3, #20]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4a13      	ldr	r2, [pc, #76]	@ (800bbc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb72:	4413      	add	r3, r2
 800bb74:	4299      	cmp	r1, r3
 800bb76:	d11c      	bne.n	800bbb2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe f89d 	bl	8009cbc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb86:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d903      	bls.n	800bb96 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb92:	4a0c      	ldr	r2, [pc, #48]	@ (800bbc4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4a07      	ldr	r2, [pc, #28]	@ (800bbc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bba4:	441a      	add	r2, r3
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f7fe f828 	bl	8009c02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbb2:	bf00      	nop
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20002bb8 	.word	0x20002bb8
 800bbc0:	20002bbc 	.word	0x20002bbc
 800bbc4:	20003094 	.word	0x20003094

0800bbc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbcc:	4b07      	ldr	r3, [pc, #28]	@ (800bbec <pvTaskIncrementMutexHeldCount+0x24>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	@ (800bbec <pvTaskIncrementMutexHeldCount+0x24>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbda:	3201      	adds	r2, #1
 800bbdc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bbde:	4b03      	ldr	r3, [pc, #12]	@ (800bbec <pvTaskIncrementMutexHeldCount+0x24>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
	}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	20002bb8 	.word	0x20002bb8

0800bbf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbfa:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <prvAddCurrentTaskToDelayedList+0x90>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc00:	4b20      	ldr	r3, [pc, #128]	@ (800bc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3304      	adds	r3, #4
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe f858 	bl	8009cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d10a      	bne.n	800bc2a <prvAddCurrentTaskToDelayedList+0x3a>
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d007      	beq.n	800bc2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	@ (800bc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	4819      	ldr	r0, [pc, #100]	@ (800bc88 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc24:	f7fd ffed 	bl	8009c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc28:	e026      	b.n	800bc78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4413      	add	r3, r2
 800bc30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc32:	4b14      	ldr	r3, [pc, #80]	@ (800bc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d209      	bcs.n	800bc56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc42:	4b12      	ldr	r3, [pc, #72]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	4b0f      	ldr	r3, [pc, #60]	@ (800bc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f7fd fffb 	bl	8009c4a <vListInsert>
}
 800bc54:	e010      	b.n	800bc78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc56:	4b0e      	ldr	r3, [pc, #56]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	4b0a      	ldr	r3, [pc, #40]	@ (800bc84 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	f7fd fff1 	bl	8009c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc68:	4b0a      	ldr	r3, [pc, #40]	@ (800bc94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d202      	bcs.n	800bc78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc72:	4a08      	ldr	r2, [pc, #32]	@ (800bc94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6013      	str	r3, [r2, #0]
}
 800bc78:	bf00      	nop
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20003090 	.word	0x20003090
 800bc84:	20002bb8 	.word	0x20002bb8
 800bc88:	20003078 	.word	0x20003078
 800bc8c:	20003048 	.word	0x20003048
 800bc90:	20003044 	.word	0x20003044
 800bc94:	200030ac 	.word	0x200030ac

0800bc98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08a      	sub	sp, #40	@ 0x28
 800bc9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bca2:	f000 fb13 	bl	800c2cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bca6:	4b1d      	ldr	r3, [pc, #116]	@ (800bd1c <xTimerCreateTimerTask+0x84>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d021      	beq.n	800bcf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcb6:	1d3a      	adds	r2, r7, #4
 800bcb8:	f107 0108 	add.w	r1, r7, #8
 800bcbc:	f107 030c 	add.w	r3, r7, #12
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fd ff57 	bl	8009b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	9202      	str	r2, [sp, #8]
 800bcce:	9301      	str	r3, [sp, #4]
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	460a      	mov	r2, r1
 800bcd8:	4911      	ldr	r1, [pc, #68]	@ (800bd20 <xTimerCreateTimerTask+0x88>)
 800bcda:	4812      	ldr	r0, [pc, #72]	@ (800bd24 <xTimerCreateTimerTask+0x8c>)
 800bcdc:	f7fe ff2e 	bl	800ab3c <xTaskCreateStatic>
 800bce0:	4603      	mov	r3, r0
 800bce2:	4a11      	ldr	r2, [pc, #68]	@ (800bd28 <xTimerCreateTimerTask+0x90>)
 800bce4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bce6:	4b10      	ldr	r3, [pc, #64]	@ (800bd28 <xTimerCreateTimerTask+0x90>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10b      	bne.n	800bd10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bcf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcfc:	f383 8811 	msr	BASEPRI, r3
 800bd00:	f3bf 8f6f 	isb	sy
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	613b      	str	r3, [r7, #16]
}
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	e7fd      	b.n	800bd0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd10:	697b      	ldr	r3, [r7, #20]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	200030e8 	.word	0x200030e8
 800bd20:	08013400 	.word	0x08013400
 800bd24:	0800be65 	.word	0x0800be65
 800bd28:	200030ec 	.word	0x200030ec

0800bd2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08a      	sub	sp, #40	@ 0x28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10b      	bne.n	800bd5c <xTimerGenericCommand+0x30>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	623b      	str	r3, [r7, #32]
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	e7fd      	b.n	800bd58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd5c:	4b19      	ldr	r3, [pc, #100]	@ (800bdc4 <xTimerGenericCommand+0x98>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d02a      	beq.n	800bdba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b05      	cmp	r3, #5
 800bd74:	dc18      	bgt.n	800bda8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd76:	f7ff fdad 	bl	800b8d4 <xTaskGetSchedulerState>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d109      	bne.n	800bd94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd80:	4b10      	ldr	r3, [pc, #64]	@ (800bdc4 <xTimerGenericCommand+0x98>)
 800bd82:	6818      	ldr	r0, [r3, #0]
 800bd84:	f107 0110 	add.w	r1, r7, #16
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd8c:	f7fe f9be 	bl	800a10c <xQueueGenericSend>
 800bd90:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd92:	e012      	b.n	800bdba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd94:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <xTimerGenericCommand+0x98>)
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	f107 0110 	add.w	r1, r7, #16
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f7fe f9b4 	bl	800a10c <xQueueGenericSend>
 800bda4:	6278      	str	r0, [r7, #36]	@ 0x24
 800bda6:	e008      	b.n	800bdba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bda8:	4b06      	ldr	r3, [pc, #24]	@ (800bdc4 <xTimerGenericCommand+0x98>)
 800bdaa:	6818      	ldr	r0, [r3, #0]
 800bdac:	f107 0110 	add.w	r1, r7, #16
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	f7fe faac 	bl	800a310 <xQueueGenericSendFromISR>
 800bdb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3728      	adds	r7, #40	@ 0x28
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	200030e8 	.word	0x200030e8

0800bdc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af02      	add	r7, sp, #8
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd2:	4b23      	ldr	r3, [pc, #140]	@ (800be60 <prvProcessExpiredTimer+0x98>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fd ff6b 	bl	8009cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdec:	f003 0304 	and.w	r3, r3, #4
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d023      	beq.n	800be3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	699a      	ldr	r2, [r3, #24]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	18d1      	adds	r1, r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	6978      	ldr	r0, [r7, #20]
 800be02:	f000 f8d5 	bl	800bfb0 <prvInsertTimerInActiveList>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d020      	beq.n	800be4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be0c:	2300      	movs	r3, #0
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2300      	movs	r3, #0
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	2100      	movs	r1, #0
 800be16:	6978      	ldr	r0, [r7, #20]
 800be18:	f7ff ff88 	bl	800bd2c <xTimerGenericCommand>
 800be1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d114      	bne.n	800be4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	60fb      	str	r3, [r7, #12]
}
 800be36:	bf00      	nop
 800be38:	bf00      	nop
 800be3a:	e7fd      	b.n	800be38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be42:	f023 0301 	bic.w	r3, r3, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	6978      	ldr	r0, [r7, #20]
 800be54:	4798      	blx	r3
}
 800be56:	bf00      	nop
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	200030e0 	.word	0x200030e0

0800be64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be6c:	f107 0308 	add.w	r3, r7, #8
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f859 	bl	800bf28 <prvGetNextExpireTime>
 800be76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	4619      	mov	r1, r3
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f805 	bl	800be8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be82:	f000 f8d7 	bl	800c034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be86:	bf00      	nop
 800be88:	e7f0      	b.n	800be6c <prvTimerTask+0x8>
	...

0800be8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be96:	f7ff f915 	bl	800b0c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 f866 	bl	800bf70 <prvSampleTimeNow>
 800bea4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d130      	bne.n	800bf0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <prvProcessTimerOrBlockTask+0x3c>
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d806      	bhi.n	800bec8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800beba:	f7ff f911 	bl	800b0e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ff81 	bl	800bdc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bec6:	e024      	b.n	800bf12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d008      	beq.n	800bee0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bece:	4b13      	ldr	r3, [pc, #76]	@ (800bf1c <prvProcessTimerOrBlockTask+0x90>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <prvProcessTimerOrBlockTask+0x50>
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <prvProcessTimerOrBlockTask+0x52>
 800bedc:	2300      	movs	r3, #0
 800bede:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bee0:	4b0f      	ldr	r3, [pc, #60]	@ (800bf20 <prvProcessTimerOrBlockTask+0x94>)
 800bee2:	6818      	ldr	r0, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4619      	mov	r1, r3
 800beee:	f7fe fdf1 	bl	800aad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bef2:	f7ff f8f5 	bl	800b0e0 <xTaskResumeAll>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800befc:	4b09      	ldr	r3, [pc, #36]	@ (800bf24 <prvProcessTimerOrBlockTask+0x98>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
}
 800bf0c:	e001      	b.n	800bf12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf0e:	f7ff f8e7 	bl	800b0e0 <xTaskResumeAll>
}
 800bf12:	bf00      	nop
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	200030e4 	.word	0x200030e4
 800bf20:	200030e8 	.word	0x200030e8
 800bf24:	e000ed04 	.word	0xe000ed04

0800bf28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf30:	4b0e      	ldr	r3, [pc, #56]	@ (800bf6c <prvGetNextExpireTime+0x44>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <prvGetNextExpireTime+0x16>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	e000      	b.n	800bf40 <prvGetNextExpireTime+0x18>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d105      	bne.n	800bf58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf4c:	4b07      	ldr	r3, [pc, #28]	@ (800bf6c <prvGetNextExpireTime+0x44>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	60fb      	str	r3, [r7, #12]
 800bf56:	e001      	b.n	800bf5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	200030e0 	.word	0x200030e0

0800bf70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf78:	f7ff f950 	bl	800b21c <xTaskGetTickCount>
 800bf7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf7e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfac <prvSampleTimeNow+0x3c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d205      	bcs.n	800bf94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf88:	f000 f93a 	bl	800c200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	e002      	b.n	800bf9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf9a:	4a04      	ldr	r2, [pc, #16]	@ (800bfac <prvSampleTimeNow+0x3c>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	200030f0 	.word	0x200030f0

0800bfb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d812      	bhi.n	800bffc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	1ad2      	subs	r2, r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d302      	bcc.n	800bfea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	e01b      	b.n	800c022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfea:	4b10      	ldr	r3, [pc, #64]	@ (800c02c <prvInsertTimerInActiveList+0x7c>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	3304      	adds	r3, #4
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f7fd fe28 	bl	8009c4a <vListInsert>
 800bffa:	e012      	b.n	800c022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d206      	bcs.n	800c012 <prvInsertTimerInActiveList+0x62>
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d302      	bcc.n	800c012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	617b      	str	r3, [r7, #20]
 800c010:	e007      	b.n	800c022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c012:	4b07      	ldr	r3, [pc, #28]	@ (800c030 <prvInsertTimerInActiveList+0x80>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3304      	adds	r3, #4
 800c01a:	4619      	mov	r1, r3
 800c01c:	4610      	mov	r0, r2
 800c01e:	f7fd fe14 	bl	8009c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c022:	697b      	ldr	r3, [r7, #20]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	200030e4 	.word	0x200030e4
 800c030:	200030e0 	.word	0x200030e0

0800c034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08e      	sub	sp, #56	@ 0x38
 800c038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c03a:	e0ce      	b.n	800c1da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	da19      	bge.n	800c076 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c042:	1d3b      	adds	r3, r7, #4
 800c044:	3304      	adds	r3, #4
 800c046:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10b      	bne.n	800c066 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	61fb      	str	r3, [r7, #28]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c06c:	6850      	ldr	r0, [r2, #4]
 800c06e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c070:	6892      	ldr	r2, [r2, #8]
 800c072:	4611      	mov	r1, r2
 800c074:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f2c0 80ae 	blt.w	800c1da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d004      	beq.n	800c094 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08c:	3304      	adds	r3, #4
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fd fe14 	bl	8009cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c094:	463b      	mov	r3, r7
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff ff6a 	bl	800bf70 <prvSampleTimeNow>
 800c09c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b09      	cmp	r3, #9
 800c0a2:	f200 8097 	bhi.w	800c1d4 <prvProcessReceivedCommands+0x1a0>
 800c0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ac <prvProcessReceivedCommands+0x78>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c0d5 	.word	0x0800c0d5
 800c0b0:	0800c0d5 	.word	0x0800c0d5
 800c0b4:	0800c0d5 	.word	0x0800c0d5
 800c0b8:	0800c14b 	.word	0x0800c14b
 800c0bc:	0800c15f 	.word	0x0800c15f
 800c0c0:	0800c1ab 	.word	0x0800c1ab
 800c0c4:	0800c0d5 	.word	0x0800c0d5
 800c0c8:	0800c0d5 	.word	0x0800c0d5
 800c0cc:	0800c14b 	.word	0x0800c14b
 800c0d0:	0800c15f 	.word	0x0800c15f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	18d1      	adds	r1, r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0f4:	f7ff ff5c 	bl	800bfb0 <prvInsertTimerInActiveList>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d06c      	beq.n	800c1d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c104:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d061      	beq.n	800c1d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	441a      	add	r2, r3
 800c11c:	2300      	movs	r3, #0
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2300      	movs	r3, #0
 800c122:	2100      	movs	r1, #0
 800c124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c126:	f7ff fe01 	bl	800bd2c <xTimerGenericCommand>
 800c12a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d152      	bne.n	800c1d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	61bb      	str	r3, [r7, #24]
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop
 800c148:	e7fd      	b.n	800c146 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c150:	f023 0301 	bic.w	r3, r3, #1
 800c154:	b2da      	uxtb	r2, r3
 800c156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c158:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c15c:	e03d      	b.n	800c1da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c160:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c164:	f043 0301 	orr.w	r3, r3, #1
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c174:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10b      	bne.n	800c196 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	617b      	str	r3, [r7, #20]
}
 800c190:	bf00      	nop
 800c192:	bf00      	nop
 800c194:	e7fd      	b.n	800c192 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19c:	18d1      	adds	r1, r2, r3
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1a4:	f7ff ff04 	bl	800bfb0 <prvInsertTimerInActiveList>
					break;
 800c1a8:	e017      	b.n	800c1da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1b0:	f003 0302 	and.w	r3, r3, #2
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d103      	bne.n	800c1c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c1b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ba:	f000 fbe5 	bl	800c988 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1be:	e00c      	b.n	800c1da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1c6:	f023 0301 	bic.w	r3, r3, #1
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1d2:	e002      	b.n	800c1da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c1d4:	bf00      	nop
 800c1d6:	e000      	b.n	800c1da <prvProcessReceivedCommands+0x1a6>
					break;
 800c1d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1da:	4b08      	ldr	r3, [pc, #32]	@ (800c1fc <prvProcessReceivedCommands+0x1c8>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	1d39      	adds	r1, r7, #4
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe f932 	bl	800a44c <xQueueReceive>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f47f af26 	bne.w	800c03c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	3730      	adds	r7, #48	@ 0x30
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200030e8 	.word	0x200030e8

0800c200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c206:	e049      	b.n	800c29c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c208:	4b2e      	ldr	r3, [pc, #184]	@ (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c212:	4b2c      	ldr	r3, [pc, #176]	@ (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3304      	adds	r3, #4
 800c220:	4618      	mov	r0, r3
 800c222:	f7fd fd4b 	bl	8009cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d02f      	beq.n	800c29c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	693a      	ldr	r2, [r7, #16]
 800c242:	4413      	add	r3, r2
 800c244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d90e      	bls.n	800c26c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c25a:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3304      	adds	r3, #4
 800c262:	4619      	mov	r1, r3
 800c264:	4610      	mov	r0, r2
 800c266:	f7fd fcf0 	bl	8009c4a <vListInsert>
 800c26a:	e017      	b.n	800c29c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c26c:	2300      	movs	r3, #0
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2300      	movs	r3, #0
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	2100      	movs	r1, #0
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f7ff fd58 	bl	800bd2c <xTimerGenericCommand>
 800c27c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10b      	bne.n	800c29c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	603b      	str	r3, [r7, #0]
}
 800c296:	bf00      	nop
 800c298:	bf00      	nop
 800c29a:	e7fd      	b.n	800c298 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c29c:	4b09      	ldr	r3, [pc, #36]	@ (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1b0      	bne.n	800c208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2a6:	4b07      	ldr	r3, [pc, #28]	@ (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2ac:	4b06      	ldr	r3, [pc, #24]	@ (800c2c8 <prvSwitchTimerLists+0xc8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a04      	ldr	r2, [pc, #16]	@ (800c2c4 <prvSwitchTimerLists+0xc4>)
 800c2b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2b4:	4a04      	ldr	r2, [pc, #16]	@ (800c2c8 <prvSwitchTimerLists+0xc8>)
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	6013      	str	r3, [r2, #0]
}
 800c2ba:	bf00      	nop
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200030e0 	.word	0x200030e0
 800c2c8:	200030e4 	.word	0x200030e4

0800c2cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2d2:	f000 f969 	bl	800c5a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2d6:	4b15      	ldr	r3, [pc, #84]	@ (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d120      	bne.n	800c320 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2de:	4814      	ldr	r0, [pc, #80]	@ (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2e0:	f7fd fc62 	bl	8009ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2e4:	4813      	ldr	r0, [pc, #76]	@ (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2e6:	f7fd fc5f 	bl	8009ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ea:	4b13      	ldr	r3, [pc, #76]	@ (800c338 <prvCheckForValidListAndQueue+0x6c>)
 800c2ec:	4a10      	ldr	r2, [pc, #64]	@ (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2f0:	4b12      	ldr	r3, [pc, #72]	@ (800c33c <prvCheckForValidListAndQueue+0x70>)
 800c2f2:	4a10      	ldr	r2, [pc, #64]	@ (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4b11      	ldr	r3, [pc, #68]	@ (800c340 <prvCheckForValidListAndQueue+0x74>)
 800c2fc:	4a11      	ldr	r2, [pc, #68]	@ (800c344 <prvCheckForValidListAndQueue+0x78>)
 800c2fe:	2110      	movs	r1, #16
 800c300:	200a      	movs	r0, #10
 800c302:	f7fd fd6f 	bl	8009de4 <xQueueGenericCreateStatic>
 800c306:	4603      	mov	r3, r0
 800c308:	4a08      	ldr	r2, [pc, #32]	@ (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c30c:	4b07      	ldr	r3, [pc, #28]	@ (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c314:	4b05      	ldr	r3, [pc, #20]	@ (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	490b      	ldr	r1, [pc, #44]	@ (800c348 <prvCheckForValidListAndQueue+0x7c>)
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fbb0 	bl	800aa80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c320:	f000 f974 	bl	800c60c <vPortExitCritical>
}
 800c324:	bf00      	nop
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	200030e8 	.word	0x200030e8
 800c330:	200030b8 	.word	0x200030b8
 800c334:	200030cc 	.word	0x200030cc
 800c338:	200030e0 	.word	0x200030e0
 800c33c:	200030e4 	.word	0x200030e4
 800c340:	20003194 	.word	0x20003194
 800c344:	200030f4 	.word	0x200030f4
 800c348:	08013408 	.word	0x08013408

0800c34c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3b04      	subs	r3, #4
 800c35c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b04      	subs	r3, #4
 800c36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f023 0201 	bic.w	r2, r3, #1
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3b04      	subs	r3, #4
 800c37a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c37c:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b0 <pxPortInitialiseStack+0x64>)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3b14      	subs	r3, #20
 800c386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f06f 0202 	mvn.w	r2, #2
 800c39a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3b20      	subs	r3, #32
 800c3a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	0800c3b5 	.word	0x0800c3b5

0800c3b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3be:	4b13      	ldr	r3, [pc, #76]	@ (800c40c <prvTaskExitError+0x58>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d00b      	beq.n	800c3e0 <prvTaskExitError+0x2c>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	60fb      	str	r3, [r7, #12]
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	e7fd      	b.n	800c3dc <prvTaskExitError+0x28>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60bb      	str	r3, [r7, #8]
}
 800c3f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3f4:	bf00      	nop
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d0fc      	beq.n	800c3f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3fc:	bf00      	nop
 800c3fe:	bf00      	nop
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	20000020 	.word	0x20000020

0800c410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c410:	4b07      	ldr	r3, [pc, #28]	@ (800c430 <pxCurrentTCBConst2>)
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	6808      	ldr	r0, [r1, #0]
 800c416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41a:	f380 8809 	msr	PSP, r0
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f04f 0000 	mov.w	r0, #0
 800c426:	f380 8811 	msr	BASEPRI, r0
 800c42a:	4770      	bx	lr
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst2>:
 800c430:	20002bb8 	.word	0x20002bb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c438:	4808      	ldr	r0, [pc, #32]	@ (800c45c <prvPortStartFirstTask+0x24>)
 800c43a:	6800      	ldr	r0, [r0, #0]
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	f380 8808 	msr	MSP, r0
 800c442:	f04f 0000 	mov.w	r0, #0
 800c446:	f380 8814 	msr	CONTROL, r0
 800c44a:	b662      	cpsie	i
 800c44c:	b661      	cpsie	f
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	df00      	svc	0
 800c458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c45a:	bf00      	nop
 800c45c:	e000ed08 	.word	0xe000ed08

0800c460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c466:	4b47      	ldr	r3, [pc, #284]	@ (800c584 <xPortStartScheduler+0x124>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a47      	ldr	r2, [pc, #284]	@ (800c588 <xPortStartScheduler+0x128>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d10b      	bne.n	800c488 <xPortStartScheduler+0x28>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	60fb      	str	r3, [r7, #12]
}
 800c482:	bf00      	nop
 800c484:	bf00      	nop
 800c486:	e7fd      	b.n	800c484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c488:	4b3e      	ldr	r3, [pc, #248]	@ (800c584 <xPortStartScheduler+0x124>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a3f      	ldr	r2, [pc, #252]	@ (800c58c <xPortStartScheduler+0x12c>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d10b      	bne.n	800c4aa <xPortStartScheduler+0x4a>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	613b      	str	r3, [r7, #16]
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	e7fd      	b.n	800c4a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4aa:	4b39      	ldr	r3, [pc, #228]	@ (800c590 <xPortStartScheduler+0x130>)
 800c4ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	22ff      	movs	r2, #255	@ 0xff
 800c4ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4c4:	78fb      	ldrb	r3, [r7, #3]
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	4b31      	ldr	r3, [pc, #196]	@ (800c594 <xPortStartScheduler+0x134>)
 800c4d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4d2:	4b31      	ldr	r3, [pc, #196]	@ (800c598 <xPortStartScheduler+0x138>)
 800c4d4:	2207      	movs	r2, #7
 800c4d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4d8:	e009      	b.n	800c4ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c4da:	4b2f      	ldr	r3, [pc, #188]	@ (800c598 <xPortStartScheduler+0x138>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c598 <xPortStartScheduler+0x138>)
 800c4e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4e4:	78fb      	ldrb	r3, [r7, #3]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ee:	78fb      	ldrb	r3, [r7, #3]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4f6:	2b80      	cmp	r3, #128	@ 0x80
 800c4f8:	d0ef      	beq.n	800c4da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4fa:	4b27      	ldr	r3, [pc, #156]	@ (800c598 <xPortStartScheduler+0x138>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f1c3 0307 	rsb	r3, r3, #7
 800c502:	2b04      	cmp	r3, #4
 800c504:	d00b      	beq.n	800c51e <xPortStartScheduler+0xbe>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	60bb      	str	r3, [r7, #8]
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c51e:	4b1e      	ldr	r3, [pc, #120]	@ (800c598 <xPortStartScheduler+0x138>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	4a1c      	ldr	r2, [pc, #112]	@ (800c598 <xPortStartScheduler+0x138>)
 800c526:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c528:	4b1b      	ldr	r3, [pc, #108]	@ (800c598 <xPortStartScheduler+0x138>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c530:	4a19      	ldr	r2, [pc, #100]	@ (800c598 <xPortStartScheduler+0x138>)
 800c532:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	b2da      	uxtb	r2, r3
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c53c:	4b17      	ldr	r3, [pc, #92]	@ (800c59c <xPortStartScheduler+0x13c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a16      	ldr	r2, [pc, #88]	@ (800c59c <xPortStartScheduler+0x13c>)
 800c542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c546:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c548:	4b14      	ldr	r3, [pc, #80]	@ (800c59c <xPortStartScheduler+0x13c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a13      	ldr	r2, [pc, #76]	@ (800c59c <xPortStartScheduler+0x13c>)
 800c54e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c552:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c554:	f000 f8da 	bl	800c70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c558:	4b11      	ldr	r3, [pc, #68]	@ (800c5a0 <xPortStartScheduler+0x140>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c55e:	f000 f8f9 	bl	800c754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c562:	4b10      	ldr	r3, [pc, #64]	@ (800c5a4 <xPortStartScheduler+0x144>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a0f      	ldr	r2, [pc, #60]	@ (800c5a4 <xPortStartScheduler+0x144>)
 800c568:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c56c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c56e:	f7ff ff63 	bl	800c438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c572:	f7fe ff2f 	bl	800b3d4 <vTaskSwitchContext>
	prvTaskExitError();
 800c576:	f7ff ff1d 	bl	800c3b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	e000ed00 	.word	0xe000ed00
 800c588:	410fc271 	.word	0x410fc271
 800c58c:	410fc270 	.word	0x410fc270
 800c590:	e000e400 	.word	0xe000e400
 800c594:	200031e4 	.word	0x200031e4
 800c598:	200031e8 	.word	0x200031e8
 800c59c:	e000ed20 	.word	0xe000ed20
 800c5a0:	20000020 	.word	0x20000020
 800c5a4:	e000ef34 	.word	0xe000ef34

0800c5a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	607b      	str	r3, [r7, #4]
}
 800c5c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5c2:	4b10      	ldr	r3, [pc, #64]	@ (800c604 <vPortEnterCritical+0x5c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c604 <vPortEnterCritical+0x5c>)
 800c5ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c604 <vPortEnterCritical+0x5c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d110      	bne.n	800c5f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c608 <vPortEnterCritical+0x60>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00b      	beq.n	800c5f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	603b      	str	r3, [r7, #0]
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	e7fd      	b.n	800c5f2 <vPortEnterCritical+0x4a>
	}
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000020 	.word	0x20000020
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c612:	4b12      	ldr	r3, [pc, #72]	@ (800c65c <vPortExitCritical+0x50>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10b      	bne.n	800c632 <vPortExitCritical+0x26>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	607b      	str	r3, [r7, #4]
}
 800c62c:	bf00      	nop
 800c62e:	bf00      	nop
 800c630:	e7fd      	b.n	800c62e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c632:	4b0a      	ldr	r3, [pc, #40]	@ (800c65c <vPortExitCritical+0x50>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3b01      	subs	r3, #1
 800c638:	4a08      	ldr	r2, [pc, #32]	@ (800c65c <vPortExitCritical+0x50>)
 800c63a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c63c:	4b07      	ldr	r3, [pc, #28]	@ (800c65c <vPortExitCritical+0x50>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d105      	bne.n	800c650 <vPortExitCritical+0x44>
 800c644:	2300      	movs	r3, #0
 800c646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f383 8811 	msr	BASEPRI, r3
}
 800c64e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	20000020 	.word	0x20000020

0800c660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c660:	f3ef 8009 	mrs	r0, PSP
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4b15      	ldr	r3, [pc, #84]	@ (800c6c0 <pxCurrentTCBConst>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	f01e 0f10 	tst.w	lr, #16
 800c670:	bf08      	it	eq
 800c672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	6010      	str	r0, [r2, #0]
 800c67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c684:	f380 8811 	msr	BASEPRI, r0
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f7fe fea0 	bl	800b3d4 <vTaskSwitchContext>
 800c694:	f04f 0000 	mov.w	r0, #0
 800c698:	f380 8811 	msr	BASEPRI, r0
 800c69c:	bc09      	pop	{r0, r3}
 800c69e:	6819      	ldr	r1, [r3, #0]
 800c6a0:	6808      	ldr	r0, [r1, #0]
 800c6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a6:	f01e 0f10 	tst.w	lr, #16
 800c6aa:	bf08      	it	eq
 800c6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6b0:	f380 8809 	msr	PSP, r0
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	f3af 8000 	nop.w

0800c6c0 <pxCurrentTCBConst>:
 800c6c0:	20002bb8 	.word	0x20002bb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop

0800c6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	607b      	str	r3, [r7, #4]
}
 800c6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6e2:	f7fe fdbd 	bl	800b260 <xTaskIncrementTick>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6ec:	4b06      	ldr	r3, [pc, #24]	@ (800c708 <xPortSysTickHandler+0x40>)
 800c6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6f2:	601a      	str	r2, [r3, #0]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	f383 8811 	msr	BASEPRI, r3
}
 800c6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c70c:	b480      	push	{r7}
 800c70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c710:	4b0b      	ldr	r3, [pc, #44]	@ (800c740 <vPortSetupTimerInterrupt+0x34>)
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c716:	4b0b      	ldr	r3, [pc, #44]	@ (800c744 <vPortSetupTimerInterrupt+0x38>)
 800c718:	2200      	movs	r2, #0
 800c71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c71c:	4b0a      	ldr	r3, [pc, #40]	@ (800c748 <vPortSetupTimerInterrupt+0x3c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a0a      	ldr	r2, [pc, #40]	@ (800c74c <vPortSetupTimerInterrupt+0x40>)
 800c722:	fba2 2303 	umull	r2, r3, r2, r3
 800c726:	099b      	lsrs	r3, r3, #6
 800c728:	4a09      	ldr	r2, [pc, #36]	@ (800c750 <vPortSetupTimerInterrupt+0x44>)
 800c72a:	3b01      	subs	r3, #1
 800c72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c72e:	4b04      	ldr	r3, [pc, #16]	@ (800c740 <vPortSetupTimerInterrupt+0x34>)
 800c730:	2207      	movs	r2, #7
 800c732:	601a      	str	r2, [r3, #0]
}
 800c734:	bf00      	nop
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	e000e010 	.word	0xe000e010
 800c744:	e000e018 	.word	0xe000e018
 800c748:	20000014 	.word	0x20000014
 800c74c:	10624dd3 	.word	0x10624dd3
 800c750:	e000e014 	.word	0xe000e014

0800c754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c754:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c764 <vPortEnableVFP+0x10>
 800c758:	6801      	ldr	r1, [r0, #0]
 800c75a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c75e:	6001      	str	r1, [r0, #0]
 800c760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c762:	bf00      	nop
 800c764:	e000ed88 	.word	0xe000ed88

0800c768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c76e:	f3ef 8305 	mrs	r3, IPSR
 800c772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b0f      	cmp	r3, #15
 800c778:	d915      	bls.n	800c7a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c77a:	4a18      	ldr	r2, [pc, #96]	@ (800c7dc <vPortValidateInterruptPriority+0x74>)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c784:	4b16      	ldr	r3, [pc, #88]	@ (800c7e0 <vPortValidateInterruptPriority+0x78>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	7afa      	ldrb	r2, [r7, #11]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d20b      	bcs.n	800c7a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	607b      	str	r3, [r7, #4]
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	e7fd      	b.n	800c7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e4 <vPortValidateInterruptPriority+0x7c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e8 <vPortValidateInterruptPriority+0x80>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d90b      	bls.n	800c7ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	603b      	str	r3, [r7, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <vPortValidateInterruptPriority+0x62>
	}
 800c7ce:	bf00      	nop
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	e000e3f0 	.word	0xe000e3f0
 800c7e0:	200031e4 	.word	0x200031e4
 800c7e4:	e000ed0c 	.word	0xe000ed0c
 800c7e8:	200031e8 	.word	0x200031e8

0800c7ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08a      	sub	sp, #40	@ 0x28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7f8:	f7fe fc64 	bl	800b0c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c970 <pvPortMalloc+0x184>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c804:	f000 f924 	bl	800ca50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c808:	4b5a      	ldr	r3, [pc, #360]	@ (800c974 <pvPortMalloc+0x188>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4013      	ands	r3, r2
 800c810:	2b00      	cmp	r3, #0
 800c812:	f040 8095 	bne.w	800c940 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d01e      	beq.n	800c85a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c81c:	2208      	movs	r2, #8
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4413      	add	r3, r2
 800c822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d015      	beq.n	800c85a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f023 0307 	bic.w	r3, r3, #7
 800c834:	3308      	adds	r3, #8
 800c836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f003 0307 	and.w	r3, r3, #7
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00b      	beq.n	800c85a <pvPortMalloc+0x6e>
	__asm volatile
 800c842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	617b      	str	r3, [r7, #20]
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop
 800c858:	e7fd      	b.n	800c856 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d06f      	beq.n	800c940 <pvPortMalloc+0x154>
 800c860:	4b45      	ldr	r3, [pc, #276]	@ (800c978 <pvPortMalloc+0x18c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d86a      	bhi.n	800c940 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c86a:	4b44      	ldr	r3, [pc, #272]	@ (800c97c <pvPortMalloc+0x190>)
 800c86c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c86e:	4b43      	ldr	r3, [pc, #268]	@ (800c97c <pvPortMalloc+0x190>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c874:	e004      	b.n	800c880 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	429a      	cmp	r2, r3
 800c888:	d903      	bls.n	800c892 <pvPortMalloc+0xa6>
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1f1      	bne.n	800c876 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c892:	4b37      	ldr	r3, [pc, #220]	@ (800c970 <pvPortMalloc+0x184>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c898:	429a      	cmp	r2, r3
 800c89a:	d051      	beq.n	800c940 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2208      	movs	r2, #8
 800c8a2:	4413      	add	r3, r2
 800c8a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	1ad2      	subs	r2, r2, r3
 800c8b6:	2308      	movs	r3, #8
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d920      	bls.n	800c900 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	f003 0307 	and.w	r3, r3, #7
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00b      	beq.n	800c8e8 <pvPortMalloc+0xfc>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	613b      	str	r3, [r7, #16]
}
 800c8e2:	bf00      	nop
 800c8e4:	bf00      	nop
 800c8e6:	e7fd      	b.n	800c8e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8fa:	69b8      	ldr	r0, [r7, #24]
 800c8fc:	f000 f90a 	bl	800cb14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c900:	4b1d      	ldr	r3, [pc, #116]	@ (800c978 <pvPortMalloc+0x18c>)
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	4a1b      	ldr	r2, [pc, #108]	@ (800c978 <pvPortMalloc+0x18c>)
 800c90c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c90e:	4b1a      	ldr	r3, [pc, #104]	@ (800c978 <pvPortMalloc+0x18c>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b1b      	ldr	r3, [pc, #108]	@ (800c980 <pvPortMalloc+0x194>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d203      	bcs.n	800c922 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c91a:	4b17      	ldr	r3, [pc, #92]	@ (800c978 <pvPortMalloc+0x18c>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a18      	ldr	r2, [pc, #96]	@ (800c980 <pvPortMalloc+0x194>)
 800c920:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	4b13      	ldr	r3, [pc, #76]	@ (800c974 <pvPortMalloc+0x188>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	431a      	orrs	r2, r3
 800c92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c936:	4b13      	ldr	r3, [pc, #76]	@ (800c984 <pvPortMalloc+0x198>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	4a11      	ldr	r2, [pc, #68]	@ (800c984 <pvPortMalloc+0x198>)
 800c93e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c940:	f7fe fbce 	bl	800b0e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00b      	beq.n	800c966 <pvPortMalloc+0x17a>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	60fb      	str	r3, [r7, #12]
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	e7fd      	b.n	800c962 <pvPortMalloc+0x176>
	return pvReturn;
 800c966:	69fb      	ldr	r3, [r7, #28]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3728      	adds	r7, #40	@ 0x28
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	20006df4 	.word	0x20006df4
 800c974:	20006e08 	.word	0x20006e08
 800c978:	20006df8 	.word	0x20006df8
 800c97c:	20006dec 	.word	0x20006dec
 800c980:	20006dfc 	.word	0x20006dfc
 800c984:	20006e00 	.word	0x20006e00

0800c988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d04f      	beq.n	800ca3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c99a:	2308      	movs	r3, #8
 800c99c:	425b      	negs	r3, r3
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	4b25      	ldr	r3, [pc, #148]	@ (800ca44 <vPortFree+0xbc>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10b      	bne.n	800c9ce <vPortFree+0x46>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60fb      	str	r3, [r7, #12]
}
 800c9c8:	bf00      	nop
 800c9ca:	bf00      	nop
 800c9cc:	e7fd      	b.n	800c9ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00b      	beq.n	800c9ee <vPortFree+0x66>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	60bb      	str	r3, [r7, #8]
}
 800c9e8:	bf00      	nop
 800c9ea:	bf00      	nop
 800c9ec:	e7fd      	b.n	800c9ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ca44 <vPortFree+0xbc>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d01e      	beq.n	800ca3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d11a      	bne.n	800ca3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	4b0e      	ldr	r3, [pc, #56]	@ (800ca44 <vPortFree+0xbc>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	43db      	mvns	r3, r3
 800ca0e:	401a      	ands	r2, r3
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca14:	f7fe fb56 	bl	800b0c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca48 <vPortFree+0xc0>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4413      	add	r3, r2
 800ca22:	4a09      	ldr	r2, [pc, #36]	@ (800ca48 <vPortFree+0xc0>)
 800ca24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca26:	6938      	ldr	r0, [r7, #16]
 800ca28:	f000 f874 	bl	800cb14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca2c:	4b07      	ldr	r3, [pc, #28]	@ (800ca4c <vPortFree+0xc4>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	3301      	adds	r3, #1
 800ca32:	4a06      	ldr	r2, [pc, #24]	@ (800ca4c <vPortFree+0xc4>)
 800ca34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca36:	f7fe fb53 	bl	800b0e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca3a:	bf00      	nop
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20006e08 	.word	0x20006e08
 800ca48:	20006df8 	.word	0x20006df8
 800ca4c:	20006e04 	.word	0x20006e04

0800ca50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ca5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca5c:	4b27      	ldr	r3, [pc, #156]	@ (800cafc <prvHeapInit+0xac>)
 800ca5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00c      	beq.n	800ca84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3307      	adds	r3, #7
 800ca6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f023 0307 	bic.w	r3, r3, #7
 800ca76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	4a1f      	ldr	r2, [pc, #124]	@ (800cafc <prvHeapInit+0xac>)
 800ca80:	4413      	add	r3, r2
 800ca82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca88:	4a1d      	ldr	r2, [pc, #116]	@ (800cb00 <prvHeapInit+0xb0>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca8e:	4b1c      	ldr	r3, [pc, #112]	@ (800cb00 <prvHeapInit+0xb0>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	4413      	add	r3, r2
 800ca9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca9c:	2208      	movs	r2, #8
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	1a9b      	subs	r3, r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f023 0307 	bic.w	r3, r3, #7
 800caaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4a15      	ldr	r2, [pc, #84]	@ (800cb04 <prvHeapInit+0xb4>)
 800cab0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cab2:	4b14      	ldr	r3, [pc, #80]	@ (800cb04 <prvHeapInit+0xb4>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2200      	movs	r2, #0
 800cab8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caba:	4b12      	ldr	r3, [pc, #72]	@ (800cb04 <prvHeapInit+0xb4>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	1ad2      	subs	r2, r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cad0:	4b0c      	ldr	r3, [pc, #48]	@ (800cb04 <prvHeapInit+0xb4>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4a0a      	ldr	r2, [pc, #40]	@ (800cb08 <prvHeapInit+0xb8>)
 800cade:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	4a09      	ldr	r2, [pc, #36]	@ (800cb0c <prvHeapInit+0xbc>)
 800cae6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cae8:	4b09      	ldr	r3, [pc, #36]	@ (800cb10 <prvHeapInit+0xc0>)
 800caea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800caee:	601a      	str	r2, [r3, #0]
}
 800caf0:	bf00      	nop
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	200031ec 	.word	0x200031ec
 800cb00:	20006dec 	.word	0x20006dec
 800cb04:	20006df4 	.word	0x20006df4
 800cb08:	20006dfc 	.word	0x20006dfc
 800cb0c:	20006df8 	.word	0x20006df8
 800cb10:	20006e08 	.word	0x20006e08

0800cb14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb1c:	4b28      	ldr	r3, [pc, #160]	@ (800cbc0 <prvInsertBlockIntoFreeList+0xac>)
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	e002      	b.n	800cb28 <prvInsertBlockIntoFreeList+0x14>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d8f7      	bhi.n	800cb22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d108      	bne.n	800cb56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	441a      	add	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	441a      	add	r2, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d118      	bne.n	800cb9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	4b15      	ldr	r3, [pc, #84]	@ (800cbc4 <prvInsertBlockIntoFreeList+0xb0>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d00d      	beq.n	800cb92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	441a      	add	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	601a      	str	r2, [r3, #0]
 800cb90:	e008      	b.n	800cba4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb92:	4b0c      	ldr	r3, [pc, #48]	@ (800cbc4 <prvInsertBlockIntoFreeList+0xb0>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	e003      	b.n	800cba4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d002      	beq.n	800cbb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbb2:	bf00      	nop
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	20006dec 	.word	0x20006dec
 800cbc4:	20006df4 	.word	0x20006df4

0800cbc8 <atof>:
 800cbc8:	2100      	movs	r1, #0
 800cbca:	f000 be09 	b.w	800d7e0 <strtod>

0800cbce <atoi>:
 800cbce:	220a      	movs	r2, #10
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	f000 be8d 	b.w	800d8f0 <strtol>

0800cbd6 <sulp>:
 800cbd6:	b570      	push	{r4, r5, r6, lr}
 800cbd8:	4604      	mov	r4, r0
 800cbda:	460d      	mov	r5, r1
 800cbdc:	ec45 4b10 	vmov	d0, r4, r5
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	f004 fc39 	bl	8011458 <__ulp>
 800cbe6:	ec51 0b10 	vmov	r0, r1, d0
 800cbea:	b17e      	cbz	r6, 800cc0c <sulp+0x36>
 800cbec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cbf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dd09      	ble.n	800cc0c <sulp+0x36>
 800cbf8:	051b      	lsls	r3, r3, #20
 800cbfa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cbfe:	2400      	movs	r4, #0
 800cc00:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cc04:	4622      	mov	r2, r4
 800cc06:	462b      	mov	r3, r5
 800cc08:	f7f3 fd0e 	bl	8000628 <__aeabi_dmul>
 800cc0c:	ec41 0b10 	vmov	d0, r0, r1
 800cc10:	bd70      	pop	{r4, r5, r6, pc}
 800cc12:	0000      	movs	r0, r0
 800cc14:	0000      	movs	r0, r0
	...

0800cc18 <_strtod_l>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	b09f      	sub	sp, #124	@ 0x7c
 800cc1e:	460c      	mov	r4, r1
 800cc20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cc22:	2200      	movs	r2, #0
 800cc24:	921a      	str	r2, [sp, #104]	@ 0x68
 800cc26:	9005      	str	r0, [sp, #20]
 800cc28:	f04f 0a00 	mov.w	sl, #0
 800cc2c:	f04f 0b00 	mov.w	fp, #0
 800cc30:	460a      	mov	r2, r1
 800cc32:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc34:	7811      	ldrb	r1, [r2, #0]
 800cc36:	292b      	cmp	r1, #43	@ 0x2b
 800cc38:	d04a      	beq.n	800ccd0 <_strtod_l+0xb8>
 800cc3a:	d838      	bhi.n	800ccae <_strtod_l+0x96>
 800cc3c:	290d      	cmp	r1, #13
 800cc3e:	d832      	bhi.n	800cca6 <_strtod_l+0x8e>
 800cc40:	2908      	cmp	r1, #8
 800cc42:	d832      	bhi.n	800ccaa <_strtod_l+0x92>
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d03b      	beq.n	800ccc0 <_strtod_l+0xa8>
 800cc48:	2200      	movs	r2, #0
 800cc4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cc4e:	782a      	ldrb	r2, [r5, #0]
 800cc50:	2a30      	cmp	r2, #48	@ 0x30
 800cc52:	f040 80b2 	bne.w	800cdba <_strtod_l+0x1a2>
 800cc56:	786a      	ldrb	r2, [r5, #1]
 800cc58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cc5c:	2a58      	cmp	r2, #88	@ 0x58
 800cc5e:	d16e      	bne.n	800cd3e <_strtod_l+0x126>
 800cc60:	9302      	str	r3, [sp, #8]
 800cc62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	4a8f      	ldr	r2, [pc, #572]	@ (800cea8 <_strtod_l+0x290>)
 800cc6c:	9805      	ldr	r0, [sp, #20]
 800cc6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cc70:	a919      	add	r1, sp, #100	@ 0x64
 800cc72:	f003 fc9f 	bl	80105b4 <__gethex>
 800cc76:	f010 060f 	ands.w	r6, r0, #15
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	d005      	beq.n	800cc8a <_strtod_l+0x72>
 800cc7e:	2e06      	cmp	r6, #6
 800cc80:	d128      	bne.n	800ccd4 <_strtod_l+0xbc>
 800cc82:	3501      	adds	r5, #1
 800cc84:	2300      	movs	r3, #0
 800cc86:	9519      	str	r5, [sp, #100]	@ 0x64
 800cc88:	930e      	str	r3, [sp, #56]	@ 0x38
 800cc8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f040 858e 	bne.w	800d7ae <_strtod_l+0xb96>
 800cc92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc94:	b1cb      	cbz	r3, 800ccca <_strtod_l+0xb2>
 800cc96:	4652      	mov	r2, sl
 800cc98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cc9c:	ec43 2b10 	vmov	d0, r2, r3
 800cca0:	b01f      	add	sp, #124	@ 0x7c
 800cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca6:	2920      	cmp	r1, #32
 800cca8:	d1ce      	bne.n	800cc48 <_strtod_l+0x30>
 800ccaa:	3201      	adds	r2, #1
 800ccac:	e7c1      	b.n	800cc32 <_strtod_l+0x1a>
 800ccae:	292d      	cmp	r1, #45	@ 0x2d
 800ccb0:	d1ca      	bne.n	800cc48 <_strtod_l+0x30>
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	910e      	str	r1, [sp, #56]	@ 0x38
 800ccb6:	1c51      	adds	r1, r2, #1
 800ccb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccba:	7852      	ldrb	r2, [r2, #1]
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	d1c5      	bne.n	800cc4c <_strtod_l+0x34>
 800ccc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccc2:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f040 8570 	bne.w	800d7aa <_strtod_l+0xb92>
 800ccca:	4652      	mov	r2, sl
 800cccc:	465b      	mov	r3, fp
 800ccce:	e7e5      	b.n	800cc9c <_strtod_l+0x84>
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	e7ef      	b.n	800ccb4 <_strtod_l+0x9c>
 800ccd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ccd6:	b13a      	cbz	r2, 800cce8 <_strtod_l+0xd0>
 800ccd8:	2135      	movs	r1, #53	@ 0x35
 800ccda:	a81c      	add	r0, sp, #112	@ 0x70
 800ccdc:	f004 fcb6 	bl	801164c <__copybits>
 800cce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cce2:	9805      	ldr	r0, [sp, #20]
 800cce4:	f004 f88c 	bl	8010e00 <_Bfree>
 800cce8:	3e01      	subs	r6, #1
 800ccea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ccec:	2e04      	cmp	r6, #4
 800ccee:	d806      	bhi.n	800ccfe <_strtod_l+0xe6>
 800ccf0:	e8df f006 	tbb	[pc, r6]
 800ccf4:	201d0314 	.word	0x201d0314
 800ccf8:	14          	.byte	0x14
 800ccf9:	00          	.byte	0x00
 800ccfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ccfe:	05e1      	lsls	r1, r4, #23
 800cd00:	bf48      	it	mi
 800cd02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd0a:	0d1b      	lsrs	r3, r3, #20
 800cd0c:	051b      	lsls	r3, r3, #20
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1bb      	bne.n	800cc8a <_strtod_l+0x72>
 800cd12:	f002 fccf 	bl	800f6b4 <__errno>
 800cd16:	2322      	movs	r3, #34	@ 0x22
 800cd18:	6003      	str	r3, [r0, #0]
 800cd1a:	e7b6      	b.n	800cc8a <_strtod_l+0x72>
 800cd1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cd20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd2c:	e7e7      	b.n	800ccfe <_strtod_l+0xe6>
 800cd2e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ceb0 <_strtod_l+0x298>
 800cd32:	e7e4      	b.n	800ccfe <_strtod_l+0xe6>
 800cd34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd38:	f04f 3aff 	mov.w	sl, #4294967295
 800cd3c:	e7df      	b.n	800ccfe <_strtod_l+0xe6>
 800cd3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd40:	1c5a      	adds	r2, r3, #1
 800cd42:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd44:	785b      	ldrb	r3, [r3, #1]
 800cd46:	2b30      	cmp	r3, #48	@ 0x30
 800cd48:	d0f9      	beq.n	800cd3e <_strtod_l+0x126>
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d09d      	beq.n	800cc8a <_strtod_l+0x72>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	2700      	movs	r7, #0
 800cd52:	9308      	str	r3, [sp, #32]
 800cd54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd56:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd58:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cd5a:	46b9      	mov	r9, r7
 800cd5c:	220a      	movs	r2, #10
 800cd5e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cd60:	7805      	ldrb	r5, [r0, #0]
 800cd62:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cd66:	b2d9      	uxtb	r1, r3
 800cd68:	2909      	cmp	r1, #9
 800cd6a:	d928      	bls.n	800cdbe <_strtod_l+0x1a6>
 800cd6c:	494f      	ldr	r1, [pc, #316]	@ (800ceac <_strtod_l+0x294>)
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f001 fd06 	bl	800e780 <strncmp>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d032      	beq.n	800cdde <_strtod_l+0x1c6>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd7e:	464d      	mov	r5, r9
 800cd80:	4603      	mov	r3, r0
 800cd82:	2a65      	cmp	r2, #101	@ 0x65
 800cd84:	d001      	beq.n	800cd8a <_strtod_l+0x172>
 800cd86:	2a45      	cmp	r2, #69	@ 0x45
 800cd88:	d114      	bne.n	800cdb4 <_strtod_l+0x19c>
 800cd8a:	b91d      	cbnz	r5, 800cd94 <_strtod_l+0x17c>
 800cd8c:	9a08      	ldr	r2, [sp, #32]
 800cd8e:	4302      	orrs	r2, r0
 800cd90:	d096      	beq.n	800ccc0 <_strtod_l+0xa8>
 800cd92:	2500      	movs	r5, #0
 800cd94:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cd96:	1c62      	adds	r2, r4, #1
 800cd98:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd9a:	7862      	ldrb	r2, [r4, #1]
 800cd9c:	2a2b      	cmp	r2, #43	@ 0x2b
 800cd9e:	d07a      	beq.n	800ce96 <_strtod_l+0x27e>
 800cda0:	2a2d      	cmp	r2, #45	@ 0x2d
 800cda2:	d07e      	beq.n	800cea2 <_strtod_l+0x28a>
 800cda4:	f04f 0c00 	mov.w	ip, #0
 800cda8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cdac:	2909      	cmp	r1, #9
 800cdae:	f240 8085 	bls.w	800cebc <_strtod_l+0x2a4>
 800cdb2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cdb4:	f04f 0800 	mov.w	r8, #0
 800cdb8:	e0a5      	b.n	800cf06 <_strtod_l+0x2ee>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e7c8      	b.n	800cd50 <_strtod_l+0x138>
 800cdbe:	f1b9 0f08 	cmp.w	r9, #8
 800cdc2:	bfd8      	it	le
 800cdc4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cdc6:	f100 0001 	add.w	r0, r0, #1
 800cdca:	bfda      	itte	le
 800cdcc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cdd0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800cdd2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800cdd6:	f109 0901 	add.w	r9, r9, #1
 800cdda:	9019      	str	r0, [sp, #100]	@ 0x64
 800cddc:	e7bf      	b.n	800cd5e <_strtod_l+0x146>
 800cdde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cde4:	785a      	ldrb	r2, [r3, #1]
 800cde6:	f1b9 0f00 	cmp.w	r9, #0
 800cdea:	d03b      	beq.n	800ce64 <_strtod_l+0x24c>
 800cdec:	900a      	str	r0, [sp, #40]	@ 0x28
 800cdee:	464d      	mov	r5, r9
 800cdf0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cdf4:	2b09      	cmp	r3, #9
 800cdf6:	d912      	bls.n	800ce1e <_strtod_l+0x206>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e7c2      	b.n	800cd82 <_strtod_l+0x16a>
 800cdfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce02:	785a      	ldrb	r2, [r3, #1]
 800ce04:	3001      	adds	r0, #1
 800ce06:	2a30      	cmp	r2, #48	@ 0x30
 800ce08:	d0f8      	beq.n	800cdfc <_strtod_l+0x1e4>
 800ce0a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ce0e:	2b08      	cmp	r3, #8
 800ce10:	f200 84d2 	bhi.w	800d7b8 <_strtod_l+0xba0>
 800ce14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce16:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce18:	2000      	movs	r0, #0
 800ce1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	3a30      	subs	r2, #48	@ 0x30
 800ce20:	f100 0301 	add.w	r3, r0, #1
 800ce24:	d018      	beq.n	800ce58 <_strtod_l+0x240>
 800ce26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce28:	4419      	add	r1, r3
 800ce2a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ce2c:	462e      	mov	r6, r5
 800ce2e:	f04f 0e0a 	mov.w	lr, #10
 800ce32:	1c71      	adds	r1, r6, #1
 800ce34:	eba1 0c05 	sub.w	ip, r1, r5
 800ce38:	4563      	cmp	r3, ip
 800ce3a:	dc15      	bgt.n	800ce68 <_strtod_l+0x250>
 800ce3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ce40:	182b      	adds	r3, r5, r0
 800ce42:	2b08      	cmp	r3, #8
 800ce44:	f105 0501 	add.w	r5, r5, #1
 800ce48:	4405      	add	r5, r0
 800ce4a:	dc1a      	bgt.n	800ce82 <_strtod_l+0x26a>
 800ce4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce4e:	230a      	movs	r3, #10
 800ce50:	fb03 2301 	mla	r3, r3, r1, r2
 800ce54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce56:	2300      	movs	r3, #0
 800ce58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce5a:	1c51      	adds	r1, r2, #1
 800ce5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ce5e:	7852      	ldrb	r2, [r2, #1]
 800ce60:	4618      	mov	r0, r3
 800ce62:	e7c5      	b.n	800cdf0 <_strtod_l+0x1d8>
 800ce64:	4648      	mov	r0, r9
 800ce66:	e7ce      	b.n	800ce06 <_strtod_l+0x1ee>
 800ce68:	2e08      	cmp	r6, #8
 800ce6a:	dc05      	bgt.n	800ce78 <_strtod_l+0x260>
 800ce6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ce6e:	fb0e f606 	mul.w	r6, lr, r6
 800ce72:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ce74:	460e      	mov	r6, r1
 800ce76:	e7dc      	b.n	800ce32 <_strtod_l+0x21a>
 800ce78:	2910      	cmp	r1, #16
 800ce7a:	bfd8      	it	le
 800ce7c:	fb0e f707 	mulle.w	r7, lr, r7
 800ce80:	e7f8      	b.n	800ce74 <_strtod_l+0x25c>
 800ce82:	2b0f      	cmp	r3, #15
 800ce84:	bfdc      	itt	le
 800ce86:	230a      	movle	r3, #10
 800ce88:	fb03 2707 	mlale	r7, r3, r7, r2
 800ce8c:	e7e3      	b.n	800ce56 <_strtod_l+0x23e>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce92:	2301      	movs	r3, #1
 800ce94:	e77a      	b.n	800cd8c <_strtod_l+0x174>
 800ce96:	f04f 0c00 	mov.w	ip, #0
 800ce9a:	1ca2      	adds	r2, r4, #2
 800ce9c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce9e:	78a2      	ldrb	r2, [r4, #2]
 800cea0:	e782      	b.n	800cda8 <_strtod_l+0x190>
 800cea2:	f04f 0c01 	mov.w	ip, #1
 800cea6:	e7f8      	b.n	800ce9a <_strtod_l+0x282>
 800cea8:	08013904 	.word	0x08013904
 800ceac:	0801358c 	.word	0x0801358c
 800ceb0:	7ff00000 	.word	0x7ff00000
 800ceb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ceb6:	1c51      	adds	r1, r2, #1
 800ceb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ceba:	7852      	ldrb	r2, [r2, #1]
 800cebc:	2a30      	cmp	r2, #48	@ 0x30
 800cebe:	d0f9      	beq.n	800ceb4 <_strtod_l+0x29c>
 800cec0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cec4:	2908      	cmp	r1, #8
 800cec6:	f63f af75 	bhi.w	800cdb4 <_strtod_l+0x19c>
 800ceca:	3a30      	subs	r2, #48	@ 0x30
 800cecc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cece:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ced0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ced2:	f04f 080a 	mov.w	r8, #10
 800ced6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ced8:	1c56      	adds	r6, r2, #1
 800ceda:	9619      	str	r6, [sp, #100]	@ 0x64
 800cedc:	7852      	ldrb	r2, [r2, #1]
 800cede:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cee2:	f1be 0f09 	cmp.w	lr, #9
 800cee6:	d939      	bls.n	800cf5c <_strtod_l+0x344>
 800cee8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ceea:	1a76      	subs	r6, r6, r1
 800ceec:	2e08      	cmp	r6, #8
 800ceee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cef2:	dc03      	bgt.n	800cefc <_strtod_l+0x2e4>
 800cef4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cef6:	4588      	cmp	r8, r1
 800cef8:	bfa8      	it	ge
 800cefa:	4688      	movge	r8, r1
 800cefc:	f1bc 0f00 	cmp.w	ip, #0
 800cf00:	d001      	beq.n	800cf06 <_strtod_l+0x2ee>
 800cf02:	f1c8 0800 	rsb	r8, r8, #0
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	d14e      	bne.n	800cfa8 <_strtod_l+0x390>
 800cf0a:	9908      	ldr	r1, [sp, #32]
 800cf0c:	4308      	orrs	r0, r1
 800cf0e:	f47f aebc 	bne.w	800cc8a <_strtod_l+0x72>
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f47f aed4 	bne.w	800ccc0 <_strtod_l+0xa8>
 800cf18:	2a69      	cmp	r2, #105	@ 0x69
 800cf1a:	d028      	beq.n	800cf6e <_strtod_l+0x356>
 800cf1c:	dc25      	bgt.n	800cf6a <_strtod_l+0x352>
 800cf1e:	2a49      	cmp	r2, #73	@ 0x49
 800cf20:	d025      	beq.n	800cf6e <_strtod_l+0x356>
 800cf22:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf24:	f47f aecc 	bne.w	800ccc0 <_strtod_l+0xa8>
 800cf28:	499a      	ldr	r1, [pc, #616]	@ (800d194 <_strtod_l+0x57c>)
 800cf2a:	a819      	add	r0, sp, #100	@ 0x64
 800cf2c:	f003 fd64 	bl	80109f8 <__match>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	f43f aec5 	beq.w	800ccc0 <_strtod_l+0xa8>
 800cf36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b28      	cmp	r3, #40	@ 0x28
 800cf3c:	d12e      	bne.n	800cf9c <_strtod_l+0x384>
 800cf3e:	4996      	ldr	r1, [pc, #600]	@ (800d198 <_strtod_l+0x580>)
 800cf40:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf42:	a819      	add	r0, sp, #100	@ 0x64
 800cf44:	f003 fd6c 	bl	8010a20 <__hexnan>
 800cf48:	2805      	cmp	r0, #5
 800cf4a:	d127      	bne.n	800cf9c <_strtod_l+0x384>
 800cf4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cf52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cf56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cf5a:	e696      	b.n	800cc8a <_strtod_l+0x72>
 800cf5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf5e:	fb08 2101 	mla	r1, r8, r1, r2
 800cf62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cf66:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf68:	e7b5      	b.n	800ced6 <_strtod_l+0x2be>
 800cf6a:	2a6e      	cmp	r2, #110	@ 0x6e
 800cf6c:	e7da      	b.n	800cf24 <_strtod_l+0x30c>
 800cf6e:	498b      	ldr	r1, [pc, #556]	@ (800d19c <_strtod_l+0x584>)
 800cf70:	a819      	add	r0, sp, #100	@ 0x64
 800cf72:	f003 fd41 	bl	80109f8 <__match>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	f43f aea2 	beq.w	800ccc0 <_strtod_l+0xa8>
 800cf7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf7e:	4988      	ldr	r1, [pc, #544]	@ (800d1a0 <_strtod_l+0x588>)
 800cf80:	3b01      	subs	r3, #1
 800cf82:	a819      	add	r0, sp, #100	@ 0x64
 800cf84:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf86:	f003 fd37 	bl	80109f8 <__match>
 800cf8a:	b910      	cbnz	r0, 800cf92 <_strtod_l+0x37a>
 800cf8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf8e:	3301      	adds	r3, #1
 800cf90:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf92:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d1b0 <_strtod_l+0x598>
 800cf96:	f04f 0a00 	mov.w	sl, #0
 800cf9a:	e676      	b.n	800cc8a <_strtod_l+0x72>
 800cf9c:	4881      	ldr	r0, [pc, #516]	@ (800d1a4 <_strtod_l+0x58c>)
 800cf9e:	f002 fbcf 	bl	800f740 <nan>
 800cfa2:	ec5b ab10 	vmov	sl, fp, d0
 800cfa6:	e670      	b.n	800cc8a <_strtod_l+0x72>
 800cfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfaa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cfac:	eba8 0303 	sub.w	r3, r8, r3
 800cfb0:	f1b9 0f00 	cmp.w	r9, #0
 800cfb4:	bf08      	it	eq
 800cfb6:	46a9      	moveq	r9, r5
 800cfb8:	2d10      	cmp	r5, #16
 800cfba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfbc:	462c      	mov	r4, r5
 800cfbe:	bfa8      	it	ge
 800cfc0:	2410      	movge	r4, #16
 800cfc2:	f7f3 fab7 	bl	8000534 <__aeabi_ui2d>
 800cfc6:	2d09      	cmp	r5, #9
 800cfc8:	4682      	mov	sl, r0
 800cfca:	468b      	mov	fp, r1
 800cfcc:	dc13      	bgt.n	800cff6 <_strtod_l+0x3de>
 800cfce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f43f ae5a 	beq.w	800cc8a <_strtod_l+0x72>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd8:	dd78      	ble.n	800d0cc <_strtod_l+0x4b4>
 800cfda:	2b16      	cmp	r3, #22
 800cfdc:	dc5f      	bgt.n	800d09e <_strtod_l+0x486>
 800cfde:	4972      	ldr	r1, [pc, #456]	@ (800d1a8 <_strtod_l+0x590>)
 800cfe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfe8:	4652      	mov	r2, sl
 800cfea:	465b      	mov	r3, fp
 800cfec:	f7f3 fb1c 	bl	8000628 <__aeabi_dmul>
 800cff0:	4682      	mov	sl, r0
 800cff2:	468b      	mov	fp, r1
 800cff4:	e649      	b.n	800cc8a <_strtod_l+0x72>
 800cff6:	4b6c      	ldr	r3, [pc, #432]	@ (800d1a8 <_strtod_l+0x590>)
 800cff8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cffc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d000:	f7f3 fb12 	bl	8000628 <__aeabi_dmul>
 800d004:	4682      	mov	sl, r0
 800d006:	4638      	mov	r0, r7
 800d008:	468b      	mov	fp, r1
 800d00a:	f7f3 fa93 	bl	8000534 <__aeabi_ui2d>
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4650      	mov	r0, sl
 800d014:	4659      	mov	r1, fp
 800d016:	f7f3 f951 	bl	80002bc <__adddf3>
 800d01a:	2d0f      	cmp	r5, #15
 800d01c:	4682      	mov	sl, r0
 800d01e:	468b      	mov	fp, r1
 800d020:	ddd5      	ble.n	800cfce <_strtod_l+0x3b6>
 800d022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d024:	1b2c      	subs	r4, r5, r4
 800d026:	441c      	add	r4, r3
 800d028:	2c00      	cmp	r4, #0
 800d02a:	f340 8093 	ble.w	800d154 <_strtod_l+0x53c>
 800d02e:	f014 030f 	ands.w	r3, r4, #15
 800d032:	d00a      	beq.n	800d04a <_strtod_l+0x432>
 800d034:	495c      	ldr	r1, [pc, #368]	@ (800d1a8 <_strtod_l+0x590>)
 800d036:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d03a:	4652      	mov	r2, sl
 800d03c:	465b      	mov	r3, fp
 800d03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d042:	f7f3 faf1 	bl	8000628 <__aeabi_dmul>
 800d046:	4682      	mov	sl, r0
 800d048:	468b      	mov	fp, r1
 800d04a:	f034 040f 	bics.w	r4, r4, #15
 800d04e:	d073      	beq.n	800d138 <_strtod_l+0x520>
 800d050:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d054:	dd49      	ble.n	800d0ea <_strtod_l+0x4d2>
 800d056:	2400      	movs	r4, #0
 800d058:	46a0      	mov	r8, r4
 800d05a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d05c:	46a1      	mov	r9, r4
 800d05e:	9a05      	ldr	r2, [sp, #20]
 800d060:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d1b0 <_strtod_l+0x598>
 800d064:	2322      	movs	r3, #34	@ 0x22
 800d066:	6013      	str	r3, [r2, #0]
 800d068:	f04f 0a00 	mov.w	sl, #0
 800d06c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f43f ae0b 	beq.w	800cc8a <_strtod_l+0x72>
 800d074:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d076:	9805      	ldr	r0, [sp, #20]
 800d078:	f003 fec2 	bl	8010e00 <_Bfree>
 800d07c:	9805      	ldr	r0, [sp, #20]
 800d07e:	4649      	mov	r1, r9
 800d080:	f003 febe 	bl	8010e00 <_Bfree>
 800d084:	9805      	ldr	r0, [sp, #20]
 800d086:	4641      	mov	r1, r8
 800d088:	f003 feba 	bl	8010e00 <_Bfree>
 800d08c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d08e:	9805      	ldr	r0, [sp, #20]
 800d090:	f003 feb6 	bl	8010e00 <_Bfree>
 800d094:	9805      	ldr	r0, [sp, #20]
 800d096:	4621      	mov	r1, r4
 800d098:	f003 feb2 	bl	8010e00 <_Bfree>
 800d09c:	e5f5      	b.n	800cc8a <_strtod_l+0x72>
 800d09e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	dbbc      	blt.n	800d022 <_strtod_l+0x40a>
 800d0a8:	4c3f      	ldr	r4, [pc, #252]	@ (800d1a8 <_strtod_l+0x590>)
 800d0aa:	f1c5 050f 	rsb	r5, r5, #15
 800d0ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ba:	f7f3 fab5 	bl	8000628 <__aeabi_dmul>
 800d0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c0:	1b5d      	subs	r5, r3, r5
 800d0c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0ca:	e78f      	b.n	800cfec <_strtod_l+0x3d4>
 800d0cc:	3316      	adds	r3, #22
 800d0ce:	dba8      	blt.n	800d022 <_strtod_l+0x40a>
 800d0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0d2:	eba3 0808 	sub.w	r8, r3, r8
 800d0d6:	4b34      	ldr	r3, [pc, #208]	@ (800d1a8 <_strtod_l+0x590>)
 800d0d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d0dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d0e0:	4650      	mov	r0, sl
 800d0e2:	4659      	mov	r1, fp
 800d0e4:	f7f3 fbca 	bl	800087c <__aeabi_ddiv>
 800d0e8:	e782      	b.n	800cff0 <_strtod_l+0x3d8>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4f2f      	ldr	r7, [pc, #188]	@ (800d1ac <_strtod_l+0x594>)
 800d0ee:	1124      	asrs	r4, r4, #4
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	4659      	mov	r1, fp
 800d0f4:	461e      	mov	r6, r3
 800d0f6:	2c01      	cmp	r4, #1
 800d0f8:	dc21      	bgt.n	800d13e <_strtod_l+0x526>
 800d0fa:	b10b      	cbz	r3, 800d100 <_strtod_l+0x4e8>
 800d0fc:	4682      	mov	sl, r0
 800d0fe:	468b      	mov	fp, r1
 800d100:	492a      	ldr	r1, [pc, #168]	@ (800d1ac <_strtod_l+0x594>)
 800d102:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d106:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d10a:	4652      	mov	r2, sl
 800d10c:	465b      	mov	r3, fp
 800d10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d112:	f7f3 fa89 	bl	8000628 <__aeabi_dmul>
 800d116:	4b26      	ldr	r3, [pc, #152]	@ (800d1b0 <_strtod_l+0x598>)
 800d118:	460a      	mov	r2, r1
 800d11a:	400b      	ands	r3, r1
 800d11c:	4925      	ldr	r1, [pc, #148]	@ (800d1b4 <_strtod_l+0x59c>)
 800d11e:	428b      	cmp	r3, r1
 800d120:	4682      	mov	sl, r0
 800d122:	d898      	bhi.n	800d056 <_strtod_l+0x43e>
 800d124:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d128:	428b      	cmp	r3, r1
 800d12a:	bf86      	itte	hi
 800d12c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d1b8 <_strtod_l+0x5a0>
 800d130:	f04f 3aff 	movhi.w	sl, #4294967295
 800d134:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d138:	2300      	movs	r3, #0
 800d13a:	9308      	str	r3, [sp, #32]
 800d13c:	e076      	b.n	800d22c <_strtod_l+0x614>
 800d13e:	07e2      	lsls	r2, r4, #31
 800d140:	d504      	bpl.n	800d14c <_strtod_l+0x534>
 800d142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d146:	f7f3 fa6f 	bl	8000628 <__aeabi_dmul>
 800d14a:	2301      	movs	r3, #1
 800d14c:	3601      	adds	r6, #1
 800d14e:	1064      	asrs	r4, r4, #1
 800d150:	3708      	adds	r7, #8
 800d152:	e7d0      	b.n	800d0f6 <_strtod_l+0x4de>
 800d154:	d0f0      	beq.n	800d138 <_strtod_l+0x520>
 800d156:	4264      	negs	r4, r4
 800d158:	f014 020f 	ands.w	r2, r4, #15
 800d15c:	d00a      	beq.n	800d174 <_strtod_l+0x55c>
 800d15e:	4b12      	ldr	r3, [pc, #72]	@ (800d1a8 <_strtod_l+0x590>)
 800d160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d164:	4650      	mov	r0, sl
 800d166:	4659      	mov	r1, fp
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 fb86 	bl	800087c <__aeabi_ddiv>
 800d170:	4682      	mov	sl, r0
 800d172:	468b      	mov	fp, r1
 800d174:	1124      	asrs	r4, r4, #4
 800d176:	d0df      	beq.n	800d138 <_strtod_l+0x520>
 800d178:	2c1f      	cmp	r4, #31
 800d17a:	dd1f      	ble.n	800d1bc <_strtod_l+0x5a4>
 800d17c:	2400      	movs	r4, #0
 800d17e:	46a0      	mov	r8, r4
 800d180:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d182:	46a1      	mov	r9, r4
 800d184:	9a05      	ldr	r2, [sp, #20]
 800d186:	2322      	movs	r3, #34	@ 0x22
 800d188:	f04f 0a00 	mov.w	sl, #0
 800d18c:	f04f 0b00 	mov.w	fp, #0
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	e76b      	b.n	800d06c <_strtod_l+0x454>
 800d194:	0801359b 	.word	0x0801359b
 800d198:	080138f0 	.word	0x080138f0
 800d19c:	08013593 	.word	0x08013593
 800d1a0:	0801371f 	.word	0x0801371f
 800d1a4:	080138ef 	.word	0x080138ef
 800d1a8:	08013b38 	.word	0x08013b38
 800d1ac:	08013b10 	.word	0x08013b10
 800d1b0:	7ff00000 	.word	0x7ff00000
 800d1b4:	7ca00000 	.word	0x7ca00000
 800d1b8:	7fefffff 	.word	0x7fefffff
 800d1bc:	f014 0310 	ands.w	r3, r4, #16
 800d1c0:	bf18      	it	ne
 800d1c2:	236a      	movne	r3, #106	@ 0x6a
 800d1c4:	4ea9      	ldr	r6, [pc, #676]	@ (800d46c <_strtod_l+0x854>)
 800d1c6:	9308      	str	r3, [sp, #32]
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	4659      	mov	r1, fp
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	07e7      	lsls	r7, r4, #31
 800d1d0:	d504      	bpl.n	800d1dc <_strtod_l+0x5c4>
 800d1d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1d6:	f7f3 fa27 	bl	8000628 <__aeabi_dmul>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	1064      	asrs	r4, r4, #1
 800d1de:	f106 0608 	add.w	r6, r6, #8
 800d1e2:	d1f4      	bne.n	800d1ce <_strtod_l+0x5b6>
 800d1e4:	b10b      	cbz	r3, 800d1ea <_strtod_l+0x5d2>
 800d1e6:	4682      	mov	sl, r0
 800d1e8:	468b      	mov	fp, r1
 800d1ea:	9b08      	ldr	r3, [sp, #32]
 800d1ec:	b1b3      	cbz	r3, 800d21c <_strtod_l+0x604>
 800d1ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d1f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	4659      	mov	r1, fp
 800d1fa:	dd0f      	ble.n	800d21c <_strtod_l+0x604>
 800d1fc:	2b1f      	cmp	r3, #31
 800d1fe:	dd56      	ble.n	800d2ae <_strtod_l+0x696>
 800d200:	2b34      	cmp	r3, #52	@ 0x34
 800d202:	bfde      	ittt	le
 800d204:	f04f 33ff 	movle.w	r3, #4294967295
 800d208:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d20c:	4093      	lslle	r3, r2
 800d20e:	f04f 0a00 	mov.w	sl, #0
 800d212:	bfcc      	ite	gt
 800d214:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d218:	ea03 0b01 	andle.w	fp, r3, r1
 800d21c:	2200      	movs	r2, #0
 800d21e:	2300      	movs	r3, #0
 800d220:	4650      	mov	r0, sl
 800d222:	4659      	mov	r1, fp
 800d224:	f7f3 fc68 	bl	8000af8 <__aeabi_dcmpeq>
 800d228:	2800      	cmp	r0, #0
 800d22a:	d1a7      	bne.n	800d17c <_strtod_l+0x564>
 800d22c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d232:	9805      	ldr	r0, [sp, #20]
 800d234:	462b      	mov	r3, r5
 800d236:	464a      	mov	r2, r9
 800d238:	f003 fe4a 	bl	8010ed0 <__s2b>
 800d23c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d23e:	2800      	cmp	r0, #0
 800d240:	f43f af09 	beq.w	800d056 <_strtod_l+0x43e>
 800d244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d248:	2a00      	cmp	r2, #0
 800d24a:	eba3 0308 	sub.w	r3, r3, r8
 800d24e:	bfa8      	it	ge
 800d250:	2300      	movge	r3, #0
 800d252:	9312      	str	r3, [sp, #72]	@ 0x48
 800d254:	2400      	movs	r4, #0
 800d256:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d25a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d25c:	46a0      	mov	r8, r4
 800d25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d260:	9805      	ldr	r0, [sp, #20]
 800d262:	6859      	ldr	r1, [r3, #4]
 800d264:	f003 fd8c 	bl	8010d80 <_Balloc>
 800d268:	4681      	mov	r9, r0
 800d26a:	2800      	cmp	r0, #0
 800d26c:	f43f aef7 	beq.w	800d05e <_strtod_l+0x446>
 800d270:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d272:	691a      	ldr	r2, [r3, #16]
 800d274:	3202      	adds	r2, #2
 800d276:	f103 010c 	add.w	r1, r3, #12
 800d27a:	0092      	lsls	r2, r2, #2
 800d27c:	300c      	adds	r0, #12
 800d27e:	f002 fa50 	bl	800f722 <memcpy>
 800d282:	ec4b ab10 	vmov	d0, sl, fp
 800d286:	9805      	ldr	r0, [sp, #20]
 800d288:	aa1c      	add	r2, sp, #112	@ 0x70
 800d28a:	a91b      	add	r1, sp, #108	@ 0x6c
 800d28c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d290:	f004 f952 	bl	8011538 <__d2b>
 800d294:	901a      	str	r0, [sp, #104]	@ 0x68
 800d296:	2800      	cmp	r0, #0
 800d298:	f43f aee1 	beq.w	800d05e <_strtod_l+0x446>
 800d29c:	9805      	ldr	r0, [sp, #20]
 800d29e:	2101      	movs	r1, #1
 800d2a0:	f003 feac 	bl	8010ffc <__i2b>
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	b948      	cbnz	r0, 800d2bc <_strtod_l+0x6a4>
 800d2a8:	f04f 0800 	mov.w	r8, #0
 800d2ac:	e6d7      	b.n	800d05e <_strtod_l+0x446>
 800d2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b6:	ea03 0a0a 	and.w	sl, r3, sl
 800d2ba:	e7af      	b.n	800d21c <_strtod_l+0x604>
 800d2bc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d2be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d2c0:	2d00      	cmp	r5, #0
 800d2c2:	bfab      	itete	ge
 800d2c4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d2c6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d2c8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d2ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d2cc:	bfac      	ite	ge
 800d2ce:	18ef      	addge	r7, r5, r3
 800d2d0:	1b5e      	sublt	r6, r3, r5
 800d2d2:	9b08      	ldr	r3, [sp, #32]
 800d2d4:	1aed      	subs	r5, r5, r3
 800d2d6:	4415      	add	r5, r2
 800d2d8:	4b65      	ldr	r3, [pc, #404]	@ (800d470 <_strtod_l+0x858>)
 800d2da:	3d01      	subs	r5, #1
 800d2dc:	429d      	cmp	r5, r3
 800d2de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d2e2:	da50      	bge.n	800d386 <_strtod_l+0x76e>
 800d2e4:	1b5b      	subs	r3, r3, r5
 800d2e6:	2b1f      	cmp	r3, #31
 800d2e8:	eba2 0203 	sub.w	r2, r2, r3
 800d2ec:	f04f 0101 	mov.w	r1, #1
 800d2f0:	dc3d      	bgt.n	800d36e <_strtod_l+0x756>
 800d2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2fc:	18bd      	adds	r5, r7, r2
 800d2fe:	9b08      	ldr	r3, [sp, #32]
 800d300:	42af      	cmp	r7, r5
 800d302:	4416      	add	r6, r2
 800d304:	441e      	add	r6, r3
 800d306:	463b      	mov	r3, r7
 800d308:	bfa8      	it	ge
 800d30a:	462b      	movge	r3, r5
 800d30c:	42b3      	cmp	r3, r6
 800d30e:	bfa8      	it	ge
 800d310:	4633      	movge	r3, r6
 800d312:	2b00      	cmp	r3, #0
 800d314:	bfc2      	ittt	gt
 800d316:	1aed      	subgt	r5, r5, r3
 800d318:	1af6      	subgt	r6, r6, r3
 800d31a:	1aff      	subgt	r7, r7, r3
 800d31c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d31e:	2b00      	cmp	r3, #0
 800d320:	dd16      	ble.n	800d350 <_strtod_l+0x738>
 800d322:	4641      	mov	r1, r8
 800d324:	9805      	ldr	r0, [sp, #20]
 800d326:	461a      	mov	r2, r3
 800d328:	f003 ff20 	bl	801116c <__pow5mult>
 800d32c:	4680      	mov	r8, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d0ba      	beq.n	800d2a8 <_strtod_l+0x690>
 800d332:	4601      	mov	r1, r0
 800d334:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d336:	9805      	ldr	r0, [sp, #20]
 800d338:	f003 fe76 	bl	8011028 <__multiply>
 800d33c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d33e:	2800      	cmp	r0, #0
 800d340:	f43f ae8d 	beq.w	800d05e <_strtod_l+0x446>
 800d344:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d346:	9805      	ldr	r0, [sp, #20]
 800d348:	f003 fd5a 	bl	8010e00 <_Bfree>
 800d34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d34e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d350:	2d00      	cmp	r5, #0
 800d352:	dc1d      	bgt.n	800d390 <_strtod_l+0x778>
 800d354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	dd23      	ble.n	800d3a2 <_strtod_l+0x78a>
 800d35a:	4649      	mov	r1, r9
 800d35c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d35e:	9805      	ldr	r0, [sp, #20]
 800d360:	f003 ff04 	bl	801116c <__pow5mult>
 800d364:	4681      	mov	r9, r0
 800d366:	b9e0      	cbnz	r0, 800d3a2 <_strtod_l+0x78a>
 800d368:	f04f 0900 	mov.w	r9, #0
 800d36c:	e677      	b.n	800d05e <_strtod_l+0x446>
 800d36e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d372:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d376:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d37a:	35e2      	adds	r5, #226	@ 0xe2
 800d37c:	fa01 f305 	lsl.w	r3, r1, r5
 800d380:	9310      	str	r3, [sp, #64]	@ 0x40
 800d382:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d384:	e7ba      	b.n	800d2fc <_strtod_l+0x6e4>
 800d386:	2300      	movs	r3, #0
 800d388:	9310      	str	r3, [sp, #64]	@ 0x40
 800d38a:	2301      	movs	r3, #1
 800d38c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d38e:	e7b5      	b.n	800d2fc <_strtod_l+0x6e4>
 800d390:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d392:	9805      	ldr	r0, [sp, #20]
 800d394:	462a      	mov	r2, r5
 800d396:	f003 ff43 	bl	8011220 <__lshift>
 800d39a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d1d9      	bne.n	800d354 <_strtod_l+0x73c>
 800d3a0:	e65d      	b.n	800d05e <_strtod_l+0x446>
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	dd07      	ble.n	800d3b6 <_strtod_l+0x79e>
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	9805      	ldr	r0, [sp, #20]
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	f003 ff38 	bl	8011220 <__lshift>
 800d3b0:	4681      	mov	r9, r0
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d0d8      	beq.n	800d368 <_strtod_l+0x750>
 800d3b6:	2f00      	cmp	r7, #0
 800d3b8:	dd08      	ble.n	800d3cc <_strtod_l+0x7b4>
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	9805      	ldr	r0, [sp, #20]
 800d3be:	463a      	mov	r2, r7
 800d3c0:	f003 ff2e 	bl	8011220 <__lshift>
 800d3c4:	4680      	mov	r8, r0
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f43f ae49 	beq.w	800d05e <_strtod_l+0x446>
 800d3cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3ce:	9805      	ldr	r0, [sp, #20]
 800d3d0:	464a      	mov	r2, r9
 800d3d2:	f003 ffad 	bl	8011330 <__mdiff>
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	f43f ae40 	beq.w	800d05e <_strtod_l+0x446>
 800d3de:	68c3      	ldr	r3, [r0, #12]
 800d3e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60c3      	str	r3, [r0, #12]
 800d3e6:	4641      	mov	r1, r8
 800d3e8:	f003 ff86 	bl	80112f8 <__mcmp>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	da45      	bge.n	800d47c <_strtod_l+0x864>
 800d3f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3f2:	ea53 030a 	orrs.w	r3, r3, sl
 800d3f6:	d16b      	bne.n	800d4d0 <_strtod_l+0x8b8>
 800d3f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d167      	bne.n	800d4d0 <_strtod_l+0x8b8>
 800d400:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d404:	0d1b      	lsrs	r3, r3, #20
 800d406:	051b      	lsls	r3, r3, #20
 800d408:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d40c:	d960      	bls.n	800d4d0 <_strtod_l+0x8b8>
 800d40e:	6963      	ldr	r3, [r4, #20]
 800d410:	b913      	cbnz	r3, 800d418 <_strtod_l+0x800>
 800d412:	6923      	ldr	r3, [r4, #16]
 800d414:	2b01      	cmp	r3, #1
 800d416:	dd5b      	ble.n	800d4d0 <_strtod_l+0x8b8>
 800d418:	4621      	mov	r1, r4
 800d41a:	2201      	movs	r2, #1
 800d41c:	9805      	ldr	r0, [sp, #20]
 800d41e:	f003 feff 	bl	8011220 <__lshift>
 800d422:	4641      	mov	r1, r8
 800d424:	4604      	mov	r4, r0
 800d426:	f003 ff67 	bl	80112f8 <__mcmp>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	dd50      	ble.n	800d4d0 <_strtod_l+0x8b8>
 800d42e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d432:	9a08      	ldr	r2, [sp, #32]
 800d434:	0d1b      	lsrs	r3, r3, #20
 800d436:	051b      	lsls	r3, r3, #20
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d06a      	beq.n	800d512 <_strtod_l+0x8fa>
 800d43c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d440:	d867      	bhi.n	800d512 <_strtod_l+0x8fa>
 800d442:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d446:	f67f ae9d 	bls.w	800d184 <_strtod_l+0x56c>
 800d44a:	4b0a      	ldr	r3, [pc, #40]	@ (800d474 <_strtod_l+0x85c>)
 800d44c:	4650      	mov	r0, sl
 800d44e:	4659      	mov	r1, fp
 800d450:	2200      	movs	r2, #0
 800d452:	f7f3 f8e9 	bl	8000628 <__aeabi_dmul>
 800d456:	4b08      	ldr	r3, [pc, #32]	@ (800d478 <_strtod_l+0x860>)
 800d458:	400b      	ands	r3, r1
 800d45a:	4682      	mov	sl, r0
 800d45c:	468b      	mov	fp, r1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f47f ae08 	bne.w	800d074 <_strtod_l+0x45c>
 800d464:	9a05      	ldr	r2, [sp, #20]
 800d466:	2322      	movs	r3, #34	@ 0x22
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	e603      	b.n	800d074 <_strtod_l+0x45c>
 800d46c:	08013918 	.word	0x08013918
 800d470:	fffffc02 	.word	0xfffffc02
 800d474:	39500000 	.word	0x39500000
 800d478:	7ff00000 	.word	0x7ff00000
 800d47c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d480:	d165      	bne.n	800d54e <_strtod_l+0x936>
 800d482:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d488:	b35a      	cbz	r2, 800d4e2 <_strtod_l+0x8ca>
 800d48a:	4a9f      	ldr	r2, [pc, #636]	@ (800d708 <_strtod_l+0xaf0>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d12b      	bne.n	800d4e8 <_strtod_l+0x8d0>
 800d490:	9b08      	ldr	r3, [sp, #32]
 800d492:	4651      	mov	r1, sl
 800d494:	b303      	cbz	r3, 800d4d8 <_strtod_l+0x8c0>
 800d496:	4b9d      	ldr	r3, [pc, #628]	@ (800d70c <_strtod_l+0xaf4>)
 800d498:	465a      	mov	r2, fp
 800d49a:	4013      	ands	r3, r2
 800d49c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a4:	d81b      	bhi.n	800d4de <_strtod_l+0x8c6>
 800d4a6:	0d1b      	lsrs	r3, r3, #20
 800d4a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b0:	4299      	cmp	r1, r3
 800d4b2:	d119      	bne.n	800d4e8 <_strtod_l+0x8d0>
 800d4b4:	4b96      	ldr	r3, [pc, #600]	@ (800d710 <_strtod_l+0xaf8>)
 800d4b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d102      	bne.n	800d4c2 <_strtod_l+0x8aa>
 800d4bc:	3101      	adds	r1, #1
 800d4be:	f43f adce 	beq.w	800d05e <_strtod_l+0x446>
 800d4c2:	4b92      	ldr	r3, [pc, #584]	@ (800d70c <_strtod_l+0xaf4>)
 800d4c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4c6:	401a      	ands	r2, r3
 800d4c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d4cc:	f04f 0a00 	mov.w	sl, #0
 800d4d0:	9b08      	ldr	r3, [sp, #32]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1b9      	bne.n	800d44a <_strtod_l+0x832>
 800d4d6:	e5cd      	b.n	800d074 <_strtod_l+0x45c>
 800d4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4dc:	e7e8      	b.n	800d4b0 <_strtod_l+0x898>
 800d4de:	4613      	mov	r3, r2
 800d4e0:	e7e6      	b.n	800d4b0 <_strtod_l+0x898>
 800d4e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d4e6:	d0a2      	beq.n	800d42e <_strtod_l+0x816>
 800d4e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4ea:	b1db      	cbz	r3, 800d524 <_strtod_l+0x90c>
 800d4ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4ee:	4213      	tst	r3, r2
 800d4f0:	d0ee      	beq.n	800d4d0 <_strtod_l+0x8b8>
 800d4f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4f4:	9a08      	ldr	r2, [sp, #32]
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	4659      	mov	r1, fp
 800d4fa:	b1bb      	cbz	r3, 800d52c <_strtod_l+0x914>
 800d4fc:	f7ff fb6b 	bl	800cbd6 <sulp>
 800d500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d504:	ec53 2b10 	vmov	r2, r3, d0
 800d508:	f7f2 fed8 	bl	80002bc <__adddf3>
 800d50c:	4682      	mov	sl, r0
 800d50e:	468b      	mov	fp, r1
 800d510:	e7de      	b.n	800d4d0 <_strtod_l+0x8b8>
 800d512:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d516:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d51a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d51e:	f04f 3aff 	mov.w	sl, #4294967295
 800d522:	e7d5      	b.n	800d4d0 <_strtod_l+0x8b8>
 800d524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d526:	ea13 0f0a 	tst.w	r3, sl
 800d52a:	e7e1      	b.n	800d4f0 <_strtod_l+0x8d8>
 800d52c:	f7ff fb53 	bl	800cbd6 <sulp>
 800d530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d534:	ec53 2b10 	vmov	r2, r3, d0
 800d538:	f7f2 febe 	bl	80002b8 <__aeabi_dsub>
 800d53c:	2200      	movs	r2, #0
 800d53e:	2300      	movs	r3, #0
 800d540:	4682      	mov	sl, r0
 800d542:	468b      	mov	fp, r1
 800d544:	f7f3 fad8 	bl	8000af8 <__aeabi_dcmpeq>
 800d548:	2800      	cmp	r0, #0
 800d54a:	d0c1      	beq.n	800d4d0 <_strtod_l+0x8b8>
 800d54c:	e61a      	b.n	800d184 <_strtod_l+0x56c>
 800d54e:	4641      	mov	r1, r8
 800d550:	4620      	mov	r0, r4
 800d552:	f004 f849 	bl	80115e8 <__ratio>
 800d556:	ec57 6b10 	vmov	r6, r7, d0
 800d55a:	2200      	movs	r2, #0
 800d55c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d560:	4630      	mov	r0, r6
 800d562:	4639      	mov	r1, r7
 800d564:	f7f3 fadc 	bl	8000b20 <__aeabi_dcmple>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d06f      	beq.n	800d64c <_strtod_l+0xa34>
 800d56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d17a      	bne.n	800d668 <_strtod_l+0xa50>
 800d572:	f1ba 0f00 	cmp.w	sl, #0
 800d576:	d158      	bne.n	800d62a <_strtod_l+0xa12>
 800d578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d57a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d15a      	bne.n	800d638 <_strtod_l+0xa20>
 800d582:	4b64      	ldr	r3, [pc, #400]	@ (800d714 <_strtod_l+0xafc>)
 800d584:	2200      	movs	r2, #0
 800d586:	4630      	mov	r0, r6
 800d588:	4639      	mov	r1, r7
 800d58a:	f7f3 fabf 	bl	8000b0c <__aeabi_dcmplt>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d159      	bne.n	800d646 <_strtod_l+0xa2e>
 800d592:	4630      	mov	r0, r6
 800d594:	4639      	mov	r1, r7
 800d596:	4b60      	ldr	r3, [pc, #384]	@ (800d718 <_strtod_l+0xb00>)
 800d598:	2200      	movs	r2, #0
 800d59a:	f7f3 f845 	bl	8000628 <__aeabi_dmul>
 800d59e:	4606      	mov	r6, r0
 800d5a0:	460f      	mov	r7, r1
 800d5a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d5a6:	9606      	str	r6, [sp, #24]
 800d5a8:	9307      	str	r3, [sp, #28]
 800d5aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5ae:	4d57      	ldr	r5, [pc, #348]	@ (800d70c <_strtod_l+0xaf4>)
 800d5b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5b6:	401d      	ands	r5, r3
 800d5b8:	4b58      	ldr	r3, [pc, #352]	@ (800d71c <_strtod_l+0xb04>)
 800d5ba:	429d      	cmp	r5, r3
 800d5bc:	f040 80b2 	bne.w	800d724 <_strtod_l+0xb0c>
 800d5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d5c6:	ec4b ab10 	vmov	d0, sl, fp
 800d5ca:	f003 ff45 	bl	8011458 <__ulp>
 800d5ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5d2:	ec51 0b10 	vmov	r0, r1, d0
 800d5d6:	f7f3 f827 	bl	8000628 <__aeabi_dmul>
 800d5da:	4652      	mov	r2, sl
 800d5dc:	465b      	mov	r3, fp
 800d5de:	f7f2 fe6d 	bl	80002bc <__adddf3>
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	4949      	ldr	r1, [pc, #292]	@ (800d70c <_strtod_l+0xaf4>)
 800d5e6:	4a4e      	ldr	r2, [pc, #312]	@ (800d720 <_strtod_l+0xb08>)
 800d5e8:	4019      	ands	r1, r3
 800d5ea:	4291      	cmp	r1, r2
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	d942      	bls.n	800d676 <_strtod_l+0xa5e>
 800d5f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5f2:	4b47      	ldr	r3, [pc, #284]	@ (800d710 <_strtod_l+0xaf8>)
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d103      	bne.n	800d600 <_strtod_l+0x9e8>
 800d5f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	f43f ad2f 	beq.w	800d05e <_strtod_l+0x446>
 800d600:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d710 <_strtod_l+0xaf8>
 800d604:	f04f 3aff 	mov.w	sl, #4294967295
 800d608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d60a:	9805      	ldr	r0, [sp, #20]
 800d60c:	f003 fbf8 	bl	8010e00 <_Bfree>
 800d610:	9805      	ldr	r0, [sp, #20]
 800d612:	4649      	mov	r1, r9
 800d614:	f003 fbf4 	bl	8010e00 <_Bfree>
 800d618:	9805      	ldr	r0, [sp, #20]
 800d61a:	4641      	mov	r1, r8
 800d61c:	f003 fbf0 	bl	8010e00 <_Bfree>
 800d620:	9805      	ldr	r0, [sp, #20]
 800d622:	4621      	mov	r1, r4
 800d624:	f003 fbec 	bl	8010e00 <_Bfree>
 800d628:	e619      	b.n	800d25e <_strtod_l+0x646>
 800d62a:	f1ba 0f01 	cmp.w	sl, #1
 800d62e:	d103      	bne.n	800d638 <_strtod_l+0xa20>
 800d630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d632:	2b00      	cmp	r3, #0
 800d634:	f43f ada6 	beq.w	800d184 <_strtod_l+0x56c>
 800d638:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d6e8 <_strtod_l+0xad0>
 800d63c:	4f35      	ldr	r7, [pc, #212]	@ (800d714 <_strtod_l+0xafc>)
 800d63e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d642:	2600      	movs	r6, #0
 800d644:	e7b1      	b.n	800d5aa <_strtod_l+0x992>
 800d646:	4f34      	ldr	r7, [pc, #208]	@ (800d718 <_strtod_l+0xb00>)
 800d648:	2600      	movs	r6, #0
 800d64a:	e7aa      	b.n	800d5a2 <_strtod_l+0x98a>
 800d64c:	4b32      	ldr	r3, [pc, #200]	@ (800d718 <_strtod_l+0xb00>)
 800d64e:	4630      	mov	r0, r6
 800d650:	4639      	mov	r1, r7
 800d652:	2200      	movs	r2, #0
 800d654:	f7f2 ffe8 	bl	8000628 <__aeabi_dmul>
 800d658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d65a:	4606      	mov	r6, r0
 800d65c:	460f      	mov	r7, r1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d09f      	beq.n	800d5a2 <_strtod_l+0x98a>
 800d662:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d666:	e7a0      	b.n	800d5aa <_strtod_l+0x992>
 800d668:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d6f0 <_strtod_l+0xad8>
 800d66c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d670:	ec57 6b17 	vmov	r6, r7, d7
 800d674:	e799      	b.n	800d5aa <_strtod_l+0x992>
 800d676:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d67a:	9b08      	ldr	r3, [sp, #32]
 800d67c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1c1      	bne.n	800d608 <_strtod_l+0x9f0>
 800d684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d688:	0d1b      	lsrs	r3, r3, #20
 800d68a:	051b      	lsls	r3, r3, #20
 800d68c:	429d      	cmp	r5, r3
 800d68e:	d1bb      	bne.n	800d608 <_strtod_l+0x9f0>
 800d690:	4630      	mov	r0, r6
 800d692:	4639      	mov	r1, r7
 800d694:	f7f3 fb78 	bl	8000d88 <__aeabi_d2lz>
 800d698:	f7f2 ff98 	bl	80005cc <__aeabi_l2d>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	4639      	mov	r1, r7
 800d6a4:	f7f2 fe08 	bl	80002b8 <__aeabi_dsub>
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d6b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6b6:	ea46 060a 	orr.w	r6, r6, sl
 800d6ba:	431e      	orrs	r6, r3
 800d6bc:	d06f      	beq.n	800d79e <_strtod_l+0xb86>
 800d6be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d6f8 <_strtod_l+0xae0>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f3 fa22 	bl	8000b0c <__aeabi_dcmplt>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	f47f acd3 	bne.w	800d074 <_strtod_l+0x45c>
 800d6ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800d700 <_strtod_l+0xae8>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6d8:	f7f3 fa36 	bl	8000b48 <__aeabi_dcmpgt>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d093      	beq.n	800d608 <_strtod_l+0x9f0>
 800d6e0:	e4c8      	b.n	800d074 <_strtod_l+0x45c>
 800d6e2:	bf00      	nop
 800d6e4:	f3af 8000 	nop.w
 800d6e8:	00000000 	.word	0x00000000
 800d6ec:	bff00000 	.word	0xbff00000
 800d6f0:	00000000 	.word	0x00000000
 800d6f4:	3ff00000 	.word	0x3ff00000
 800d6f8:	94a03595 	.word	0x94a03595
 800d6fc:	3fdfffff 	.word	0x3fdfffff
 800d700:	35afe535 	.word	0x35afe535
 800d704:	3fe00000 	.word	0x3fe00000
 800d708:	000fffff 	.word	0x000fffff
 800d70c:	7ff00000 	.word	0x7ff00000
 800d710:	7fefffff 	.word	0x7fefffff
 800d714:	3ff00000 	.word	0x3ff00000
 800d718:	3fe00000 	.word	0x3fe00000
 800d71c:	7fe00000 	.word	0x7fe00000
 800d720:	7c9fffff 	.word	0x7c9fffff
 800d724:	9b08      	ldr	r3, [sp, #32]
 800d726:	b323      	cbz	r3, 800d772 <_strtod_l+0xb5a>
 800d728:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d72c:	d821      	bhi.n	800d772 <_strtod_l+0xb5a>
 800d72e:	a328      	add	r3, pc, #160	@ (adr r3, 800d7d0 <_strtod_l+0xbb8>)
 800d730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d734:	4630      	mov	r0, r6
 800d736:	4639      	mov	r1, r7
 800d738:	f7f3 f9f2 	bl	8000b20 <__aeabi_dcmple>
 800d73c:	b1a0      	cbz	r0, 800d768 <_strtod_l+0xb50>
 800d73e:	4639      	mov	r1, r7
 800d740:	4630      	mov	r0, r6
 800d742:	f7f3 fa49 	bl	8000bd8 <__aeabi_d2uiz>
 800d746:	2801      	cmp	r0, #1
 800d748:	bf38      	it	cc
 800d74a:	2001      	movcc	r0, #1
 800d74c:	f7f2 fef2 	bl	8000534 <__aeabi_ui2d>
 800d750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d752:	4606      	mov	r6, r0
 800d754:	460f      	mov	r7, r1
 800d756:	b9fb      	cbnz	r3, 800d798 <_strtod_l+0xb80>
 800d758:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d75c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d75e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d764:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d76a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d76e:	1b5b      	subs	r3, r3, r5
 800d770:	9311      	str	r3, [sp, #68]	@ 0x44
 800d772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d776:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d77a:	f003 fe6d 	bl	8011458 <__ulp>
 800d77e:	4650      	mov	r0, sl
 800d780:	ec53 2b10 	vmov	r2, r3, d0
 800d784:	4659      	mov	r1, fp
 800d786:	f7f2 ff4f 	bl	8000628 <__aeabi_dmul>
 800d78a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d78e:	f7f2 fd95 	bl	80002bc <__adddf3>
 800d792:	4682      	mov	sl, r0
 800d794:	468b      	mov	fp, r1
 800d796:	e770      	b.n	800d67a <_strtod_l+0xa62>
 800d798:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d79c:	e7e0      	b.n	800d760 <_strtod_l+0xb48>
 800d79e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7d8 <_strtod_l+0xbc0>)
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f7f3 f9b2 	bl	8000b0c <__aeabi_dcmplt>
 800d7a8:	e798      	b.n	800d6dc <_strtod_l+0xac4>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800d7ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d7b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7b2:	6013      	str	r3, [r2, #0]
 800d7b4:	f7ff ba6d 	b.w	800cc92 <_strtod_l+0x7a>
 800d7b8:	2a65      	cmp	r2, #101	@ 0x65
 800d7ba:	f43f ab68 	beq.w	800ce8e <_strtod_l+0x276>
 800d7be:	2a45      	cmp	r2, #69	@ 0x45
 800d7c0:	f43f ab65 	beq.w	800ce8e <_strtod_l+0x276>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	f7ff bba0 	b.w	800cf0a <_strtod_l+0x2f2>
 800d7ca:	bf00      	nop
 800d7cc:	f3af 8000 	nop.w
 800d7d0:	ffc00000 	.word	0xffc00000
 800d7d4:	41dfffff 	.word	0x41dfffff
 800d7d8:	94a03595 	.word	0x94a03595
 800d7dc:	3fcfffff 	.word	0x3fcfffff

0800d7e0 <strtod>:
 800d7e0:	460a      	mov	r2, r1
 800d7e2:	4601      	mov	r1, r0
 800d7e4:	4802      	ldr	r0, [pc, #8]	@ (800d7f0 <strtod+0x10>)
 800d7e6:	4b03      	ldr	r3, [pc, #12]	@ (800d7f4 <strtod+0x14>)
 800d7e8:	6800      	ldr	r0, [r0, #0]
 800d7ea:	f7ff ba15 	b.w	800cc18 <_strtod_l>
 800d7ee:	bf00      	nop
 800d7f0:	200001a4 	.word	0x200001a4
 800d7f4:	20000038 	.word	0x20000038

0800d7f8 <_strtol_l.isra.0>:
 800d7f8:	2b24      	cmp	r3, #36	@ 0x24
 800d7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7fe:	4686      	mov	lr, r0
 800d800:	4690      	mov	r8, r2
 800d802:	d801      	bhi.n	800d808 <_strtol_l.isra.0+0x10>
 800d804:	2b01      	cmp	r3, #1
 800d806:	d106      	bne.n	800d816 <_strtol_l.isra.0+0x1e>
 800d808:	f001 ff54 	bl	800f6b4 <__errno>
 800d80c:	2316      	movs	r3, #22
 800d80e:	6003      	str	r3, [r0, #0]
 800d810:	2000      	movs	r0, #0
 800d812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d816:	4834      	ldr	r0, [pc, #208]	@ (800d8e8 <_strtol_l.isra.0+0xf0>)
 800d818:	460d      	mov	r5, r1
 800d81a:	462a      	mov	r2, r5
 800d81c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d820:	5d06      	ldrb	r6, [r0, r4]
 800d822:	f016 0608 	ands.w	r6, r6, #8
 800d826:	d1f8      	bne.n	800d81a <_strtol_l.isra.0+0x22>
 800d828:	2c2d      	cmp	r4, #45	@ 0x2d
 800d82a:	d110      	bne.n	800d84e <_strtol_l.isra.0+0x56>
 800d82c:	782c      	ldrb	r4, [r5, #0]
 800d82e:	2601      	movs	r6, #1
 800d830:	1c95      	adds	r5, r2, #2
 800d832:	f033 0210 	bics.w	r2, r3, #16
 800d836:	d115      	bne.n	800d864 <_strtol_l.isra.0+0x6c>
 800d838:	2c30      	cmp	r4, #48	@ 0x30
 800d83a:	d10d      	bne.n	800d858 <_strtol_l.isra.0+0x60>
 800d83c:	782a      	ldrb	r2, [r5, #0]
 800d83e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d842:	2a58      	cmp	r2, #88	@ 0x58
 800d844:	d108      	bne.n	800d858 <_strtol_l.isra.0+0x60>
 800d846:	786c      	ldrb	r4, [r5, #1]
 800d848:	3502      	adds	r5, #2
 800d84a:	2310      	movs	r3, #16
 800d84c:	e00a      	b.n	800d864 <_strtol_l.isra.0+0x6c>
 800d84e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d850:	bf04      	itt	eq
 800d852:	782c      	ldrbeq	r4, [r5, #0]
 800d854:	1c95      	addeq	r5, r2, #2
 800d856:	e7ec      	b.n	800d832 <_strtol_l.isra.0+0x3a>
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1f6      	bne.n	800d84a <_strtol_l.isra.0+0x52>
 800d85c:	2c30      	cmp	r4, #48	@ 0x30
 800d85e:	bf14      	ite	ne
 800d860:	230a      	movne	r3, #10
 800d862:	2308      	moveq	r3, #8
 800d864:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d868:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d86c:	2200      	movs	r2, #0
 800d86e:	fbbc f9f3 	udiv	r9, ip, r3
 800d872:	4610      	mov	r0, r2
 800d874:	fb03 ca19 	mls	sl, r3, r9, ip
 800d878:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d87c:	2f09      	cmp	r7, #9
 800d87e:	d80f      	bhi.n	800d8a0 <_strtol_l.isra.0+0xa8>
 800d880:	463c      	mov	r4, r7
 800d882:	42a3      	cmp	r3, r4
 800d884:	dd1b      	ble.n	800d8be <_strtol_l.isra.0+0xc6>
 800d886:	1c57      	adds	r7, r2, #1
 800d888:	d007      	beq.n	800d89a <_strtol_l.isra.0+0xa2>
 800d88a:	4581      	cmp	r9, r0
 800d88c:	d314      	bcc.n	800d8b8 <_strtol_l.isra.0+0xc0>
 800d88e:	d101      	bne.n	800d894 <_strtol_l.isra.0+0x9c>
 800d890:	45a2      	cmp	sl, r4
 800d892:	db11      	blt.n	800d8b8 <_strtol_l.isra.0+0xc0>
 800d894:	fb00 4003 	mla	r0, r0, r3, r4
 800d898:	2201      	movs	r2, #1
 800d89a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d89e:	e7eb      	b.n	800d878 <_strtol_l.isra.0+0x80>
 800d8a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d8a4:	2f19      	cmp	r7, #25
 800d8a6:	d801      	bhi.n	800d8ac <_strtol_l.isra.0+0xb4>
 800d8a8:	3c37      	subs	r4, #55	@ 0x37
 800d8aa:	e7ea      	b.n	800d882 <_strtol_l.isra.0+0x8a>
 800d8ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d8b0:	2f19      	cmp	r7, #25
 800d8b2:	d804      	bhi.n	800d8be <_strtol_l.isra.0+0xc6>
 800d8b4:	3c57      	subs	r4, #87	@ 0x57
 800d8b6:	e7e4      	b.n	800d882 <_strtol_l.isra.0+0x8a>
 800d8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8bc:	e7ed      	b.n	800d89a <_strtol_l.isra.0+0xa2>
 800d8be:	1c53      	adds	r3, r2, #1
 800d8c0:	d108      	bne.n	800d8d4 <_strtol_l.isra.0+0xdc>
 800d8c2:	2322      	movs	r3, #34	@ 0x22
 800d8c4:	f8ce 3000 	str.w	r3, [lr]
 800d8c8:	4660      	mov	r0, ip
 800d8ca:	f1b8 0f00 	cmp.w	r8, #0
 800d8ce:	d0a0      	beq.n	800d812 <_strtol_l.isra.0+0x1a>
 800d8d0:	1e69      	subs	r1, r5, #1
 800d8d2:	e006      	b.n	800d8e2 <_strtol_l.isra.0+0xea>
 800d8d4:	b106      	cbz	r6, 800d8d8 <_strtol_l.isra.0+0xe0>
 800d8d6:	4240      	negs	r0, r0
 800d8d8:	f1b8 0f00 	cmp.w	r8, #0
 800d8dc:	d099      	beq.n	800d812 <_strtol_l.isra.0+0x1a>
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	d1f6      	bne.n	800d8d0 <_strtol_l.isra.0+0xd8>
 800d8e2:	f8c8 1000 	str.w	r1, [r8]
 800d8e6:	e794      	b.n	800d812 <_strtol_l.isra.0+0x1a>
 800d8e8:	08013941 	.word	0x08013941

0800d8ec <_strtol_r>:
 800d8ec:	f7ff bf84 	b.w	800d7f8 <_strtol_l.isra.0>

0800d8f0 <strtol>:
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	460a      	mov	r2, r1
 800d8f4:	4601      	mov	r1, r0
 800d8f6:	4802      	ldr	r0, [pc, #8]	@ (800d900 <strtol+0x10>)
 800d8f8:	6800      	ldr	r0, [r0, #0]
 800d8fa:	f7ff bf7d 	b.w	800d7f8 <_strtol_l.isra.0>
 800d8fe:	bf00      	nop
 800d900:	200001a4 	.word	0x200001a4

0800d904 <__cvt>:
 800d904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d908:	ec57 6b10 	vmov	r6, r7, d0
 800d90c:	2f00      	cmp	r7, #0
 800d90e:	460c      	mov	r4, r1
 800d910:	4619      	mov	r1, r3
 800d912:	463b      	mov	r3, r7
 800d914:	bfbb      	ittet	lt
 800d916:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d91a:	461f      	movlt	r7, r3
 800d91c:	2300      	movge	r3, #0
 800d91e:	232d      	movlt	r3, #45	@ 0x2d
 800d920:	700b      	strb	r3, [r1, #0]
 800d922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d924:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d928:	4691      	mov	r9, r2
 800d92a:	f023 0820 	bic.w	r8, r3, #32
 800d92e:	bfbc      	itt	lt
 800d930:	4632      	movlt	r2, r6
 800d932:	4616      	movlt	r6, r2
 800d934:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d938:	d005      	beq.n	800d946 <__cvt+0x42>
 800d93a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d93e:	d100      	bne.n	800d942 <__cvt+0x3e>
 800d940:	3401      	adds	r4, #1
 800d942:	2102      	movs	r1, #2
 800d944:	e000      	b.n	800d948 <__cvt+0x44>
 800d946:	2103      	movs	r1, #3
 800d948:	ab03      	add	r3, sp, #12
 800d94a:	9301      	str	r3, [sp, #4]
 800d94c:	ab02      	add	r3, sp, #8
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	ec47 6b10 	vmov	d0, r6, r7
 800d954:	4653      	mov	r3, sl
 800d956:	4622      	mov	r2, r4
 800d958:	f001 ffaa 	bl	800f8b0 <_dtoa_r>
 800d95c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d960:	4605      	mov	r5, r0
 800d962:	d119      	bne.n	800d998 <__cvt+0x94>
 800d964:	f019 0f01 	tst.w	r9, #1
 800d968:	d00e      	beq.n	800d988 <__cvt+0x84>
 800d96a:	eb00 0904 	add.w	r9, r0, r4
 800d96e:	2200      	movs	r2, #0
 800d970:	2300      	movs	r3, #0
 800d972:	4630      	mov	r0, r6
 800d974:	4639      	mov	r1, r7
 800d976:	f7f3 f8bf 	bl	8000af8 <__aeabi_dcmpeq>
 800d97a:	b108      	cbz	r0, 800d980 <__cvt+0x7c>
 800d97c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d980:	2230      	movs	r2, #48	@ 0x30
 800d982:	9b03      	ldr	r3, [sp, #12]
 800d984:	454b      	cmp	r3, r9
 800d986:	d31e      	bcc.n	800d9c6 <__cvt+0xc2>
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d98c:	1b5b      	subs	r3, r3, r5
 800d98e:	4628      	mov	r0, r5
 800d990:	6013      	str	r3, [r2, #0]
 800d992:	b004      	add	sp, #16
 800d994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d998:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d99c:	eb00 0904 	add.w	r9, r0, r4
 800d9a0:	d1e5      	bne.n	800d96e <__cvt+0x6a>
 800d9a2:	7803      	ldrb	r3, [r0, #0]
 800d9a4:	2b30      	cmp	r3, #48	@ 0x30
 800d9a6:	d10a      	bne.n	800d9be <__cvt+0xba>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	4639      	mov	r1, r7
 800d9b0:	f7f3 f8a2 	bl	8000af8 <__aeabi_dcmpeq>
 800d9b4:	b918      	cbnz	r0, 800d9be <__cvt+0xba>
 800d9b6:	f1c4 0401 	rsb	r4, r4, #1
 800d9ba:	f8ca 4000 	str.w	r4, [sl]
 800d9be:	f8da 3000 	ldr.w	r3, [sl]
 800d9c2:	4499      	add	r9, r3
 800d9c4:	e7d3      	b.n	800d96e <__cvt+0x6a>
 800d9c6:	1c59      	adds	r1, r3, #1
 800d9c8:	9103      	str	r1, [sp, #12]
 800d9ca:	701a      	strb	r2, [r3, #0]
 800d9cc:	e7d9      	b.n	800d982 <__cvt+0x7e>

0800d9ce <__exponent>:
 800d9ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	bfba      	itte	lt
 800d9d4:	4249      	neglt	r1, r1
 800d9d6:	232d      	movlt	r3, #45	@ 0x2d
 800d9d8:	232b      	movge	r3, #43	@ 0x2b
 800d9da:	2909      	cmp	r1, #9
 800d9dc:	7002      	strb	r2, [r0, #0]
 800d9de:	7043      	strb	r3, [r0, #1]
 800d9e0:	dd29      	ble.n	800da36 <__exponent+0x68>
 800d9e2:	f10d 0307 	add.w	r3, sp, #7
 800d9e6:	461d      	mov	r5, r3
 800d9e8:	270a      	movs	r7, #10
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	fbb1 f6f7 	udiv	r6, r1, r7
 800d9f0:	fb07 1416 	mls	r4, r7, r6, r1
 800d9f4:	3430      	adds	r4, #48	@ 0x30
 800d9f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	2c63      	cmp	r4, #99	@ 0x63
 800d9fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800da02:	4631      	mov	r1, r6
 800da04:	dcf1      	bgt.n	800d9ea <__exponent+0x1c>
 800da06:	3130      	adds	r1, #48	@ 0x30
 800da08:	1e94      	subs	r4, r2, #2
 800da0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da0e:	1c41      	adds	r1, r0, #1
 800da10:	4623      	mov	r3, r4
 800da12:	42ab      	cmp	r3, r5
 800da14:	d30a      	bcc.n	800da2c <__exponent+0x5e>
 800da16:	f10d 0309 	add.w	r3, sp, #9
 800da1a:	1a9b      	subs	r3, r3, r2
 800da1c:	42ac      	cmp	r4, r5
 800da1e:	bf88      	it	hi
 800da20:	2300      	movhi	r3, #0
 800da22:	3302      	adds	r3, #2
 800da24:	4403      	add	r3, r0
 800da26:	1a18      	subs	r0, r3, r0
 800da28:	b003      	add	sp, #12
 800da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da30:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da34:	e7ed      	b.n	800da12 <__exponent+0x44>
 800da36:	2330      	movs	r3, #48	@ 0x30
 800da38:	3130      	adds	r1, #48	@ 0x30
 800da3a:	7083      	strb	r3, [r0, #2]
 800da3c:	70c1      	strb	r1, [r0, #3]
 800da3e:	1d03      	adds	r3, r0, #4
 800da40:	e7f1      	b.n	800da26 <__exponent+0x58>
	...

0800da44 <_printf_float>:
 800da44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da48:	b08d      	sub	sp, #52	@ 0x34
 800da4a:	460c      	mov	r4, r1
 800da4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800da50:	4616      	mov	r6, r2
 800da52:	461f      	mov	r7, r3
 800da54:	4605      	mov	r5, r0
 800da56:	f001 fdd1 	bl	800f5fc <_localeconv_r>
 800da5a:	6803      	ldr	r3, [r0, #0]
 800da5c:	9304      	str	r3, [sp, #16]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f2 fc1e 	bl	80002a0 <strlen>
 800da64:	2300      	movs	r3, #0
 800da66:	930a      	str	r3, [sp, #40]	@ 0x28
 800da68:	f8d8 3000 	ldr.w	r3, [r8]
 800da6c:	9005      	str	r0, [sp, #20]
 800da6e:	3307      	adds	r3, #7
 800da70:	f023 0307 	bic.w	r3, r3, #7
 800da74:	f103 0208 	add.w	r2, r3, #8
 800da78:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da7c:	f8d4 b000 	ldr.w	fp, [r4]
 800da80:	f8c8 2000 	str.w	r2, [r8]
 800da84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da8c:	9307      	str	r3, [sp, #28]
 800da8e:	f8cd 8018 	str.w	r8, [sp, #24]
 800da92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da9a:	4b9c      	ldr	r3, [pc, #624]	@ (800dd0c <_printf_float+0x2c8>)
 800da9c:	f04f 32ff 	mov.w	r2, #4294967295
 800daa0:	f7f3 f85c 	bl	8000b5c <__aeabi_dcmpun>
 800daa4:	bb70      	cbnz	r0, 800db04 <_printf_float+0xc0>
 800daa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800daaa:	4b98      	ldr	r3, [pc, #608]	@ (800dd0c <_printf_float+0x2c8>)
 800daac:	f04f 32ff 	mov.w	r2, #4294967295
 800dab0:	f7f3 f836 	bl	8000b20 <__aeabi_dcmple>
 800dab4:	bb30      	cbnz	r0, 800db04 <_printf_float+0xc0>
 800dab6:	2200      	movs	r2, #0
 800dab8:	2300      	movs	r3, #0
 800daba:	4640      	mov	r0, r8
 800dabc:	4649      	mov	r1, r9
 800dabe:	f7f3 f825 	bl	8000b0c <__aeabi_dcmplt>
 800dac2:	b110      	cbz	r0, 800daca <_printf_float+0x86>
 800dac4:	232d      	movs	r3, #45	@ 0x2d
 800dac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daca:	4a91      	ldr	r2, [pc, #580]	@ (800dd10 <_printf_float+0x2cc>)
 800dacc:	4b91      	ldr	r3, [pc, #580]	@ (800dd14 <_printf_float+0x2d0>)
 800dace:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dad2:	bf8c      	ite	hi
 800dad4:	4690      	movhi	r8, r2
 800dad6:	4698      	movls	r8, r3
 800dad8:	2303      	movs	r3, #3
 800dada:	6123      	str	r3, [r4, #16]
 800dadc:	f02b 0304 	bic.w	r3, fp, #4
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	f04f 0900 	mov.w	r9, #0
 800dae6:	9700      	str	r7, [sp, #0]
 800dae8:	4633      	mov	r3, r6
 800daea:	aa0b      	add	r2, sp, #44	@ 0x2c
 800daec:	4621      	mov	r1, r4
 800daee:	4628      	mov	r0, r5
 800daf0:	f000 f9d2 	bl	800de98 <_printf_common>
 800daf4:	3001      	adds	r0, #1
 800daf6:	f040 808d 	bne.w	800dc14 <_printf_float+0x1d0>
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295
 800dafe:	b00d      	add	sp, #52	@ 0x34
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	4642      	mov	r2, r8
 800db06:	464b      	mov	r3, r9
 800db08:	4640      	mov	r0, r8
 800db0a:	4649      	mov	r1, r9
 800db0c:	f7f3 f826 	bl	8000b5c <__aeabi_dcmpun>
 800db10:	b140      	cbz	r0, 800db24 <_printf_float+0xe0>
 800db12:	464b      	mov	r3, r9
 800db14:	2b00      	cmp	r3, #0
 800db16:	bfbc      	itt	lt
 800db18:	232d      	movlt	r3, #45	@ 0x2d
 800db1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db1e:	4a7e      	ldr	r2, [pc, #504]	@ (800dd18 <_printf_float+0x2d4>)
 800db20:	4b7e      	ldr	r3, [pc, #504]	@ (800dd1c <_printf_float+0x2d8>)
 800db22:	e7d4      	b.n	800dace <_printf_float+0x8a>
 800db24:	6863      	ldr	r3, [r4, #4]
 800db26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db2a:	9206      	str	r2, [sp, #24]
 800db2c:	1c5a      	adds	r2, r3, #1
 800db2e:	d13b      	bne.n	800dba8 <_printf_float+0x164>
 800db30:	2306      	movs	r3, #6
 800db32:	6063      	str	r3, [r4, #4]
 800db34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db38:	2300      	movs	r3, #0
 800db3a:	6022      	str	r2, [r4, #0]
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	ab0a      	add	r3, sp, #40	@ 0x28
 800db40:	e9cd a301 	strd	sl, r3, [sp, #4]
 800db44:	ab09      	add	r3, sp, #36	@ 0x24
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	6861      	ldr	r1, [r4, #4]
 800db4a:	ec49 8b10 	vmov	d0, r8, r9
 800db4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800db52:	4628      	mov	r0, r5
 800db54:	f7ff fed6 	bl	800d904 <__cvt>
 800db58:	9b06      	ldr	r3, [sp, #24]
 800db5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db5c:	2b47      	cmp	r3, #71	@ 0x47
 800db5e:	4680      	mov	r8, r0
 800db60:	d129      	bne.n	800dbb6 <_printf_float+0x172>
 800db62:	1cc8      	adds	r0, r1, #3
 800db64:	db02      	blt.n	800db6c <_printf_float+0x128>
 800db66:	6863      	ldr	r3, [r4, #4]
 800db68:	4299      	cmp	r1, r3
 800db6a:	dd41      	ble.n	800dbf0 <_printf_float+0x1ac>
 800db6c:	f1aa 0a02 	sub.w	sl, sl, #2
 800db70:	fa5f fa8a 	uxtb.w	sl, sl
 800db74:	3901      	subs	r1, #1
 800db76:	4652      	mov	r2, sl
 800db78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800db7c:	9109      	str	r1, [sp, #36]	@ 0x24
 800db7e:	f7ff ff26 	bl	800d9ce <__exponent>
 800db82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db84:	1813      	adds	r3, r2, r0
 800db86:	2a01      	cmp	r2, #1
 800db88:	4681      	mov	r9, r0
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	dc02      	bgt.n	800db94 <_printf_float+0x150>
 800db8e:	6822      	ldr	r2, [r4, #0]
 800db90:	07d2      	lsls	r2, r2, #31
 800db92:	d501      	bpl.n	800db98 <_printf_float+0x154>
 800db94:	3301      	adds	r3, #1
 800db96:	6123      	str	r3, [r4, #16]
 800db98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d0a2      	beq.n	800dae6 <_printf_float+0xa2>
 800dba0:	232d      	movs	r3, #45	@ 0x2d
 800dba2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dba6:	e79e      	b.n	800dae6 <_printf_float+0xa2>
 800dba8:	9a06      	ldr	r2, [sp, #24]
 800dbaa:	2a47      	cmp	r2, #71	@ 0x47
 800dbac:	d1c2      	bne.n	800db34 <_printf_float+0xf0>
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d1c0      	bne.n	800db34 <_printf_float+0xf0>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e7bd      	b.n	800db32 <_printf_float+0xee>
 800dbb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dbba:	d9db      	bls.n	800db74 <_printf_float+0x130>
 800dbbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dbc0:	d118      	bne.n	800dbf4 <_printf_float+0x1b0>
 800dbc2:	2900      	cmp	r1, #0
 800dbc4:	6863      	ldr	r3, [r4, #4]
 800dbc6:	dd0b      	ble.n	800dbe0 <_printf_float+0x19c>
 800dbc8:	6121      	str	r1, [r4, #16]
 800dbca:	b913      	cbnz	r3, 800dbd2 <_printf_float+0x18e>
 800dbcc:	6822      	ldr	r2, [r4, #0]
 800dbce:	07d0      	lsls	r0, r2, #31
 800dbd0:	d502      	bpl.n	800dbd8 <_printf_float+0x194>
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	440b      	add	r3, r1
 800dbd6:	6123      	str	r3, [r4, #16]
 800dbd8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dbda:	f04f 0900 	mov.w	r9, #0
 800dbde:	e7db      	b.n	800db98 <_printf_float+0x154>
 800dbe0:	b913      	cbnz	r3, 800dbe8 <_printf_float+0x1a4>
 800dbe2:	6822      	ldr	r2, [r4, #0]
 800dbe4:	07d2      	lsls	r2, r2, #31
 800dbe6:	d501      	bpl.n	800dbec <_printf_float+0x1a8>
 800dbe8:	3302      	adds	r3, #2
 800dbea:	e7f4      	b.n	800dbd6 <_printf_float+0x192>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e7f2      	b.n	800dbd6 <_printf_float+0x192>
 800dbf0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf6:	4299      	cmp	r1, r3
 800dbf8:	db05      	blt.n	800dc06 <_printf_float+0x1c2>
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	6121      	str	r1, [r4, #16]
 800dbfe:	07d8      	lsls	r0, r3, #31
 800dc00:	d5ea      	bpl.n	800dbd8 <_printf_float+0x194>
 800dc02:	1c4b      	adds	r3, r1, #1
 800dc04:	e7e7      	b.n	800dbd6 <_printf_float+0x192>
 800dc06:	2900      	cmp	r1, #0
 800dc08:	bfd4      	ite	le
 800dc0a:	f1c1 0202 	rsble	r2, r1, #2
 800dc0e:	2201      	movgt	r2, #1
 800dc10:	4413      	add	r3, r2
 800dc12:	e7e0      	b.n	800dbd6 <_printf_float+0x192>
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	055a      	lsls	r2, r3, #21
 800dc18:	d407      	bmi.n	800dc2a <_printf_float+0x1e6>
 800dc1a:	6923      	ldr	r3, [r4, #16]
 800dc1c:	4642      	mov	r2, r8
 800dc1e:	4631      	mov	r1, r6
 800dc20:	4628      	mov	r0, r5
 800dc22:	47b8      	blx	r7
 800dc24:	3001      	adds	r0, #1
 800dc26:	d12b      	bne.n	800dc80 <_printf_float+0x23c>
 800dc28:	e767      	b.n	800dafa <_printf_float+0xb6>
 800dc2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc2e:	f240 80dd 	bls.w	800ddec <_printf_float+0x3a8>
 800dc32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc36:	2200      	movs	r2, #0
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f7f2 ff5d 	bl	8000af8 <__aeabi_dcmpeq>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d033      	beq.n	800dcaa <_printf_float+0x266>
 800dc42:	4a37      	ldr	r2, [pc, #220]	@ (800dd20 <_printf_float+0x2dc>)
 800dc44:	2301      	movs	r3, #1
 800dc46:	4631      	mov	r1, r6
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b8      	blx	r7
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	f43f af54 	beq.w	800dafa <_printf_float+0xb6>
 800dc52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dc56:	4543      	cmp	r3, r8
 800dc58:	db02      	blt.n	800dc60 <_printf_float+0x21c>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	07d8      	lsls	r0, r3, #31
 800dc5e:	d50f      	bpl.n	800dc80 <_printf_float+0x23c>
 800dc60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc64:	4631      	mov	r1, r6
 800dc66:	4628      	mov	r0, r5
 800dc68:	47b8      	blx	r7
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f43f af45 	beq.w	800dafa <_printf_float+0xb6>
 800dc70:	f04f 0900 	mov.w	r9, #0
 800dc74:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc78:	f104 0a1a 	add.w	sl, r4, #26
 800dc7c:	45c8      	cmp	r8, r9
 800dc7e:	dc09      	bgt.n	800dc94 <_printf_float+0x250>
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	079b      	lsls	r3, r3, #30
 800dc84:	f100 8103 	bmi.w	800de8e <_printf_float+0x44a>
 800dc88:	68e0      	ldr	r0, [r4, #12]
 800dc8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc8c:	4298      	cmp	r0, r3
 800dc8e:	bfb8      	it	lt
 800dc90:	4618      	movlt	r0, r3
 800dc92:	e734      	b.n	800dafe <_printf_float+0xba>
 800dc94:	2301      	movs	r3, #1
 800dc96:	4652      	mov	r2, sl
 800dc98:	4631      	mov	r1, r6
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	47b8      	blx	r7
 800dc9e:	3001      	adds	r0, #1
 800dca0:	f43f af2b 	beq.w	800dafa <_printf_float+0xb6>
 800dca4:	f109 0901 	add.w	r9, r9, #1
 800dca8:	e7e8      	b.n	800dc7c <_printf_float+0x238>
 800dcaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dc39      	bgt.n	800dd24 <_printf_float+0x2e0>
 800dcb0:	4a1b      	ldr	r2, [pc, #108]	@ (800dd20 <_printf_float+0x2dc>)
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	47b8      	blx	r7
 800dcba:	3001      	adds	r0, #1
 800dcbc:	f43f af1d 	beq.w	800dafa <_printf_float+0xb6>
 800dcc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dcc4:	ea59 0303 	orrs.w	r3, r9, r3
 800dcc8:	d102      	bne.n	800dcd0 <_printf_float+0x28c>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	07d9      	lsls	r1, r3, #31
 800dcce:	d5d7      	bpl.n	800dc80 <_printf_float+0x23c>
 800dcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	47b8      	blx	r7
 800dcda:	3001      	adds	r0, #1
 800dcdc:	f43f af0d 	beq.w	800dafa <_printf_float+0xb6>
 800dce0:	f04f 0a00 	mov.w	sl, #0
 800dce4:	f104 0b1a 	add.w	fp, r4, #26
 800dce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcea:	425b      	negs	r3, r3
 800dcec:	4553      	cmp	r3, sl
 800dcee:	dc01      	bgt.n	800dcf4 <_printf_float+0x2b0>
 800dcf0:	464b      	mov	r3, r9
 800dcf2:	e793      	b.n	800dc1c <_printf_float+0x1d8>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	465a      	mov	r2, fp
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f43f aefb 	beq.w	800dafa <_printf_float+0xb6>
 800dd04:	f10a 0a01 	add.w	sl, sl, #1
 800dd08:	e7ee      	b.n	800dce8 <_printf_float+0x2a4>
 800dd0a:	bf00      	nop
 800dd0c:	7fefffff 	.word	0x7fefffff
 800dd10:	08013592 	.word	0x08013592
 800dd14:	0801358e 	.word	0x0801358e
 800dd18:	0801359a 	.word	0x0801359a
 800dd1c:	08013596 	.word	0x08013596
 800dd20:	08013872 	.word	0x08013872
 800dd24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd2a:	4553      	cmp	r3, sl
 800dd2c:	bfa8      	it	ge
 800dd2e:	4653      	movge	r3, sl
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	4699      	mov	r9, r3
 800dd34:	dc36      	bgt.n	800dda4 <_printf_float+0x360>
 800dd36:	f04f 0b00 	mov.w	fp, #0
 800dd3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd3e:	f104 021a 	add.w	r2, r4, #26
 800dd42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd44:	9306      	str	r3, [sp, #24]
 800dd46:	eba3 0309 	sub.w	r3, r3, r9
 800dd4a:	455b      	cmp	r3, fp
 800dd4c:	dc31      	bgt.n	800ddb2 <_printf_float+0x36e>
 800dd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd50:	459a      	cmp	sl, r3
 800dd52:	dc3a      	bgt.n	800ddca <_printf_float+0x386>
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	07da      	lsls	r2, r3, #31
 800dd58:	d437      	bmi.n	800ddca <_printf_float+0x386>
 800dd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd5c:	ebaa 0903 	sub.w	r9, sl, r3
 800dd60:	9b06      	ldr	r3, [sp, #24]
 800dd62:	ebaa 0303 	sub.w	r3, sl, r3
 800dd66:	4599      	cmp	r9, r3
 800dd68:	bfa8      	it	ge
 800dd6a:	4699      	movge	r9, r3
 800dd6c:	f1b9 0f00 	cmp.w	r9, #0
 800dd70:	dc33      	bgt.n	800ddda <_printf_float+0x396>
 800dd72:	f04f 0800 	mov.w	r8, #0
 800dd76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd7a:	f104 0b1a 	add.w	fp, r4, #26
 800dd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd80:	ebaa 0303 	sub.w	r3, sl, r3
 800dd84:	eba3 0309 	sub.w	r3, r3, r9
 800dd88:	4543      	cmp	r3, r8
 800dd8a:	f77f af79 	ble.w	800dc80 <_printf_float+0x23c>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	465a      	mov	r2, fp
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b8      	blx	r7
 800dd98:	3001      	adds	r0, #1
 800dd9a:	f43f aeae 	beq.w	800dafa <_printf_float+0xb6>
 800dd9e:	f108 0801 	add.w	r8, r8, #1
 800dda2:	e7ec      	b.n	800dd7e <_printf_float+0x33a>
 800dda4:	4642      	mov	r2, r8
 800dda6:	4631      	mov	r1, r6
 800dda8:	4628      	mov	r0, r5
 800ddaa:	47b8      	blx	r7
 800ddac:	3001      	adds	r0, #1
 800ddae:	d1c2      	bne.n	800dd36 <_printf_float+0x2f2>
 800ddb0:	e6a3      	b.n	800dafa <_printf_float+0xb6>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	9206      	str	r2, [sp, #24]
 800ddba:	47b8      	blx	r7
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	f43f ae9c 	beq.w	800dafa <_printf_float+0xb6>
 800ddc2:	9a06      	ldr	r2, [sp, #24]
 800ddc4:	f10b 0b01 	add.w	fp, fp, #1
 800ddc8:	e7bb      	b.n	800dd42 <_printf_float+0x2fe>
 800ddca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddce:	4631      	mov	r1, r6
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	47b8      	blx	r7
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	d1c0      	bne.n	800dd5a <_printf_float+0x316>
 800ddd8:	e68f      	b.n	800dafa <_printf_float+0xb6>
 800ddda:	9a06      	ldr	r2, [sp, #24]
 800dddc:	464b      	mov	r3, r9
 800ddde:	4442      	add	r2, r8
 800dde0:	4631      	mov	r1, r6
 800dde2:	4628      	mov	r0, r5
 800dde4:	47b8      	blx	r7
 800dde6:	3001      	adds	r0, #1
 800dde8:	d1c3      	bne.n	800dd72 <_printf_float+0x32e>
 800ddea:	e686      	b.n	800dafa <_printf_float+0xb6>
 800ddec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ddf0:	f1ba 0f01 	cmp.w	sl, #1
 800ddf4:	dc01      	bgt.n	800ddfa <_printf_float+0x3b6>
 800ddf6:	07db      	lsls	r3, r3, #31
 800ddf8:	d536      	bpl.n	800de68 <_printf_float+0x424>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	4642      	mov	r2, r8
 800ddfe:	4631      	mov	r1, r6
 800de00:	4628      	mov	r0, r5
 800de02:	47b8      	blx	r7
 800de04:	3001      	adds	r0, #1
 800de06:	f43f ae78 	beq.w	800dafa <_printf_float+0xb6>
 800de0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de0e:	4631      	mov	r1, r6
 800de10:	4628      	mov	r0, r5
 800de12:	47b8      	blx	r7
 800de14:	3001      	adds	r0, #1
 800de16:	f43f ae70 	beq.w	800dafa <_printf_float+0xb6>
 800de1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de1e:	2200      	movs	r2, #0
 800de20:	2300      	movs	r3, #0
 800de22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de26:	f7f2 fe67 	bl	8000af8 <__aeabi_dcmpeq>
 800de2a:	b9c0      	cbnz	r0, 800de5e <_printf_float+0x41a>
 800de2c:	4653      	mov	r3, sl
 800de2e:	f108 0201 	add.w	r2, r8, #1
 800de32:	4631      	mov	r1, r6
 800de34:	4628      	mov	r0, r5
 800de36:	47b8      	blx	r7
 800de38:	3001      	adds	r0, #1
 800de3a:	d10c      	bne.n	800de56 <_printf_float+0x412>
 800de3c:	e65d      	b.n	800dafa <_printf_float+0xb6>
 800de3e:	2301      	movs	r3, #1
 800de40:	465a      	mov	r2, fp
 800de42:	4631      	mov	r1, r6
 800de44:	4628      	mov	r0, r5
 800de46:	47b8      	blx	r7
 800de48:	3001      	adds	r0, #1
 800de4a:	f43f ae56 	beq.w	800dafa <_printf_float+0xb6>
 800de4e:	f108 0801 	add.w	r8, r8, #1
 800de52:	45d0      	cmp	r8, sl
 800de54:	dbf3      	blt.n	800de3e <_printf_float+0x3fa>
 800de56:	464b      	mov	r3, r9
 800de58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800de5c:	e6df      	b.n	800dc1e <_printf_float+0x1da>
 800de5e:	f04f 0800 	mov.w	r8, #0
 800de62:	f104 0b1a 	add.w	fp, r4, #26
 800de66:	e7f4      	b.n	800de52 <_printf_float+0x40e>
 800de68:	2301      	movs	r3, #1
 800de6a:	4642      	mov	r2, r8
 800de6c:	e7e1      	b.n	800de32 <_printf_float+0x3ee>
 800de6e:	2301      	movs	r3, #1
 800de70:	464a      	mov	r2, r9
 800de72:	4631      	mov	r1, r6
 800de74:	4628      	mov	r0, r5
 800de76:	47b8      	blx	r7
 800de78:	3001      	adds	r0, #1
 800de7a:	f43f ae3e 	beq.w	800dafa <_printf_float+0xb6>
 800de7e:	f108 0801 	add.w	r8, r8, #1
 800de82:	68e3      	ldr	r3, [r4, #12]
 800de84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de86:	1a5b      	subs	r3, r3, r1
 800de88:	4543      	cmp	r3, r8
 800de8a:	dcf0      	bgt.n	800de6e <_printf_float+0x42a>
 800de8c:	e6fc      	b.n	800dc88 <_printf_float+0x244>
 800de8e:	f04f 0800 	mov.w	r8, #0
 800de92:	f104 0919 	add.w	r9, r4, #25
 800de96:	e7f4      	b.n	800de82 <_printf_float+0x43e>

0800de98 <_printf_common>:
 800de98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de9c:	4616      	mov	r6, r2
 800de9e:	4698      	mov	r8, r3
 800dea0:	688a      	ldr	r2, [r1, #8]
 800dea2:	690b      	ldr	r3, [r1, #16]
 800dea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dea8:	4293      	cmp	r3, r2
 800deaa:	bfb8      	it	lt
 800deac:	4613      	movlt	r3, r2
 800deae:	6033      	str	r3, [r6, #0]
 800deb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800deb4:	4607      	mov	r7, r0
 800deb6:	460c      	mov	r4, r1
 800deb8:	b10a      	cbz	r2, 800debe <_printf_common+0x26>
 800deba:	3301      	adds	r3, #1
 800debc:	6033      	str	r3, [r6, #0]
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	0699      	lsls	r1, r3, #26
 800dec2:	bf42      	ittt	mi
 800dec4:	6833      	ldrmi	r3, [r6, #0]
 800dec6:	3302      	addmi	r3, #2
 800dec8:	6033      	strmi	r3, [r6, #0]
 800deca:	6825      	ldr	r5, [r4, #0]
 800decc:	f015 0506 	ands.w	r5, r5, #6
 800ded0:	d106      	bne.n	800dee0 <_printf_common+0x48>
 800ded2:	f104 0a19 	add.w	sl, r4, #25
 800ded6:	68e3      	ldr	r3, [r4, #12]
 800ded8:	6832      	ldr	r2, [r6, #0]
 800deda:	1a9b      	subs	r3, r3, r2
 800dedc:	42ab      	cmp	r3, r5
 800dede:	dc26      	bgt.n	800df2e <_printf_common+0x96>
 800dee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dee4:	6822      	ldr	r2, [r4, #0]
 800dee6:	3b00      	subs	r3, #0
 800dee8:	bf18      	it	ne
 800deea:	2301      	movne	r3, #1
 800deec:	0692      	lsls	r2, r2, #26
 800deee:	d42b      	bmi.n	800df48 <_printf_common+0xb0>
 800def0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800def4:	4641      	mov	r1, r8
 800def6:	4638      	mov	r0, r7
 800def8:	47c8      	blx	r9
 800defa:	3001      	adds	r0, #1
 800defc:	d01e      	beq.n	800df3c <_printf_common+0xa4>
 800defe:	6823      	ldr	r3, [r4, #0]
 800df00:	6922      	ldr	r2, [r4, #16]
 800df02:	f003 0306 	and.w	r3, r3, #6
 800df06:	2b04      	cmp	r3, #4
 800df08:	bf02      	ittt	eq
 800df0a:	68e5      	ldreq	r5, [r4, #12]
 800df0c:	6833      	ldreq	r3, [r6, #0]
 800df0e:	1aed      	subeq	r5, r5, r3
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	bf0c      	ite	eq
 800df14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df18:	2500      	movne	r5, #0
 800df1a:	4293      	cmp	r3, r2
 800df1c:	bfc4      	itt	gt
 800df1e:	1a9b      	subgt	r3, r3, r2
 800df20:	18ed      	addgt	r5, r5, r3
 800df22:	2600      	movs	r6, #0
 800df24:	341a      	adds	r4, #26
 800df26:	42b5      	cmp	r5, r6
 800df28:	d11a      	bne.n	800df60 <_printf_common+0xc8>
 800df2a:	2000      	movs	r0, #0
 800df2c:	e008      	b.n	800df40 <_printf_common+0xa8>
 800df2e:	2301      	movs	r3, #1
 800df30:	4652      	mov	r2, sl
 800df32:	4641      	mov	r1, r8
 800df34:	4638      	mov	r0, r7
 800df36:	47c8      	blx	r9
 800df38:	3001      	adds	r0, #1
 800df3a:	d103      	bne.n	800df44 <_printf_common+0xac>
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295
 800df40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df44:	3501      	adds	r5, #1
 800df46:	e7c6      	b.n	800ded6 <_printf_common+0x3e>
 800df48:	18e1      	adds	r1, r4, r3
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	2030      	movs	r0, #48	@ 0x30
 800df4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df52:	4422      	add	r2, r4
 800df54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df5c:	3302      	adds	r3, #2
 800df5e:	e7c7      	b.n	800def0 <_printf_common+0x58>
 800df60:	2301      	movs	r3, #1
 800df62:	4622      	mov	r2, r4
 800df64:	4641      	mov	r1, r8
 800df66:	4638      	mov	r0, r7
 800df68:	47c8      	blx	r9
 800df6a:	3001      	adds	r0, #1
 800df6c:	d0e6      	beq.n	800df3c <_printf_common+0xa4>
 800df6e:	3601      	adds	r6, #1
 800df70:	e7d9      	b.n	800df26 <_printf_common+0x8e>
	...

0800df74 <_printf_i>:
 800df74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df78:	7e0f      	ldrb	r7, [r1, #24]
 800df7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df7c:	2f78      	cmp	r7, #120	@ 0x78
 800df7e:	4691      	mov	r9, r2
 800df80:	4680      	mov	r8, r0
 800df82:	460c      	mov	r4, r1
 800df84:	469a      	mov	sl, r3
 800df86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df8a:	d807      	bhi.n	800df9c <_printf_i+0x28>
 800df8c:	2f62      	cmp	r7, #98	@ 0x62
 800df8e:	d80a      	bhi.n	800dfa6 <_printf_i+0x32>
 800df90:	2f00      	cmp	r7, #0
 800df92:	f000 80d1 	beq.w	800e138 <_printf_i+0x1c4>
 800df96:	2f58      	cmp	r7, #88	@ 0x58
 800df98:	f000 80b8 	beq.w	800e10c <_printf_i+0x198>
 800df9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dfa4:	e03a      	b.n	800e01c <_printf_i+0xa8>
 800dfa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dfaa:	2b15      	cmp	r3, #21
 800dfac:	d8f6      	bhi.n	800df9c <_printf_i+0x28>
 800dfae:	a101      	add	r1, pc, #4	@ (adr r1, 800dfb4 <_printf_i+0x40>)
 800dfb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfb4:	0800e00d 	.word	0x0800e00d
 800dfb8:	0800e021 	.word	0x0800e021
 800dfbc:	0800df9d 	.word	0x0800df9d
 800dfc0:	0800df9d 	.word	0x0800df9d
 800dfc4:	0800df9d 	.word	0x0800df9d
 800dfc8:	0800df9d 	.word	0x0800df9d
 800dfcc:	0800e021 	.word	0x0800e021
 800dfd0:	0800df9d 	.word	0x0800df9d
 800dfd4:	0800df9d 	.word	0x0800df9d
 800dfd8:	0800df9d 	.word	0x0800df9d
 800dfdc:	0800df9d 	.word	0x0800df9d
 800dfe0:	0800e11f 	.word	0x0800e11f
 800dfe4:	0800e04b 	.word	0x0800e04b
 800dfe8:	0800e0d9 	.word	0x0800e0d9
 800dfec:	0800df9d 	.word	0x0800df9d
 800dff0:	0800df9d 	.word	0x0800df9d
 800dff4:	0800e141 	.word	0x0800e141
 800dff8:	0800df9d 	.word	0x0800df9d
 800dffc:	0800e04b 	.word	0x0800e04b
 800e000:	0800df9d 	.word	0x0800df9d
 800e004:	0800df9d 	.word	0x0800df9d
 800e008:	0800e0e1 	.word	0x0800e0e1
 800e00c:	6833      	ldr	r3, [r6, #0]
 800e00e:	1d1a      	adds	r2, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6032      	str	r2, [r6, #0]
 800e014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e01c:	2301      	movs	r3, #1
 800e01e:	e09c      	b.n	800e15a <_printf_i+0x1e6>
 800e020:	6833      	ldr	r3, [r6, #0]
 800e022:	6820      	ldr	r0, [r4, #0]
 800e024:	1d19      	adds	r1, r3, #4
 800e026:	6031      	str	r1, [r6, #0]
 800e028:	0606      	lsls	r6, r0, #24
 800e02a:	d501      	bpl.n	800e030 <_printf_i+0xbc>
 800e02c:	681d      	ldr	r5, [r3, #0]
 800e02e:	e003      	b.n	800e038 <_printf_i+0xc4>
 800e030:	0645      	lsls	r5, r0, #25
 800e032:	d5fb      	bpl.n	800e02c <_printf_i+0xb8>
 800e034:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e038:	2d00      	cmp	r5, #0
 800e03a:	da03      	bge.n	800e044 <_printf_i+0xd0>
 800e03c:	232d      	movs	r3, #45	@ 0x2d
 800e03e:	426d      	negs	r5, r5
 800e040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e044:	4858      	ldr	r0, [pc, #352]	@ (800e1a8 <_printf_i+0x234>)
 800e046:	230a      	movs	r3, #10
 800e048:	e011      	b.n	800e06e <_printf_i+0xfa>
 800e04a:	6821      	ldr	r1, [r4, #0]
 800e04c:	6833      	ldr	r3, [r6, #0]
 800e04e:	0608      	lsls	r0, r1, #24
 800e050:	f853 5b04 	ldr.w	r5, [r3], #4
 800e054:	d402      	bmi.n	800e05c <_printf_i+0xe8>
 800e056:	0649      	lsls	r1, r1, #25
 800e058:	bf48      	it	mi
 800e05a:	b2ad      	uxthmi	r5, r5
 800e05c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e05e:	4852      	ldr	r0, [pc, #328]	@ (800e1a8 <_printf_i+0x234>)
 800e060:	6033      	str	r3, [r6, #0]
 800e062:	bf14      	ite	ne
 800e064:	230a      	movne	r3, #10
 800e066:	2308      	moveq	r3, #8
 800e068:	2100      	movs	r1, #0
 800e06a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e06e:	6866      	ldr	r6, [r4, #4]
 800e070:	60a6      	str	r6, [r4, #8]
 800e072:	2e00      	cmp	r6, #0
 800e074:	db05      	blt.n	800e082 <_printf_i+0x10e>
 800e076:	6821      	ldr	r1, [r4, #0]
 800e078:	432e      	orrs	r6, r5
 800e07a:	f021 0104 	bic.w	r1, r1, #4
 800e07e:	6021      	str	r1, [r4, #0]
 800e080:	d04b      	beq.n	800e11a <_printf_i+0x1a6>
 800e082:	4616      	mov	r6, r2
 800e084:	fbb5 f1f3 	udiv	r1, r5, r3
 800e088:	fb03 5711 	mls	r7, r3, r1, r5
 800e08c:	5dc7      	ldrb	r7, [r0, r7]
 800e08e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e092:	462f      	mov	r7, r5
 800e094:	42bb      	cmp	r3, r7
 800e096:	460d      	mov	r5, r1
 800e098:	d9f4      	bls.n	800e084 <_printf_i+0x110>
 800e09a:	2b08      	cmp	r3, #8
 800e09c:	d10b      	bne.n	800e0b6 <_printf_i+0x142>
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	07df      	lsls	r7, r3, #31
 800e0a2:	d508      	bpl.n	800e0b6 <_printf_i+0x142>
 800e0a4:	6923      	ldr	r3, [r4, #16]
 800e0a6:	6861      	ldr	r1, [r4, #4]
 800e0a8:	4299      	cmp	r1, r3
 800e0aa:	bfde      	ittt	le
 800e0ac:	2330      	movle	r3, #48	@ 0x30
 800e0ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0b6:	1b92      	subs	r2, r2, r6
 800e0b8:	6122      	str	r2, [r4, #16]
 800e0ba:	f8cd a000 	str.w	sl, [sp]
 800e0be:	464b      	mov	r3, r9
 800e0c0:	aa03      	add	r2, sp, #12
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4640      	mov	r0, r8
 800e0c6:	f7ff fee7 	bl	800de98 <_printf_common>
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	d14a      	bne.n	800e164 <_printf_i+0x1f0>
 800e0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d2:	b004      	add	sp, #16
 800e0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	f043 0320 	orr.w	r3, r3, #32
 800e0de:	6023      	str	r3, [r4, #0]
 800e0e0:	4832      	ldr	r0, [pc, #200]	@ (800e1ac <_printf_i+0x238>)
 800e0e2:	2778      	movs	r7, #120	@ 0x78
 800e0e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0e8:	6823      	ldr	r3, [r4, #0]
 800e0ea:	6831      	ldr	r1, [r6, #0]
 800e0ec:	061f      	lsls	r7, r3, #24
 800e0ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0f2:	d402      	bmi.n	800e0fa <_printf_i+0x186>
 800e0f4:	065f      	lsls	r7, r3, #25
 800e0f6:	bf48      	it	mi
 800e0f8:	b2ad      	uxthmi	r5, r5
 800e0fa:	6031      	str	r1, [r6, #0]
 800e0fc:	07d9      	lsls	r1, r3, #31
 800e0fe:	bf44      	itt	mi
 800e100:	f043 0320 	orrmi.w	r3, r3, #32
 800e104:	6023      	strmi	r3, [r4, #0]
 800e106:	b11d      	cbz	r5, 800e110 <_printf_i+0x19c>
 800e108:	2310      	movs	r3, #16
 800e10a:	e7ad      	b.n	800e068 <_printf_i+0xf4>
 800e10c:	4826      	ldr	r0, [pc, #152]	@ (800e1a8 <_printf_i+0x234>)
 800e10e:	e7e9      	b.n	800e0e4 <_printf_i+0x170>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	f023 0320 	bic.w	r3, r3, #32
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	e7f6      	b.n	800e108 <_printf_i+0x194>
 800e11a:	4616      	mov	r6, r2
 800e11c:	e7bd      	b.n	800e09a <_printf_i+0x126>
 800e11e:	6833      	ldr	r3, [r6, #0]
 800e120:	6825      	ldr	r5, [r4, #0]
 800e122:	6961      	ldr	r1, [r4, #20]
 800e124:	1d18      	adds	r0, r3, #4
 800e126:	6030      	str	r0, [r6, #0]
 800e128:	062e      	lsls	r6, r5, #24
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	d501      	bpl.n	800e132 <_printf_i+0x1be>
 800e12e:	6019      	str	r1, [r3, #0]
 800e130:	e002      	b.n	800e138 <_printf_i+0x1c4>
 800e132:	0668      	lsls	r0, r5, #25
 800e134:	d5fb      	bpl.n	800e12e <_printf_i+0x1ba>
 800e136:	8019      	strh	r1, [r3, #0]
 800e138:	2300      	movs	r3, #0
 800e13a:	6123      	str	r3, [r4, #16]
 800e13c:	4616      	mov	r6, r2
 800e13e:	e7bc      	b.n	800e0ba <_printf_i+0x146>
 800e140:	6833      	ldr	r3, [r6, #0]
 800e142:	1d1a      	adds	r2, r3, #4
 800e144:	6032      	str	r2, [r6, #0]
 800e146:	681e      	ldr	r6, [r3, #0]
 800e148:	6862      	ldr	r2, [r4, #4]
 800e14a:	2100      	movs	r1, #0
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7f2 f857 	bl	8000200 <memchr>
 800e152:	b108      	cbz	r0, 800e158 <_printf_i+0x1e4>
 800e154:	1b80      	subs	r0, r0, r6
 800e156:	6060      	str	r0, [r4, #4]
 800e158:	6863      	ldr	r3, [r4, #4]
 800e15a:	6123      	str	r3, [r4, #16]
 800e15c:	2300      	movs	r3, #0
 800e15e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e162:	e7aa      	b.n	800e0ba <_printf_i+0x146>
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	4632      	mov	r2, r6
 800e168:	4649      	mov	r1, r9
 800e16a:	4640      	mov	r0, r8
 800e16c:	47d0      	blx	sl
 800e16e:	3001      	adds	r0, #1
 800e170:	d0ad      	beq.n	800e0ce <_printf_i+0x15a>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	079b      	lsls	r3, r3, #30
 800e176:	d413      	bmi.n	800e1a0 <_printf_i+0x22c>
 800e178:	68e0      	ldr	r0, [r4, #12]
 800e17a:	9b03      	ldr	r3, [sp, #12]
 800e17c:	4298      	cmp	r0, r3
 800e17e:	bfb8      	it	lt
 800e180:	4618      	movlt	r0, r3
 800e182:	e7a6      	b.n	800e0d2 <_printf_i+0x15e>
 800e184:	2301      	movs	r3, #1
 800e186:	4632      	mov	r2, r6
 800e188:	4649      	mov	r1, r9
 800e18a:	4640      	mov	r0, r8
 800e18c:	47d0      	blx	sl
 800e18e:	3001      	adds	r0, #1
 800e190:	d09d      	beq.n	800e0ce <_printf_i+0x15a>
 800e192:	3501      	adds	r5, #1
 800e194:	68e3      	ldr	r3, [r4, #12]
 800e196:	9903      	ldr	r1, [sp, #12]
 800e198:	1a5b      	subs	r3, r3, r1
 800e19a:	42ab      	cmp	r3, r5
 800e19c:	dcf2      	bgt.n	800e184 <_printf_i+0x210>
 800e19e:	e7eb      	b.n	800e178 <_printf_i+0x204>
 800e1a0:	2500      	movs	r5, #0
 800e1a2:	f104 0619 	add.w	r6, r4, #25
 800e1a6:	e7f5      	b.n	800e194 <_printf_i+0x220>
 800e1a8:	0801359e 	.word	0x0801359e
 800e1ac:	080135af 	.word	0x080135af

0800e1b0 <std>:
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	b510      	push	{r4, lr}
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1be:	6083      	str	r3, [r0, #8]
 800e1c0:	8181      	strh	r1, [r0, #12]
 800e1c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e1c4:	81c2      	strh	r2, [r0, #14]
 800e1c6:	6183      	str	r3, [r0, #24]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	2208      	movs	r2, #8
 800e1cc:	305c      	adds	r0, #92	@ 0x5c
 800e1ce:	f000 fab1 	bl	800e734 <memset>
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e208 <std+0x58>)
 800e1d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e20c <std+0x5c>)
 800e1d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e1da:	4b0d      	ldr	r3, [pc, #52]	@ (800e210 <std+0x60>)
 800e1dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e1de:	4b0d      	ldr	r3, [pc, #52]	@ (800e214 <std+0x64>)
 800e1e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <std+0x68>)
 800e1e4:	6224      	str	r4, [r4, #32]
 800e1e6:	429c      	cmp	r4, r3
 800e1e8:	d006      	beq.n	800e1f8 <std+0x48>
 800e1ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e1ee:	4294      	cmp	r4, r2
 800e1f0:	d002      	beq.n	800e1f8 <std+0x48>
 800e1f2:	33d0      	adds	r3, #208	@ 0xd0
 800e1f4:	429c      	cmp	r4, r3
 800e1f6:	d105      	bne.n	800e204 <std+0x54>
 800e1f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e200:	f001 ba82 	b.w	800f708 <__retarget_lock_init_recursive>
 800e204:	bd10      	pop	{r4, pc}
 800e206:	bf00      	nop
 800e208:	0800e52d 	.word	0x0800e52d
 800e20c:	0800e553 	.word	0x0800e553
 800e210:	0800e58b 	.word	0x0800e58b
 800e214:	0800e5af 	.word	0x0800e5af
 800e218:	20006e0c 	.word	0x20006e0c

0800e21c <stdio_exit_handler>:
 800e21c:	4a02      	ldr	r2, [pc, #8]	@ (800e228 <stdio_exit_handler+0xc>)
 800e21e:	4903      	ldr	r1, [pc, #12]	@ (800e22c <stdio_exit_handler+0x10>)
 800e220:	4803      	ldr	r0, [pc, #12]	@ (800e230 <stdio_exit_handler+0x14>)
 800e222:	f000 b869 	b.w	800e2f8 <_fwalk_sglue>
 800e226:	bf00      	nop
 800e228:	20000024 	.word	0x20000024
 800e22c:	08012459 	.word	0x08012459
 800e230:	200001a8 	.word	0x200001a8

0800e234 <cleanup_stdio>:
 800e234:	6841      	ldr	r1, [r0, #4]
 800e236:	4b0c      	ldr	r3, [pc, #48]	@ (800e268 <cleanup_stdio+0x34>)
 800e238:	4299      	cmp	r1, r3
 800e23a:	b510      	push	{r4, lr}
 800e23c:	4604      	mov	r4, r0
 800e23e:	d001      	beq.n	800e244 <cleanup_stdio+0x10>
 800e240:	f004 f90a 	bl	8012458 <_fflush_r>
 800e244:	68a1      	ldr	r1, [r4, #8]
 800e246:	4b09      	ldr	r3, [pc, #36]	@ (800e26c <cleanup_stdio+0x38>)
 800e248:	4299      	cmp	r1, r3
 800e24a:	d002      	beq.n	800e252 <cleanup_stdio+0x1e>
 800e24c:	4620      	mov	r0, r4
 800e24e:	f004 f903 	bl	8012458 <_fflush_r>
 800e252:	68e1      	ldr	r1, [r4, #12]
 800e254:	4b06      	ldr	r3, [pc, #24]	@ (800e270 <cleanup_stdio+0x3c>)
 800e256:	4299      	cmp	r1, r3
 800e258:	d004      	beq.n	800e264 <cleanup_stdio+0x30>
 800e25a:	4620      	mov	r0, r4
 800e25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e260:	f004 b8fa 	b.w	8012458 <_fflush_r>
 800e264:	bd10      	pop	{r4, pc}
 800e266:	bf00      	nop
 800e268:	20006e0c 	.word	0x20006e0c
 800e26c:	20006e74 	.word	0x20006e74
 800e270:	20006edc 	.word	0x20006edc

0800e274 <global_stdio_init.part.0>:
 800e274:	b510      	push	{r4, lr}
 800e276:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a4 <global_stdio_init.part.0+0x30>)
 800e278:	4c0b      	ldr	r4, [pc, #44]	@ (800e2a8 <global_stdio_init.part.0+0x34>)
 800e27a:	4a0c      	ldr	r2, [pc, #48]	@ (800e2ac <global_stdio_init.part.0+0x38>)
 800e27c:	601a      	str	r2, [r3, #0]
 800e27e:	4620      	mov	r0, r4
 800e280:	2200      	movs	r2, #0
 800e282:	2104      	movs	r1, #4
 800e284:	f7ff ff94 	bl	800e1b0 <std>
 800e288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e28c:	2201      	movs	r2, #1
 800e28e:	2109      	movs	r1, #9
 800e290:	f7ff ff8e 	bl	800e1b0 <std>
 800e294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e298:	2202      	movs	r2, #2
 800e29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e29e:	2112      	movs	r1, #18
 800e2a0:	f7ff bf86 	b.w	800e1b0 <std>
 800e2a4:	20006f44 	.word	0x20006f44
 800e2a8:	20006e0c 	.word	0x20006e0c
 800e2ac:	0800e21d 	.word	0x0800e21d

0800e2b0 <__sfp_lock_acquire>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	@ (800e2b8 <__sfp_lock_acquire+0x8>)
 800e2b2:	f001 ba2b 	b.w	800f70c <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	20006f73 	.word	0x20006f73

0800e2bc <__sfp_lock_release>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	@ (800e2c4 <__sfp_lock_release+0x8>)
 800e2be:	f001 ba27 	b.w	800f710 <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	20006f73 	.word	0x20006f73

0800e2c8 <__sinit>:
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	f7ff fff0 	bl	800e2b0 <__sfp_lock_acquire>
 800e2d0:	6a23      	ldr	r3, [r4, #32]
 800e2d2:	b11b      	cbz	r3, 800e2dc <__sinit+0x14>
 800e2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d8:	f7ff bff0 	b.w	800e2bc <__sfp_lock_release>
 800e2dc:	4b04      	ldr	r3, [pc, #16]	@ (800e2f0 <__sinit+0x28>)
 800e2de:	6223      	str	r3, [r4, #32]
 800e2e0:	4b04      	ldr	r3, [pc, #16]	@ (800e2f4 <__sinit+0x2c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1f5      	bne.n	800e2d4 <__sinit+0xc>
 800e2e8:	f7ff ffc4 	bl	800e274 <global_stdio_init.part.0>
 800e2ec:	e7f2      	b.n	800e2d4 <__sinit+0xc>
 800e2ee:	bf00      	nop
 800e2f0:	0800e235 	.word	0x0800e235
 800e2f4:	20006f44 	.word	0x20006f44

0800e2f8 <_fwalk_sglue>:
 800e2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2fc:	4607      	mov	r7, r0
 800e2fe:	4688      	mov	r8, r1
 800e300:	4614      	mov	r4, r2
 800e302:	2600      	movs	r6, #0
 800e304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e308:	f1b9 0901 	subs.w	r9, r9, #1
 800e30c:	d505      	bpl.n	800e31a <_fwalk_sglue+0x22>
 800e30e:	6824      	ldr	r4, [r4, #0]
 800e310:	2c00      	cmp	r4, #0
 800e312:	d1f7      	bne.n	800e304 <_fwalk_sglue+0xc>
 800e314:	4630      	mov	r0, r6
 800e316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e31a:	89ab      	ldrh	r3, [r5, #12]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d907      	bls.n	800e330 <_fwalk_sglue+0x38>
 800e320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e324:	3301      	adds	r3, #1
 800e326:	d003      	beq.n	800e330 <_fwalk_sglue+0x38>
 800e328:	4629      	mov	r1, r5
 800e32a:	4638      	mov	r0, r7
 800e32c:	47c0      	blx	r8
 800e32e:	4306      	orrs	r6, r0
 800e330:	3568      	adds	r5, #104	@ 0x68
 800e332:	e7e9      	b.n	800e308 <_fwalk_sglue+0x10>

0800e334 <iprintf>:
 800e334:	b40f      	push	{r0, r1, r2, r3}
 800e336:	b507      	push	{r0, r1, r2, lr}
 800e338:	4906      	ldr	r1, [pc, #24]	@ (800e354 <iprintf+0x20>)
 800e33a:	ab04      	add	r3, sp, #16
 800e33c:	6808      	ldr	r0, [r1, #0]
 800e33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e342:	6881      	ldr	r1, [r0, #8]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	f003 fd9d 	bl	8011e84 <_vfiprintf_r>
 800e34a:	b003      	add	sp, #12
 800e34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e350:	b004      	add	sp, #16
 800e352:	4770      	bx	lr
 800e354:	200001a4 	.word	0x200001a4

0800e358 <putchar>:
 800e358:	4b02      	ldr	r3, [pc, #8]	@ (800e364 <putchar+0xc>)
 800e35a:	4601      	mov	r1, r0
 800e35c:	6818      	ldr	r0, [r3, #0]
 800e35e:	6882      	ldr	r2, [r0, #8]
 800e360:	f004 b916 	b.w	8012590 <_putc_r>
 800e364:	200001a4 	.word	0x200001a4

0800e368 <_puts_r>:
 800e368:	6a03      	ldr	r3, [r0, #32]
 800e36a:	b570      	push	{r4, r5, r6, lr}
 800e36c:	6884      	ldr	r4, [r0, #8]
 800e36e:	4605      	mov	r5, r0
 800e370:	460e      	mov	r6, r1
 800e372:	b90b      	cbnz	r3, 800e378 <_puts_r+0x10>
 800e374:	f7ff ffa8 	bl	800e2c8 <__sinit>
 800e378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e37a:	07db      	lsls	r3, r3, #31
 800e37c:	d405      	bmi.n	800e38a <_puts_r+0x22>
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	0598      	lsls	r0, r3, #22
 800e382:	d402      	bmi.n	800e38a <_puts_r+0x22>
 800e384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e386:	f001 f9c1 	bl	800f70c <__retarget_lock_acquire_recursive>
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	0719      	lsls	r1, r3, #28
 800e38e:	d502      	bpl.n	800e396 <_puts_r+0x2e>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d135      	bne.n	800e402 <_puts_r+0x9a>
 800e396:	4621      	mov	r1, r4
 800e398:	4628      	mov	r0, r5
 800e39a:	f000 f94b 	bl	800e634 <__swsetup_r>
 800e39e:	b380      	cbz	r0, 800e402 <_puts_r+0x9a>
 800e3a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e3a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3a6:	07da      	lsls	r2, r3, #31
 800e3a8:	d405      	bmi.n	800e3b6 <_puts_r+0x4e>
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	059b      	lsls	r3, r3, #22
 800e3ae:	d402      	bmi.n	800e3b6 <_puts_r+0x4e>
 800e3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3b2:	f001 f9ad 	bl	800f710 <__retarget_lock_release_recursive>
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	da04      	bge.n	800e3c8 <_puts_r+0x60>
 800e3be:	69a2      	ldr	r2, [r4, #24]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	dc17      	bgt.n	800e3f4 <_puts_r+0x8c>
 800e3c4:	290a      	cmp	r1, #10
 800e3c6:	d015      	beq.n	800e3f4 <_puts_r+0x8c>
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	1c5a      	adds	r2, r3, #1
 800e3cc:	6022      	str	r2, [r4, #0]
 800e3ce:	7019      	strb	r1, [r3, #0]
 800e3d0:	68a3      	ldr	r3, [r4, #8]
 800e3d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	60a3      	str	r3, [r4, #8]
 800e3da:	2900      	cmp	r1, #0
 800e3dc:	d1ed      	bne.n	800e3ba <_puts_r+0x52>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	da11      	bge.n	800e406 <_puts_r+0x9e>
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	210a      	movs	r1, #10
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f000 f8e5 	bl	800e5b6 <__swbuf_r>
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	d0d7      	beq.n	800e3a0 <_puts_r+0x38>
 800e3f0:	250a      	movs	r5, #10
 800e3f2:	e7d7      	b.n	800e3a4 <_puts_r+0x3c>
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	f000 f8dd 	bl	800e5b6 <__swbuf_r>
 800e3fc:	3001      	adds	r0, #1
 800e3fe:	d1e7      	bne.n	800e3d0 <_puts_r+0x68>
 800e400:	e7ce      	b.n	800e3a0 <_puts_r+0x38>
 800e402:	3e01      	subs	r6, #1
 800e404:	e7e4      	b.n	800e3d0 <_puts_r+0x68>
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	6022      	str	r2, [r4, #0]
 800e40c:	220a      	movs	r2, #10
 800e40e:	701a      	strb	r2, [r3, #0]
 800e410:	e7ee      	b.n	800e3f0 <_puts_r+0x88>
	...

0800e414 <puts>:
 800e414:	4b02      	ldr	r3, [pc, #8]	@ (800e420 <puts+0xc>)
 800e416:	4601      	mov	r1, r0
 800e418:	6818      	ldr	r0, [r3, #0]
 800e41a:	f7ff bfa5 	b.w	800e368 <_puts_r>
 800e41e:	bf00      	nop
 800e420:	200001a4 	.word	0x200001a4

0800e424 <sniprintf>:
 800e424:	b40c      	push	{r2, r3}
 800e426:	b530      	push	{r4, r5, lr}
 800e428:	4b18      	ldr	r3, [pc, #96]	@ (800e48c <sniprintf+0x68>)
 800e42a:	1e0c      	subs	r4, r1, #0
 800e42c:	681d      	ldr	r5, [r3, #0]
 800e42e:	b09d      	sub	sp, #116	@ 0x74
 800e430:	da08      	bge.n	800e444 <sniprintf+0x20>
 800e432:	238b      	movs	r3, #139	@ 0x8b
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	f04f 30ff 	mov.w	r0, #4294967295
 800e43a:	b01d      	add	sp, #116	@ 0x74
 800e43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e440:	b002      	add	sp, #8
 800e442:	4770      	bx	lr
 800e444:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e448:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e44c:	f04f 0300 	mov.w	r3, #0
 800e450:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e452:	bf14      	ite	ne
 800e454:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e458:	4623      	moveq	r3, r4
 800e45a:	9304      	str	r3, [sp, #16]
 800e45c:	9307      	str	r3, [sp, #28]
 800e45e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e462:	9002      	str	r0, [sp, #8]
 800e464:	9006      	str	r0, [sp, #24]
 800e466:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e46a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e46c:	ab21      	add	r3, sp, #132	@ 0x84
 800e46e:	a902      	add	r1, sp, #8
 800e470:	4628      	mov	r0, r5
 800e472:	9301      	str	r3, [sp, #4]
 800e474:	f003 fa10 	bl	8011898 <_svfiprintf_r>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	bfbc      	itt	lt
 800e47c:	238b      	movlt	r3, #139	@ 0x8b
 800e47e:	602b      	strlt	r3, [r5, #0]
 800e480:	2c00      	cmp	r4, #0
 800e482:	d0da      	beq.n	800e43a <sniprintf+0x16>
 800e484:	9b02      	ldr	r3, [sp, #8]
 800e486:	2200      	movs	r2, #0
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	e7d6      	b.n	800e43a <sniprintf+0x16>
 800e48c:	200001a4 	.word	0x200001a4

0800e490 <siprintf>:
 800e490:	b40e      	push	{r1, r2, r3}
 800e492:	b510      	push	{r4, lr}
 800e494:	b09d      	sub	sp, #116	@ 0x74
 800e496:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e498:	9002      	str	r0, [sp, #8]
 800e49a:	9006      	str	r0, [sp, #24]
 800e49c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e4a0:	480a      	ldr	r0, [pc, #40]	@ (800e4cc <siprintf+0x3c>)
 800e4a2:	9107      	str	r1, [sp, #28]
 800e4a4:	9104      	str	r1, [sp, #16]
 800e4a6:	490a      	ldr	r1, [pc, #40]	@ (800e4d0 <siprintf+0x40>)
 800e4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ac:	9105      	str	r1, [sp, #20]
 800e4ae:	2400      	movs	r4, #0
 800e4b0:	a902      	add	r1, sp, #8
 800e4b2:	6800      	ldr	r0, [r0, #0]
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e4b8:	f003 f9ee 	bl	8011898 <_svfiprintf_r>
 800e4bc:	9b02      	ldr	r3, [sp, #8]
 800e4be:	701c      	strb	r4, [r3, #0]
 800e4c0:	b01d      	add	sp, #116	@ 0x74
 800e4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4c6:	b003      	add	sp, #12
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	200001a4 	.word	0x200001a4
 800e4d0:	ffff0208 	.word	0xffff0208

0800e4d4 <siscanf>:
 800e4d4:	b40e      	push	{r1, r2, r3}
 800e4d6:	b570      	push	{r4, r5, r6, lr}
 800e4d8:	b09d      	sub	sp, #116	@ 0x74
 800e4da:	ac21      	add	r4, sp, #132	@ 0x84
 800e4dc:	2500      	movs	r5, #0
 800e4de:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e4e2:	f854 6b04 	ldr.w	r6, [r4], #4
 800e4e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e4ea:	951b      	str	r5, [sp, #108]	@ 0x6c
 800e4ec:	9002      	str	r0, [sp, #8]
 800e4ee:	9006      	str	r0, [sp, #24]
 800e4f0:	f7f1 fed6 	bl	80002a0 <strlen>
 800e4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e524 <siscanf+0x50>)
 800e4f6:	9003      	str	r0, [sp, #12]
 800e4f8:	9007      	str	r0, [sp, #28]
 800e4fa:	480b      	ldr	r0, [pc, #44]	@ (800e528 <siscanf+0x54>)
 800e4fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e502:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e506:	4632      	mov	r2, r6
 800e508:	4623      	mov	r3, r4
 800e50a:	a902      	add	r1, sp, #8
 800e50c:	6800      	ldr	r0, [r0, #0]
 800e50e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e510:	9514      	str	r5, [sp, #80]	@ 0x50
 800e512:	9401      	str	r4, [sp, #4]
 800e514:	f003 fb16 	bl	8011b44 <__ssvfiscanf_r>
 800e518:	b01d      	add	sp, #116	@ 0x74
 800e51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e51e:	b003      	add	sp, #12
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	0800e54f 	.word	0x0800e54f
 800e528:	200001a4 	.word	0x200001a4

0800e52c <__sread>:
 800e52c:	b510      	push	{r4, lr}
 800e52e:	460c      	mov	r4, r1
 800e530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e534:	f001 f89a 	bl	800f66c <_read_r>
 800e538:	2800      	cmp	r0, #0
 800e53a:	bfab      	itete	ge
 800e53c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e53e:	89a3      	ldrhlt	r3, [r4, #12]
 800e540:	181b      	addge	r3, r3, r0
 800e542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e546:	bfac      	ite	ge
 800e548:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e54a:	81a3      	strhlt	r3, [r4, #12]
 800e54c:	bd10      	pop	{r4, pc}

0800e54e <__seofread>:
 800e54e:	2000      	movs	r0, #0
 800e550:	4770      	bx	lr

0800e552 <__swrite>:
 800e552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e556:	461f      	mov	r7, r3
 800e558:	898b      	ldrh	r3, [r1, #12]
 800e55a:	05db      	lsls	r3, r3, #23
 800e55c:	4605      	mov	r5, r0
 800e55e:	460c      	mov	r4, r1
 800e560:	4616      	mov	r6, r2
 800e562:	d505      	bpl.n	800e570 <__swrite+0x1e>
 800e564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e568:	2302      	movs	r3, #2
 800e56a:	2200      	movs	r2, #0
 800e56c:	f001 f86c 	bl	800f648 <_lseek_r>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	4632      	mov	r2, r6
 800e57e:	463b      	mov	r3, r7
 800e580:	4628      	mov	r0, r5
 800e582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e586:	f001 b883 	b.w	800f690 <_write_r>

0800e58a <__sseek>:
 800e58a:	b510      	push	{r4, lr}
 800e58c:	460c      	mov	r4, r1
 800e58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e592:	f001 f859 	bl	800f648 <_lseek_r>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	bf15      	itete	ne
 800e59c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e59e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e5a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e5a6:	81a3      	strheq	r3, [r4, #12]
 800e5a8:	bf18      	it	ne
 800e5aa:	81a3      	strhne	r3, [r4, #12]
 800e5ac:	bd10      	pop	{r4, pc}

0800e5ae <__sclose>:
 800e5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b2:	f001 b827 	b.w	800f604 <_close_r>

0800e5b6 <__swbuf_r>:
 800e5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b8:	460e      	mov	r6, r1
 800e5ba:	4614      	mov	r4, r2
 800e5bc:	4605      	mov	r5, r0
 800e5be:	b118      	cbz	r0, 800e5c8 <__swbuf_r+0x12>
 800e5c0:	6a03      	ldr	r3, [r0, #32]
 800e5c2:	b90b      	cbnz	r3, 800e5c8 <__swbuf_r+0x12>
 800e5c4:	f7ff fe80 	bl	800e2c8 <__sinit>
 800e5c8:	69a3      	ldr	r3, [r4, #24]
 800e5ca:	60a3      	str	r3, [r4, #8]
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	071a      	lsls	r2, r3, #28
 800e5d0:	d501      	bpl.n	800e5d6 <__swbuf_r+0x20>
 800e5d2:	6923      	ldr	r3, [r4, #16]
 800e5d4:	b943      	cbnz	r3, 800e5e8 <__swbuf_r+0x32>
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f000 f82b 	bl	800e634 <__swsetup_r>
 800e5de:	b118      	cbz	r0, 800e5e8 <__swbuf_r+0x32>
 800e5e0:	f04f 37ff 	mov.w	r7, #4294967295
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	6922      	ldr	r2, [r4, #16]
 800e5ec:	1a98      	subs	r0, r3, r2
 800e5ee:	6963      	ldr	r3, [r4, #20]
 800e5f0:	b2f6      	uxtb	r6, r6
 800e5f2:	4283      	cmp	r3, r0
 800e5f4:	4637      	mov	r7, r6
 800e5f6:	dc05      	bgt.n	800e604 <__swbuf_r+0x4e>
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f003 ff2c 	bl	8012458 <_fflush_r>
 800e600:	2800      	cmp	r0, #0
 800e602:	d1ed      	bne.n	800e5e0 <__swbuf_r+0x2a>
 800e604:	68a3      	ldr	r3, [r4, #8]
 800e606:	3b01      	subs	r3, #1
 800e608:	60a3      	str	r3, [r4, #8]
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	6022      	str	r2, [r4, #0]
 800e610:	701e      	strb	r6, [r3, #0]
 800e612:	6962      	ldr	r2, [r4, #20]
 800e614:	1c43      	adds	r3, r0, #1
 800e616:	429a      	cmp	r2, r3
 800e618:	d004      	beq.n	800e624 <__swbuf_r+0x6e>
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	07db      	lsls	r3, r3, #31
 800e61e:	d5e1      	bpl.n	800e5e4 <__swbuf_r+0x2e>
 800e620:	2e0a      	cmp	r6, #10
 800e622:	d1df      	bne.n	800e5e4 <__swbuf_r+0x2e>
 800e624:	4621      	mov	r1, r4
 800e626:	4628      	mov	r0, r5
 800e628:	f003 ff16 	bl	8012458 <_fflush_r>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d0d9      	beq.n	800e5e4 <__swbuf_r+0x2e>
 800e630:	e7d6      	b.n	800e5e0 <__swbuf_r+0x2a>
	...

0800e634 <__swsetup_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4b29      	ldr	r3, [pc, #164]	@ (800e6dc <__swsetup_r+0xa8>)
 800e638:	4605      	mov	r5, r0
 800e63a:	6818      	ldr	r0, [r3, #0]
 800e63c:	460c      	mov	r4, r1
 800e63e:	b118      	cbz	r0, 800e648 <__swsetup_r+0x14>
 800e640:	6a03      	ldr	r3, [r0, #32]
 800e642:	b90b      	cbnz	r3, 800e648 <__swsetup_r+0x14>
 800e644:	f7ff fe40 	bl	800e2c8 <__sinit>
 800e648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e64c:	0719      	lsls	r1, r3, #28
 800e64e:	d422      	bmi.n	800e696 <__swsetup_r+0x62>
 800e650:	06da      	lsls	r2, r3, #27
 800e652:	d407      	bmi.n	800e664 <__swsetup_r+0x30>
 800e654:	2209      	movs	r2, #9
 800e656:	602a      	str	r2, [r5, #0]
 800e658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e65c:	81a3      	strh	r3, [r4, #12]
 800e65e:	f04f 30ff 	mov.w	r0, #4294967295
 800e662:	e033      	b.n	800e6cc <__swsetup_r+0x98>
 800e664:	0758      	lsls	r0, r3, #29
 800e666:	d512      	bpl.n	800e68e <__swsetup_r+0x5a>
 800e668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e66a:	b141      	cbz	r1, 800e67e <__swsetup_r+0x4a>
 800e66c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e670:	4299      	cmp	r1, r3
 800e672:	d002      	beq.n	800e67a <__swsetup_r+0x46>
 800e674:	4628      	mov	r0, r5
 800e676:	f001 feeb 	bl	8010450 <_free_r>
 800e67a:	2300      	movs	r3, #0
 800e67c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e67e:	89a3      	ldrh	r3, [r4, #12]
 800e680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e684:	81a3      	strh	r3, [r4, #12]
 800e686:	2300      	movs	r3, #0
 800e688:	6063      	str	r3, [r4, #4]
 800e68a:	6923      	ldr	r3, [r4, #16]
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	f043 0308 	orr.w	r3, r3, #8
 800e694:	81a3      	strh	r3, [r4, #12]
 800e696:	6923      	ldr	r3, [r4, #16]
 800e698:	b94b      	cbnz	r3, 800e6ae <__swsetup_r+0x7a>
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6a4:	d003      	beq.n	800e6ae <__swsetup_r+0x7a>
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f003 ff35 	bl	8012518 <__smakebuf_r>
 800e6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b2:	f013 0201 	ands.w	r2, r3, #1
 800e6b6:	d00a      	beq.n	800e6ce <__swsetup_r+0x9a>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	60a2      	str	r2, [r4, #8]
 800e6bc:	6962      	ldr	r2, [r4, #20]
 800e6be:	4252      	negs	r2, r2
 800e6c0:	61a2      	str	r2, [r4, #24]
 800e6c2:	6922      	ldr	r2, [r4, #16]
 800e6c4:	b942      	cbnz	r2, 800e6d8 <__swsetup_r+0xa4>
 800e6c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6ca:	d1c5      	bne.n	800e658 <__swsetup_r+0x24>
 800e6cc:	bd38      	pop	{r3, r4, r5, pc}
 800e6ce:	0799      	lsls	r1, r3, #30
 800e6d0:	bf58      	it	pl
 800e6d2:	6962      	ldrpl	r2, [r4, #20]
 800e6d4:	60a2      	str	r2, [r4, #8]
 800e6d6:	e7f4      	b.n	800e6c2 <__swsetup_r+0x8e>
 800e6d8:	2000      	movs	r0, #0
 800e6da:	e7f7      	b.n	800e6cc <__swsetup_r+0x98>
 800e6dc:	200001a4 	.word	0x200001a4

0800e6e0 <memcmp>:
 800e6e0:	b510      	push	{r4, lr}
 800e6e2:	3901      	subs	r1, #1
 800e6e4:	4402      	add	r2, r0
 800e6e6:	4290      	cmp	r0, r2
 800e6e8:	d101      	bne.n	800e6ee <memcmp+0xe>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e005      	b.n	800e6fa <memcmp+0x1a>
 800e6ee:	7803      	ldrb	r3, [r0, #0]
 800e6f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e6f4:	42a3      	cmp	r3, r4
 800e6f6:	d001      	beq.n	800e6fc <memcmp+0x1c>
 800e6f8:	1b18      	subs	r0, r3, r4
 800e6fa:	bd10      	pop	{r4, pc}
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	e7f2      	b.n	800e6e6 <memcmp+0x6>

0800e700 <memmove>:
 800e700:	4288      	cmp	r0, r1
 800e702:	b510      	push	{r4, lr}
 800e704:	eb01 0402 	add.w	r4, r1, r2
 800e708:	d902      	bls.n	800e710 <memmove+0x10>
 800e70a:	4284      	cmp	r4, r0
 800e70c:	4623      	mov	r3, r4
 800e70e:	d807      	bhi.n	800e720 <memmove+0x20>
 800e710:	1e43      	subs	r3, r0, #1
 800e712:	42a1      	cmp	r1, r4
 800e714:	d008      	beq.n	800e728 <memmove+0x28>
 800e716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e71a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e71e:	e7f8      	b.n	800e712 <memmove+0x12>
 800e720:	4402      	add	r2, r0
 800e722:	4601      	mov	r1, r0
 800e724:	428a      	cmp	r2, r1
 800e726:	d100      	bne.n	800e72a <memmove+0x2a>
 800e728:	bd10      	pop	{r4, pc}
 800e72a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e72e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e732:	e7f7      	b.n	800e724 <memmove+0x24>

0800e734 <memset>:
 800e734:	4402      	add	r2, r0
 800e736:	4603      	mov	r3, r0
 800e738:	4293      	cmp	r3, r2
 800e73a:	d100      	bne.n	800e73e <memset+0xa>
 800e73c:	4770      	bx	lr
 800e73e:	f803 1b01 	strb.w	r1, [r3], #1
 800e742:	e7f9      	b.n	800e738 <memset+0x4>

0800e744 <strchr>:
 800e744:	b2c9      	uxtb	r1, r1
 800e746:	4603      	mov	r3, r0
 800e748:	4618      	mov	r0, r3
 800e74a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e74e:	b112      	cbz	r2, 800e756 <strchr+0x12>
 800e750:	428a      	cmp	r2, r1
 800e752:	d1f9      	bne.n	800e748 <strchr+0x4>
 800e754:	4770      	bx	lr
 800e756:	2900      	cmp	r1, #0
 800e758:	bf18      	it	ne
 800e75a:	2000      	movne	r0, #0
 800e75c:	4770      	bx	lr

0800e75e <strcspn>:
 800e75e:	b570      	push	{r4, r5, r6, lr}
 800e760:	4603      	mov	r3, r0
 800e762:	461e      	mov	r6, r3
 800e764:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e768:	b144      	cbz	r4, 800e77c <strcspn+0x1e>
 800e76a:	1e4a      	subs	r2, r1, #1
 800e76c:	e001      	b.n	800e772 <strcspn+0x14>
 800e76e:	42a5      	cmp	r5, r4
 800e770:	d004      	beq.n	800e77c <strcspn+0x1e>
 800e772:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e776:	2d00      	cmp	r5, #0
 800e778:	d1f9      	bne.n	800e76e <strcspn+0x10>
 800e77a:	e7f2      	b.n	800e762 <strcspn+0x4>
 800e77c:	1a30      	subs	r0, r6, r0
 800e77e:	bd70      	pop	{r4, r5, r6, pc}

0800e780 <strncmp>:
 800e780:	b510      	push	{r4, lr}
 800e782:	b16a      	cbz	r2, 800e7a0 <strncmp+0x20>
 800e784:	3901      	subs	r1, #1
 800e786:	1884      	adds	r4, r0, r2
 800e788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e78c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e790:	429a      	cmp	r2, r3
 800e792:	d103      	bne.n	800e79c <strncmp+0x1c>
 800e794:	42a0      	cmp	r0, r4
 800e796:	d001      	beq.n	800e79c <strncmp+0x1c>
 800e798:	2a00      	cmp	r2, #0
 800e79a:	d1f5      	bne.n	800e788 <strncmp+0x8>
 800e79c:	1ad0      	subs	r0, r2, r3
 800e79e:	bd10      	pop	{r4, pc}
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	e7fc      	b.n	800e79e <strncmp+0x1e>

0800e7a4 <strncpy>:
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	3901      	subs	r1, #1
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	b132      	cbz	r2, 800e7ba <strncpy+0x16>
 800e7ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e7b0:	f803 4b01 	strb.w	r4, [r3], #1
 800e7b4:	3a01      	subs	r2, #1
 800e7b6:	2c00      	cmp	r4, #0
 800e7b8:	d1f7      	bne.n	800e7aa <strncpy+0x6>
 800e7ba:	441a      	add	r2, r3
 800e7bc:	2100      	movs	r1, #0
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d100      	bne.n	800e7c4 <strncpy+0x20>
 800e7c2:	bd10      	pop	{r4, pc}
 800e7c4:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c8:	e7f9      	b.n	800e7be <strncpy+0x1a>
	...

0800e7cc <strtok>:
 800e7cc:	4b16      	ldr	r3, [pc, #88]	@ (800e828 <strtok+0x5c>)
 800e7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d2:	681f      	ldr	r7, [r3, #0]
 800e7d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	460e      	mov	r6, r1
 800e7da:	b9ec      	cbnz	r4, 800e818 <strtok+0x4c>
 800e7dc:	2050      	movs	r0, #80	@ 0x50
 800e7de:	f002 f9ff 	bl	8010be0 <malloc>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	6478      	str	r0, [r7, #68]	@ 0x44
 800e7e6:	b920      	cbnz	r0, 800e7f2 <strtok+0x26>
 800e7e8:	4b10      	ldr	r3, [pc, #64]	@ (800e82c <strtok+0x60>)
 800e7ea:	4811      	ldr	r0, [pc, #68]	@ (800e830 <strtok+0x64>)
 800e7ec:	215b      	movs	r1, #91	@ 0x5b
 800e7ee:	f000 ffaf 	bl	800f750 <__assert_func>
 800e7f2:	e9c0 4400 	strd	r4, r4, [r0]
 800e7f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e7fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e7fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e802:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e806:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e80a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e80e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e812:	6184      	str	r4, [r0, #24]
 800e814:	7704      	strb	r4, [r0, #28]
 800e816:	6244      	str	r4, [r0, #36]	@ 0x24
 800e818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e81a:	4631      	mov	r1, r6
 800e81c:	4628      	mov	r0, r5
 800e81e:	2301      	movs	r3, #1
 800e820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e824:	f000 b806 	b.w	800e834 <__strtok_r>
 800e828:	200001a4 	.word	0x200001a4
 800e82c:	080135c0 	.word	0x080135c0
 800e830:	080135d7 	.word	0x080135d7

0800e834 <__strtok_r>:
 800e834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e836:	4604      	mov	r4, r0
 800e838:	b908      	cbnz	r0, 800e83e <__strtok_r+0xa>
 800e83a:	6814      	ldr	r4, [r2, #0]
 800e83c:	b144      	cbz	r4, 800e850 <__strtok_r+0x1c>
 800e83e:	4620      	mov	r0, r4
 800e840:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e844:	460f      	mov	r7, r1
 800e846:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e84a:	b91e      	cbnz	r6, 800e854 <__strtok_r+0x20>
 800e84c:	b965      	cbnz	r5, 800e868 <__strtok_r+0x34>
 800e84e:	6015      	str	r5, [r2, #0]
 800e850:	2000      	movs	r0, #0
 800e852:	e005      	b.n	800e860 <__strtok_r+0x2c>
 800e854:	42b5      	cmp	r5, r6
 800e856:	d1f6      	bne.n	800e846 <__strtok_r+0x12>
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1f0      	bne.n	800e83e <__strtok_r+0xa>
 800e85c:	6014      	str	r4, [r2, #0]
 800e85e:	7003      	strb	r3, [r0, #0]
 800e860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e862:	461c      	mov	r4, r3
 800e864:	e00c      	b.n	800e880 <__strtok_r+0x4c>
 800e866:	b91d      	cbnz	r5, 800e870 <__strtok_r+0x3c>
 800e868:	4627      	mov	r7, r4
 800e86a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e86e:	460e      	mov	r6, r1
 800e870:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e874:	42ab      	cmp	r3, r5
 800e876:	d1f6      	bne.n	800e866 <__strtok_r+0x32>
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d0f2      	beq.n	800e862 <__strtok_r+0x2e>
 800e87c:	2300      	movs	r3, #0
 800e87e:	703b      	strb	r3, [r7, #0]
 800e880:	6014      	str	r4, [r2, #0]
 800e882:	e7ed      	b.n	800e860 <__strtok_r+0x2c>

0800e884 <strstr>:
 800e884:	780a      	ldrb	r2, [r1, #0]
 800e886:	b570      	push	{r4, r5, r6, lr}
 800e888:	b96a      	cbnz	r2, 800e8a6 <strstr+0x22>
 800e88a:	bd70      	pop	{r4, r5, r6, pc}
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d109      	bne.n	800e8a4 <strstr+0x20>
 800e890:	460c      	mov	r4, r1
 800e892:	4605      	mov	r5, r0
 800e894:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d0f6      	beq.n	800e88a <strstr+0x6>
 800e89c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e8a0:	429e      	cmp	r6, r3
 800e8a2:	d0f7      	beq.n	800e894 <strstr+0x10>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	7803      	ldrb	r3, [r0, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1ef      	bne.n	800e88c <strstr+0x8>
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	e7ec      	b.n	800e88a <strstr+0x6>

0800e8b0 <ctime>:
 800e8b0:	b508      	push	{r3, lr}
 800e8b2:	f000 f805 	bl	800e8c0 <localtime>
 800e8b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e8ba:	f003 bf11 	b.w	80126e0 <asctime>
	...

0800e8c0 <localtime>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e8f0 <localtime+0x30>)
 800e8c4:	681d      	ldr	r5, [r3, #0]
 800e8c6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	b953      	cbnz	r3, 800e8e2 <localtime+0x22>
 800e8cc:	2024      	movs	r0, #36	@ 0x24
 800e8ce:	f002 f987 	bl	8010be0 <malloc>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	6368      	str	r0, [r5, #52]	@ 0x34
 800e8d6:	b920      	cbnz	r0, 800e8e2 <localtime+0x22>
 800e8d8:	4b06      	ldr	r3, [pc, #24]	@ (800e8f4 <localtime+0x34>)
 800e8da:	4807      	ldr	r0, [pc, #28]	@ (800e8f8 <localtime+0x38>)
 800e8dc:	2132      	movs	r1, #50	@ 0x32
 800e8de:	f000 ff37 	bl	800f750 <__assert_func>
 800e8e2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ea:	f000 b807 	b.w	800e8fc <localtime_r>
 800e8ee:	bf00      	nop
 800e8f0:	200001a4 	.word	0x200001a4
 800e8f4:	080135c0 	.word	0x080135c0
 800e8f8:	08013631 	.word	0x08013631

0800e8fc <localtime_r>:
 800e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e900:	460c      	mov	r4, r1
 800e902:	4607      	mov	r7, r0
 800e904:	f003 ff34 	bl	8012770 <__gettzinfo>
 800e908:	4621      	mov	r1, r4
 800e90a:	4605      	mov	r5, r0
 800e90c:	4638      	mov	r0, r7
 800e90e:	f003 ff33 	bl	8012778 <gmtime_r>
 800e912:	6943      	ldr	r3, [r0, #20]
 800e914:	0799      	lsls	r1, r3, #30
 800e916:	4604      	mov	r4, r0
 800e918:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800e91c:	d106      	bne.n	800e92c <localtime_r+0x30>
 800e91e:	2264      	movs	r2, #100	@ 0x64
 800e920:	fb98 f3f2 	sdiv	r3, r8, r2
 800e924:	fb02 8313 	mls	r3, r2, r3, r8
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d171      	bne.n	800ea10 <localtime_r+0x114>
 800e92c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e930:	fb98 f3f2 	sdiv	r3, r8, r2
 800e934:	fb02 8313 	mls	r3, r2, r3, r8
 800e938:	fab3 f383 	clz	r3, r3
 800e93c:	095b      	lsrs	r3, r3, #5
 800e93e:	425e      	negs	r6, r3
 800e940:	4b64      	ldr	r3, [pc, #400]	@ (800ead4 <localtime_r+0x1d8>)
 800e942:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 800e946:	441e      	add	r6, r3
 800e948:	f000 fc24 	bl	800f194 <__tz_lock>
 800e94c:	f000 fc2e 	bl	800f1ac <_tzset_unlocked>
 800e950:	4b61      	ldr	r3, [pc, #388]	@ (800ead8 <localtime_r+0x1dc>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d06a      	beq.n	800ea2e <localtime_r+0x132>
 800e958:	686b      	ldr	r3, [r5, #4]
 800e95a:	4543      	cmp	r3, r8
 800e95c:	d15a      	bne.n	800ea14 <localtime_r+0x118>
 800e95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e962:	682f      	ldr	r7, [r5, #0]
 800e964:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800e968:	2f00      	cmp	r7, #0
 800e96a:	d15b      	bne.n	800ea24 <localtime_r+0x128>
 800e96c:	4282      	cmp	r2, r0
 800e96e:	eb73 0101 	sbcs.w	r1, r3, r1
 800e972:	db5e      	blt.n	800ea32 <localtime_r+0x136>
 800e974:	2301      	movs	r3, #1
 800e976:	6223      	str	r3, [r4, #32]
 800e978:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e97a:	6861      	ldr	r1, [r4, #4]
 800e97c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800e980:	fb93 f0f2 	sdiv	r0, r3, r2
 800e984:	fb02 3310 	mls	r3, r2, r0, r3
 800e988:	223c      	movs	r2, #60	@ 0x3c
 800e98a:	fb93 f5f2 	sdiv	r5, r3, r2
 800e98e:	fb02 3215 	mls	r2, r2, r5, r3
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	1a9b      	subs	r3, r3, r2
 800e996:	68a2      	ldr	r2, [r4, #8]
 800e998:	6023      	str	r3, [r4, #0]
 800e99a:	1b49      	subs	r1, r1, r5
 800e99c:	1a12      	subs	r2, r2, r0
 800e99e:	2b3b      	cmp	r3, #59	@ 0x3b
 800e9a0:	6061      	str	r1, [r4, #4]
 800e9a2:	60a2      	str	r2, [r4, #8]
 800e9a4:	dd51      	ble.n	800ea4a <localtime_r+0x14e>
 800e9a6:	3101      	adds	r1, #1
 800e9a8:	6061      	str	r1, [r4, #4]
 800e9aa:	3b3c      	subs	r3, #60	@ 0x3c
 800e9ac:	6023      	str	r3, [r4, #0]
 800e9ae:	6863      	ldr	r3, [r4, #4]
 800e9b0:	2b3b      	cmp	r3, #59	@ 0x3b
 800e9b2:	dd50      	ble.n	800ea56 <localtime_r+0x15a>
 800e9b4:	3201      	adds	r2, #1
 800e9b6:	60a2      	str	r2, [r4, #8]
 800e9b8:	3b3c      	subs	r3, #60	@ 0x3c
 800e9ba:	6063      	str	r3, [r4, #4]
 800e9bc:	68a3      	ldr	r3, [r4, #8]
 800e9be:	2b17      	cmp	r3, #23
 800e9c0:	dd4f      	ble.n	800ea62 <localtime_r+0x166>
 800e9c2:	69e2      	ldr	r2, [r4, #28]
 800e9c4:	3201      	adds	r2, #1
 800e9c6:	61e2      	str	r2, [r4, #28]
 800e9c8:	69a2      	ldr	r2, [r4, #24]
 800e9ca:	3201      	adds	r2, #1
 800e9cc:	2a07      	cmp	r2, #7
 800e9ce:	bfa8      	it	ge
 800e9d0:	2200      	movge	r2, #0
 800e9d2:	61a2      	str	r2, [r4, #24]
 800e9d4:	68e2      	ldr	r2, [r4, #12]
 800e9d6:	3b18      	subs	r3, #24
 800e9d8:	3201      	adds	r2, #1
 800e9da:	60a3      	str	r3, [r4, #8]
 800e9dc:	6923      	ldr	r3, [r4, #16]
 800e9de:	60e2      	str	r2, [r4, #12]
 800e9e0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800e9e4:	428a      	cmp	r2, r1
 800e9e6:	dd0e      	ble.n	800ea06 <localtime_r+0x10a>
 800e9e8:	2b0b      	cmp	r3, #11
 800e9ea:	eba2 0201 	sub.w	r2, r2, r1
 800e9ee:	60e2      	str	r2, [r4, #12]
 800e9f0:	f103 0201 	add.w	r2, r3, #1
 800e9f4:	bf09      	itett	eq
 800e9f6:	6963      	ldreq	r3, [r4, #20]
 800e9f8:	6122      	strne	r2, [r4, #16]
 800e9fa:	2200      	moveq	r2, #0
 800e9fc:	3301      	addeq	r3, #1
 800e9fe:	bf02      	ittt	eq
 800ea00:	6122      	streq	r2, [r4, #16]
 800ea02:	6163      	streq	r3, [r4, #20]
 800ea04:	61e2      	streq	r2, [r4, #28]
 800ea06:	f000 fbcb 	bl	800f1a0 <__tz_unlock>
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea10:	2301      	movs	r3, #1
 800ea12:	e794      	b.n	800e93e <localtime_r+0x42>
 800ea14:	4640      	mov	r0, r8
 800ea16:	f000 fb09 	bl	800f02c <__tzcalc_limits>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d19f      	bne.n	800e95e <localtime_r+0x62>
 800ea1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea22:	e004      	b.n	800ea2e <localtime_r+0x132>
 800ea24:	4282      	cmp	r2, r0
 800ea26:	eb73 0101 	sbcs.w	r1, r3, r1
 800ea2a:	da02      	bge.n	800ea32 <localtime_r+0x136>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	6223      	str	r3, [r4, #32]
 800ea30:	e009      	b.n	800ea46 <localtime_r+0x14a>
 800ea32:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800ea36:	4282      	cmp	r2, r0
 800ea38:	418b      	sbcs	r3, r1
 800ea3a:	bfb4      	ite	lt
 800ea3c:	2301      	movlt	r3, #1
 800ea3e:	2300      	movge	r3, #0
 800ea40:	6223      	str	r3, [r4, #32]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d198      	bne.n	800e978 <localtime_r+0x7c>
 800ea46:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800ea48:	e797      	b.n	800e97a <localtime_r+0x7e>
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	daaf      	bge.n	800e9ae <localtime_r+0xb2>
 800ea4e:	3901      	subs	r1, #1
 800ea50:	6061      	str	r1, [r4, #4]
 800ea52:	333c      	adds	r3, #60	@ 0x3c
 800ea54:	e7aa      	b.n	800e9ac <localtime_r+0xb0>
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	dab0      	bge.n	800e9bc <localtime_r+0xc0>
 800ea5a:	3a01      	subs	r2, #1
 800ea5c:	60a2      	str	r2, [r4, #8]
 800ea5e:	333c      	adds	r3, #60	@ 0x3c
 800ea60:	e7ab      	b.n	800e9ba <localtime_r+0xbe>
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	dacf      	bge.n	800ea06 <localtime_r+0x10a>
 800ea66:	69e2      	ldr	r2, [r4, #28]
 800ea68:	3a01      	subs	r2, #1
 800ea6a:	61e2      	str	r2, [r4, #28]
 800ea6c:	69a2      	ldr	r2, [r4, #24]
 800ea6e:	3a01      	subs	r2, #1
 800ea70:	bf48      	it	mi
 800ea72:	2206      	movmi	r2, #6
 800ea74:	61a2      	str	r2, [r4, #24]
 800ea76:	68e2      	ldr	r2, [r4, #12]
 800ea78:	3318      	adds	r3, #24
 800ea7a:	3a01      	subs	r2, #1
 800ea7c:	60e2      	str	r2, [r4, #12]
 800ea7e:	60a3      	str	r3, [r4, #8]
 800ea80:	2a00      	cmp	r2, #0
 800ea82:	d1c0      	bne.n	800ea06 <localtime_r+0x10a>
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	3b01      	subs	r3, #1
 800ea88:	d405      	bmi.n	800ea96 <localtime_r+0x19a>
 800ea8a:	6123      	str	r3, [r4, #16]
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ea92:	60e3      	str	r3, [r4, #12]
 800ea94:	e7b7      	b.n	800ea06 <localtime_r+0x10a>
 800ea96:	230b      	movs	r3, #11
 800ea98:	6123      	str	r3, [r4, #16]
 800ea9a:	6963      	ldr	r3, [r4, #20]
 800ea9c:	1e5a      	subs	r2, r3, #1
 800ea9e:	6162      	str	r2, [r4, #20]
 800eaa0:	0792      	lsls	r2, r2, #30
 800eaa2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800eaa6:	d105      	bne.n	800eab4 <localtime_r+0x1b8>
 800eaa8:	2164      	movs	r1, #100	@ 0x64
 800eaaa:	fb93 f2f1 	sdiv	r2, r3, r1
 800eaae:	fb01 3212 	mls	r2, r1, r2, r3
 800eab2:	b962      	cbnz	r2, 800eace <localtime_r+0x1d2>
 800eab4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eab8:	fb93 f1f2 	sdiv	r1, r3, r2
 800eabc:	fb02 3311 	mls	r3, r2, r1, r3
 800eac0:	fab3 f383 	clz	r3, r3
 800eac4:	095b      	lsrs	r3, r3, #5
 800eac6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800eaca:	61e3      	str	r3, [r4, #28]
 800eacc:	e7de      	b.n	800ea8c <localtime_r+0x190>
 800eace:	2301      	movs	r3, #1
 800ead0:	e7f9      	b.n	800eac6 <localtime_r+0x1ca>
 800ead2:	bf00      	nop
 800ead4:	08013aa4 	.word	0x08013aa4
 800ead8:	20006f68 	.word	0x20006f68

0800eadc <validate_structure>:
 800eadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eade:	6801      	ldr	r1, [r0, #0]
 800eae0:	293b      	cmp	r1, #59	@ 0x3b
 800eae2:	4604      	mov	r4, r0
 800eae4:	d911      	bls.n	800eb0a <validate_structure+0x2e>
 800eae6:	223c      	movs	r2, #60	@ 0x3c
 800eae8:	4668      	mov	r0, sp
 800eaea:	f000 fe4f 	bl	800f78c <div>
 800eaee:	9a01      	ldr	r2, [sp, #4]
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	9900      	ldr	r1, [sp, #0]
 800eaf4:	2a00      	cmp	r2, #0
 800eaf6:	440b      	add	r3, r1
 800eaf8:	6063      	str	r3, [r4, #4]
 800eafa:	bfbb      	ittet	lt
 800eafc:	323c      	addlt	r2, #60	@ 0x3c
 800eafe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800eb02:	6022      	strge	r2, [r4, #0]
 800eb04:	6022      	strlt	r2, [r4, #0]
 800eb06:	bfb8      	it	lt
 800eb08:	6063      	strlt	r3, [r4, #4]
 800eb0a:	6861      	ldr	r1, [r4, #4]
 800eb0c:	293b      	cmp	r1, #59	@ 0x3b
 800eb0e:	d911      	bls.n	800eb34 <validate_structure+0x58>
 800eb10:	223c      	movs	r2, #60	@ 0x3c
 800eb12:	4668      	mov	r0, sp
 800eb14:	f000 fe3a 	bl	800f78c <div>
 800eb18:	9a01      	ldr	r2, [sp, #4]
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	9900      	ldr	r1, [sp, #0]
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	440b      	add	r3, r1
 800eb22:	60a3      	str	r3, [r4, #8]
 800eb24:	bfbb      	ittet	lt
 800eb26:	323c      	addlt	r2, #60	@ 0x3c
 800eb28:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800eb2c:	6062      	strge	r2, [r4, #4]
 800eb2e:	6062      	strlt	r2, [r4, #4]
 800eb30:	bfb8      	it	lt
 800eb32:	60a3      	strlt	r3, [r4, #8]
 800eb34:	68a1      	ldr	r1, [r4, #8]
 800eb36:	2917      	cmp	r1, #23
 800eb38:	d911      	bls.n	800eb5e <validate_structure+0x82>
 800eb3a:	2218      	movs	r2, #24
 800eb3c:	4668      	mov	r0, sp
 800eb3e:	f000 fe25 	bl	800f78c <div>
 800eb42:	9a01      	ldr	r2, [sp, #4]
 800eb44:	68e3      	ldr	r3, [r4, #12]
 800eb46:	9900      	ldr	r1, [sp, #0]
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	440b      	add	r3, r1
 800eb4c:	60e3      	str	r3, [r4, #12]
 800eb4e:	bfbb      	ittet	lt
 800eb50:	3218      	addlt	r2, #24
 800eb52:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800eb56:	60a2      	strge	r2, [r4, #8]
 800eb58:	60a2      	strlt	r2, [r4, #8]
 800eb5a:	bfb8      	it	lt
 800eb5c:	60e3      	strlt	r3, [r4, #12]
 800eb5e:	6921      	ldr	r1, [r4, #16]
 800eb60:	290b      	cmp	r1, #11
 800eb62:	d911      	bls.n	800eb88 <validate_structure+0xac>
 800eb64:	220c      	movs	r2, #12
 800eb66:	4668      	mov	r0, sp
 800eb68:	f000 fe10 	bl	800f78c <div>
 800eb6c:	9a01      	ldr	r2, [sp, #4]
 800eb6e:	6963      	ldr	r3, [r4, #20]
 800eb70:	9900      	ldr	r1, [sp, #0]
 800eb72:	2a00      	cmp	r2, #0
 800eb74:	440b      	add	r3, r1
 800eb76:	6163      	str	r3, [r4, #20]
 800eb78:	bfbb      	ittet	lt
 800eb7a:	320c      	addlt	r2, #12
 800eb7c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800eb80:	6122      	strge	r2, [r4, #16]
 800eb82:	6122      	strlt	r2, [r4, #16]
 800eb84:	bfb8      	it	lt
 800eb86:	6163      	strlt	r3, [r4, #20]
 800eb88:	6963      	ldr	r3, [r4, #20]
 800eb8a:	079a      	lsls	r2, r3, #30
 800eb8c:	d11c      	bne.n	800ebc8 <validate_structure+0xec>
 800eb8e:	2164      	movs	r1, #100	@ 0x64
 800eb90:	fb93 f2f1 	sdiv	r2, r3, r1
 800eb94:	fb01 3212 	mls	r2, r1, r2, r3
 800eb98:	b9c2      	cbnz	r2, 800ebcc <validate_structure+0xf0>
 800eb9a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800eb9e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eba2:	fb93 f1f2 	sdiv	r1, r3, r2
 800eba6:	fb02 3311 	mls	r3, r2, r1, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	bf0c      	ite	eq
 800ebae:	231d      	moveq	r3, #29
 800ebb0:	231c      	movne	r3, #28
 800ebb2:	68e2      	ldr	r2, [r4, #12]
 800ebb4:	2a00      	cmp	r2, #0
 800ebb6:	dc0b      	bgt.n	800ebd0 <validate_structure+0xf4>
 800ebb8:	4d31      	ldr	r5, [pc, #196]	@ (800ec80 <validate_structure+0x1a4>)
 800ebba:	200b      	movs	r0, #11
 800ebbc:	2164      	movs	r1, #100	@ 0x64
 800ebbe:	68e6      	ldr	r6, [r4, #12]
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	dd30      	ble.n	800ec26 <validate_structure+0x14a>
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc8:	231c      	movs	r3, #28
 800ebca:	e7f2      	b.n	800ebb2 <validate_structure+0xd6>
 800ebcc:	231d      	movs	r3, #29
 800ebce:	e7f0      	b.n	800ebb2 <validate_structure+0xd6>
 800ebd0:	4d2b      	ldr	r5, [pc, #172]	@ (800ec80 <validate_structure+0x1a4>)
 800ebd2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800ebd6:	2a01      	cmp	r2, #1
 800ebd8:	bf14      	ite	ne
 800ebda:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800ebde:	4618      	moveq	r0, r3
 800ebe0:	4281      	cmp	r1, r0
 800ebe2:	ddef      	ble.n	800ebc4 <validate_structure+0xe8>
 800ebe4:	3201      	adds	r2, #1
 800ebe6:	1a09      	subs	r1, r1, r0
 800ebe8:	2a0c      	cmp	r2, #12
 800ebea:	60e1      	str	r1, [r4, #12]
 800ebec:	6122      	str	r2, [r4, #16]
 800ebee:	d1f0      	bne.n	800ebd2 <validate_structure+0xf6>
 800ebf0:	6963      	ldr	r3, [r4, #20]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	1c5a      	adds	r2, r3, #1
 800ebf6:	6121      	str	r1, [r4, #16]
 800ebf8:	0791      	lsls	r1, r2, #30
 800ebfa:	6162      	str	r2, [r4, #20]
 800ebfc:	d13c      	bne.n	800ec78 <validate_structure+0x19c>
 800ebfe:	2164      	movs	r1, #100	@ 0x64
 800ec00:	fb92 f0f1 	sdiv	r0, r2, r1
 800ec04:	fb01 2210 	mls	r2, r1, r0, r2
 800ec08:	2a00      	cmp	r2, #0
 800ec0a:	d137      	bne.n	800ec7c <validate_structure+0x1a0>
 800ec0c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800ec10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ec14:	fb93 f1f2 	sdiv	r1, r3, r2
 800ec18:	fb02 3311 	mls	r3, r2, r1, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	bf0c      	ite	eq
 800ec20:	231d      	moveq	r3, #29
 800ec22:	231c      	movne	r3, #28
 800ec24:	e7d5      	b.n	800ebd2 <validate_structure+0xf6>
 800ec26:	6922      	ldr	r2, [r4, #16]
 800ec28:	3a01      	subs	r2, #1
 800ec2a:	6122      	str	r2, [r4, #16]
 800ec2c:	3201      	adds	r2, #1
 800ec2e:	d116      	bne.n	800ec5e <validate_structure+0x182>
 800ec30:	6963      	ldr	r3, [r4, #20]
 800ec32:	1e5a      	subs	r2, r3, #1
 800ec34:	0797      	lsls	r7, r2, #30
 800ec36:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800ec3a:	d119      	bne.n	800ec70 <validate_structure+0x194>
 800ec3c:	fb92 f7f1 	sdiv	r7, r2, r1
 800ec40:	fb01 2217 	mls	r2, r1, r7, r2
 800ec44:	b9b2      	cbnz	r2, 800ec74 <validate_structure+0x198>
 800ec46:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800ec4a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ec4e:	fb93 f7f2 	sdiv	r7, r3, r2
 800ec52:	fb02 3317 	mls	r3, r2, r7, r3
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	bf0c      	ite	eq
 800ec5a:	231d      	moveq	r3, #29
 800ec5c:	231c      	movne	r3, #28
 800ec5e:	6922      	ldr	r2, [r4, #16]
 800ec60:	2a01      	cmp	r2, #1
 800ec62:	bf14      	ite	ne
 800ec64:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800ec68:	461a      	moveq	r2, r3
 800ec6a:	4432      	add	r2, r6
 800ec6c:	60e2      	str	r2, [r4, #12]
 800ec6e:	e7a6      	b.n	800ebbe <validate_structure+0xe2>
 800ec70:	231c      	movs	r3, #28
 800ec72:	e7f4      	b.n	800ec5e <validate_structure+0x182>
 800ec74:	231d      	movs	r3, #29
 800ec76:	e7f2      	b.n	800ec5e <validate_structure+0x182>
 800ec78:	231c      	movs	r3, #28
 800ec7a:	e7aa      	b.n	800ebd2 <validate_structure+0xf6>
 800ec7c:	231d      	movs	r3, #29
 800ec7e:	e7a8      	b.n	800ebd2 <validate_structure+0xf6>
 800ec80:	08013a74 	.word	0x08013a74

0800ec84 <mktime>:
 800ec84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec88:	b085      	sub	sp, #20
 800ec8a:	4607      	mov	r7, r0
 800ec8c:	f003 fd70 	bl	8012770 <__gettzinfo>
 800ec90:	4681      	mov	r9, r0
 800ec92:	4638      	mov	r0, r7
 800ec94:	f7ff ff22 	bl	800eadc <validate_structure>
 800ec98:	e9d7 4300 	ldrd	r4, r3, [r7]
 800ec9c:	223c      	movs	r2, #60	@ 0x3c
 800ec9e:	fb02 4403 	mla	r4, r2, r3, r4
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	697d      	ldr	r5, [r7, #20]
 800eca6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800ecaa:	fb02 4403 	mla	r4, r2, r3, r4
 800ecae:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800ecb2:	4ac3      	ldr	r2, [pc, #780]	@ (800efc0 <mktime+0x33c>)
 800ecb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ecb8:	3e01      	subs	r6, #1
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	4416      	add	r6, r2
 800ecbe:	dd11      	ble.n	800ece4 <mktime+0x60>
 800ecc0:	07a9      	lsls	r1, r5, #30
 800ecc2:	d10f      	bne.n	800ece4 <mktime+0x60>
 800ecc4:	2264      	movs	r2, #100	@ 0x64
 800ecc6:	fb95 f3f2 	sdiv	r3, r5, r2
 800ecca:	fb02 5313 	mls	r3, r2, r3, r5
 800ecce:	b943      	cbnz	r3, 800ece2 <mktime+0x5e>
 800ecd0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ecd4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ecd8:	fb93 f1f2 	sdiv	r1, r3, r2
 800ecdc:	fb02 3311 	mls	r3, r2, r1, r3
 800ece0:	b903      	cbnz	r3, 800ece4 <mktime+0x60>
 800ece2:	3601      	adds	r6, #1
 800ece4:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800ece8:	3310      	adds	r3, #16
 800ecea:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	61fe      	str	r6, [r7, #28]
 800ecf2:	f200 8170 	bhi.w	800efd6 <mktime+0x352>
 800ecf6:	2d46      	cmp	r5, #70	@ 0x46
 800ecf8:	f340 80b6 	ble.w	800ee68 <mktime+0x1e4>
 800ecfc:	2346      	movs	r3, #70	@ 0x46
 800ecfe:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ed02:	2164      	movs	r1, #100	@ 0x64
 800ed04:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ed08:	079a      	lsls	r2, r3, #30
 800ed0a:	f040 80a7 	bne.w	800ee5c <mktime+0x1d8>
 800ed0e:	fb93 f2f1 	sdiv	r2, r3, r1
 800ed12:	fb01 3212 	mls	r2, r1, r2, r3
 800ed16:	2a00      	cmp	r2, #0
 800ed18:	f040 80a3 	bne.w	800ee62 <mktime+0x1de>
 800ed1c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ed20:	fb92 fef0 	sdiv	lr, r2, r0
 800ed24:	fb00 221e 	mls	r2, r0, lr, r2
 800ed28:	2a00      	cmp	r2, #0
 800ed2a:	bf0c      	ite	eq
 800ed2c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ed30:	4662      	movne	r2, ip
 800ed32:	3301      	adds	r3, #1
 800ed34:	429d      	cmp	r5, r3
 800ed36:	4416      	add	r6, r2
 800ed38:	d1e6      	bne.n	800ed08 <mktime+0x84>
 800ed3a:	4ba2      	ldr	r3, [pc, #648]	@ (800efc4 <mktime+0x340>)
 800ed3c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800ed40:	fbc6 4803 	smlal	r4, r8, r6, r3
 800ed44:	f000 fa26 	bl	800f194 <__tz_lock>
 800ed48:	f000 fa30 	bl	800f1ac <_tzset_unlocked>
 800ed4c:	4b9e      	ldr	r3, [pc, #632]	@ (800efc8 <mktime+0x344>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 8147 	beq.w	800efe4 <mktime+0x360>
 800ed56:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800ed5a:	6978      	ldr	r0, [r7, #20]
 800ed5c:	4653      	mov	r3, sl
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	bfa8      	it	ge
 800ed62:	2301      	movge	r3, #1
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ed6a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800ed6e:	4283      	cmp	r3, r0
 800ed70:	f040 80bd 	bne.w	800eeee <mktime+0x26a>
 800ed74:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800ed78:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800ed7c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800ed80:	1a13      	subs	r3, r2, r0
 800ed82:	9303      	str	r3, [sp, #12]
 800ed84:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800ed88:	9302      	str	r3, [sp, #8]
 800ed8a:	9a02      	ldr	r2, [sp, #8]
 800ed8c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ed90:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800ed94:	ebb2 0e03 	subs.w	lr, r2, r3
 800ed98:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800ed9c:	4574      	cmp	r4, lr
 800ed9e:	eb78 0201 	sbcs.w	r2, r8, r1
 800eda2:	f280 80c7 	bge.w	800ef34 <mktime+0x2b0>
 800eda6:	f8d9 2000 	ldr.w	r2, [r9]
 800edaa:	2a00      	cmp	r2, #0
 800edac:	f000 80d0 	beq.w	800ef50 <mktime+0x2cc>
 800edb0:	9a03      	ldr	r2, [sp, #12]
 800edb2:	4294      	cmp	r4, r2
 800edb4:	eb78 020b 	sbcs.w	r2, r8, fp
 800edb8:	f2c0 8111 	blt.w	800efde <mktime+0x35a>
 800edbc:	4574      	cmp	r4, lr
 800edbe:	eb78 0101 	sbcs.w	r1, r8, r1
 800edc2:	bfb4      	ite	lt
 800edc4:	f04f 0b01 	movlt.w	fp, #1
 800edc8:	f04f 0b00 	movge.w	fp, #0
 800edcc:	f1ba 0f00 	cmp.w	sl, #0
 800edd0:	f2c0 8094 	blt.w	800eefc <mktime+0x278>
 800edd4:	9a01      	ldr	r2, [sp, #4]
 800edd6:	ea82 0a0b 	eor.w	sl, r2, fp
 800edda:	f1ba 0f01 	cmp.w	sl, #1
 800edde:	f040 808d 	bne.w	800eefc <mktime+0x278>
 800ede2:	f1bb 0f00 	cmp.w	fp, #0
 800ede6:	f000 80c2 	beq.w	800ef6e <mktime+0x2ea>
 800edea:	1a1b      	subs	r3, r3, r0
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	441a      	add	r2, r3
 800edf0:	191c      	adds	r4, r3, r4
 800edf2:	603a      	str	r2, [r7, #0]
 800edf4:	4638      	mov	r0, r7
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	9201      	str	r2, [sp, #4]
 800edfa:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800edfe:	f7ff fe6d 	bl	800eadc <validate_structure>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	9a01      	ldr	r2, [sp, #4]
 800ee06:	1a9b      	subs	r3, r3, r2
 800ee08:	d078      	beq.n	800eefc <mktime+0x278>
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	f300 80b1 	bgt.w	800ef72 <mktime+0x2ee>
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	bfa8      	it	ge
 800ee16:	469a      	movge	sl, r3
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	eb1a 0303 	adds.w	r3, sl, r3
 800ee1e:	4456      	add	r6, sl
 800ee20:	f140 80b0 	bpl.w	800ef84 <mktime+0x300>
 800ee24:	1e6b      	subs	r3, r5, #1
 800ee26:	0799      	lsls	r1, r3, #30
 800ee28:	f040 80a6 	bne.w	800ef78 <mktime+0x2f4>
 800ee2c:	2264      	movs	r2, #100	@ 0x64
 800ee2e:	fb93 f1f2 	sdiv	r1, r3, r2
 800ee32:	fb02 3311 	mls	r3, r2, r1, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f040 80a1 	bne.w	800ef7e <mktime+0x2fa>
 800ee3c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ee40:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800ee44:	fb95 f2f3 	sdiv	r2, r5, r3
 800ee48:	fb03 5512 	mls	r5, r3, r2, r5
 800ee4c:	2d00      	cmp	r5, #0
 800ee4e:	f240 136d 	movw	r3, #365	@ 0x16d
 800ee52:	bf18      	it	ne
 800ee54:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800ee58:	61fb      	str	r3, [r7, #28]
 800ee5a:	e04f      	b.n	800eefc <mktime+0x278>
 800ee5c:	f240 126d 	movw	r2, #365	@ 0x16d
 800ee60:	e767      	b.n	800ed32 <mktime+0xae>
 800ee62:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ee66:	e764      	b.n	800ed32 <mktime+0xae>
 800ee68:	f43f af67 	beq.w	800ed3a <mktime+0xb6>
 800ee6c:	2345      	movs	r3, #69	@ 0x45
 800ee6e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ee72:	2164      	movs	r1, #100	@ 0x64
 800ee74:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ee78:	e012      	b.n	800eea0 <mktime+0x21c>
 800ee7a:	bb62      	cbnz	r2, 800eed6 <mktime+0x252>
 800ee7c:	fb93 f2f1 	sdiv	r2, r3, r1
 800ee80:	fb01 3212 	mls	r2, r1, r2, r3
 800ee84:	bb52      	cbnz	r2, 800eedc <mktime+0x258>
 800ee86:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ee8a:	fb92 fef0 	sdiv	lr, r2, r0
 800ee8e:	fb00 221e 	mls	r2, r0, lr, r2
 800ee92:	2a00      	cmp	r2, #0
 800ee94:	bf0c      	ite	eq
 800ee96:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ee9a:	4662      	movne	r2, ip
 800ee9c:	1ab6      	subs	r6, r6, r2
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	429d      	cmp	r5, r3
 800eea2:	f003 0203 	and.w	r2, r3, #3
 800eea6:	dbe8      	blt.n	800ee7a <mktime+0x1f6>
 800eea8:	b9da      	cbnz	r2, 800eee2 <mktime+0x25e>
 800eeaa:	2264      	movs	r2, #100	@ 0x64
 800eeac:	fb95 f3f2 	sdiv	r3, r5, r2
 800eeb0:	fb02 5313 	mls	r3, r2, r3, r5
 800eeb4:	b9c3      	cbnz	r3, 800eee8 <mktime+0x264>
 800eeb6:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800eeba:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800eebe:	fb93 f1f2 	sdiv	r1, r3, r2
 800eec2:	fb02 3311 	mls	r3, r2, r1, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f240 136d 	movw	r3, #365	@ 0x16d
 800eecc:	bf08      	it	eq
 800eece:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800eed2:	1af6      	subs	r6, r6, r3
 800eed4:	e731      	b.n	800ed3a <mktime+0xb6>
 800eed6:	f240 126d 	movw	r2, #365	@ 0x16d
 800eeda:	e7df      	b.n	800ee9c <mktime+0x218>
 800eedc:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800eee0:	e7dc      	b.n	800ee9c <mktime+0x218>
 800eee2:	f240 136d 	movw	r3, #365	@ 0x16d
 800eee6:	e7f4      	b.n	800eed2 <mktime+0x24e>
 800eee8:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800eeec:	e7f1      	b.n	800eed2 <mktime+0x24e>
 800eeee:	f000 f89d 	bl	800f02c <__tzcalc_limits>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	f47f af3e 	bne.w	800ed74 <mktime+0xf0>
 800eef8:	f8dd b004 	ldr.w	fp, [sp, #4]
 800eefc:	f1bb 0f01 	cmp.w	fp, #1
 800ef00:	d172      	bne.n	800efe8 <mktime+0x364>
 800ef02:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ef06:	191c      	adds	r4, r3, r4
 800ef08:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ef0c:	f04f 0b01 	mov.w	fp, #1
 800ef10:	f000 f946 	bl	800f1a0 <__tz_unlock>
 800ef14:	3604      	adds	r6, #4
 800ef16:	2307      	movs	r3, #7
 800ef18:	fb96 f3f3 	sdiv	r3, r6, r3
 800ef1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ef20:	1af6      	subs	r6, r6, r3
 800ef22:	d456      	bmi.n	800efd2 <mktime+0x34e>
 800ef24:	f8c7 b020 	str.w	fp, [r7, #32]
 800ef28:	61be      	str	r6, [r7, #24]
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	4641      	mov	r1, r8
 800ef2e:	b005      	add	sp, #20
 800ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef34:	9a02      	ldr	r2, [sp, #8]
 800ef36:	1a12      	subs	r2, r2, r0
 800ef38:	9202      	str	r2, [sp, #8]
 800ef3a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800ef3e:	eb6c 0c02 	sbc.w	ip, ip, r2
 800ef42:	9a02      	ldr	r2, [sp, #8]
 800ef44:	4294      	cmp	r4, r2
 800ef46:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800ef4a:	f6bf af2c 	bge.w	800eda6 <mktime+0x122>
 800ef4e:	e7d3      	b.n	800eef8 <mktime+0x274>
 800ef50:	9a03      	ldr	r2, [sp, #12]
 800ef52:	4294      	cmp	r4, r2
 800ef54:	eb78 020b 	sbcs.w	r2, r8, fp
 800ef58:	f6ff af30 	blt.w	800edbc <mktime+0x138>
 800ef5c:	f1ba 0f00 	cmp.w	sl, #0
 800ef60:	dbcf      	blt.n	800ef02 <mktime+0x27e>
 800ef62:	f04f 0b01 	mov.w	fp, #1
 800ef66:	e735      	b.n	800edd4 <mktime+0x150>
 800ef68:	f04f 0b00 	mov.w	fp, #0
 800ef6c:	e732      	b.n	800edd4 <mktime+0x150>
 800ef6e:	1ac3      	subs	r3, r0, r3
 800ef70:	e73c      	b.n	800edec <mktime+0x168>
 800ef72:	f04f 3aff 	mov.w	sl, #4294967295
 800ef76:	e74f      	b.n	800ee18 <mktime+0x194>
 800ef78:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800ef7c:	e76c      	b.n	800ee58 <mktime+0x1d4>
 800ef7e:	f240 136d 	movw	r3, #365	@ 0x16d
 800ef82:	e769      	b.n	800ee58 <mktime+0x1d4>
 800ef84:	07aa      	lsls	r2, r5, #30
 800ef86:	d117      	bne.n	800efb8 <mktime+0x334>
 800ef88:	2164      	movs	r1, #100	@ 0x64
 800ef8a:	fb95 f2f1 	sdiv	r2, r5, r1
 800ef8e:	fb01 5212 	mls	r2, r1, r2, r5
 800ef92:	b9da      	cbnz	r2, 800efcc <mktime+0x348>
 800ef94:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ef98:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800ef9c:	fb95 f1f2 	sdiv	r1, r5, r2
 800efa0:	fb02 5511 	mls	r5, r2, r1, r5
 800efa4:	2d00      	cmp	r5, #0
 800efa6:	f240 126d 	movw	r2, #365	@ 0x16d
 800efaa:	bf08      	it	eq
 800efac:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800efb0:	4293      	cmp	r3, r2
 800efb2:	bfa8      	it	ge
 800efb4:	1a9b      	subge	r3, r3, r2
 800efb6:	e74f      	b.n	800ee58 <mktime+0x1d4>
 800efb8:	f240 126d 	movw	r2, #365	@ 0x16d
 800efbc:	e7f8      	b.n	800efb0 <mktime+0x32c>
 800efbe:	bf00      	nop
 800efc0:	08013a44 	.word	0x08013a44
 800efc4:	00015180 	.word	0x00015180
 800efc8:	20006f68 	.word	0x20006f68
 800efcc:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800efd0:	e7ee      	b.n	800efb0 <mktime+0x32c>
 800efd2:	3607      	adds	r6, #7
 800efd4:	e7a6      	b.n	800ef24 <mktime+0x2a0>
 800efd6:	f04f 34ff 	mov.w	r4, #4294967295
 800efda:	46a0      	mov	r8, r4
 800efdc:	e7a5      	b.n	800ef2a <mktime+0x2a6>
 800efde:	f1ba 0f00 	cmp.w	sl, #0
 800efe2:	dac1      	bge.n	800ef68 <mktime+0x2e4>
 800efe4:	f04f 0b00 	mov.w	fp, #0
 800efe8:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800efec:	191c      	adds	r4, r3, r4
 800efee:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800eff2:	e78d      	b.n	800ef10 <mktime+0x28c>

0800eff4 <time>:
 800eff4:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800eff6:	4b0c      	ldr	r3, [pc, #48]	@ (800f028 <time+0x34>)
 800eff8:	f04f 36ff 	mov.w	r6, #4294967295
 800effc:	f04f 37ff 	mov.w	r7, #4294967295
 800f000:	4669      	mov	r1, sp
 800f002:	4604      	mov	r4, r0
 800f004:	2200      	movs	r2, #0
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	e9cd 6700 	strd	r6, r7, [sp]
 800f00c:	f000 fb0a 	bl	800f624 <_gettimeofday_r>
 800f010:	2800      	cmp	r0, #0
 800f012:	bfb8      	it	lt
 800f014:	e9cd 6700 	strdlt	r6, r7, [sp]
 800f018:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f01c:	b10c      	cbz	r4, 800f022 <time+0x2e>
 800f01e:	e9c4 0100 	strd	r0, r1, [r4]
 800f022:	b004      	add	sp, #16
 800f024:	bdd0      	pop	{r4, r6, r7, pc}
 800f026:	bf00      	nop
 800f028:	200001a4 	.word	0x200001a4

0800f02c <__tzcalc_limits>:
 800f02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f030:	4604      	mov	r4, r0
 800f032:	f003 fb9d 	bl	8012770 <__gettzinfo>
 800f036:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800f03a:	429c      	cmp	r4, r3
 800f03c:	f340 80a3 	ble.w	800f186 <__tzcalc_limits+0x15a>
 800f040:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800f044:	1865      	adds	r5, r4, r1
 800f046:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800f04a:	f240 126d 	movw	r2, #365	@ 0x16d
 800f04e:	10ad      	asrs	r5, r5, #2
 800f050:	fb02 5503 	mla	r5, r2, r3, r5
 800f054:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800f058:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800f05c:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800f060:	fb93 f3f2 	sdiv	r3, r3, r2
 800f064:	441d      	add	r5, r3
 800f066:	19a3      	adds	r3, r4, r6
 800f068:	4e48      	ldr	r6, [pc, #288]	@ (800f18c <__tzcalc_limits+0x160>)
 800f06a:	6044      	str	r4, [r0, #4]
 800f06c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f070:	4601      	mov	r1, r0
 800f072:	fbb3 f3f2 	udiv	r3, r3, r2
 800f076:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800f07a:	441d      	add	r5, r3
 800f07c:	7a0b      	ldrb	r3, [r1, #8]
 800f07e:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800f082:	2b4a      	cmp	r3, #74	@ 0x4a
 800f084:	d138      	bne.n	800f0f8 <__tzcalc_limits+0xcc>
 800f086:	07a2      	lsls	r2, r4, #30
 800f088:	eb05 030c 	add.w	r3, r5, ip
 800f08c:	d106      	bne.n	800f09c <__tzcalc_limits+0x70>
 800f08e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800f092:	fb94 f2fe 	sdiv	r2, r4, lr
 800f096:	fb0e 4212 	mls	r2, lr, r2, r4
 800f09a:	b932      	cbnz	r2, 800f0aa <__tzcalc_limits+0x7e>
 800f09c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800f0a0:	fb94 f2fe 	sdiv	r2, r4, lr
 800f0a4:	fb0e 4212 	mls	r2, lr, r2, r4
 800f0a8:	bb1a      	cbnz	r2, 800f0f2 <__tzcalc_limits+0xc6>
 800f0aa:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800f0ae:	bfd4      	ite	le
 800f0b0:	f04f 0c00 	movle.w	ip, #0
 800f0b4:	f04f 0c01 	movgt.w	ip, #1
 800f0b8:	4463      	add	r3, ip
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	698a      	ldr	r2, [r1, #24]
 800f0be:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800f0c2:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800f0c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800f0c8:	18d2      	adds	r2, r2, r3
 800f0ca:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800f0ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800f0d2:	3128      	adds	r1, #40	@ 0x28
 800f0d4:	428f      	cmp	r7, r1
 800f0d6:	d1d1      	bne.n	800f07c <__tzcalc_limits+0x50>
 800f0d8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800f0dc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800f0e0:	428c      	cmp	r4, r1
 800f0e2:	4193      	sbcs	r3, r2
 800f0e4:	bfb4      	ite	lt
 800f0e6:	2301      	movlt	r3, #1
 800f0e8:	2300      	movge	r3, #0
 800f0ea:	6003      	str	r3, [r0, #0]
 800f0ec:	2001      	movs	r0, #1
 800f0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f2:	f04f 0c00 	mov.w	ip, #0
 800f0f6:	e7df      	b.n	800f0b8 <__tzcalc_limits+0x8c>
 800f0f8:	2b44      	cmp	r3, #68	@ 0x44
 800f0fa:	d102      	bne.n	800f102 <__tzcalc_limits+0xd6>
 800f0fc:	eb05 030c 	add.w	r3, r5, ip
 800f100:	e7dc      	b.n	800f0bc <__tzcalc_limits+0x90>
 800f102:	07a3      	lsls	r3, r4, #30
 800f104:	d105      	bne.n	800f112 <__tzcalc_limits+0xe6>
 800f106:	2264      	movs	r2, #100	@ 0x64
 800f108:	fb94 f3f2 	sdiv	r3, r4, r2
 800f10c:	fb02 4313 	mls	r3, r2, r3, r4
 800f110:	bb93      	cbnz	r3, 800f178 <__tzcalc_limits+0x14c>
 800f112:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800f116:	fb94 f3f2 	sdiv	r3, r4, r2
 800f11a:	fb02 4313 	mls	r3, r2, r3, r4
 800f11e:	fab3 f383 	clz	r3, r3
 800f122:	095b      	lsrs	r3, r3, #5
 800f124:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800f190 <__tzcalc_limits+0x164>
 800f128:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800f12c:	425b      	negs	r3, r3
 800f12e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f132:	462a      	mov	r2, r5
 800f134:	f04f 0800 	mov.w	r8, #0
 800f138:	4473      	add	r3, lr
 800f13a:	f108 0801 	add.w	r8, r8, #1
 800f13e:	45c1      	cmp	r9, r8
 800f140:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800f144:	dc1a      	bgt.n	800f17c <__tzcalc_limits+0x150>
 800f146:	f102 0804 	add.w	r8, r2, #4
 800f14a:	2307      	movs	r3, #7
 800f14c:	fb98 f3f3 	sdiv	r3, r8, r3
 800f150:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f154:	eba8 0303 	sub.w	r3, r8, r3
 800f158:	ebbc 0c03 	subs.w	ip, ip, r3
 800f15c:	690b      	ldr	r3, [r1, #16]
 800f15e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f162:	bf48      	it	mi
 800f164:	f10c 0c07 	addmi.w	ip, ip, #7
 800f168:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f16c:	449c      	add	ip, r3
 800f16e:	45f4      	cmp	ip, lr
 800f170:	da06      	bge.n	800f180 <__tzcalc_limits+0x154>
 800f172:	eb02 030c 	add.w	r3, r2, ip
 800f176:	e7a1      	b.n	800f0bc <__tzcalc_limits+0x90>
 800f178:	2301      	movs	r3, #1
 800f17a:	e7d3      	b.n	800f124 <__tzcalc_limits+0xf8>
 800f17c:	4472      	add	r2, lr
 800f17e:	e7dc      	b.n	800f13a <__tzcalc_limits+0x10e>
 800f180:	f1ac 0c07 	sub.w	ip, ip, #7
 800f184:	e7f3      	b.n	800f16e <__tzcalc_limits+0x142>
 800f186:	2000      	movs	r0, #0
 800f188:	e7b1      	b.n	800f0ee <__tzcalc_limits+0xc2>
 800f18a:	bf00      	nop
 800f18c:	00015180 	.word	0x00015180
 800f190:	08013aa0 	.word	0x08013aa0

0800f194 <__tz_lock>:
 800f194:	4801      	ldr	r0, [pc, #4]	@ (800f19c <__tz_lock+0x8>)
 800f196:	f000 bab8 	b.w	800f70a <__retarget_lock_acquire>
 800f19a:	bf00      	nop
 800f19c:	20006f70 	.word	0x20006f70

0800f1a0 <__tz_unlock>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	@ (800f1a8 <__tz_unlock+0x8>)
 800f1a2:	f000 bab4 	b.w	800f70e <__retarget_lock_release>
 800f1a6:	bf00      	nop
 800f1a8:	20006f70 	.word	0x20006f70

0800f1ac <_tzset_unlocked>:
 800f1ac:	4b01      	ldr	r3, [pc, #4]	@ (800f1b4 <_tzset_unlocked+0x8>)
 800f1ae:	6818      	ldr	r0, [r3, #0]
 800f1b0:	f000 b802 	b.w	800f1b8 <_tzset_unlocked_r>
 800f1b4:	200001a4 	.word	0x200001a4

0800f1b8 <_tzset_unlocked_r>:
 800f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	b08d      	sub	sp, #52	@ 0x34
 800f1be:	4607      	mov	r7, r0
 800f1c0:	f003 fad6 	bl	8012770 <__gettzinfo>
 800f1c4:	49bc      	ldr	r1, [pc, #752]	@ (800f4b8 <_tzset_unlocked_r+0x300>)
 800f1c6:	4dbd      	ldr	r5, [pc, #756]	@ (800f4bc <_tzset_unlocked_r+0x304>)
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	f001 fd00 	bl	8010bd0 <_getenv_r>
 800f1d0:	4606      	mov	r6, r0
 800f1d2:	bb10      	cbnz	r0, 800f21a <_tzset_unlocked_r+0x62>
 800f1d4:	4bba      	ldr	r3, [pc, #744]	@ (800f4c0 <_tzset_unlocked_r+0x308>)
 800f1d6:	4abb      	ldr	r2, [pc, #748]	@ (800f4c4 <_tzset_unlocked_r+0x30c>)
 800f1d8:	6018      	str	r0, [r3, #0]
 800f1da:	4bbb      	ldr	r3, [pc, #748]	@ (800f4c8 <_tzset_unlocked_r+0x310>)
 800f1dc:	62a0      	str	r0, [r4, #40]	@ 0x28
 800f1de:	6018      	str	r0, [r3, #0]
 800f1e0:	4bba      	ldr	r3, [pc, #744]	@ (800f4cc <_tzset_unlocked_r+0x314>)
 800f1e2:	6520      	str	r0, [r4, #80]	@ 0x50
 800f1e4:	e9c3 2200 	strd	r2, r2, [r3]
 800f1e8:	214a      	movs	r1, #74	@ 0x4a
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800f1f2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800f1f6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800f1fa:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f1fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f202:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800f206:	6828      	ldr	r0, [r5, #0]
 800f208:	7221      	strb	r1, [r4, #8]
 800f20a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800f20e:	f001 fcef 	bl	8010bf0 <free>
 800f212:	602e      	str	r6, [r5, #0]
 800f214:	b00d      	add	sp, #52	@ 0x34
 800f216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21a:	6829      	ldr	r1, [r5, #0]
 800f21c:	2900      	cmp	r1, #0
 800f21e:	f040 808e 	bne.w	800f33e <_tzset_unlocked_r+0x186>
 800f222:	6828      	ldr	r0, [r5, #0]
 800f224:	f001 fce4 	bl	8010bf0 <free>
 800f228:	4630      	mov	r0, r6
 800f22a:	f7f1 f839 	bl	80002a0 <strlen>
 800f22e:	1c41      	adds	r1, r0, #1
 800f230:	4638      	mov	r0, r7
 800f232:	f001 fd07 	bl	8010c44 <_malloc_r>
 800f236:	6028      	str	r0, [r5, #0]
 800f238:	2800      	cmp	r0, #0
 800f23a:	f040 8086 	bne.w	800f34a <_tzset_unlocked_r+0x192>
 800f23e:	4aa2      	ldr	r2, [pc, #648]	@ (800f4c8 <_tzset_unlocked_r+0x310>)
 800f240:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800f4cc <_tzset_unlocked_r+0x314>
 800f244:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800f4c0 <_tzset_unlocked_r+0x308>
 800f248:	2300      	movs	r3, #0
 800f24a:	6013      	str	r3, [r2, #0]
 800f24c:	4aa0      	ldr	r2, [pc, #640]	@ (800f4d0 <_tzset_unlocked_r+0x318>)
 800f24e:	f8ca 3000 	str.w	r3, [sl]
 800f252:	2000      	movs	r0, #0
 800f254:	2100      	movs	r1, #0
 800f256:	e9c8 2200 	strd	r2, r2, [r8]
 800f25a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800f25e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800f262:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800f266:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800f26a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800f26e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800f272:	224a      	movs	r2, #74	@ 0x4a
 800f274:	7222      	strb	r2, [r4, #8]
 800f276:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f278:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800f27c:	6523      	str	r3, [r4, #80]	@ 0x50
 800f27e:	7833      	ldrb	r3, [r6, #0]
 800f280:	2b3a      	cmp	r3, #58	@ 0x3a
 800f282:	bf08      	it	eq
 800f284:	3601      	addeq	r6, #1
 800f286:	7833      	ldrb	r3, [r6, #0]
 800f288:	2b3c      	cmp	r3, #60	@ 0x3c
 800f28a:	d162      	bne.n	800f352 <_tzset_unlocked_r+0x19a>
 800f28c:	1c75      	adds	r5, r6, #1
 800f28e:	4a91      	ldr	r2, [pc, #580]	@ (800f4d4 <_tzset_unlocked_r+0x31c>)
 800f290:	4991      	ldr	r1, [pc, #580]	@ (800f4d8 <_tzset_unlocked_r+0x320>)
 800f292:	ab0a      	add	r3, sp, #40	@ 0x28
 800f294:	4628      	mov	r0, r5
 800f296:	f7ff f91d 	bl	800e4d4 <siscanf>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	ddba      	ble.n	800f214 <_tzset_unlocked_r+0x5c>
 800f29e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2a0:	1eda      	subs	r2, r3, #3
 800f2a2:	2a07      	cmp	r2, #7
 800f2a4:	d8b6      	bhi.n	800f214 <_tzset_unlocked_r+0x5c>
 800f2a6:	5ceb      	ldrb	r3, [r5, r3]
 800f2a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800f2aa:	d1b3      	bne.n	800f214 <_tzset_unlocked_r+0x5c>
 800f2ac:	3602      	adds	r6, #2
 800f2ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2b0:	18f5      	adds	r5, r6, r3
 800f2b2:	5cf3      	ldrb	r3, [r6, r3]
 800f2b4:	2b2d      	cmp	r3, #45	@ 0x2d
 800f2b6:	d15a      	bne.n	800f36e <_tzset_unlocked_r+0x1b6>
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	f04f 39ff 	mov.w	r9, #4294967295
 800f2be:	2300      	movs	r3, #0
 800f2c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f2c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f2c8:	af08      	add	r7, sp, #32
 800f2ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800f2cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800f2d0:	9303      	str	r3, [sp, #12]
 800f2d2:	f10d 031e 	add.w	r3, sp, #30
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	4980      	ldr	r1, [pc, #512]	@ (800f4dc <_tzset_unlocked_r+0x324>)
 800f2da:	ab0a      	add	r3, sp, #40	@ 0x28
 800f2dc:	aa07      	add	r2, sp, #28
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f7ff f8f8 	bl	800e4d4 <siscanf>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	dd95      	ble.n	800f214 <_tzset_unlocked_r+0x5c>
 800f2e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f2ec:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800f2f0:	223c      	movs	r2, #60	@ 0x3c
 800f2f2:	fb02 6603 	mla	r6, r2, r3, r6
 800f2f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f2fa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800f2fe:	fb02 6603 	mla	r6, r2, r3, r6
 800f302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f304:	fb09 f606 	mul.w	r6, r9, r6
 800f308:	eb05 0903 	add.w	r9, r5, r3
 800f30c:	5ceb      	ldrb	r3, [r5, r3]
 800f30e:	2b3c      	cmp	r3, #60	@ 0x3c
 800f310:	f040 80ee 	bne.w	800f4f0 <_tzset_unlocked_r+0x338>
 800f314:	f109 0501 	add.w	r5, r9, #1
 800f318:	4a71      	ldr	r2, [pc, #452]	@ (800f4e0 <_tzset_unlocked_r+0x328>)
 800f31a:	496f      	ldr	r1, [pc, #444]	@ (800f4d8 <_tzset_unlocked_r+0x320>)
 800f31c:	ab0a      	add	r3, sp, #40	@ 0x28
 800f31e:	4628      	mov	r0, r5
 800f320:	f7ff f8d8 	bl	800e4d4 <siscanf>
 800f324:	2800      	cmp	r0, #0
 800f326:	dc28      	bgt.n	800f37a <_tzset_unlocked_r+0x1c2>
 800f328:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f32c:	2b3e      	cmp	r3, #62	@ 0x3e
 800f32e:	d124      	bne.n	800f37a <_tzset_unlocked_r+0x1c2>
 800f330:	4b68      	ldr	r3, [pc, #416]	@ (800f4d4 <_tzset_unlocked_r+0x31c>)
 800f332:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f334:	e9c8 3300 	strd	r3, r3, [r8]
 800f338:	f8ca 6000 	str.w	r6, [sl]
 800f33c:	e76a      	b.n	800f214 <_tzset_unlocked_r+0x5c>
 800f33e:	f7f0 ff4f 	bl	80001e0 <strcmp>
 800f342:	2800      	cmp	r0, #0
 800f344:	f47f af6d 	bne.w	800f222 <_tzset_unlocked_r+0x6a>
 800f348:	e764      	b.n	800f214 <_tzset_unlocked_r+0x5c>
 800f34a:	4631      	mov	r1, r6
 800f34c:	f000 f9e1 	bl	800f712 <strcpy>
 800f350:	e775      	b.n	800f23e <_tzset_unlocked_r+0x86>
 800f352:	4a60      	ldr	r2, [pc, #384]	@ (800f4d4 <_tzset_unlocked_r+0x31c>)
 800f354:	4963      	ldr	r1, [pc, #396]	@ (800f4e4 <_tzset_unlocked_r+0x32c>)
 800f356:	ab0a      	add	r3, sp, #40	@ 0x28
 800f358:	4630      	mov	r0, r6
 800f35a:	f7ff f8bb 	bl	800e4d4 <siscanf>
 800f35e:	2800      	cmp	r0, #0
 800f360:	f77f af58 	ble.w	800f214 <_tzset_unlocked_r+0x5c>
 800f364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f366:	3b03      	subs	r3, #3
 800f368:	2b07      	cmp	r3, #7
 800f36a:	d9a0      	bls.n	800f2ae <_tzset_unlocked_r+0xf6>
 800f36c:	e752      	b.n	800f214 <_tzset_unlocked_r+0x5c>
 800f36e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f370:	bf08      	it	eq
 800f372:	3501      	addeq	r5, #1
 800f374:	f04f 0901 	mov.w	r9, #1
 800f378:	e7a1      	b.n	800f2be <_tzset_unlocked_r+0x106>
 800f37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f37c:	1eda      	subs	r2, r3, #3
 800f37e:	2a07      	cmp	r2, #7
 800f380:	f63f af48 	bhi.w	800f214 <_tzset_unlocked_r+0x5c>
 800f384:	5ceb      	ldrb	r3, [r5, r3]
 800f386:	2b3e      	cmp	r3, #62	@ 0x3e
 800f388:	f47f af44 	bne.w	800f214 <_tzset_unlocked_r+0x5c>
 800f38c:	f109 0902 	add.w	r9, r9, #2
 800f390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f392:	eb09 0503 	add.w	r5, r9, r3
 800f396:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f39a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f39c:	f040 80b7 	bne.w	800f50e <_tzset_unlocked_r+0x356>
 800f3a0:	3501      	adds	r5, #1
 800f3a2:	f04f 39ff 	mov.w	r9, #4294967295
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f3ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f3b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f3b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3b8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	f10d 031e 	add.w	r3, sp, #30
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4945      	ldr	r1, [pc, #276]	@ (800f4dc <_tzset_unlocked_r+0x324>)
 800f3c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3c8:	aa07      	add	r2, sp, #28
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f7ff f882 	bl	800e4d4 <siscanf>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	f300 80a2 	bgt.w	800f51a <_tzset_unlocked_r+0x362>
 800f3d6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800f3da:	9304      	str	r3, [sp, #16]
 800f3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3de:	4627      	mov	r7, r4
 800f3e0:	441d      	add	r5, r3
 800f3e2:	f04f 0b00 	mov.w	fp, #0
 800f3e6:	782b      	ldrb	r3, [r5, #0]
 800f3e8:	2b2c      	cmp	r3, #44	@ 0x2c
 800f3ea:	bf08      	it	eq
 800f3ec:	3501      	addeq	r5, #1
 800f3ee:	f895 9000 	ldrb.w	r9, [r5]
 800f3f2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800f3f6:	f040 80a3 	bne.w	800f540 <_tzset_unlocked_r+0x388>
 800f3fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3fc:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800f400:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f404:	aa09      	add	r2, sp, #36	@ 0x24
 800f406:	9200      	str	r2, [sp, #0]
 800f408:	4937      	ldr	r1, [pc, #220]	@ (800f4e8 <_tzset_unlocked_r+0x330>)
 800f40a:	9303      	str	r3, [sp, #12]
 800f40c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800f410:	4628      	mov	r0, r5
 800f412:	f7ff f85f 	bl	800e4d4 <siscanf>
 800f416:	2803      	cmp	r0, #3
 800f418:	f47f aefc 	bne.w	800f214 <_tzset_unlocked_r+0x5c>
 800f41c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800f420:	1e4b      	subs	r3, r1, #1
 800f422:	2b0b      	cmp	r3, #11
 800f424:	f63f aef6 	bhi.w	800f214 <_tzset_unlocked_r+0x5c>
 800f428:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800f42c:	1e53      	subs	r3, r2, #1
 800f42e:	2b04      	cmp	r3, #4
 800f430:	f63f aef0 	bhi.w	800f214 <_tzset_unlocked_r+0x5c>
 800f434:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800f438:	2b06      	cmp	r3, #6
 800f43a:	f63f aeeb 	bhi.w	800f214 <_tzset_unlocked_r+0x5c>
 800f43e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800f442:	f887 9008 	strb.w	r9, [r7, #8]
 800f446:	617b      	str	r3, [r7, #20]
 800f448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f44a:	eb05 0903 	add.w	r9, r5, r3
 800f44e:	2500      	movs	r5, #0
 800f450:	f04f 0302 	mov.w	r3, #2
 800f454:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f458:	f8ad 501e 	strh.w	r5, [sp, #30]
 800f45c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800f460:	950a      	str	r5, [sp, #40]	@ 0x28
 800f462:	f899 3000 	ldrb.w	r3, [r9]
 800f466:	2b2f      	cmp	r3, #47	@ 0x2f
 800f468:	f040 8096 	bne.w	800f598 <_tzset_unlocked_r+0x3e0>
 800f46c:	ab0a      	add	r3, sp, #40	@ 0x28
 800f46e:	aa08      	add	r2, sp, #32
 800f470:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f474:	f10d 021e 	add.w	r2, sp, #30
 800f478:	9200      	str	r2, [sp, #0]
 800f47a:	491c      	ldr	r1, [pc, #112]	@ (800f4ec <_tzset_unlocked_r+0x334>)
 800f47c:	9303      	str	r3, [sp, #12]
 800f47e:	aa07      	add	r2, sp, #28
 800f480:	4648      	mov	r0, r9
 800f482:	f7ff f827 	bl	800e4d4 <siscanf>
 800f486:	42a8      	cmp	r0, r5
 800f488:	f300 8086 	bgt.w	800f598 <_tzset_unlocked_r+0x3e0>
 800f48c:	214a      	movs	r1, #74	@ 0x4a
 800f48e:	2200      	movs	r2, #0
 800f490:	2300      	movs	r3, #0
 800f492:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800f496:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f49a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f49e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800f4a2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800f4a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800f4aa:	7221      	strb	r1, [r4, #8]
 800f4ac:	62a5      	str	r5, [r4, #40]	@ 0x28
 800f4ae:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800f4b2:	6525      	str	r5, [r4, #80]	@ 0x50
 800f4b4:	e6ae      	b.n	800f214 <_tzset_unlocked_r+0x5c>
 800f4b6:	bf00      	nop
 800f4b8:	0801368a 	.word	0x0801368a
 800f4bc:	20006f48 	.word	0x20006f48
 800f4c0:	20006f64 	.word	0x20006f64
 800f4c4:	0801368d 	.word	0x0801368d
 800f4c8:	20006f68 	.word	0x20006f68
 800f4cc:	20000030 	.word	0x20000030
 800f4d0:	080138ef 	.word	0x080138ef
 800f4d4:	20006f58 	.word	0x20006f58
 800f4d8:	08013691 	.word	0x08013691
 800f4dc:	080136c6 	.word	0x080136c6
 800f4e0:	20006f4c 	.word	0x20006f4c
 800f4e4:	080136a4 	.word	0x080136a4
 800f4e8:	080136b2 	.word	0x080136b2
 800f4ec:	080136c5 	.word	0x080136c5
 800f4f0:	4a3e      	ldr	r2, [pc, #248]	@ (800f5ec <_tzset_unlocked_r+0x434>)
 800f4f2:	493f      	ldr	r1, [pc, #252]	@ (800f5f0 <_tzset_unlocked_r+0x438>)
 800f4f4:	ab0a      	add	r3, sp, #40	@ 0x28
 800f4f6:	4648      	mov	r0, r9
 800f4f8:	f7fe ffec 	bl	800e4d4 <siscanf>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	f77f af17 	ble.w	800f330 <_tzset_unlocked_r+0x178>
 800f502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f504:	3b03      	subs	r3, #3
 800f506:	2b07      	cmp	r3, #7
 800f508:	f67f af42 	bls.w	800f390 <_tzset_unlocked_r+0x1d8>
 800f50c:	e682      	b.n	800f214 <_tzset_unlocked_r+0x5c>
 800f50e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f510:	bf08      	it	eq
 800f512:	3501      	addeq	r5, #1
 800f514:	f04f 0901 	mov.w	r9, #1
 800f518:	e745      	b.n	800f3a6 <_tzset_unlocked_r+0x1ee>
 800f51a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f51e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f522:	213c      	movs	r1, #60	@ 0x3c
 800f524:	fb01 3302 	mla	r3, r1, r2, r3
 800f528:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f52c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800f530:	fb01 3302 	mla	r3, r1, r2, r3
 800f534:	fb09 f303 	mul.w	r3, r9, r3
 800f538:	e74f      	b.n	800f3da <_tzset_unlocked_r+0x222>
 800f53a:	f04f 0b01 	mov.w	fp, #1
 800f53e:	e752      	b.n	800f3e6 <_tzset_unlocked_r+0x22e>
 800f540:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800f544:	bf06      	itte	eq
 800f546:	3501      	addeq	r5, #1
 800f548:	464b      	moveq	r3, r9
 800f54a:	2344      	movne	r3, #68	@ 0x44
 800f54c:	220a      	movs	r2, #10
 800f54e:	a90b      	add	r1, sp, #44	@ 0x2c
 800f550:	4628      	mov	r0, r5
 800f552:	9305      	str	r3, [sp, #20]
 800f554:	f002 f92e 	bl	80117b4 <strtoul>
 800f558:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800f55c:	9b05      	ldr	r3, [sp, #20]
 800f55e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800f562:	45a9      	cmp	r9, r5
 800f564:	d114      	bne.n	800f590 <_tzset_unlocked_r+0x3d8>
 800f566:	234d      	movs	r3, #77	@ 0x4d
 800f568:	f1bb 0f00 	cmp.w	fp, #0
 800f56c:	d107      	bne.n	800f57e <_tzset_unlocked_r+0x3c6>
 800f56e:	7223      	strb	r3, [r4, #8]
 800f570:	2103      	movs	r1, #3
 800f572:	2302      	movs	r3, #2
 800f574:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800f578:	f8c4 b014 	str.w	fp, [r4, #20]
 800f57c:	e767      	b.n	800f44e <_tzset_unlocked_r+0x296>
 800f57e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800f582:	220b      	movs	r2, #11
 800f584:	2301      	movs	r3, #1
 800f586:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800f58a:	2300      	movs	r3, #0
 800f58c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f58e:	e75e      	b.n	800f44e <_tzset_unlocked_r+0x296>
 800f590:	b280      	uxth	r0, r0
 800f592:	723b      	strb	r3, [r7, #8]
 800f594:	6178      	str	r0, [r7, #20]
 800f596:	e75a      	b.n	800f44e <_tzset_unlocked_r+0x296>
 800f598:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f59c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f5a0:	213c      	movs	r1, #60	@ 0x3c
 800f5a2:	fb01 3302 	mla	r3, r1, r2, r3
 800f5a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800f5aa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800f5ae:	fb01 3302 	mla	r3, r1, r2, r3
 800f5b2:	61bb      	str	r3, [r7, #24]
 800f5b4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f5b6:	3728      	adds	r7, #40	@ 0x28
 800f5b8:	444d      	add	r5, r9
 800f5ba:	f1bb 0f00 	cmp.w	fp, #0
 800f5be:	d0bc      	beq.n	800f53a <_tzset_unlocked_r+0x382>
 800f5c0:	9b04      	ldr	r3, [sp, #16]
 800f5c2:	6523      	str	r3, [r4, #80]	@ 0x50
 800f5c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f5f4 <_tzset_unlocked_r+0x43c>)
 800f5c6:	f8c8 3000 	str.w	r3, [r8]
 800f5ca:	6860      	ldr	r0, [r4, #4]
 800f5cc:	4b07      	ldr	r3, [pc, #28]	@ (800f5ec <_tzset_unlocked_r+0x434>)
 800f5ce:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f5d0:	f8c8 3004 	str.w	r3, [r8, #4]
 800f5d4:	f7ff fd2a 	bl	800f02c <__tzcalc_limits>
 800f5d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f5da:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f5dc:	f8ca 2000 	str.w	r2, [sl]
 800f5e0:	1a9b      	subs	r3, r3, r2
 800f5e2:	4a05      	ldr	r2, [pc, #20]	@ (800f5f8 <_tzset_unlocked_r+0x440>)
 800f5e4:	bf18      	it	ne
 800f5e6:	2301      	movne	r3, #1
 800f5e8:	6013      	str	r3, [r2, #0]
 800f5ea:	e613      	b.n	800f214 <_tzset_unlocked_r+0x5c>
 800f5ec:	20006f4c 	.word	0x20006f4c
 800f5f0:	080136a4 	.word	0x080136a4
 800f5f4:	20006f58 	.word	0x20006f58
 800f5f8:	20006f68 	.word	0x20006f68

0800f5fc <_localeconv_r>:
 800f5fc:	4800      	ldr	r0, [pc, #0]	@ (800f600 <_localeconv_r+0x4>)
 800f5fe:	4770      	bx	lr
 800f600:	20000128 	.word	0x20000128

0800f604 <_close_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4d06      	ldr	r5, [pc, #24]	@ (800f620 <_close_r+0x1c>)
 800f608:	2300      	movs	r3, #0
 800f60a:	4604      	mov	r4, r0
 800f60c:	4608      	mov	r0, r1
 800f60e:	602b      	str	r3, [r5, #0]
 800f610:	f7f5 fa30 	bl	8004a74 <_close>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_close_r+0x1a>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_close_r+0x1a>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	20006f6c 	.word	0x20006f6c

0800f624 <_gettimeofday_r>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	4d07      	ldr	r5, [pc, #28]	@ (800f644 <_gettimeofday_r+0x20>)
 800f628:	2300      	movs	r3, #0
 800f62a:	4604      	mov	r4, r0
 800f62c:	4608      	mov	r0, r1
 800f62e:	4611      	mov	r1, r2
 800f630:	602b      	str	r3, [r5, #0]
 800f632:	f7f5 fa53 	bl	8004adc <_gettimeofday>
 800f636:	1c43      	adds	r3, r0, #1
 800f638:	d102      	bne.n	800f640 <_gettimeofday_r+0x1c>
 800f63a:	682b      	ldr	r3, [r5, #0]
 800f63c:	b103      	cbz	r3, 800f640 <_gettimeofday_r+0x1c>
 800f63e:	6023      	str	r3, [r4, #0]
 800f640:	bd38      	pop	{r3, r4, r5, pc}
 800f642:	bf00      	nop
 800f644:	20006f6c 	.word	0x20006f6c

0800f648 <_lseek_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4d07      	ldr	r5, [pc, #28]	@ (800f668 <_lseek_r+0x20>)
 800f64c:	4604      	mov	r4, r0
 800f64e:	4608      	mov	r0, r1
 800f650:	4611      	mov	r1, r2
 800f652:	2200      	movs	r2, #0
 800f654:	602a      	str	r2, [r5, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	f7f5 fa33 	bl	8004ac2 <_lseek>
 800f65c:	1c43      	adds	r3, r0, #1
 800f65e:	d102      	bne.n	800f666 <_lseek_r+0x1e>
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	b103      	cbz	r3, 800f666 <_lseek_r+0x1e>
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	bd38      	pop	{r3, r4, r5, pc}
 800f668:	20006f6c 	.word	0x20006f6c

0800f66c <_read_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d07      	ldr	r5, [pc, #28]	@ (800f68c <_read_r+0x20>)
 800f670:	4604      	mov	r4, r0
 800f672:	4608      	mov	r0, r1
 800f674:	4611      	mov	r1, r2
 800f676:	2200      	movs	r2, #0
 800f678:	602a      	str	r2, [r5, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	f7f5 f9c1 	bl	8004a02 <_read>
 800f680:	1c43      	adds	r3, r0, #1
 800f682:	d102      	bne.n	800f68a <_read_r+0x1e>
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	b103      	cbz	r3, 800f68a <_read_r+0x1e>
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	20006f6c 	.word	0x20006f6c

0800f690 <_write_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d07      	ldr	r5, [pc, #28]	@ (800f6b0 <_write_r+0x20>)
 800f694:	4604      	mov	r4, r0
 800f696:	4608      	mov	r0, r1
 800f698:	4611      	mov	r1, r2
 800f69a:	2200      	movs	r2, #0
 800f69c:	602a      	str	r2, [r5, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	f7f5 f9cc 	bl	8004a3c <_write>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d102      	bne.n	800f6ae <_write_r+0x1e>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	b103      	cbz	r3, 800f6ae <_write_r+0x1e>
 800f6ac:	6023      	str	r3, [r4, #0]
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	20006f6c 	.word	0x20006f6c

0800f6b4 <__errno>:
 800f6b4:	4b01      	ldr	r3, [pc, #4]	@ (800f6bc <__errno+0x8>)
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	200001a4 	.word	0x200001a4

0800f6c0 <__libc_init_array>:
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	4d0d      	ldr	r5, [pc, #52]	@ (800f6f8 <__libc_init_array+0x38>)
 800f6c4:	4c0d      	ldr	r4, [pc, #52]	@ (800f6fc <__libc_init_array+0x3c>)
 800f6c6:	1b64      	subs	r4, r4, r5
 800f6c8:	10a4      	asrs	r4, r4, #2
 800f6ca:	2600      	movs	r6, #0
 800f6cc:	42a6      	cmp	r6, r4
 800f6ce:	d109      	bne.n	800f6e4 <__libc_init_array+0x24>
 800f6d0:	4d0b      	ldr	r5, [pc, #44]	@ (800f700 <__libc_init_array+0x40>)
 800f6d2:	4c0c      	ldr	r4, [pc, #48]	@ (800f704 <__libc_init_array+0x44>)
 800f6d4:	f003 f9ca 	bl	8012a6c <_init>
 800f6d8:	1b64      	subs	r4, r4, r5
 800f6da:	10a4      	asrs	r4, r4, #2
 800f6dc:	2600      	movs	r6, #0
 800f6de:	42a6      	cmp	r6, r4
 800f6e0:	d105      	bne.n	800f6ee <__libc_init_array+0x2e>
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
 800f6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6e8:	4798      	blx	r3
 800f6ea:	3601      	adds	r6, #1
 800f6ec:	e7ee      	b.n	800f6cc <__libc_init_array+0xc>
 800f6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f2:	4798      	blx	r3
 800f6f4:	3601      	adds	r6, #1
 800f6f6:	e7f2      	b.n	800f6de <__libc_init_array+0x1e>
 800f6f8:	08013c44 	.word	0x08013c44
 800f6fc:	08013c44 	.word	0x08013c44
 800f700:	08013c44 	.word	0x08013c44
 800f704:	08013c48 	.word	0x08013c48

0800f708 <__retarget_lock_init_recursive>:
 800f708:	4770      	bx	lr

0800f70a <__retarget_lock_acquire>:
 800f70a:	4770      	bx	lr

0800f70c <__retarget_lock_acquire_recursive>:
 800f70c:	4770      	bx	lr

0800f70e <__retarget_lock_release>:
 800f70e:	4770      	bx	lr

0800f710 <__retarget_lock_release_recursive>:
 800f710:	4770      	bx	lr

0800f712 <strcpy>:
 800f712:	4603      	mov	r3, r0
 800f714:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f718:	f803 2b01 	strb.w	r2, [r3], #1
 800f71c:	2a00      	cmp	r2, #0
 800f71e:	d1f9      	bne.n	800f714 <strcpy+0x2>
 800f720:	4770      	bx	lr

0800f722 <memcpy>:
 800f722:	440a      	add	r2, r1
 800f724:	4291      	cmp	r1, r2
 800f726:	f100 33ff 	add.w	r3, r0, #4294967295
 800f72a:	d100      	bne.n	800f72e <memcpy+0xc>
 800f72c:	4770      	bx	lr
 800f72e:	b510      	push	{r4, lr}
 800f730:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f734:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f738:	4291      	cmp	r1, r2
 800f73a:	d1f9      	bne.n	800f730 <memcpy+0xe>
 800f73c:	bd10      	pop	{r4, pc}
	...

0800f740 <nan>:
 800f740:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f748 <nan+0x8>
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	00000000 	.word	0x00000000
 800f74c:	7ff80000 	.word	0x7ff80000

0800f750 <__assert_func>:
 800f750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f752:	4614      	mov	r4, r2
 800f754:	461a      	mov	r2, r3
 800f756:	4b09      	ldr	r3, [pc, #36]	@ (800f77c <__assert_func+0x2c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4605      	mov	r5, r0
 800f75c:	68d8      	ldr	r0, [r3, #12]
 800f75e:	b14c      	cbz	r4, 800f774 <__assert_func+0x24>
 800f760:	4b07      	ldr	r3, [pc, #28]	@ (800f780 <__assert_func+0x30>)
 800f762:	9100      	str	r1, [sp, #0]
 800f764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f768:	4906      	ldr	r1, [pc, #24]	@ (800f784 <__assert_func+0x34>)
 800f76a:	462b      	mov	r3, r5
 800f76c:	f002 fe9c 	bl	80124a8 <fiprintf>
 800f770:	f003 f8da 	bl	8012928 <abort>
 800f774:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <__assert_func+0x38>)
 800f776:	461c      	mov	r4, r3
 800f778:	e7f3      	b.n	800f762 <__assert_func+0x12>
 800f77a:	bf00      	nop
 800f77c:	200001a4 	.word	0x200001a4
 800f780:	080136e0 	.word	0x080136e0
 800f784:	080136ed 	.word	0x080136ed
 800f788:	080138ef 	.word	0x080138ef

0800f78c <div>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	fb91 f4f2 	sdiv	r4, r1, r2
 800f792:	fb02 1114 	mls	r1, r2, r4, r1
 800f796:	6004      	str	r4, [r0, #0]
 800f798:	6041      	str	r1, [r0, #4]
 800f79a:	bd10      	pop	{r4, pc}

0800f79c <quorem>:
 800f79c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a0:	6903      	ldr	r3, [r0, #16]
 800f7a2:	690c      	ldr	r4, [r1, #16]
 800f7a4:	42a3      	cmp	r3, r4
 800f7a6:	4607      	mov	r7, r0
 800f7a8:	db7e      	blt.n	800f8a8 <quorem+0x10c>
 800f7aa:	3c01      	subs	r4, #1
 800f7ac:	f101 0814 	add.w	r8, r1, #20
 800f7b0:	00a3      	lsls	r3, r4, #2
 800f7b2:	f100 0514 	add.w	r5, r0, #20
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f7ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800f7d2:	d32e      	bcc.n	800f832 <quorem+0x96>
 800f7d4:	f04f 0a00 	mov.w	sl, #0
 800f7d8:	46c4      	mov	ip, r8
 800f7da:	46ae      	mov	lr, r5
 800f7dc:	46d3      	mov	fp, sl
 800f7de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f7e2:	b298      	uxth	r0, r3
 800f7e4:	fb06 a000 	mla	r0, r6, r0, sl
 800f7e8:	0c02      	lsrs	r2, r0, #16
 800f7ea:	0c1b      	lsrs	r3, r3, #16
 800f7ec:	fb06 2303 	mla	r3, r6, r3, r2
 800f7f0:	f8de 2000 	ldr.w	r2, [lr]
 800f7f4:	b280      	uxth	r0, r0
 800f7f6:	b292      	uxth	r2, r2
 800f7f8:	1a12      	subs	r2, r2, r0
 800f7fa:	445a      	add	r2, fp
 800f7fc:	f8de 0000 	ldr.w	r0, [lr]
 800f800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f804:	b29b      	uxth	r3, r3
 800f806:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f80a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f80e:	b292      	uxth	r2, r2
 800f810:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f814:	45e1      	cmp	r9, ip
 800f816:	f84e 2b04 	str.w	r2, [lr], #4
 800f81a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f81e:	d2de      	bcs.n	800f7de <quorem+0x42>
 800f820:	9b00      	ldr	r3, [sp, #0]
 800f822:	58eb      	ldr	r3, [r5, r3]
 800f824:	b92b      	cbnz	r3, 800f832 <quorem+0x96>
 800f826:	9b01      	ldr	r3, [sp, #4]
 800f828:	3b04      	subs	r3, #4
 800f82a:	429d      	cmp	r5, r3
 800f82c:	461a      	mov	r2, r3
 800f82e:	d32f      	bcc.n	800f890 <quorem+0xf4>
 800f830:	613c      	str	r4, [r7, #16]
 800f832:	4638      	mov	r0, r7
 800f834:	f001 fd60 	bl	80112f8 <__mcmp>
 800f838:	2800      	cmp	r0, #0
 800f83a:	db25      	blt.n	800f888 <quorem+0xec>
 800f83c:	4629      	mov	r1, r5
 800f83e:	2000      	movs	r0, #0
 800f840:	f858 2b04 	ldr.w	r2, [r8], #4
 800f844:	f8d1 c000 	ldr.w	ip, [r1]
 800f848:	fa1f fe82 	uxth.w	lr, r2
 800f84c:	fa1f f38c 	uxth.w	r3, ip
 800f850:	eba3 030e 	sub.w	r3, r3, lr
 800f854:	4403      	add	r3, r0
 800f856:	0c12      	lsrs	r2, r2, #16
 800f858:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f85c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f860:	b29b      	uxth	r3, r3
 800f862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f866:	45c1      	cmp	r9, r8
 800f868:	f841 3b04 	str.w	r3, [r1], #4
 800f86c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f870:	d2e6      	bcs.n	800f840 <quorem+0xa4>
 800f872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f87a:	b922      	cbnz	r2, 800f886 <quorem+0xea>
 800f87c:	3b04      	subs	r3, #4
 800f87e:	429d      	cmp	r5, r3
 800f880:	461a      	mov	r2, r3
 800f882:	d30b      	bcc.n	800f89c <quorem+0x100>
 800f884:	613c      	str	r4, [r7, #16]
 800f886:	3601      	adds	r6, #1
 800f888:	4630      	mov	r0, r6
 800f88a:	b003      	add	sp, #12
 800f88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f890:	6812      	ldr	r2, [r2, #0]
 800f892:	3b04      	subs	r3, #4
 800f894:	2a00      	cmp	r2, #0
 800f896:	d1cb      	bne.n	800f830 <quorem+0x94>
 800f898:	3c01      	subs	r4, #1
 800f89a:	e7c6      	b.n	800f82a <quorem+0x8e>
 800f89c:	6812      	ldr	r2, [r2, #0]
 800f89e:	3b04      	subs	r3, #4
 800f8a0:	2a00      	cmp	r2, #0
 800f8a2:	d1ef      	bne.n	800f884 <quorem+0xe8>
 800f8a4:	3c01      	subs	r4, #1
 800f8a6:	e7ea      	b.n	800f87e <quorem+0xe2>
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e7ee      	b.n	800f88a <quorem+0xee>
 800f8ac:	0000      	movs	r0, r0
	...

0800f8b0 <_dtoa_r>:
 800f8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b4:	69c7      	ldr	r7, [r0, #28]
 800f8b6:	b097      	sub	sp, #92	@ 0x5c
 800f8b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f8bc:	ec55 4b10 	vmov	r4, r5, d0
 800f8c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f8c2:	9107      	str	r1, [sp, #28]
 800f8c4:	4681      	mov	r9, r0
 800f8c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f8c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f8ca:	b97f      	cbnz	r7, 800f8ec <_dtoa_r+0x3c>
 800f8cc:	2010      	movs	r0, #16
 800f8ce:	f001 f987 	bl	8010be0 <malloc>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	f8c9 001c 	str.w	r0, [r9, #28]
 800f8d8:	b920      	cbnz	r0, 800f8e4 <_dtoa_r+0x34>
 800f8da:	4ba9      	ldr	r3, [pc, #676]	@ (800fb80 <_dtoa_r+0x2d0>)
 800f8dc:	21ef      	movs	r1, #239	@ 0xef
 800f8de:	48a9      	ldr	r0, [pc, #676]	@ (800fb84 <_dtoa_r+0x2d4>)
 800f8e0:	f7ff ff36 	bl	800f750 <__assert_func>
 800f8e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f8e8:	6007      	str	r7, [r0, #0]
 800f8ea:	60c7      	str	r7, [r0, #12]
 800f8ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f8f0:	6819      	ldr	r1, [r3, #0]
 800f8f2:	b159      	cbz	r1, 800f90c <_dtoa_r+0x5c>
 800f8f4:	685a      	ldr	r2, [r3, #4]
 800f8f6:	604a      	str	r2, [r1, #4]
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	4093      	lsls	r3, r2
 800f8fc:	608b      	str	r3, [r1, #8]
 800f8fe:	4648      	mov	r0, r9
 800f900:	f001 fa7e 	bl	8010e00 <_Bfree>
 800f904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f908:	2200      	movs	r2, #0
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	1e2b      	subs	r3, r5, #0
 800f90e:	bfb9      	ittee	lt
 800f910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f914:	9305      	strlt	r3, [sp, #20]
 800f916:	2300      	movge	r3, #0
 800f918:	6033      	strge	r3, [r6, #0]
 800f91a:	9f05      	ldr	r7, [sp, #20]
 800f91c:	4b9a      	ldr	r3, [pc, #616]	@ (800fb88 <_dtoa_r+0x2d8>)
 800f91e:	bfbc      	itt	lt
 800f920:	2201      	movlt	r2, #1
 800f922:	6032      	strlt	r2, [r6, #0]
 800f924:	43bb      	bics	r3, r7
 800f926:	d112      	bne.n	800f94e <_dtoa_r+0x9e>
 800f928:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f92a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f92e:	6013      	str	r3, [r2, #0]
 800f930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f934:	4323      	orrs	r3, r4
 800f936:	f000 855a 	beq.w	80103ee <_dtoa_r+0xb3e>
 800f93a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f93c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fb9c <_dtoa_r+0x2ec>
 800f940:	2b00      	cmp	r3, #0
 800f942:	f000 855c 	beq.w	80103fe <_dtoa_r+0xb4e>
 800f946:	f10a 0303 	add.w	r3, sl, #3
 800f94a:	f000 bd56 	b.w	80103fa <_dtoa_r+0xb4a>
 800f94e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f952:	2200      	movs	r2, #0
 800f954:	ec51 0b17 	vmov	r0, r1, d7
 800f958:	2300      	movs	r3, #0
 800f95a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f95e:	f7f1 f8cb 	bl	8000af8 <__aeabi_dcmpeq>
 800f962:	4680      	mov	r8, r0
 800f964:	b158      	cbz	r0, 800f97e <_dtoa_r+0xce>
 800f966:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f968:	2301      	movs	r3, #1
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f96e:	b113      	cbz	r3, 800f976 <_dtoa_r+0xc6>
 800f970:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f972:	4b86      	ldr	r3, [pc, #536]	@ (800fb8c <_dtoa_r+0x2dc>)
 800f974:	6013      	str	r3, [r2, #0]
 800f976:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fba0 <_dtoa_r+0x2f0>
 800f97a:	f000 bd40 	b.w	80103fe <_dtoa_r+0xb4e>
 800f97e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f982:	aa14      	add	r2, sp, #80	@ 0x50
 800f984:	a915      	add	r1, sp, #84	@ 0x54
 800f986:	4648      	mov	r0, r9
 800f988:	f001 fdd6 	bl	8011538 <__d2b>
 800f98c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f990:	9002      	str	r0, [sp, #8]
 800f992:	2e00      	cmp	r6, #0
 800f994:	d078      	beq.n	800fa88 <_dtoa_r+0x1d8>
 800f996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f998:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f99c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f9a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f9a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f9ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	4b76      	ldr	r3, [pc, #472]	@ (800fb90 <_dtoa_r+0x2e0>)
 800f9b6:	f7f0 fc7f 	bl	80002b8 <__aeabi_dsub>
 800f9ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800fb68 <_dtoa_r+0x2b8>)
 800f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c0:	f7f0 fe32 	bl	8000628 <__aeabi_dmul>
 800f9c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800fb70 <_dtoa_r+0x2c0>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	f7f0 fc77 	bl	80002bc <__adddf3>
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	f7f0 fdbe 	bl	8000554 <__aeabi_i2d>
 800f9d8:	a367      	add	r3, pc, #412	@ (adr r3, 800fb78 <_dtoa_r+0x2c8>)
 800f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9de:	f7f0 fe23 	bl	8000628 <__aeabi_dmul>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	f7f0 fc67 	bl	80002bc <__adddf3>
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	f7f1 f8c9 	bl	8000b88 <__aeabi_d2iz>
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	4607      	mov	r7, r0
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	4629      	mov	r1, r5
 800fa00:	f7f1 f884 	bl	8000b0c <__aeabi_dcmplt>
 800fa04:	b140      	cbz	r0, 800fa18 <_dtoa_r+0x168>
 800fa06:	4638      	mov	r0, r7
 800fa08:	f7f0 fda4 	bl	8000554 <__aeabi_i2d>
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	462b      	mov	r3, r5
 800fa10:	f7f1 f872 	bl	8000af8 <__aeabi_dcmpeq>
 800fa14:	b900      	cbnz	r0, 800fa18 <_dtoa_r+0x168>
 800fa16:	3f01      	subs	r7, #1
 800fa18:	2f16      	cmp	r7, #22
 800fa1a:	d852      	bhi.n	800fac2 <_dtoa_r+0x212>
 800fa1c:	4b5d      	ldr	r3, [pc, #372]	@ (800fb94 <_dtoa_r+0x2e4>)
 800fa1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa2a:	f7f1 f86f 	bl	8000b0c <__aeabi_dcmplt>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d049      	beq.n	800fac6 <_dtoa_r+0x216>
 800fa32:	3f01      	subs	r7, #1
 800fa34:	2300      	movs	r3, #0
 800fa36:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fa3a:	1b9b      	subs	r3, r3, r6
 800fa3c:	1e5a      	subs	r2, r3, #1
 800fa3e:	bf45      	ittet	mi
 800fa40:	f1c3 0301 	rsbmi	r3, r3, #1
 800fa44:	9300      	strmi	r3, [sp, #0]
 800fa46:	2300      	movpl	r3, #0
 800fa48:	2300      	movmi	r3, #0
 800fa4a:	9206      	str	r2, [sp, #24]
 800fa4c:	bf54      	ite	pl
 800fa4e:	9300      	strpl	r3, [sp, #0]
 800fa50:	9306      	strmi	r3, [sp, #24]
 800fa52:	2f00      	cmp	r7, #0
 800fa54:	db39      	blt.n	800faca <_dtoa_r+0x21a>
 800fa56:	9b06      	ldr	r3, [sp, #24]
 800fa58:	970d      	str	r7, [sp, #52]	@ 0x34
 800fa5a:	443b      	add	r3, r7
 800fa5c:	9306      	str	r3, [sp, #24]
 800fa5e:	2300      	movs	r3, #0
 800fa60:	9308      	str	r3, [sp, #32]
 800fa62:	9b07      	ldr	r3, [sp, #28]
 800fa64:	2b09      	cmp	r3, #9
 800fa66:	d863      	bhi.n	800fb30 <_dtoa_r+0x280>
 800fa68:	2b05      	cmp	r3, #5
 800fa6a:	bfc4      	itt	gt
 800fa6c:	3b04      	subgt	r3, #4
 800fa6e:	9307      	strgt	r3, [sp, #28]
 800fa70:	9b07      	ldr	r3, [sp, #28]
 800fa72:	f1a3 0302 	sub.w	r3, r3, #2
 800fa76:	bfcc      	ite	gt
 800fa78:	2400      	movgt	r4, #0
 800fa7a:	2401      	movle	r4, #1
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	d863      	bhi.n	800fb48 <_dtoa_r+0x298>
 800fa80:	e8df f003 	tbb	[pc, r3]
 800fa84:	2b375452 	.word	0x2b375452
 800fa88:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fa8c:	441e      	add	r6, r3
 800fa8e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fa92:	2b20      	cmp	r3, #32
 800fa94:	bfc1      	itttt	gt
 800fa96:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fa9a:	409f      	lslgt	r7, r3
 800fa9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800faa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800faa4:	bfd6      	itet	le
 800faa6:	f1c3 0320 	rsble	r3, r3, #32
 800faaa:	ea47 0003 	orrgt.w	r0, r7, r3
 800faae:	fa04 f003 	lslle.w	r0, r4, r3
 800fab2:	f7f0 fd3f 	bl	8000534 <__aeabi_ui2d>
 800fab6:	2201      	movs	r2, #1
 800fab8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fabc:	3e01      	subs	r6, #1
 800fabe:	9212      	str	r2, [sp, #72]	@ 0x48
 800fac0:	e776      	b.n	800f9b0 <_dtoa_r+0x100>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e7b7      	b.n	800fa36 <_dtoa_r+0x186>
 800fac6:	9010      	str	r0, [sp, #64]	@ 0x40
 800fac8:	e7b6      	b.n	800fa38 <_dtoa_r+0x188>
 800faca:	9b00      	ldr	r3, [sp, #0]
 800facc:	1bdb      	subs	r3, r3, r7
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	427b      	negs	r3, r7
 800fad2:	9308      	str	r3, [sp, #32]
 800fad4:	2300      	movs	r3, #0
 800fad6:	930d      	str	r3, [sp, #52]	@ 0x34
 800fad8:	e7c3      	b.n	800fa62 <_dtoa_r+0x1b2>
 800fada:	2301      	movs	r3, #1
 800fadc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fae0:	eb07 0b03 	add.w	fp, r7, r3
 800fae4:	f10b 0301 	add.w	r3, fp, #1
 800fae8:	2b01      	cmp	r3, #1
 800faea:	9303      	str	r3, [sp, #12]
 800faec:	bfb8      	it	lt
 800faee:	2301      	movlt	r3, #1
 800faf0:	e006      	b.n	800fb00 <_dtoa_r+0x250>
 800faf2:	2301      	movs	r3, #1
 800faf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800faf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	dd28      	ble.n	800fb4e <_dtoa_r+0x29e>
 800fafc:	469b      	mov	fp, r3
 800fafe:	9303      	str	r3, [sp, #12]
 800fb00:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fb04:	2100      	movs	r1, #0
 800fb06:	2204      	movs	r2, #4
 800fb08:	f102 0514 	add.w	r5, r2, #20
 800fb0c:	429d      	cmp	r5, r3
 800fb0e:	d926      	bls.n	800fb5e <_dtoa_r+0x2ae>
 800fb10:	6041      	str	r1, [r0, #4]
 800fb12:	4648      	mov	r0, r9
 800fb14:	f001 f934 	bl	8010d80 <_Balloc>
 800fb18:	4682      	mov	sl, r0
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d142      	bne.n	800fba4 <_dtoa_r+0x2f4>
 800fb1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fb98 <_dtoa_r+0x2e8>)
 800fb20:	4602      	mov	r2, r0
 800fb22:	f240 11af 	movw	r1, #431	@ 0x1af
 800fb26:	e6da      	b.n	800f8de <_dtoa_r+0x2e>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	e7e3      	b.n	800faf4 <_dtoa_r+0x244>
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	e7d5      	b.n	800fadc <_dtoa_r+0x22c>
 800fb30:	2401      	movs	r4, #1
 800fb32:	2300      	movs	r3, #0
 800fb34:	9307      	str	r3, [sp, #28]
 800fb36:	9409      	str	r4, [sp, #36]	@ 0x24
 800fb38:	f04f 3bff 	mov.w	fp, #4294967295
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f8cd b00c 	str.w	fp, [sp, #12]
 800fb42:	2312      	movs	r3, #18
 800fb44:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb46:	e7db      	b.n	800fb00 <_dtoa_r+0x250>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb4c:	e7f4      	b.n	800fb38 <_dtoa_r+0x288>
 800fb4e:	f04f 0b01 	mov.w	fp, #1
 800fb52:	f8cd b00c 	str.w	fp, [sp, #12]
 800fb56:	465b      	mov	r3, fp
 800fb58:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fb5c:	e7d0      	b.n	800fb00 <_dtoa_r+0x250>
 800fb5e:	3101      	adds	r1, #1
 800fb60:	0052      	lsls	r2, r2, #1
 800fb62:	e7d1      	b.n	800fb08 <_dtoa_r+0x258>
 800fb64:	f3af 8000 	nop.w
 800fb68:	636f4361 	.word	0x636f4361
 800fb6c:	3fd287a7 	.word	0x3fd287a7
 800fb70:	8b60c8b3 	.word	0x8b60c8b3
 800fb74:	3fc68a28 	.word	0x3fc68a28
 800fb78:	509f79fb 	.word	0x509f79fb
 800fb7c:	3fd34413 	.word	0x3fd34413
 800fb80:	080135c0 	.word	0x080135c0
 800fb84:	08013729 	.word	0x08013729
 800fb88:	7ff00000 	.word	0x7ff00000
 800fb8c:	08013873 	.word	0x08013873
 800fb90:	3ff80000 	.word	0x3ff80000
 800fb94:	08013b38 	.word	0x08013b38
 800fb98:	08013781 	.word	0x08013781
 800fb9c:	08013725 	.word	0x08013725
 800fba0:	08013872 	.word	0x08013872
 800fba4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fba8:	6018      	str	r0, [r3, #0]
 800fbaa:	9b03      	ldr	r3, [sp, #12]
 800fbac:	2b0e      	cmp	r3, #14
 800fbae:	f200 80a1 	bhi.w	800fcf4 <_dtoa_r+0x444>
 800fbb2:	2c00      	cmp	r4, #0
 800fbb4:	f000 809e 	beq.w	800fcf4 <_dtoa_r+0x444>
 800fbb8:	2f00      	cmp	r7, #0
 800fbba:	dd33      	ble.n	800fc24 <_dtoa_r+0x374>
 800fbbc:	4b9c      	ldr	r3, [pc, #624]	@ (800fe30 <_dtoa_r+0x580>)
 800fbbe:	f007 020f 	and.w	r2, r7, #15
 800fbc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbc6:	ed93 7b00 	vldr	d7, [r3]
 800fbca:	05f8      	lsls	r0, r7, #23
 800fbcc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fbd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fbd4:	d516      	bpl.n	800fc04 <_dtoa_r+0x354>
 800fbd6:	4b97      	ldr	r3, [pc, #604]	@ (800fe34 <_dtoa_r+0x584>)
 800fbd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fbdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fbe0:	f7f0 fe4c 	bl	800087c <__aeabi_ddiv>
 800fbe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fbe8:	f004 040f 	and.w	r4, r4, #15
 800fbec:	2603      	movs	r6, #3
 800fbee:	4d91      	ldr	r5, [pc, #580]	@ (800fe34 <_dtoa_r+0x584>)
 800fbf0:	b954      	cbnz	r4, 800fc08 <_dtoa_r+0x358>
 800fbf2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fbf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbfa:	f7f0 fe3f 	bl	800087c <__aeabi_ddiv>
 800fbfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc02:	e028      	b.n	800fc56 <_dtoa_r+0x3a6>
 800fc04:	2602      	movs	r6, #2
 800fc06:	e7f2      	b.n	800fbee <_dtoa_r+0x33e>
 800fc08:	07e1      	lsls	r1, r4, #31
 800fc0a:	d508      	bpl.n	800fc1e <_dtoa_r+0x36e>
 800fc0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fc10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fc14:	f7f0 fd08 	bl	8000628 <__aeabi_dmul>
 800fc18:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fc1c:	3601      	adds	r6, #1
 800fc1e:	1064      	asrs	r4, r4, #1
 800fc20:	3508      	adds	r5, #8
 800fc22:	e7e5      	b.n	800fbf0 <_dtoa_r+0x340>
 800fc24:	f000 80af 	beq.w	800fd86 <_dtoa_r+0x4d6>
 800fc28:	427c      	negs	r4, r7
 800fc2a:	4b81      	ldr	r3, [pc, #516]	@ (800fe30 <_dtoa_r+0x580>)
 800fc2c:	4d81      	ldr	r5, [pc, #516]	@ (800fe34 <_dtoa_r+0x584>)
 800fc2e:	f004 020f 	and.w	r2, r4, #15
 800fc32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fc3e:	f7f0 fcf3 	bl	8000628 <__aeabi_dmul>
 800fc42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc46:	1124      	asrs	r4, r4, #4
 800fc48:	2300      	movs	r3, #0
 800fc4a:	2602      	movs	r6, #2
 800fc4c:	2c00      	cmp	r4, #0
 800fc4e:	f040 808f 	bne.w	800fd70 <_dtoa_r+0x4c0>
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1d3      	bne.n	800fbfe <_dtoa_r+0x34e>
 800fc56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc58:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 8094 	beq.w	800fd8a <_dtoa_r+0x4da>
 800fc62:	4b75      	ldr	r3, [pc, #468]	@ (800fe38 <_dtoa_r+0x588>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	4620      	mov	r0, r4
 800fc68:	4629      	mov	r1, r5
 800fc6a:	f7f0 ff4f 	bl	8000b0c <__aeabi_dcmplt>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f000 808b 	beq.w	800fd8a <_dtoa_r+0x4da>
 800fc74:	9b03      	ldr	r3, [sp, #12]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 8087 	beq.w	800fd8a <_dtoa_r+0x4da>
 800fc7c:	f1bb 0f00 	cmp.w	fp, #0
 800fc80:	dd34      	ble.n	800fcec <_dtoa_r+0x43c>
 800fc82:	4620      	mov	r0, r4
 800fc84:	4b6d      	ldr	r3, [pc, #436]	@ (800fe3c <_dtoa_r+0x58c>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	4629      	mov	r1, r5
 800fc8a:	f7f0 fccd 	bl	8000628 <__aeabi_dmul>
 800fc8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc92:	f107 38ff 	add.w	r8, r7, #4294967295
 800fc96:	3601      	adds	r6, #1
 800fc98:	465c      	mov	r4, fp
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	f7f0 fc5a 	bl	8000554 <__aeabi_i2d>
 800fca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fca4:	f7f0 fcc0 	bl	8000628 <__aeabi_dmul>
 800fca8:	4b65      	ldr	r3, [pc, #404]	@ (800fe40 <_dtoa_r+0x590>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f7f0 fb06 	bl	80002bc <__adddf3>
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fcb6:	2c00      	cmp	r4, #0
 800fcb8:	d16a      	bne.n	800fd90 <_dtoa_r+0x4e0>
 800fcba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcbe:	4b61      	ldr	r3, [pc, #388]	@ (800fe44 <_dtoa_r+0x594>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f7f0 faf9 	bl	80002b8 <__aeabi_dsub>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fcce:	462a      	mov	r2, r5
 800fcd0:	4633      	mov	r3, r6
 800fcd2:	f7f0 ff39 	bl	8000b48 <__aeabi_dcmpgt>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f040 8298 	bne.w	801020c <_dtoa_r+0x95c>
 800fcdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fce0:	462a      	mov	r2, r5
 800fce2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fce6:	f7f0 ff11 	bl	8000b0c <__aeabi_dcmplt>
 800fcea:	bb38      	cbnz	r0, 800fd3c <_dtoa_r+0x48c>
 800fcec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fcf0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fcf4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f2c0 8157 	blt.w	800ffaa <_dtoa_r+0x6fa>
 800fcfc:	2f0e      	cmp	r7, #14
 800fcfe:	f300 8154 	bgt.w	800ffaa <_dtoa_r+0x6fa>
 800fd02:	4b4b      	ldr	r3, [pc, #300]	@ (800fe30 <_dtoa_r+0x580>)
 800fd04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fd08:	ed93 7b00 	vldr	d7, [r3]
 800fd0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	ed8d 7b00 	vstr	d7, [sp]
 800fd14:	f280 80e5 	bge.w	800fee2 <_dtoa_r+0x632>
 800fd18:	9b03      	ldr	r3, [sp, #12]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f300 80e1 	bgt.w	800fee2 <_dtoa_r+0x632>
 800fd20:	d10c      	bne.n	800fd3c <_dtoa_r+0x48c>
 800fd22:	4b48      	ldr	r3, [pc, #288]	@ (800fe44 <_dtoa_r+0x594>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	ec51 0b17 	vmov	r0, r1, d7
 800fd2a:	f7f0 fc7d 	bl	8000628 <__aeabi_dmul>
 800fd2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd32:	f7f0 feff 	bl	8000b34 <__aeabi_dcmpge>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	f000 8266 	beq.w	8010208 <_dtoa_r+0x958>
 800fd3c:	2400      	movs	r4, #0
 800fd3e:	4625      	mov	r5, r4
 800fd40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd42:	4656      	mov	r6, sl
 800fd44:	ea6f 0803 	mvn.w	r8, r3
 800fd48:	2700      	movs	r7, #0
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	4648      	mov	r0, r9
 800fd4e:	f001 f857 	bl	8010e00 <_Bfree>
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	f000 80bd 	beq.w	800fed2 <_dtoa_r+0x622>
 800fd58:	b12f      	cbz	r7, 800fd66 <_dtoa_r+0x4b6>
 800fd5a:	42af      	cmp	r7, r5
 800fd5c:	d003      	beq.n	800fd66 <_dtoa_r+0x4b6>
 800fd5e:	4639      	mov	r1, r7
 800fd60:	4648      	mov	r0, r9
 800fd62:	f001 f84d 	bl	8010e00 <_Bfree>
 800fd66:	4629      	mov	r1, r5
 800fd68:	4648      	mov	r0, r9
 800fd6a:	f001 f849 	bl	8010e00 <_Bfree>
 800fd6e:	e0b0      	b.n	800fed2 <_dtoa_r+0x622>
 800fd70:	07e2      	lsls	r2, r4, #31
 800fd72:	d505      	bpl.n	800fd80 <_dtoa_r+0x4d0>
 800fd74:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd78:	f7f0 fc56 	bl	8000628 <__aeabi_dmul>
 800fd7c:	3601      	adds	r6, #1
 800fd7e:	2301      	movs	r3, #1
 800fd80:	1064      	asrs	r4, r4, #1
 800fd82:	3508      	adds	r5, #8
 800fd84:	e762      	b.n	800fc4c <_dtoa_r+0x39c>
 800fd86:	2602      	movs	r6, #2
 800fd88:	e765      	b.n	800fc56 <_dtoa_r+0x3a6>
 800fd8a:	9c03      	ldr	r4, [sp, #12]
 800fd8c:	46b8      	mov	r8, r7
 800fd8e:	e784      	b.n	800fc9a <_dtoa_r+0x3ea>
 800fd90:	4b27      	ldr	r3, [pc, #156]	@ (800fe30 <_dtoa_r+0x580>)
 800fd92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd9c:	4454      	add	r4, sl
 800fd9e:	2900      	cmp	r1, #0
 800fda0:	d054      	beq.n	800fe4c <_dtoa_r+0x59c>
 800fda2:	4929      	ldr	r1, [pc, #164]	@ (800fe48 <_dtoa_r+0x598>)
 800fda4:	2000      	movs	r0, #0
 800fda6:	f7f0 fd69 	bl	800087c <__aeabi_ddiv>
 800fdaa:	4633      	mov	r3, r6
 800fdac:	462a      	mov	r2, r5
 800fdae:	f7f0 fa83 	bl	80002b8 <__aeabi_dsub>
 800fdb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fdb6:	4656      	mov	r6, sl
 800fdb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdbc:	f7f0 fee4 	bl	8000b88 <__aeabi_d2iz>
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	f7f0 fbc7 	bl	8000554 <__aeabi_i2d>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdce:	f7f0 fa73 	bl	80002b8 <__aeabi_dsub>
 800fdd2:	3530      	adds	r5, #48	@ 0x30
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fddc:	f806 5b01 	strb.w	r5, [r6], #1
 800fde0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fde4:	f7f0 fe92 	bl	8000b0c <__aeabi_dcmplt>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d172      	bne.n	800fed2 <_dtoa_r+0x622>
 800fdec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdf0:	4911      	ldr	r1, [pc, #68]	@ (800fe38 <_dtoa_r+0x588>)
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f7f0 fa60 	bl	80002b8 <__aeabi_dsub>
 800fdf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fdfc:	f7f0 fe86 	bl	8000b0c <__aeabi_dcmplt>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	f040 80b4 	bne.w	800ff6e <_dtoa_r+0x6be>
 800fe06:	42a6      	cmp	r6, r4
 800fe08:	f43f af70 	beq.w	800fcec <_dtoa_r+0x43c>
 800fe0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fe10:	4b0a      	ldr	r3, [pc, #40]	@ (800fe3c <_dtoa_r+0x58c>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	f7f0 fc08 	bl	8000628 <__aeabi_dmul>
 800fe18:	4b08      	ldr	r3, [pc, #32]	@ (800fe3c <_dtoa_r+0x58c>)
 800fe1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe1e:	2200      	movs	r2, #0
 800fe20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe24:	f7f0 fc00 	bl	8000628 <__aeabi_dmul>
 800fe28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe2c:	e7c4      	b.n	800fdb8 <_dtoa_r+0x508>
 800fe2e:	bf00      	nop
 800fe30:	08013b38 	.word	0x08013b38
 800fe34:	08013b10 	.word	0x08013b10
 800fe38:	3ff00000 	.word	0x3ff00000
 800fe3c:	40240000 	.word	0x40240000
 800fe40:	401c0000 	.word	0x401c0000
 800fe44:	40140000 	.word	0x40140000
 800fe48:	3fe00000 	.word	0x3fe00000
 800fe4c:	4631      	mov	r1, r6
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f7f0 fbea 	bl	8000628 <__aeabi_dmul>
 800fe54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe58:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fe5a:	4656      	mov	r6, sl
 800fe5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe60:	f7f0 fe92 	bl	8000b88 <__aeabi_d2iz>
 800fe64:	4605      	mov	r5, r0
 800fe66:	f7f0 fb75 	bl	8000554 <__aeabi_i2d>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe72:	f7f0 fa21 	bl	80002b8 <__aeabi_dsub>
 800fe76:	3530      	adds	r5, #48	@ 0x30
 800fe78:	f806 5b01 	strb.w	r5, [r6], #1
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	460b      	mov	r3, r1
 800fe80:	42a6      	cmp	r6, r4
 800fe82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe86:	f04f 0200 	mov.w	r2, #0
 800fe8a:	d124      	bne.n	800fed6 <_dtoa_r+0x626>
 800fe8c:	4baf      	ldr	r3, [pc, #700]	@ (801014c <_dtoa_r+0x89c>)
 800fe8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fe92:	f7f0 fa13 	bl	80002bc <__adddf3>
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe9e:	f7f0 fe53 	bl	8000b48 <__aeabi_dcmpgt>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d163      	bne.n	800ff6e <_dtoa_r+0x6be>
 800fea6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800feaa:	49a8      	ldr	r1, [pc, #672]	@ (801014c <_dtoa_r+0x89c>)
 800feac:	2000      	movs	r0, #0
 800feae:	f7f0 fa03 	bl	80002b8 <__aeabi_dsub>
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800feba:	f7f0 fe27 	bl	8000b0c <__aeabi_dcmplt>
 800febe:	2800      	cmp	r0, #0
 800fec0:	f43f af14 	beq.w	800fcec <_dtoa_r+0x43c>
 800fec4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fec6:	1e73      	subs	r3, r6, #1
 800fec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800feca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fece:	2b30      	cmp	r3, #48	@ 0x30
 800fed0:	d0f8      	beq.n	800fec4 <_dtoa_r+0x614>
 800fed2:	4647      	mov	r7, r8
 800fed4:	e03b      	b.n	800ff4e <_dtoa_r+0x69e>
 800fed6:	4b9e      	ldr	r3, [pc, #632]	@ (8010150 <_dtoa_r+0x8a0>)
 800fed8:	f7f0 fba6 	bl	8000628 <__aeabi_dmul>
 800fedc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fee0:	e7bc      	b.n	800fe5c <_dtoa_r+0x5ac>
 800fee2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fee6:	4656      	mov	r6, sl
 800fee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feec:	4620      	mov	r0, r4
 800feee:	4629      	mov	r1, r5
 800fef0:	f7f0 fcc4 	bl	800087c <__aeabi_ddiv>
 800fef4:	f7f0 fe48 	bl	8000b88 <__aeabi_d2iz>
 800fef8:	4680      	mov	r8, r0
 800fefa:	f7f0 fb2b 	bl	8000554 <__aeabi_i2d>
 800fefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff02:	f7f0 fb91 	bl	8000628 <__aeabi_dmul>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ff12:	f7f0 f9d1 	bl	80002b8 <__aeabi_dsub>
 800ff16:	f806 4b01 	strb.w	r4, [r6], #1
 800ff1a:	9d03      	ldr	r5, [sp, #12]
 800ff1c:	eba6 040a 	sub.w	r4, r6, sl
 800ff20:	42a5      	cmp	r5, r4
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	d133      	bne.n	800ff90 <_dtoa_r+0x6e0>
 800ff28:	f7f0 f9c8 	bl	80002bc <__adddf3>
 800ff2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff30:	4604      	mov	r4, r0
 800ff32:	460d      	mov	r5, r1
 800ff34:	f7f0 fe08 	bl	8000b48 <__aeabi_dcmpgt>
 800ff38:	b9c0      	cbnz	r0, 800ff6c <_dtoa_r+0x6bc>
 800ff3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff3e:	4620      	mov	r0, r4
 800ff40:	4629      	mov	r1, r5
 800ff42:	f7f0 fdd9 	bl	8000af8 <__aeabi_dcmpeq>
 800ff46:	b110      	cbz	r0, 800ff4e <_dtoa_r+0x69e>
 800ff48:	f018 0f01 	tst.w	r8, #1
 800ff4c:	d10e      	bne.n	800ff6c <_dtoa_r+0x6bc>
 800ff4e:	9902      	ldr	r1, [sp, #8]
 800ff50:	4648      	mov	r0, r9
 800ff52:	f000 ff55 	bl	8010e00 <_Bfree>
 800ff56:	2300      	movs	r3, #0
 800ff58:	7033      	strb	r3, [r6, #0]
 800ff5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ff5c:	3701      	adds	r7, #1
 800ff5e:	601f      	str	r7, [r3, #0]
 800ff60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f000 824b 	beq.w	80103fe <_dtoa_r+0xb4e>
 800ff68:	601e      	str	r6, [r3, #0]
 800ff6a:	e248      	b.n	80103fe <_dtoa_r+0xb4e>
 800ff6c:	46b8      	mov	r8, r7
 800ff6e:	4633      	mov	r3, r6
 800ff70:	461e      	mov	r6, r3
 800ff72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff76:	2a39      	cmp	r2, #57	@ 0x39
 800ff78:	d106      	bne.n	800ff88 <_dtoa_r+0x6d8>
 800ff7a:	459a      	cmp	sl, r3
 800ff7c:	d1f8      	bne.n	800ff70 <_dtoa_r+0x6c0>
 800ff7e:	2230      	movs	r2, #48	@ 0x30
 800ff80:	f108 0801 	add.w	r8, r8, #1
 800ff84:	f88a 2000 	strb.w	r2, [sl]
 800ff88:	781a      	ldrb	r2, [r3, #0]
 800ff8a:	3201      	adds	r2, #1
 800ff8c:	701a      	strb	r2, [r3, #0]
 800ff8e:	e7a0      	b.n	800fed2 <_dtoa_r+0x622>
 800ff90:	4b6f      	ldr	r3, [pc, #444]	@ (8010150 <_dtoa_r+0x8a0>)
 800ff92:	2200      	movs	r2, #0
 800ff94:	f7f0 fb48 	bl	8000628 <__aeabi_dmul>
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	4604      	mov	r4, r0
 800ff9e:	460d      	mov	r5, r1
 800ffa0:	f7f0 fdaa 	bl	8000af8 <__aeabi_dcmpeq>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d09f      	beq.n	800fee8 <_dtoa_r+0x638>
 800ffa8:	e7d1      	b.n	800ff4e <_dtoa_r+0x69e>
 800ffaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffac:	2a00      	cmp	r2, #0
 800ffae:	f000 80ea 	beq.w	8010186 <_dtoa_r+0x8d6>
 800ffb2:	9a07      	ldr	r2, [sp, #28]
 800ffb4:	2a01      	cmp	r2, #1
 800ffb6:	f300 80cd 	bgt.w	8010154 <_dtoa_r+0x8a4>
 800ffba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ffbc:	2a00      	cmp	r2, #0
 800ffbe:	f000 80c1 	beq.w	8010144 <_dtoa_r+0x894>
 800ffc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ffc6:	9c08      	ldr	r4, [sp, #32]
 800ffc8:	9e00      	ldr	r6, [sp, #0]
 800ffca:	9a00      	ldr	r2, [sp, #0]
 800ffcc:	441a      	add	r2, r3
 800ffce:	9200      	str	r2, [sp, #0]
 800ffd0:	9a06      	ldr	r2, [sp, #24]
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	441a      	add	r2, r3
 800ffd6:	4648      	mov	r0, r9
 800ffd8:	9206      	str	r2, [sp, #24]
 800ffda:	f001 f80f 	bl	8010ffc <__i2b>
 800ffde:	4605      	mov	r5, r0
 800ffe0:	b166      	cbz	r6, 800fffc <_dtoa_r+0x74c>
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	dd09      	ble.n	800fffc <_dtoa_r+0x74c>
 800ffe8:	42b3      	cmp	r3, r6
 800ffea:	9a00      	ldr	r2, [sp, #0]
 800ffec:	bfa8      	it	ge
 800ffee:	4633      	movge	r3, r6
 800fff0:	1ad2      	subs	r2, r2, r3
 800fff2:	9200      	str	r2, [sp, #0]
 800fff4:	9a06      	ldr	r2, [sp, #24]
 800fff6:	1af6      	subs	r6, r6, r3
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	9306      	str	r3, [sp, #24]
 800fffc:	9b08      	ldr	r3, [sp, #32]
 800fffe:	b30b      	cbz	r3, 8010044 <_dtoa_r+0x794>
 8010000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010002:	2b00      	cmp	r3, #0
 8010004:	f000 80c6 	beq.w	8010194 <_dtoa_r+0x8e4>
 8010008:	2c00      	cmp	r4, #0
 801000a:	f000 80c0 	beq.w	801018e <_dtoa_r+0x8de>
 801000e:	4629      	mov	r1, r5
 8010010:	4622      	mov	r2, r4
 8010012:	4648      	mov	r0, r9
 8010014:	f001 f8aa 	bl	801116c <__pow5mult>
 8010018:	9a02      	ldr	r2, [sp, #8]
 801001a:	4601      	mov	r1, r0
 801001c:	4605      	mov	r5, r0
 801001e:	4648      	mov	r0, r9
 8010020:	f001 f802 	bl	8011028 <__multiply>
 8010024:	9902      	ldr	r1, [sp, #8]
 8010026:	4680      	mov	r8, r0
 8010028:	4648      	mov	r0, r9
 801002a:	f000 fee9 	bl	8010e00 <_Bfree>
 801002e:	9b08      	ldr	r3, [sp, #32]
 8010030:	1b1b      	subs	r3, r3, r4
 8010032:	9308      	str	r3, [sp, #32]
 8010034:	f000 80b1 	beq.w	801019a <_dtoa_r+0x8ea>
 8010038:	9a08      	ldr	r2, [sp, #32]
 801003a:	4641      	mov	r1, r8
 801003c:	4648      	mov	r0, r9
 801003e:	f001 f895 	bl	801116c <__pow5mult>
 8010042:	9002      	str	r0, [sp, #8]
 8010044:	2101      	movs	r1, #1
 8010046:	4648      	mov	r0, r9
 8010048:	f000 ffd8 	bl	8010ffc <__i2b>
 801004c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801004e:	4604      	mov	r4, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 81d8 	beq.w	8010406 <_dtoa_r+0xb56>
 8010056:	461a      	mov	r2, r3
 8010058:	4601      	mov	r1, r0
 801005a:	4648      	mov	r0, r9
 801005c:	f001 f886 	bl	801116c <__pow5mult>
 8010060:	9b07      	ldr	r3, [sp, #28]
 8010062:	2b01      	cmp	r3, #1
 8010064:	4604      	mov	r4, r0
 8010066:	f300 809f 	bgt.w	80101a8 <_dtoa_r+0x8f8>
 801006a:	9b04      	ldr	r3, [sp, #16]
 801006c:	2b00      	cmp	r3, #0
 801006e:	f040 8097 	bne.w	80101a0 <_dtoa_r+0x8f0>
 8010072:	9b05      	ldr	r3, [sp, #20]
 8010074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010078:	2b00      	cmp	r3, #0
 801007a:	f040 8093 	bne.w	80101a4 <_dtoa_r+0x8f4>
 801007e:	9b05      	ldr	r3, [sp, #20]
 8010080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010084:	0d1b      	lsrs	r3, r3, #20
 8010086:	051b      	lsls	r3, r3, #20
 8010088:	b133      	cbz	r3, 8010098 <_dtoa_r+0x7e8>
 801008a:	9b00      	ldr	r3, [sp, #0]
 801008c:	3301      	adds	r3, #1
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	9b06      	ldr	r3, [sp, #24]
 8010092:	3301      	adds	r3, #1
 8010094:	9306      	str	r3, [sp, #24]
 8010096:	2301      	movs	r3, #1
 8010098:	9308      	str	r3, [sp, #32]
 801009a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801009c:	2b00      	cmp	r3, #0
 801009e:	f000 81b8 	beq.w	8010412 <_dtoa_r+0xb62>
 80100a2:	6923      	ldr	r3, [r4, #16]
 80100a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80100a8:	6918      	ldr	r0, [r3, #16]
 80100aa:	f000 ff5b 	bl	8010f64 <__hi0bits>
 80100ae:	f1c0 0020 	rsb	r0, r0, #32
 80100b2:	9b06      	ldr	r3, [sp, #24]
 80100b4:	4418      	add	r0, r3
 80100b6:	f010 001f 	ands.w	r0, r0, #31
 80100ba:	f000 8082 	beq.w	80101c2 <_dtoa_r+0x912>
 80100be:	f1c0 0320 	rsb	r3, r0, #32
 80100c2:	2b04      	cmp	r3, #4
 80100c4:	dd73      	ble.n	80101ae <_dtoa_r+0x8fe>
 80100c6:	9b00      	ldr	r3, [sp, #0]
 80100c8:	f1c0 001c 	rsb	r0, r0, #28
 80100cc:	4403      	add	r3, r0
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	9b06      	ldr	r3, [sp, #24]
 80100d2:	4403      	add	r3, r0
 80100d4:	4406      	add	r6, r0
 80100d6:	9306      	str	r3, [sp, #24]
 80100d8:	9b00      	ldr	r3, [sp, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	dd05      	ble.n	80100ea <_dtoa_r+0x83a>
 80100de:	9902      	ldr	r1, [sp, #8]
 80100e0:	461a      	mov	r2, r3
 80100e2:	4648      	mov	r0, r9
 80100e4:	f001 f89c 	bl	8011220 <__lshift>
 80100e8:	9002      	str	r0, [sp, #8]
 80100ea:	9b06      	ldr	r3, [sp, #24]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	dd05      	ble.n	80100fc <_dtoa_r+0x84c>
 80100f0:	4621      	mov	r1, r4
 80100f2:	461a      	mov	r2, r3
 80100f4:	4648      	mov	r0, r9
 80100f6:	f001 f893 	bl	8011220 <__lshift>
 80100fa:	4604      	mov	r4, r0
 80100fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d061      	beq.n	80101c6 <_dtoa_r+0x916>
 8010102:	9802      	ldr	r0, [sp, #8]
 8010104:	4621      	mov	r1, r4
 8010106:	f001 f8f7 	bl	80112f8 <__mcmp>
 801010a:	2800      	cmp	r0, #0
 801010c:	da5b      	bge.n	80101c6 <_dtoa_r+0x916>
 801010e:	2300      	movs	r3, #0
 8010110:	9902      	ldr	r1, [sp, #8]
 8010112:	220a      	movs	r2, #10
 8010114:	4648      	mov	r0, r9
 8010116:	f000 fe95 	bl	8010e44 <__multadd>
 801011a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801011c:	9002      	str	r0, [sp, #8]
 801011e:	f107 38ff 	add.w	r8, r7, #4294967295
 8010122:	2b00      	cmp	r3, #0
 8010124:	f000 8177 	beq.w	8010416 <_dtoa_r+0xb66>
 8010128:	4629      	mov	r1, r5
 801012a:	2300      	movs	r3, #0
 801012c:	220a      	movs	r2, #10
 801012e:	4648      	mov	r0, r9
 8010130:	f000 fe88 	bl	8010e44 <__multadd>
 8010134:	f1bb 0f00 	cmp.w	fp, #0
 8010138:	4605      	mov	r5, r0
 801013a:	dc6f      	bgt.n	801021c <_dtoa_r+0x96c>
 801013c:	9b07      	ldr	r3, [sp, #28]
 801013e:	2b02      	cmp	r3, #2
 8010140:	dc49      	bgt.n	80101d6 <_dtoa_r+0x926>
 8010142:	e06b      	b.n	801021c <_dtoa_r+0x96c>
 8010144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801014a:	e73c      	b.n	800ffc6 <_dtoa_r+0x716>
 801014c:	3fe00000 	.word	0x3fe00000
 8010150:	40240000 	.word	0x40240000
 8010154:	9b03      	ldr	r3, [sp, #12]
 8010156:	1e5c      	subs	r4, r3, #1
 8010158:	9b08      	ldr	r3, [sp, #32]
 801015a:	42a3      	cmp	r3, r4
 801015c:	db09      	blt.n	8010172 <_dtoa_r+0x8c2>
 801015e:	1b1c      	subs	r4, r3, r4
 8010160:	9b03      	ldr	r3, [sp, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	f6bf af30 	bge.w	800ffc8 <_dtoa_r+0x718>
 8010168:	9b00      	ldr	r3, [sp, #0]
 801016a:	9a03      	ldr	r2, [sp, #12]
 801016c:	1a9e      	subs	r6, r3, r2
 801016e:	2300      	movs	r3, #0
 8010170:	e72b      	b.n	800ffca <_dtoa_r+0x71a>
 8010172:	9b08      	ldr	r3, [sp, #32]
 8010174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010176:	9408      	str	r4, [sp, #32]
 8010178:	1ae3      	subs	r3, r4, r3
 801017a:	441a      	add	r2, r3
 801017c:	9e00      	ldr	r6, [sp, #0]
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	920d      	str	r2, [sp, #52]	@ 0x34
 8010182:	2400      	movs	r4, #0
 8010184:	e721      	b.n	800ffca <_dtoa_r+0x71a>
 8010186:	9c08      	ldr	r4, [sp, #32]
 8010188:	9e00      	ldr	r6, [sp, #0]
 801018a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801018c:	e728      	b.n	800ffe0 <_dtoa_r+0x730>
 801018e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010192:	e751      	b.n	8010038 <_dtoa_r+0x788>
 8010194:	9a08      	ldr	r2, [sp, #32]
 8010196:	9902      	ldr	r1, [sp, #8]
 8010198:	e750      	b.n	801003c <_dtoa_r+0x78c>
 801019a:	f8cd 8008 	str.w	r8, [sp, #8]
 801019e:	e751      	b.n	8010044 <_dtoa_r+0x794>
 80101a0:	2300      	movs	r3, #0
 80101a2:	e779      	b.n	8010098 <_dtoa_r+0x7e8>
 80101a4:	9b04      	ldr	r3, [sp, #16]
 80101a6:	e777      	b.n	8010098 <_dtoa_r+0x7e8>
 80101a8:	2300      	movs	r3, #0
 80101aa:	9308      	str	r3, [sp, #32]
 80101ac:	e779      	b.n	80100a2 <_dtoa_r+0x7f2>
 80101ae:	d093      	beq.n	80100d8 <_dtoa_r+0x828>
 80101b0:	9a00      	ldr	r2, [sp, #0]
 80101b2:	331c      	adds	r3, #28
 80101b4:	441a      	add	r2, r3
 80101b6:	9200      	str	r2, [sp, #0]
 80101b8:	9a06      	ldr	r2, [sp, #24]
 80101ba:	441a      	add	r2, r3
 80101bc:	441e      	add	r6, r3
 80101be:	9206      	str	r2, [sp, #24]
 80101c0:	e78a      	b.n	80100d8 <_dtoa_r+0x828>
 80101c2:	4603      	mov	r3, r0
 80101c4:	e7f4      	b.n	80101b0 <_dtoa_r+0x900>
 80101c6:	9b03      	ldr	r3, [sp, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	46b8      	mov	r8, r7
 80101cc:	dc20      	bgt.n	8010210 <_dtoa_r+0x960>
 80101ce:	469b      	mov	fp, r3
 80101d0:	9b07      	ldr	r3, [sp, #28]
 80101d2:	2b02      	cmp	r3, #2
 80101d4:	dd1e      	ble.n	8010214 <_dtoa_r+0x964>
 80101d6:	f1bb 0f00 	cmp.w	fp, #0
 80101da:	f47f adb1 	bne.w	800fd40 <_dtoa_r+0x490>
 80101de:	4621      	mov	r1, r4
 80101e0:	465b      	mov	r3, fp
 80101e2:	2205      	movs	r2, #5
 80101e4:	4648      	mov	r0, r9
 80101e6:	f000 fe2d 	bl	8010e44 <__multadd>
 80101ea:	4601      	mov	r1, r0
 80101ec:	4604      	mov	r4, r0
 80101ee:	9802      	ldr	r0, [sp, #8]
 80101f0:	f001 f882 	bl	80112f8 <__mcmp>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	f77f ada3 	ble.w	800fd40 <_dtoa_r+0x490>
 80101fa:	4656      	mov	r6, sl
 80101fc:	2331      	movs	r3, #49	@ 0x31
 80101fe:	f806 3b01 	strb.w	r3, [r6], #1
 8010202:	f108 0801 	add.w	r8, r8, #1
 8010206:	e59f      	b.n	800fd48 <_dtoa_r+0x498>
 8010208:	9c03      	ldr	r4, [sp, #12]
 801020a:	46b8      	mov	r8, r7
 801020c:	4625      	mov	r5, r4
 801020e:	e7f4      	b.n	80101fa <_dtoa_r+0x94a>
 8010210:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010216:	2b00      	cmp	r3, #0
 8010218:	f000 8101 	beq.w	801041e <_dtoa_r+0xb6e>
 801021c:	2e00      	cmp	r6, #0
 801021e:	dd05      	ble.n	801022c <_dtoa_r+0x97c>
 8010220:	4629      	mov	r1, r5
 8010222:	4632      	mov	r2, r6
 8010224:	4648      	mov	r0, r9
 8010226:	f000 fffb 	bl	8011220 <__lshift>
 801022a:	4605      	mov	r5, r0
 801022c:	9b08      	ldr	r3, [sp, #32]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d05c      	beq.n	80102ec <_dtoa_r+0xa3c>
 8010232:	6869      	ldr	r1, [r5, #4]
 8010234:	4648      	mov	r0, r9
 8010236:	f000 fda3 	bl	8010d80 <_Balloc>
 801023a:	4606      	mov	r6, r0
 801023c:	b928      	cbnz	r0, 801024a <_dtoa_r+0x99a>
 801023e:	4b82      	ldr	r3, [pc, #520]	@ (8010448 <_dtoa_r+0xb98>)
 8010240:	4602      	mov	r2, r0
 8010242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010246:	f7ff bb4a 	b.w	800f8de <_dtoa_r+0x2e>
 801024a:	692a      	ldr	r2, [r5, #16]
 801024c:	3202      	adds	r2, #2
 801024e:	0092      	lsls	r2, r2, #2
 8010250:	f105 010c 	add.w	r1, r5, #12
 8010254:	300c      	adds	r0, #12
 8010256:	f7ff fa64 	bl	800f722 <memcpy>
 801025a:	2201      	movs	r2, #1
 801025c:	4631      	mov	r1, r6
 801025e:	4648      	mov	r0, r9
 8010260:	f000 ffde 	bl	8011220 <__lshift>
 8010264:	f10a 0301 	add.w	r3, sl, #1
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	eb0a 030b 	add.w	r3, sl, fp
 801026e:	9308      	str	r3, [sp, #32]
 8010270:	9b04      	ldr	r3, [sp, #16]
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	462f      	mov	r7, r5
 8010278:	9306      	str	r3, [sp, #24]
 801027a:	4605      	mov	r5, r0
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	9802      	ldr	r0, [sp, #8]
 8010280:	4621      	mov	r1, r4
 8010282:	f103 3bff 	add.w	fp, r3, #4294967295
 8010286:	f7ff fa89 	bl	800f79c <quorem>
 801028a:	4603      	mov	r3, r0
 801028c:	3330      	adds	r3, #48	@ 0x30
 801028e:	9003      	str	r0, [sp, #12]
 8010290:	4639      	mov	r1, r7
 8010292:	9802      	ldr	r0, [sp, #8]
 8010294:	9309      	str	r3, [sp, #36]	@ 0x24
 8010296:	f001 f82f 	bl	80112f8 <__mcmp>
 801029a:	462a      	mov	r2, r5
 801029c:	9004      	str	r0, [sp, #16]
 801029e:	4621      	mov	r1, r4
 80102a0:	4648      	mov	r0, r9
 80102a2:	f001 f845 	bl	8011330 <__mdiff>
 80102a6:	68c2      	ldr	r2, [r0, #12]
 80102a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102aa:	4606      	mov	r6, r0
 80102ac:	bb02      	cbnz	r2, 80102f0 <_dtoa_r+0xa40>
 80102ae:	4601      	mov	r1, r0
 80102b0:	9802      	ldr	r0, [sp, #8]
 80102b2:	f001 f821 	bl	80112f8 <__mcmp>
 80102b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102b8:	4602      	mov	r2, r0
 80102ba:	4631      	mov	r1, r6
 80102bc:	4648      	mov	r0, r9
 80102be:	920c      	str	r2, [sp, #48]	@ 0x30
 80102c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c2:	f000 fd9d 	bl	8010e00 <_Bfree>
 80102c6:	9b07      	ldr	r3, [sp, #28]
 80102c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80102ca:	9e00      	ldr	r6, [sp, #0]
 80102cc:	ea42 0103 	orr.w	r1, r2, r3
 80102d0:	9b06      	ldr	r3, [sp, #24]
 80102d2:	4319      	orrs	r1, r3
 80102d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102d6:	d10d      	bne.n	80102f4 <_dtoa_r+0xa44>
 80102d8:	2b39      	cmp	r3, #57	@ 0x39
 80102da:	d027      	beq.n	801032c <_dtoa_r+0xa7c>
 80102dc:	9a04      	ldr	r2, [sp, #16]
 80102de:	2a00      	cmp	r2, #0
 80102e0:	dd01      	ble.n	80102e6 <_dtoa_r+0xa36>
 80102e2:	9b03      	ldr	r3, [sp, #12]
 80102e4:	3331      	adds	r3, #49	@ 0x31
 80102e6:	f88b 3000 	strb.w	r3, [fp]
 80102ea:	e52e      	b.n	800fd4a <_dtoa_r+0x49a>
 80102ec:	4628      	mov	r0, r5
 80102ee:	e7b9      	b.n	8010264 <_dtoa_r+0x9b4>
 80102f0:	2201      	movs	r2, #1
 80102f2:	e7e2      	b.n	80102ba <_dtoa_r+0xa0a>
 80102f4:	9904      	ldr	r1, [sp, #16]
 80102f6:	2900      	cmp	r1, #0
 80102f8:	db04      	blt.n	8010304 <_dtoa_r+0xa54>
 80102fa:	9807      	ldr	r0, [sp, #28]
 80102fc:	4301      	orrs	r1, r0
 80102fe:	9806      	ldr	r0, [sp, #24]
 8010300:	4301      	orrs	r1, r0
 8010302:	d120      	bne.n	8010346 <_dtoa_r+0xa96>
 8010304:	2a00      	cmp	r2, #0
 8010306:	ddee      	ble.n	80102e6 <_dtoa_r+0xa36>
 8010308:	9902      	ldr	r1, [sp, #8]
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	2201      	movs	r2, #1
 801030e:	4648      	mov	r0, r9
 8010310:	f000 ff86 	bl	8011220 <__lshift>
 8010314:	4621      	mov	r1, r4
 8010316:	9002      	str	r0, [sp, #8]
 8010318:	f000 ffee 	bl	80112f8 <__mcmp>
 801031c:	2800      	cmp	r0, #0
 801031e:	9b00      	ldr	r3, [sp, #0]
 8010320:	dc02      	bgt.n	8010328 <_dtoa_r+0xa78>
 8010322:	d1e0      	bne.n	80102e6 <_dtoa_r+0xa36>
 8010324:	07da      	lsls	r2, r3, #31
 8010326:	d5de      	bpl.n	80102e6 <_dtoa_r+0xa36>
 8010328:	2b39      	cmp	r3, #57	@ 0x39
 801032a:	d1da      	bne.n	80102e2 <_dtoa_r+0xa32>
 801032c:	2339      	movs	r3, #57	@ 0x39
 801032e:	f88b 3000 	strb.w	r3, [fp]
 8010332:	4633      	mov	r3, r6
 8010334:	461e      	mov	r6, r3
 8010336:	3b01      	subs	r3, #1
 8010338:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801033c:	2a39      	cmp	r2, #57	@ 0x39
 801033e:	d04e      	beq.n	80103de <_dtoa_r+0xb2e>
 8010340:	3201      	adds	r2, #1
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	e501      	b.n	800fd4a <_dtoa_r+0x49a>
 8010346:	2a00      	cmp	r2, #0
 8010348:	dd03      	ble.n	8010352 <_dtoa_r+0xaa2>
 801034a:	2b39      	cmp	r3, #57	@ 0x39
 801034c:	d0ee      	beq.n	801032c <_dtoa_r+0xa7c>
 801034e:	3301      	adds	r3, #1
 8010350:	e7c9      	b.n	80102e6 <_dtoa_r+0xa36>
 8010352:	9a00      	ldr	r2, [sp, #0]
 8010354:	9908      	ldr	r1, [sp, #32]
 8010356:	f802 3c01 	strb.w	r3, [r2, #-1]
 801035a:	428a      	cmp	r2, r1
 801035c:	d028      	beq.n	80103b0 <_dtoa_r+0xb00>
 801035e:	9902      	ldr	r1, [sp, #8]
 8010360:	2300      	movs	r3, #0
 8010362:	220a      	movs	r2, #10
 8010364:	4648      	mov	r0, r9
 8010366:	f000 fd6d 	bl	8010e44 <__multadd>
 801036a:	42af      	cmp	r7, r5
 801036c:	9002      	str	r0, [sp, #8]
 801036e:	f04f 0300 	mov.w	r3, #0
 8010372:	f04f 020a 	mov.w	r2, #10
 8010376:	4639      	mov	r1, r7
 8010378:	4648      	mov	r0, r9
 801037a:	d107      	bne.n	801038c <_dtoa_r+0xadc>
 801037c:	f000 fd62 	bl	8010e44 <__multadd>
 8010380:	4607      	mov	r7, r0
 8010382:	4605      	mov	r5, r0
 8010384:	9b00      	ldr	r3, [sp, #0]
 8010386:	3301      	adds	r3, #1
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	e777      	b.n	801027c <_dtoa_r+0x9cc>
 801038c:	f000 fd5a 	bl	8010e44 <__multadd>
 8010390:	4629      	mov	r1, r5
 8010392:	4607      	mov	r7, r0
 8010394:	2300      	movs	r3, #0
 8010396:	220a      	movs	r2, #10
 8010398:	4648      	mov	r0, r9
 801039a:	f000 fd53 	bl	8010e44 <__multadd>
 801039e:	4605      	mov	r5, r0
 80103a0:	e7f0      	b.n	8010384 <_dtoa_r+0xad4>
 80103a2:	f1bb 0f00 	cmp.w	fp, #0
 80103a6:	bfcc      	ite	gt
 80103a8:	465e      	movgt	r6, fp
 80103aa:	2601      	movle	r6, #1
 80103ac:	4456      	add	r6, sl
 80103ae:	2700      	movs	r7, #0
 80103b0:	9902      	ldr	r1, [sp, #8]
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	2201      	movs	r2, #1
 80103b6:	4648      	mov	r0, r9
 80103b8:	f000 ff32 	bl	8011220 <__lshift>
 80103bc:	4621      	mov	r1, r4
 80103be:	9002      	str	r0, [sp, #8]
 80103c0:	f000 ff9a 	bl	80112f8 <__mcmp>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	dcb4      	bgt.n	8010332 <_dtoa_r+0xa82>
 80103c8:	d102      	bne.n	80103d0 <_dtoa_r+0xb20>
 80103ca:	9b00      	ldr	r3, [sp, #0]
 80103cc:	07db      	lsls	r3, r3, #31
 80103ce:	d4b0      	bmi.n	8010332 <_dtoa_r+0xa82>
 80103d0:	4633      	mov	r3, r6
 80103d2:	461e      	mov	r6, r3
 80103d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103d8:	2a30      	cmp	r2, #48	@ 0x30
 80103da:	d0fa      	beq.n	80103d2 <_dtoa_r+0xb22>
 80103dc:	e4b5      	b.n	800fd4a <_dtoa_r+0x49a>
 80103de:	459a      	cmp	sl, r3
 80103e0:	d1a8      	bne.n	8010334 <_dtoa_r+0xa84>
 80103e2:	2331      	movs	r3, #49	@ 0x31
 80103e4:	f108 0801 	add.w	r8, r8, #1
 80103e8:	f88a 3000 	strb.w	r3, [sl]
 80103ec:	e4ad      	b.n	800fd4a <_dtoa_r+0x49a>
 80103ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801044c <_dtoa_r+0xb9c>
 80103f4:	b11b      	cbz	r3, 80103fe <_dtoa_r+0xb4e>
 80103f6:	f10a 0308 	add.w	r3, sl, #8
 80103fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	4650      	mov	r0, sl
 8010400:	b017      	add	sp, #92	@ 0x5c
 8010402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010406:	9b07      	ldr	r3, [sp, #28]
 8010408:	2b01      	cmp	r3, #1
 801040a:	f77f ae2e 	ble.w	801006a <_dtoa_r+0x7ba>
 801040e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010410:	9308      	str	r3, [sp, #32]
 8010412:	2001      	movs	r0, #1
 8010414:	e64d      	b.n	80100b2 <_dtoa_r+0x802>
 8010416:	f1bb 0f00 	cmp.w	fp, #0
 801041a:	f77f aed9 	ble.w	80101d0 <_dtoa_r+0x920>
 801041e:	4656      	mov	r6, sl
 8010420:	9802      	ldr	r0, [sp, #8]
 8010422:	4621      	mov	r1, r4
 8010424:	f7ff f9ba 	bl	800f79c <quorem>
 8010428:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801042c:	f806 3b01 	strb.w	r3, [r6], #1
 8010430:	eba6 020a 	sub.w	r2, r6, sl
 8010434:	4593      	cmp	fp, r2
 8010436:	ddb4      	ble.n	80103a2 <_dtoa_r+0xaf2>
 8010438:	9902      	ldr	r1, [sp, #8]
 801043a:	2300      	movs	r3, #0
 801043c:	220a      	movs	r2, #10
 801043e:	4648      	mov	r0, r9
 8010440:	f000 fd00 	bl	8010e44 <__multadd>
 8010444:	9002      	str	r0, [sp, #8]
 8010446:	e7eb      	b.n	8010420 <_dtoa_r+0xb70>
 8010448:	08013781 	.word	0x08013781
 801044c:	0801371c 	.word	0x0801371c

08010450 <_free_r>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4605      	mov	r5, r0
 8010454:	2900      	cmp	r1, #0
 8010456:	d041      	beq.n	80104dc <_free_r+0x8c>
 8010458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801045c:	1f0c      	subs	r4, r1, #4
 801045e:	2b00      	cmp	r3, #0
 8010460:	bfb8      	it	lt
 8010462:	18e4      	addlt	r4, r4, r3
 8010464:	f000 fc80 	bl	8010d68 <__malloc_lock>
 8010468:	4a1d      	ldr	r2, [pc, #116]	@ (80104e0 <_free_r+0x90>)
 801046a:	6813      	ldr	r3, [r2, #0]
 801046c:	b933      	cbnz	r3, 801047c <_free_r+0x2c>
 801046e:	6063      	str	r3, [r4, #4]
 8010470:	6014      	str	r4, [r2, #0]
 8010472:	4628      	mov	r0, r5
 8010474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010478:	f000 bc7c 	b.w	8010d74 <__malloc_unlock>
 801047c:	42a3      	cmp	r3, r4
 801047e:	d908      	bls.n	8010492 <_free_r+0x42>
 8010480:	6820      	ldr	r0, [r4, #0]
 8010482:	1821      	adds	r1, r4, r0
 8010484:	428b      	cmp	r3, r1
 8010486:	bf01      	itttt	eq
 8010488:	6819      	ldreq	r1, [r3, #0]
 801048a:	685b      	ldreq	r3, [r3, #4]
 801048c:	1809      	addeq	r1, r1, r0
 801048e:	6021      	streq	r1, [r4, #0]
 8010490:	e7ed      	b.n	801046e <_free_r+0x1e>
 8010492:	461a      	mov	r2, r3
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	b10b      	cbz	r3, 801049c <_free_r+0x4c>
 8010498:	42a3      	cmp	r3, r4
 801049a:	d9fa      	bls.n	8010492 <_free_r+0x42>
 801049c:	6811      	ldr	r1, [r2, #0]
 801049e:	1850      	adds	r0, r2, r1
 80104a0:	42a0      	cmp	r0, r4
 80104a2:	d10b      	bne.n	80104bc <_free_r+0x6c>
 80104a4:	6820      	ldr	r0, [r4, #0]
 80104a6:	4401      	add	r1, r0
 80104a8:	1850      	adds	r0, r2, r1
 80104aa:	4283      	cmp	r3, r0
 80104ac:	6011      	str	r1, [r2, #0]
 80104ae:	d1e0      	bne.n	8010472 <_free_r+0x22>
 80104b0:	6818      	ldr	r0, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	6053      	str	r3, [r2, #4]
 80104b6:	4408      	add	r0, r1
 80104b8:	6010      	str	r0, [r2, #0]
 80104ba:	e7da      	b.n	8010472 <_free_r+0x22>
 80104bc:	d902      	bls.n	80104c4 <_free_r+0x74>
 80104be:	230c      	movs	r3, #12
 80104c0:	602b      	str	r3, [r5, #0]
 80104c2:	e7d6      	b.n	8010472 <_free_r+0x22>
 80104c4:	6820      	ldr	r0, [r4, #0]
 80104c6:	1821      	adds	r1, r4, r0
 80104c8:	428b      	cmp	r3, r1
 80104ca:	bf04      	itt	eq
 80104cc:	6819      	ldreq	r1, [r3, #0]
 80104ce:	685b      	ldreq	r3, [r3, #4]
 80104d0:	6063      	str	r3, [r4, #4]
 80104d2:	bf04      	itt	eq
 80104d4:	1809      	addeq	r1, r1, r0
 80104d6:	6021      	streq	r1, [r4, #0]
 80104d8:	6054      	str	r4, [r2, #4]
 80104da:	e7ca      	b.n	8010472 <_free_r+0x22>
 80104dc:	bd38      	pop	{r3, r4, r5, pc}
 80104de:	bf00      	nop
 80104e0:	20006f78 	.word	0x20006f78

080104e4 <rshift>:
 80104e4:	6903      	ldr	r3, [r0, #16]
 80104e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80104ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80104f2:	f100 0414 	add.w	r4, r0, #20
 80104f6:	dd45      	ble.n	8010584 <rshift+0xa0>
 80104f8:	f011 011f 	ands.w	r1, r1, #31
 80104fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010500:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010504:	d10c      	bne.n	8010520 <rshift+0x3c>
 8010506:	f100 0710 	add.w	r7, r0, #16
 801050a:	4629      	mov	r1, r5
 801050c:	42b1      	cmp	r1, r6
 801050e:	d334      	bcc.n	801057a <rshift+0x96>
 8010510:	1a9b      	subs	r3, r3, r2
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	1eea      	subs	r2, r5, #3
 8010516:	4296      	cmp	r6, r2
 8010518:	bf38      	it	cc
 801051a:	2300      	movcc	r3, #0
 801051c:	4423      	add	r3, r4
 801051e:	e015      	b.n	801054c <rshift+0x68>
 8010520:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010524:	f1c1 0820 	rsb	r8, r1, #32
 8010528:	40cf      	lsrs	r7, r1
 801052a:	f105 0e04 	add.w	lr, r5, #4
 801052e:	46a1      	mov	r9, r4
 8010530:	4576      	cmp	r6, lr
 8010532:	46f4      	mov	ip, lr
 8010534:	d815      	bhi.n	8010562 <rshift+0x7e>
 8010536:	1a9a      	subs	r2, r3, r2
 8010538:	0092      	lsls	r2, r2, #2
 801053a:	3a04      	subs	r2, #4
 801053c:	3501      	adds	r5, #1
 801053e:	42ae      	cmp	r6, r5
 8010540:	bf38      	it	cc
 8010542:	2200      	movcc	r2, #0
 8010544:	18a3      	adds	r3, r4, r2
 8010546:	50a7      	str	r7, [r4, r2]
 8010548:	b107      	cbz	r7, 801054c <rshift+0x68>
 801054a:	3304      	adds	r3, #4
 801054c:	1b1a      	subs	r2, r3, r4
 801054e:	42a3      	cmp	r3, r4
 8010550:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010554:	bf08      	it	eq
 8010556:	2300      	moveq	r3, #0
 8010558:	6102      	str	r2, [r0, #16]
 801055a:	bf08      	it	eq
 801055c:	6143      	streq	r3, [r0, #20]
 801055e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010562:	f8dc c000 	ldr.w	ip, [ip]
 8010566:	fa0c fc08 	lsl.w	ip, ip, r8
 801056a:	ea4c 0707 	orr.w	r7, ip, r7
 801056e:	f849 7b04 	str.w	r7, [r9], #4
 8010572:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010576:	40cf      	lsrs	r7, r1
 8010578:	e7da      	b.n	8010530 <rshift+0x4c>
 801057a:	f851 cb04 	ldr.w	ip, [r1], #4
 801057e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010582:	e7c3      	b.n	801050c <rshift+0x28>
 8010584:	4623      	mov	r3, r4
 8010586:	e7e1      	b.n	801054c <rshift+0x68>

08010588 <__hexdig_fun>:
 8010588:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801058c:	2b09      	cmp	r3, #9
 801058e:	d802      	bhi.n	8010596 <__hexdig_fun+0xe>
 8010590:	3820      	subs	r0, #32
 8010592:	b2c0      	uxtb	r0, r0
 8010594:	4770      	bx	lr
 8010596:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801059a:	2b05      	cmp	r3, #5
 801059c:	d801      	bhi.n	80105a2 <__hexdig_fun+0x1a>
 801059e:	3847      	subs	r0, #71	@ 0x47
 80105a0:	e7f7      	b.n	8010592 <__hexdig_fun+0xa>
 80105a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80105a6:	2b05      	cmp	r3, #5
 80105a8:	d801      	bhi.n	80105ae <__hexdig_fun+0x26>
 80105aa:	3827      	subs	r0, #39	@ 0x27
 80105ac:	e7f1      	b.n	8010592 <__hexdig_fun+0xa>
 80105ae:	2000      	movs	r0, #0
 80105b0:	4770      	bx	lr
	...

080105b4 <__gethex>:
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	b085      	sub	sp, #20
 80105ba:	468a      	mov	sl, r1
 80105bc:	9302      	str	r3, [sp, #8]
 80105be:	680b      	ldr	r3, [r1, #0]
 80105c0:	9001      	str	r0, [sp, #4]
 80105c2:	4690      	mov	r8, r2
 80105c4:	1c9c      	adds	r4, r3, #2
 80105c6:	46a1      	mov	r9, r4
 80105c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80105cc:	2830      	cmp	r0, #48	@ 0x30
 80105ce:	d0fa      	beq.n	80105c6 <__gethex+0x12>
 80105d0:	eba9 0303 	sub.w	r3, r9, r3
 80105d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80105d8:	f7ff ffd6 	bl	8010588 <__hexdig_fun>
 80105dc:	4605      	mov	r5, r0
 80105de:	2800      	cmp	r0, #0
 80105e0:	d168      	bne.n	80106b4 <__gethex+0x100>
 80105e2:	49a0      	ldr	r1, [pc, #640]	@ (8010864 <__gethex+0x2b0>)
 80105e4:	2201      	movs	r2, #1
 80105e6:	4648      	mov	r0, r9
 80105e8:	f7fe f8ca 	bl	800e780 <strncmp>
 80105ec:	4607      	mov	r7, r0
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d167      	bne.n	80106c2 <__gethex+0x10e>
 80105f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80105f6:	4626      	mov	r6, r4
 80105f8:	f7ff ffc6 	bl	8010588 <__hexdig_fun>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d062      	beq.n	80106c6 <__gethex+0x112>
 8010600:	4623      	mov	r3, r4
 8010602:	7818      	ldrb	r0, [r3, #0]
 8010604:	2830      	cmp	r0, #48	@ 0x30
 8010606:	4699      	mov	r9, r3
 8010608:	f103 0301 	add.w	r3, r3, #1
 801060c:	d0f9      	beq.n	8010602 <__gethex+0x4e>
 801060e:	f7ff ffbb 	bl	8010588 <__hexdig_fun>
 8010612:	fab0 f580 	clz	r5, r0
 8010616:	096d      	lsrs	r5, r5, #5
 8010618:	f04f 0b01 	mov.w	fp, #1
 801061c:	464a      	mov	r2, r9
 801061e:	4616      	mov	r6, r2
 8010620:	3201      	adds	r2, #1
 8010622:	7830      	ldrb	r0, [r6, #0]
 8010624:	f7ff ffb0 	bl	8010588 <__hexdig_fun>
 8010628:	2800      	cmp	r0, #0
 801062a:	d1f8      	bne.n	801061e <__gethex+0x6a>
 801062c:	498d      	ldr	r1, [pc, #564]	@ (8010864 <__gethex+0x2b0>)
 801062e:	2201      	movs	r2, #1
 8010630:	4630      	mov	r0, r6
 8010632:	f7fe f8a5 	bl	800e780 <strncmp>
 8010636:	2800      	cmp	r0, #0
 8010638:	d13f      	bne.n	80106ba <__gethex+0x106>
 801063a:	b944      	cbnz	r4, 801064e <__gethex+0x9a>
 801063c:	1c74      	adds	r4, r6, #1
 801063e:	4622      	mov	r2, r4
 8010640:	4616      	mov	r6, r2
 8010642:	3201      	adds	r2, #1
 8010644:	7830      	ldrb	r0, [r6, #0]
 8010646:	f7ff ff9f 	bl	8010588 <__hexdig_fun>
 801064a:	2800      	cmp	r0, #0
 801064c:	d1f8      	bne.n	8010640 <__gethex+0x8c>
 801064e:	1ba4      	subs	r4, r4, r6
 8010650:	00a7      	lsls	r7, r4, #2
 8010652:	7833      	ldrb	r3, [r6, #0]
 8010654:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010658:	2b50      	cmp	r3, #80	@ 0x50
 801065a:	d13e      	bne.n	80106da <__gethex+0x126>
 801065c:	7873      	ldrb	r3, [r6, #1]
 801065e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010660:	d033      	beq.n	80106ca <__gethex+0x116>
 8010662:	2b2d      	cmp	r3, #45	@ 0x2d
 8010664:	d034      	beq.n	80106d0 <__gethex+0x11c>
 8010666:	1c71      	adds	r1, r6, #1
 8010668:	2400      	movs	r4, #0
 801066a:	7808      	ldrb	r0, [r1, #0]
 801066c:	f7ff ff8c 	bl	8010588 <__hexdig_fun>
 8010670:	1e43      	subs	r3, r0, #1
 8010672:	b2db      	uxtb	r3, r3
 8010674:	2b18      	cmp	r3, #24
 8010676:	d830      	bhi.n	80106da <__gethex+0x126>
 8010678:	f1a0 0210 	sub.w	r2, r0, #16
 801067c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010680:	f7ff ff82 	bl	8010588 <__hexdig_fun>
 8010684:	f100 3cff 	add.w	ip, r0, #4294967295
 8010688:	fa5f fc8c 	uxtb.w	ip, ip
 801068c:	f1bc 0f18 	cmp.w	ip, #24
 8010690:	f04f 030a 	mov.w	r3, #10
 8010694:	d91e      	bls.n	80106d4 <__gethex+0x120>
 8010696:	b104      	cbz	r4, 801069a <__gethex+0xe6>
 8010698:	4252      	negs	r2, r2
 801069a:	4417      	add	r7, r2
 801069c:	f8ca 1000 	str.w	r1, [sl]
 80106a0:	b1ed      	cbz	r5, 80106de <__gethex+0x12a>
 80106a2:	f1bb 0f00 	cmp.w	fp, #0
 80106a6:	bf0c      	ite	eq
 80106a8:	2506      	moveq	r5, #6
 80106aa:	2500      	movne	r5, #0
 80106ac:	4628      	mov	r0, r5
 80106ae:	b005      	add	sp, #20
 80106b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b4:	2500      	movs	r5, #0
 80106b6:	462c      	mov	r4, r5
 80106b8:	e7b0      	b.n	801061c <__gethex+0x68>
 80106ba:	2c00      	cmp	r4, #0
 80106bc:	d1c7      	bne.n	801064e <__gethex+0x9a>
 80106be:	4627      	mov	r7, r4
 80106c0:	e7c7      	b.n	8010652 <__gethex+0x9e>
 80106c2:	464e      	mov	r6, r9
 80106c4:	462f      	mov	r7, r5
 80106c6:	2501      	movs	r5, #1
 80106c8:	e7c3      	b.n	8010652 <__gethex+0x9e>
 80106ca:	2400      	movs	r4, #0
 80106cc:	1cb1      	adds	r1, r6, #2
 80106ce:	e7cc      	b.n	801066a <__gethex+0xb6>
 80106d0:	2401      	movs	r4, #1
 80106d2:	e7fb      	b.n	80106cc <__gethex+0x118>
 80106d4:	fb03 0002 	mla	r0, r3, r2, r0
 80106d8:	e7ce      	b.n	8010678 <__gethex+0xc4>
 80106da:	4631      	mov	r1, r6
 80106dc:	e7de      	b.n	801069c <__gethex+0xe8>
 80106de:	eba6 0309 	sub.w	r3, r6, r9
 80106e2:	3b01      	subs	r3, #1
 80106e4:	4629      	mov	r1, r5
 80106e6:	2b07      	cmp	r3, #7
 80106e8:	dc0a      	bgt.n	8010700 <__gethex+0x14c>
 80106ea:	9801      	ldr	r0, [sp, #4]
 80106ec:	f000 fb48 	bl	8010d80 <_Balloc>
 80106f0:	4604      	mov	r4, r0
 80106f2:	b940      	cbnz	r0, 8010706 <__gethex+0x152>
 80106f4:	4b5c      	ldr	r3, [pc, #368]	@ (8010868 <__gethex+0x2b4>)
 80106f6:	4602      	mov	r2, r0
 80106f8:	21e4      	movs	r1, #228	@ 0xe4
 80106fa:	485c      	ldr	r0, [pc, #368]	@ (801086c <__gethex+0x2b8>)
 80106fc:	f7ff f828 	bl	800f750 <__assert_func>
 8010700:	3101      	adds	r1, #1
 8010702:	105b      	asrs	r3, r3, #1
 8010704:	e7ef      	b.n	80106e6 <__gethex+0x132>
 8010706:	f100 0a14 	add.w	sl, r0, #20
 801070a:	2300      	movs	r3, #0
 801070c:	4655      	mov	r5, sl
 801070e:	469b      	mov	fp, r3
 8010710:	45b1      	cmp	r9, r6
 8010712:	d337      	bcc.n	8010784 <__gethex+0x1d0>
 8010714:	f845 bb04 	str.w	fp, [r5], #4
 8010718:	eba5 050a 	sub.w	r5, r5, sl
 801071c:	10ad      	asrs	r5, r5, #2
 801071e:	6125      	str	r5, [r4, #16]
 8010720:	4658      	mov	r0, fp
 8010722:	f000 fc1f 	bl	8010f64 <__hi0bits>
 8010726:	016d      	lsls	r5, r5, #5
 8010728:	f8d8 6000 	ldr.w	r6, [r8]
 801072c:	1a2d      	subs	r5, r5, r0
 801072e:	42b5      	cmp	r5, r6
 8010730:	dd54      	ble.n	80107dc <__gethex+0x228>
 8010732:	1bad      	subs	r5, r5, r6
 8010734:	4629      	mov	r1, r5
 8010736:	4620      	mov	r0, r4
 8010738:	f000 ffab 	bl	8011692 <__any_on>
 801073c:	4681      	mov	r9, r0
 801073e:	b178      	cbz	r0, 8010760 <__gethex+0x1ac>
 8010740:	1e6b      	subs	r3, r5, #1
 8010742:	1159      	asrs	r1, r3, #5
 8010744:	f003 021f 	and.w	r2, r3, #31
 8010748:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801074c:	f04f 0901 	mov.w	r9, #1
 8010750:	fa09 f202 	lsl.w	r2, r9, r2
 8010754:	420a      	tst	r2, r1
 8010756:	d003      	beq.n	8010760 <__gethex+0x1ac>
 8010758:	454b      	cmp	r3, r9
 801075a:	dc36      	bgt.n	80107ca <__gethex+0x216>
 801075c:	f04f 0902 	mov.w	r9, #2
 8010760:	4629      	mov	r1, r5
 8010762:	4620      	mov	r0, r4
 8010764:	f7ff febe 	bl	80104e4 <rshift>
 8010768:	442f      	add	r7, r5
 801076a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801076e:	42bb      	cmp	r3, r7
 8010770:	da42      	bge.n	80107f8 <__gethex+0x244>
 8010772:	9801      	ldr	r0, [sp, #4]
 8010774:	4621      	mov	r1, r4
 8010776:	f000 fb43 	bl	8010e00 <_Bfree>
 801077a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801077c:	2300      	movs	r3, #0
 801077e:	6013      	str	r3, [r2, #0]
 8010780:	25a3      	movs	r5, #163	@ 0xa3
 8010782:	e793      	b.n	80106ac <__gethex+0xf8>
 8010784:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010788:	2a2e      	cmp	r2, #46	@ 0x2e
 801078a:	d012      	beq.n	80107b2 <__gethex+0x1fe>
 801078c:	2b20      	cmp	r3, #32
 801078e:	d104      	bne.n	801079a <__gethex+0x1e6>
 8010790:	f845 bb04 	str.w	fp, [r5], #4
 8010794:	f04f 0b00 	mov.w	fp, #0
 8010798:	465b      	mov	r3, fp
 801079a:	7830      	ldrb	r0, [r6, #0]
 801079c:	9303      	str	r3, [sp, #12]
 801079e:	f7ff fef3 	bl	8010588 <__hexdig_fun>
 80107a2:	9b03      	ldr	r3, [sp, #12]
 80107a4:	f000 000f 	and.w	r0, r0, #15
 80107a8:	4098      	lsls	r0, r3
 80107aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80107ae:	3304      	adds	r3, #4
 80107b0:	e7ae      	b.n	8010710 <__gethex+0x15c>
 80107b2:	45b1      	cmp	r9, r6
 80107b4:	d8ea      	bhi.n	801078c <__gethex+0x1d8>
 80107b6:	492b      	ldr	r1, [pc, #172]	@ (8010864 <__gethex+0x2b0>)
 80107b8:	9303      	str	r3, [sp, #12]
 80107ba:	2201      	movs	r2, #1
 80107bc:	4630      	mov	r0, r6
 80107be:	f7fd ffdf 	bl	800e780 <strncmp>
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d1e1      	bne.n	801078c <__gethex+0x1d8>
 80107c8:	e7a2      	b.n	8010710 <__gethex+0x15c>
 80107ca:	1ea9      	subs	r1, r5, #2
 80107cc:	4620      	mov	r0, r4
 80107ce:	f000 ff60 	bl	8011692 <__any_on>
 80107d2:	2800      	cmp	r0, #0
 80107d4:	d0c2      	beq.n	801075c <__gethex+0x1a8>
 80107d6:	f04f 0903 	mov.w	r9, #3
 80107da:	e7c1      	b.n	8010760 <__gethex+0x1ac>
 80107dc:	da09      	bge.n	80107f2 <__gethex+0x23e>
 80107de:	1b75      	subs	r5, r6, r5
 80107e0:	4621      	mov	r1, r4
 80107e2:	9801      	ldr	r0, [sp, #4]
 80107e4:	462a      	mov	r2, r5
 80107e6:	f000 fd1b 	bl	8011220 <__lshift>
 80107ea:	1b7f      	subs	r7, r7, r5
 80107ec:	4604      	mov	r4, r0
 80107ee:	f100 0a14 	add.w	sl, r0, #20
 80107f2:	f04f 0900 	mov.w	r9, #0
 80107f6:	e7b8      	b.n	801076a <__gethex+0x1b6>
 80107f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107fc:	42bd      	cmp	r5, r7
 80107fe:	dd6f      	ble.n	80108e0 <__gethex+0x32c>
 8010800:	1bed      	subs	r5, r5, r7
 8010802:	42ae      	cmp	r6, r5
 8010804:	dc34      	bgt.n	8010870 <__gethex+0x2bc>
 8010806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801080a:	2b02      	cmp	r3, #2
 801080c:	d022      	beq.n	8010854 <__gethex+0x2a0>
 801080e:	2b03      	cmp	r3, #3
 8010810:	d024      	beq.n	801085c <__gethex+0x2a8>
 8010812:	2b01      	cmp	r3, #1
 8010814:	d115      	bne.n	8010842 <__gethex+0x28e>
 8010816:	42ae      	cmp	r6, r5
 8010818:	d113      	bne.n	8010842 <__gethex+0x28e>
 801081a:	2e01      	cmp	r6, #1
 801081c:	d10b      	bne.n	8010836 <__gethex+0x282>
 801081e:	9a02      	ldr	r2, [sp, #8]
 8010820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010824:	6013      	str	r3, [r2, #0]
 8010826:	2301      	movs	r3, #1
 8010828:	6123      	str	r3, [r4, #16]
 801082a:	f8ca 3000 	str.w	r3, [sl]
 801082e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010830:	2562      	movs	r5, #98	@ 0x62
 8010832:	601c      	str	r4, [r3, #0]
 8010834:	e73a      	b.n	80106ac <__gethex+0xf8>
 8010836:	1e71      	subs	r1, r6, #1
 8010838:	4620      	mov	r0, r4
 801083a:	f000 ff2a 	bl	8011692 <__any_on>
 801083e:	2800      	cmp	r0, #0
 8010840:	d1ed      	bne.n	801081e <__gethex+0x26a>
 8010842:	9801      	ldr	r0, [sp, #4]
 8010844:	4621      	mov	r1, r4
 8010846:	f000 fadb 	bl	8010e00 <_Bfree>
 801084a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801084c:	2300      	movs	r3, #0
 801084e:	6013      	str	r3, [r2, #0]
 8010850:	2550      	movs	r5, #80	@ 0x50
 8010852:	e72b      	b.n	80106ac <__gethex+0xf8>
 8010854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1f3      	bne.n	8010842 <__gethex+0x28e>
 801085a:	e7e0      	b.n	801081e <__gethex+0x26a>
 801085c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801085e:	2b00      	cmp	r3, #0
 8010860:	d1dd      	bne.n	801081e <__gethex+0x26a>
 8010862:	e7ee      	b.n	8010842 <__gethex+0x28e>
 8010864:	0801358c 	.word	0x0801358c
 8010868:	08013781 	.word	0x08013781
 801086c:	08013792 	.word	0x08013792
 8010870:	1e6f      	subs	r7, r5, #1
 8010872:	f1b9 0f00 	cmp.w	r9, #0
 8010876:	d130      	bne.n	80108da <__gethex+0x326>
 8010878:	b127      	cbz	r7, 8010884 <__gethex+0x2d0>
 801087a:	4639      	mov	r1, r7
 801087c:	4620      	mov	r0, r4
 801087e:	f000 ff08 	bl	8011692 <__any_on>
 8010882:	4681      	mov	r9, r0
 8010884:	117a      	asrs	r2, r7, #5
 8010886:	2301      	movs	r3, #1
 8010888:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801088c:	f007 071f 	and.w	r7, r7, #31
 8010890:	40bb      	lsls	r3, r7
 8010892:	4213      	tst	r3, r2
 8010894:	4629      	mov	r1, r5
 8010896:	4620      	mov	r0, r4
 8010898:	bf18      	it	ne
 801089a:	f049 0902 	orrne.w	r9, r9, #2
 801089e:	f7ff fe21 	bl	80104e4 <rshift>
 80108a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80108a6:	1b76      	subs	r6, r6, r5
 80108a8:	2502      	movs	r5, #2
 80108aa:	f1b9 0f00 	cmp.w	r9, #0
 80108ae:	d047      	beq.n	8010940 <__gethex+0x38c>
 80108b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108b4:	2b02      	cmp	r3, #2
 80108b6:	d015      	beq.n	80108e4 <__gethex+0x330>
 80108b8:	2b03      	cmp	r3, #3
 80108ba:	d017      	beq.n	80108ec <__gethex+0x338>
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d109      	bne.n	80108d4 <__gethex+0x320>
 80108c0:	f019 0f02 	tst.w	r9, #2
 80108c4:	d006      	beq.n	80108d4 <__gethex+0x320>
 80108c6:	f8da 3000 	ldr.w	r3, [sl]
 80108ca:	ea49 0903 	orr.w	r9, r9, r3
 80108ce:	f019 0f01 	tst.w	r9, #1
 80108d2:	d10e      	bne.n	80108f2 <__gethex+0x33e>
 80108d4:	f045 0510 	orr.w	r5, r5, #16
 80108d8:	e032      	b.n	8010940 <__gethex+0x38c>
 80108da:	f04f 0901 	mov.w	r9, #1
 80108de:	e7d1      	b.n	8010884 <__gethex+0x2d0>
 80108e0:	2501      	movs	r5, #1
 80108e2:	e7e2      	b.n	80108aa <__gethex+0x2f6>
 80108e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108e6:	f1c3 0301 	rsb	r3, r3, #1
 80108ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d0f0      	beq.n	80108d4 <__gethex+0x320>
 80108f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80108f6:	f104 0314 	add.w	r3, r4, #20
 80108fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80108fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010902:	f04f 0c00 	mov.w	ip, #0
 8010906:	4618      	mov	r0, r3
 8010908:	f853 2b04 	ldr.w	r2, [r3], #4
 801090c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010910:	d01b      	beq.n	801094a <__gethex+0x396>
 8010912:	3201      	adds	r2, #1
 8010914:	6002      	str	r2, [r0, #0]
 8010916:	2d02      	cmp	r5, #2
 8010918:	f104 0314 	add.w	r3, r4, #20
 801091c:	d13c      	bne.n	8010998 <__gethex+0x3e4>
 801091e:	f8d8 2000 	ldr.w	r2, [r8]
 8010922:	3a01      	subs	r2, #1
 8010924:	42b2      	cmp	r2, r6
 8010926:	d109      	bne.n	801093c <__gethex+0x388>
 8010928:	1171      	asrs	r1, r6, #5
 801092a:	2201      	movs	r2, #1
 801092c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010930:	f006 061f 	and.w	r6, r6, #31
 8010934:	fa02 f606 	lsl.w	r6, r2, r6
 8010938:	421e      	tst	r6, r3
 801093a:	d13a      	bne.n	80109b2 <__gethex+0x3fe>
 801093c:	f045 0520 	orr.w	r5, r5, #32
 8010940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010942:	601c      	str	r4, [r3, #0]
 8010944:	9b02      	ldr	r3, [sp, #8]
 8010946:	601f      	str	r7, [r3, #0]
 8010948:	e6b0      	b.n	80106ac <__gethex+0xf8>
 801094a:	4299      	cmp	r1, r3
 801094c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010950:	d8d9      	bhi.n	8010906 <__gethex+0x352>
 8010952:	68a3      	ldr	r3, [r4, #8]
 8010954:	459b      	cmp	fp, r3
 8010956:	db17      	blt.n	8010988 <__gethex+0x3d4>
 8010958:	6861      	ldr	r1, [r4, #4]
 801095a:	9801      	ldr	r0, [sp, #4]
 801095c:	3101      	adds	r1, #1
 801095e:	f000 fa0f 	bl	8010d80 <_Balloc>
 8010962:	4681      	mov	r9, r0
 8010964:	b918      	cbnz	r0, 801096e <__gethex+0x3ba>
 8010966:	4b1a      	ldr	r3, [pc, #104]	@ (80109d0 <__gethex+0x41c>)
 8010968:	4602      	mov	r2, r0
 801096a:	2184      	movs	r1, #132	@ 0x84
 801096c:	e6c5      	b.n	80106fa <__gethex+0x146>
 801096e:	6922      	ldr	r2, [r4, #16]
 8010970:	3202      	adds	r2, #2
 8010972:	f104 010c 	add.w	r1, r4, #12
 8010976:	0092      	lsls	r2, r2, #2
 8010978:	300c      	adds	r0, #12
 801097a:	f7fe fed2 	bl	800f722 <memcpy>
 801097e:	4621      	mov	r1, r4
 8010980:	9801      	ldr	r0, [sp, #4]
 8010982:	f000 fa3d 	bl	8010e00 <_Bfree>
 8010986:	464c      	mov	r4, r9
 8010988:	6923      	ldr	r3, [r4, #16]
 801098a:	1c5a      	adds	r2, r3, #1
 801098c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010990:	6122      	str	r2, [r4, #16]
 8010992:	2201      	movs	r2, #1
 8010994:	615a      	str	r2, [r3, #20]
 8010996:	e7be      	b.n	8010916 <__gethex+0x362>
 8010998:	6922      	ldr	r2, [r4, #16]
 801099a:	455a      	cmp	r2, fp
 801099c:	dd0b      	ble.n	80109b6 <__gethex+0x402>
 801099e:	2101      	movs	r1, #1
 80109a0:	4620      	mov	r0, r4
 80109a2:	f7ff fd9f 	bl	80104e4 <rshift>
 80109a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109aa:	3701      	adds	r7, #1
 80109ac:	42bb      	cmp	r3, r7
 80109ae:	f6ff aee0 	blt.w	8010772 <__gethex+0x1be>
 80109b2:	2501      	movs	r5, #1
 80109b4:	e7c2      	b.n	801093c <__gethex+0x388>
 80109b6:	f016 061f 	ands.w	r6, r6, #31
 80109ba:	d0fa      	beq.n	80109b2 <__gethex+0x3fe>
 80109bc:	4453      	add	r3, sl
 80109be:	f1c6 0620 	rsb	r6, r6, #32
 80109c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80109c6:	f000 facd 	bl	8010f64 <__hi0bits>
 80109ca:	42b0      	cmp	r0, r6
 80109cc:	dbe7      	blt.n	801099e <__gethex+0x3ea>
 80109ce:	e7f0      	b.n	80109b2 <__gethex+0x3fe>
 80109d0:	08013781 	.word	0x08013781

080109d4 <L_shift>:
 80109d4:	f1c2 0208 	rsb	r2, r2, #8
 80109d8:	0092      	lsls	r2, r2, #2
 80109da:	b570      	push	{r4, r5, r6, lr}
 80109dc:	f1c2 0620 	rsb	r6, r2, #32
 80109e0:	6843      	ldr	r3, [r0, #4]
 80109e2:	6804      	ldr	r4, [r0, #0]
 80109e4:	fa03 f506 	lsl.w	r5, r3, r6
 80109e8:	432c      	orrs	r4, r5
 80109ea:	40d3      	lsrs	r3, r2
 80109ec:	6004      	str	r4, [r0, #0]
 80109ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80109f2:	4288      	cmp	r0, r1
 80109f4:	d3f4      	bcc.n	80109e0 <L_shift+0xc>
 80109f6:	bd70      	pop	{r4, r5, r6, pc}

080109f8 <__match>:
 80109f8:	b530      	push	{r4, r5, lr}
 80109fa:	6803      	ldr	r3, [r0, #0]
 80109fc:	3301      	adds	r3, #1
 80109fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a02:	b914      	cbnz	r4, 8010a0a <__match+0x12>
 8010a04:	6003      	str	r3, [r0, #0]
 8010a06:	2001      	movs	r0, #1
 8010a08:	bd30      	pop	{r4, r5, pc}
 8010a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010a12:	2d19      	cmp	r5, #25
 8010a14:	bf98      	it	ls
 8010a16:	3220      	addls	r2, #32
 8010a18:	42a2      	cmp	r2, r4
 8010a1a:	d0f0      	beq.n	80109fe <__match+0x6>
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	e7f3      	b.n	8010a08 <__match+0x10>

08010a20 <__hexnan>:
 8010a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a24:	680b      	ldr	r3, [r1, #0]
 8010a26:	6801      	ldr	r1, [r0, #0]
 8010a28:	115e      	asrs	r6, r3, #5
 8010a2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a2e:	f013 031f 	ands.w	r3, r3, #31
 8010a32:	b087      	sub	sp, #28
 8010a34:	bf18      	it	ne
 8010a36:	3604      	addne	r6, #4
 8010a38:	2500      	movs	r5, #0
 8010a3a:	1f37      	subs	r7, r6, #4
 8010a3c:	4682      	mov	sl, r0
 8010a3e:	4690      	mov	r8, r2
 8010a40:	9301      	str	r3, [sp, #4]
 8010a42:	f846 5c04 	str.w	r5, [r6, #-4]
 8010a46:	46b9      	mov	r9, r7
 8010a48:	463c      	mov	r4, r7
 8010a4a:	9502      	str	r5, [sp, #8]
 8010a4c:	46ab      	mov	fp, r5
 8010a4e:	784a      	ldrb	r2, [r1, #1]
 8010a50:	1c4b      	adds	r3, r1, #1
 8010a52:	9303      	str	r3, [sp, #12]
 8010a54:	b342      	cbz	r2, 8010aa8 <__hexnan+0x88>
 8010a56:	4610      	mov	r0, r2
 8010a58:	9105      	str	r1, [sp, #20]
 8010a5a:	9204      	str	r2, [sp, #16]
 8010a5c:	f7ff fd94 	bl	8010588 <__hexdig_fun>
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d151      	bne.n	8010b08 <__hexnan+0xe8>
 8010a64:	9a04      	ldr	r2, [sp, #16]
 8010a66:	9905      	ldr	r1, [sp, #20]
 8010a68:	2a20      	cmp	r2, #32
 8010a6a:	d818      	bhi.n	8010a9e <__hexnan+0x7e>
 8010a6c:	9b02      	ldr	r3, [sp, #8]
 8010a6e:	459b      	cmp	fp, r3
 8010a70:	dd13      	ble.n	8010a9a <__hexnan+0x7a>
 8010a72:	454c      	cmp	r4, r9
 8010a74:	d206      	bcs.n	8010a84 <__hexnan+0x64>
 8010a76:	2d07      	cmp	r5, #7
 8010a78:	dc04      	bgt.n	8010a84 <__hexnan+0x64>
 8010a7a:	462a      	mov	r2, r5
 8010a7c:	4649      	mov	r1, r9
 8010a7e:	4620      	mov	r0, r4
 8010a80:	f7ff ffa8 	bl	80109d4 <L_shift>
 8010a84:	4544      	cmp	r4, r8
 8010a86:	d952      	bls.n	8010b2e <__hexnan+0x10e>
 8010a88:	2300      	movs	r3, #0
 8010a8a:	f1a4 0904 	sub.w	r9, r4, #4
 8010a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a92:	f8cd b008 	str.w	fp, [sp, #8]
 8010a96:	464c      	mov	r4, r9
 8010a98:	461d      	mov	r5, r3
 8010a9a:	9903      	ldr	r1, [sp, #12]
 8010a9c:	e7d7      	b.n	8010a4e <__hexnan+0x2e>
 8010a9e:	2a29      	cmp	r2, #41	@ 0x29
 8010aa0:	d157      	bne.n	8010b52 <__hexnan+0x132>
 8010aa2:	3102      	adds	r1, #2
 8010aa4:	f8ca 1000 	str.w	r1, [sl]
 8010aa8:	f1bb 0f00 	cmp.w	fp, #0
 8010aac:	d051      	beq.n	8010b52 <__hexnan+0x132>
 8010aae:	454c      	cmp	r4, r9
 8010ab0:	d206      	bcs.n	8010ac0 <__hexnan+0xa0>
 8010ab2:	2d07      	cmp	r5, #7
 8010ab4:	dc04      	bgt.n	8010ac0 <__hexnan+0xa0>
 8010ab6:	462a      	mov	r2, r5
 8010ab8:	4649      	mov	r1, r9
 8010aba:	4620      	mov	r0, r4
 8010abc:	f7ff ff8a 	bl	80109d4 <L_shift>
 8010ac0:	4544      	cmp	r4, r8
 8010ac2:	d936      	bls.n	8010b32 <__hexnan+0x112>
 8010ac4:	f1a8 0204 	sub.w	r2, r8, #4
 8010ac8:	4623      	mov	r3, r4
 8010aca:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ace:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ad2:	429f      	cmp	r7, r3
 8010ad4:	d2f9      	bcs.n	8010aca <__hexnan+0xaa>
 8010ad6:	1b3b      	subs	r3, r7, r4
 8010ad8:	f023 0303 	bic.w	r3, r3, #3
 8010adc:	3304      	adds	r3, #4
 8010ade:	3401      	adds	r4, #1
 8010ae0:	3e03      	subs	r6, #3
 8010ae2:	42b4      	cmp	r4, r6
 8010ae4:	bf88      	it	hi
 8010ae6:	2304      	movhi	r3, #4
 8010ae8:	4443      	add	r3, r8
 8010aea:	2200      	movs	r2, #0
 8010aec:	f843 2b04 	str.w	r2, [r3], #4
 8010af0:	429f      	cmp	r7, r3
 8010af2:	d2fb      	bcs.n	8010aec <__hexnan+0xcc>
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	b91b      	cbnz	r3, 8010b00 <__hexnan+0xe0>
 8010af8:	4547      	cmp	r7, r8
 8010afa:	d128      	bne.n	8010b4e <__hexnan+0x12e>
 8010afc:	2301      	movs	r3, #1
 8010afe:	603b      	str	r3, [r7, #0]
 8010b00:	2005      	movs	r0, #5
 8010b02:	b007      	add	sp, #28
 8010b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b08:	3501      	adds	r5, #1
 8010b0a:	2d08      	cmp	r5, #8
 8010b0c:	f10b 0b01 	add.w	fp, fp, #1
 8010b10:	dd06      	ble.n	8010b20 <__hexnan+0x100>
 8010b12:	4544      	cmp	r4, r8
 8010b14:	d9c1      	bls.n	8010a9a <__hexnan+0x7a>
 8010b16:	2300      	movs	r3, #0
 8010b18:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b1c:	2501      	movs	r5, #1
 8010b1e:	3c04      	subs	r4, #4
 8010b20:	6822      	ldr	r2, [r4, #0]
 8010b22:	f000 000f 	and.w	r0, r0, #15
 8010b26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010b2a:	6020      	str	r0, [r4, #0]
 8010b2c:	e7b5      	b.n	8010a9a <__hexnan+0x7a>
 8010b2e:	2508      	movs	r5, #8
 8010b30:	e7b3      	b.n	8010a9a <__hexnan+0x7a>
 8010b32:	9b01      	ldr	r3, [sp, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d0dd      	beq.n	8010af4 <__hexnan+0xd4>
 8010b38:	f1c3 0320 	rsb	r3, r3, #32
 8010b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b40:	40da      	lsrs	r2, r3
 8010b42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b46:	4013      	ands	r3, r2
 8010b48:	f846 3c04 	str.w	r3, [r6, #-4]
 8010b4c:	e7d2      	b.n	8010af4 <__hexnan+0xd4>
 8010b4e:	3f04      	subs	r7, #4
 8010b50:	e7d0      	b.n	8010af4 <__hexnan+0xd4>
 8010b52:	2004      	movs	r0, #4
 8010b54:	e7d5      	b.n	8010b02 <__hexnan+0xe2>
	...

08010b58 <_findenv_r>:
 8010b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010bcc <_findenv_r+0x74>
 8010b60:	4606      	mov	r6, r0
 8010b62:	4689      	mov	r9, r1
 8010b64:	4617      	mov	r7, r2
 8010b66:	f001 fefb 	bl	8012960 <__env_lock>
 8010b6a:	f8da 4000 	ldr.w	r4, [sl]
 8010b6e:	b134      	cbz	r4, 8010b7e <_findenv_r+0x26>
 8010b70:	464b      	mov	r3, r9
 8010b72:	4698      	mov	r8, r3
 8010b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b78:	b13a      	cbz	r2, 8010b8a <_findenv_r+0x32>
 8010b7a:	2a3d      	cmp	r2, #61	@ 0x3d
 8010b7c:	d1f9      	bne.n	8010b72 <_findenv_r+0x1a>
 8010b7e:	4630      	mov	r0, r6
 8010b80:	f001 fef4 	bl	801296c <__env_unlock>
 8010b84:	2000      	movs	r0, #0
 8010b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8a:	eba8 0809 	sub.w	r8, r8, r9
 8010b8e:	46a3      	mov	fp, r4
 8010b90:	f854 0b04 	ldr.w	r0, [r4], #4
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0f2      	beq.n	8010b7e <_findenv_r+0x26>
 8010b98:	4642      	mov	r2, r8
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	f7fd fdf0 	bl	800e780 <strncmp>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d1f4      	bne.n	8010b8e <_findenv_r+0x36>
 8010ba4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010ba8:	eb03 0508 	add.w	r5, r3, r8
 8010bac:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010bb0:	2b3d      	cmp	r3, #61	@ 0x3d
 8010bb2:	d1ec      	bne.n	8010b8e <_findenv_r+0x36>
 8010bb4:	f8da 3000 	ldr.w	r3, [sl]
 8010bb8:	ebab 0303 	sub.w	r3, fp, r3
 8010bbc:	109b      	asrs	r3, r3, #2
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	603b      	str	r3, [r7, #0]
 8010bc2:	f001 fed3 	bl	801296c <__env_unlock>
 8010bc6:	1c68      	adds	r0, r5, #1
 8010bc8:	e7dd      	b.n	8010b86 <_findenv_r+0x2e>
 8010bca:	bf00      	nop
 8010bcc:	20000010 	.word	0x20000010

08010bd0 <_getenv_r>:
 8010bd0:	b507      	push	{r0, r1, r2, lr}
 8010bd2:	aa01      	add	r2, sp, #4
 8010bd4:	f7ff ffc0 	bl	8010b58 <_findenv_r>
 8010bd8:	b003      	add	sp, #12
 8010bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010be0 <malloc>:
 8010be0:	4b02      	ldr	r3, [pc, #8]	@ (8010bec <malloc+0xc>)
 8010be2:	4601      	mov	r1, r0
 8010be4:	6818      	ldr	r0, [r3, #0]
 8010be6:	f000 b82d 	b.w	8010c44 <_malloc_r>
 8010bea:	bf00      	nop
 8010bec:	200001a4 	.word	0x200001a4

08010bf0 <free>:
 8010bf0:	4b02      	ldr	r3, [pc, #8]	@ (8010bfc <free+0xc>)
 8010bf2:	4601      	mov	r1, r0
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	f7ff bc2b 	b.w	8010450 <_free_r>
 8010bfa:	bf00      	nop
 8010bfc:	200001a4 	.word	0x200001a4

08010c00 <sbrk_aligned>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	4e0f      	ldr	r6, [pc, #60]	@ (8010c40 <sbrk_aligned+0x40>)
 8010c04:	460c      	mov	r4, r1
 8010c06:	6831      	ldr	r1, [r6, #0]
 8010c08:	4605      	mov	r5, r0
 8010c0a:	b911      	cbnz	r1, 8010c12 <sbrk_aligned+0x12>
 8010c0c:	f001 fe7c 	bl	8012908 <_sbrk_r>
 8010c10:	6030      	str	r0, [r6, #0]
 8010c12:	4621      	mov	r1, r4
 8010c14:	4628      	mov	r0, r5
 8010c16:	f001 fe77 	bl	8012908 <_sbrk_r>
 8010c1a:	1c43      	adds	r3, r0, #1
 8010c1c:	d103      	bne.n	8010c26 <sbrk_aligned+0x26>
 8010c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8010c22:	4620      	mov	r0, r4
 8010c24:	bd70      	pop	{r4, r5, r6, pc}
 8010c26:	1cc4      	adds	r4, r0, #3
 8010c28:	f024 0403 	bic.w	r4, r4, #3
 8010c2c:	42a0      	cmp	r0, r4
 8010c2e:	d0f8      	beq.n	8010c22 <sbrk_aligned+0x22>
 8010c30:	1a21      	subs	r1, r4, r0
 8010c32:	4628      	mov	r0, r5
 8010c34:	f001 fe68 	bl	8012908 <_sbrk_r>
 8010c38:	3001      	adds	r0, #1
 8010c3a:	d1f2      	bne.n	8010c22 <sbrk_aligned+0x22>
 8010c3c:	e7ef      	b.n	8010c1e <sbrk_aligned+0x1e>
 8010c3e:	bf00      	nop
 8010c40:	20006f74 	.word	0x20006f74

08010c44 <_malloc_r>:
 8010c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c48:	1ccd      	adds	r5, r1, #3
 8010c4a:	f025 0503 	bic.w	r5, r5, #3
 8010c4e:	3508      	adds	r5, #8
 8010c50:	2d0c      	cmp	r5, #12
 8010c52:	bf38      	it	cc
 8010c54:	250c      	movcc	r5, #12
 8010c56:	2d00      	cmp	r5, #0
 8010c58:	4606      	mov	r6, r0
 8010c5a:	db01      	blt.n	8010c60 <_malloc_r+0x1c>
 8010c5c:	42a9      	cmp	r1, r5
 8010c5e:	d904      	bls.n	8010c6a <_malloc_r+0x26>
 8010c60:	230c      	movs	r3, #12
 8010c62:	6033      	str	r3, [r6, #0]
 8010c64:	2000      	movs	r0, #0
 8010c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010d40 <_malloc_r+0xfc>
 8010c6e:	f000 f87b 	bl	8010d68 <__malloc_lock>
 8010c72:	f8d8 3000 	ldr.w	r3, [r8]
 8010c76:	461c      	mov	r4, r3
 8010c78:	bb44      	cbnz	r4, 8010ccc <_malloc_r+0x88>
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f7ff ffbf 	bl	8010c00 <sbrk_aligned>
 8010c82:	1c43      	adds	r3, r0, #1
 8010c84:	4604      	mov	r4, r0
 8010c86:	d158      	bne.n	8010d3a <_malloc_r+0xf6>
 8010c88:	f8d8 4000 	ldr.w	r4, [r8]
 8010c8c:	4627      	mov	r7, r4
 8010c8e:	2f00      	cmp	r7, #0
 8010c90:	d143      	bne.n	8010d1a <_malloc_r+0xd6>
 8010c92:	2c00      	cmp	r4, #0
 8010c94:	d04b      	beq.n	8010d2e <_malloc_r+0xea>
 8010c96:	6823      	ldr	r3, [r4, #0]
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	eb04 0903 	add.w	r9, r4, r3
 8010ca0:	f001 fe32 	bl	8012908 <_sbrk_r>
 8010ca4:	4581      	cmp	r9, r0
 8010ca6:	d142      	bne.n	8010d2e <_malloc_r+0xea>
 8010ca8:	6821      	ldr	r1, [r4, #0]
 8010caa:	1a6d      	subs	r5, r5, r1
 8010cac:	4629      	mov	r1, r5
 8010cae:	4630      	mov	r0, r6
 8010cb0:	f7ff ffa6 	bl	8010c00 <sbrk_aligned>
 8010cb4:	3001      	adds	r0, #1
 8010cb6:	d03a      	beq.n	8010d2e <_malloc_r+0xea>
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	442b      	add	r3, r5
 8010cbc:	6023      	str	r3, [r4, #0]
 8010cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8010cc2:	685a      	ldr	r2, [r3, #4]
 8010cc4:	bb62      	cbnz	r2, 8010d20 <_malloc_r+0xdc>
 8010cc6:	f8c8 7000 	str.w	r7, [r8]
 8010cca:	e00f      	b.n	8010cec <_malloc_r+0xa8>
 8010ccc:	6822      	ldr	r2, [r4, #0]
 8010cce:	1b52      	subs	r2, r2, r5
 8010cd0:	d420      	bmi.n	8010d14 <_malloc_r+0xd0>
 8010cd2:	2a0b      	cmp	r2, #11
 8010cd4:	d917      	bls.n	8010d06 <_malloc_r+0xc2>
 8010cd6:	1961      	adds	r1, r4, r5
 8010cd8:	42a3      	cmp	r3, r4
 8010cda:	6025      	str	r5, [r4, #0]
 8010cdc:	bf18      	it	ne
 8010cde:	6059      	strne	r1, [r3, #4]
 8010ce0:	6863      	ldr	r3, [r4, #4]
 8010ce2:	bf08      	it	eq
 8010ce4:	f8c8 1000 	streq.w	r1, [r8]
 8010ce8:	5162      	str	r2, [r4, r5]
 8010cea:	604b      	str	r3, [r1, #4]
 8010cec:	4630      	mov	r0, r6
 8010cee:	f000 f841 	bl	8010d74 <__malloc_unlock>
 8010cf2:	f104 000b 	add.w	r0, r4, #11
 8010cf6:	1d23      	adds	r3, r4, #4
 8010cf8:	f020 0007 	bic.w	r0, r0, #7
 8010cfc:	1ac2      	subs	r2, r0, r3
 8010cfe:	bf1c      	itt	ne
 8010d00:	1a1b      	subne	r3, r3, r0
 8010d02:	50a3      	strne	r3, [r4, r2]
 8010d04:	e7af      	b.n	8010c66 <_malloc_r+0x22>
 8010d06:	6862      	ldr	r2, [r4, #4]
 8010d08:	42a3      	cmp	r3, r4
 8010d0a:	bf0c      	ite	eq
 8010d0c:	f8c8 2000 	streq.w	r2, [r8]
 8010d10:	605a      	strne	r2, [r3, #4]
 8010d12:	e7eb      	b.n	8010cec <_malloc_r+0xa8>
 8010d14:	4623      	mov	r3, r4
 8010d16:	6864      	ldr	r4, [r4, #4]
 8010d18:	e7ae      	b.n	8010c78 <_malloc_r+0x34>
 8010d1a:	463c      	mov	r4, r7
 8010d1c:	687f      	ldr	r7, [r7, #4]
 8010d1e:	e7b6      	b.n	8010c8e <_malloc_r+0x4a>
 8010d20:	461a      	mov	r2, r3
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	42a3      	cmp	r3, r4
 8010d26:	d1fb      	bne.n	8010d20 <_malloc_r+0xdc>
 8010d28:	2300      	movs	r3, #0
 8010d2a:	6053      	str	r3, [r2, #4]
 8010d2c:	e7de      	b.n	8010cec <_malloc_r+0xa8>
 8010d2e:	230c      	movs	r3, #12
 8010d30:	6033      	str	r3, [r6, #0]
 8010d32:	4630      	mov	r0, r6
 8010d34:	f000 f81e 	bl	8010d74 <__malloc_unlock>
 8010d38:	e794      	b.n	8010c64 <_malloc_r+0x20>
 8010d3a:	6005      	str	r5, [r0, #0]
 8010d3c:	e7d6      	b.n	8010cec <_malloc_r+0xa8>
 8010d3e:	bf00      	nop
 8010d40:	20006f78 	.word	0x20006f78

08010d44 <__ascii_mbtowc>:
 8010d44:	b082      	sub	sp, #8
 8010d46:	b901      	cbnz	r1, 8010d4a <__ascii_mbtowc+0x6>
 8010d48:	a901      	add	r1, sp, #4
 8010d4a:	b142      	cbz	r2, 8010d5e <__ascii_mbtowc+0x1a>
 8010d4c:	b14b      	cbz	r3, 8010d62 <__ascii_mbtowc+0x1e>
 8010d4e:	7813      	ldrb	r3, [r2, #0]
 8010d50:	600b      	str	r3, [r1, #0]
 8010d52:	7812      	ldrb	r2, [r2, #0]
 8010d54:	1e10      	subs	r0, r2, #0
 8010d56:	bf18      	it	ne
 8010d58:	2001      	movne	r0, #1
 8010d5a:	b002      	add	sp, #8
 8010d5c:	4770      	bx	lr
 8010d5e:	4610      	mov	r0, r2
 8010d60:	e7fb      	b.n	8010d5a <__ascii_mbtowc+0x16>
 8010d62:	f06f 0001 	mvn.w	r0, #1
 8010d66:	e7f8      	b.n	8010d5a <__ascii_mbtowc+0x16>

08010d68 <__malloc_lock>:
 8010d68:	4801      	ldr	r0, [pc, #4]	@ (8010d70 <__malloc_lock+0x8>)
 8010d6a:	f7fe bccf 	b.w	800f70c <__retarget_lock_acquire_recursive>
 8010d6e:	bf00      	nop
 8010d70:	20006f72 	.word	0x20006f72

08010d74 <__malloc_unlock>:
 8010d74:	4801      	ldr	r0, [pc, #4]	@ (8010d7c <__malloc_unlock+0x8>)
 8010d76:	f7fe bccb 	b.w	800f710 <__retarget_lock_release_recursive>
 8010d7a:	bf00      	nop
 8010d7c:	20006f72 	.word	0x20006f72

08010d80 <_Balloc>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	69c6      	ldr	r6, [r0, #28]
 8010d84:	4604      	mov	r4, r0
 8010d86:	460d      	mov	r5, r1
 8010d88:	b976      	cbnz	r6, 8010da8 <_Balloc+0x28>
 8010d8a:	2010      	movs	r0, #16
 8010d8c:	f7ff ff28 	bl	8010be0 <malloc>
 8010d90:	4602      	mov	r2, r0
 8010d92:	61e0      	str	r0, [r4, #28]
 8010d94:	b920      	cbnz	r0, 8010da0 <_Balloc+0x20>
 8010d96:	4b18      	ldr	r3, [pc, #96]	@ (8010df8 <_Balloc+0x78>)
 8010d98:	4818      	ldr	r0, [pc, #96]	@ (8010dfc <_Balloc+0x7c>)
 8010d9a:	216b      	movs	r1, #107	@ 0x6b
 8010d9c:	f7fe fcd8 	bl	800f750 <__assert_func>
 8010da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010da4:	6006      	str	r6, [r0, #0]
 8010da6:	60c6      	str	r6, [r0, #12]
 8010da8:	69e6      	ldr	r6, [r4, #28]
 8010daa:	68f3      	ldr	r3, [r6, #12]
 8010dac:	b183      	cbz	r3, 8010dd0 <_Balloc+0x50>
 8010dae:	69e3      	ldr	r3, [r4, #28]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010db6:	b9b8      	cbnz	r0, 8010de8 <_Balloc+0x68>
 8010db8:	2101      	movs	r1, #1
 8010dba:	fa01 f605 	lsl.w	r6, r1, r5
 8010dbe:	1d72      	adds	r2, r6, #5
 8010dc0:	0092      	lsls	r2, r2, #2
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f001 fdb7 	bl	8012936 <_calloc_r>
 8010dc8:	b160      	cbz	r0, 8010de4 <_Balloc+0x64>
 8010dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010dce:	e00e      	b.n	8010dee <_Balloc+0x6e>
 8010dd0:	2221      	movs	r2, #33	@ 0x21
 8010dd2:	2104      	movs	r1, #4
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f001 fdae 	bl	8012936 <_calloc_r>
 8010dda:	69e3      	ldr	r3, [r4, #28]
 8010ddc:	60f0      	str	r0, [r6, #12]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1e4      	bne.n	8010dae <_Balloc+0x2e>
 8010de4:	2000      	movs	r0, #0
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	6802      	ldr	r2, [r0, #0]
 8010dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dee:	2300      	movs	r3, #0
 8010df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010df4:	e7f7      	b.n	8010de6 <_Balloc+0x66>
 8010df6:	bf00      	nop
 8010df8:	080135c0 	.word	0x080135c0
 8010dfc:	080137f2 	.word	0x080137f2

08010e00 <_Bfree>:
 8010e00:	b570      	push	{r4, r5, r6, lr}
 8010e02:	69c6      	ldr	r6, [r0, #28]
 8010e04:	4605      	mov	r5, r0
 8010e06:	460c      	mov	r4, r1
 8010e08:	b976      	cbnz	r6, 8010e28 <_Bfree+0x28>
 8010e0a:	2010      	movs	r0, #16
 8010e0c:	f7ff fee8 	bl	8010be0 <malloc>
 8010e10:	4602      	mov	r2, r0
 8010e12:	61e8      	str	r0, [r5, #28]
 8010e14:	b920      	cbnz	r0, 8010e20 <_Bfree+0x20>
 8010e16:	4b09      	ldr	r3, [pc, #36]	@ (8010e3c <_Bfree+0x3c>)
 8010e18:	4809      	ldr	r0, [pc, #36]	@ (8010e40 <_Bfree+0x40>)
 8010e1a:	218f      	movs	r1, #143	@ 0x8f
 8010e1c:	f7fe fc98 	bl	800f750 <__assert_func>
 8010e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e24:	6006      	str	r6, [r0, #0]
 8010e26:	60c6      	str	r6, [r0, #12]
 8010e28:	b13c      	cbz	r4, 8010e3a <_Bfree+0x3a>
 8010e2a:	69eb      	ldr	r3, [r5, #28]
 8010e2c:	6862      	ldr	r2, [r4, #4]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e34:	6021      	str	r1, [r4, #0]
 8010e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	080135c0 	.word	0x080135c0
 8010e40:	080137f2 	.word	0x080137f2

08010e44 <__multadd>:
 8010e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e48:	690d      	ldr	r5, [r1, #16]
 8010e4a:	4607      	mov	r7, r0
 8010e4c:	460c      	mov	r4, r1
 8010e4e:	461e      	mov	r6, r3
 8010e50:	f101 0c14 	add.w	ip, r1, #20
 8010e54:	2000      	movs	r0, #0
 8010e56:	f8dc 3000 	ldr.w	r3, [ip]
 8010e5a:	b299      	uxth	r1, r3
 8010e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8010e60:	0c1e      	lsrs	r6, r3, #16
 8010e62:	0c0b      	lsrs	r3, r1, #16
 8010e64:	fb02 3306 	mla	r3, r2, r6, r3
 8010e68:	b289      	uxth	r1, r1
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e70:	4285      	cmp	r5, r0
 8010e72:	f84c 1b04 	str.w	r1, [ip], #4
 8010e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e7a:	dcec      	bgt.n	8010e56 <__multadd+0x12>
 8010e7c:	b30e      	cbz	r6, 8010ec2 <__multadd+0x7e>
 8010e7e:	68a3      	ldr	r3, [r4, #8]
 8010e80:	42ab      	cmp	r3, r5
 8010e82:	dc19      	bgt.n	8010eb8 <__multadd+0x74>
 8010e84:	6861      	ldr	r1, [r4, #4]
 8010e86:	4638      	mov	r0, r7
 8010e88:	3101      	adds	r1, #1
 8010e8a:	f7ff ff79 	bl	8010d80 <_Balloc>
 8010e8e:	4680      	mov	r8, r0
 8010e90:	b928      	cbnz	r0, 8010e9e <__multadd+0x5a>
 8010e92:	4602      	mov	r2, r0
 8010e94:	4b0c      	ldr	r3, [pc, #48]	@ (8010ec8 <__multadd+0x84>)
 8010e96:	480d      	ldr	r0, [pc, #52]	@ (8010ecc <__multadd+0x88>)
 8010e98:	21ba      	movs	r1, #186	@ 0xba
 8010e9a:	f7fe fc59 	bl	800f750 <__assert_func>
 8010e9e:	6922      	ldr	r2, [r4, #16]
 8010ea0:	3202      	adds	r2, #2
 8010ea2:	f104 010c 	add.w	r1, r4, #12
 8010ea6:	0092      	lsls	r2, r2, #2
 8010ea8:	300c      	adds	r0, #12
 8010eaa:	f7fe fc3a 	bl	800f722 <memcpy>
 8010eae:	4621      	mov	r1, r4
 8010eb0:	4638      	mov	r0, r7
 8010eb2:	f7ff ffa5 	bl	8010e00 <_Bfree>
 8010eb6:	4644      	mov	r4, r8
 8010eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ebc:	3501      	adds	r5, #1
 8010ebe:	615e      	str	r6, [r3, #20]
 8010ec0:	6125      	str	r5, [r4, #16]
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec8:	08013781 	.word	0x08013781
 8010ecc:	080137f2 	.word	0x080137f2

08010ed0 <__s2b>:
 8010ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ed4:	460c      	mov	r4, r1
 8010ed6:	4615      	mov	r5, r2
 8010ed8:	461f      	mov	r7, r3
 8010eda:	2209      	movs	r2, #9
 8010edc:	3308      	adds	r3, #8
 8010ede:	4606      	mov	r6, r0
 8010ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	db09      	blt.n	8010f00 <__s2b+0x30>
 8010eec:	4630      	mov	r0, r6
 8010eee:	f7ff ff47 	bl	8010d80 <_Balloc>
 8010ef2:	b940      	cbnz	r0, 8010f06 <__s2b+0x36>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	4b19      	ldr	r3, [pc, #100]	@ (8010f5c <__s2b+0x8c>)
 8010ef8:	4819      	ldr	r0, [pc, #100]	@ (8010f60 <__s2b+0x90>)
 8010efa:	21d3      	movs	r1, #211	@ 0xd3
 8010efc:	f7fe fc28 	bl	800f750 <__assert_func>
 8010f00:	0052      	lsls	r2, r2, #1
 8010f02:	3101      	adds	r1, #1
 8010f04:	e7f0      	b.n	8010ee8 <__s2b+0x18>
 8010f06:	9b08      	ldr	r3, [sp, #32]
 8010f08:	6143      	str	r3, [r0, #20]
 8010f0a:	2d09      	cmp	r5, #9
 8010f0c:	f04f 0301 	mov.w	r3, #1
 8010f10:	6103      	str	r3, [r0, #16]
 8010f12:	dd16      	ble.n	8010f42 <__s2b+0x72>
 8010f14:	f104 0909 	add.w	r9, r4, #9
 8010f18:	46c8      	mov	r8, r9
 8010f1a:	442c      	add	r4, r5
 8010f1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f20:	4601      	mov	r1, r0
 8010f22:	3b30      	subs	r3, #48	@ 0x30
 8010f24:	220a      	movs	r2, #10
 8010f26:	4630      	mov	r0, r6
 8010f28:	f7ff ff8c 	bl	8010e44 <__multadd>
 8010f2c:	45a0      	cmp	r8, r4
 8010f2e:	d1f5      	bne.n	8010f1c <__s2b+0x4c>
 8010f30:	f1a5 0408 	sub.w	r4, r5, #8
 8010f34:	444c      	add	r4, r9
 8010f36:	1b2d      	subs	r5, r5, r4
 8010f38:	1963      	adds	r3, r4, r5
 8010f3a:	42bb      	cmp	r3, r7
 8010f3c:	db04      	blt.n	8010f48 <__s2b+0x78>
 8010f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f42:	340a      	adds	r4, #10
 8010f44:	2509      	movs	r5, #9
 8010f46:	e7f6      	b.n	8010f36 <__s2b+0x66>
 8010f48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f4c:	4601      	mov	r1, r0
 8010f4e:	3b30      	subs	r3, #48	@ 0x30
 8010f50:	220a      	movs	r2, #10
 8010f52:	4630      	mov	r0, r6
 8010f54:	f7ff ff76 	bl	8010e44 <__multadd>
 8010f58:	e7ee      	b.n	8010f38 <__s2b+0x68>
 8010f5a:	bf00      	nop
 8010f5c:	08013781 	.word	0x08013781
 8010f60:	080137f2 	.word	0x080137f2

08010f64 <__hi0bits>:
 8010f64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f68:	4603      	mov	r3, r0
 8010f6a:	bf36      	itet	cc
 8010f6c:	0403      	lslcc	r3, r0, #16
 8010f6e:	2000      	movcs	r0, #0
 8010f70:	2010      	movcc	r0, #16
 8010f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f76:	bf3c      	itt	cc
 8010f78:	021b      	lslcc	r3, r3, #8
 8010f7a:	3008      	addcc	r0, #8
 8010f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f80:	bf3c      	itt	cc
 8010f82:	011b      	lslcc	r3, r3, #4
 8010f84:	3004      	addcc	r0, #4
 8010f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f8a:	bf3c      	itt	cc
 8010f8c:	009b      	lslcc	r3, r3, #2
 8010f8e:	3002      	addcc	r0, #2
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	db05      	blt.n	8010fa0 <__hi0bits+0x3c>
 8010f94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f98:	f100 0001 	add.w	r0, r0, #1
 8010f9c:	bf08      	it	eq
 8010f9e:	2020      	moveq	r0, #32
 8010fa0:	4770      	bx	lr

08010fa2 <__lo0bits>:
 8010fa2:	6803      	ldr	r3, [r0, #0]
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	f013 0007 	ands.w	r0, r3, #7
 8010faa:	d00b      	beq.n	8010fc4 <__lo0bits+0x22>
 8010fac:	07d9      	lsls	r1, r3, #31
 8010fae:	d421      	bmi.n	8010ff4 <__lo0bits+0x52>
 8010fb0:	0798      	lsls	r0, r3, #30
 8010fb2:	bf49      	itett	mi
 8010fb4:	085b      	lsrmi	r3, r3, #1
 8010fb6:	089b      	lsrpl	r3, r3, #2
 8010fb8:	2001      	movmi	r0, #1
 8010fba:	6013      	strmi	r3, [r2, #0]
 8010fbc:	bf5c      	itt	pl
 8010fbe:	6013      	strpl	r3, [r2, #0]
 8010fc0:	2002      	movpl	r0, #2
 8010fc2:	4770      	bx	lr
 8010fc4:	b299      	uxth	r1, r3
 8010fc6:	b909      	cbnz	r1, 8010fcc <__lo0bits+0x2a>
 8010fc8:	0c1b      	lsrs	r3, r3, #16
 8010fca:	2010      	movs	r0, #16
 8010fcc:	b2d9      	uxtb	r1, r3
 8010fce:	b909      	cbnz	r1, 8010fd4 <__lo0bits+0x32>
 8010fd0:	3008      	adds	r0, #8
 8010fd2:	0a1b      	lsrs	r3, r3, #8
 8010fd4:	0719      	lsls	r1, r3, #28
 8010fd6:	bf04      	itt	eq
 8010fd8:	091b      	lsreq	r3, r3, #4
 8010fda:	3004      	addeq	r0, #4
 8010fdc:	0799      	lsls	r1, r3, #30
 8010fde:	bf04      	itt	eq
 8010fe0:	089b      	lsreq	r3, r3, #2
 8010fe2:	3002      	addeq	r0, #2
 8010fe4:	07d9      	lsls	r1, r3, #31
 8010fe6:	d403      	bmi.n	8010ff0 <__lo0bits+0x4e>
 8010fe8:	085b      	lsrs	r3, r3, #1
 8010fea:	f100 0001 	add.w	r0, r0, #1
 8010fee:	d003      	beq.n	8010ff8 <__lo0bits+0x56>
 8010ff0:	6013      	str	r3, [r2, #0]
 8010ff2:	4770      	bx	lr
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	4770      	bx	lr
 8010ff8:	2020      	movs	r0, #32
 8010ffa:	4770      	bx	lr

08010ffc <__i2b>:
 8010ffc:	b510      	push	{r4, lr}
 8010ffe:	460c      	mov	r4, r1
 8011000:	2101      	movs	r1, #1
 8011002:	f7ff febd 	bl	8010d80 <_Balloc>
 8011006:	4602      	mov	r2, r0
 8011008:	b928      	cbnz	r0, 8011016 <__i2b+0x1a>
 801100a:	4b05      	ldr	r3, [pc, #20]	@ (8011020 <__i2b+0x24>)
 801100c:	4805      	ldr	r0, [pc, #20]	@ (8011024 <__i2b+0x28>)
 801100e:	f240 1145 	movw	r1, #325	@ 0x145
 8011012:	f7fe fb9d 	bl	800f750 <__assert_func>
 8011016:	2301      	movs	r3, #1
 8011018:	6144      	str	r4, [r0, #20]
 801101a:	6103      	str	r3, [r0, #16]
 801101c:	bd10      	pop	{r4, pc}
 801101e:	bf00      	nop
 8011020:	08013781 	.word	0x08013781
 8011024:	080137f2 	.word	0x080137f2

08011028 <__multiply>:
 8011028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801102c:	4617      	mov	r7, r2
 801102e:	690a      	ldr	r2, [r1, #16]
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	429a      	cmp	r2, r3
 8011034:	bfa8      	it	ge
 8011036:	463b      	movge	r3, r7
 8011038:	4689      	mov	r9, r1
 801103a:	bfa4      	itt	ge
 801103c:	460f      	movge	r7, r1
 801103e:	4699      	movge	r9, r3
 8011040:	693d      	ldr	r5, [r7, #16]
 8011042:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	6879      	ldr	r1, [r7, #4]
 801104a:	eb05 060a 	add.w	r6, r5, sl
 801104e:	42b3      	cmp	r3, r6
 8011050:	b085      	sub	sp, #20
 8011052:	bfb8      	it	lt
 8011054:	3101      	addlt	r1, #1
 8011056:	f7ff fe93 	bl	8010d80 <_Balloc>
 801105a:	b930      	cbnz	r0, 801106a <__multiply+0x42>
 801105c:	4602      	mov	r2, r0
 801105e:	4b41      	ldr	r3, [pc, #260]	@ (8011164 <__multiply+0x13c>)
 8011060:	4841      	ldr	r0, [pc, #260]	@ (8011168 <__multiply+0x140>)
 8011062:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011066:	f7fe fb73 	bl	800f750 <__assert_func>
 801106a:	f100 0414 	add.w	r4, r0, #20
 801106e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011072:	4623      	mov	r3, r4
 8011074:	2200      	movs	r2, #0
 8011076:	4573      	cmp	r3, lr
 8011078:	d320      	bcc.n	80110bc <__multiply+0x94>
 801107a:	f107 0814 	add.w	r8, r7, #20
 801107e:	f109 0114 	add.w	r1, r9, #20
 8011082:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011086:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801108a:	9302      	str	r3, [sp, #8]
 801108c:	1beb      	subs	r3, r5, r7
 801108e:	3b15      	subs	r3, #21
 8011090:	f023 0303 	bic.w	r3, r3, #3
 8011094:	3304      	adds	r3, #4
 8011096:	3715      	adds	r7, #21
 8011098:	42bd      	cmp	r5, r7
 801109a:	bf38      	it	cc
 801109c:	2304      	movcc	r3, #4
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	9b02      	ldr	r3, [sp, #8]
 80110a2:	9103      	str	r1, [sp, #12]
 80110a4:	428b      	cmp	r3, r1
 80110a6:	d80c      	bhi.n	80110c2 <__multiply+0x9a>
 80110a8:	2e00      	cmp	r6, #0
 80110aa:	dd03      	ble.n	80110b4 <__multiply+0x8c>
 80110ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d055      	beq.n	8011160 <__multiply+0x138>
 80110b4:	6106      	str	r6, [r0, #16]
 80110b6:	b005      	add	sp, #20
 80110b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110bc:	f843 2b04 	str.w	r2, [r3], #4
 80110c0:	e7d9      	b.n	8011076 <__multiply+0x4e>
 80110c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80110c6:	f1ba 0f00 	cmp.w	sl, #0
 80110ca:	d01f      	beq.n	801110c <__multiply+0xe4>
 80110cc:	46c4      	mov	ip, r8
 80110ce:	46a1      	mov	r9, r4
 80110d0:	2700      	movs	r7, #0
 80110d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80110d6:	f8d9 3000 	ldr.w	r3, [r9]
 80110da:	fa1f fb82 	uxth.w	fp, r2
 80110de:	b29b      	uxth	r3, r3
 80110e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80110e4:	443b      	add	r3, r7
 80110e6:	f8d9 7000 	ldr.w	r7, [r9]
 80110ea:	0c12      	lsrs	r2, r2, #16
 80110ec:	0c3f      	lsrs	r7, r7, #16
 80110ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80110f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110fc:	4565      	cmp	r5, ip
 80110fe:	f849 3b04 	str.w	r3, [r9], #4
 8011102:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011106:	d8e4      	bhi.n	80110d2 <__multiply+0xaa>
 8011108:	9b01      	ldr	r3, [sp, #4]
 801110a:	50e7      	str	r7, [r4, r3]
 801110c:	9b03      	ldr	r3, [sp, #12]
 801110e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011112:	3104      	adds	r1, #4
 8011114:	f1b9 0f00 	cmp.w	r9, #0
 8011118:	d020      	beq.n	801115c <__multiply+0x134>
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	4647      	mov	r7, r8
 801111e:	46a4      	mov	ip, r4
 8011120:	f04f 0a00 	mov.w	sl, #0
 8011124:	f8b7 b000 	ldrh.w	fp, [r7]
 8011128:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801112c:	fb09 220b 	mla	r2, r9, fp, r2
 8011130:	4452      	add	r2, sl
 8011132:	b29b      	uxth	r3, r3
 8011134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011138:	f84c 3b04 	str.w	r3, [ip], #4
 801113c:	f857 3b04 	ldr.w	r3, [r7], #4
 8011140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011144:	f8bc 3000 	ldrh.w	r3, [ip]
 8011148:	fb09 330a 	mla	r3, r9, sl, r3
 801114c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011150:	42bd      	cmp	r5, r7
 8011152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011156:	d8e5      	bhi.n	8011124 <__multiply+0xfc>
 8011158:	9a01      	ldr	r2, [sp, #4]
 801115a:	50a3      	str	r3, [r4, r2]
 801115c:	3404      	adds	r4, #4
 801115e:	e79f      	b.n	80110a0 <__multiply+0x78>
 8011160:	3e01      	subs	r6, #1
 8011162:	e7a1      	b.n	80110a8 <__multiply+0x80>
 8011164:	08013781 	.word	0x08013781
 8011168:	080137f2 	.word	0x080137f2

0801116c <__pow5mult>:
 801116c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011170:	4615      	mov	r5, r2
 8011172:	f012 0203 	ands.w	r2, r2, #3
 8011176:	4607      	mov	r7, r0
 8011178:	460e      	mov	r6, r1
 801117a:	d007      	beq.n	801118c <__pow5mult+0x20>
 801117c:	4c25      	ldr	r4, [pc, #148]	@ (8011214 <__pow5mult+0xa8>)
 801117e:	3a01      	subs	r2, #1
 8011180:	2300      	movs	r3, #0
 8011182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011186:	f7ff fe5d 	bl	8010e44 <__multadd>
 801118a:	4606      	mov	r6, r0
 801118c:	10ad      	asrs	r5, r5, #2
 801118e:	d03d      	beq.n	801120c <__pow5mult+0xa0>
 8011190:	69fc      	ldr	r4, [r7, #28]
 8011192:	b97c      	cbnz	r4, 80111b4 <__pow5mult+0x48>
 8011194:	2010      	movs	r0, #16
 8011196:	f7ff fd23 	bl	8010be0 <malloc>
 801119a:	4602      	mov	r2, r0
 801119c:	61f8      	str	r0, [r7, #28]
 801119e:	b928      	cbnz	r0, 80111ac <__pow5mult+0x40>
 80111a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011218 <__pow5mult+0xac>)
 80111a2:	481e      	ldr	r0, [pc, #120]	@ (801121c <__pow5mult+0xb0>)
 80111a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80111a8:	f7fe fad2 	bl	800f750 <__assert_func>
 80111ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111b0:	6004      	str	r4, [r0, #0]
 80111b2:	60c4      	str	r4, [r0, #12]
 80111b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80111b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111bc:	b94c      	cbnz	r4, 80111d2 <__pow5mult+0x66>
 80111be:	f240 2171 	movw	r1, #625	@ 0x271
 80111c2:	4638      	mov	r0, r7
 80111c4:	f7ff ff1a 	bl	8010ffc <__i2b>
 80111c8:	2300      	movs	r3, #0
 80111ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80111ce:	4604      	mov	r4, r0
 80111d0:	6003      	str	r3, [r0, #0]
 80111d2:	f04f 0900 	mov.w	r9, #0
 80111d6:	07eb      	lsls	r3, r5, #31
 80111d8:	d50a      	bpl.n	80111f0 <__pow5mult+0x84>
 80111da:	4631      	mov	r1, r6
 80111dc:	4622      	mov	r2, r4
 80111de:	4638      	mov	r0, r7
 80111e0:	f7ff ff22 	bl	8011028 <__multiply>
 80111e4:	4631      	mov	r1, r6
 80111e6:	4680      	mov	r8, r0
 80111e8:	4638      	mov	r0, r7
 80111ea:	f7ff fe09 	bl	8010e00 <_Bfree>
 80111ee:	4646      	mov	r6, r8
 80111f0:	106d      	asrs	r5, r5, #1
 80111f2:	d00b      	beq.n	801120c <__pow5mult+0xa0>
 80111f4:	6820      	ldr	r0, [r4, #0]
 80111f6:	b938      	cbnz	r0, 8011208 <__pow5mult+0x9c>
 80111f8:	4622      	mov	r2, r4
 80111fa:	4621      	mov	r1, r4
 80111fc:	4638      	mov	r0, r7
 80111fe:	f7ff ff13 	bl	8011028 <__multiply>
 8011202:	6020      	str	r0, [r4, #0]
 8011204:	f8c0 9000 	str.w	r9, [r0]
 8011208:	4604      	mov	r4, r0
 801120a:	e7e4      	b.n	80111d6 <__pow5mult+0x6a>
 801120c:	4630      	mov	r0, r6
 801120e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011212:	bf00      	nop
 8011214:	08013b04 	.word	0x08013b04
 8011218:	080135c0 	.word	0x080135c0
 801121c:	080137f2 	.word	0x080137f2

08011220 <__lshift>:
 8011220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011224:	460c      	mov	r4, r1
 8011226:	6849      	ldr	r1, [r1, #4]
 8011228:	6923      	ldr	r3, [r4, #16]
 801122a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801122e:	68a3      	ldr	r3, [r4, #8]
 8011230:	4607      	mov	r7, r0
 8011232:	4691      	mov	r9, r2
 8011234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011238:	f108 0601 	add.w	r6, r8, #1
 801123c:	42b3      	cmp	r3, r6
 801123e:	db0b      	blt.n	8011258 <__lshift+0x38>
 8011240:	4638      	mov	r0, r7
 8011242:	f7ff fd9d 	bl	8010d80 <_Balloc>
 8011246:	4605      	mov	r5, r0
 8011248:	b948      	cbnz	r0, 801125e <__lshift+0x3e>
 801124a:	4602      	mov	r2, r0
 801124c:	4b28      	ldr	r3, [pc, #160]	@ (80112f0 <__lshift+0xd0>)
 801124e:	4829      	ldr	r0, [pc, #164]	@ (80112f4 <__lshift+0xd4>)
 8011250:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011254:	f7fe fa7c 	bl	800f750 <__assert_func>
 8011258:	3101      	adds	r1, #1
 801125a:	005b      	lsls	r3, r3, #1
 801125c:	e7ee      	b.n	801123c <__lshift+0x1c>
 801125e:	2300      	movs	r3, #0
 8011260:	f100 0114 	add.w	r1, r0, #20
 8011264:	f100 0210 	add.w	r2, r0, #16
 8011268:	4618      	mov	r0, r3
 801126a:	4553      	cmp	r3, sl
 801126c:	db33      	blt.n	80112d6 <__lshift+0xb6>
 801126e:	6920      	ldr	r0, [r4, #16]
 8011270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011274:	f104 0314 	add.w	r3, r4, #20
 8011278:	f019 091f 	ands.w	r9, r9, #31
 801127c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011280:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011284:	d02b      	beq.n	80112de <__lshift+0xbe>
 8011286:	f1c9 0e20 	rsb	lr, r9, #32
 801128a:	468a      	mov	sl, r1
 801128c:	2200      	movs	r2, #0
 801128e:	6818      	ldr	r0, [r3, #0]
 8011290:	fa00 f009 	lsl.w	r0, r0, r9
 8011294:	4310      	orrs	r0, r2
 8011296:	f84a 0b04 	str.w	r0, [sl], #4
 801129a:	f853 2b04 	ldr.w	r2, [r3], #4
 801129e:	459c      	cmp	ip, r3
 80112a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80112a4:	d8f3      	bhi.n	801128e <__lshift+0x6e>
 80112a6:	ebac 0304 	sub.w	r3, ip, r4
 80112aa:	3b15      	subs	r3, #21
 80112ac:	f023 0303 	bic.w	r3, r3, #3
 80112b0:	3304      	adds	r3, #4
 80112b2:	f104 0015 	add.w	r0, r4, #21
 80112b6:	4560      	cmp	r0, ip
 80112b8:	bf88      	it	hi
 80112ba:	2304      	movhi	r3, #4
 80112bc:	50ca      	str	r2, [r1, r3]
 80112be:	b10a      	cbz	r2, 80112c4 <__lshift+0xa4>
 80112c0:	f108 0602 	add.w	r6, r8, #2
 80112c4:	3e01      	subs	r6, #1
 80112c6:	4638      	mov	r0, r7
 80112c8:	612e      	str	r6, [r5, #16]
 80112ca:	4621      	mov	r1, r4
 80112cc:	f7ff fd98 	bl	8010e00 <_Bfree>
 80112d0:	4628      	mov	r0, r5
 80112d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80112da:	3301      	adds	r3, #1
 80112dc:	e7c5      	b.n	801126a <__lshift+0x4a>
 80112de:	3904      	subs	r1, #4
 80112e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80112e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80112e8:	459c      	cmp	ip, r3
 80112ea:	d8f9      	bhi.n	80112e0 <__lshift+0xc0>
 80112ec:	e7ea      	b.n	80112c4 <__lshift+0xa4>
 80112ee:	bf00      	nop
 80112f0:	08013781 	.word	0x08013781
 80112f4:	080137f2 	.word	0x080137f2

080112f8 <__mcmp>:
 80112f8:	690a      	ldr	r2, [r1, #16]
 80112fa:	4603      	mov	r3, r0
 80112fc:	6900      	ldr	r0, [r0, #16]
 80112fe:	1a80      	subs	r0, r0, r2
 8011300:	b530      	push	{r4, r5, lr}
 8011302:	d10e      	bne.n	8011322 <__mcmp+0x2a>
 8011304:	3314      	adds	r3, #20
 8011306:	3114      	adds	r1, #20
 8011308:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801130c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011310:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011314:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011318:	4295      	cmp	r5, r2
 801131a:	d003      	beq.n	8011324 <__mcmp+0x2c>
 801131c:	d205      	bcs.n	801132a <__mcmp+0x32>
 801131e:	f04f 30ff 	mov.w	r0, #4294967295
 8011322:	bd30      	pop	{r4, r5, pc}
 8011324:	42a3      	cmp	r3, r4
 8011326:	d3f3      	bcc.n	8011310 <__mcmp+0x18>
 8011328:	e7fb      	b.n	8011322 <__mcmp+0x2a>
 801132a:	2001      	movs	r0, #1
 801132c:	e7f9      	b.n	8011322 <__mcmp+0x2a>
	...

08011330 <__mdiff>:
 8011330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	4689      	mov	r9, r1
 8011336:	4606      	mov	r6, r0
 8011338:	4611      	mov	r1, r2
 801133a:	4648      	mov	r0, r9
 801133c:	4614      	mov	r4, r2
 801133e:	f7ff ffdb 	bl	80112f8 <__mcmp>
 8011342:	1e05      	subs	r5, r0, #0
 8011344:	d112      	bne.n	801136c <__mdiff+0x3c>
 8011346:	4629      	mov	r1, r5
 8011348:	4630      	mov	r0, r6
 801134a:	f7ff fd19 	bl	8010d80 <_Balloc>
 801134e:	4602      	mov	r2, r0
 8011350:	b928      	cbnz	r0, 801135e <__mdiff+0x2e>
 8011352:	4b3f      	ldr	r3, [pc, #252]	@ (8011450 <__mdiff+0x120>)
 8011354:	f240 2137 	movw	r1, #567	@ 0x237
 8011358:	483e      	ldr	r0, [pc, #248]	@ (8011454 <__mdiff+0x124>)
 801135a:	f7fe f9f9 	bl	800f750 <__assert_func>
 801135e:	2301      	movs	r3, #1
 8011360:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011364:	4610      	mov	r0, r2
 8011366:	b003      	add	sp, #12
 8011368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801136c:	bfbc      	itt	lt
 801136e:	464b      	movlt	r3, r9
 8011370:	46a1      	movlt	r9, r4
 8011372:	4630      	mov	r0, r6
 8011374:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011378:	bfba      	itte	lt
 801137a:	461c      	movlt	r4, r3
 801137c:	2501      	movlt	r5, #1
 801137e:	2500      	movge	r5, #0
 8011380:	f7ff fcfe 	bl	8010d80 <_Balloc>
 8011384:	4602      	mov	r2, r0
 8011386:	b918      	cbnz	r0, 8011390 <__mdiff+0x60>
 8011388:	4b31      	ldr	r3, [pc, #196]	@ (8011450 <__mdiff+0x120>)
 801138a:	f240 2145 	movw	r1, #581	@ 0x245
 801138e:	e7e3      	b.n	8011358 <__mdiff+0x28>
 8011390:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011394:	6926      	ldr	r6, [r4, #16]
 8011396:	60c5      	str	r5, [r0, #12]
 8011398:	f109 0310 	add.w	r3, r9, #16
 801139c:	f109 0514 	add.w	r5, r9, #20
 80113a0:	f104 0e14 	add.w	lr, r4, #20
 80113a4:	f100 0b14 	add.w	fp, r0, #20
 80113a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113b0:	9301      	str	r3, [sp, #4]
 80113b2:	46d9      	mov	r9, fp
 80113b4:	f04f 0c00 	mov.w	ip, #0
 80113b8:	9b01      	ldr	r3, [sp, #4]
 80113ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80113be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	fa1f f38a 	uxth.w	r3, sl
 80113c8:	4619      	mov	r1, r3
 80113ca:	b283      	uxth	r3, r0
 80113cc:	1acb      	subs	r3, r1, r3
 80113ce:	0c00      	lsrs	r0, r0, #16
 80113d0:	4463      	add	r3, ip
 80113d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80113d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80113da:	b29b      	uxth	r3, r3
 80113dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80113e0:	4576      	cmp	r6, lr
 80113e2:	f849 3b04 	str.w	r3, [r9], #4
 80113e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113ea:	d8e5      	bhi.n	80113b8 <__mdiff+0x88>
 80113ec:	1b33      	subs	r3, r6, r4
 80113ee:	3b15      	subs	r3, #21
 80113f0:	f023 0303 	bic.w	r3, r3, #3
 80113f4:	3415      	adds	r4, #21
 80113f6:	3304      	adds	r3, #4
 80113f8:	42a6      	cmp	r6, r4
 80113fa:	bf38      	it	cc
 80113fc:	2304      	movcc	r3, #4
 80113fe:	441d      	add	r5, r3
 8011400:	445b      	add	r3, fp
 8011402:	461e      	mov	r6, r3
 8011404:	462c      	mov	r4, r5
 8011406:	4544      	cmp	r4, r8
 8011408:	d30e      	bcc.n	8011428 <__mdiff+0xf8>
 801140a:	f108 0103 	add.w	r1, r8, #3
 801140e:	1b49      	subs	r1, r1, r5
 8011410:	f021 0103 	bic.w	r1, r1, #3
 8011414:	3d03      	subs	r5, #3
 8011416:	45a8      	cmp	r8, r5
 8011418:	bf38      	it	cc
 801141a:	2100      	movcc	r1, #0
 801141c:	440b      	add	r3, r1
 801141e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011422:	b191      	cbz	r1, 801144a <__mdiff+0x11a>
 8011424:	6117      	str	r7, [r2, #16]
 8011426:	e79d      	b.n	8011364 <__mdiff+0x34>
 8011428:	f854 1b04 	ldr.w	r1, [r4], #4
 801142c:	46e6      	mov	lr, ip
 801142e:	0c08      	lsrs	r0, r1, #16
 8011430:	fa1c fc81 	uxtah	ip, ip, r1
 8011434:	4471      	add	r1, lr
 8011436:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801143a:	b289      	uxth	r1, r1
 801143c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011440:	f846 1b04 	str.w	r1, [r6], #4
 8011444:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011448:	e7dd      	b.n	8011406 <__mdiff+0xd6>
 801144a:	3f01      	subs	r7, #1
 801144c:	e7e7      	b.n	801141e <__mdiff+0xee>
 801144e:	bf00      	nop
 8011450:	08013781 	.word	0x08013781
 8011454:	080137f2 	.word	0x080137f2

08011458 <__ulp>:
 8011458:	b082      	sub	sp, #8
 801145a:	ed8d 0b00 	vstr	d0, [sp]
 801145e:	9a01      	ldr	r2, [sp, #4]
 8011460:	4b0f      	ldr	r3, [pc, #60]	@ (80114a0 <__ulp+0x48>)
 8011462:	4013      	ands	r3, r2
 8011464:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011468:	2b00      	cmp	r3, #0
 801146a:	dc08      	bgt.n	801147e <__ulp+0x26>
 801146c:	425b      	negs	r3, r3
 801146e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011472:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011476:	da04      	bge.n	8011482 <__ulp+0x2a>
 8011478:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801147c:	4113      	asrs	r3, r2
 801147e:	2200      	movs	r2, #0
 8011480:	e008      	b.n	8011494 <__ulp+0x3c>
 8011482:	f1a2 0314 	sub.w	r3, r2, #20
 8011486:	2b1e      	cmp	r3, #30
 8011488:	bfda      	itte	le
 801148a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801148e:	40da      	lsrle	r2, r3
 8011490:	2201      	movgt	r2, #1
 8011492:	2300      	movs	r3, #0
 8011494:	4619      	mov	r1, r3
 8011496:	4610      	mov	r0, r2
 8011498:	ec41 0b10 	vmov	d0, r0, r1
 801149c:	b002      	add	sp, #8
 801149e:	4770      	bx	lr
 80114a0:	7ff00000 	.word	0x7ff00000

080114a4 <__b2d>:
 80114a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a8:	6906      	ldr	r6, [r0, #16]
 80114aa:	f100 0814 	add.w	r8, r0, #20
 80114ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80114b2:	1f37      	subs	r7, r6, #4
 80114b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80114b8:	4610      	mov	r0, r2
 80114ba:	f7ff fd53 	bl	8010f64 <__hi0bits>
 80114be:	f1c0 0320 	rsb	r3, r0, #32
 80114c2:	280a      	cmp	r0, #10
 80114c4:	600b      	str	r3, [r1, #0]
 80114c6:	491b      	ldr	r1, [pc, #108]	@ (8011534 <__b2d+0x90>)
 80114c8:	dc15      	bgt.n	80114f6 <__b2d+0x52>
 80114ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80114ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80114d2:	45b8      	cmp	r8, r7
 80114d4:	ea43 0501 	orr.w	r5, r3, r1
 80114d8:	bf34      	ite	cc
 80114da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80114de:	2300      	movcs	r3, #0
 80114e0:	3015      	adds	r0, #21
 80114e2:	fa02 f000 	lsl.w	r0, r2, r0
 80114e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80114ea:	4303      	orrs	r3, r0
 80114ec:	461c      	mov	r4, r3
 80114ee:	ec45 4b10 	vmov	d0, r4, r5
 80114f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114f6:	45b8      	cmp	r8, r7
 80114f8:	bf3a      	itte	cc
 80114fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80114fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8011502:	2300      	movcs	r3, #0
 8011504:	380b      	subs	r0, #11
 8011506:	d012      	beq.n	801152e <__b2d+0x8a>
 8011508:	f1c0 0120 	rsb	r1, r0, #32
 801150c:	fa23 f401 	lsr.w	r4, r3, r1
 8011510:	4082      	lsls	r2, r0
 8011512:	4322      	orrs	r2, r4
 8011514:	4547      	cmp	r7, r8
 8011516:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801151a:	bf8c      	ite	hi
 801151c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011520:	2200      	movls	r2, #0
 8011522:	4083      	lsls	r3, r0
 8011524:	40ca      	lsrs	r2, r1
 8011526:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801152a:	4313      	orrs	r3, r2
 801152c:	e7de      	b.n	80114ec <__b2d+0x48>
 801152e:	ea42 0501 	orr.w	r5, r2, r1
 8011532:	e7db      	b.n	80114ec <__b2d+0x48>
 8011534:	3ff00000 	.word	0x3ff00000

08011538 <__d2b>:
 8011538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801153c:	460f      	mov	r7, r1
 801153e:	2101      	movs	r1, #1
 8011540:	ec59 8b10 	vmov	r8, r9, d0
 8011544:	4616      	mov	r6, r2
 8011546:	f7ff fc1b 	bl	8010d80 <_Balloc>
 801154a:	4604      	mov	r4, r0
 801154c:	b930      	cbnz	r0, 801155c <__d2b+0x24>
 801154e:	4602      	mov	r2, r0
 8011550:	4b23      	ldr	r3, [pc, #140]	@ (80115e0 <__d2b+0xa8>)
 8011552:	4824      	ldr	r0, [pc, #144]	@ (80115e4 <__d2b+0xac>)
 8011554:	f240 310f 	movw	r1, #783	@ 0x30f
 8011558:	f7fe f8fa 	bl	800f750 <__assert_func>
 801155c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011560:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011564:	b10d      	cbz	r5, 801156a <__d2b+0x32>
 8011566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801156a:	9301      	str	r3, [sp, #4]
 801156c:	f1b8 0300 	subs.w	r3, r8, #0
 8011570:	d023      	beq.n	80115ba <__d2b+0x82>
 8011572:	4668      	mov	r0, sp
 8011574:	9300      	str	r3, [sp, #0]
 8011576:	f7ff fd14 	bl	8010fa2 <__lo0bits>
 801157a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801157e:	b1d0      	cbz	r0, 80115b6 <__d2b+0x7e>
 8011580:	f1c0 0320 	rsb	r3, r0, #32
 8011584:	fa02 f303 	lsl.w	r3, r2, r3
 8011588:	430b      	orrs	r3, r1
 801158a:	40c2      	lsrs	r2, r0
 801158c:	6163      	str	r3, [r4, #20]
 801158e:	9201      	str	r2, [sp, #4]
 8011590:	9b01      	ldr	r3, [sp, #4]
 8011592:	61a3      	str	r3, [r4, #24]
 8011594:	2b00      	cmp	r3, #0
 8011596:	bf0c      	ite	eq
 8011598:	2201      	moveq	r2, #1
 801159a:	2202      	movne	r2, #2
 801159c:	6122      	str	r2, [r4, #16]
 801159e:	b1a5      	cbz	r5, 80115ca <__d2b+0x92>
 80115a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80115a4:	4405      	add	r5, r0
 80115a6:	603d      	str	r5, [r7, #0]
 80115a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80115ac:	6030      	str	r0, [r6, #0]
 80115ae:	4620      	mov	r0, r4
 80115b0:	b003      	add	sp, #12
 80115b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115b6:	6161      	str	r1, [r4, #20]
 80115b8:	e7ea      	b.n	8011590 <__d2b+0x58>
 80115ba:	a801      	add	r0, sp, #4
 80115bc:	f7ff fcf1 	bl	8010fa2 <__lo0bits>
 80115c0:	9b01      	ldr	r3, [sp, #4]
 80115c2:	6163      	str	r3, [r4, #20]
 80115c4:	3020      	adds	r0, #32
 80115c6:	2201      	movs	r2, #1
 80115c8:	e7e8      	b.n	801159c <__d2b+0x64>
 80115ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80115ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80115d2:	6038      	str	r0, [r7, #0]
 80115d4:	6918      	ldr	r0, [r3, #16]
 80115d6:	f7ff fcc5 	bl	8010f64 <__hi0bits>
 80115da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80115de:	e7e5      	b.n	80115ac <__d2b+0x74>
 80115e0:	08013781 	.word	0x08013781
 80115e4:	080137f2 	.word	0x080137f2

080115e8 <__ratio>:
 80115e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ec:	b085      	sub	sp, #20
 80115ee:	e9cd 1000 	strd	r1, r0, [sp]
 80115f2:	a902      	add	r1, sp, #8
 80115f4:	f7ff ff56 	bl	80114a4 <__b2d>
 80115f8:	9800      	ldr	r0, [sp, #0]
 80115fa:	a903      	add	r1, sp, #12
 80115fc:	ec55 4b10 	vmov	r4, r5, d0
 8011600:	f7ff ff50 	bl	80114a4 <__b2d>
 8011604:	9b01      	ldr	r3, [sp, #4]
 8011606:	6919      	ldr	r1, [r3, #16]
 8011608:	9b00      	ldr	r3, [sp, #0]
 801160a:	691b      	ldr	r3, [r3, #16]
 801160c:	1ac9      	subs	r1, r1, r3
 801160e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011612:	1a9b      	subs	r3, r3, r2
 8011614:	ec5b ab10 	vmov	sl, fp, d0
 8011618:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801161c:	2b00      	cmp	r3, #0
 801161e:	bfce      	itee	gt
 8011620:	462a      	movgt	r2, r5
 8011622:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011626:	465a      	movle	r2, fp
 8011628:	462f      	mov	r7, r5
 801162a:	46d9      	mov	r9, fp
 801162c:	bfcc      	ite	gt
 801162e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011632:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011636:	464b      	mov	r3, r9
 8011638:	4652      	mov	r2, sl
 801163a:	4620      	mov	r0, r4
 801163c:	4639      	mov	r1, r7
 801163e:	f7ef f91d 	bl	800087c <__aeabi_ddiv>
 8011642:	ec41 0b10 	vmov	d0, r0, r1
 8011646:	b005      	add	sp, #20
 8011648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801164c <__copybits>:
 801164c:	3901      	subs	r1, #1
 801164e:	b570      	push	{r4, r5, r6, lr}
 8011650:	1149      	asrs	r1, r1, #5
 8011652:	6914      	ldr	r4, [r2, #16]
 8011654:	3101      	adds	r1, #1
 8011656:	f102 0314 	add.w	r3, r2, #20
 801165a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801165e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011662:	1f05      	subs	r5, r0, #4
 8011664:	42a3      	cmp	r3, r4
 8011666:	d30c      	bcc.n	8011682 <__copybits+0x36>
 8011668:	1aa3      	subs	r3, r4, r2
 801166a:	3b11      	subs	r3, #17
 801166c:	f023 0303 	bic.w	r3, r3, #3
 8011670:	3211      	adds	r2, #17
 8011672:	42a2      	cmp	r2, r4
 8011674:	bf88      	it	hi
 8011676:	2300      	movhi	r3, #0
 8011678:	4418      	add	r0, r3
 801167a:	2300      	movs	r3, #0
 801167c:	4288      	cmp	r0, r1
 801167e:	d305      	bcc.n	801168c <__copybits+0x40>
 8011680:	bd70      	pop	{r4, r5, r6, pc}
 8011682:	f853 6b04 	ldr.w	r6, [r3], #4
 8011686:	f845 6f04 	str.w	r6, [r5, #4]!
 801168a:	e7eb      	b.n	8011664 <__copybits+0x18>
 801168c:	f840 3b04 	str.w	r3, [r0], #4
 8011690:	e7f4      	b.n	801167c <__copybits+0x30>

08011692 <__any_on>:
 8011692:	f100 0214 	add.w	r2, r0, #20
 8011696:	6900      	ldr	r0, [r0, #16]
 8011698:	114b      	asrs	r3, r1, #5
 801169a:	4298      	cmp	r0, r3
 801169c:	b510      	push	{r4, lr}
 801169e:	db11      	blt.n	80116c4 <__any_on+0x32>
 80116a0:	dd0a      	ble.n	80116b8 <__any_on+0x26>
 80116a2:	f011 011f 	ands.w	r1, r1, #31
 80116a6:	d007      	beq.n	80116b8 <__any_on+0x26>
 80116a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80116ac:	fa24 f001 	lsr.w	r0, r4, r1
 80116b0:	fa00 f101 	lsl.w	r1, r0, r1
 80116b4:	428c      	cmp	r4, r1
 80116b6:	d10b      	bne.n	80116d0 <__any_on+0x3e>
 80116b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80116bc:	4293      	cmp	r3, r2
 80116be:	d803      	bhi.n	80116c8 <__any_on+0x36>
 80116c0:	2000      	movs	r0, #0
 80116c2:	bd10      	pop	{r4, pc}
 80116c4:	4603      	mov	r3, r0
 80116c6:	e7f7      	b.n	80116b8 <__any_on+0x26>
 80116c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80116cc:	2900      	cmp	r1, #0
 80116ce:	d0f5      	beq.n	80116bc <__any_on+0x2a>
 80116d0:	2001      	movs	r0, #1
 80116d2:	e7f6      	b.n	80116c2 <__any_on+0x30>

080116d4 <_strtoul_l.isra.0>:
 80116d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116d8:	4e34      	ldr	r6, [pc, #208]	@ (80117ac <_strtoul_l.isra.0+0xd8>)
 80116da:	4686      	mov	lr, r0
 80116dc:	460d      	mov	r5, r1
 80116de:	4628      	mov	r0, r5
 80116e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116e4:	5d37      	ldrb	r7, [r6, r4]
 80116e6:	f017 0708 	ands.w	r7, r7, #8
 80116ea:	d1f8      	bne.n	80116de <_strtoul_l.isra.0+0xa>
 80116ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80116ee:	d110      	bne.n	8011712 <_strtoul_l.isra.0+0x3e>
 80116f0:	782c      	ldrb	r4, [r5, #0]
 80116f2:	2701      	movs	r7, #1
 80116f4:	1c85      	adds	r5, r0, #2
 80116f6:	f033 0010 	bics.w	r0, r3, #16
 80116fa:	d115      	bne.n	8011728 <_strtoul_l.isra.0+0x54>
 80116fc:	2c30      	cmp	r4, #48	@ 0x30
 80116fe:	d10d      	bne.n	801171c <_strtoul_l.isra.0+0x48>
 8011700:	7828      	ldrb	r0, [r5, #0]
 8011702:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011706:	2858      	cmp	r0, #88	@ 0x58
 8011708:	d108      	bne.n	801171c <_strtoul_l.isra.0+0x48>
 801170a:	786c      	ldrb	r4, [r5, #1]
 801170c:	3502      	adds	r5, #2
 801170e:	2310      	movs	r3, #16
 8011710:	e00a      	b.n	8011728 <_strtoul_l.isra.0+0x54>
 8011712:	2c2b      	cmp	r4, #43	@ 0x2b
 8011714:	bf04      	itt	eq
 8011716:	782c      	ldrbeq	r4, [r5, #0]
 8011718:	1c85      	addeq	r5, r0, #2
 801171a:	e7ec      	b.n	80116f6 <_strtoul_l.isra.0+0x22>
 801171c:	2b00      	cmp	r3, #0
 801171e:	d1f6      	bne.n	801170e <_strtoul_l.isra.0+0x3a>
 8011720:	2c30      	cmp	r4, #48	@ 0x30
 8011722:	bf14      	ite	ne
 8011724:	230a      	movne	r3, #10
 8011726:	2308      	moveq	r3, #8
 8011728:	f04f 38ff 	mov.w	r8, #4294967295
 801172c:	2600      	movs	r6, #0
 801172e:	fbb8 f8f3 	udiv	r8, r8, r3
 8011732:	fb03 f908 	mul.w	r9, r3, r8
 8011736:	ea6f 0909 	mvn.w	r9, r9
 801173a:	4630      	mov	r0, r6
 801173c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011740:	f1bc 0f09 	cmp.w	ip, #9
 8011744:	d810      	bhi.n	8011768 <_strtoul_l.isra.0+0x94>
 8011746:	4664      	mov	r4, ip
 8011748:	42a3      	cmp	r3, r4
 801174a:	dd1e      	ble.n	801178a <_strtoul_l.isra.0+0xb6>
 801174c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011750:	d007      	beq.n	8011762 <_strtoul_l.isra.0+0x8e>
 8011752:	4580      	cmp	r8, r0
 8011754:	d316      	bcc.n	8011784 <_strtoul_l.isra.0+0xb0>
 8011756:	d101      	bne.n	801175c <_strtoul_l.isra.0+0x88>
 8011758:	45a1      	cmp	r9, r4
 801175a:	db13      	blt.n	8011784 <_strtoul_l.isra.0+0xb0>
 801175c:	fb00 4003 	mla	r0, r0, r3, r4
 8011760:	2601      	movs	r6, #1
 8011762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011766:	e7e9      	b.n	801173c <_strtoul_l.isra.0+0x68>
 8011768:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801176c:	f1bc 0f19 	cmp.w	ip, #25
 8011770:	d801      	bhi.n	8011776 <_strtoul_l.isra.0+0xa2>
 8011772:	3c37      	subs	r4, #55	@ 0x37
 8011774:	e7e8      	b.n	8011748 <_strtoul_l.isra.0+0x74>
 8011776:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801177a:	f1bc 0f19 	cmp.w	ip, #25
 801177e:	d804      	bhi.n	801178a <_strtoul_l.isra.0+0xb6>
 8011780:	3c57      	subs	r4, #87	@ 0x57
 8011782:	e7e1      	b.n	8011748 <_strtoul_l.isra.0+0x74>
 8011784:	f04f 36ff 	mov.w	r6, #4294967295
 8011788:	e7eb      	b.n	8011762 <_strtoul_l.isra.0+0x8e>
 801178a:	1c73      	adds	r3, r6, #1
 801178c:	d106      	bne.n	801179c <_strtoul_l.isra.0+0xc8>
 801178e:	2322      	movs	r3, #34	@ 0x22
 8011790:	f8ce 3000 	str.w	r3, [lr]
 8011794:	4630      	mov	r0, r6
 8011796:	b932      	cbnz	r2, 80117a6 <_strtoul_l.isra.0+0xd2>
 8011798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801179c:	b107      	cbz	r7, 80117a0 <_strtoul_l.isra.0+0xcc>
 801179e:	4240      	negs	r0, r0
 80117a0:	2a00      	cmp	r2, #0
 80117a2:	d0f9      	beq.n	8011798 <_strtoul_l.isra.0+0xc4>
 80117a4:	b106      	cbz	r6, 80117a8 <_strtoul_l.isra.0+0xd4>
 80117a6:	1e69      	subs	r1, r5, #1
 80117a8:	6011      	str	r1, [r2, #0]
 80117aa:	e7f5      	b.n	8011798 <_strtoul_l.isra.0+0xc4>
 80117ac:	08013941 	.word	0x08013941

080117b0 <_strtoul_r>:
 80117b0:	f7ff bf90 	b.w	80116d4 <_strtoul_l.isra.0>

080117b4 <strtoul>:
 80117b4:	4613      	mov	r3, r2
 80117b6:	460a      	mov	r2, r1
 80117b8:	4601      	mov	r1, r0
 80117ba:	4802      	ldr	r0, [pc, #8]	@ (80117c4 <strtoul+0x10>)
 80117bc:	6800      	ldr	r0, [r0, #0]
 80117be:	f7ff bf89 	b.w	80116d4 <_strtoul_l.isra.0>
 80117c2:	bf00      	nop
 80117c4:	200001a4 	.word	0x200001a4

080117c8 <__ascii_wctomb>:
 80117c8:	4603      	mov	r3, r0
 80117ca:	4608      	mov	r0, r1
 80117cc:	b141      	cbz	r1, 80117e0 <__ascii_wctomb+0x18>
 80117ce:	2aff      	cmp	r2, #255	@ 0xff
 80117d0:	d904      	bls.n	80117dc <__ascii_wctomb+0x14>
 80117d2:	228a      	movs	r2, #138	@ 0x8a
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	f04f 30ff 	mov.w	r0, #4294967295
 80117da:	4770      	bx	lr
 80117dc:	700a      	strb	r2, [r1, #0]
 80117de:	2001      	movs	r0, #1
 80117e0:	4770      	bx	lr

080117e2 <__ssputs_r>:
 80117e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117e6:	688e      	ldr	r6, [r1, #8]
 80117e8:	461f      	mov	r7, r3
 80117ea:	42be      	cmp	r6, r7
 80117ec:	680b      	ldr	r3, [r1, #0]
 80117ee:	4682      	mov	sl, r0
 80117f0:	460c      	mov	r4, r1
 80117f2:	4690      	mov	r8, r2
 80117f4:	d82d      	bhi.n	8011852 <__ssputs_r+0x70>
 80117f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80117fe:	d026      	beq.n	801184e <__ssputs_r+0x6c>
 8011800:	6965      	ldr	r5, [r4, #20]
 8011802:	6909      	ldr	r1, [r1, #16]
 8011804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011808:	eba3 0901 	sub.w	r9, r3, r1
 801180c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011810:	1c7b      	adds	r3, r7, #1
 8011812:	444b      	add	r3, r9
 8011814:	106d      	asrs	r5, r5, #1
 8011816:	429d      	cmp	r5, r3
 8011818:	bf38      	it	cc
 801181a:	461d      	movcc	r5, r3
 801181c:	0553      	lsls	r3, r2, #21
 801181e:	d527      	bpl.n	8011870 <__ssputs_r+0x8e>
 8011820:	4629      	mov	r1, r5
 8011822:	f7ff fa0f 	bl	8010c44 <_malloc_r>
 8011826:	4606      	mov	r6, r0
 8011828:	b360      	cbz	r0, 8011884 <__ssputs_r+0xa2>
 801182a:	6921      	ldr	r1, [r4, #16]
 801182c:	464a      	mov	r2, r9
 801182e:	f7fd ff78 	bl	800f722 <memcpy>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801183c:	81a3      	strh	r3, [r4, #12]
 801183e:	6126      	str	r6, [r4, #16]
 8011840:	6165      	str	r5, [r4, #20]
 8011842:	444e      	add	r6, r9
 8011844:	eba5 0509 	sub.w	r5, r5, r9
 8011848:	6026      	str	r6, [r4, #0]
 801184a:	60a5      	str	r5, [r4, #8]
 801184c:	463e      	mov	r6, r7
 801184e:	42be      	cmp	r6, r7
 8011850:	d900      	bls.n	8011854 <__ssputs_r+0x72>
 8011852:	463e      	mov	r6, r7
 8011854:	6820      	ldr	r0, [r4, #0]
 8011856:	4632      	mov	r2, r6
 8011858:	4641      	mov	r1, r8
 801185a:	f7fc ff51 	bl	800e700 <memmove>
 801185e:	68a3      	ldr	r3, [r4, #8]
 8011860:	1b9b      	subs	r3, r3, r6
 8011862:	60a3      	str	r3, [r4, #8]
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	4433      	add	r3, r6
 8011868:	6023      	str	r3, [r4, #0]
 801186a:	2000      	movs	r0, #0
 801186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011870:	462a      	mov	r2, r5
 8011872:	f001 f881 	bl	8012978 <_realloc_r>
 8011876:	4606      	mov	r6, r0
 8011878:	2800      	cmp	r0, #0
 801187a:	d1e0      	bne.n	801183e <__ssputs_r+0x5c>
 801187c:	6921      	ldr	r1, [r4, #16]
 801187e:	4650      	mov	r0, sl
 8011880:	f7fe fde6 	bl	8010450 <_free_r>
 8011884:	230c      	movs	r3, #12
 8011886:	f8ca 3000 	str.w	r3, [sl]
 801188a:	89a3      	ldrh	r3, [r4, #12]
 801188c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011890:	81a3      	strh	r3, [r4, #12]
 8011892:	f04f 30ff 	mov.w	r0, #4294967295
 8011896:	e7e9      	b.n	801186c <__ssputs_r+0x8a>

08011898 <_svfiprintf_r>:
 8011898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189c:	4698      	mov	r8, r3
 801189e:	898b      	ldrh	r3, [r1, #12]
 80118a0:	061b      	lsls	r3, r3, #24
 80118a2:	b09d      	sub	sp, #116	@ 0x74
 80118a4:	4607      	mov	r7, r0
 80118a6:	460d      	mov	r5, r1
 80118a8:	4614      	mov	r4, r2
 80118aa:	d510      	bpl.n	80118ce <_svfiprintf_r+0x36>
 80118ac:	690b      	ldr	r3, [r1, #16]
 80118ae:	b973      	cbnz	r3, 80118ce <_svfiprintf_r+0x36>
 80118b0:	2140      	movs	r1, #64	@ 0x40
 80118b2:	f7ff f9c7 	bl	8010c44 <_malloc_r>
 80118b6:	6028      	str	r0, [r5, #0]
 80118b8:	6128      	str	r0, [r5, #16]
 80118ba:	b930      	cbnz	r0, 80118ca <_svfiprintf_r+0x32>
 80118bc:	230c      	movs	r3, #12
 80118be:	603b      	str	r3, [r7, #0]
 80118c0:	f04f 30ff 	mov.w	r0, #4294967295
 80118c4:	b01d      	add	sp, #116	@ 0x74
 80118c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ca:	2340      	movs	r3, #64	@ 0x40
 80118cc:	616b      	str	r3, [r5, #20]
 80118ce:	2300      	movs	r3, #0
 80118d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80118d2:	2320      	movs	r3, #32
 80118d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80118d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80118dc:	2330      	movs	r3, #48	@ 0x30
 80118de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011a7c <_svfiprintf_r+0x1e4>
 80118e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80118e6:	f04f 0901 	mov.w	r9, #1
 80118ea:	4623      	mov	r3, r4
 80118ec:	469a      	mov	sl, r3
 80118ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118f2:	b10a      	cbz	r2, 80118f8 <_svfiprintf_r+0x60>
 80118f4:	2a25      	cmp	r2, #37	@ 0x25
 80118f6:	d1f9      	bne.n	80118ec <_svfiprintf_r+0x54>
 80118f8:	ebba 0b04 	subs.w	fp, sl, r4
 80118fc:	d00b      	beq.n	8011916 <_svfiprintf_r+0x7e>
 80118fe:	465b      	mov	r3, fp
 8011900:	4622      	mov	r2, r4
 8011902:	4629      	mov	r1, r5
 8011904:	4638      	mov	r0, r7
 8011906:	f7ff ff6c 	bl	80117e2 <__ssputs_r>
 801190a:	3001      	adds	r0, #1
 801190c:	f000 80a7 	beq.w	8011a5e <_svfiprintf_r+0x1c6>
 8011910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011912:	445a      	add	r2, fp
 8011914:	9209      	str	r2, [sp, #36]	@ 0x24
 8011916:	f89a 3000 	ldrb.w	r3, [sl]
 801191a:	2b00      	cmp	r3, #0
 801191c:	f000 809f 	beq.w	8011a5e <_svfiprintf_r+0x1c6>
 8011920:	2300      	movs	r3, #0
 8011922:	f04f 32ff 	mov.w	r2, #4294967295
 8011926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801192a:	f10a 0a01 	add.w	sl, sl, #1
 801192e:	9304      	str	r3, [sp, #16]
 8011930:	9307      	str	r3, [sp, #28]
 8011932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011936:	931a      	str	r3, [sp, #104]	@ 0x68
 8011938:	4654      	mov	r4, sl
 801193a:	2205      	movs	r2, #5
 801193c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011940:	484e      	ldr	r0, [pc, #312]	@ (8011a7c <_svfiprintf_r+0x1e4>)
 8011942:	f7ee fc5d 	bl	8000200 <memchr>
 8011946:	9a04      	ldr	r2, [sp, #16]
 8011948:	b9d8      	cbnz	r0, 8011982 <_svfiprintf_r+0xea>
 801194a:	06d0      	lsls	r0, r2, #27
 801194c:	bf44      	itt	mi
 801194e:	2320      	movmi	r3, #32
 8011950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011954:	0711      	lsls	r1, r2, #28
 8011956:	bf44      	itt	mi
 8011958:	232b      	movmi	r3, #43	@ 0x2b
 801195a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801195e:	f89a 3000 	ldrb.w	r3, [sl]
 8011962:	2b2a      	cmp	r3, #42	@ 0x2a
 8011964:	d015      	beq.n	8011992 <_svfiprintf_r+0xfa>
 8011966:	9a07      	ldr	r2, [sp, #28]
 8011968:	4654      	mov	r4, sl
 801196a:	2000      	movs	r0, #0
 801196c:	f04f 0c0a 	mov.w	ip, #10
 8011970:	4621      	mov	r1, r4
 8011972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011976:	3b30      	subs	r3, #48	@ 0x30
 8011978:	2b09      	cmp	r3, #9
 801197a:	d94b      	bls.n	8011a14 <_svfiprintf_r+0x17c>
 801197c:	b1b0      	cbz	r0, 80119ac <_svfiprintf_r+0x114>
 801197e:	9207      	str	r2, [sp, #28]
 8011980:	e014      	b.n	80119ac <_svfiprintf_r+0x114>
 8011982:	eba0 0308 	sub.w	r3, r0, r8
 8011986:	fa09 f303 	lsl.w	r3, r9, r3
 801198a:	4313      	orrs	r3, r2
 801198c:	9304      	str	r3, [sp, #16]
 801198e:	46a2      	mov	sl, r4
 8011990:	e7d2      	b.n	8011938 <_svfiprintf_r+0xa0>
 8011992:	9b03      	ldr	r3, [sp, #12]
 8011994:	1d19      	adds	r1, r3, #4
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	9103      	str	r1, [sp, #12]
 801199a:	2b00      	cmp	r3, #0
 801199c:	bfbb      	ittet	lt
 801199e:	425b      	neglt	r3, r3
 80119a0:	f042 0202 	orrlt.w	r2, r2, #2
 80119a4:	9307      	strge	r3, [sp, #28]
 80119a6:	9307      	strlt	r3, [sp, #28]
 80119a8:	bfb8      	it	lt
 80119aa:	9204      	strlt	r2, [sp, #16]
 80119ac:	7823      	ldrb	r3, [r4, #0]
 80119ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80119b0:	d10a      	bne.n	80119c8 <_svfiprintf_r+0x130>
 80119b2:	7863      	ldrb	r3, [r4, #1]
 80119b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80119b6:	d132      	bne.n	8011a1e <_svfiprintf_r+0x186>
 80119b8:	9b03      	ldr	r3, [sp, #12]
 80119ba:	1d1a      	adds	r2, r3, #4
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	9203      	str	r2, [sp, #12]
 80119c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80119c4:	3402      	adds	r4, #2
 80119c6:	9305      	str	r3, [sp, #20]
 80119c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a8c <_svfiprintf_r+0x1f4>
 80119cc:	7821      	ldrb	r1, [r4, #0]
 80119ce:	2203      	movs	r2, #3
 80119d0:	4650      	mov	r0, sl
 80119d2:	f7ee fc15 	bl	8000200 <memchr>
 80119d6:	b138      	cbz	r0, 80119e8 <_svfiprintf_r+0x150>
 80119d8:	9b04      	ldr	r3, [sp, #16]
 80119da:	eba0 000a 	sub.w	r0, r0, sl
 80119de:	2240      	movs	r2, #64	@ 0x40
 80119e0:	4082      	lsls	r2, r0
 80119e2:	4313      	orrs	r3, r2
 80119e4:	3401      	adds	r4, #1
 80119e6:	9304      	str	r3, [sp, #16]
 80119e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119ec:	4824      	ldr	r0, [pc, #144]	@ (8011a80 <_svfiprintf_r+0x1e8>)
 80119ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80119f2:	2206      	movs	r2, #6
 80119f4:	f7ee fc04 	bl	8000200 <memchr>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d036      	beq.n	8011a6a <_svfiprintf_r+0x1d2>
 80119fc:	4b21      	ldr	r3, [pc, #132]	@ (8011a84 <_svfiprintf_r+0x1ec>)
 80119fe:	bb1b      	cbnz	r3, 8011a48 <_svfiprintf_r+0x1b0>
 8011a00:	9b03      	ldr	r3, [sp, #12]
 8011a02:	3307      	adds	r3, #7
 8011a04:	f023 0307 	bic.w	r3, r3, #7
 8011a08:	3308      	adds	r3, #8
 8011a0a:	9303      	str	r3, [sp, #12]
 8011a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a0e:	4433      	add	r3, r6
 8011a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a12:	e76a      	b.n	80118ea <_svfiprintf_r+0x52>
 8011a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a18:	460c      	mov	r4, r1
 8011a1a:	2001      	movs	r0, #1
 8011a1c:	e7a8      	b.n	8011970 <_svfiprintf_r+0xd8>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	3401      	adds	r4, #1
 8011a22:	9305      	str	r3, [sp, #20]
 8011a24:	4619      	mov	r1, r3
 8011a26:	f04f 0c0a 	mov.w	ip, #10
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a30:	3a30      	subs	r2, #48	@ 0x30
 8011a32:	2a09      	cmp	r2, #9
 8011a34:	d903      	bls.n	8011a3e <_svfiprintf_r+0x1a6>
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d0c6      	beq.n	80119c8 <_svfiprintf_r+0x130>
 8011a3a:	9105      	str	r1, [sp, #20]
 8011a3c:	e7c4      	b.n	80119c8 <_svfiprintf_r+0x130>
 8011a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a42:	4604      	mov	r4, r0
 8011a44:	2301      	movs	r3, #1
 8011a46:	e7f0      	b.n	8011a2a <_svfiprintf_r+0x192>
 8011a48:	ab03      	add	r3, sp, #12
 8011a4a:	9300      	str	r3, [sp, #0]
 8011a4c:	462a      	mov	r2, r5
 8011a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a88 <_svfiprintf_r+0x1f0>)
 8011a50:	a904      	add	r1, sp, #16
 8011a52:	4638      	mov	r0, r7
 8011a54:	f7fb fff6 	bl	800da44 <_printf_float>
 8011a58:	1c42      	adds	r2, r0, #1
 8011a5a:	4606      	mov	r6, r0
 8011a5c:	d1d6      	bne.n	8011a0c <_svfiprintf_r+0x174>
 8011a5e:	89ab      	ldrh	r3, [r5, #12]
 8011a60:	065b      	lsls	r3, r3, #25
 8011a62:	f53f af2d 	bmi.w	80118c0 <_svfiprintf_r+0x28>
 8011a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a68:	e72c      	b.n	80118c4 <_svfiprintf_r+0x2c>
 8011a6a:	ab03      	add	r3, sp, #12
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	462a      	mov	r2, r5
 8011a70:	4b05      	ldr	r3, [pc, #20]	@ (8011a88 <_svfiprintf_r+0x1f0>)
 8011a72:	a904      	add	r1, sp, #16
 8011a74:	4638      	mov	r0, r7
 8011a76:	f7fc fa7d 	bl	800df74 <_printf_i>
 8011a7a:	e7ed      	b.n	8011a58 <_svfiprintf_r+0x1c0>
 8011a7c:	0801384b 	.word	0x0801384b
 8011a80:	08013855 	.word	0x08013855
 8011a84:	0800da45 	.word	0x0800da45
 8011a88:	080117e3 	.word	0x080117e3
 8011a8c:	08013851 	.word	0x08013851

08011a90 <_sungetc_r>:
 8011a90:	b538      	push	{r3, r4, r5, lr}
 8011a92:	1c4b      	adds	r3, r1, #1
 8011a94:	4614      	mov	r4, r2
 8011a96:	d103      	bne.n	8011aa0 <_sungetc_r+0x10>
 8011a98:	f04f 35ff 	mov.w	r5, #4294967295
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	bd38      	pop	{r3, r4, r5, pc}
 8011aa0:	8993      	ldrh	r3, [r2, #12]
 8011aa2:	f023 0320 	bic.w	r3, r3, #32
 8011aa6:	8193      	strh	r3, [r2, #12]
 8011aa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011aaa:	6852      	ldr	r2, [r2, #4]
 8011aac:	b2cd      	uxtb	r5, r1
 8011aae:	b18b      	cbz	r3, 8011ad4 <_sungetc_r+0x44>
 8011ab0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	dd08      	ble.n	8011ac8 <_sungetc_r+0x38>
 8011ab6:	6823      	ldr	r3, [r4, #0]
 8011ab8:	1e5a      	subs	r2, r3, #1
 8011aba:	6022      	str	r2, [r4, #0]
 8011abc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011ac0:	6863      	ldr	r3, [r4, #4]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	6063      	str	r3, [r4, #4]
 8011ac6:	e7e9      	b.n	8011a9c <_sungetc_r+0xc>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	f000 fdce 	bl	801266a <__submore>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d0f1      	beq.n	8011ab6 <_sungetc_r+0x26>
 8011ad2:	e7e1      	b.n	8011a98 <_sungetc_r+0x8>
 8011ad4:	6921      	ldr	r1, [r4, #16]
 8011ad6:	6823      	ldr	r3, [r4, #0]
 8011ad8:	b151      	cbz	r1, 8011af0 <_sungetc_r+0x60>
 8011ada:	4299      	cmp	r1, r3
 8011adc:	d208      	bcs.n	8011af0 <_sungetc_r+0x60>
 8011ade:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011ae2:	42a9      	cmp	r1, r5
 8011ae4:	d104      	bne.n	8011af0 <_sungetc_r+0x60>
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	3201      	adds	r2, #1
 8011aea:	6023      	str	r3, [r4, #0]
 8011aec:	6062      	str	r2, [r4, #4]
 8011aee:	e7d5      	b.n	8011a9c <_sungetc_r+0xc>
 8011af0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011af4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011afa:	2303      	movs	r3, #3
 8011afc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011afe:	4623      	mov	r3, r4
 8011b00:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011b04:	6023      	str	r3, [r4, #0]
 8011b06:	2301      	movs	r3, #1
 8011b08:	e7dc      	b.n	8011ac4 <_sungetc_r+0x34>

08011b0a <__ssrefill_r>:
 8011b0a:	b510      	push	{r4, lr}
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011b10:	b169      	cbz	r1, 8011b2e <__ssrefill_r+0x24>
 8011b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b16:	4299      	cmp	r1, r3
 8011b18:	d001      	beq.n	8011b1e <__ssrefill_r+0x14>
 8011b1a:	f7fe fc99 	bl	8010450 <_free_r>
 8011b1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b20:	6063      	str	r3, [r4, #4]
 8011b22:	2000      	movs	r0, #0
 8011b24:	6360      	str	r0, [r4, #52]	@ 0x34
 8011b26:	b113      	cbz	r3, 8011b2e <__ssrefill_r+0x24>
 8011b28:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011b2a:	6023      	str	r3, [r4, #0]
 8011b2c:	bd10      	pop	{r4, pc}
 8011b2e:	6923      	ldr	r3, [r4, #16]
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	2300      	movs	r3, #0
 8011b34:	6063      	str	r3, [r4, #4]
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	f043 0320 	orr.w	r3, r3, #32
 8011b3c:	81a3      	strh	r3, [r4, #12]
 8011b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b42:	e7f3      	b.n	8011b2c <__ssrefill_r+0x22>

08011b44 <__ssvfiscanf_r>:
 8011b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b48:	460c      	mov	r4, r1
 8011b4a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011b4e:	2100      	movs	r1, #0
 8011b50:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011b54:	49a6      	ldr	r1, [pc, #664]	@ (8011df0 <__ssvfiscanf_r+0x2ac>)
 8011b56:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011b58:	f10d 0804 	add.w	r8, sp, #4
 8011b5c:	49a5      	ldr	r1, [pc, #660]	@ (8011df4 <__ssvfiscanf_r+0x2b0>)
 8011b5e:	4fa6      	ldr	r7, [pc, #664]	@ (8011df8 <__ssvfiscanf_r+0x2b4>)
 8011b60:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011b64:	4606      	mov	r6, r0
 8011b66:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	f892 9000 	ldrb.w	r9, [r2]
 8011b6e:	f1b9 0f00 	cmp.w	r9, #0
 8011b72:	f000 8158 	beq.w	8011e26 <__ssvfiscanf_r+0x2e2>
 8011b76:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011b7a:	f013 0308 	ands.w	r3, r3, #8
 8011b7e:	f102 0501 	add.w	r5, r2, #1
 8011b82:	d019      	beq.n	8011bb8 <__ssvfiscanf_r+0x74>
 8011b84:	6863      	ldr	r3, [r4, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	dd0f      	ble.n	8011baa <__ssvfiscanf_r+0x66>
 8011b8a:	6823      	ldr	r3, [r4, #0]
 8011b8c:	781a      	ldrb	r2, [r3, #0]
 8011b8e:	5cba      	ldrb	r2, [r7, r2]
 8011b90:	0712      	lsls	r2, r2, #28
 8011b92:	d401      	bmi.n	8011b98 <__ssvfiscanf_r+0x54>
 8011b94:	462a      	mov	r2, r5
 8011b96:	e7e8      	b.n	8011b6a <__ssvfiscanf_r+0x26>
 8011b98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011b9a:	3201      	adds	r2, #1
 8011b9c:	9245      	str	r2, [sp, #276]	@ 0x114
 8011b9e:	6862      	ldr	r2, [r4, #4]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	3a01      	subs	r2, #1
 8011ba4:	6062      	str	r2, [r4, #4]
 8011ba6:	6023      	str	r3, [r4, #0]
 8011ba8:	e7ec      	b.n	8011b84 <__ssvfiscanf_r+0x40>
 8011baa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011bac:	4621      	mov	r1, r4
 8011bae:	4630      	mov	r0, r6
 8011bb0:	4798      	blx	r3
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d0e9      	beq.n	8011b8a <__ssvfiscanf_r+0x46>
 8011bb6:	e7ed      	b.n	8011b94 <__ssvfiscanf_r+0x50>
 8011bb8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011bbc:	f040 8085 	bne.w	8011cca <__ssvfiscanf_r+0x186>
 8011bc0:	9341      	str	r3, [sp, #260]	@ 0x104
 8011bc2:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011bc4:	7853      	ldrb	r3, [r2, #1]
 8011bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bc8:	bf02      	ittt	eq
 8011bca:	2310      	moveq	r3, #16
 8011bcc:	1c95      	addeq	r5, r2, #2
 8011bce:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011bd0:	220a      	movs	r2, #10
 8011bd2:	46aa      	mov	sl, r5
 8011bd4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011bd8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011bdc:	2b09      	cmp	r3, #9
 8011bde:	d91e      	bls.n	8011c1e <__ssvfiscanf_r+0xda>
 8011be0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011dfc <__ssvfiscanf_r+0x2b8>
 8011be4:	2203      	movs	r2, #3
 8011be6:	4658      	mov	r0, fp
 8011be8:	f7ee fb0a 	bl	8000200 <memchr>
 8011bec:	b138      	cbz	r0, 8011bfe <__ssvfiscanf_r+0xba>
 8011bee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011bf0:	eba0 000b 	sub.w	r0, r0, fp
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	4083      	lsls	r3, r0
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	9341      	str	r3, [sp, #260]	@ 0x104
 8011bfc:	4655      	mov	r5, sl
 8011bfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011c02:	2b78      	cmp	r3, #120	@ 0x78
 8011c04:	d806      	bhi.n	8011c14 <__ssvfiscanf_r+0xd0>
 8011c06:	2b57      	cmp	r3, #87	@ 0x57
 8011c08:	d810      	bhi.n	8011c2c <__ssvfiscanf_r+0xe8>
 8011c0a:	2b25      	cmp	r3, #37	@ 0x25
 8011c0c:	d05d      	beq.n	8011cca <__ssvfiscanf_r+0x186>
 8011c0e:	d857      	bhi.n	8011cc0 <__ssvfiscanf_r+0x17c>
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d075      	beq.n	8011d00 <__ssvfiscanf_r+0x1bc>
 8011c14:	2303      	movs	r3, #3
 8011c16:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011c18:	230a      	movs	r3, #10
 8011c1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c1c:	e088      	b.n	8011d30 <__ssvfiscanf_r+0x1ec>
 8011c1e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011c20:	fb02 1103 	mla	r1, r2, r3, r1
 8011c24:	3930      	subs	r1, #48	@ 0x30
 8011c26:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011c28:	4655      	mov	r5, sl
 8011c2a:	e7d2      	b.n	8011bd2 <__ssvfiscanf_r+0x8e>
 8011c2c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011c30:	2a20      	cmp	r2, #32
 8011c32:	d8ef      	bhi.n	8011c14 <__ssvfiscanf_r+0xd0>
 8011c34:	a101      	add	r1, pc, #4	@ (adr r1, 8011c3c <__ssvfiscanf_r+0xf8>)
 8011c36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011c3a:	bf00      	nop
 8011c3c:	08011d0f 	.word	0x08011d0f
 8011c40:	08011c15 	.word	0x08011c15
 8011c44:	08011c15 	.word	0x08011c15
 8011c48:	08011d69 	.word	0x08011d69
 8011c4c:	08011c15 	.word	0x08011c15
 8011c50:	08011c15 	.word	0x08011c15
 8011c54:	08011c15 	.word	0x08011c15
 8011c58:	08011c15 	.word	0x08011c15
 8011c5c:	08011c15 	.word	0x08011c15
 8011c60:	08011c15 	.word	0x08011c15
 8011c64:	08011c15 	.word	0x08011c15
 8011c68:	08011d7f 	.word	0x08011d7f
 8011c6c:	08011d65 	.word	0x08011d65
 8011c70:	08011cc7 	.word	0x08011cc7
 8011c74:	08011cc7 	.word	0x08011cc7
 8011c78:	08011cc7 	.word	0x08011cc7
 8011c7c:	08011c15 	.word	0x08011c15
 8011c80:	08011d21 	.word	0x08011d21
 8011c84:	08011c15 	.word	0x08011c15
 8011c88:	08011c15 	.word	0x08011c15
 8011c8c:	08011c15 	.word	0x08011c15
 8011c90:	08011c15 	.word	0x08011c15
 8011c94:	08011d8f 	.word	0x08011d8f
 8011c98:	08011d29 	.word	0x08011d29
 8011c9c:	08011d07 	.word	0x08011d07
 8011ca0:	08011c15 	.word	0x08011c15
 8011ca4:	08011c15 	.word	0x08011c15
 8011ca8:	08011d8b 	.word	0x08011d8b
 8011cac:	08011c15 	.word	0x08011c15
 8011cb0:	08011d65 	.word	0x08011d65
 8011cb4:	08011c15 	.word	0x08011c15
 8011cb8:	08011c15 	.word	0x08011c15
 8011cbc:	08011d0f 	.word	0x08011d0f
 8011cc0:	3b45      	subs	r3, #69	@ 0x45
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d8a6      	bhi.n	8011c14 <__ssvfiscanf_r+0xd0>
 8011cc6:	2305      	movs	r3, #5
 8011cc8:	e031      	b.n	8011d2e <__ssvfiscanf_r+0x1ea>
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	dd0d      	ble.n	8011cec <__ssvfiscanf_r+0x1a8>
 8011cd0:	6823      	ldr	r3, [r4, #0]
 8011cd2:	781a      	ldrb	r2, [r3, #0]
 8011cd4:	454a      	cmp	r2, r9
 8011cd6:	f040 80a6 	bne.w	8011e26 <__ssvfiscanf_r+0x2e2>
 8011cda:	3301      	adds	r3, #1
 8011cdc:	6862      	ldr	r2, [r4, #4]
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011ce2:	3a01      	subs	r2, #1
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	6062      	str	r2, [r4, #4]
 8011ce8:	9345      	str	r3, [sp, #276]	@ 0x114
 8011cea:	e753      	b.n	8011b94 <__ssvfiscanf_r+0x50>
 8011cec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011cee:	4621      	mov	r1, r4
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	4798      	blx	r3
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d0eb      	beq.n	8011cd0 <__ssvfiscanf_r+0x18c>
 8011cf8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	f040 808b 	bne.w	8011e16 <__ssvfiscanf_r+0x2d2>
 8011d00:	f04f 30ff 	mov.w	r0, #4294967295
 8011d04:	e08b      	b.n	8011e1e <__ssvfiscanf_r+0x2da>
 8011d06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011d08:	f042 0220 	orr.w	r2, r2, #32
 8011d0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8011d0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011d14:	9241      	str	r2, [sp, #260]	@ 0x104
 8011d16:	2210      	movs	r2, #16
 8011d18:	2b6e      	cmp	r3, #110	@ 0x6e
 8011d1a:	9242      	str	r2, [sp, #264]	@ 0x108
 8011d1c:	d902      	bls.n	8011d24 <__ssvfiscanf_r+0x1e0>
 8011d1e:	e005      	b.n	8011d2c <__ssvfiscanf_r+0x1e8>
 8011d20:	2300      	movs	r3, #0
 8011d22:	9342      	str	r3, [sp, #264]	@ 0x108
 8011d24:	2303      	movs	r3, #3
 8011d26:	e002      	b.n	8011d2e <__ssvfiscanf_r+0x1ea>
 8011d28:	2308      	movs	r3, #8
 8011d2a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011d2c:	2304      	movs	r3, #4
 8011d2e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011d30:	6863      	ldr	r3, [r4, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	dd39      	ble.n	8011daa <__ssvfiscanf_r+0x266>
 8011d36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011d38:	0659      	lsls	r1, r3, #25
 8011d3a:	d404      	bmi.n	8011d46 <__ssvfiscanf_r+0x202>
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	781a      	ldrb	r2, [r3, #0]
 8011d40:	5cba      	ldrb	r2, [r7, r2]
 8011d42:	0712      	lsls	r2, r2, #28
 8011d44:	d438      	bmi.n	8011db8 <__ssvfiscanf_r+0x274>
 8011d46:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011d48:	2b02      	cmp	r3, #2
 8011d4a:	dc47      	bgt.n	8011ddc <__ssvfiscanf_r+0x298>
 8011d4c:	466b      	mov	r3, sp
 8011d4e:	4622      	mov	r2, r4
 8011d50:	a941      	add	r1, sp, #260	@ 0x104
 8011d52:	4630      	mov	r0, r6
 8011d54:	f000 f9ae 	bl	80120b4 <_scanf_chars>
 8011d58:	2801      	cmp	r0, #1
 8011d5a:	d064      	beq.n	8011e26 <__ssvfiscanf_r+0x2e2>
 8011d5c:	2802      	cmp	r0, #2
 8011d5e:	f47f af19 	bne.w	8011b94 <__ssvfiscanf_r+0x50>
 8011d62:	e7c9      	b.n	8011cf8 <__ssvfiscanf_r+0x1b4>
 8011d64:	220a      	movs	r2, #10
 8011d66:	e7d7      	b.n	8011d18 <__ssvfiscanf_r+0x1d4>
 8011d68:	4629      	mov	r1, r5
 8011d6a:	4640      	mov	r0, r8
 8011d6c:	f000 fc44 	bl	80125f8 <__sccl>
 8011d70:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d76:	9341      	str	r3, [sp, #260]	@ 0x104
 8011d78:	4605      	mov	r5, r0
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e7d7      	b.n	8011d2e <__ssvfiscanf_r+0x1ea>
 8011d7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d84:	9341      	str	r3, [sp, #260]	@ 0x104
 8011d86:	2300      	movs	r3, #0
 8011d88:	e7d1      	b.n	8011d2e <__ssvfiscanf_r+0x1ea>
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	e7cf      	b.n	8011d2e <__ssvfiscanf_r+0x1ea>
 8011d8e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011d90:	06c3      	lsls	r3, r0, #27
 8011d92:	f53f aeff 	bmi.w	8011b94 <__ssvfiscanf_r+0x50>
 8011d96:	9b00      	ldr	r3, [sp, #0]
 8011d98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011d9a:	1d19      	adds	r1, r3, #4
 8011d9c:	9100      	str	r1, [sp, #0]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	07c0      	lsls	r0, r0, #31
 8011da2:	bf4c      	ite	mi
 8011da4:	801a      	strhmi	r2, [r3, #0]
 8011da6:	601a      	strpl	r2, [r3, #0]
 8011da8:	e6f4      	b.n	8011b94 <__ssvfiscanf_r+0x50>
 8011daa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011dac:	4621      	mov	r1, r4
 8011dae:	4630      	mov	r0, r6
 8011db0:	4798      	blx	r3
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d0bf      	beq.n	8011d36 <__ssvfiscanf_r+0x1f2>
 8011db6:	e79f      	b.n	8011cf8 <__ssvfiscanf_r+0x1b4>
 8011db8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011dba:	3201      	adds	r2, #1
 8011dbc:	9245      	str	r2, [sp, #276]	@ 0x114
 8011dbe:	6862      	ldr	r2, [r4, #4]
 8011dc0:	3a01      	subs	r2, #1
 8011dc2:	2a00      	cmp	r2, #0
 8011dc4:	6062      	str	r2, [r4, #4]
 8011dc6:	dd02      	ble.n	8011dce <__ssvfiscanf_r+0x28a>
 8011dc8:	3301      	adds	r3, #1
 8011dca:	6023      	str	r3, [r4, #0]
 8011dcc:	e7b6      	b.n	8011d3c <__ssvfiscanf_r+0x1f8>
 8011dce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011dd0:	4621      	mov	r1, r4
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	4798      	blx	r3
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d0b0      	beq.n	8011d3c <__ssvfiscanf_r+0x1f8>
 8011dda:	e78d      	b.n	8011cf8 <__ssvfiscanf_r+0x1b4>
 8011ddc:	2b04      	cmp	r3, #4
 8011dde:	dc0f      	bgt.n	8011e00 <__ssvfiscanf_r+0x2bc>
 8011de0:	466b      	mov	r3, sp
 8011de2:	4622      	mov	r2, r4
 8011de4:	a941      	add	r1, sp, #260	@ 0x104
 8011de6:	4630      	mov	r0, r6
 8011de8:	f000 f9be 	bl	8012168 <_scanf_i>
 8011dec:	e7b4      	b.n	8011d58 <__ssvfiscanf_r+0x214>
 8011dee:	bf00      	nop
 8011df0:	08011a91 	.word	0x08011a91
 8011df4:	08011b0b 	.word	0x08011b0b
 8011df8:	08013941 	.word	0x08013941
 8011dfc:	08013851 	.word	0x08013851
 8011e00:	4b0a      	ldr	r3, [pc, #40]	@ (8011e2c <__ssvfiscanf_r+0x2e8>)
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f43f aec6 	beq.w	8011b94 <__ssvfiscanf_r+0x50>
 8011e08:	466b      	mov	r3, sp
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	a941      	add	r1, sp, #260	@ 0x104
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f3af 8000 	nop.w
 8011e14:	e7a0      	b.n	8011d58 <__ssvfiscanf_r+0x214>
 8011e16:	89a3      	ldrh	r3, [r4, #12]
 8011e18:	065b      	lsls	r3, r3, #25
 8011e1a:	f53f af71 	bmi.w	8011d00 <__ssvfiscanf_r+0x1bc>
 8011e1e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8011e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e26:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011e28:	e7f9      	b.n	8011e1e <__ssvfiscanf_r+0x2da>
 8011e2a:	bf00      	nop
 8011e2c:	00000000 	.word	0x00000000

08011e30 <__sfputc_r>:
 8011e30:	6893      	ldr	r3, [r2, #8]
 8011e32:	3b01      	subs	r3, #1
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	b410      	push	{r4}
 8011e38:	6093      	str	r3, [r2, #8]
 8011e3a:	da08      	bge.n	8011e4e <__sfputc_r+0x1e>
 8011e3c:	6994      	ldr	r4, [r2, #24]
 8011e3e:	42a3      	cmp	r3, r4
 8011e40:	db01      	blt.n	8011e46 <__sfputc_r+0x16>
 8011e42:	290a      	cmp	r1, #10
 8011e44:	d103      	bne.n	8011e4e <__sfputc_r+0x1e>
 8011e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e4a:	f7fc bbb4 	b.w	800e5b6 <__swbuf_r>
 8011e4e:	6813      	ldr	r3, [r2, #0]
 8011e50:	1c58      	adds	r0, r3, #1
 8011e52:	6010      	str	r0, [r2, #0]
 8011e54:	7019      	strb	r1, [r3, #0]
 8011e56:	4608      	mov	r0, r1
 8011e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <__sfputs_r>:
 8011e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e60:	4606      	mov	r6, r0
 8011e62:	460f      	mov	r7, r1
 8011e64:	4614      	mov	r4, r2
 8011e66:	18d5      	adds	r5, r2, r3
 8011e68:	42ac      	cmp	r4, r5
 8011e6a:	d101      	bne.n	8011e70 <__sfputs_r+0x12>
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	e007      	b.n	8011e80 <__sfputs_r+0x22>
 8011e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e74:	463a      	mov	r2, r7
 8011e76:	4630      	mov	r0, r6
 8011e78:	f7ff ffda 	bl	8011e30 <__sfputc_r>
 8011e7c:	1c43      	adds	r3, r0, #1
 8011e7e:	d1f3      	bne.n	8011e68 <__sfputs_r+0xa>
 8011e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e84 <_vfiprintf_r>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	460d      	mov	r5, r1
 8011e8a:	b09d      	sub	sp, #116	@ 0x74
 8011e8c:	4614      	mov	r4, r2
 8011e8e:	4698      	mov	r8, r3
 8011e90:	4606      	mov	r6, r0
 8011e92:	b118      	cbz	r0, 8011e9c <_vfiprintf_r+0x18>
 8011e94:	6a03      	ldr	r3, [r0, #32]
 8011e96:	b90b      	cbnz	r3, 8011e9c <_vfiprintf_r+0x18>
 8011e98:	f7fc fa16 	bl	800e2c8 <__sinit>
 8011e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e9e:	07d9      	lsls	r1, r3, #31
 8011ea0:	d405      	bmi.n	8011eae <_vfiprintf_r+0x2a>
 8011ea2:	89ab      	ldrh	r3, [r5, #12]
 8011ea4:	059a      	lsls	r2, r3, #22
 8011ea6:	d402      	bmi.n	8011eae <_vfiprintf_r+0x2a>
 8011ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eaa:	f7fd fc2f 	bl	800f70c <__retarget_lock_acquire_recursive>
 8011eae:	89ab      	ldrh	r3, [r5, #12]
 8011eb0:	071b      	lsls	r3, r3, #28
 8011eb2:	d501      	bpl.n	8011eb8 <_vfiprintf_r+0x34>
 8011eb4:	692b      	ldr	r3, [r5, #16]
 8011eb6:	b99b      	cbnz	r3, 8011ee0 <_vfiprintf_r+0x5c>
 8011eb8:	4629      	mov	r1, r5
 8011eba:	4630      	mov	r0, r6
 8011ebc:	f7fc fbba 	bl	800e634 <__swsetup_r>
 8011ec0:	b170      	cbz	r0, 8011ee0 <_vfiprintf_r+0x5c>
 8011ec2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ec4:	07dc      	lsls	r4, r3, #31
 8011ec6:	d504      	bpl.n	8011ed2 <_vfiprintf_r+0x4e>
 8011ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ecc:	b01d      	add	sp, #116	@ 0x74
 8011ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed2:	89ab      	ldrh	r3, [r5, #12]
 8011ed4:	0598      	lsls	r0, r3, #22
 8011ed6:	d4f7      	bmi.n	8011ec8 <_vfiprintf_r+0x44>
 8011ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eda:	f7fd fc19 	bl	800f710 <__retarget_lock_release_recursive>
 8011ede:	e7f3      	b.n	8011ec8 <_vfiprintf_r+0x44>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ee4:	2320      	movs	r3, #32
 8011ee6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eee:	2330      	movs	r3, #48	@ 0x30
 8011ef0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80120a0 <_vfiprintf_r+0x21c>
 8011ef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ef8:	f04f 0901 	mov.w	r9, #1
 8011efc:	4623      	mov	r3, r4
 8011efe:	469a      	mov	sl, r3
 8011f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f04:	b10a      	cbz	r2, 8011f0a <_vfiprintf_r+0x86>
 8011f06:	2a25      	cmp	r2, #37	@ 0x25
 8011f08:	d1f9      	bne.n	8011efe <_vfiprintf_r+0x7a>
 8011f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011f0e:	d00b      	beq.n	8011f28 <_vfiprintf_r+0xa4>
 8011f10:	465b      	mov	r3, fp
 8011f12:	4622      	mov	r2, r4
 8011f14:	4629      	mov	r1, r5
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7ff ffa1 	bl	8011e5e <__sfputs_r>
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	f000 80a7 	beq.w	8012070 <_vfiprintf_r+0x1ec>
 8011f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f24:	445a      	add	r2, fp
 8011f26:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f28:	f89a 3000 	ldrb.w	r3, [sl]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 809f 	beq.w	8012070 <_vfiprintf_r+0x1ec>
 8011f32:	2300      	movs	r3, #0
 8011f34:	f04f 32ff 	mov.w	r2, #4294967295
 8011f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f3c:	f10a 0a01 	add.w	sl, sl, #1
 8011f40:	9304      	str	r3, [sp, #16]
 8011f42:	9307      	str	r3, [sp, #28]
 8011f44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f48:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f4a:	4654      	mov	r4, sl
 8011f4c:	2205      	movs	r2, #5
 8011f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f52:	4853      	ldr	r0, [pc, #332]	@ (80120a0 <_vfiprintf_r+0x21c>)
 8011f54:	f7ee f954 	bl	8000200 <memchr>
 8011f58:	9a04      	ldr	r2, [sp, #16]
 8011f5a:	b9d8      	cbnz	r0, 8011f94 <_vfiprintf_r+0x110>
 8011f5c:	06d1      	lsls	r1, r2, #27
 8011f5e:	bf44      	itt	mi
 8011f60:	2320      	movmi	r3, #32
 8011f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f66:	0713      	lsls	r3, r2, #28
 8011f68:	bf44      	itt	mi
 8011f6a:	232b      	movmi	r3, #43	@ 0x2b
 8011f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f70:	f89a 3000 	ldrb.w	r3, [sl]
 8011f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f76:	d015      	beq.n	8011fa4 <_vfiprintf_r+0x120>
 8011f78:	9a07      	ldr	r2, [sp, #28]
 8011f7a:	4654      	mov	r4, sl
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	f04f 0c0a 	mov.w	ip, #10
 8011f82:	4621      	mov	r1, r4
 8011f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f88:	3b30      	subs	r3, #48	@ 0x30
 8011f8a:	2b09      	cmp	r3, #9
 8011f8c:	d94b      	bls.n	8012026 <_vfiprintf_r+0x1a2>
 8011f8e:	b1b0      	cbz	r0, 8011fbe <_vfiprintf_r+0x13a>
 8011f90:	9207      	str	r2, [sp, #28]
 8011f92:	e014      	b.n	8011fbe <_vfiprintf_r+0x13a>
 8011f94:	eba0 0308 	sub.w	r3, r0, r8
 8011f98:	fa09 f303 	lsl.w	r3, r9, r3
 8011f9c:	4313      	orrs	r3, r2
 8011f9e:	9304      	str	r3, [sp, #16]
 8011fa0:	46a2      	mov	sl, r4
 8011fa2:	e7d2      	b.n	8011f4a <_vfiprintf_r+0xc6>
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	1d19      	adds	r1, r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	9103      	str	r1, [sp, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	bfbb      	ittet	lt
 8011fb0:	425b      	neglt	r3, r3
 8011fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011fb6:	9307      	strge	r3, [sp, #28]
 8011fb8:	9307      	strlt	r3, [sp, #28]
 8011fba:	bfb8      	it	lt
 8011fbc:	9204      	strlt	r2, [sp, #16]
 8011fbe:	7823      	ldrb	r3, [r4, #0]
 8011fc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fc2:	d10a      	bne.n	8011fda <_vfiprintf_r+0x156>
 8011fc4:	7863      	ldrb	r3, [r4, #1]
 8011fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fc8:	d132      	bne.n	8012030 <_vfiprintf_r+0x1ac>
 8011fca:	9b03      	ldr	r3, [sp, #12]
 8011fcc:	1d1a      	adds	r2, r3, #4
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	9203      	str	r2, [sp, #12]
 8011fd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fd6:	3402      	adds	r4, #2
 8011fd8:	9305      	str	r3, [sp, #20]
 8011fda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80120b0 <_vfiprintf_r+0x22c>
 8011fde:	7821      	ldrb	r1, [r4, #0]
 8011fe0:	2203      	movs	r2, #3
 8011fe2:	4650      	mov	r0, sl
 8011fe4:	f7ee f90c 	bl	8000200 <memchr>
 8011fe8:	b138      	cbz	r0, 8011ffa <_vfiprintf_r+0x176>
 8011fea:	9b04      	ldr	r3, [sp, #16]
 8011fec:	eba0 000a 	sub.w	r0, r0, sl
 8011ff0:	2240      	movs	r2, #64	@ 0x40
 8011ff2:	4082      	lsls	r2, r0
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	3401      	adds	r4, #1
 8011ff8:	9304      	str	r3, [sp, #16]
 8011ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ffe:	4829      	ldr	r0, [pc, #164]	@ (80120a4 <_vfiprintf_r+0x220>)
 8012000:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012004:	2206      	movs	r2, #6
 8012006:	f7ee f8fb 	bl	8000200 <memchr>
 801200a:	2800      	cmp	r0, #0
 801200c:	d03f      	beq.n	801208e <_vfiprintf_r+0x20a>
 801200e:	4b26      	ldr	r3, [pc, #152]	@ (80120a8 <_vfiprintf_r+0x224>)
 8012010:	bb1b      	cbnz	r3, 801205a <_vfiprintf_r+0x1d6>
 8012012:	9b03      	ldr	r3, [sp, #12]
 8012014:	3307      	adds	r3, #7
 8012016:	f023 0307 	bic.w	r3, r3, #7
 801201a:	3308      	adds	r3, #8
 801201c:	9303      	str	r3, [sp, #12]
 801201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012020:	443b      	add	r3, r7
 8012022:	9309      	str	r3, [sp, #36]	@ 0x24
 8012024:	e76a      	b.n	8011efc <_vfiprintf_r+0x78>
 8012026:	fb0c 3202 	mla	r2, ip, r2, r3
 801202a:	460c      	mov	r4, r1
 801202c:	2001      	movs	r0, #1
 801202e:	e7a8      	b.n	8011f82 <_vfiprintf_r+0xfe>
 8012030:	2300      	movs	r3, #0
 8012032:	3401      	adds	r4, #1
 8012034:	9305      	str	r3, [sp, #20]
 8012036:	4619      	mov	r1, r3
 8012038:	f04f 0c0a 	mov.w	ip, #10
 801203c:	4620      	mov	r0, r4
 801203e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012042:	3a30      	subs	r2, #48	@ 0x30
 8012044:	2a09      	cmp	r2, #9
 8012046:	d903      	bls.n	8012050 <_vfiprintf_r+0x1cc>
 8012048:	2b00      	cmp	r3, #0
 801204a:	d0c6      	beq.n	8011fda <_vfiprintf_r+0x156>
 801204c:	9105      	str	r1, [sp, #20]
 801204e:	e7c4      	b.n	8011fda <_vfiprintf_r+0x156>
 8012050:	fb0c 2101 	mla	r1, ip, r1, r2
 8012054:	4604      	mov	r4, r0
 8012056:	2301      	movs	r3, #1
 8012058:	e7f0      	b.n	801203c <_vfiprintf_r+0x1b8>
 801205a:	ab03      	add	r3, sp, #12
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	462a      	mov	r2, r5
 8012060:	4b12      	ldr	r3, [pc, #72]	@ (80120ac <_vfiprintf_r+0x228>)
 8012062:	a904      	add	r1, sp, #16
 8012064:	4630      	mov	r0, r6
 8012066:	f7fb fced 	bl	800da44 <_printf_float>
 801206a:	4607      	mov	r7, r0
 801206c:	1c78      	adds	r0, r7, #1
 801206e:	d1d6      	bne.n	801201e <_vfiprintf_r+0x19a>
 8012070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012072:	07d9      	lsls	r1, r3, #31
 8012074:	d405      	bmi.n	8012082 <_vfiprintf_r+0x1fe>
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	059a      	lsls	r2, r3, #22
 801207a:	d402      	bmi.n	8012082 <_vfiprintf_r+0x1fe>
 801207c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801207e:	f7fd fb47 	bl	800f710 <__retarget_lock_release_recursive>
 8012082:	89ab      	ldrh	r3, [r5, #12]
 8012084:	065b      	lsls	r3, r3, #25
 8012086:	f53f af1f 	bmi.w	8011ec8 <_vfiprintf_r+0x44>
 801208a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801208c:	e71e      	b.n	8011ecc <_vfiprintf_r+0x48>
 801208e:	ab03      	add	r3, sp, #12
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	462a      	mov	r2, r5
 8012094:	4b05      	ldr	r3, [pc, #20]	@ (80120ac <_vfiprintf_r+0x228>)
 8012096:	a904      	add	r1, sp, #16
 8012098:	4630      	mov	r0, r6
 801209a:	f7fb ff6b 	bl	800df74 <_printf_i>
 801209e:	e7e4      	b.n	801206a <_vfiprintf_r+0x1e6>
 80120a0:	0801384b 	.word	0x0801384b
 80120a4:	08013855 	.word	0x08013855
 80120a8:	0800da45 	.word	0x0800da45
 80120ac:	08011e5f 	.word	0x08011e5f
 80120b0:	08013851 	.word	0x08013851

080120b4 <_scanf_chars>:
 80120b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b8:	4615      	mov	r5, r2
 80120ba:	688a      	ldr	r2, [r1, #8]
 80120bc:	4680      	mov	r8, r0
 80120be:	460c      	mov	r4, r1
 80120c0:	b932      	cbnz	r2, 80120d0 <_scanf_chars+0x1c>
 80120c2:	698a      	ldr	r2, [r1, #24]
 80120c4:	2a00      	cmp	r2, #0
 80120c6:	bf14      	ite	ne
 80120c8:	f04f 32ff 	movne.w	r2, #4294967295
 80120cc:	2201      	moveq	r2, #1
 80120ce:	608a      	str	r2, [r1, #8]
 80120d0:	6822      	ldr	r2, [r4, #0]
 80120d2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012164 <_scanf_chars+0xb0>
 80120d6:	06d1      	lsls	r1, r2, #27
 80120d8:	bf5f      	itttt	pl
 80120da:	681a      	ldrpl	r2, [r3, #0]
 80120dc:	1d11      	addpl	r1, r2, #4
 80120de:	6019      	strpl	r1, [r3, #0]
 80120e0:	6816      	ldrpl	r6, [r2, #0]
 80120e2:	2700      	movs	r7, #0
 80120e4:	69a0      	ldr	r0, [r4, #24]
 80120e6:	b188      	cbz	r0, 801210c <_scanf_chars+0x58>
 80120e8:	2801      	cmp	r0, #1
 80120ea:	d107      	bne.n	80120fc <_scanf_chars+0x48>
 80120ec:	682b      	ldr	r3, [r5, #0]
 80120ee:	781a      	ldrb	r2, [r3, #0]
 80120f0:	6963      	ldr	r3, [r4, #20]
 80120f2:	5c9b      	ldrb	r3, [r3, r2]
 80120f4:	b953      	cbnz	r3, 801210c <_scanf_chars+0x58>
 80120f6:	2f00      	cmp	r7, #0
 80120f8:	d031      	beq.n	801215e <_scanf_chars+0xaa>
 80120fa:	e022      	b.n	8012142 <_scanf_chars+0x8e>
 80120fc:	2802      	cmp	r0, #2
 80120fe:	d120      	bne.n	8012142 <_scanf_chars+0x8e>
 8012100:	682b      	ldr	r3, [r5, #0]
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012108:	071b      	lsls	r3, r3, #28
 801210a:	d41a      	bmi.n	8012142 <_scanf_chars+0x8e>
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	06da      	lsls	r2, r3, #27
 8012110:	bf5e      	ittt	pl
 8012112:	682b      	ldrpl	r3, [r5, #0]
 8012114:	781b      	ldrbpl	r3, [r3, #0]
 8012116:	f806 3b01 	strbpl.w	r3, [r6], #1
 801211a:	682a      	ldr	r2, [r5, #0]
 801211c:	686b      	ldr	r3, [r5, #4]
 801211e:	3201      	adds	r2, #1
 8012120:	602a      	str	r2, [r5, #0]
 8012122:	68a2      	ldr	r2, [r4, #8]
 8012124:	3b01      	subs	r3, #1
 8012126:	3a01      	subs	r2, #1
 8012128:	606b      	str	r3, [r5, #4]
 801212a:	3701      	adds	r7, #1
 801212c:	60a2      	str	r2, [r4, #8]
 801212e:	b142      	cbz	r2, 8012142 <_scanf_chars+0x8e>
 8012130:	2b00      	cmp	r3, #0
 8012132:	dcd7      	bgt.n	80120e4 <_scanf_chars+0x30>
 8012134:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012138:	4629      	mov	r1, r5
 801213a:	4640      	mov	r0, r8
 801213c:	4798      	blx	r3
 801213e:	2800      	cmp	r0, #0
 8012140:	d0d0      	beq.n	80120e4 <_scanf_chars+0x30>
 8012142:	6823      	ldr	r3, [r4, #0]
 8012144:	f013 0310 	ands.w	r3, r3, #16
 8012148:	d105      	bne.n	8012156 <_scanf_chars+0xa2>
 801214a:	68e2      	ldr	r2, [r4, #12]
 801214c:	3201      	adds	r2, #1
 801214e:	60e2      	str	r2, [r4, #12]
 8012150:	69a2      	ldr	r2, [r4, #24]
 8012152:	b102      	cbz	r2, 8012156 <_scanf_chars+0xa2>
 8012154:	7033      	strb	r3, [r6, #0]
 8012156:	6923      	ldr	r3, [r4, #16]
 8012158:	443b      	add	r3, r7
 801215a:	6123      	str	r3, [r4, #16]
 801215c:	2000      	movs	r0, #0
 801215e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012162:	bf00      	nop
 8012164:	08013941 	.word	0x08013941

08012168 <_scanf_i>:
 8012168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216c:	4698      	mov	r8, r3
 801216e:	4b74      	ldr	r3, [pc, #464]	@ (8012340 <_scanf_i+0x1d8>)
 8012170:	460c      	mov	r4, r1
 8012172:	4682      	mov	sl, r0
 8012174:	4616      	mov	r6, r2
 8012176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801217a:	b087      	sub	sp, #28
 801217c:	ab03      	add	r3, sp, #12
 801217e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012182:	4b70      	ldr	r3, [pc, #448]	@ (8012344 <_scanf_i+0x1dc>)
 8012184:	69a1      	ldr	r1, [r4, #24]
 8012186:	4a70      	ldr	r2, [pc, #448]	@ (8012348 <_scanf_i+0x1e0>)
 8012188:	2903      	cmp	r1, #3
 801218a:	bf08      	it	eq
 801218c:	461a      	moveq	r2, r3
 801218e:	68a3      	ldr	r3, [r4, #8]
 8012190:	9201      	str	r2, [sp, #4]
 8012192:	1e5a      	subs	r2, r3, #1
 8012194:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012198:	bf88      	it	hi
 801219a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801219e:	4627      	mov	r7, r4
 80121a0:	bf82      	ittt	hi
 80121a2:	eb03 0905 	addhi.w	r9, r3, r5
 80121a6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80121aa:	60a3      	strhi	r3, [r4, #8]
 80121ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80121b0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80121b4:	bf98      	it	ls
 80121b6:	f04f 0900 	movls.w	r9, #0
 80121ba:	6023      	str	r3, [r4, #0]
 80121bc:	463d      	mov	r5, r7
 80121be:	f04f 0b00 	mov.w	fp, #0
 80121c2:	6831      	ldr	r1, [r6, #0]
 80121c4:	ab03      	add	r3, sp, #12
 80121c6:	7809      	ldrb	r1, [r1, #0]
 80121c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80121cc:	2202      	movs	r2, #2
 80121ce:	f7ee f817 	bl	8000200 <memchr>
 80121d2:	b328      	cbz	r0, 8012220 <_scanf_i+0xb8>
 80121d4:	f1bb 0f01 	cmp.w	fp, #1
 80121d8:	d159      	bne.n	801228e <_scanf_i+0x126>
 80121da:	6862      	ldr	r2, [r4, #4]
 80121dc:	b92a      	cbnz	r2, 80121ea <_scanf_i+0x82>
 80121de:	6822      	ldr	r2, [r4, #0]
 80121e0:	2108      	movs	r1, #8
 80121e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80121e6:	6061      	str	r1, [r4, #4]
 80121e8:	6022      	str	r2, [r4, #0]
 80121ea:	6822      	ldr	r2, [r4, #0]
 80121ec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80121f0:	6022      	str	r2, [r4, #0]
 80121f2:	68a2      	ldr	r2, [r4, #8]
 80121f4:	1e51      	subs	r1, r2, #1
 80121f6:	60a1      	str	r1, [r4, #8]
 80121f8:	b192      	cbz	r2, 8012220 <_scanf_i+0xb8>
 80121fa:	6832      	ldr	r2, [r6, #0]
 80121fc:	1c51      	adds	r1, r2, #1
 80121fe:	6031      	str	r1, [r6, #0]
 8012200:	7812      	ldrb	r2, [r2, #0]
 8012202:	f805 2b01 	strb.w	r2, [r5], #1
 8012206:	6872      	ldr	r2, [r6, #4]
 8012208:	3a01      	subs	r2, #1
 801220a:	2a00      	cmp	r2, #0
 801220c:	6072      	str	r2, [r6, #4]
 801220e:	dc07      	bgt.n	8012220 <_scanf_i+0xb8>
 8012210:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012214:	4631      	mov	r1, r6
 8012216:	4650      	mov	r0, sl
 8012218:	4790      	blx	r2
 801221a:	2800      	cmp	r0, #0
 801221c:	f040 8085 	bne.w	801232a <_scanf_i+0x1c2>
 8012220:	f10b 0b01 	add.w	fp, fp, #1
 8012224:	f1bb 0f03 	cmp.w	fp, #3
 8012228:	d1cb      	bne.n	80121c2 <_scanf_i+0x5a>
 801222a:	6863      	ldr	r3, [r4, #4]
 801222c:	b90b      	cbnz	r3, 8012232 <_scanf_i+0xca>
 801222e:	230a      	movs	r3, #10
 8012230:	6063      	str	r3, [r4, #4]
 8012232:	6863      	ldr	r3, [r4, #4]
 8012234:	4945      	ldr	r1, [pc, #276]	@ (801234c <_scanf_i+0x1e4>)
 8012236:	6960      	ldr	r0, [r4, #20]
 8012238:	1ac9      	subs	r1, r1, r3
 801223a:	f000 f9dd 	bl	80125f8 <__sccl>
 801223e:	f04f 0b00 	mov.w	fp, #0
 8012242:	68a3      	ldr	r3, [r4, #8]
 8012244:	6822      	ldr	r2, [r4, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d03d      	beq.n	80122c6 <_scanf_i+0x15e>
 801224a:	6831      	ldr	r1, [r6, #0]
 801224c:	6960      	ldr	r0, [r4, #20]
 801224e:	f891 c000 	ldrb.w	ip, [r1]
 8012252:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012256:	2800      	cmp	r0, #0
 8012258:	d035      	beq.n	80122c6 <_scanf_i+0x15e>
 801225a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801225e:	d124      	bne.n	80122aa <_scanf_i+0x142>
 8012260:	0510      	lsls	r0, r2, #20
 8012262:	d522      	bpl.n	80122aa <_scanf_i+0x142>
 8012264:	f10b 0b01 	add.w	fp, fp, #1
 8012268:	f1b9 0f00 	cmp.w	r9, #0
 801226c:	d003      	beq.n	8012276 <_scanf_i+0x10e>
 801226e:	3301      	adds	r3, #1
 8012270:	f109 39ff 	add.w	r9, r9, #4294967295
 8012274:	60a3      	str	r3, [r4, #8]
 8012276:	6873      	ldr	r3, [r6, #4]
 8012278:	3b01      	subs	r3, #1
 801227a:	2b00      	cmp	r3, #0
 801227c:	6073      	str	r3, [r6, #4]
 801227e:	dd1b      	ble.n	80122b8 <_scanf_i+0x150>
 8012280:	6833      	ldr	r3, [r6, #0]
 8012282:	3301      	adds	r3, #1
 8012284:	6033      	str	r3, [r6, #0]
 8012286:	68a3      	ldr	r3, [r4, #8]
 8012288:	3b01      	subs	r3, #1
 801228a:	60a3      	str	r3, [r4, #8]
 801228c:	e7d9      	b.n	8012242 <_scanf_i+0xda>
 801228e:	f1bb 0f02 	cmp.w	fp, #2
 8012292:	d1ae      	bne.n	80121f2 <_scanf_i+0x8a>
 8012294:	6822      	ldr	r2, [r4, #0]
 8012296:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801229a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801229e:	d1c4      	bne.n	801222a <_scanf_i+0xc2>
 80122a0:	2110      	movs	r1, #16
 80122a2:	6061      	str	r1, [r4, #4]
 80122a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80122a8:	e7a2      	b.n	80121f0 <_scanf_i+0x88>
 80122aa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80122ae:	6022      	str	r2, [r4, #0]
 80122b0:	780b      	ldrb	r3, [r1, #0]
 80122b2:	f805 3b01 	strb.w	r3, [r5], #1
 80122b6:	e7de      	b.n	8012276 <_scanf_i+0x10e>
 80122b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80122bc:	4631      	mov	r1, r6
 80122be:	4650      	mov	r0, sl
 80122c0:	4798      	blx	r3
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d0df      	beq.n	8012286 <_scanf_i+0x11e>
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	05d9      	lsls	r1, r3, #23
 80122ca:	d50d      	bpl.n	80122e8 <_scanf_i+0x180>
 80122cc:	42bd      	cmp	r5, r7
 80122ce:	d909      	bls.n	80122e4 <_scanf_i+0x17c>
 80122d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80122d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80122d8:	4632      	mov	r2, r6
 80122da:	4650      	mov	r0, sl
 80122dc:	4798      	blx	r3
 80122de:	f105 39ff 	add.w	r9, r5, #4294967295
 80122e2:	464d      	mov	r5, r9
 80122e4:	42bd      	cmp	r5, r7
 80122e6:	d028      	beq.n	801233a <_scanf_i+0x1d2>
 80122e8:	6822      	ldr	r2, [r4, #0]
 80122ea:	f012 0210 	ands.w	r2, r2, #16
 80122ee:	d113      	bne.n	8012318 <_scanf_i+0x1b0>
 80122f0:	702a      	strb	r2, [r5, #0]
 80122f2:	6863      	ldr	r3, [r4, #4]
 80122f4:	9e01      	ldr	r6, [sp, #4]
 80122f6:	4639      	mov	r1, r7
 80122f8:	4650      	mov	r0, sl
 80122fa:	47b0      	blx	r6
 80122fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012300:	6821      	ldr	r1, [r4, #0]
 8012302:	1d1a      	adds	r2, r3, #4
 8012304:	f8c8 2000 	str.w	r2, [r8]
 8012308:	f011 0f20 	tst.w	r1, #32
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	d00f      	beq.n	8012330 <_scanf_i+0x1c8>
 8012310:	6018      	str	r0, [r3, #0]
 8012312:	68e3      	ldr	r3, [r4, #12]
 8012314:	3301      	adds	r3, #1
 8012316:	60e3      	str	r3, [r4, #12]
 8012318:	6923      	ldr	r3, [r4, #16]
 801231a:	1bed      	subs	r5, r5, r7
 801231c:	445d      	add	r5, fp
 801231e:	442b      	add	r3, r5
 8012320:	6123      	str	r3, [r4, #16]
 8012322:	2000      	movs	r0, #0
 8012324:	b007      	add	sp, #28
 8012326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801232a:	f04f 0b00 	mov.w	fp, #0
 801232e:	e7ca      	b.n	80122c6 <_scanf_i+0x15e>
 8012330:	07ca      	lsls	r2, r1, #31
 8012332:	bf4c      	ite	mi
 8012334:	8018      	strhmi	r0, [r3, #0]
 8012336:	6018      	strpl	r0, [r3, #0]
 8012338:	e7eb      	b.n	8012312 <_scanf_i+0x1aa>
 801233a:	2001      	movs	r0, #1
 801233c:	e7f2      	b.n	8012324 <_scanf_i+0x1bc>
 801233e:	bf00      	nop
 8012340:	08013410 	.word	0x08013410
 8012344:	0800d8ed 	.word	0x0800d8ed
 8012348:	080117b1 	.word	0x080117b1
 801234c:	0801386c 	.word	0x0801386c

08012350 <__sflush_r>:
 8012350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012358:	0716      	lsls	r6, r2, #28
 801235a:	4605      	mov	r5, r0
 801235c:	460c      	mov	r4, r1
 801235e:	d454      	bmi.n	801240a <__sflush_r+0xba>
 8012360:	684b      	ldr	r3, [r1, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	dc02      	bgt.n	801236c <__sflush_r+0x1c>
 8012366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012368:	2b00      	cmp	r3, #0
 801236a:	dd48      	ble.n	80123fe <__sflush_r+0xae>
 801236c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801236e:	2e00      	cmp	r6, #0
 8012370:	d045      	beq.n	80123fe <__sflush_r+0xae>
 8012372:	2300      	movs	r3, #0
 8012374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012378:	682f      	ldr	r7, [r5, #0]
 801237a:	6a21      	ldr	r1, [r4, #32]
 801237c:	602b      	str	r3, [r5, #0]
 801237e:	d030      	beq.n	80123e2 <__sflush_r+0x92>
 8012380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	0759      	lsls	r1, r3, #29
 8012386:	d505      	bpl.n	8012394 <__sflush_r+0x44>
 8012388:	6863      	ldr	r3, [r4, #4]
 801238a:	1ad2      	subs	r2, r2, r3
 801238c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801238e:	b10b      	cbz	r3, 8012394 <__sflush_r+0x44>
 8012390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012392:	1ad2      	subs	r2, r2, r3
 8012394:	2300      	movs	r3, #0
 8012396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012398:	6a21      	ldr	r1, [r4, #32]
 801239a:	4628      	mov	r0, r5
 801239c:	47b0      	blx	r6
 801239e:	1c43      	adds	r3, r0, #1
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	d106      	bne.n	80123b2 <__sflush_r+0x62>
 80123a4:	6829      	ldr	r1, [r5, #0]
 80123a6:	291d      	cmp	r1, #29
 80123a8:	d82b      	bhi.n	8012402 <__sflush_r+0xb2>
 80123aa:	4a2a      	ldr	r2, [pc, #168]	@ (8012454 <__sflush_r+0x104>)
 80123ac:	40ca      	lsrs	r2, r1
 80123ae:	07d6      	lsls	r6, r2, #31
 80123b0:	d527      	bpl.n	8012402 <__sflush_r+0xb2>
 80123b2:	2200      	movs	r2, #0
 80123b4:	6062      	str	r2, [r4, #4]
 80123b6:	04d9      	lsls	r1, r3, #19
 80123b8:	6922      	ldr	r2, [r4, #16]
 80123ba:	6022      	str	r2, [r4, #0]
 80123bc:	d504      	bpl.n	80123c8 <__sflush_r+0x78>
 80123be:	1c42      	adds	r2, r0, #1
 80123c0:	d101      	bne.n	80123c6 <__sflush_r+0x76>
 80123c2:	682b      	ldr	r3, [r5, #0]
 80123c4:	b903      	cbnz	r3, 80123c8 <__sflush_r+0x78>
 80123c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80123c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123ca:	602f      	str	r7, [r5, #0]
 80123cc:	b1b9      	cbz	r1, 80123fe <__sflush_r+0xae>
 80123ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123d2:	4299      	cmp	r1, r3
 80123d4:	d002      	beq.n	80123dc <__sflush_r+0x8c>
 80123d6:	4628      	mov	r0, r5
 80123d8:	f7fe f83a 	bl	8010450 <_free_r>
 80123dc:	2300      	movs	r3, #0
 80123de:	6363      	str	r3, [r4, #52]	@ 0x34
 80123e0:	e00d      	b.n	80123fe <__sflush_r+0xae>
 80123e2:	2301      	movs	r3, #1
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b0      	blx	r6
 80123e8:	4602      	mov	r2, r0
 80123ea:	1c50      	adds	r0, r2, #1
 80123ec:	d1c9      	bne.n	8012382 <__sflush_r+0x32>
 80123ee:	682b      	ldr	r3, [r5, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d0c6      	beq.n	8012382 <__sflush_r+0x32>
 80123f4:	2b1d      	cmp	r3, #29
 80123f6:	d001      	beq.n	80123fc <__sflush_r+0xac>
 80123f8:	2b16      	cmp	r3, #22
 80123fa:	d11e      	bne.n	801243a <__sflush_r+0xea>
 80123fc:	602f      	str	r7, [r5, #0]
 80123fe:	2000      	movs	r0, #0
 8012400:	e022      	b.n	8012448 <__sflush_r+0xf8>
 8012402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012406:	b21b      	sxth	r3, r3
 8012408:	e01b      	b.n	8012442 <__sflush_r+0xf2>
 801240a:	690f      	ldr	r7, [r1, #16]
 801240c:	2f00      	cmp	r7, #0
 801240e:	d0f6      	beq.n	80123fe <__sflush_r+0xae>
 8012410:	0793      	lsls	r3, r2, #30
 8012412:	680e      	ldr	r6, [r1, #0]
 8012414:	bf08      	it	eq
 8012416:	694b      	ldreq	r3, [r1, #20]
 8012418:	600f      	str	r7, [r1, #0]
 801241a:	bf18      	it	ne
 801241c:	2300      	movne	r3, #0
 801241e:	eba6 0807 	sub.w	r8, r6, r7
 8012422:	608b      	str	r3, [r1, #8]
 8012424:	f1b8 0f00 	cmp.w	r8, #0
 8012428:	dde9      	ble.n	80123fe <__sflush_r+0xae>
 801242a:	6a21      	ldr	r1, [r4, #32]
 801242c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801242e:	4643      	mov	r3, r8
 8012430:	463a      	mov	r2, r7
 8012432:	4628      	mov	r0, r5
 8012434:	47b0      	blx	r6
 8012436:	2800      	cmp	r0, #0
 8012438:	dc08      	bgt.n	801244c <__sflush_r+0xfc>
 801243a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801243e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012442:	81a3      	strh	r3, [r4, #12]
 8012444:	f04f 30ff 	mov.w	r0, #4294967295
 8012448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801244c:	4407      	add	r7, r0
 801244e:	eba8 0800 	sub.w	r8, r8, r0
 8012452:	e7e7      	b.n	8012424 <__sflush_r+0xd4>
 8012454:	20400001 	.word	0x20400001

08012458 <_fflush_r>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	690b      	ldr	r3, [r1, #16]
 801245c:	4605      	mov	r5, r0
 801245e:	460c      	mov	r4, r1
 8012460:	b913      	cbnz	r3, 8012468 <_fflush_r+0x10>
 8012462:	2500      	movs	r5, #0
 8012464:	4628      	mov	r0, r5
 8012466:	bd38      	pop	{r3, r4, r5, pc}
 8012468:	b118      	cbz	r0, 8012472 <_fflush_r+0x1a>
 801246a:	6a03      	ldr	r3, [r0, #32]
 801246c:	b90b      	cbnz	r3, 8012472 <_fflush_r+0x1a>
 801246e:	f7fb ff2b 	bl	800e2c8 <__sinit>
 8012472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d0f3      	beq.n	8012462 <_fflush_r+0xa>
 801247a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801247c:	07d0      	lsls	r0, r2, #31
 801247e:	d404      	bmi.n	801248a <_fflush_r+0x32>
 8012480:	0599      	lsls	r1, r3, #22
 8012482:	d402      	bmi.n	801248a <_fflush_r+0x32>
 8012484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012486:	f7fd f941 	bl	800f70c <__retarget_lock_acquire_recursive>
 801248a:	4628      	mov	r0, r5
 801248c:	4621      	mov	r1, r4
 801248e:	f7ff ff5f 	bl	8012350 <__sflush_r>
 8012492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012494:	07da      	lsls	r2, r3, #31
 8012496:	4605      	mov	r5, r0
 8012498:	d4e4      	bmi.n	8012464 <_fflush_r+0xc>
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	059b      	lsls	r3, r3, #22
 801249e:	d4e1      	bmi.n	8012464 <_fflush_r+0xc>
 80124a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124a2:	f7fd f935 	bl	800f710 <__retarget_lock_release_recursive>
 80124a6:	e7dd      	b.n	8012464 <_fflush_r+0xc>

080124a8 <fiprintf>:
 80124a8:	b40e      	push	{r1, r2, r3}
 80124aa:	b503      	push	{r0, r1, lr}
 80124ac:	4601      	mov	r1, r0
 80124ae:	ab03      	add	r3, sp, #12
 80124b0:	4805      	ldr	r0, [pc, #20]	@ (80124c8 <fiprintf+0x20>)
 80124b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80124b6:	6800      	ldr	r0, [r0, #0]
 80124b8:	9301      	str	r3, [sp, #4]
 80124ba:	f7ff fce3 	bl	8011e84 <_vfiprintf_r>
 80124be:	b002      	add	sp, #8
 80124c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80124c4:	b003      	add	sp, #12
 80124c6:	4770      	bx	lr
 80124c8:	200001a4 	.word	0x200001a4

080124cc <__swhatbuf_r>:
 80124cc:	b570      	push	{r4, r5, r6, lr}
 80124ce:	460c      	mov	r4, r1
 80124d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d4:	2900      	cmp	r1, #0
 80124d6:	b096      	sub	sp, #88	@ 0x58
 80124d8:	4615      	mov	r5, r2
 80124da:	461e      	mov	r6, r3
 80124dc:	da0d      	bge.n	80124fa <__swhatbuf_r+0x2e>
 80124de:	89a3      	ldrh	r3, [r4, #12]
 80124e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80124e4:	f04f 0100 	mov.w	r1, #0
 80124e8:	bf14      	ite	ne
 80124ea:	2340      	movne	r3, #64	@ 0x40
 80124ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80124f0:	2000      	movs	r0, #0
 80124f2:	6031      	str	r1, [r6, #0]
 80124f4:	602b      	str	r3, [r5, #0]
 80124f6:	b016      	add	sp, #88	@ 0x58
 80124f8:	bd70      	pop	{r4, r5, r6, pc}
 80124fa:	466a      	mov	r2, sp
 80124fc:	f000 f9e2 	bl	80128c4 <_fstat_r>
 8012500:	2800      	cmp	r0, #0
 8012502:	dbec      	blt.n	80124de <__swhatbuf_r+0x12>
 8012504:	9901      	ldr	r1, [sp, #4]
 8012506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801250a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801250e:	4259      	negs	r1, r3
 8012510:	4159      	adcs	r1, r3
 8012512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012516:	e7eb      	b.n	80124f0 <__swhatbuf_r+0x24>

08012518 <__smakebuf_r>:
 8012518:	898b      	ldrh	r3, [r1, #12]
 801251a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801251c:	079d      	lsls	r5, r3, #30
 801251e:	4606      	mov	r6, r0
 8012520:	460c      	mov	r4, r1
 8012522:	d507      	bpl.n	8012534 <__smakebuf_r+0x1c>
 8012524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	6123      	str	r3, [r4, #16]
 801252c:	2301      	movs	r3, #1
 801252e:	6163      	str	r3, [r4, #20]
 8012530:	b003      	add	sp, #12
 8012532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012534:	ab01      	add	r3, sp, #4
 8012536:	466a      	mov	r2, sp
 8012538:	f7ff ffc8 	bl	80124cc <__swhatbuf_r>
 801253c:	9f00      	ldr	r7, [sp, #0]
 801253e:	4605      	mov	r5, r0
 8012540:	4639      	mov	r1, r7
 8012542:	4630      	mov	r0, r6
 8012544:	f7fe fb7e 	bl	8010c44 <_malloc_r>
 8012548:	b948      	cbnz	r0, 801255e <__smakebuf_r+0x46>
 801254a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801254e:	059a      	lsls	r2, r3, #22
 8012550:	d4ee      	bmi.n	8012530 <__smakebuf_r+0x18>
 8012552:	f023 0303 	bic.w	r3, r3, #3
 8012556:	f043 0302 	orr.w	r3, r3, #2
 801255a:	81a3      	strh	r3, [r4, #12]
 801255c:	e7e2      	b.n	8012524 <__smakebuf_r+0xc>
 801255e:	89a3      	ldrh	r3, [r4, #12]
 8012560:	6020      	str	r0, [r4, #0]
 8012562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012566:	81a3      	strh	r3, [r4, #12]
 8012568:	9b01      	ldr	r3, [sp, #4]
 801256a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801256e:	b15b      	cbz	r3, 8012588 <__smakebuf_r+0x70>
 8012570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012574:	4630      	mov	r0, r6
 8012576:	f000 f9b7 	bl	80128e8 <_isatty_r>
 801257a:	b128      	cbz	r0, 8012588 <__smakebuf_r+0x70>
 801257c:	89a3      	ldrh	r3, [r4, #12]
 801257e:	f023 0303 	bic.w	r3, r3, #3
 8012582:	f043 0301 	orr.w	r3, r3, #1
 8012586:	81a3      	strh	r3, [r4, #12]
 8012588:	89a3      	ldrh	r3, [r4, #12]
 801258a:	431d      	orrs	r5, r3
 801258c:	81a5      	strh	r5, [r4, #12]
 801258e:	e7cf      	b.n	8012530 <__smakebuf_r+0x18>

08012590 <_putc_r>:
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	460d      	mov	r5, r1
 8012594:	4614      	mov	r4, r2
 8012596:	4606      	mov	r6, r0
 8012598:	b118      	cbz	r0, 80125a2 <_putc_r+0x12>
 801259a:	6a03      	ldr	r3, [r0, #32]
 801259c:	b90b      	cbnz	r3, 80125a2 <_putc_r+0x12>
 801259e:	f7fb fe93 	bl	800e2c8 <__sinit>
 80125a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125a4:	07d8      	lsls	r0, r3, #31
 80125a6:	d405      	bmi.n	80125b4 <_putc_r+0x24>
 80125a8:	89a3      	ldrh	r3, [r4, #12]
 80125aa:	0599      	lsls	r1, r3, #22
 80125ac:	d402      	bmi.n	80125b4 <_putc_r+0x24>
 80125ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125b0:	f7fd f8ac 	bl	800f70c <__retarget_lock_acquire_recursive>
 80125b4:	68a3      	ldr	r3, [r4, #8]
 80125b6:	3b01      	subs	r3, #1
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	60a3      	str	r3, [r4, #8]
 80125bc:	da05      	bge.n	80125ca <_putc_r+0x3a>
 80125be:	69a2      	ldr	r2, [r4, #24]
 80125c0:	4293      	cmp	r3, r2
 80125c2:	db12      	blt.n	80125ea <_putc_r+0x5a>
 80125c4:	b2eb      	uxtb	r3, r5
 80125c6:	2b0a      	cmp	r3, #10
 80125c8:	d00f      	beq.n	80125ea <_putc_r+0x5a>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	1c5a      	adds	r2, r3, #1
 80125ce:	6022      	str	r2, [r4, #0]
 80125d0:	701d      	strb	r5, [r3, #0]
 80125d2:	b2ed      	uxtb	r5, r5
 80125d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125d6:	07da      	lsls	r2, r3, #31
 80125d8:	d405      	bmi.n	80125e6 <_putc_r+0x56>
 80125da:	89a3      	ldrh	r3, [r4, #12]
 80125dc:	059b      	lsls	r3, r3, #22
 80125de:	d402      	bmi.n	80125e6 <_putc_r+0x56>
 80125e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125e2:	f7fd f895 	bl	800f710 <__retarget_lock_release_recursive>
 80125e6:	4628      	mov	r0, r5
 80125e8:	bd70      	pop	{r4, r5, r6, pc}
 80125ea:	4629      	mov	r1, r5
 80125ec:	4622      	mov	r2, r4
 80125ee:	4630      	mov	r0, r6
 80125f0:	f7fb ffe1 	bl	800e5b6 <__swbuf_r>
 80125f4:	4605      	mov	r5, r0
 80125f6:	e7ed      	b.n	80125d4 <_putc_r+0x44>

080125f8 <__sccl>:
 80125f8:	b570      	push	{r4, r5, r6, lr}
 80125fa:	780b      	ldrb	r3, [r1, #0]
 80125fc:	4604      	mov	r4, r0
 80125fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8012600:	bf0b      	itete	eq
 8012602:	784b      	ldrbeq	r3, [r1, #1]
 8012604:	1c4a      	addne	r2, r1, #1
 8012606:	1c8a      	addeq	r2, r1, #2
 8012608:	2100      	movne	r1, #0
 801260a:	bf08      	it	eq
 801260c:	2101      	moveq	r1, #1
 801260e:	3801      	subs	r0, #1
 8012610:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012614:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012618:	42a8      	cmp	r0, r5
 801261a:	d1fb      	bne.n	8012614 <__sccl+0x1c>
 801261c:	b90b      	cbnz	r3, 8012622 <__sccl+0x2a>
 801261e:	1e50      	subs	r0, r2, #1
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	f081 0101 	eor.w	r1, r1, #1
 8012626:	54e1      	strb	r1, [r4, r3]
 8012628:	4610      	mov	r0, r2
 801262a:	4602      	mov	r2, r0
 801262c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012630:	2d2d      	cmp	r5, #45	@ 0x2d
 8012632:	d005      	beq.n	8012640 <__sccl+0x48>
 8012634:	2d5d      	cmp	r5, #93	@ 0x5d
 8012636:	d016      	beq.n	8012666 <__sccl+0x6e>
 8012638:	2d00      	cmp	r5, #0
 801263a:	d0f1      	beq.n	8012620 <__sccl+0x28>
 801263c:	462b      	mov	r3, r5
 801263e:	e7f2      	b.n	8012626 <__sccl+0x2e>
 8012640:	7846      	ldrb	r6, [r0, #1]
 8012642:	2e5d      	cmp	r6, #93	@ 0x5d
 8012644:	d0fa      	beq.n	801263c <__sccl+0x44>
 8012646:	42b3      	cmp	r3, r6
 8012648:	dcf8      	bgt.n	801263c <__sccl+0x44>
 801264a:	3002      	adds	r0, #2
 801264c:	461a      	mov	r2, r3
 801264e:	3201      	adds	r2, #1
 8012650:	4296      	cmp	r6, r2
 8012652:	54a1      	strb	r1, [r4, r2]
 8012654:	dcfb      	bgt.n	801264e <__sccl+0x56>
 8012656:	1af2      	subs	r2, r6, r3
 8012658:	3a01      	subs	r2, #1
 801265a:	1c5d      	adds	r5, r3, #1
 801265c:	42b3      	cmp	r3, r6
 801265e:	bfa8      	it	ge
 8012660:	2200      	movge	r2, #0
 8012662:	18ab      	adds	r3, r5, r2
 8012664:	e7e1      	b.n	801262a <__sccl+0x32>
 8012666:	4610      	mov	r0, r2
 8012668:	e7da      	b.n	8012620 <__sccl+0x28>

0801266a <__submore>:
 801266a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266e:	460c      	mov	r4, r1
 8012670:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012676:	4299      	cmp	r1, r3
 8012678:	d11d      	bne.n	80126b6 <__submore+0x4c>
 801267a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801267e:	f7fe fae1 	bl	8010c44 <_malloc_r>
 8012682:	b918      	cbnz	r0, 801268c <__submore+0x22>
 8012684:	f04f 30ff 	mov.w	r0, #4294967295
 8012688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801268c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012690:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012692:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012696:	6360      	str	r0, [r4, #52]	@ 0x34
 8012698:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801269c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80126a0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80126a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80126a8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80126ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80126b0:	6020      	str	r0, [r4, #0]
 80126b2:	2000      	movs	r0, #0
 80126b4:	e7e8      	b.n	8012688 <__submore+0x1e>
 80126b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80126b8:	0077      	lsls	r7, r6, #1
 80126ba:	463a      	mov	r2, r7
 80126bc:	f000 f95c 	bl	8012978 <_realloc_r>
 80126c0:	4605      	mov	r5, r0
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d0de      	beq.n	8012684 <__submore+0x1a>
 80126c6:	eb00 0806 	add.w	r8, r0, r6
 80126ca:	4601      	mov	r1, r0
 80126cc:	4632      	mov	r2, r6
 80126ce:	4640      	mov	r0, r8
 80126d0:	f7fd f827 	bl	800f722 <memcpy>
 80126d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80126d8:	f8c4 8000 	str.w	r8, [r4]
 80126dc:	e7e9      	b.n	80126b2 <__submore+0x48>
	...

080126e0 <asctime>:
 80126e0:	4b0d      	ldr	r3, [pc, #52]	@ (8012718 <asctime+0x38>)
 80126e2:	b570      	push	{r4, r5, r6, lr}
 80126e4:	681d      	ldr	r5, [r3, #0]
 80126e6:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 80126e8:	4604      	mov	r4, r0
 80126ea:	b976      	cbnz	r6, 801270a <asctime+0x2a>
 80126ec:	201a      	movs	r0, #26
 80126ee:	f7fe fa77 	bl	8010be0 <malloc>
 80126f2:	4602      	mov	r2, r0
 80126f4:	63a8      	str	r0, [r5, #56]	@ 0x38
 80126f6:	b920      	cbnz	r0, 8012702 <asctime+0x22>
 80126f8:	4b08      	ldr	r3, [pc, #32]	@ (801271c <asctime+0x3c>)
 80126fa:	4809      	ldr	r0, [pc, #36]	@ (8012720 <asctime+0x40>)
 80126fc:	213b      	movs	r1, #59	@ 0x3b
 80126fe:	f7fd f827 	bl	800f750 <__assert_func>
 8012702:	221a      	movs	r2, #26
 8012704:	4631      	mov	r1, r6
 8012706:	f7fc f815 	bl	800e734 <memset>
 801270a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 801270c:	4620      	mov	r0, r4
 801270e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012712:	f000 b807 	b.w	8012724 <asctime_r>
 8012716:	bf00      	nop
 8012718:	200001a4 	.word	0x200001a4
 801271c:	080135c0 	.word	0x080135c0
 8012720:	08013877 	.word	0x08013877

08012724 <asctime_r>:
 8012724:	b510      	push	{r4, lr}
 8012726:	460c      	mov	r4, r1
 8012728:	6941      	ldr	r1, [r0, #20]
 801272a:	6903      	ldr	r3, [r0, #16]
 801272c:	6982      	ldr	r2, [r0, #24]
 801272e:	b086      	sub	sp, #24
 8012730:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 8012734:	9104      	str	r1, [sp, #16]
 8012736:	6801      	ldr	r1, [r0, #0]
 8012738:	9103      	str	r1, [sp, #12]
 801273a:	6841      	ldr	r1, [r0, #4]
 801273c:	9102      	str	r1, [sp, #8]
 801273e:	6881      	ldr	r1, [r0, #8]
 8012740:	9101      	str	r1, [sp, #4]
 8012742:	68c1      	ldr	r1, [r0, #12]
 8012744:	9100      	str	r1, [sp, #0]
 8012746:	4907      	ldr	r1, [pc, #28]	@ (8012764 <asctime_r+0x40>)
 8012748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801274c:	440b      	add	r3, r1
 801274e:	4906      	ldr	r1, [pc, #24]	@ (8012768 <asctime_r+0x44>)
 8012750:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012754:	440a      	add	r2, r1
 8012756:	4620      	mov	r0, r4
 8012758:	4904      	ldr	r1, [pc, #16]	@ (801276c <asctime_r+0x48>)
 801275a:	f7fb fe99 	bl	800e490 <siprintf>
 801275e:	4620      	mov	r0, r4
 8012760:	b006      	add	sp, #24
 8012762:	bd10      	pop	{r4, pc}
 8012764:	08013c00 	.word	0x08013c00
 8012768:	08013c24 	.word	0x08013c24
 801276c:	080138d0 	.word	0x080138d0

08012770 <__gettzinfo>:
 8012770:	4800      	ldr	r0, [pc, #0]	@ (8012774 <__gettzinfo+0x4>)
 8012772:	4770      	bx	lr
 8012774:	200001f8 	.word	0x200001f8

08012778 <gmtime_r>:
 8012778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801277c:	4a4d      	ldr	r2, [pc, #308]	@ (80128b4 <gmtime_r+0x13c>)
 801277e:	460c      	mov	r4, r1
 8012780:	2300      	movs	r3, #0
 8012782:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012786:	f7ee fa97 	bl	8000cb8 <__aeabi_ldivmod>
 801278a:	2a00      	cmp	r2, #0
 801278c:	bfbc      	itt	lt
 801278e:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8012792:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8012796:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801279a:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801279e:	fbb2 f3f1 	udiv	r3, r2, r1
 80127a2:	fb01 2213 	mls	r2, r1, r3, r2
 80127a6:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80127aa:	bfac      	ite	ge
 80127ac:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80127b0:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80127b4:	60a3      	str	r3, [r4, #8]
 80127b6:	fbb2 f3f1 	udiv	r3, r2, r1
 80127ba:	fb01 2213 	mls	r2, r1, r3, r2
 80127be:	6063      	str	r3, [r4, #4]
 80127c0:	6022      	str	r2, [r4, #0]
 80127c2:	1cc3      	adds	r3, r0, #3
 80127c4:	2207      	movs	r2, #7
 80127c6:	fb93 f2f2 	sdiv	r2, r3, r2
 80127ca:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80127ce:	1a9b      	subs	r3, r3, r2
 80127d0:	4939      	ldr	r1, [pc, #228]	@ (80128b8 <gmtime_r+0x140>)
 80127d2:	d555      	bpl.n	8012880 <gmtime_r+0x108>
 80127d4:	3307      	adds	r3, #7
 80127d6:	61a3      	str	r3, [r4, #24]
 80127d8:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 80127dc:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80127e0:	fb93 f1f1 	sdiv	r1, r3, r1
 80127e4:	4b35      	ldr	r3, [pc, #212]	@ (80128bc <gmtime_r+0x144>)
 80127e6:	fb03 0001 	mla	r0, r3, r1, r0
 80127ea:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 80127ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80127f2:	4403      	add	r3, r0
 80127f4:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 80127f8:	fbb0 f2fc 	udiv	r2, r0, ip
 80127fc:	1a9b      	subs	r3, r3, r2
 80127fe:	f240 176d 	movw	r7, #365	@ 0x16d
 8012802:	4a2f      	ldr	r2, [pc, #188]	@ (80128c0 <gmtime_r+0x148>)
 8012804:	fbb0 f2f2 	udiv	r2, r0, r2
 8012808:	2664      	movs	r6, #100	@ 0x64
 801280a:	1a9b      	subs	r3, r3, r2
 801280c:	fbb3 f2f7 	udiv	r2, r3, r7
 8012810:	fbb3 f3fc 	udiv	r3, r3, ip
 8012814:	fbb2 f5f6 	udiv	r5, r2, r6
 8012818:	1aeb      	subs	r3, r5, r3
 801281a:	4403      	add	r3, r0
 801281c:	fb07 3312 	mls	r3, r7, r2, r3
 8012820:	2099      	movs	r0, #153	@ 0x99
 8012822:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8012826:	3702      	adds	r7, #2
 8012828:	f103 0e01 	add.w	lr, r3, #1
 801282c:	fbb7 fcf0 	udiv	ip, r7, r0
 8012830:	fb00 f00c 	mul.w	r0, r0, ip
 8012834:	3002      	adds	r0, #2
 8012836:	f04f 0805 	mov.w	r8, #5
 801283a:	fbb0 f0f8 	udiv	r0, r0, r8
 801283e:	ebae 0000 	sub.w	r0, lr, r0
 8012842:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8012846:	4577      	cmp	r7, lr
 8012848:	bf8c      	ite	hi
 801284a:	f06f 0709 	mvnhi.w	r7, #9
 801284e:	2702      	movls	r7, #2
 8012850:	4467      	add	r7, ip
 8012852:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8012856:	fb0c 2101 	mla	r1, ip, r1, r2
 801285a:	2f01      	cmp	r7, #1
 801285c:	bf98      	it	ls
 801285e:	3101      	addls	r1, #1
 8012860:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8012864:	d312      	bcc.n	801288c <gmtime_r+0x114>
 8012866:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801286a:	61e3      	str	r3, [r4, #28]
 801286c:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8012870:	2300      	movs	r3, #0
 8012872:	60e0      	str	r0, [r4, #12]
 8012874:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8012878:	6223      	str	r3, [r4, #32]
 801287a:	4620      	mov	r0, r4
 801287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012880:	2800      	cmp	r0, #0
 8012882:	61a3      	str	r3, [r4, #24]
 8012884:	dba8      	blt.n	80127d8 <gmtime_r+0x60>
 8012886:	fb90 f1f1 	sdiv	r1, r0, r1
 801288a:	e7ab      	b.n	80127e4 <gmtime_r+0x6c>
 801288c:	f012 0f03 	tst.w	r2, #3
 8012890:	d102      	bne.n	8012898 <gmtime_r+0x120>
 8012892:	fb06 2515 	mls	r5, r6, r5, r2
 8012896:	b95d      	cbnz	r5, 80128b0 <gmtime_r+0x138>
 8012898:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 801289c:	fbb2 f6f5 	udiv	r6, r2, r5
 80128a0:	fb05 2216 	mls	r2, r5, r6, r2
 80128a4:	fab2 f282 	clz	r2, r2
 80128a8:	0952      	lsrs	r2, r2, #5
 80128aa:	333b      	adds	r3, #59	@ 0x3b
 80128ac:	4413      	add	r3, r2
 80128ae:	e7dc      	b.n	801286a <gmtime_r+0xf2>
 80128b0:	2201      	movs	r2, #1
 80128b2:	e7fa      	b.n	80128aa <gmtime_r+0x132>
 80128b4:	00015180 	.word	0x00015180
 80128b8:	00023ab1 	.word	0x00023ab1
 80128bc:	fffdc54f 	.word	0xfffdc54f
 80128c0:	00023ab0 	.word	0x00023ab0

080128c4 <_fstat_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4d07      	ldr	r5, [pc, #28]	@ (80128e4 <_fstat_r+0x20>)
 80128c8:	2300      	movs	r3, #0
 80128ca:	4604      	mov	r4, r0
 80128cc:	4608      	mov	r0, r1
 80128ce:	4611      	mov	r1, r2
 80128d0:	602b      	str	r3, [r5, #0]
 80128d2:	f7f2 f8db 	bl	8004a8c <_fstat>
 80128d6:	1c43      	adds	r3, r0, #1
 80128d8:	d102      	bne.n	80128e0 <_fstat_r+0x1c>
 80128da:	682b      	ldr	r3, [r5, #0]
 80128dc:	b103      	cbz	r3, 80128e0 <_fstat_r+0x1c>
 80128de:	6023      	str	r3, [r4, #0]
 80128e0:	bd38      	pop	{r3, r4, r5, pc}
 80128e2:	bf00      	nop
 80128e4:	20006f6c 	.word	0x20006f6c

080128e8 <_isatty_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4d06      	ldr	r5, [pc, #24]	@ (8012904 <_isatty_r+0x1c>)
 80128ec:	2300      	movs	r3, #0
 80128ee:	4604      	mov	r4, r0
 80128f0:	4608      	mov	r0, r1
 80128f2:	602b      	str	r3, [r5, #0]
 80128f4:	f7f2 f8da 	bl	8004aac <_isatty>
 80128f8:	1c43      	adds	r3, r0, #1
 80128fa:	d102      	bne.n	8012902 <_isatty_r+0x1a>
 80128fc:	682b      	ldr	r3, [r5, #0]
 80128fe:	b103      	cbz	r3, 8012902 <_isatty_r+0x1a>
 8012900:	6023      	str	r3, [r4, #0]
 8012902:	bd38      	pop	{r3, r4, r5, pc}
 8012904:	20006f6c 	.word	0x20006f6c

08012908 <_sbrk_r>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	4d06      	ldr	r5, [pc, #24]	@ (8012924 <_sbrk_r+0x1c>)
 801290c:	2300      	movs	r3, #0
 801290e:	4604      	mov	r4, r0
 8012910:	4608      	mov	r0, r1
 8012912:	602b      	str	r3, [r5, #0]
 8012914:	f7f2 f8f8 	bl	8004b08 <_sbrk>
 8012918:	1c43      	adds	r3, r0, #1
 801291a:	d102      	bne.n	8012922 <_sbrk_r+0x1a>
 801291c:	682b      	ldr	r3, [r5, #0]
 801291e:	b103      	cbz	r3, 8012922 <_sbrk_r+0x1a>
 8012920:	6023      	str	r3, [r4, #0]
 8012922:	bd38      	pop	{r3, r4, r5, pc}
 8012924:	20006f6c 	.word	0x20006f6c

08012928 <abort>:
 8012928:	b508      	push	{r3, lr}
 801292a:	2006      	movs	r0, #6
 801292c:	f000 f87a 	bl	8012a24 <raise>
 8012930:	2001      	movs	r0, #1
 8012932:	f7f2 f85b 	bl	80049ec <_exit>

08012936 <_calloc_r>:
 8012936:	b570      	push	{r4, r5, r6, lr}
 8012938:	fba1 5402 	umull	r5, r4, r1, r2
 801293c:	b934      	cbnz	r4, 801294c <_calloc_r+0x16>
 801293e:	4629      	mov	r1, r5
 8012940:	f7fe f980 	bl	8010c44 <_malloc_r>
 8012944:	4606      	mov	r6, r0
 8012946:	b928      	cbnz	r0, 8012954 <_calloc_r+0x1e>
 8012948:	4630      	mov	r0, r6
 801294a:	bd70      	pop	{r4, r5, r6, pc}
 801294c:	220c      	movs	r2, #12
 801294e:	6002      	str	r2, [r0, #0]
 8012950:	2600      	movs	r6, #0
 8012952:	e7f9      	b.n	8012948 <_calloc_r+0x12>
 8012954:	462a      	mov	r2, r5
 8012956:	4621      	mov	r1, r4
 8012958:	f7fb feec 	bl	800e734 <memset>
 801295c:	e7f4      	b.n	8012948 <_calloc_r+0x12>
	...

08012960 <__env_lock>:
 8012960:	4801      	ldr	r0, [pc, #4]	@ (8012968 <__env_lock+0x8>)
 8012962:	f7fc bed3 	b.w	800f70c <__retarget_lock_acquire_recursive>
 8012966:	bf00      	nop
 8012968:	20006f71 	.word	0x20006f71

0801296c <__env_unlock>:
 801296c:	4801      	ldr	r0, [pc, #4]	@ (8012974 <__env_unlock+0x8>)
 801296e:	f7fc becf 	b.w	800f710 <__retarget_lock_release_recursive>
 8012972:	bf00      	nop
 8012974:	20006f71 	.word	0x20006f71

08012978 <_realloc_r>:
 8012978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	4607      	mov	r7, r0
 801297e:	4614      	mov	r4, r2
 8012980:	460d      	mov	r5, r1
 8012982:	b921      	cbnz	r1, 801298e <_realloc_r+0x16>
 8012984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012988:	4611      	mov	r1, r2
 801298a:	f7fe b95b 	b.w	8010c44 <_malloc_r>
 801298e:	b92a      	cbnz	r2, 801299c <_realloc_r+0x24>
 8012990:	f7fd fd5e 	bl	8010450 <_free_r>
 8012994:	4625      	mov	r5, r4
 8012996:	4628      	mov	r0, r5
 8012998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801299c:	f000 f85e 	bl	8012a5c <_malloc_usable_size_r>
 80129a0:	4284      	cmp	r4, r0
 80129a2:	4606      	mov	r6, r0
 80129a4:	d802      	bhi.n	80129ac <_realloc_r+0x34>
 80129a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80129aa:	d8f4      	bhi.n	8012996 <_realloc_r+0x1e>
 80129ac:	4621      	mov	r1, r4
 80129ae:	4638      	mov	r0, r7
 80129b0:	f7fe f948 	bl	8010c44 <_malloc_r>
 80129b4:	4680      	mov	r8, r0
 80129b6:	b908      	cbnz	r0, 80129bc <_realloc_r+0x44>
 80129b8:	4645      	mov	r5, r8
 80129ba:	e7ec      	b.n	8012996 <_realloc_r+0x1e>
 80129bc:	42b4      	cmp	r4, r6
 80129be:	4622      	mov	r2, r4
 80129c0:	4629      	mov	r1, r5
 80129c2:	bf28      	it	cs
 80129c4:	4632      	movcs	r2, r6
 80129c6:	f7fc feac 	bl	800f722 <memcpy>
 80129ca:	4629      	mov	r1, r5
 80129cc:	4638      	mov	r0, r7
 80129ce:	f7fd fd3f 	bl	8010450 <_free_r>
 80129d2:	e7f1      	b.n	80129b8 <_realloc_r+0x40>

080129d4 <_raise_r>:
 80129d4:	291f      	cmp	r1, #31
 80129d6:	b538      	push	{r3, r4, r5, lr}
 80129d8:	4605      	mov	r5, r0
 80129da:	460c      	mov	r4, r1
 80129dc:	d904      	bls.n	80129e8 <_raise_r+0x14>
 80129de:	2316      	movs	r3, #22
 80129e0:	6003      	str	r3, [r0, #0]
 80129e2:	f04f 30ff 	mov.w	r0, #4294967295
 80129e6:	bd38      	pop	{r3, r4, r5, pc}
 80129e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80129ea:	b112      	cbz	r2, 80129f2 <_raise_r+0x1e>
 80129ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129f0:	b94b      	cbnz	r3, 8012a06 <_raise_r+0x32>
 80129f2:	4628      	mov	r0, r5
 80129f4:	f000 f830 	bl	8012a58 <_getpid_r>
 80129f8:	4622      	mov	r2, r4
 80129fa:	4601      	mov	r1, r0
 80129fc:	4628      	mov	r0, r5
 80129fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a02:	f000 b817 	b.w	8012a34 <_kill_r>
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d00a      	beq.n	8012a20 <_raise_r+0x4c>
 8012a0a:	1c59      	adds	r1, r3, #1
 8012a0c:	d103      	bne.n	8012a16 <_raise_r+0x42>
 8012a0e:	2316      	movs	r3, #22
 8012a10:	6003      	str	r3, [r0, #0]
 8012a12:	2001      	movs	r0, #1
 8012a14:	e7e7      	b.n	80129e6 <_raise_r+0x12>
 8012a16:	2100      	movs	r1, #0
 8012a18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	4798      	blx	r3
 8012a20:	2000      	movs	r0, #0
 8012a22:	e7e0      	b.n	80129e6 <_raise_r+0x12>

08012a24 <raise>:
 8012a24:	4b02      	ldr	r3, [pc, #8]	@ (8012a30 <raise+0xc>)
 8012a26:	4601      	mov	r1, r0
 8012a28:	6818      	ldr	r0, [r3, #0]
 8012a2a:	f7ff bfd3 	b.w	80129d4 <_raise_r>
 8012a2e:	bf00      	nop
 8012a30:	200001a4 	.word	0x200001a4

08012a34 <_kill_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4d07      	ldr	r5, [pc, #28]	@ (8012a54 <_kill_r+0x20>)
 8012a38:	2300      	movs	r3, #0
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	4608      	mov	r0, r1
 8012a3e:	4611      	mov	r1, r2
 8012a40:	602b      	str	r3, [r5, #0]
 8012a42:	f7f1 ffc3 	bl	80049cc <_kill>
 8012a46:	1c43      	adds	r3, r0, #1
 8012a48:	d102      	bne.n	8012a50 <_kill_r+0x1c>
 8012a4a:	682b      	ldr	r3, [r5, #0]
 8012a4c:	b103      	cbz	r3, 8012a50 <_kill_r+0x1c>
 8012a4e:	6023      	str	r3, [r4, #0]
 8012a50:	bd38      	pop	{r3, r4, r5, pc}
 8012a52:	bf00      	nop
 8012a54:	20006f6c 	.word	0x20006f6c

08012a58 <_getpid_r>:
 8012a58:	f7f1 bfb0 	b.w	80049bc <_getpid>

08012a5c <_malloc_usable_size_r>:
 8012a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a60:	1f18      	subs	r0, r3, #4
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	bfbc      	itt	lt
 8012a66:	580b      	ldrlt	r3, [r1, r0]
 8012a68:	18c0      	addlt	r0, r0, r3
 8012a6a:	4770      	bx	lr

08012a6c <_init>:
 8012a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6e:	bf00      	nop
 8012a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a72:	bc08      	pop	{r3}
 8012a74:	469e      	mov	lr, r3
 8012a76:	4770      	bx	lr

08012a78 <_fini>:
 8012a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a7a:	bf00      	nop
 8012a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a7e:	bc08      	pop	{r3}
 8012a80:	469e      	mov	lr, r3
 8012a82:	4770      	bx	lr
