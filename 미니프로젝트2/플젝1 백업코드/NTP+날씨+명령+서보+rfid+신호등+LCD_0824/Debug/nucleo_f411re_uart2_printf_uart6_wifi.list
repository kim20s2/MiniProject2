
nucleo_f411re_uart2_printf_uart6_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  0800b648  0800b648  0000c648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfa8  0800bfa8  0000d0d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bfa8  0800bfa8  0000cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfb0  0800bfb0  0000d0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfb0  0800bfb0  0000cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfb4  0800bfb4  0000cfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800bfb8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000545c  200000d8  0800c090  0000d0d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005534  0800c090  0000d534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b921  00000000  00000000  0000d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004259  00000000  00000000  00028a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001354  00000000  00000000  0002e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc36  00000000  00000000  0002f8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db44  00000000  00000000  0004b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1563  00000000  00000000  00069036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b64  00000000  00000000  0010a5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00112140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b630 	.word	0x0800b630

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0800b630 	.word	0x0800b630

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9d3 	b.w	8000678 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <Aiot_Task>:
#include "esp.h"

extern osMutexId_t ESP_MutexHandle;

void Aiot_Task(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 8000684:	f000 fd2a 	bl	80010dc <AiotClient_Init>
    for(;;)
    {
        if (esp_get_status() != 0) {
 8000688:	f000 fbca 	bl	8000e20 <esp_get_status>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d013      	beq.n	80006ba <Aiot_Task+0x3e>
            printf("server connecting ...\r\n");
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <Aiot_Task+0x48>)
 8000694:	f008 fa04 	bl	8008aa0 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <Aiot_Task+0x4c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 ff82 	bl	80055aa <osMutexAcquire>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d106      	bne.n	80006ba <Aiot_Task+0x3e>
                esp_client_conn();
 80006ac:	f000 fb8c 	bl	8000dc8 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <Aiot_Task+0x4c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 ffc3 	bl	8005640 <osMutexRelease>
            }
        }
        vTaskDelay(pdMS_TO_TICKS(10000));
 80006ba:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006be:	f006 fa21 	bl	8006b04 <vTaskDelay>
        if (esp_get_status() != 0) {
 80006c2:	e7e1      	b.n	8000688 <Aiot_Task+0xc>
 80006c4:	0800b648 	.word	0x0800b648
 80006c8:	20000a58 	.word	0x20000a58

080006cc <esp_event>:
   - 개행을 기다리지 말고 길이 기반으로 정확히 잘라내기
*/


void esp_event(const char *recvBuf)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0aa      	sub	sp, #168	@ 0xa8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	227f      	movs	r2, #127	@ 0x7f
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f008 fb48 	bl	8008d80 <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	210a      	movs	r1, #10
 80006fc:	4618      	mov	r0, r3
 80006fe:	f008 fb21 	bl	8008d44 <strchr>
 8000702:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 8000706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <esp_event+0x4a>
 800070e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	210d      	movs	r1, #13
 800071c:	4618      	mov	r0, r3
 800071e:	f008 fb11 	bl	8008d44 <strchr>
 8000722:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 8000726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <esp_event+0x6a>
 800072e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4945      	ldr	r1, [pc, #276]	@ (8000858 <esp_event+0x18c>)
 8000742:	4618      	mov	r0, r3
 8000744:	f008 fb30 	bl	8008da8 <strtok>
 8000748:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 800074c:	e011      	b.n	8000772 <esp_event+0xa6>
    {
        pArray[idx++] = token;
 800074e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	33a8      	adds	r3, #168	@ 0xa8
 800075c:	443b      	add	r3, r7
 800075e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000762:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 8000766:	493c      	ldr	r1, [pc, #240]	@ (8000858 <esp_event+0x18c>)
 8000768:	2000      	movs	r0, #0
 800076a:	f008 fb1d 	bl	8008da8 <strtok>
 800076e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 8000772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <esp_event+0xb6>
 800077a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800077e:	2b03      	cmp	r3, #3
 8000780:	dde5      	ble.n	800074e <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d05c      	beq.n	8000842 <esp_event+0x176>
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d059      	beq.n	8000842 <esp_event+0x176>
    {
        if (strcmp(pArray[1], "LED") == 0)
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4932      	ldr	r1, [pc, #200]	@ (800085c <esp_event+0x190>)
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd24 	bl	80001e0 <strcmp>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d121      	bne.n	80007e2 <esp_event+0x116>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	492f      	ldr	r1, [pc, #188]	@ (8000860 <esp_event+0x194>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fd1c 	bl	80001e0 <strcmp>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d108      	bne.n	80007c0 <esp_event+0xf4>
                LED_ON();
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	482c      	ldr	r0, [pc, #176]	@ (8000864 <esp_event+0x198>)
 80007b4:	f001 ff28 	bl	8002608 <HAL_GPIO_WritePin>
                printf("LED turned ON\r\n");
 80007b8:	482b      	ldr	r0, [pc, #172]	@ (8000868 <esp_event+0x19c>)
 80007ba:	f008 f971 	bl	8008aa0 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80007be:	e045      	b.n	800084c <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	492a      	ldr	r1, [pc, #168]	@ (800086c <esp_event+0x1a0>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fd0b 	bl	80001e0 <strcmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d13d      	bne.n	800084c <esp_event+0x180>
                LED_OFF();
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4823      	ldr	r0, [pc, #140]	@ (8000864 <esp_event+0x198>)
 80007d6:	f001 ff17 	bl	8002608 <HAL_GPIO_WritePin>
                printf("LED turned OFF\r\n");
 80007da:	4825      	ldr	r0, [pc, #148]	@ (8000870 <esp_event+0x1a4>)
 80007dc:	f008 f960 	bl	8008aa0 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80007e0:	e034      	b.n	800084c <esp_event+0x180>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	4923      	ldr	r1, [pc, #140]	@ (8000874 <esp_event+0x1a8>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcfa 	bl	80001e0 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d121      	bne.n	8000836 <esp_event+0x16a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	491a      	ldr	r1, [pc, #104]	@ (8000860 <esp_event+0x194>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fcf2 	bl	80001e0 <strcmp>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <esp_event+0x148>
                FAN_ON();
 8000802:	2201      	movs	r2, #1
 8000804:	2110      	movs	r1, #16
 8000806:	481c      	ldr	r0, [pc, #112]	@ (8000878 <esp_event+0x1ac>)
 8000808:	f001 fefe 	bl	8002608 <HAL_GPIO_WritePin>
                printf("FAN turned ON\r\n");
 800080c:	481b      	ldr	r0, [pc, #108]	@ (800087c <esp_event+0x1b0>)
 800080e:	f008 f947 	bl	8008aa0 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8000812:	e01b      	b.n	800084c <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4915      	ldr	r1, [pc, #84]	@ (800086c <esp_event+0x1a0>)
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fce1 	bl	80001e0 <strcmp>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d113      	bne.n	800084c <esp_event+0x180>
                FAN_OFF();
 8000824:	2200      	movs	r2, #0
 8000826:	2110      	movs	r1, #16
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <esp_event+0x1ac>)
 800082a:	f001 feed 	bl	8002608 <HAL_GPIO_WritePin>
                printf("FAN turned OFF\r\n");
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <esp_event+0x1b4>)
 8000830:	f008 f936 	bl	8008aa0 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8000834:	e00a      	b.n	800084c <esp_event+0x180>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <esp_event+0x1b8>)
 800083c:	f008 f8c0 	bl	80089c0 <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 8000840:	e004      	b.n	800084c <esp_event+0x180>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <esp_event+0x1bc>)
 8000846:	f008 f8bb 	bl	80089c0 <iprintf>
    }
}
 800084a:	e000      	b.n	800084e <esp_event+0x182>
        if (strcmp(pArray[1], "LED") == 0)
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	37a8      	adds	r7, #168	@ 0xa8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800b660 	.word	0x0800b660
 800085c:	0800b668 	.word	0x0800b668
 8000860:	0800b66c 	.word	0x0800b66c
 8000864:	40020000 	.word	0x40020000
 8000868:	0800b670 	.word	0x0800b670
 800086c:	0800b680 	.word	0x0800b680
 8000870:	0800b684 	.word	0x0800b684
 8000874:	0800b694 	.word	0x0800b694
 8000878:	40020400 	.word	0x40020400
 800087c:	0800b698 	.word	0x0800b698
 8000880:	0800b6a8 	.word	0x0800b6a8
 8000884:	0800b6b8 	.word	0x0800b6b8
 8000888:	0800b6d0 	.word	0x0800b6d0

0800088c <try_extract_ipd_payload>:

// ---- Robust +IPD,<len>:<payload> extractor (length-framed, not newline-based) ----
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	@ 0x40
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
    int copied = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int consumed = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Minimal critical section: snapshot + partial consume
    taskENTER_CRITICAL();
 800089e:	f007 fc33 	bl	8008108 <vPortEnterCritical>
    int n = cb_data.length;
 80008a2:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80008a4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (n > 0) {
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f340 80b1 	ble.w	8000a14 <try_extract_ipd_payload+0x188>
        // find "+IPD,"
        int start = -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int i = 0; i + 4 < n; ++i) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80008bc:	e028      	b.n	8000910 <try_extract_ipd_payload+0x84>
            if (cb_data.buf[i] == '+' && i + 4 < n &&
 80008be:	4a59      	ldr	r2, [pc, #356]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80008c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80008c8:	d11f      	bne.n	800090a <try_extract_ipd_payload+0x7e>
 80008ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008cc:	3304      	adds	r3, #4
 80008ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dd1a      	ble.n	800090a <try_extract_ipd_payload+0x7e>
                cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' && cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') {
 80008d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a52      	ldr	r2, [pc, #328]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80008da:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i] == '+' && i + 4 < n &&
 80008dc:	2b49      	cmp	r3, #73	@ 0x49
 80008de:	d114      	bne.n	800090a <try_extract_ipd_payload+0x7e>
                cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' && cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') {
 80008e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e2:	3302      	adds	r3, #2
 80008e4:	4a4f      	ldr	r2, [pc, #316]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	2b50      	cmp	r3, #80	@ 0x50
 80008ea:	d10e      	bne.n	800090a <try_extract_ipd_payload+0x7e>
 80008ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008ee:	3303      	adds	r3, #3
 80008f0:	4a4c      	ldr	r2, [pc, #304]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80008f2:	5cd3      	ldrb	r3, [r2, r3]
 80008f4:	2b44      	cmp	r3, #68	@ 0x44
 80008f6:	d108      	bne.n	800090a <try_extract_ipd_payload+0x7e>
 80008f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008fa:	3304      	adds	r3, #4
 80008fc:	4a49      	ldr	r2, [pc, #292]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80008fe:	5cd3      	ldrb	r3, [r2, r3]
 8000900:	2b2c      	cmp	r3, #44	@ 0x2c
 8000902:	d102      	bne.n	800090a <try_extract_ipd_payload+0x7e>
                start = i; break;
 8000904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
 8000908:	e007      	b.n	800091a <try_extract_ipd_payload+0x8e>
        for (int i = 0; i + 4 < n; ++i) {
 800090a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800090c:	3301      	adds	r3, #1
 800090e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000912:	3304      	adds	r3, #4
 8000914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000916:	429a      	cmp	r2, r3
 8000918:	dcd1      	bgt.n	80008be <try_extract_ipd_payload+0x32>
            }
        }
        if (start >= 0) {
 800091a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800091c:	2b00      	cmp	r3, #0
 800091e:	db62      	blt.n	80009e6 <try_extract_ipd_payload+0x15a>
            // parse length until ':'
            int len_start = start + 5;
 8000920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000922:	3305      	adds	r3, #5
 8000924:	623b      	str	r3, [r7, #32]
            int colon = -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000930:	e01b      	b.n	800096a <try_extract_ipd_payload+0xde>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 8000932:	4a3c      	ldr	r2, [pc, #240]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 8000934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b3a      	cmp	r3, #58	@ 0x3a
 800093c:	d102      	bne.n	8000944 <try_extract_ipd_payload+0xb8>
 800093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000942:	e01b      	b.n	800097c <try_extract_ipd_payload+0xf0>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { start = -1; break; }
 8000944:	4a37      	ldr	r2, [pc, #220]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 8000946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b2f      	cmp	r3, #47	@ 0x2f
 800094e:	d905      	bls.n	800095c <try_extract_ipd_payload+0xd0>
 8000950:	4a34      	ldr	r2, [pc, #208]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 8000952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b39      	cmp	r3, #57	@ 0x39
 800095a:	d903      	bls.n	8000964 <try_extract_ipd_payload+0xd8>
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
 8000962:	e00b      	b.n	800097c <try_extract_ipd_payload+0xf0>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 8000964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000966:	3301      	adds	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800096a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096e:	429a      	cmp	r2, r3
 8000970:	da04      	bge.n	800097c <try_extract_ipd_payload+0xf0>
 8000972:	6a3b      	ldr	r3, [r7, #32]
 8000974:	3309      	adds	r3, #9
 8000976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000978:	429a      	cmp	r2, r3
 800097a:	ddda      	ble.n	8000932 <try_extract_ipd_payload+0xa6>
            }
            if (start >= 0 && colon > 0) {
 800097c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800097e:	2b00      	cmp	r3, #0
 8000980:	db31      	blt.n	80009e6 <try_extract_ipd_payload+0x15a>
 8000982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000984:	2b00      	cmp	r3, #0
 8000986:	dd2e      	ble.n	80009e6 <try_extract_ipd_payload+0x15a>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	4a26      	ldr	r2, [pc, #152]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 800098c:	4413      	add	r3, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f007 feca 	bl	8008728 <atoi>
 8000994:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 8000996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000998:	3301      	adds	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 800099c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dd1d      	ble.n	80009e6 <try_extract_ipd_payload+0x15a>
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	db19      	blt.n	80009e6 <try_extract_ipd_payload+0x15a>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	bfa8      	it	ge
 80009bc:	4613      	movge	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4619      	mov	r1, r3
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f009 f965 	bl	8009c9a <memcpy>
                    dst[cpy] = 0;
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    consumed = payload_start + ipd_len; // consume through end of payload
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	4413      	add	r3, r2
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }
        }

        if (consumed > 0) {
 80009e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dd13      	ble.n	8000a14 <try_extract_ipd_payload+0x188>
            int left = n - consumed;
 80009ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove((void*)cb_data.buf, (void*)&cb_data.buf[consumed], left);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	dd07      	ble.n	8000a0a <try_extract_ipd_payload+0x17e>
 80009fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 80009fe:	4413      	add	r3, r2
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 8000a06:	f008 f97b 	bl	8008d00 <memmove>
            cb_data.length = left;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <try_extract_ipd_payload+0x198>)
 8000a10:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
        }
    }
    taskEXIT_CRITICAL();
 8000a14:	f007 fbaa 	bl	800816c <vPortExitCritical>

    return copied; // 0 => need more bytes
 8000a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3740      	adds	r7, #64	@ 0x40
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000548 	.word	0x20000548

08000a28 <Command_Task>:

void Command_Task(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0c4      	sub	sp, #272	@ 0x110
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a36:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
        // No need to require a trailing \n anymore
        int got = try_extract_ipd_payload(payload, sizeof(payload));
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff23 	bl	800088c <try_extract_ipd_payload>
 8000a46:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        if (got > 0) {
 8000a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	dd11      	ble.n	8000a76 <Command_Task+0x4e>
            // strip CR/LF
            payload[strcspn(payload, "\r\n")] = '\0';
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	490a      	ldr	r1, [pc, #40]	@ (8000a80 <Command_Task+0x58>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 f980 	bl	8008d5e <strcspn>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a68:	2100      	movs	r1, #0
 8000a6a:	5499      	strb	r1, [r3, r2]
            esp_event(payload);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe2b 	bl	80006cc <esp_event>
        }

        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 8000a76:	200a      	movs	r0, #10
 8000a78:	f006 f844 	bl	8006b04 <vTaskDelay>
    {
 8000a7c:	e7dc      	b.n	8000a38 <Command_Task+0x10>
 8000a7e:	bf00      	nop
 8000a80:	0800b6f0 	.word	0x0800b6f0

08000a84 <NTP_Task>:
extern time_t ntp_time;

#define NTPTIME_TASK_PERIOD_MS 10000

void NTP_Task(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	81fb      	strh	r3, [r7, #14]
    TickType_t last = xTaskGetTickCount();
 8000a90:	f006 f982 	bl	8006d98 <xTaskGetTickCount>
 8000a94:	4603      	mov	r3, r0
 8000a96:	60bb      	str	r3, [r7, #8]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 8000a98:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a9c:	613b      	str	r3, [r7, #16]
    static int s_ntp_cfg_ok = 0;

    for(;;)
    {
        if (esp_get_status() == 0) {
 8000a9e:	f000 f9bf 	bl	8000e20 <esp_get_status>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d143      	bne.n	8000b30 <NTP_Task+0xac>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <NTP_Task+0xe4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fd7a 	bl	80055aa <osMutexAcquire>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14d      	bne.n	8000b58 <NTP_Task+0xd4>
                if (!s_ntp_cfg_ok) {
 8000abc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <NTP_Task+0xe8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d107      	bne.n	8000ad4 <NTP_Task+0x50>
                    if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 8000ac4:	f000 fc78 	bl	80013b8 <esp_ntp_config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <NTP_Task+0x50>
 8000ace:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <NTP_Task+0xe8>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
                	}
				if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 8000ad4:	f107 020e 	add.w	r2, r7, #14
 8000ad8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000adc:	4924      	ldr	r1, [pc, #144]	@ (8000b70 <NTP_Task+0xec>)
 8000ade:	4825      	ldr	r0, [pc, #148]	@ (8000b74 <NTP_Task+0xf0>)
 8000ae0:	f000 f85c 	bl	8000b9c <esp_at_command>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d11c      	bne.n	8000b24 <NTP_Task+0xa0>
					char *p = strtok(response, "\r\n");
 8000aea:	4923      	ldr	r1, [pc, #140]	@ (8000b78 <NTP_Task+0xf4>)
 8000aec:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <NTP_Task+0xec>)
 8000aee:	f008 f95b 	bl	8008da8 <strtok>
 8000af2:	6178      	str	r0, [r7, #20]
					while (p) {
 8000af4:	e013      	b.n	8000b1e <NTP_Task+0x9a>
						if (parse_cipsntptime_line(p, &epoch) == 0) {
 8000af6:	4921      	ldr	r1, [pc, #132]	@ (8000b7c <NTP_Task+0xf8>)
 8000af8:	6978      	ldr	r0, [r7, #20]
 8000afa:	f000 fb61 	bl	80011c0 <parse_cipsntptime_line>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d107      	bne.n	8000b14 <NTP_Task+0x90>
							printf("NTP Time (KST): %s", ctime(&epoch));
 8000b04:	481d      	ldr	r0, [pc, #116]	@ (8000b7c <NTP_Task+0xf8>)
 8000b06:	f008 f9c1 	bl	8008e8c <ctime>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481c      	ldr	r0, [pc, #112]	@ (8000b80 <NTP_Task+0xfc>)
 8000b10:	f007 ff56 	bl	80089c0 <iprintf>
								osMutexRelease(NTP_MutexHandle);
							}
							break;
							*/
						}
						p = strtok(NULL, "\r\n");
 8000b14:	4918      	ldr	r1, [pc, #96]	@ (8000b78 <NTP_Task+0xf4>)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f008 f946 	bl	8008da8 <strtok>
 8000b1c:	6178      	str	r0, [r7, #20]
					while (p) {
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1e8      	bne.n	8000af6 <NTP_Task+0x72>
					}
			}
                osMutexRelease(ESP_MutexHandle);
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <NTP_Task+0xe4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fd89 	bl	8005640 <osMutexRelease>
 8000b2e:	e013      	b.n	8000b58 <NTP_Task+0xd4>
            }
        } else {
            printf("TCP not connected!, reconnecting...\r\n");
 8000b30:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <NTP_Task+0x100>)
 8000b32:	f007 ffb5 	bl	8008aa0 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <NTP_Task+0xe4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fd33 	bl	80055aa <osMutexAcquire>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d106      	bne.n	8000b58 <NTP_Task+0xd4>
                esp_client_conn();
 8000b4a:	f000 f93d 	bl	8000dc8 <esp_client_conn>
                osMutexRelease(ESP_MutexHandle);
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <NTP_Task+0xe4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 fd74 	bl	8005640 <osMutexRelease>
            }
        }
        vTaskDelayUntil(&last, period);
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	6939      	ldr	r1, [r7, #16]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f005 ff50 	bl	8006a04 <vTaskDelayUntil>
        if (esp_get_status() == 0) {
 8000b64:	e79b      	b.n	8000a9e <NTP_Task+0x1a>
 8000b66:	bf00      	nop
 8000b68:	20000a58 	.word	0x20000a58
 8000b6c:	200000f4 	.word	0x200000f4
 8000b70:	20000110 	.word	0x20000110
 8000b74:	0800b6f4 	.word	0x0800b6f4
 8000b78:	0800b708 	.word	0x0800b708
 8000b7c:	200000f8 	.word	0x200000f8
 8000b80:	0800b70c 	.word	0x0800b70c
 8000b84:	0800b720 	.word	0x0800b720

08000b88 <Weather_Task>:
#define WEATHER_TASK_PERIOD_MS 10000
extern osMutexId_t ESP_MutexHandle;
// TODO: 사용중인 HTTP GET 구현으로 교체 (현재 프로젝트에 맞춰 작성)

void Weather_Task(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    {
        // osMutexAcquire(ESP_MutexHandle, osWaitForever);
        // ESP_HTTP_GET(...);  // 구현되어 있다면 사용
        // osMutexRelease(ESP_MutexHandle);

        vTaskDelay(pdMS_TO_TICKS(WEATHER_TASK_PERIOD_MS));
 8000b90:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000b94:	f005 ffb6 	bl	8006b04 <vTaskDelay>
 8000b98:	e7fa      	b.n	8000b90 <Weather_Task+0x8>
	...

08000b9c <esp_at_command>:
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	807b      	strh	r3, [r7, #2]
	*length = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f008 f8bc 	bl	8008d34 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 8000bbc:	f240 4204 	movw	r2, #1028	@ 0x404
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4830      	ldr	r0, [pc, #192]	@ (8000c84 <esp_at_command+0xe8>)
 8000bc4:	f008 f8b6 	bl	8008d34 <memset>
	cb_data.length = 0;
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <esp_at_command+0xe8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fb0f 	bl	80001f4 <strlen>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	2364      	movs	r3, #100	@ 0x64
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	482a      	ldr	r0, [pc, #168]	@ (8000c88 <esp_at_command+0xec>)
 8000be0:	f003 fb16 	bl	8004210 <HAL_UART_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d041      	beq.n	8000c6e <esp_at_command+0xd2>
		return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e044      	b.n	8000c7a <esp_at_command+0xde>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER)
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <esp_at_command+0xe8>)
 8000bf2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfa:	d302      	bcc.n	8000c02 <esp_at_command+0x66>
			return -2;
 8000bfc:	f06f 0301 	mvn.w	r3, #1
 8000c00:	e03b      	b.n	8000c7a <esp_at_command+0xde>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL)
 8000c02:	4922      	ldr	r1, [pc, #136]	@ (8000c8c <esp_at_command+0xf0>)
 8000c04:	481f      	ldr	r0, [pc, #124]	@ (8000c84 <esp_at_command+0xe8>)
 8000c06:	f008 f92b 	bl	8008e60 <strstr>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <esp_at_command+0x7a>
			return -3;
 8000c10:	f06f 0302 	mvn.w	r3, #2
 8000c14:	e031      	b.n	8000c7a <esp_at_command+0xde>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 8000c16:	491e      	ldr	r1, [pc, #120]	@ (8000c90 <esp_at_command+0xf4>)
 8000c18:	481a      	ldr	r0, [pc, #104]	@ (8000c84 <esp_at_command+0xe8>)
 8000c1a:	f008 f921 	bl	8008e60 <strstr>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <esp_at_command+0x98>
		{
			printf("ESP: TCP connection closed.\r\n");
 8000c24:	481b      	ldr	r0, [pc, #108]	@ (8000c94 <esp_at_command+0xf8>)
 8000c26:	f007 ff3b 	bl	8008aa0 <puts>
			esp_client_conn();   // 자동 재연결
 8000c2a:	f000 f8cd 	bl	8000dc8 <esp_client_conn>
			return -5;
 8000c2e:	f06f 0304 	mvn.w	r3, #4
 8000c32:	e022      	b.n	8000c7a <esp_at_command+0xde>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 8000c34:	4918      	ldr	r1, [pc, #96]	@ (8000c98 <esp_at_command+0xfc>)
 8000c36:	4813      	ldr	r0, [pc, #76]	@ (8000c84 <esp_at_command+0xe8>)
 8000c38:	f008 f912 	bl	8008e60 <strstr>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00e      	beq.n	8000c60 <esp_at_command+0xc4>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <esp_at_command+0xe8>)
 8000c44:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000c48:	461a      	mov	r2, r3
 8000c4a:	490e      	ldr	r1, [pc, #56]	@ (8000c84 <esp_at_command+0xe8>)
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f009 f824 	bl	8009c9a <memcpy>
			*length = cb_data.length;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <esp_at_command+0xe8>)
 8000c54:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	801a      	strh	r2, [r3, #0]
			return 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e00c      	b.n	8000c7a <esp_at_command+0xde>
		}

		time_out -= 10;
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	3b0a      	subs	r3, #10
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f001 f981 	bl	8001f70 <HAL_Delay>
	while (time_out > 0)
 8000c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dcbc      	bgt.n	8000bf0 <esp_at_command+0x54>
	}
	return -4; // Timeout
 8000c76:	f06f 0303 	mvn.w	r3, #3
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000548 	.word	0x20000548
 8000c88:	20000a00 	.word	0x20000a00
 8000c8c:	0800b748 	.word	0x0800b748
 8000c90:	0800b750 	.word	0x0800b750
 8000c94:	0800b758 	.word	0x0800b758
 8000c98:	0800b778 	.word	0x0800b778

08000c9c <esp_reset>:
    return 0; // 타임아웃
}


static int esp_reset(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000ca6:	1dba      	adds	r2, r7, #6
 8000ca8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cac:	4909      	ldr	r1, [pc, #36]	@ (8000cd4 <esp_reset+0x38>)
 8000cae:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <esp_reset+0x3c>)
 8000cb0:	f7ff ff74 	bl	8000b9c <esp_at_command>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <esp_reset+0x24>
    {
    	return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e004      	b.n	8000cca <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8000cc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cc4:	f001 f954 	bl	8001f70 <HAL_Delay>
    return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000110 	.word	0x20000110
 8000cd8:	0800b77c 	.word	0x0800b77c

08000cdc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000cea:	f107 020a 	add.w	r2, r7, #10
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	492d      	ldr	r1, [pc, #180]	@ (8000da8 <request_ip_addr+0xcc>)
 8000cf4:	482d      	ldr	r0, [pc, #180]	@ (8000dac <request_ip_addr+0xd0>)
 8000cf6:	f7ff ff51 	bl	8000b9c <esp_at_command>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8000d00:	482b      	ldr	r0, [pc, #172]	@ (8000db0 <request_ip_addr+0xd4>)
 8000d02:	f007 fecd 	bl	8008aa0 <puts>
 8000d06:	e049      	b.n	8000d9c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 8000d08:	492a      	ldr	r1, [pc, #168]	@ (8000db4 <request_ip_addr+0xd8>)
 8000d0a:	4827      	ldr	r0, [pc, #156]	@ (8000da8 <request_ip_addr+0xcc>)
 8000d0c:	f008 f84c 	bl	8008da8 <strtok>
 8000d10:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d03e      	beq.n	8000d96 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e009      	b.n	8000d32 <request_ip_addr+0x56>
                printf("%c", response[i]);
 8000d1e:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <request_ip_addr+0xcc>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fe5c 	bl	80089e4 <putchar>
            for(int i = 0 ; i < length ; i++)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	897b      	ldrh	r3, [r7, #10]
 8000d34:	461a      	mov	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	dbf0      	blt.n	8000d1e <request_ip_addr+0x42>
        }

        while(line != NULL)
 8000d3c:	e02b      	b.n	8000d96 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 8000d3e:	491e      	ldr	r1, [pc, #120]	@ (8000db8 <request_ip_addr+0xdc>)
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f008 f88d 	bl	8008e60 <strstr>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d01f      	beq.n	8000d8c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8000d4c:	491b      	ldr	r1, [pc, #108]	@ (8000dbc <request_ip_addr+0xe0>)
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f008 f82a 	bl	8008da8 <strtok>
                ip = strtok(NULL, "\"");
 8000d54:	4919      	ldr	r1, [pc, #100]	@ (8000dbc <request_ip_addr+0xe0>)
 8000d56:	2000      	movs	r0, #0
 8000d58:	f008 f826 	bl	8008da8 <strtok>
 8000d5c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 8000d5e:	4918      	ldr	r1, [pc, #96]	@ (8000dc0 <request_ip_addr+0xe4>)
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fa3d 	bl	80001e0 <strcmp>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00f      	beq.n	8000d8c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4814      	ldr	r0, [pc, #80]	@ (8000dc4 <request_ip_addr+0xe8>)
 8000d72:	f007 ffdf 	bl	8008d34 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff fa3c 	bl	80001f4 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68f9      	ldr	r1, [r7, #12]
 8000d82:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <request_ip_addr+0xe8>)
 8000d84:	f008 ff89 	bl	8009c9a <memcpy>
                    return 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e009      	b.n	8000da0 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8000d8c:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <request_ip_addr+0xd8>)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f008 f80a 	bl	8008da8 <strtok>
 8000d94:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1d0      	bne.n	8000d3e <request_ip_addr+0x62>
        }
    }
    return -1;
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000110 	.word	0x20000110
 8000dac:	0800b7c4 	.word	0x0800b7c4
 8000db0:	0800b7d0 	.word	0x0800b7d0
 8000db4:	0800b7b8 	.word	0x0800b7b8
 8000db8:	0800b7f0 	.word	0x0800b7f0
 8000dbc:	0800b7c0 	.word	0x0800b7c0
 8000dc0:	0800b788 	.word	0x0800b788
 8000dc4:	20000100 	.word	0x20000100

08000dc8 <esp_client_conn>:

int esp_client_conn()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b092      	sub	sp, #72	@ 0x48
 8000dcc:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2240      	movs	r2, #64	@ 0x40
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f007 ffac 	bl	8008d34 <memset>
	uint16_t length = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8000de0:	f107 0008 	add.w	r0, r7, #8
 8000de4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000de8:	4a09      	ldr	r2, [pc, #36]	@ (8000e10 <esp_client_conn+0x48>)
 8000dea:	490a      	ldr	r1, [pc, #40]	@ (8000e14 <esp_client_conn+0x4c>)
 8000dec:	f007 fe60 	bl	8008ab0 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8000df0:	1dba      	adds	r2, r7, #6
 8000df2:	f107 0008 	add.w	r0, r7, #8
 8000df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfa:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <esp_client_conn+0x50>)
 8000dfc:	f7ff fece 	bl	8000b9c <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8000e00:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <esp_client_conn+0x54>)
 8000e02:	f000 f983 	bl	800110c <esp_send_data>
	return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3748      	adds	r7, #72	@ 0x48
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	0800b7fc 	.word	0x0800b7fc
 8000e14:	0800b808 	.word	0x0800b808
 8000e18:	20000110 	.word	0x20000110
 8000e1c:	0800b824 	.word	0x0800b824

08000e20 <esp_get_status>:
int esp_get_status()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 8000e2a:	1dba      	adds	r2, r7, #6
 8000e2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e30:	4909      	ldr	r1, [pc, #36]	@ (8000e58 <esp_get_status+0x38>)
 8000e32:	480a      	ldr	r0, [pc, #40]	@ (8000e5c <esp_get_status+0x3c>)
 8000e34:	f7ff feb2 	bl	8000b9c <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000e38:	4909      	ldr	r1, [pc, #36]	@ (8000e60 <esp_get_status+0x40>)
 8000e3a:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <esp_get_status+0x38>)
 8000e3c:	f008 f810 	bl	8008e60 <strstr>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <esp_get_status+0x2a>
    {
    	return 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e001      	b.n	8000e4e <esp_get_status+0x2e>
    }
	return -1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000110 	.word	0x20000110
 8000e5c:	0800b838 	.word	0x0800b838
 8000e60:	0800b848 	.word	0x0800b848

08000e64 <drv_esp_init>:

 int drv_esp_init(void)
 {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4817      	ldr	r0, [pc, #92]	@ (8000ecc <drv_esp_init+0x68>)
 8000e70:	f007 ff60 	bl	8008d34 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 8000e74:	f240 4204 	movw	r2, #1028	@ 0x404
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4815      	ldr	r0, [pc, #84]	@ (8000ed0 <drv_esp_init+0x6c>)
 8000e7c:	f007 ff5a 	bl	8008d34 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	4914      	ldr	r1, [pc, #80]	@ (8000ed4 <drv_esp_init+0x70>)
 8000e84:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <drv_esp_init+0x74>)
 8000e86:	f003 fa4e 	bl	8004326 <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	e011      	b.n	8000eb4 <drv_esp_init+0x50>
         uint16_t len=0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8000e94:	1cba      	adds	r2, r7, #2
 8000e96:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e9a:	4910      	ldr	r1, [pc, #64]	@ (8000edc <drv_esp_init+0x78>)
 8000e9c:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <drv_esp_init+0x7c>)
 8000e9e:	f7ff fe7d 	bl	8000b9c <esp_at_command>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <drv_esp_init+0x58>
         HAL_Delay(100);
 8000ea8:	2064      	movs	r0, #100	@ 0x64
 8000eaa:	f001 f861 	bl	8001f70 <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	ddea      	ble.n	8000e90 <drv_esp_init+0x2c>
 8000eba:	e000      	b.n	8000ebe <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8000ebc:	bf00      	nop
     }
     return esp_reset();
 8000ebe:	f7ff feed 	bl	8000c9c <esp_reset>
 8000ec2:	4603      	mov	r3, r0
 }
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000100 	.word	0x20000100
 8000ed0:	20000548 	.word	0x20000548
 8000ed4:	20000547 	.word	0x20000547
 8000ed8:	20000a00 	.word	0x20000a00
 8000edc:	20000110 	.word	0x20000110
 8000ee0:	0800b854 	.word	0x0800b854

08000ee4 <reset_func>:

void reset_func()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000ee8:	4808      	ldr	r0, [pc, #32]	@ (8000f0c <reset_func+0x28>)
 8000eea:	f007 fd69 	bl	80089c0 <iprintf>
	if(esp_reset() == 0)
 8000eee:	f7ff fed5 	bl	8000c9c <esp_reset>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <reset_func+0x1c>
			printf("OK\r\n");
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <reset_func+0x2c>)
 8000efa:	f007 fdd1 	bl	8008aa0 <puts>
	else
			printf("fail\r\n");
}
 8000efe:	e002      	b.n	8000f06 <reset_func+0x22>
			printf("fail\r\n");
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <reset_func+0x30>)
 8000f02:	f007 fdcd 	bl	8008aa0 <puts>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	0800b85c 	.word	0x0800b85c
 8000f10:	0800b86c 	.word	0x0800b86c
 8000f14:	0800b870 	.word	0x0800b870

08000f18 <version_func>:

void version_func()
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 8000f22:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <version_func+0x58>)
 8000f24:	f007 fdbc 	bl	8008aa0 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000f28:	1cba      	adds	r2, r7, #2
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	4911      	ldr	r1, [pc, #68]	@ (8000f74 <version_func+0x5c>)
 8000f30:	4811      	ldr	r0, [pc, #68]	@ (8000f78 <version_func+0x60>)
 8000f32:	f7ff fe33 	bl	8000b9c <esp_at_command>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <version_func+0x2c>
      printf("ap scan command fail\r\n");
 8000f3c:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <version_func+0x64>)
 8000f3e:	f007 fdaf 	bl	8008aa0 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 8000f42:	e011      	b.n	8000f68 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	e009      	b.n	8000f5e <version_func+0x46>
          printf("%c", response[i]);
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <version_func+0x5c>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 fd46 	bl	80089e4 <putchar>
      for(int i = 0 ; i < length ; i++)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	dbf0      	blt.n	8000f4a <version_func+0x32>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	0800b878 	.word	0x0800b878
 8000f74:	20000110 	.word	0x20000110
 8000f78:	0800b890 	.word	0x0800b890
 8000f7c:	0800b89c 	.word	0x0800b89c

08000f80 <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	@ 0x50
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2240      	movs	r2, #64	@ 0x40
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 fecb 	bl	8008d34 <memset>
  if(ssid == NULL || passwd == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <ap_conn_func+0x2a>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000faa:	4817      	ldr	r0, [pc, #92]	@ (8001008 <ap_conn_func+0x88>)
 8000fac:	f007 fd78 	bl	8008aa0 <puts>
 8000fb0:	e026      	b.n	8001000 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000fb2:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	4914      	ldr	r1, [pc, #80]	@ (800100c <ap_conn_func+0x8c>)
 8000fbc:	4814      	ldr	r0, [pc, #80]	@ (8001010 <ap_conn_func+0x90>)
 8000fbe:	f7ff fded 	bl	8000b9c <esp_at_command>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <ap_conn_func+0x94>)
 8000fca:	f007 fd69 	bl	8008aa0 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000fce:	f107 000c 	add.w	r0, r7, #12
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4910      	ldr	r1, [pc, #64]	@ (8001018 <ap_conn_func+0x98>)
 8000fd8:	f007 fd6a 	bl	8008ab0 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000fdc:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000fe8:	4908      	ldr	r1, [pc, #32]	@ (800100c <ap_conn_func+0x8c>)
 8000fea:	f7ff fdd7 	bl	8000b9c <esp_at_command>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4808      	ldr	r0, [pc, #32]	@ (800101c <ap_conn_func+0x9c>)
 8000ffc:	f007 fce0 	bl	80089c0 <iprintf>
}
 8001000:	3750      	adds	r7, #80	@ 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800b8b4 	.word	0x0800b8b4
 800100c:	20000110 	.word	0x20000110
 8001010:	0800b8e0 	.word	0x0800b8e0
 8001014:	0800b8f0 	.word	0x0800b8f0
 8001018:	0800b904 	.word	0x0800b904
 800101c:	0800b91c 	.word	0x0800b91c

08001020 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a23      	ldr	r2, [pc, #140]	@ (80010bc <HAL_UART_RxCpltCallback+0x9c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d117      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <HAL_UART_RxCpltCallback+0xa0>)
 8001034:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800103c:	d20c      	bcs.n	8001058 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 800103e:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <HAL_UART_RxCpltCallback+0xa0>)
 8001040:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	b291      	uxth	r1, r2
 8001048:	4a1d      	ldr	r2, [pc, #116]	@ (80010c0 <HAL_UART_RxCpltCallback+0xa0>)
 800104a:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 800104e:	461a      	mov	r2, r3
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_UART_RxCpltCallback+0xa4>)
 8001052:	7819      	ldrb	r1, [r3, #0]
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <HAL_UART_RxCpltCallback+0xa0>)
 8001056:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <HAL_UART_RxCpltCallback+0xa4>)
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f003 f962 	bl	8004326 <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <HAL_UART_RxCpltCallback+0xa8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d122      	bne.n	80010b2 <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <HAL_UART_RxCpltCallback+0xac>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_UART_RxCpltCallback+0xb0>)
 8001072:	7811      	ldrb	r1, [r2, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <HAL_UART_RxCpltCallback+0xb4>)
 8001076:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <HAL_UART_RxCpltCallback+0xac>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <HAL_UART_RxCpltCallback+0xb4>)
 800107e:	5cd3      	ldrb	r3, [r2, r3]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b0d      	cmp	r3, #13
 8001084:	d10b      	bne.n	800109e <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <HAL_UART_RxCpltCallback+0xac>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <HAL_UART_RxCpltCallback+0xb4>)
 800108c:	2100      	movs	r1, #0
 800108e:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_UART_RxCpltCallback+0xb8>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
            i = 0;
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <HAL_UART_RxCpltCallback+0xac>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e004      	b.n	80010a8 <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_UART_RxCpltCallback+0xac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a09      	ldr	r2, [pc, #36]	@ (80010cc <HAL_UART_RxCpltCallback+0xac>)
 80010a6:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 80010a8:	2201      	movs	r2, #1
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <HAL_UART_RxCpltCallback+0xb0>)
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f003 f93a 	bl	8004326 <HAL_UART_Receive_IT>
    }
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40011400 	.word	0x40011400
 80010c0:	20000548 	.word	0x20000548
 80010c4:	20000547 	.word	0x20000547
 80010c8:	40004400 	.word	0x40004400
 80010cc:	2000094c 	.word	0x2000094c
 80010d0:	20000546 	.word	0x20000546
 80010d4:	20000514 	.word	0x20000514
 80010d8:	20000510 	.word	0x20000510

080010dc <AiotClient_Init>:



void AiotClient_Init()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	reset_func();
 80010e0:	f7ff ff00 	bl	8000ee4 <reset_func>
	version_func();
 80010e4:	f7ff ff18 	bl	8000f18 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 80010e8:	4906      	ldr	r1, [pc, #24]	@ (8001104 <AiotClient_Init+0x28>)
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <AiotClient_Init+0x2c>)
 80010ec:	f7ff ff48 	bl	8000f80 <ap_conn_func>
	request_ip_addr(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fdf3 	bl	8000cdc <request_ip_addr>
	esp_client_conn();
 80010f6:	f7ff fe67 	bl	8000dc8 <esp_client_conn>
	esp_get_status();
 80010fa:	f7ff fe91 	bl	8000e20 <esp_get_status>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	0800b97c 	.word	0x0800b97c
 8001108:	0800b988 	.word	0x0800b988

0800110c <esp_send_data>:


void esp_send_data(char *data)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	@ 0x50
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2240      	movs	r2, #64	@ 0x40
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f007 fe09 	bl	8008d34 <memset>
	uint16_t length = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f864 	bl	80001f4 <strlen>
 800112c:	4602      	mov	r2, r0
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	490e      	ldr	r1, [pc, #56]	@ (800116c <esp_send_data+0x60>)
 8001134:	4618      	mov	r0, r3
 8001136:	f007 fcbb 	bl	8008ab0 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 800113a:	f107 020e 	add.w	r2, r7, #14
 800113e:	f107 0010 	add.w	r0, r7, #16
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	490a      	ldr	r1, [pc, #40]	@ (8001170 <esp_send_data+0x64>)
 8001148:	f7ff fd28 	bl	8000b9c <esp_at_command>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d107      	bne.n	8001162 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001152:	f107 020e 	add.w	r2, r7, #14
 8001156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115a:	4905      	ldr	r1, [pc, #20]	@ (8001170 <esp_send_data+0x64>)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff fd1d 	bl	8000b9c <esp_at_command>
	}
}
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	@ 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	0800b990 	.word	0x0800b990
 8001170:	20000110 	.word	0x20000110

08001174 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001178:	2201      	movs	r2, #1
 800117a:	4903      	ldr	r1, [pc, #12]	@ (8001188 <drv_uart_init+0x14>)
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <drv_uart_init+0x18>)
 800117e:	f003 f8d2 	bl	8004326 <HAL_UART_Receive_IT>
    return 0;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000546 	.word	0x20000546
 800118c:	200009b8 	.word	0x200009b8

08001190 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001198:	1d39      	adds	r1, r7, #4
 800119a:	230a      	movs	r3, #10
 800119c:	2201      	movs	r2, #1
 800119e:	4807      	ldr	r0, [pc, #28]	@ (80011bc <__io_putchar+0x2c>)
 80011a0:	f003 f836 	bl	8004210 <HAL_UART_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <__io_putchar+0x1e>
        return ch;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e001      	b.n	80011b2 <__io_putchar+0x22>
    return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200009b8 	.word	0x200009b8

080011c0 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09a      	sub	sp, #104	@ 0x68
 80011c4:	af06      	add	r7, sp, #24
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	2224      	movs	r2, #36	@ 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f007 fdae 	bl	8008d34 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 80011d8:	4969      	ldr	r1, [pc, #420]	@ (8001380 <parse_cipsntptime_line+0x1c0>)
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f007 fe40 	bl	8008e60 <strstr>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <parse_cipsntptime_line+0x2c>
        return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e0c5      	b.n	8001378 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 80011ec:	f107 0120 	add.w	r1, r7, #32
 80011f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	9304      	str	r3, [sp, #16]
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	460b      	mov	r3, r1
 8001214:	495b      	ldr	r1, [pc, #364]	@ (8001384 <parse_cipsntptime_line+0x1c4>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f007 fc6c 	bl	8008af4 <siscanf>
 800121c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 800121e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001220:	2b07      	cmp	r3, #7
 8001222:	f040 80a7 	bne.w	8001374 <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4957      	ldr	r1, [pc, #348]	@ (8001388 <parse_cipsntptime_line+0x1c8>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe ffd7 	bl	80001e0 <strcmp>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <parse_cipsntptime_line+0x7e>
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800123c:	e082      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4952      	ldr	r1, [pc, #328]	@ (800138c <parse_cipsntptime_line+0x1cc>)
 8001244:	4618      	mov	r0, r3
 8001246:	f7fe ffcb 	bl	80001e0 <strcmp>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <parse_cipsntptime_line+0x96>
 8001250:	2301      	movs	r3, #1
 8001252:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001254:	e076      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	494d      	ldr	r1, [pc, #308]	@ (8001390 <parse_cipsntptime_line+0x1d0>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7fe ffbf 	bl	80001e0 <strcmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <parse_cipsntptime_line+0xae>
 8001268:	2302      	movs	r3, #2
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800126c:	e06a      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4948      	ldr	r1, [pc, #288]	@ (8001394 <parse_cipsntptime_line+0x1d4>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7fe ffb3 	bl	80001e0 <strcmp>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <parse_cipsntptime_line+0xc6>
 8001280:	2303      	movs	r3, #3
 8001282:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001284:	e05e      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4943      	ldr	r1, [pc, #268]	@ (8001398 <parse_cipsntptime_line+0x1d8>)
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffa7 	bl	80001e0 <strcmp>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <parse_cipsntptime_line+0xde>
 8001298:	2304      	movs	r3, #4
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800129c:	e052      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	493e      	ldr	r1, [pc, #248]	@ (800139c <parse_cipsntptime_line+0x1dc>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7fe ff9b 	bl	80001e0 <strcmp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <parse_cipsntptime_line+0xf6>
 80012b0:	2305      	movs	r3, #5
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012b4:	e046      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4939      	ldr	r1, [pc, #228]	@ (80013a0 <parse_cipsntptime_line+0x1e0>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe ff8f 	bl	80001e0 <strcmp>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <parse_cipsntptime_line+0x10e>
 80012c8:	2306      	movs	r3, #6
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012cc:	e03a      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	4934      	ldr	r1, [pc, #208]	@ (80013a4 <parse_cipsntptime_line+0x1e4>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff83 	bl	80001e0 <strcmp>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <parse_cipsntptime_line+0x126>
 80012e0:	2307      	movs	r3, #7
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012e4:	e02e      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	492f      	ldr	r1, [pc, #188]	@ (80013a8 <parse_cipsntptime_line+0x1e8>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7fe ff77 	bl	80001e0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <parse_cipsntptime_line+0x13e>
 80012f8:	2308      	movs	r3, #8
 80012fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012fc:	e022      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	492a      	ldr	r1, [pc, #168]	@ (80013ac <parse_cipsntptime_line+0x1ec>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff6b 	bl	80001e0 <strcmp>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <parse_cipsntptime_line+0x156>
 8001310:	2309      	movs	r3, #9
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001314:	e016      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4925      	ldr	r1, [pc, #148]	@ (80013b0 <parse_cipsntptime_line+0x1f0>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ff5f 	bl	80001e0 <strcmp>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <parse_cipsntptime_line+0x16e>
 8001328:	230a      	movs	r3, #10
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800132c:	e00a      	b.n	8001344 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	4920      	ldr	r1, [pc, #128]	@ (80013b4 <parse_cipsntptime_line+0x1f4>)
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff53 	bl	80001e0 <strcmp>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <parse_cipsntptime_line+0x184>
 8001340:	230b      	movs	r3, #11
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 800135c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001360:	4618      	mov	r0, r3
 8001362:	f007 ff7d 	bl	8009260 <mktime>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8001370:	2300      	movs	r3, #0
 8001372:	e001      	b.n	8001378 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001378:	4618      	mov	r0, r3
 800137a:	3750      	adds	r7, #80	@ 0x50
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	0800b9a0 	.word	0x0800b9a0
 8001384:	0800b9b0 	.word	0x0800b9b0
 8001388:	0800b9d4 	.word	0x0800b9d4
 800138c:	0800b9d8 	.word	0x0800b9d8
 8001390:	0800b9dc 	.word	0x0800b9dc
 8001394:	0800b9e0 	.word	0x0800b9e0
 8001398:	0800b9e4 	.word	0x0800b9e4
 800139c:	0800b9e8 	.word	0x0800b9e8
 80013a0:	0800b9ec 	.word	0x0800b9ec
 80013a4:	0800b9f0 	.word	0x0800b9f0
 80013a8:	0800b9f4 	.word	0x0800b9f4
 80013ac:	0800b9f8 	.word	0x0800b9f8
 80013b0:	0800b9fc 	.word	0x0800b9fc
 80013b4:	0800ba00 	.word	0x0800ba00

080013b8 <esp_ntp_config>:

int esp_ntp_config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0a0      	sub	sp, #128	@ 0x80
 80013bc:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 80013be:	463b      	mov	r3, r7
 80013c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <esp_ntp_config+0x48>)
 80013c2:	4910      	ldr	r1, [pc, #64]	@ (8001404 <esp_ntp_config+0x4c>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 fb73 	bl	8008ab0 <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7fe ff11 	bl	80001f4 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4639      	mov	r1, r7
 80013d8:	2364      	movs	r3, #100	@ 0x64
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <esp_ntp_config+0x50>)
 80013dc:	f002 ff18 	bl	8004210 <HAL_UART_Transmit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <esp_ntp_config+0x34>
        return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e004      	b.n	80013f6 <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 80013ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013f0:	f005 fb88 	bl	8006b04 <vTaskDelay>
    return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3780      	adds	r7, #128	@ 0x80
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	0800ba04 	.word	0x0800ba04
 8001404:	0800ba18 	.word	0x0800ba18
 8001408:	20000a00 	.word	0x20000a00

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001416:	f000 fd39 	bl	8001e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141a:	f000 f885 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141e:	f000 fa1d 	bl	800185c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001422:	f000 f9c7 	bl	80017b4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001426:	f000 f9ef 	bl	8001808 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800142a:	f000 f975 	bl	8001718 <MX_TIM3_Init>
  MX_RTC_Init();
 800142e:	f000 f8e7 	bl	8001600 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8001432:	482a      	ldr	r0, [pc, #168]	@ (80014dc <main+0xd0>)
 8001434:	f007 fb34 	bl	8008aa0 <puts>
  ret |= drv_uart_init();
 8001438:	f7ff fe9c 	bl	8001174 <drv_uart_init>
 800143c:	4602      	mov	r2, r0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4313      	orrs	r3, r2
 8001442:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8001444:	f7ff fd0e 	bl	8000e64 <drv_esp_init>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4313      	orrs	r3, r2
 800144e:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <main+0x54>
  {
	  printf("Esp response error\r\n");
 8001456:	4822      	ldr	r0, [pc, #136]	@ (80014e0 <main+0xd4>)
 8001458:	f007 fb22 	bl	8008aa0 <puts>
	  Error_Handler();
 800145c:	f000 faa8 	bl	80019b0 <Error_Handler>
  }

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001460:	4820      	ldr	r0, [pc, #128]	@ (80014e4 <main+0xd8>)
 8001462:	f002 faa1 	bl	80039a8 <HAL_TIM_Base_Start_IT>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <main+0x64>
  {
	  Error_Handler();
 800146c:	f000 faa0 	bl	80019b0 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001470:	f003 ff1e 	bl	80052b0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 8001474:	481c      	ldr	r0, [pc, #112]	@ (80014e8 <main+0xdc>)
 8001476:	f004 f812 	bl	800549e <osMutexNew>
 800147a:	4603      	mov	r3, r0
 800147c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <main+0xe0>)
 800147e:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 8001480:	481b      	ldr	r0, [pc, #108]	@ (80014f0 <main+0xe4>)
 8001482:	f004 f80c 	bl	800549e <osMutexNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <main+0xe8>)
 800148a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 800148c:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <main+0xec>)
 800148e:	2100      	movs	r1, #0
 8001490:	481a      	ldr	r0, [pc, #104]	@ (80014fc <main+0xf0>)
 8001492:	f003 ff57 	bl	8005344 <osThreadNew>
 8001496:	4603      	mov	r3, r0
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <main+0xf4>)
 800149a:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 800149c:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <main+0xf8>)
 800149e:	2100      	movs	r1, #0
 80014a0:	4819      	ldr	r0, [pc, #100]	@ (8001508 <main+0xfc>)
 80014a2:	f003 ff4f 	bl	8005344 <osThreadNew>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a18      	ldr	r2, [pc, #96]	@ (800150c <main+0x100>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <main+0x104>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4818      	ldr	r0, [pc, #96]	@ (8001514 <main+0x108>)
 80014b2:	f003 ff47 	bl	8005344 <osThreadNew>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <main+0x10c>)
 80014ba:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 80014bc:	4a17      	ldr	r2, [pc, #92]	@ (800151c <main+0x110>)
 80014be:	2100      	movs	r1, #0
 80014c0:	4817      	ldr	r0, [pc, #92]	@ (8001520 <main+0x114>)
 80014c2:	f003 ff3f 	bl	8005344 <osThreadNew>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <main+0x118>)
 80014ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014cc:	f003 ff14 	bl	80052f8 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 80014d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d4:	f003 ffc8 	bl	8005468 <osDelay>
 80014d8:	e7fa      	b.n	80014d0 <main+0xc4>
 80014da:	bf00      	nop
 80014dc:	0800ba78 	.word	0x0800ba78
 80014e0:	0800ba90 	.word	0x0800ba90
 80014e4:	20000970 	.word	0x20000970
 80014e8:	0800bb58 	.word	0x0800bb58
 80014ec:	20000a58 	.word	0x20000a58
 80014f0:	0800bb68 	.word	0x0800bb68
 80014f4:	20000a5c 	.word	0x20000a5c
 80014f8:	0800bac8 	.word	0x0800bac8
 80014fc:	0800067d 	.word	0x0800067d
 8001500:	20000a48 	.word	0x20000a48
 8001504:	0800baec 	.word	0x0800baec
 8001508:	08000a85 	.word	0x08000a85
 800150c:	20000a4c 	.word	0x20000a4c
 8001510:	0800bb10 	.word	0x0800bb10
 8001514:	08000b89 	.word	0x08000b89
 8001518:	20000a50 	.word	0x20000a50
 800151c:	0800bb34 	.word	0x0800bb34
 8001520:	08000a29 	.word	0x08000a29
 8001524:	20000a54 	.word	0x20000a54

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	@ 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	2230      	movs	r2, #48	@ 0x30
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f007 fbfc 	bl	8008d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <SystemClock_Config+0xd0>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <SystemClock_Config+0xd0>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
 800155c:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <SystemClock_Config+0xd0>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <SystemClock_Config+0xd4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a22      	ldr	r2, [pc, #136]	@ (80015fc <SystemClock_Config+0xd4>)
 8001572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <SystemClock_Config+0xd4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001584:	2309      	movs	r3, #9
 8001586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800158e:	2301      	movs	r3, #1
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001592:	2302      	movs	r3, #2
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001596:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800159a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800159c:	2308      	movs	r3, #8
 800159e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015a6:	2304      	movs	r3, #4
 80015a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 f842 	bl	800263c <HAL_RCC_OscConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015be:	f000 f9f7 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c2:	230f      	movs	r3, #15
 80015c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c6:	2302      	movs	r3, #2
 80015c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2102      	movs	r1, #2
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 faa4 	bl	8002b2c <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015ea:	f000 f9e1 	bl	80019b0 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	@ 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b090      	sub	sp, #64	@ 0x40
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001606:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2228      	movs	r2, #40	@ 0x28
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f007 fb87 	bl	8008d34 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001626:	4b3a      	ldr	r3, [pc, #232]	@ (8001710 <MX_RTC_Init+0x110>)
 8001628:	4a3a      	ldr	r2, [pc, #232]	@ (8001714 <MX_RTC_Init+0x114>)
 800162a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800162c:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <MX_RTC_Init+0x110>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <MX_RTC_Init+0x110>)
 8001634:	227f      	movs	r2, #127	@ 0x7f
 8001636:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001638:	4b35      	ldr	r3, [pc, #212]	@ (8001710 <MX_RTC_Init+0x110>)
 800163a:	22ff      	movs	r2, #255	@ 0xff
 800163c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800163e:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <MX_RTC_Init+0x110>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001644:	4b32      	ldr	r3, [pc, #200]	@ (8001710 <MX_RTC_Init+0x110>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <MX_RTC_Init+0x110>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001650:	482f      	ldr	r0, [pc, #188]	@ (8001710 <MX_RTC_Init+0x110>)
 8001652:	f001 fd7b 	bl	800314c <HAL_RTC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800165c:	f000 f9a8 	bl	80019b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800167a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800167e:	2201      	movs	r2, #1
 8001680:	4619      	mov	r1, r3
 8001682:	4823      	ldr	r0, [pc, #140]	@ (8001710 <MX_RTC_Init+0x110>)
 8001684:	f001 fde3 	bl	800324e <HAL_RTC_SetTime>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800168e:	f000 f98f 	bl	80019b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ae:	2201      	movs	r2, #1
 80016b0:	4619      	mov	r1, r3
 80016b2:	4817      	ldr	r0, [pc, #92]	@ (8001710 <MX_RTC_Init+0x110>)
 80016b4:	f001 fe65 	bl	8003382 <HAL_RTC_SetDate>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80016be:	f000 f977 	bl	80019b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80016ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2201      	movs	r2, #1
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_RTC_Init+0x110>)
 80016fa:	f001 fec7 	bl	800348c <HAL_RTC_SetAlarm_IT>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001704:	f000 f954 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3740      	adds	r7, #64	@ 0x40
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000950 	.word	0x20000950
 8001714:	40002800 	.word	0x40002800

08001718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001736:	4a1e      	ldr	r2, [pc, #120]	@ (80017b0 <MX_TIM3_Init+0x98>)
 8001738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_TIM3_Init+0x94>)
 800173c:	2253      	movs	r2, #83	@ 0x53
 800173e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001748:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800174c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001756:	2280      	movs	r2, #128	@ 0x80
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <MX_TIM3_Init+0x94>)
 800175c:	f002 f8d4 	bl	8003908 <HAL_TIM_Base_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001766:	f000 f923 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4619      	mov	r1, r3
 8001776:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001778:	f002 fa68 	bl	8003c4c <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001782:	f000 f915 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800178e:	463b      	mov	r3, r7
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <MX_TIM3_Init+0x94>)
 8001794:	f002 fc6a 	bl	800406c <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800179e:	f000 f907 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000970 	.word	0x20000970
 80017b0:	40000400 	.word	0x40000400

080017b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <MX_USART2_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ec:	f002 fcc0 	bl	8004170 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 f8db 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200009b8 	.word	0x200009b8
 8001804:	40004400 	.word	0x40004400

08001808 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <MX_USART6_UART_Init+0x50>)
 8001810:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 8001814:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001818:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_USART6_UART_Init+0x4c>)
 8001840:	f002 fc96 	bl	8004170 <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800184a:	f000 f8b1 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000a00 	.word	0x20000a00
 8001858:	40011400 	.word	0x40011400

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <MX_GPIO_Init+0xf8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a36      	ldr	r2, [pc, #216]	@ (8001954 <MX_GPIO_Init+0xf8>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <MX_GPIO_Init+0xf8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <MX_GPIO_Init+0xf8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a2f      	ldr	r2, [pc, #188]	@ (8001954 <MX_GPIO_Init+0xf8>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b2d      	ldr	r3, [pc, #180]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a28      	ldr	r2, [pc, #160]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <MX_GPIO_Init+0xf8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2120      	movs	r1, #32
 80018e6:	481c      	ldr	r0, [pc, #112]	@ (8001958 <MX_GPIO_Init+0xfc>)
 80018e8:	f000 fe8e 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	481a      	ldr	r0, [pc, #104]	@ (800195c <MX_GPIO_Init+0x100>)
 80018f2:	f000 fe89 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4814      	ldr	r0, [pc, #80]	@ (8001960 <MX_GPIO_Init+0x104>)
 800190e:	f000 fcf7 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001912:	2320      	movs	r3, #32
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	480b      	ldr	r0, [pc, #44]	@ (8001958 <MX_GPIO_Init+0xfc>)
 800192a:	f000 fce9 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 800192e:	2310      	movs	r3, #16
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_GPIO_Init+0x100>)
 8001946:	f000 fcdb 	bl	8002300 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	@ 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400
 8001960:	40020800 	.word	0x40020800

08001964 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(FAN_GPIO_Port, pin, GPIO_PIN_RESET);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001974:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800197e:	db0a      	blt.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 800198e:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	}
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000a64 	.word	0x20000a64
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000a60 	.word	0x20000a60

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <Error_Handler+0x8>

080019bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_MspInit+0x54>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <HAL_MspInit+0x54>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_MspInit+0x54>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_MspInit+0x54>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <HAL_MspInit+0x54>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <HAL_MspInit+0x54>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	210f      	movs	r1, #15
 80019fe:	f06f 0001 	mvn.w	r0, #1
 8001a02:	f000 fbb4 	bl	800216e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_RTC_MspInit+0x60>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d119      	bne.n	8001a6c <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a40:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fa90 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a52:	f7ff ffad 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_RTC_MspInit+0x64>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	2029      	movs	r0, #41	@ 0x29
 8001a62:	f000 fb84 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a66:	2029      	movs	r0, #41	@ 0x29
 8001a68:	f000 fb9d 	bl	80021a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40002800 	.word	0x40002800
 8001a78:	42470e3c 	.word	0x42470e3c

08001a7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x48>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d115      	bne.n	8001aba <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	201d      	movs	r0, #29
 8001ab0:	f000 fb5d 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ab4:	201d      	movs	r0, #29
 8001ab6:	f000 fb76 	bl	80021a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd4 <HAL_UART_MspInit+0x108>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d134      	bne.n	8001b58 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	4a38      	ldr	r2, [pc, #224]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afe:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a31      	ldr	r2, [pc, #196]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b26:	230c      	movs	r3, #12
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b36:	2307      	movs	r3, #7
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4826      	ldr	r0, [pc, #152]	@ (8001bdc <HAL_UART_MspInit+0x110>)
 8001b42:	f000 fbdd 	bl	8002300 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	2026      	movs	r0, #38	@ 0x26
 8001b4c:	f000 fb0f 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b50:	2026      	movs	r0, #38	@ 0x26
 8001b52:	f000 fb28 	bl	80021a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b56:	e038      	b.n	8001bca <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a20      	ldr	r2, [pc, #128]	@ (8001be0 <HAL_UART_MspInit+0x114>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d133      	bne.n	8001bca <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_UART_MspInit+0x10c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b9a:	23c0      	movs	r3, #192	@ 0xc0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001baa:	2308      	movs	r3, #8
 8001bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <HAL_UART_MspInit+0x118>)
 8001bb6:	f000 fba3 	bl	8002300 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	2047      	movs	r0, #71	@ 0x47
 8001bc0:	f000 fad5 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bc4:	2047      	movs	r0, #71	@ 0x47
 8001bc6:	f000 faee 	bl	80021a6 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	@ 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40020800 	.word	0x40020800

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <NMI_Handler+0x4>

08001bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c22:	f000 f985 	bl	8001f30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c26:	f005 fc01 	bl	800742c <xTaskGetSchedulerState>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d001      	beq.n	8001c34 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c30:	f006 fafa 	bl	8008228 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM3_IRQHandler+0x10>)
 8001c3e:	f001 ff15 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000970 	.word	0x20000970

08001c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <USART2_IRQHandler+0x10>)
 8001c52:	f002 fb8d 	bl	8004370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200009b8 	.word	0x200009b8

08001c60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <RTC_Alarm_IRQHandler+0x10>)
 8001c66:	f001 fd55 	bl	8003714 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000950 	.word	0x20000950

08001c74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <USART6_IRQHandler+0x10>)
 8001c7a:	f002 fb79 	bl	8004370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000a00 	.word	0x20000a00

08001c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return 1;
 8001c8c:	2301      	movs	r3, #1
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_kill>:

int _kill(int pid, int sig)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca2:	f007 ffc3 	bl	8009c2c <__errno>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2216      	movs	r2, #22
 8001caa:	601a      	str	r2, [r3, #0]
  return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_exit>:

void _exit (int status)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ffe7 	bl	8001c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cca:	bf00      	nop
 8001ccc:	e7fd      	b.n	8001cca <_exit+0x12>

08001cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e00a      	b.n	8001cf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce0:	f3af 8000 	nop.w
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	60ba      	str	r2, [r7, #8]
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbf0      	blt.n	8001ce0 <_read+0x12>
  }

  return len;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e009      	b.n	8001d2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	60ba      	str	r2, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa34 	bl	8001190 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	dbf1      	blt.n	8001d1a <_write+0x12>
  }
  return len;
 8001d36:	687b      	ldr	r3, [r7, #4]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_close>:

int _close(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d68:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_isatty>:

int _isatty(int file)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f007 ff28 	bl	8009c2c <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20020000 	.word	0x20020000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	20000a6c 	.word	0x20000a6c
 8001e10:	20005538 	.word	0x20005538

08001e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e3c:	f7ff ffea 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	@ (8001e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	@ (8001e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f007 fee7 	bl	8009c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff facf 	bl	800140c <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001e7c:	0800bfb8 	.word	0x0800bfb8
  ldr r2, =_sbss
 8001e80:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001e84:	20005534 	.word	0x20005534

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <HAL_Init+0x40>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_Init+0x40>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_Init+0x40>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f94f 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fd7c 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f967 	bl	80021c2 <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 f92f 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	2000000c 	.word	0x2000000c

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000010 	.word	0x20000010
 8001f54:	20000a70 	.word	0x20000a70

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000a70 	.word	0x20000a70

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000010 	.word	0x20000010

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff feb6 	bl	8001f58 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d008      	beq.n	800220c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2280      	movs	r2, #128	@ 0x80
 80021fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e052      	b.n	80022b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0216 	bic.w	r2, r2, #22
 800221a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800222a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <HAL_DMA_Abort+0x62>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0208 	bic.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	e013      	b.n	8002286 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225e:	f7ff fe7b 	bl	8001f58 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b05      	cmp	r3, #5
 800226a:	d90c      	bls.n	8002286 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e015      	b.n	80022b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e4      	bne.n	800225e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002298:	223f      	movs	r2, #63	@ 0x3f
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2280      	movs	r2, #128	@ 0x80
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e00c      	b.n	80022f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2205      	movs	r2, #5
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e159      	b.n	80025d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8148 	bne.w	80025ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a2 	beq.w	80025ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b57      	ldr	r3, [pc, #348]	@ (80025e8 <HAL_GPIO_Init+0x2e8>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	4a56      	ldr	r2, [pc, #344]	@ (80025e8 <HAL_GPIO_Init+0x2e8>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002494:	6453      	str	r3, [r2, #68]	@ 0x44
 8002496:	4b54      	ldr	r3, [pc, #336]	@ (80025e8 <HAL_GPIO_Init+0x2e8>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a52      	ldr	r2, [pc, #328]	@ (80025ec <HAL_GPIO_Init+0x2ec>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a49      	ldr	r2, [pc, #292]	@ (80025f0 <HAL_GPIO_Init+0x2f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x202>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a48      	ldr	r2, [pc, #288]	@ (80025f4 <HAL_GPIO_Init+0x2f4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x1fe>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a47      	ldr	r2, [pc, #284]	@ (80025f8 <HAL_GPIO_Init+0x2f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x1fa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a46      	ldr	r2, [pc, #280]	@ (80025fc <HAL_GPIO_Init+0x2fc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x1f6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a45      	ldr	r2, [pc, #276]	@ (8002600 <HAL_GPIO_Init+0x300>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x1f2>
 80024ee:	2304      	movs	r3, #4
 80024f0:	e008      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_Init+0x204>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_GPIO_Init+0x204>
 8002502:	2300      	movs	r3, #0
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f002 0203 	and.w	r2, r2, #3
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	4093      	lsls	r3, r2
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002514:	4935      	ldr	r1, [pc, #212]	@ (80025ec <HAL_GPIO_Init+0x2ec>)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002522:	4b38      	ldr	r3, [pc, #224]	@ (8002604 <HAL_GPIO_Init+0x304>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002546:	4a2f      	ldr	r2, [pc, #188]	@ (8002604 <HAL_GPIO_Init+0x304>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254c:	4b2d      	ldr	r3, [pc, #180]	@ (8002604 <HAL_GPIO_Init+0x304>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002570:	4a24      	ldr	r2, [pc, #144]	@ (8002604 <HAL_GPIO_Init+0x304>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002576:	4b23      	ldr	r3, [pc, #140]	@ (8002604 <HAL_GPIO_Init+0x304>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259a:	4a1a      	ldr	r2, [pc, #104]	@ (8002604 <HAL_GPIO_Init+0x304>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a0:	4b18      	ldr	r3, [pc, #96]	@ (8002604 <HAL_GPIO_Init+0x304>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <HAL_GPIO_Init+0x304>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	f67f aea2 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020c00 	.word	0x40020c00
 8002600:	40021000 	.word	0x40021000
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e267      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00c      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800266e:	2b08      	cmp	r3, #8
 8002670:	d112      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b82      	ldr	r3, [pc, #520]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b7e      	ldr	r3, [pc, #504]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e242      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b70      	ldr	r3, [pc, #448]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6f      	ldr	r2, [pc, #444]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6d      	ldr	r3, [pc, #436]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6c      	ldr	r2, [pc, #432]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b69      	ldr	r3, [pc, #420]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a68      	ldr	r2, [pc, #416]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b66      	ldr	r3, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fc30 	bl	8001f58 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff fc2c 	bl	8001f58 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	@ 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e207      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fc1c 	bl	8001f58 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fc18 	bl	8001f58 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1f3      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b51      	ldr	r3, [pc, #324]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002752:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b47      	ldr	r3, [pc, #284]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b41      	ldr	r3, [pc, #260]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c7      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <HAL_RCC_OscConfig+0x244>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fbd1 	bl	8001f58 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff fbcd 	bl	8001f58 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a8      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4925      	ldr	r1, [pc, #148]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_RCC_OscConfig+0x244>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff fbb0 	bl	8001f58 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7ff fbac 	bl	8001f58 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e187      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_RCC_OscConfig+0x248>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff fb90 	bl	8001f58 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff fb8c 	bl	8001f58 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e167      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_RCC_OscConfig+0x240>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
 800285a:	e01b      	b.n	8002894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_OscConfig+0x248>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fb79 	bl	8001f58 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	e00e      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff fb75 	bl	8001f58 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d907      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e150      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 800287c:	40023800 	.word	0x40023800
 8002880:	42470000 	.word	0x42470000
 8002884:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	4b88      	ldr	r3, [pc, #544]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ea      	bne.n	800286a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8097 	beq.w	80029d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b81      	ldr	r3, [pc, #516]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	4a7c      	ldr	r2, [pc, #496]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c2:	4b7a      	ldr	r3, [pc, #488]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b77      	ldr	r3, [pc, #476]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b74      	ldr	r3, [pc, #464]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a73      	ldr	r2, [pc, #460]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7ff fb35 	bl	8001f58 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7ff fb31 	bl	8001f58 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e10c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab0 <HAL_RCC_OscConfig+0x474>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x2ea>
 8002918:	4b64      	ldr	r3, [pc, #400]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	4a63      	ldr	r2, [pc, #396]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	@ 0x70
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x30c>
 800292e:	4b5f      	ldr	r3, [pc, #380]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a5e      	ldr	r2, [pc, #376]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
 800293a:	4b5c      	ldr	r3, [pc, #368]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a5b      	ldr	r2, [pc, #364]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002948:	4b58      	ldr	r3, [pc, #352]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a57      	ldr	r2, [pc, #348]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	4b55      	ldr	r3, [pc, #340]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	4a54      	ldr	r2, [pc, #336]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff faf6 	bl	8001f58 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff faf2 	bl	8001f58 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0cb      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ee      	beq.n	8002970 <HAL_RCC_OscConfig+0x334>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7ff fae0 	bl	8001f58 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7ff fadc 	bl	8001f58 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0b5      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	4a38      	ldr	r2, [pc, #224]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a1 	beq.w	8002b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d05c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d141      	bne.n	8002a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x478>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fab0 	bl	8001f58 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff faac 	bl	8001f58 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e087      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	085b      	lsrs	r3, r3, #1
 8002a32:	3b01      	subs	r3, #1
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	491b      	ldr	r1, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fa85 	bl	8001f58 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7ff fa81 	bl	8001f58 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e05c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x416>
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7ff fa6e 	bl	8001f58 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff fa6a 	bl	8001f58 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e045      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x444>
 8002a9e:	e03d      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e038      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_RCC_OscConfig+0x4ec>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d028      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d121      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d11a      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0cc      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b68      	ldr	r3, [pc, #416]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90c      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d044      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e067      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4934      	ldr	r1, [pc, #208]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7ff f99c 	bl	8001f58 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7ff f998 	bl	8001f58 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d20c      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	@ (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f8fc 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	0800bb78 	.word	0x0800bb78
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b094      	sub	sp, #80	@ 0x50
 8002cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d10:	4b79      	ldr	r3, [pc, #484]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d00d      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f200 80e1 	bhi.w	8002ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x34>
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2a:	e0db      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b73      	ldr	r3, [pc, #460]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d30:	e0db      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b73      	ldr	r3, [pc, #460]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d36:	e0d8      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d38:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d42:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	2200      	movs	r2, #0
 8002d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4621      	mov	r1, r4
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	6139      	str	r1, [r7, #16]
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	4651      	mov	r1, sl
 8002da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da6:	4651      	mov	r1, sl
 8002da8:	018a      	lsls	r2, r1, #6
 8002daa:	4651      	mov	r1, sl
 8002dac:	ebb2 0801 	subs.w	r8, r2, r1
 8002db0:	4659      	mov	r1, fp
 8002db2:	eb63 0901 	sbc.w	r9, r3, r1
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dca:	4690      	mov	r8, r2
 8002dcc:	4699      	mov	r9, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	eb18 0303 	adds.w	r3, r8, r3
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	eb49 0303 	adc.w	r3, r9, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dea:	4629      	mov	r1, r5
 8002dec:	024b      	lsls	r3, r1, #9
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002df4:	4621      	mov	r1, r4
 8002df6:	024a      	lsls	r2, r1, #9
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfe:	2200      	movs	r2, #0
 8002e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e08:	f7fd faa2 	bl	8000350 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e14:	e058      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b38      	ldr	r3, [pc, #224]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4611      	mov	r1, r2
 8002e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e30:	4642      	mov	r2, r8
 8002e32:	464b      	mov	r3, r9
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	0159      	lsls	r1, r3, #5
 8002e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e42:	0150      	lsls	r0, r2, #5
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4641      	mov	r1, r8
 8002e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e4e:	4649      	mov	r1, r9
 8002e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e68:	ebb2 040a 	subs.w	r4, r2, sl
 8002e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	00eb      	lsls	r3, r5, #3
 8002e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7e:	00e2      	lsls	r2, r4, #3
 8002e80:	4614      	mov	r4, r2
 8002e82:	461d      	mov	r5, r3
 8002e84:	4643      	mov	r3, r8
 8002e86:	18e3      	adds	r3, r4, r3
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	eb45 0303 	adc.w	r3, r5, r3
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	028b      	lsls	r3, r1, #10
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	028a      	lsls	r2, r1, #10
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	61fa      	str	r2, [r7, #28]
 8002eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebc:	f7fd fa48 	bl	8000350 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ed8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3750      	adds	r7, #80	@ 0x50
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	007a1200 	.word	0x007a1200

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000008 	.word	0x20000008

08002f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f20:	f7ff fff0 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	4903      	ldr	r1, [pc, #12]	@ (8002f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	0800bb88 	.word	0x0800bb88

08002f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f48:	f7ff ffdc 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0b5b      	lsrs	r3, r3, #13
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	@ (8002f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	0800bb88 	.word	0x0800bb88

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d038      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f94:	4b68      	ldr	r3, [pc, #416]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe ffdd 	bl	8001f58 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa2:	f7fe ffd9 	bl	8001f58 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0bd      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb4:	4b61      	ldr	r3, [pc, #388]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	071b      	lsls	r3, r3, #28
 8002fd2:	495a      	ldr	r1, [pc, #360]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fda:	4b57      	ldr	r3, [pc, #348]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe ffba 	bl	8001f58 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fe8:	f7fe ffb6 	bl	8001f58 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e09a      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffa:	4b50      	ldr	r3, [pc, #320]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8083 	beq.w	800311a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b48      	ldr	r3, [pc, #288]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	4a47      	ldr	r2, [pc, #284]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003022:	6413      	str	r3, [r2, #64]	@ 0x40
 8003024:	4b45      	ldr	r3, [pc, #276]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003030:	4b43      	ldr	r3, [pc, #268]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800303c:	f7fe ff8c 	bl	8001f58 <HAL_GetTick>
 8003040:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fe ff88 	bl	8001f58 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e06c      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003056:	4b3a      	ldr	r3, [pc, #232]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003062:	4b36      	ldr	r3, [pc, #216]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d02f      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	d028      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003080:	4b2e      	ldr	r3, [pc, #184]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003088:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800308a:	4b2e      	ldr	r3, [pc, #184]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003090:	4b2c      	ldr	r3, [pc, #176]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003096:	4a29      	ldr	r2, [pc, #164]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d114      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe ff56 	bl	8001f58 <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe ff52 	bl	8001f58 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e034      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	4b1d      	ldr	r3, [pc, #116]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0ee      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030de:	d10d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80030e0:	4b16      	ldr	r3, [pc, #88]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80030f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030f4:	4911      	ldr	r1, [pc, #68]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
 80030fa:	e005      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a0e      	ldr	r2, [pc, #56]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	4909      	ldr	r1, [pc, #36]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	4313      	orrs	r3, r2
 8003118:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7d1a      	ldrb	r2, [r3, #20]
 800312a:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800312c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	42470068 	.word	0x42470068
 800313c:	40023800 	.word	0x40023800
 8003140:	40007000 	.word	0x40007000
 8003144:	42470e40 	.word	0x42470e40
 8003148:	424711e0 	.word	0x424711e0

0800314c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e073      	b.n	8003246 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7f5b      	ldrb	r3, [r3, #29]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fc50 	bl	8001a14 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d055      	beq.n	8003234 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	22ca      	movs	r2, #202	@ 0xca
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2253      	movs	r2, #83	@ 0x53
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fb31 	bl	8003800 <RTC_EnterInitMode>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d12c      	bne.n	8003202 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80031b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68d2      	ldr	r2, [r2, #12]
 80031e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6919      	ldr	r1, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	041a      	lsls	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb38 	bl	800386e <RTC_ExitInitMode>
 80031fe:	4603      	mov	r3, r0
 8003200:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d110      	bne.n	800322a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003216:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
 8003232:	e001      	b.n	8003238 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800324e:	b590      	push	{r4, r7, lr}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	7f1b      	ldrb	r3, [r3, #28]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_RTC_SetTime+0x1c>
 8003266:	2302      	movs	r3, #2
 8003268:	e087      	b.n	800337a <HAL_RTC_SetTime+0x12c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2202      	movs	r2, #2
 8003274:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d126      	bne.n	80032ca <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb0f 	bl	80038b8 <RTC_ByteToBcd2>
 800329a:	4603      	mov	r3, r0
 800329c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fb08 	bl	80038b8 <RTC_ByteToBcd2>
 80032a8:	4603      	mov	r3, r0
 80032aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032ac:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	789b      	ldrb	r3, [r3, #2]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fb00 	bl	80038b8 <RTC_ByteToBcd2>
 80032b8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	78db      	ldrb	r3, [r3, #3]
 80032c2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e018      	b.n	80032fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2200      	movs	r2, #0
 80032dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032ea:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	78db      	ldrb	r3, [r3, #3]
 80032f6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	22ca      	movs	r2, #202	@ 0xca
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2253      	movs	r2, #83	@ 0x53
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fa77 	bl	8003800 <RTC_EnterInitMode>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d120      	bne.n	800335e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003326:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800332a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800333a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	431a      	orrs	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fa8a 	bl	800386e <RTC_ExitInitMode>
 800335a:	4603      	mov	r3, r0
 800335c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	22ff      	movs	r2, #255	@ 0xff
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]

  return status;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
}
 800337a:	4618      	mov	r0, r3
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}

08003382 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003382:	b590      	push	{r4, r7, lr}
 8003384:	b087      	sub	sp, #28
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	7f1b      	ldrb	r3, [r3, #28]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_RTC_SetDate+0x1c>
 800339a:	2302      	movs	r3, #2
 800339c:	e071      	b.n	8003482 <HAL_RTC_SetDate+0x100>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2202      	movs	r2, #2
 80033a8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10e      	bne.n	80033ce <HAL_RTC_SetDate+0x4c>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	f023 0310 	bic.w	r3, r3, #16
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	330a      	adds	r3, #10
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11c      	bne.n	800340e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	78db      	ldrb	r3, [r3, #3]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fa6d 	bl	80038b8 <RTC_ByteToBcd2>
 80033de:	4603      	mov	r3, r0
 80033e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa66 	bl	80038b8 <RTC_ByteToBcd2>
 80033ec:	4603      	mov	r3, r0
 80033ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80033f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	789b      	ldrb	r3, [r3, #2]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fa5e 	bl	80038b8 <RTC_ByteToBcd2>
 80033fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e00e      	b.n	800342c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	78db      	ldrb	r3, [r3, #3]
 8003412:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800341a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003420:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	22ca      	movs	r2, #202	@ 0xca
 8003432:	625a      	str	r2, [r3, #36]	@ 0x24
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2253      	movs	r2, #83	@ 0x53
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f9df 	bl	8003800 <RTC_EnterInitMode>
 8003442:	4603      	mov	r3, r0
 8003444:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10c      	bne.n	8003466 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003456:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800345a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fa06 	bl	800386e <RTC_ExitInitMode>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	22ff      	movs	r2, #255	@ 0xff
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]

  return status;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
}
 8003482:	4618      	mov	r0, r3
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}
	...

0800348c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003498:	4b9b      	ldr	r3, [pc, #620]	@ (8003708 <HAL_RTC_SetAlarm_IT+0x27c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a9b      	ldr	r2, [pc, #620]	@ (800370c <HAL_RTC_SetAlarm_IT+0x280>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0adb      	lsrs	r3, r3, #11
 80034a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_RTC_SetAlarm_IT+0x36>
 80034be:	2302      	movs	r3, #2
 80034c0:	e11e      	b.n	8003700 <HAL_RTC_SetAlarm_IT+0x274>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2202      	movs	r2, #2
 80034cc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d137      	bne.n	8003544 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2200      	movs	r2, #0
 80034e6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f9e3 	bl	80038b8 <RTC_ByteToBcd2>
 80034f2:	4603      	mov	r3, r0
 80034f4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f9dc 	bl	80038b8 <RTC_ByteToBcd2>
 8003500:	4603      	mov	r3, r0
 8003502:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003504:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	789b      	ldrb	r3, [r3, #2]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f9d4 	bl	80038b8 <RTC_ByteToBcd2>
 8003510:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003512:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800351c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f9c6 	bl	80038b8 <RTC_ByteToBcd2>
 800352c:	4603      	mov	r3, r0
 800352e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8003530:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003538:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800353e:	4313      	orrs	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e023      	b.n	800358c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003564:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800356a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	78db      	ldrb	r3, [r3, #3]
 8003570:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003572:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800357c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003582:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003588:	4313      	orrs	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	22ca      	movs	r2, #202	@ 0xca
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2253      	movs	r2, #83	@ 0x53
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b0:	d142      	bne.n	8003638 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035c0:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80035d2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	22ff      	movs	r2, #255	@ 0xff
 80035e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2203      	movs	r2, #3
 80035ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e083      	b.n	8003700 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0e6      	beq.n	80035d4 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003624:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	e04c      	b.n	80036d2 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003646:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003658:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800365a:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RTC_SetAlarm_IT+0x27c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2b      	ldr	r2, [pc, #172]	@ (800370c <HAL_RTC_SetAlarm_IT+0x280>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	0adb      	lsrs	r3, r3, #11
 8003666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3b01      	subs	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	22ff      	movs	r2, #255	@ 0xff
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2203      	movs	r2, #3
 8003688:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e035      	b.n	8003700 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0e6      	beq.n	8003670 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c0:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80036d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003710 <HAL_RTC_SetAlarm_IT+0x284>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003710 <HAL_RTC_SetAlarm_IT+0x284>)
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036dc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80036de:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <HAL_RTC_SetAlarm_IT+0x284>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003710 <HAL_RTC_SetAlarm_IT+0x284>)
 80036e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	22ff      	movs	r2, #255	@ 0xff
 80036f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3724      	adds	r7, #36	@ 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}
 8003708:	20000008 	.word	0x20000008
 800370c:	10624dd3 	.word	0x10624dd3
 8003710:	40013c00 	.word	0x40013c00

08003714 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800371c:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_RTC_AlarmIRQHandler+0x88>)
 800371e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003722:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003750:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f824 	bl	80037a0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d012      	beq.n	800378c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003784:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8b4 	bl	80038f4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	775a      	strb	r2, [r3, #29]
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40013c00 	.word	0x40013c00

080037a0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0d      	ldr	r2, [pc, #52]	@ (80037fc <HAL_RTC_WaitForSynchro+0x48>)
 80037c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c8:	f7fe fbc6 	bl	8001f58 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037ce:	e009      	b.n	80037e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037d0:	f7fe fbc2 	bl	8001f58 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037de:	d901      	bls.n	80037e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e007      	b.n	80037f4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0ee      	beq.n	80037d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	00013f5f 	.word	0x00013f5f

08003800 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d122      	bne.n	8003864 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800382c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800382e:	f7fe fb93 	bl	8001f58 <HAL_GetTick>
 8003832:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003834:	e00c      	b.n	8003850 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003836:	f7fe fb8f 	bl	8001f58 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003844:	d904      	bls.n	8003850 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <RTC_EnterInitMode+0x64>
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d1e8      	bne.n	8003836 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003888:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff8b 	bl	80037b4 <HAL_RTC_WaitForSynchro>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2204      	movs	r2, #4
 80038a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80038c6:	e005      	b.n	80038d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	3b0a      	subs	r3, #10
 80038d2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2b09      	cmp	r3, #9
 80038d8:	d8f6      	bhi.n	80038c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b2db      	uxtb	r3, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e041      	b.n	800399e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe f8a4 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fa70 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e044      	b.n	8003a4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a58 <HAL_TIM_Base_Start_IT+0xb0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ea:	d013      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a5c <HAL_TIM_Base_Start_IT+0xb4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <HAL_TIM_Base_Start_IT+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x6c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	@ (8003a68 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d010      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	e007      	b.n	8003a48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40014000 	.word	0x40014000

08003a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0202 	mvn.w	r2, #2
 8003aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f999 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f98b 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f99c 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0204 	mvn.w	r2, #4
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f973 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f965 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f976 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f94d 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f93f 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f950 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f927 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f919 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f92a 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd fec6 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fab0 	bl	800415c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8fb 	bl	8003e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa82 	bl	8004148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_ConfigClockSource+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0b4      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x186>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca0:	d03e      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca6:	f200 8087 	bhi.w	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	f000 8086 	beq.w	8003dbe <HAL_TIM_ConfigClockSource+0x172>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb6:	d87f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b70      	cmp	r3, #112	@ 0x70
 8003cba:	d01a      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003cbc:	2b70      	cmp	r3, #112	@ 0x70
 8003cbe:	d87b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b60      	cmp	r3, #96	@ 0x60
 8003cc2:	d050      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x11a>
 8003cc4:	2b60      	cmp	r3, #96	@ 0x60
 8003cc6:	d877      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b50      	cmp	r3, #80	@ 0x50
 8003cca:	d03c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xfa>
 8003ccc:	2b50      	cmp	r3, #80	@ 0x50
 8003cce:	d873      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d058      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x13a>
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d86f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b30      	cmp	r3, #48	@ 0x30
 8003cda:	d064      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b30      	cmp	r3, #48	@ 0x30
 8003cde:	d86b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d060      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d867      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05c      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d05a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	e062      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	f000 f993 	bl	800402c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
      break;
 8003d1e:	e04f      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	f000 f97c 	bl	800402c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d42:	609a      	str	r2, [r3, #8]
      break;
 8003d44:	e03c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f8f0 	bl	8003f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2150      	movs	r1, #80	@ 0x50
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f949 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003d64:	e02c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 f90f 	bl	8003f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2160      	movs	r1, #96	@ 0x60
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f939 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003d84:	e01c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f8d0 	bl	8003f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2140      	movs	r1, #64	@ 0x40
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f929 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 f920 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003db6:	e003      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a37      	ldr	r2, [pc, #220]	@ (8003f1c <TIM_Base_SetConfig+0xf0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00f      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4a:	d00b      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a34      	ldr	r2, [pc, #208]	@ (8003f20 <TIM_Base_SetConfig+0xf4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <TIM_Base_SetConfig+0xf8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0x38>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a32      	ldr	r2, [pc, #200]	@ (8003f28 <TIM_Base_SetConfig+0xfc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d108      	bne.n	8003e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <TIM_Base_SetConfig+0xf0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e84:	d017      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a25      	ldr	r2, [pc, #148]	@ (8003f20 <TIM_Base_SetConfig+0xf4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a24      	ldr	r2, [pc, #144]	@ (8003f24 <TIM_Base_SetConfig+0xf8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a23      	ldr	r2, [pc, #140]	@ (8003f28 <TIM_Base_SetConfig+0xfc>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <TIM_Base_SetConfig+0x100>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <TIM_Base_SetConfig+0x104>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	@ (8003f34 <TIM_Base_SetConfig+0x108>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8003f1c <TIM_Base_SetConfig+0xf0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d103      	bne.n	8003ef6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f043 0204 	orr.w	r2, r3, #4
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	601a      	str	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40014400 	.word	0x40014400
 8003f34:	40014800 	.word	0x40014800

08003f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 030a 	bic.w	r3, r3, #10
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 0210 	bic.w	r2, r3, #16
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	f043 0307 	orr.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	431a      	orrs	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4313      	orrs	r3, r2
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004080:	2302      	movs	r3, #2
 8004082:	e050      	b.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d013      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a16      	ldr	r2, [pc, #88]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10c      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40014000 	.word	0x40014000

08004148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e042      	b.n	8004208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fc98 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fdd3 	bl	8004d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	@ 0x28
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b20      	cmp	r3, #32
 800422e:	d175      	bne.n	800431c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Transmit+0x2c>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e06e      	b.n	800431e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2221      	movs	r2, #33	@ 0x21
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424e:	f7fd fe83 	bl	8001f58 <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004268:	d108      	bne.n	800427c <HAL_UART_Transmit+0x6c>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	e003      	b.n	8004284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004284:	e02e      	b.n	80042e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	2180      	movs	r1, #128	@ 0x80
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fb37 	bl	8004904 <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e03a      	b.n	800431e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3302      	adds	r3, #2
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e007      	b.n	80042d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1cb      	bne.n	8004286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2140      	movs	r1, #64	@ 0x40
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fb03 	bl	8004904 <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b20      	cmp	r3, #32
 800433e:	d112      	bne.n	8004366 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Receive_IT+0x26>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e00b      	b.n	8004368 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	461a      	mov	r2, r3
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fb2a 	bl	80049b6 <UART_Start_Receive_IT>
 8004362:	4603      	mov	r3, r0
 8004364:	e000      	b.n	8004368 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b0ba      	sub	sp, #232	@ 0xe8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_UART_IRQHandler+0x66>
 80043c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fc07 	bl	8004be2 <UART_Receive_IT>
      return;
 80043d4:	e273      	b.n	80048be <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80de 	beq.w	800459c <HAL_UART_IRQHandler+0x22c>
 80043e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80d1 	beq.w	800459c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_UART_IRQHandler+0xae>
 8004406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_UART_IRQHandler+0xd2>
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	f043 0202 	orr.w	r2, r3, #2
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xf6>
 800444e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <HAL_UART_IRQHandler+0x126>
 8004472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d105      	bne.n	800448a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800447e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	f043 0208 	orr.w	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 820a 	beq.w	80048b4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_UART_IRQHandler+0x14e>
 80044ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb92 	bl	8004be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c8:	2b40      	cmp	r3, #64	@ 0x40
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <HAL_UART_IRQHandler+0x17a>
 80044e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d04f      	beq.n	800458a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa9d 	bl	8004a2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	d141      	bne.n	8004582 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004514:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800451c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800452a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800452e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1d9      	bne.n	80044fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d013      	beq.n	800457a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	4a8a      	ldr	r2, [pc, #552]	@ (8004780 <HAL_UART_IRQHandler+0x410>)
 8004558:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	4618      	mov	r0, r3
 8004560:	f7fd feab 	bl	80022ba <HAL_DMA_Abort_IT>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004574:	4610      	mov	r0, r2
 8004576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	e00e      	b.n	8004598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f9ac 	bl	80048d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	e00a      	b.n	8004598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9a8 	bl	80048d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	e006      	b.n	8004598 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9a4 	bl	80048d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004596:	e18d      	b.n	80048b4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	bf00      	nop
    return;
 800459a:	e18b      	b.n	80048b4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	f040 8167 	bne.w	8004874 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8160 	beq.w	8004874 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8159 	beq.w	8004874 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e2:	2b40      	cmp	r3, #64	@ 0x40
 80045e4:	f040 80ce 	bne.w	8004784 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a9 	beq.w	8004750 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004606:	429a      	cmp	r2, r3
 8004608:	f080 80a2 	bcs.w	8004750 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004612:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461e:	f000 8088 	beq.w	8004732 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800463c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800464e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800465a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1d9      	bne.n	8004622 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800467e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3314      	adds	r3, #20
 800468e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004692:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004696:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800469a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e1      	bne.n	800466e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3314      	adds	r3, #20
 80046ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e3      	bne.n	80046aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004702:	f023 0310 	bic.w	r3, r3, #16
 8004706:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004714:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004716:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800471a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e3      	bne.n	80046f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd fd54 	bl	80021da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	b29b      	uxth	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8cf 	bl	80048ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800474e:	e0b3      	b.n	80048b8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004754:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004758:	429a      	cmp	r2, r3
 800475a:	f040 80ad 	bne.w	80048b8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004768:	f040 80a6 	bne.w	80048b8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8b7 	bl	80048ec <HAL_UARTEx_RxEventCallback>
      return;
 800477e:	e09b      	b.n	80048b8 <HAL_UART_IRQHandler+0x548>
 8004780:	08004af1 	.word	0x08004af1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800478c:	b29b      	uxth	r3, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 808e 	beq.w	80048bc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80047a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8089 	beq.w	80048bc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80047d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e3      	bne.n	80047aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	623b      	str	r3, [r7, #32]
   return(result);
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3314      	adds	r3, #20
 8004802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004806:	633a      	str	r2, [r7, #48]	@ 0x30
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800480c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e3      	bne.n	80047e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	60fb      	str	r3, [r7, #12]
   return(result);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0310 	bic.w	r3, r3, #16
 800483e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	617b      	str	r3, [r7, #20]
   return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e3      	bne.n	8004828 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f83d 	bl	80048ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004872:	e023      	b.n	80048bc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_UART_IRQHandler+0x524>
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f940 	bl	8004b12 <UART_Transmit_IT>
    return;
 8004892:	e014      	b.n	80048be <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <HAL_UART_IRQHandler+0x54e>
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f980 	bl	8004bb2 <UART_EndTransmit_IT>
    return;
 80048b2:	e004      	b.n	80048be <HAL_UART_IRQHandler+0x54e>
    return;
 80048b4:	bf00      	nop
 80048b6:	e002      	b.n	80048be <HAL_UART_IRQHandler+0x54e>
      return;
 80048b8:	bf00      	nop
 80048ba:	e000      	b.n	80048be <HAL_UART_IRQHandler+0x54e>
      return;
 80048bc:	bf00      	nop
  }
}
 80048be:	37e8      	adds	r7, #232	@ 0xe8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004914:	e03b      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d037      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fd fb1b 	bl	8001f58 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <UART_WaitOnFlagUntilTimeout+0x30>
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e03a      	b.n	80049ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d023      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b80      	cmp	r3, #128	@ 0x80
 800494a:	d020      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x8a>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d01d      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b08      	cmp	r3, #8
 800495e:	d116      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f857 	bl	8004a2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2208      	movs	r2, #8
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e00f      	b.n	80049ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d0b4      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	4613      	mov	r3, r2
 80049c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2222      	movs	r2, #34	@ 0x22
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0220 	orr.w	r2, r2, #32
 8004a1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b095      	sub	sp, #84	@ 0x54
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a52:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e5      	bne.n	8004a32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d119      	bne.n	8004ad6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 0310 	bic.w	r3, r3, #16
 8004ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac2:	61ba      	str	r2, [r7, #24]
 8004ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6979      	ldr	r1, [r7, #20]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ae4:	bf00      	nop
 8004ae6:	3754      	adds	r7, #84	@ 0x54
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fee7 	bl	80048d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b21      	cmp	r3, #33	@ 0x21
 8004b24:	d13e      	bne.n	8004ba4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2e:	d114      	bne.n	8004b5a <UART_Transmit_IT+0x48>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	621a      	str	r2, [r3, #32]
 8004b58:	e008      	b.n	8004b6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6211      	str	r1, [r2, #32]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10f      	bne.n	8004ba0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fe76 	bl	80048c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08c      	sub	sp, #48	@ 0x30
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b22      	cmp	r3, #34	@ 0x22
 8004bfc:	f040 80aa 	bne.w	8004d54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c08:	d115      	bne.n	8004c36 <UART_Receive_IT+0x54>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d111      	bne.n	8004c36 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c34:	e024      	b.n	8004c80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c44:	d007      	beq.n	8004c56 <UART_Receive_IT+0x74>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <UART_Receive_IT+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e008      	b.n	8004c76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d15d      	bne.n	8004d50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0220 	bic.w	r2, r2, #32
 8004ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d135      	bne.n	8004d46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d00:	623a      	str	r2, [r7, #32]
 8004d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	69f9      	ldr	r1, [r7, #28]
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d10a      	bne.n	8004d38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fdd4 	bl	80048ec <HAL_UARTEx_RxEventCallback>
 8004d44:	e002      	b.n	8004d4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc f96a 	bl	8001020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e002      	b.n	8004d56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3730      	adds	r7, #48	@ 0x30
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b0c0      	sub	sp, #256	@ 0x100
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	ea40 0301 	orr.w	r3, r0, r1
 8004d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004db8:	f021 010c 	bic.w	r1, r1, #12
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	6999      	ldr	r1, [r3, #24]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	ea40 0301 	orr.w	r3, r0, r1
 8004de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b8f      	ldr	r3, [pc, #572]	@ (800502c <UART_SetConfig+0x2cc>)
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d005      	beq.n	8004e00 <UART_SetConfig+0xa0>
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8005030 <UART_SetConfig+0x2d0>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d104      	bne.n	8004e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e00:	f7fe f8a0 	bl	8002f44 <HAL_RCC_GetPCLK2Freq>
 8004e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e08:	e003      	b.n	8004e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e0a:	f7fe f887 	bl	8002f1c <HAL_RCC_GetPCLK1Freq>
 8004e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1c:	f040 810c 	bne.w	8005038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e32:	4622      	mov	r2, r4
 8004e34:	462b      	mov	r3, r5
 8004e36:	1891      	adds	r1, r2, r2
 8004e38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e42:	4621      	mov	r1, r4
 8004e44:	eb12 0801 	adds.w	r8, r2, r1
 8004e48:	4629      	mov	r1, r5
 8004e4a:	eb43 0901 	adc.w	r9, r3, r1
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e62:	4690      	mov	r8, r2
 8004e64:	4699      	mov	r9, r3
 8004e66:	4623      	mov	r3, r4
 8004e68:	eb18 0303 	adds.w	r3, r8, r3
 8004e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e70:	462b      	mov	r3, r5
 8004e72:	eb49 0303 	adc.w	r3, r9, r3
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e8e:	460b      	mov	r3, r1
 8004e90:	18db      	adds	r3, r3, r3
 8004e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e94:	4613      	mov	r3, r2
 8004e96:	eb42 0303 	adc.w	r3, r2, r3
 8004e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ea4:	f7fb fa54 	bl	8000350 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4b61      	ldr	r3, [pc, #388]	@ (8005034 <UART_SetConfig+0x2d4>)
 8004eae:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	011c      	lsls	r4, r3, #4
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ed8:	4641      	mov	r1, r8
 8004eda:	eb12 0a01 	adds.w	sl, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef8:	4692      	mov	sl, r2
 8004efa:	469b      	mov	fp, r3
 8004efc:	4643      	mov	r3, r8
 8004efe:	eb1a 0303 	adds.w	r3, sl, r3
 8004f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f06:	464b      	mov	r3, r9
 8004f08:	eb4b 0303 	adc.w	r3, fp, r3
 8004f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f24:	460b      	mov	r3, r1
 8004f26:	18db      	adds	r3, r3, r3
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f3a:	f7fb fa09 	bl	8000350 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	4b3b      	ldr	r3, [pc, #236]	@ (8005034 <UART_SetConfig+0x2d4>)
 8004f46:	fba3 2301 	umull	r2, r3, r3, r1
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2264      	movs	r2, #100	@ 0x64
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	1acb      	subs	r3, r1, r3
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f5a:	4b36      	ldr	r3, [pc, #216]	@ (8005034 <UART_SetConfig+0x2d4>)
 8004f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f68:	441c      	add	r4, r3
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f84:	415b      	adcs	r3, r3
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	1851      	adds	r1, r2, r1
 8004f90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f92:	4649      	mov	r1, r9
 8004f94:	414b      	adcs	r3, r1
 8004f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	00cb      	lsls	r3, r1, #3
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fae:	4651      	mov	r1, sl
 8004fb0:	00ca      	lsls	r2, r1, #3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ff6:	f7fb f9ab 	bl	8000350 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <UART_SetConfig+0x2d4>)
 8005000:	fba3 1302 	umull	r1, r3, r3, r2
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	2164      	movs	r1, #100	@ 0x64
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	3332      	adds	r3, #50	@ 0x32
 8005012:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <UART_SetConfig+0x2d4>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f003 0207 	and.w	r2, r3, #7
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4422      	add	r2, r4
 8005026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005028:	e106      	b.n	8005238 <UART_SetConfig+0x4d8>
 800502a:	bf00      	nop
 800502c:	40011000 	.word	0x40011000
 8005030:	40011400 	.word	0x40011400
 8005034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800504a:	4642      	mov	r2, r8
 800504c:	464b      	mov	r3, r9
 800504e:	1891      	adds	r1, r2, r2
 8005050:	6239      	str	r1, [r7, #32]
 8005052:	415b      	adcs	r3, r3
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
 8005056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800505a:	4641      	mov	r1, r8
 800505c:	1854      	adds	r4, r2, r1
 800505e:	4649      	mov	r1, r9
 8005060:	eb43 0501 	adc.w	r5, r3, r1
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	00eb      	lsls	r3, r5, #3
 800506e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005072:	00e2      	lsls	r2, r4, #3
 8005074:	4614      	mov	r4, r2
 8005076:	461d      	mov	r5, r3
 8005078:	4643      	mov	r3, r8
 800507a:	18e3      	adds	r3, r4, r3
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005080:	464b      	mov	r3, r9
 8005082:	eb45 0303 	adc.w	r3, r5, r3
 8005086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050a6:	4629      	mov	r1, r5
 80050a8:	008b      	lsls	r3, r1, #2
 80050aa:	4621      	mov	r1, r4
 80050ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b0:	4621      	mov	r1, r4
 80050b2:	008a      	lsls	r2, r1, #2
 80050b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050b8:	f7fb f94a 	bl	8000350 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4b60      	ldr	r3, [pc, #384]	@ (8005244 <UART_SetConfig+0x4e4>)
 80050c2:	fba3 2302 	umull	r2, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	011c      	lsls	r4, r3, #4
 80050ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	61b9      	str	r1, [r7, #24]
 80050e4:	415b      	adcs	r3, r3
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ec:	4641      	mov	r1, r8
 80050ee:	1851      	adds	r1, r2, r1
 80050f0:	6139      	str	r1, [r7, #16]
 80050f2:	4649      	mov	r1, r9
 80050f4:	414b      	adcs	r3, r1
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005104:	4659      	mov	r1, fp
 8005106:	00cb      	lsls	r3, r1, #3
 8005108:	4651      	mov	r1, sl
 800510a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510e:	4651      	mov	r1, sl
 8005110:	00ca      	lsls	r2, r1, #3
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	4603      	mov	r3, r0
 8005118:	4642      	mov	r2, r8
 800511a:	189b      	adds	r3, r3, r2
 800511c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005120:	464b      	mov	r3, r9
 8005122:	460a      	mov	r2, r1
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005156:	f7fb f8fb 	bl	8000350 <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4611      	mov	r1, r2
 8005160:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005162:	fba3 2301 	umull	r2, r3, r3, r1
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2264      	movs	r2, #100	@ 0x64
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	1acb      	subs	r3, r1, r3
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	3332      	adds	r3, #50	@ 0x32
 8005174:	4a33      	ldr	r2, [pc, #204]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005180:	441c      	add	r4, r3
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	673b      	str	r3, [r7, #112]	@ 0x70
 800518a:	677a      	str	r2, [r7, #116]	@ 0x74
 800518c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	415b      	adcs	r3, r3
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a0:	4641      	mov	r1, r8
 80051a2:	1851      	adds	r1, r2, r1
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	4649      	mov	r1, r9
 80051a8:	414b      	adcs	r3, r1
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b8:	4659      	mov	r1, fp
 80051ba:	00cb      	lsls	r3, r1, #3
 80051bc:	4651      	mov	r1, sl
 80051be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c2:	4651      	mov	r1, sl
 80051c4:	00ca      	lsls	r2, r1, #3
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	4642      	mov	r2, r8
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d2:	464b      	mov	r3, r9
 80051d4:	460a      	mov	r2, r1
 80051d6:	eb42 0303 	adc.w	r3, r2, r3
 80051da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051f4:	4649      	mov	r1, r9
 80051f6:	008b      	lsls	r3, r1, #2
 80051f8:	4641      	mov	r1, r8
 80051fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fe:	4641      	mov	r1, r8
 8005200:	008a      	lsls	r2, r1, #2
 8005202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005206:	f7fb f8a3 	bl	8000350 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	@ 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	3332      	adds	r3, #50	@ 0x32
 8005222:	4a08      	ldr	r2, [pc, #32]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 020f 	and.w	r2, r3, #15
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4422      	add	r2, r4
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800523e:	46bd      	mov	sp, r7
 8005240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005244:	51eb851f 	.word	0x51eb851f

08005248 <__NVIC_SetPriority>:
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	6039      	str	r1, [r7, #0]
 8005252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005258:	2b00      	cmp	r3, #0
 800525a:	db0a      	blt.n	8005272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	490c      	ldr	r1, [pc, #48]	@ (8005294 <__NVIC_SetPriority+0x4c>)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	440b      	add	r3, r1
 800526c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005270:	e00a      	b.n	8005288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4908      	ldr	r1, [pc, #32]	@ (8005298 <__NVIC_SetPriority+0x50>)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	3b04      	subs	r3, #4
 8005280:	0112      	lsls	r2, r2, #4
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	440b      	add	r3, r1
 8005286:	761a      	strb	r2, [r3, #24]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	e000e100 	.word	0xe000e100
 8005298:	e000ed00 	.word	0xe000ed00

0800529c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052a0:	2100      	movs	r1, #0
 80052a2:	f06f 0004 	mvn.w	r0, #4
 80052a6:	f7ff ffcf 	bl	8005248 <__NVIC_SetPriority>
#endif
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b6:	f3ef 8305 	mrs	r3, IPSR
 80052ba:	603b      	str	r3, [r7, #0]
  return(result);
 80052bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052c2:	f06f 0305 	mvn.w	r3, #5
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e00c      	b.n	80052e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052ca:	4b0a      	ldr	r3, [pc, #40]	@ (80052f4 <osKernelInitialize+0x44>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d105      	bne.n	80052de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <osKernelInitialize+0x44>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052d8:	2300      	movs	r3, #0
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	e002      	b.n	80052e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052e4:	687b      	ldr	r3, [r7, #4]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000a74 	.word	0x20000a74

080052f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fe:	f3ef 8305 	mrs	r3, IPSR
 8005302:	603b      	str	r3, [r7, #0]
  return(result);
 8005304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <osKernelStart+0x1a>
    stat = osErrorISR;
 800530a:	f06f 0305 	mvn.w	r3, #5
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	e010      	b.n	8005334 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005312:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <osKernelStart+0x48>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d109      	bne.n	800532e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800531a:	f7ff ffbf 	bl	800529c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800531e:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <osKernelStart+0x48>)
 8005320:	2202      	movs	r2, #2
 8005322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005324:	f001 fc24 	bl	8006b70 <vTaskStartScheduler>
      stat = osOK;
 8005328:	2300      	movs	r3, #0
 800532a:	607b      	str	r3, [r7, #4]
 800532c:	e002      	b.n	8005334 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005334:	687b      	ldr	r3, [r7, #4]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000a74 	.word	0x20000a74

08005344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	@ 0x38
 8005348:	af04      	add	r7, sp, #16
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005354:	f3ef 8305 	mrs	r3, IPSR
 8005358:	617b      	str	r3, [r7, #20]
  return(result);
 800535a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800535c:	2b00      	cmp	r3, #0
 800535e:	d17e      	bne.n	800545e <osThreadNew+0x11a>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d07b      	beq.n	800545e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005366:	2380      	movs	r3, #128	@ 0x80
 8005368:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800536a:	2318      	movs	r3, #24
 800536c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005372:	f04f 33ff 	mov.w	r3, #4294967295
 8005376:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d045      	beq.n	800540a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <osThreadNew+0x48>
        name = attr->name;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <osThreadNew+0x6e>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b38      	cmp	r3, #56	@ 0x38
 80053a4:	d805      	bhi.n	80053b2 <osThreadNew+0x6e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <osThreadNew+0x72>
        return (NULL);
 80053b2:	2300      	movs	r3, #0
 80053b4:	e054      	b.n	8005460 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00e      	beq.n	80053ec <osThreadNew+0xa8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80053d4:	d90a      	bls.n	80053ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <osThreadNew+0xa8>
        mem = 1;
 80053e6:	2301      	movs	r3, #1
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e010      	b.n	800540e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10c      	bne.n	800540e <osThreadNew+0xca>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d108      	bne.n	800540e <osThreadNew+0xca>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <osThreadNew+0xca>
          mem = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e001      	b.n	800540e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800540a:	2300      	movs	r3, #0
 800540c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d110      	bne.n	8005436 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800541c:	9202      	str	r2, [sp, #8]
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f001 f944 	bl	80066b8 <xTaskCreateStatic>
 8005430:	4603      	mov	r3, r0
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e013      	b.n	800545e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d110      	bne.n	800545e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	b29a      	uxth	r2, r3
 8005440:	f107 0310 	add.w	r3, r7, #16
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f001 f992 	bl	8006778 <xTaskCreate>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d001      	beq.n	800545e <osThreadNew+0x11a>
            hTask = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800545e:	693b      	ldr	r3, [r7, #16]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3728      	adds	r7, #40	@ 0x28
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005470:	f3ef 8305 	mrs	r3, IPSR
 8005474:	60bb      	str	r3, [r7, #8]
  return(result);
 8005476:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <osDelay+0x1c>
    stat = osErrorISR;
 800547c:	f06f 0305 	mvn.w	r3, #5
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e007      	b.n	8005494 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <osDelay+0x2c>
      vTaskDelay(ticks);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 fb38 	bl	8006b04 <vTaskDelay>
    }
  }

  return (stat);
 8005494:	68fb      	ldr	r3, [r7, #12]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800549e:	b580      	push	{r7, lr}
 80054a0:	b088      	sub	sp, #32
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80054b0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d174      	bne.n	80055a0 <osMutexNew+0x102>
    if (attr != NULL) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e001      	b.n	80054c8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <osMutexNew+0x3a>
      rmtx = 1U;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e001      	b.n	80054dc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d15c      	bne.n	80055a0 <osMutexNew+0x102>
      mem = -1;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d015      	beq.n	800551e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <osMutexNew+0x6a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8005500:	d902      	bls.n	8005508 <osMutexNew+0x6a>
          mem = 1;
 8005502:	2301      	movs	r3, #1
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	e00c      	b.n	8005522 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <osMutexNew+0x84>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <osMutexNew+0x84>
            mem = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e001      	b.n	8005522 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d112      	bne.n	800554e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	4619      	mov	r1, r3
 8005534:	2004      	movs	r0, #4
 8005536:	f000 fb20 	bl	8005b7a <xQueueCreateMutexStatic>
 800553a:	61f8      	str	r0, [r7, #28]
 800553c:	e016      	b.n	800556c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	4619      	mov	r1, r3
 8005544:	2001      	movs	r0, #1
 8005546:	f000 fb18 	bl	8005b7a <xQueueCreateMutexStatic>
 800554a:	61f8      	str	r0, [r7, #28]
 800554c:	e00e      	b.n	800556c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800555a:	2004      	movs	r0, #4
 800555c:	f000 faf5 	bl	8005b4a <xQueueCreateMutex>
 8005560:	61f8      	str	r0, [r7, #28]
 8005562:	e003      	b.n	800556c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005564:	2001      	movs	r0, #1
 8005566:	f000 faf0 	bl	8005b4a <xQueueCreateMutex>
 800556a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00c      	beq.n	800558c <osMutexNew+0xee>
        if (attr != NULL) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <osMutexNew+0xe2>
          name = attr->name;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e001      	b.n	8005584 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005584:	68f9      	ldr	r1, [r7, #12]
 8005586:	69f8      	ldr	r0, [r7, #28]
 8005588:	f001 f838 	bl	80065fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <osMutexNew+0x102>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80055a0:	69fb      	ldr	r3, [r7, #28]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c8:	f3ef 8305 	mrs	r3, IPSR
 80055cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80055d4:	f06f 0305 	mvn.w	r3, #5
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e02c      	b.n	8005636 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80055e2:	f06f 0303 	mvn.w	r3, #3
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e025      	b.n	8005636 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d011      	beq.n	8005614 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6938      	ldr	r0, [r7, #16]
 80055f4:	f000 fb11 	bl	8005c1a <xQueueTakeMutexRecursive>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d01b      	beq.n	8005636 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005604:	f06f 0301 	mvn.w	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e014      	b.n	8005636 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800560c:	f06f 0302 	mvn.w	r3, #2
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e010      	b.n	8005636 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6938      	ldr	r0, [r7, #16]
 8005618:	f000 fdb8 	bl	800618c <xQueueSemaphoreTake>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d009      	beq.n	8005636 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005628:	f06f 0301 	mvn.w	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	e002      	b.n	8005636 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005630:	f06f 0302 	mvn.w	r3, #2
 8005634:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005636:	697b      	ldr	r3, [r7, #20]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565c:	f3ef 8305 	mrs	r3, IPSR
 8005660:	60bb      	str	r3, [r7, #8]
  return(result);
 8005662:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005668:	f06f 0305 	mvn.w	r3, #5
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e01f      	b.n	80056b0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005676:	f06f 0303 	mvn.w	r3, #3
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e018      	b.n	80056b0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005684:	6938      	ldr	r0, [r7, #16]
 8005686:	f000 fa93 	bl	8005bb0 <xQueueGiveMutexRecursive>
 800568a:	4603      	mov	r3, r0
 800568c:	2b01      	cmp	r3, #1
 800568e:	d00f      	beq.n	80056b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005690:	f06f 0302 	mvn.w	r3, #2
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	e00b      	b.n	80056b0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005698:	2300      	movs	r3, #0
 800569a:	2200      	movs	r2, #0
 800569c:	2100      	movs	r1, #0
 800569e:	6938      	ldr	r0, [r7, #16]
 80056a0:	f000 faf2 	bl	8005c88 <xQueueGenericSend>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d002      	beq.n	80056b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80056aa:	f06f 0302 	mvn.w	r3, #2
 80056ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80056b0:	697b      	ldr	r3, [r7, #20]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a07      	ldr	r2, [pc, #28]	@ (80056e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80056cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4a06      	ldr	r2, [pc, #24]	@ (80056ec <vApplicationGetIdleTaskMemory+0x30>)
 80056d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2280      	movs	r2, #128	@ 0x80
 80056d8:	601a      	str	r2, [r3, #0]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000a78 	.word	0x20000a78
 80056ec:	20000ad4 	.word	0x20000ad4

080056f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a07      	ldr	r2, [pc, #28]	@ (800571c <vApplicationGetTimerTaskMemory+0x2c>)
 8005700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4a06      	ldr	r2, [pc, #24]	@ (8005720 <vApplicationGetTimerTaskMemory+0x30>)
 8005706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	20000cd4 	.word	0x20000cd4
 8005720:	20000d30 	.word	0x20000d30

08005724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f103 0208 	add.w	r2, r3, #8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f103 0208 	add.w	r2, r3, #8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f103 0208 	add.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d103      	bne.n	80057e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e00c      	b.n	8005800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3308      	adds	r3, #8
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e002      	b.n	80057f4 <vListInsert+0x2e>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d2f6      	bcs.n	80057ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6892      	ldr	r2, [r2, #8]
 800584e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6852      	ldr	r2, [r2, #4]
 8005858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d103      	bne.n	800586c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	1e5a      	subs	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058b8:	f002 fc26 	bl	8008108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	441a      	add	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e8:	3b01      	subs	r3, #1
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	441a      	add	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	22ff      	movs	r2, #255	@ 0xff
 80058fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	22ff      	movs	r2, #255	@ 0xff
 8005904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d114      	bne.n	8005938 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01a      	beq.n	800594c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3310      	adds	r3, #16
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fbb6 	bl	800708c <xTaskRemoveFromEventList>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d012      	beq.n	800594c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005926:	4b0d      	ldr	r3, [pc, #52]	@ (800595c <xQueueGenericReset+0xd0>)
 8005928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	e009      	b.n	800594c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3310      	adds	r3, #16
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff fef1 	bl	8005724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3324      	adds	r3, #36	@ 0x24
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff feec 	bl	8005724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800594c:	f002 fc0e 	bl	800816c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005950:	2301      	movs	r3, #1
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	@ 0x38
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <xQueueGenericCreateStatic+0x56>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <xQueueGenericCreateStatic+0x5a>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <xQueueGenericCreateStatic+0x5c>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	623b      	str	r3, [r7, #32]
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <xQueueGenericCreateStatic+0x84>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <xQueueGenericCreateStatic+0x88>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <xQueueGenericCreateStatic+0x8a>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61fb      	str	r3, [r7, #28]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a06:	2350      	movs	r3, #80	@ 0x50
 8005a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b50      	cmp	r3, #80	@ 0x50
 8005a0e:	d00b      	beq.n	8005a28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	61bb      	str	r3, [r7, #24]
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f840 	bl	8005ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3730      	adds	r7, #48	@ 0x30
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b08a      	sub	sp, #40	@ 0x28
 8005a5e:	af02      	add	r7, sp, #8
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	4613      	mov	r3, r2
 8005a66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	613b      	str	r3, [r7, #16]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3350      	adds	r3, #80	@ 0x50
 8005a94:	4618      	mov	r0, r3
 8005a96:	f002 fc59 	bl	800834c <pvPortMalloc>
 8005a9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d011      	beq.n	8005ac6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	3350      	adds	r3, #80	@ 0x50
 8005aaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab4:	79fa      	ldrb	r2, [r7, #7]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f805 	bl	8005ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e002      	b.n	8005af2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005afe:	2101      	movs	r1, #1
 8005b00:	69b8      	ldr	r0, [r7, #24]
 8005b02:	f7ff fec3 	bl	800588c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	78fa      	ldrb	r2, [r7, #3]
 8005b0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00e      	beq.n	8005b42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b36:	2300      	movs	r3, #0
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8a3 	bl	8005c88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	4603      	mov	r3, r0
 8005b52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6939      	ldr	r1, [r7, #16]
 8005b62:	6978      	ldr	r0, [r7, #20]
 8005b64:	f7ff ff79 	bl	8005a5a <xQueueGenericCreate>
 8005b68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff ffd3 	bl	8005b16 <prvInitialiseMutex>

		return xNewQueue;
 8005b70:	68fb      	ldr	r3, [r7, #12]
	}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b088      	sub	sp, #32
 8005b7e:	af02      	add	r7, sp, #8
 8005b80:	4603      	mov	r3, r0
 8005b82:	6039      	str	r1, [r7, #0]
 8005b84:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b86:	2301      	movs	r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2200      	movs	r2, #0
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	6978      	ldr	r0, [r7, #20]
 8005b9a:	f7ff fee1 	bl	8005960 <xQueueGenericCreateStatic>
 8005b9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ffb8 	bl	8005b16 <prvInitialiseMutex>

		return xNewQueue;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60fb      	str	r3, [r7, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	689c      	ldr	r4, [r3, #8]
 8005bde:	f001 fc15 	bl	800740c <xTaskGetCurrentTaskHandle>
 8005be2:	4603      	mov	r3, r0
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d111      	bne.n	8005c0c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	1e5a      	subs	r2, r3, #1
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6938      	ldr	r0, [r7, #16]
 8005c02:	f000 f841 	bl	8005c88 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005c06:	2301      	movs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e001      	b.n	8005c10 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c10:	697b      	ldr	r3, [r7, #20]
	}
 8005c12:	4618      	mov	r0, r3
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd90      	pop	{r4, r7, pc}

08005c1a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005c1a:	b590      	push	{r4, r7, lr}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60fb      	str	r3, [r7, #12]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	689c      	ldr	r4, [r3, #8]
 8005c4a:	f001 fbdf 	bl	800740c <xTaskGetCurrentTaskHandle>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	429c      	cmp	r4, r3
 8005c52:	d107      	bne.n	8005c64 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e00c      	b.n	8005c7e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	6938      	ldr	r0, [r7, #16]
 8005c68:	f000 fa90 	bl	800618c <xQueueSemaphoreTake>
 8005c6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d004      	beq.n	8005c7e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c7e:	697b      	ldr	r3, [r7, #20]
	}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd90      	pop	{r4, r7, pc}

08005c88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08e      	sub	sp, #56	@ 0x38
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <xQueueGenericSend+0x34>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSend+0x42>
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericSend+0x46>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericSend+0x48>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <xQueueGenericSend+0x64>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d103      	bne.n	8005cfa <xQueueGenericSend+0x72>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <xQueueGenericSend+0x76>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <xQueueGenericSend+0x78>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <xQueueGenericSend+0x94>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	623b      	str	r3, [r7, #32]
}
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d1c:	f001 fb86 	bl	800742c <xTaskGetSchedulerState>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <xQueueGenericSend+0xa4>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <xQueueGenericSend+0xa8>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <xQueueGenericSend+0xaa>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <xQueueGenericSend+0xc6>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	61fb      	str	r3, [r7, #28]
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	e7fd      	b.n	8005d4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d4e:	f002 f9db 	bl	8008108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <xQueueGenericSend+0xdc>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d129      	bne.n	8005db8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d6a:	f000 fb37 	bl	80063dc <prvCopyDataToQueue>
 8005d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d010      	beq.n	8005d9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	3324      	adds	r3, #36	@ 0x24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 f985 	bl	800708c <xTaskRemoveFromEventList>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d88:	4b3f      	ldr	r3, [pc, #252]	@ (8005e88 <xQueueGenericSend+0x200>)
 8005d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	e00a      	b.n	8005db0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005da0:	4b39      	ldr	r3, [pc, #228]	@ (8005e88 <xQueueGenericSend+0x200>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005db0:	f002 f9dc 	bl	800816c <vPortExitCritical>
				return pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e063      	b.n	8005e80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dbe:	f002 f9d5 	bl	800816c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e05c      	b.n	8005e80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 f9bf 	bl	8007154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dda:	f002 f9c7 	bl	800816c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dde:	f000 ff2f 	bl	8006c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005de2:	f002 f991 	bl	8008108 <vPortEnterCritical>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d103      	bne.n	8005dfc <xQueueGenericSend+0x174>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d103      	bne.n	8005e12 <xQueueGenericSend+0x18a>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e12:	f002 f9ab 	bl	800816c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e16:	1d3a      	adds	r2, r7, #4
 8005e18:	f107 0314 	add.w	r3, r7, #20
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 f9ae 	bl	8007180 <xTaskCheckForTimeOut>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d124      	bne.n	8005e74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e2c:	f000 fbce 	bl	80065cc <prvIsQueueFull>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d018      	beq.n	8005e68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	3310      	adds	r3, #16
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f8d2 	bl	8006fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e46:	f000 fb59 	bl	80064fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e4a:	f000 ff07 	bl	8006c5c <xTaskResumeAll>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f47f af7c 	bne.w	8005d4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e56:	4b0c      	ldr	r3, [pc, #48]	@ (8005e88 <xQueueGenericSend+0x200>)
 8005e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	e772      	b.n	8005d4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e6a:	f000 fb47 	bl	80064fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e6e:	f000 fef5 	bl	8006c5c <xTaskResumeAll>
 8005e72:	e76c      	b.n	8005d4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e76:	f000 fb41 	bl	80064fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e7a:	f000 feef 	bl	8006c5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3738      	adds	r7, #56	@ 0x38
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b090      	sub	sp, #64	@ 0x40
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <xQueueGenericSendFromISR+0x3e>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <xQueueGenericSendFromISR+0x42>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <xQueueGenericSendFromISR+0x44>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10b      	bne.n	8005eec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d103      	bne.n	8005efa <xQueueGenericSendFromISR+0x6e>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <xQueueGenericSendFromISR+0x72>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <xQueueGenericSendFromISR+0x74>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f1c:	f002 f9d4 	bl	80082c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f20:	f3ef 8211 	mrs	r2, BASEPRI
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d302      	bcc.n	8005f4e <xQueueGenericSendFromISR+0xc2>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d12f      	bne.n	8005fae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f64:	f000 fa3a 	bl	80063dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d112      	bne.n	8005f98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7c:	3324      	adds	r3, #36	@ 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f884 	bl	800708c <xTaskRemoveFromEventList>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e007      	b.n	8005fa8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	b25a      	sxtb	r2, r3
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005fac:	e001      	b.n	8005fb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3740      	adds	r7, #64	@ 0x40
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08c      	sub	sp, #48	@ 0x30
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10b      	bne.n	8005ffa <xQueueReceive+0x32>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	623b      	str	r3, [r7, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	e7fd      	b.n	8005ff6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <xQueueReceive+0x40>
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <xQueueReceive+0x44>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <xQueueReceive+0x46>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <xQueueReceive+0x62>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	61fb      	str	r3, [r7, #28]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800602a:	f001 f9ff 	bl	800742c <xTaskGetSchedulerState>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <xQueueReceive+0x72>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <xQueueReceive+0x76>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <xQueueReceive+0x78>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <xQueueReceive+0x94>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	61bb      	str	r3, [r7, #24]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800605c:	f002 f854 	bl	8008108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01f      	beq.n	80060ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006070:	f000 fa1e 	bl	80064b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	1e5a      	subs	r2, r3, #1
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	3310      	adds	r3, #16
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ffff 	bl	800708c <xTaskRemoveFromEventList>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006094:	4b3c      	ldr	r3, [pc, #240]	@ (8006188 <xQueueReceive+0x1c0>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060a4:	f002 f862 	bl	800816c <vPortExitCritical>
				return pdPASS;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e069      	b.n	8006180 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060b2:	f002 f85b 	bl	800816c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e062      	b.n	8006180 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c0:	f107 0310 	add.w	r3, r7, #16
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f845 	bl	8007154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ce:	f002 f84d 	bl	800816c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060d2:	f000 fdb5 	bl	8006c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060d6:	f002 f817 	bl	8008108 <vPortEnterCritical>
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e0:	b25b      	sxtb	r3, r3
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d103      	bne.n	80060f0 <xQueueReceive+0x128>
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060f6:	b25b      	sxtb	r3, r3
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d103      	bne.n	8006106 <xQueueReceive+0x13e>
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006106:	f002 f831 	bl	800816c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800610a:	1d3a      	adds	r2, r7, #4
 800610c:	f107 0310 	add.w	r3, r7, #16
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f001 f834 	bl	8007180 <xTaskCheckForTimeOut>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d123      	bne.n	8006166 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800611e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006120:	f000 fa3e 	bl	80065a0 <prvIsQueueEmpty>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d017      	beq.n	800615a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	3324      	adds	r3, #36	@ 0x24
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff58 	bl	8006fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800613a:	f000 f9df 	bl	80064fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800613e:	f000 fd8d 	bl	8006c5c <xTaskResumeAll>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d189      	bne.n	800605c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006148:	4b0f      	ldr	r3, [pc, #60]	@ (8006188 <xQueueReceive+0x1c0>)
 800614a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	e780      	b.n	800605c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800615a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800615c:	f000 f9ce 	bl	80064fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006160:	f000 fd7c 	bl	8006c5c <xTaskResumeAll>
 8006164:	e77a      	b.n	800605c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006168:	f000 f9c8 	bl	80064fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800616c:	f000 fd76 	bl	8006c5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006172:	f000 fa15 	bl	80065a0 <prvIsQueueEmpty>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	f43f af6f 	beq.w	800605c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800617e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006180:	4618      	mov	r0, r3
 8006182:	3730      	adds	r7, #48	@ 0x30
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	@ 0x38
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800619e:	2300      	movs	r3, #0
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	623b      	str	r3, [r7, #32]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61fb      	str	r3, [r7, #28]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061e0:	f001 f924 	bl	800742c <xTaskGetSchedulerState>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <xQueueSemaphoreTake+0x64>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <xQueueSemaphoreTake+0x68>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <xQueueSemaphoreTake+0x6a>
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	61bb      	str	r3, [r7, #24]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006212:	f001 ff79 	bl	8008108 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d024      	beq.n	800626c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006228:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800622a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006232:	f001 fa75 	bl	8007720 <pvTaskIncrementMutexHeldCount>
 8006236:	4602      	mov	r2, r0
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00f      	beq.n	8006264 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	3310      	adds	r3, #16
 8006248:	4618      	mov	r0, r3
 800624a:	f000 ff1f 	bl	800708c <xTaskRemoveFromEventList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006254:	4b54      	ldr	r3, [pc, #336]	@ (80063a8 <xQueueSemaphoreTake+0x21c>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006264:	f001 ff82 	bl	800816c <vPortExitCritical>
				return pdPASS;
 8006268:	2301      	movs	r3, #1
 800626a:	e098      	b.n	800639e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d112      	bne.n	8006298 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	617b      	str	r3, [r7, #20]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006290:	f001 ff6c 	bl	800816c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006294:	2300      	movs	r3, #0
 8006296:	e082      	b.n	800639e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 ff56 	bl	8007154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ac:	f001 ff5e 	bl	800816c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b0:	f000 fcc6 	bl	8006c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b4:	f001 ff28 	bl	8008108 <vPortEnterCritical>
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d103      	bne.n	80062ce <xQueueSemaphoreTake+0x142>
 80062c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d103      	bne.n	80062e4 <xQueueSemaphoreTake+0x158>
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e4:	f001 ff42 	bl	800816c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e8:	463a      	mov	r2, r7
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 ff45 	bl	8007180 <xTaskCheckForTimeOut>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d132      	bne.n	8006362 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062fe:	f000 f94f 	bl	80065a0 <prvIsQueueEmpty>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d026      	beq.n	8006356 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006310:	f001 fefa 	bl	8008108 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f8a5 	bl	8007468 <xTaskPriorityInherit>
 800631e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006320:	f001 ff24 	bl	800816c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	3324      	adds	r3, #36	@ 0x24
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fe5b 	bl	8006fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006332:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006334:	f000 f8e2 	bl	80064fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006338:	f000 fc90 	bl	8006c5c <xTaskResumeAll>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	f47f af67 	bne.w	8006212 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006344:	4b18      	ldr	r3, [pc, #96]	@ (80063a8 <xQueueSemaphoreTake+0x21c>)
 8006346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	e75d      	b.n	8006212 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006356:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006358:	f000 f8d0 	bl	80064fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800635c:	f000 fc7e 	bl	8006c5c <xTaskResumeAll>
 8006360:	e757      	b.n	8006212 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006362:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006364:	f000 f8ca 	bl	80064fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006368:	f000 fc78 	bl	8006c5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800636e:	f000 f917 	bl	80065a0 <prvIsQueueEmpty>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	f43f af4c 	beq.w	8006212 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006380:	f001 fec2 	bl	8008108 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006386:	f000 f811 	bl	80063ac <prvGetDisinheritPriorityAfterTimeout>
 800638a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f940 	bl	8007618 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006398:	f001 fee8 	bl	800816c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800639c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3738      	adds	r7, #56	@ 0x38
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d006      	beq.n	80063ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e001      	b.n	80063ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063ce:	68fb      	ldr	r3, [r7, #12]
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10d      	bne.n	8006416 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d14d      	bne.n	800649e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f896 	bl	8007538 <xTaskPriorityDisinherit>
 800640c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	e043      	b.n	800649e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d119      	bne.n	8006450 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6858      	ldr	r0, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	461a      	mov	r2, r3
 8006426:	68b9      	ldr	r1, [r7, #8]
 8006428:	f003 fc37 	bl	8009c9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	441a      	add	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	d32b      	bcc.n	800649e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	e026      	b.n	800649e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68d8      	ldr	r0, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	461a      	mov	r2, r3
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	f003 fc1d 	bl	8009c9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	425b      	negs	r3, r3
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d207      	bcs.n	800648c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006484:	425b      	negs	r3, r3
 8006486:	441a      	add	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d105      	bne.n	800649e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3b01      	subs	r3, #1
 800649c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064a6:	697b      	ldr	r3, [r7, #20]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	441a      	add	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d303      	bcc.n	80064e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	461a      	mov	r2, r3
 80064ee:	6838      	ldr	r0, [r7, #0]
 80064f0:	f003 fbd3 	bl	8009c9a <memcpy>
	}
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006504:	f001 fe00 	bl	8008108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800650e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006510:	e011      	b.n	8006536 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3324      	adds	r3, #36	@ 0x24
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fdb4 	bl	800708c <xTaskRemoveFromEventList>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800652a:	f000 fe8d 	bl	8007248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	3b01      	subs	r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dce9      	bgt.n	8006512 <prvUnlockQueue+0x16>
 800653e:	e000      	b.n	8006542 <prvUnlockQueue+0x46>
					break;
 8006540:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	22ff      	movs	r2, #255	@ 0xff
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800654a:	f001 fe0f 	bl	800816c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800654e:	f001 fddb 	bl	8008108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006558:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800655a:	e011      	b.n	8006580 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d012      	beq.n	800658a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3310      	adds	r3, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fd8f 	bl	800708c <xTaskRemoveFromEventList>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006574:	f000 fe68 	bl	8007248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	3b01      	subs	r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006584:	2b00      	cmp	r3, #0
 8006586:	dce9      	bgt.n	800655c <prvUnlockQueue+0x60>
 8006588:	e000      	b.n	800658c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800658a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	22ff      	movs	r2, #255	@ 0xff
 8006590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006594:	f001 fdea 	bl	800816c <vPortExitCritical>
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065a8:	f001 fdae 	bl	8008108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e001      	b.n	80065be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065be:	f001 fdd5 	bl	800816c <vPortExitCritical>

	return xReturn;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d4:	f001 fd98 	bl	8008108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d102      	bne.n	80065ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e001      	b.n	80065ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ee:	f001 fdbd 	bl	800816c <vPortExitCritical>

	return xReturn;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e014      	b.n	8006636 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800660c:	4a0f      	ldr	r2, [pc, #60]	@ (800664c <vQueueAddToRegistry+0x50>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006618:	490c      	ldr	r1, [pc, #48]	@ (800664c <vQueueAddToRegistry+0x50>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006622:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <vQueueAddToRegistry+0x50>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800662e:	e006      	b.n	800663e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b07      	cmp	r3, #7
 800663a:	d9e7      	bls.n	800660c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20001130 	.word	0x20001130

08006650 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006660:	f001 fd52 	bl	8008108 <vPortEnterCritical>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800666a:	b25b      	sxtb	r3, r3
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d103      	bne.n	800667a <vQueueWaitForMessageRestricted+0x2a>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006680:	b25b      	sxtb	r3, r3
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d103      	bne.n	8006690 <vQueueWaitForMessageRestricted+0x40>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006690:	f001 fd6c 	bl	800816c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3324      	adds	r3, #36	@ 0x24
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fcc5 	bl	8007034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f7ff ff26 	bl	80064fc <prvUnlockQueue>
	}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08e      	sub	sp, #56	@ 0x38
 80066bc:	af04      	add	r7, sp, #16
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	623b      	str	r3, [r7, #32]
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	61fb      	str	r3, [r7, #28]
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	e7fd      	b.n	80066fe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006702:	235c      	movs	r3, #92	@ 0x5c
 8006704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b5c      	cmp	r3, #92	@ 0x5c
 800670a:	d00b      	beq.n	8006724 <xTaskCreateStatic+0x6c>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61bb      	str	r3, [r7, #24]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006724:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01e      	beq.n	800676a <xTaskCreateStatic+0xb2>
 800672c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01b      	beq.n	800676a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800673a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	2202      	movs	r2, #2
 8006740:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006744:	2300      	movs	r3, #0
 8006746:	9303      	str	r3, [sp, #12]
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	9302      	str	r3, [sp, #8]
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f850 	bl	8006802 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006764:	f000 f8de 	bl	8006924 <prvAddNewTaskToReadyList>
 8006768:	e001      	b.n	800676e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800676e:	697b      	ldr	r3, [r7, #20]
	}
 8006770:	4618      	mov	r0, r3
 8006772:	3728      	adds	r7, #40	@ 0x28
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08c      	sub	sp, #48	@ 0x30
 800677c:	af04      	add	r7, sp, #16
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fddd 	bl	800834c <pvPortMalloc>
 8006792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800679a:	205c      	movs	r0, #92	@ 0x5c
 800679c:	f001 fdd6 	bl	800834c <pvPortMalloc>
 80067a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80067ae:	e005      	b.n	80067bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067b0:	6978      	ldr	r0, [r7, #20]
 80067b2:	f001 fe99 	bl	80084e8 <vPortFree>
 80067b6:	e001      	b.n	80067bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d017      	beq.n	80067f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	2300      	movs	r3, #0
 80067ce:	9303      	str	r3, [sp, #12]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	9302      	str	r3, [sp, #8]
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f80e 	bl	8006802 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e6:	69f8      	ldr	r0, [r7, #28]
 80067e8:	f000 f89c 	bl	8006924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ec:	2301      	movs	r3, #1
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e002      	b.n	80067f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067f8:	69bb      	ldr	r3, [r7, #24]
	}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	461a      	mov	r2, r3
 800681a:	21a5      	movs	r1, #165	@ 0xa5
 800681c:	f002 fa8a 	bl	8008d34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800682a:	3b01      	subs	r3, #1
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f023 0307 	bic.w	r3, r3, #7
 8006838:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	617b      	str	r3, [r7, #20]
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01f      	beq.n	80068a2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	e012      	b.n	800688e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	3334      	adds	r3, #52	@ 0x34
 8006878:	460a      	mov	r2, r1
 800687a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b0f      	cmp	r3, #15
 8006892:	d9e9      	bls.n	8006868 <prvInitialiseNewTask+0x66>
 8006894:	e000      	b.n	8006898 <prvInitialiseNewTask+0x96>
			{
				break;
 8006896:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068a0:	e003      	b.n	80068aa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ac:	2b37      	cmp	r3, #55	@ 0x37
 80068ae:	d901      	bls.n	80068b4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b0:	2337      	movs	r3, #55	@ 0x37
 80068b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	2200      	movs	r2, #0
 80068c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	3304      	adds	r3, #4
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe ff4a 	bl	8005764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	3318      	adds	r3, #24
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe ff45 	bl	8005764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	2200      	movs	r2, #0
 80068f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f001 face 	bl	8007ea4 <pxPortInitialiseStack>
 8006908:	4602      	mov	r2, r0
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800691a:	bf00      	nop
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800692c:	f001 fbec 	bl	8008108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006930:	4b2d      	ldr	r3, [pc, #180]	@ (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	4a2c      	ldr	r2, [pc, #176]	@ (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 8006938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800693a:	4b2c      	ldr	r3, [pc, #176]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006942:	4a2a      	ldr	r2, [pc, #168]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006948:	4b27      	ldr	r3, [pc, #156]	@ (80069e8 <prvAddNewTaskToReadyList+0xc4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d110      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006950:	f000 fc9e 	bl	8007290 <prvInitialiseTaskLists>
 8006954:	e00d      	b.n	8006972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006956:	4b26      	ldr	r3, [pc, #152]	@ (80069f0 <prvAddNewTaskToReadyList+0xcc>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800695e:	4b23      	ldr	r3, [pc, #140]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	429a      	cmp	r2, r3
 800696a:	d802      	bhi.n	8006972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800696c:	4a1f      	ldr	r2, [pc, #124]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006972:	4b20      	ldr	r3, [pc, #128]	@ (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a1e      	ldr	r2, [pc, #120]	@ (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 800697a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800697c:	4b1d      	ldr	r3, [pc, #116]	@ (80069f4 <prvAddNewTaskToReadyList+0xd0>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006988:	4b1b      	ldr	r3, [pc, #108]	@ (80069f8 <prvAddNewTaskToReadyList+0xd4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d903      	bls.n	8006998 <prvAddNewTaskToReadyList+0x74>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <prvAddNewTaskToReadyList+0xd4>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4a15      	ldr	r2, [pc, #84]	@ (80069fc <prvAddNewTaskToReadyList+0xd8>)
 80069a6:	441a      	add	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f7fe fee5 	bl	800577e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069b4:	f001 fbda 	bl	800816c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069b8:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <prvAddNewTaskToReadyList+0xcc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00e      	beq.n	80069de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069c0:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <prvAddNewTaskToReadyList+0xc8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d207      	bcs.n	80069de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <prvAddNewTaskToReadyList+0xdc>)
 80069d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20001644 	.word	0x20001644
 80069ec:	20001170 	.word	0x20001170
 80069f0:	20001650 	.word	0x20001650
 80069f4:	20001660 	.word	0x20001660
 80069f8:	2000164c 	.word	0x2000164c
 80069fc:	20001174 	.word	0x20001174
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	@ 0x28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	617b      	str	r3, [r7, #20]
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	e7fd      	b.n	8006a2c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	613b      	str	r3, [r7, #16]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006af8 <vTaskDelayUntil+0xf4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <vTaskDelayUntil+0x6a>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60fb      	str	r3, [r7, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006a6e:	f000 f8e7 	bl	8006c40 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006a72:	4b22      	ldr	r3, [pc, #136]	@ (8006afc <vTaskDelayUntil+0xf8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	4413      	add	r3, r2
 8006a80:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a3a      	ldr	r2, [r7, #32]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d20b      	bcs.n	8006aa4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d211      	bcs.n	8006aba <vTaskDelayUntil+0xb6>
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d90d      	bls.n	8006aba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa2:	e00a      	b.n	8006aba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d303      	bcc.n	8006ab6 <vTaskDelayUntil+0xb2>
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d901      	bls.n	8006aba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d006      	beq.n	8006ad4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fe3a 	bl	8007748 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006ad4:	f000 f8c2 	bl	8006c5c <xTaskResumeAll>
 8006ad8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d107      	bne.n	8006af0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006ae0:	4b07      	ldr	r3, [pc, #28]	@ (8006b00 <vTaskDelayUntil+0xfc>)
 8006ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006af0:	bf00      	nop
 8006af2:	3728      	adds	r7, #40	@ 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	2000166c 	.word	0x2000166c
 8006afc:	20001648 	.word	0x20001648
 8006b00:	e000ed04 	.word	0xe000ed04

08006b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d018      	beq.n	8006b48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <vTaskDelay+0x64>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <vTaskDelay+0x32>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60bb      	str	r3, [r7, #8]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b36:	f000 f883 	bl	8006c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fe03 	bl	8007748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b42:	f000 f88b 	bl	8006c5c <xTaskResumeAll>
 8006b46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d107      	bne.n	8006b5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b4e:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <vTaskDelay+0x68>)
 8006b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	2000166c 	.word	0x2000166c
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	@ 0x28
 8006b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b7e:	463a      	mov	r2, r7
 8006b80:	1d39      	adds	r1, r7, #4
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fd98 	bl	80056bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	9202      	str	r2, [sp, #8]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	4922      	ldr	r1, [pc, #136]	@ (8006c28 <vTaskStartScheduler+0xb8>)
 8006ba0:	4822      	ldr	r0, [pc, #136]	@ (8006c2c <vTaskStartScheduler+0xbc>)
 8006ba2:	f7ff fd89 	bl	80066b8 <xTaskCreateStatic>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4a21      	ldr	r2, [pc, #132]	@ (8006c30 <vTaskStartScheduler+0xc0>)
 8006baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bac:	4b20      	ldr	r3, [pc, #128]	@ (8006c30 <vTaskStartScheduler+0xc0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e001      	b.n	8006bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d102      	bne.n	8006bca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bc4:	f000 fe14 	bl	80077f0 <xTimerCreateTimerTask>
 8006bc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d116      	bne.n	8006bfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	613b      	str	r3, [r7, #16]
}
 8006be2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006be4:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <vTaskStartScheduler+0xc4>)
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bec:	4b12      	ldr	r3, [pc, #72]	@ (8006c38 <vTaskStartScheduler+0xc8>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <vTaskStartScheduler+0xcc>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bf8:	f001 f9e2 	bl	8007fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bfc:	e00f      	b.n	8006c1e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d10b      	bne.n	8006c1e <vTaskStartScheduler+0xae>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60fb      	str	r3, [r7, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <vTaskStartScheduler+0xaa>
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	0800baa4 	.word	0x0800baa4
 8006c2c:	08007261 	.word	0x08007261
 8006c30:	20001668 	.word	0x20001668
 8006c34:	20001664 	.word	0x20001664
 8006c38:	20001650 	.word	0x20001650
 8006c3c:	20001648 	.word	0x20001648

08006c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c44:	4b04      	ldr	r3, [pc, #16]	@ (8006c58 <vTaskSuspendAll+0x18>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	4a03      	ldr	r2, [pc, #12]	@ (8006c58 <vTaskSuspendAll+0x18>)
 8006c4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c4e:	bf00      	nop
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	2000166c 	.word	0x2000166c

08006c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c6a:	4b42      	ldr	r3, [pc, #264]	@ (8006d74 <xTaskResumeAll+0x118>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <xTaskResumeAll+0x2e>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	603b      	str	r3, [r7, #0]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c8a:	f001 fa3d 	bl	8008108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c8e:	4b39      	ldr	r3, [pc, #228]	@ (8006d74 <xTaskResumeAll+0x118>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	4a37      	ldr	r2, [pc, #220]	@ (8006d74 <xTaskResumeAll+0x118>)
 8006c96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c98:	4b36      	ldr	r3, [pc, #216]	@ (8006d74 <xTaskResumeAll+0x118>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d162      	bne.n	8006d66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ca0:	4b35      	ldr	r3, [pc, #212]	@ (8006d78 <xTaskResumeAll+0x11c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d05e      	beq.n	8006d66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca8:	e02f      	b.n	8006d0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006caa:	4b34      	ldr	r3, [pc, #208]	@ (8006d7c <xTaskResumeAll+0x120>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3318      	adds	r3, #24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fdbe 	bl	8005838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fdb9 	bl	8005838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cca:	4b2d      	ldr	r3, [pc, #180]	@ (8006d80 <xTaskResumeAll+0x124>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d903      	bls.n	8006cda <xTaskResumeAll+0x7e>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d80 <xTaskResumeAll+0x124>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4a27      	ldr	r2, [pc, #156]	@ (8006d84 <xTaskResumeAll+0x128>)
 8006ce8:	441a      	add	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7fe fd44 	bl	800577e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfa:	4b23      	ldr	r3, [pc, #140]	@ (8006d88 <xTaskResumeAll+0x12c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d302      	bcc.n	8006d0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d04:	4b21      	ldr	r3, [pc, #132]	@ (8006d8c <xTaskResumeAll+0x130>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d7c <xTaskResumeAll+0x120>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1cb      	bne.n	8006caa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d18:	f000 fb58 	bl	80073cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8006d90 <xTaskResumeAll+0x134>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d010      	beq.n	8006d4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d28:	f000 f846 	bl	8006db8 <xTaskIncrementTick>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d32:	4b16      	ldr	r3, [pc, #88]	@ (8006d8c <xTaskResumeAll+0x130>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f1      	bne.n	8006d28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d44:	4b12      	ldr	r3, [pc, #72]	@ (8006d90 <xTaskResumeAll+0x134>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d4a:	4b10      	ldr	r3, [pc, #64]	@ (8006d8c <xTaskResumeAll+0x130>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d56:	4b0f      	ldr	r3, [pc, #60]	@ (8006d94 <xTaskResumeAll+0x138>)
 8006d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f001 fa01 	bl	800816c <vPortExitCritical>

	return xAlreadyYielded;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	2000166c 	.word	0x2000166c
 8006d78:	20001644 	.word	0x20001644
 8006d7c:	20001604 	.word	0x20001604
 8006d80:	2000164c 	.word	0x2000164c
 8006d84:	20001174 	.word	0x20001174
 8006d88:	20001170 	.word	0x20001170
 8006d8c:	20001658 	.word	0x20001658
 8006d90:	20001654 	.word	0x20001654
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d9e:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <xTaskGetTickCount+0x1c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006da4:	687b      	ldr	r3, [r7, #4]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20001648 	.word	0x20001648

08006db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006f00 <xTaskIncrementTick+0x148>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 8090 	bne.w	8006eec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8006f04 <xTaskIncrementTick+0x14c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8006f04 <xTaskIncrementTick+0x14c>)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d121      	bne.n	8006e24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006de0:	4b49      	ldr	r3, [pc, #292]	@ (8006f08 <xTaskIncrementTick+0x150>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	603b      	str	r3, [r7, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	e7fd      	b.n	8006dfe <xTaskIncrementTick+0x46>
 8006e02:	4b41      	ldr	r3, [pc, #260]	@ (8006f08 <xTaskIncrementTick+0x150>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	4b40      	ldr	r3, [pc, #256]	@ (8006f0c <xTaskIncrementTick+0x154>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f08 <xTaskIncrementTick+0x150>)
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	4a3e      	ldr	r2, [pc, #248]	@ (8006f0c <xTaskIncrementTick+0x154>)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	4b3e      	ldr	r3, [pc, #248]	@ (8006f10 <xTaskIncrementTick+0x158>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f10 <xTaskIncrementTick+0x158>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	f000 fad4 	bl	80073cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e24:	4b3b      	ldr	r3, [pc, #236]	@ (8006f14 <xTaskIncrementTick+0x15c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d349      	bcc.n	8006ec2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e2e:	4b36      	ldr	r3, [pc, #216]	@ (8006f08 <xTaskIncrementTick+0x150>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d104      	bne.n	8006e42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e38:	4b36      	ldr	r3, [pc, #216]	@ (8006f14 <xTaskIncrementTick+0x15c>)
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	601a      	str	r2, [r3, #0]
					break;
 8006e40:	e03f      	b.n	8006ec2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e42:	4b31      	ldr	r3, [pc, #196]	@ (8006f08 <xTaskIncrementTick+0x150>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d203      	bcs.n	8006e62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f14 <xTaskIncrementTick+0x15c>)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e60:	e02f      	b.n	8006ec2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fce6 	bl	8005838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3318      	adds	r3, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe fcdd 	bl	8005838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	4b25      	ldr	r3, [pc, #148]	@ (8006f18 <xTaskIncrementTick+0x160>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d903      	bls.n	8006e92 <xTaskIncrementTick+0xda>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	4a22      	ldr	r2, [pc, #136]	@ (8006f18 <xTaskIncrementTick+0x160>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f1c <xTaskIncrementTick+0x164>)
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fe fc68 	bl	800577e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <xTaskIncrementTick+0x168>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d3b8      	bcc.n	8006e2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec0:	e7b5      	b.n	8006e2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ec2:	4b17      	ldr	r3, [pc, #92]	@ (8006f20 <xTaskIncrementTick+0x168>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4914      	ldr	r1, [pc, #80]	@ (8006f1c <xTaskIncrementTick+0x164>)
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d901      	bls.n	8006ede <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006eda:	2301      	movs	r3, #1
 8006edc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ede:	4b11      	ldr	r3, [pc, #68]	@ (8006f24 <xTaskIncrementTick+0x16c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e004      	b.n	8006ef6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006eec:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <xTaskIncrementTick+0x170>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8006f28 <xTaskIncrementTick+0x170>)
 8006ef4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ef6:	697b      	ldr	r3, [r7, #20]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	2000166c 	.word	0x2000166c
 8006f04:	20001648 	.word	0x20001648
 8006f08:	200015fc 	.word	0x200015fc
 8006f0c:	20001600 	.word	0x20001600
 8006f10:	2000165c 	.word	0x2000165c
 8006f14:	20001664 	.word	0x20001664
 8006f18:	2000164c 	.word	0x2000164c
 8006f1c:	20001174 	.word	0x20001174
 8006f20:	20001170 	.word	0x20001170
 8006f24:	20001658 	.word	0x20001658
 8006f28:	20001654 	.word	0x20001654

08006f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f32:	4b28      	ldr	r3, [pc, #160]	@ (8006fd4 <vTaskSwitchContext+0xa8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f3a:	4b27      	ldr	r3, [pc, #156]	@ (8006fd8 <vTaskSwitchContext+0xac>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f40:	e042      	b.n	8006fc8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f42:	4b25      	ldr	r3, [pc, #148]	@ (8006fd8 <vTaskSwitchContext+0xac>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f48:	4b24      	ldr	r3, [pc, #144]	@ (8006fdc <vTaskSwitchContext+0xb0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e011      	b.n	8006f74 <vTaskSwitchContext+0x48>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <vTaskSwitchContext+0x42>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vTaskSwitchContext+0x3e>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	491a      	ldr	r1, [pc, #104]	@ (8006fe0 <vTaskSwitchContext+0xb4>)
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0e3      	beq.n	8006f50 <vTaskSwitchContext+0x24>
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a13      	ldr	r2, [pc, #76]	@ (8006fe0 <vTaskSwitchContext+0xb4>)
 8006f94:	4413      	add	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d104      	bne.n	8006fb8 <vTaskSwitchContext+0x8c>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	605a      	str	r2, [r3, #4]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <vTaskSwitchContext+0xb8>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	4a06      	ldr	r2, [pc, #24]	@ (8006fdc <vTaskSwitchContext+0xb0>)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6013      	str	r3, [r2, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	2000166c 	.word	0x2000166c
 8006fd8:	20001658 	.word	0x20001658
 8006fdc:	2000164c 	.word	0x2000164c
 8006fe0:	20001174 	.word	0x20001174
 8006fe4:	20001170 	.word	0x20001170

08006fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007010:	4b07      	ldr	r3, [pc, #28]	@ (8007030 <vTaskPlaceOnEventList+0x48>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3318      	adds	r3, #24
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7fe fbd4 	bl	80057c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800701e:	2101      	movs	r1, #1
 8007020:	6838      	ldr	r0, [r7, #0]
 8007022:	f000 fb91 	bl	8007748 <prvAddCurrentTaskToDelayedList>
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20001170 	.word	0x20001170

08007034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10b      	bne.n	800705e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	617b      	str	r3, [r7, #20]
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	e7fd      	b.n	800705a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800705e:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <vTaskPlaceOnEventListRestricted+0x54>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3318      	adds	r3, #24
 8007064:	4619      	mov	r1, r3
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7fe fb89 	bl	800577e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007072:	f04f 33ff 	mov.w	r3, #4294967295
 8007076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	68b8      	ldr	r0, [r7, #8]
 800707c:	f000 fb64 	bl	8007748 <prvAddCurrentTaskToDelayedList>
	}
 8007080:	bf00      	nop
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	20001170 	.word	0x20001170

0800708c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3318      	adds	r3, #24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fbba 	bl	8005838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c4:	4b1d      	ldr	r3, [pc, #116]	@ (800713c <xTaskRemoveFromEventList+0xb0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11d      	bne.n	8007108 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fbb1 	bl	8005838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070da:	4b19      	ldr	r3, [pc, #100]	@ (8007140 <xTaskRemoveFromEventList+0xb4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d903      	bls.n	80070ea <xTaskRemoveFromEventList+0x5e>
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	4a16      	ldr	r2, [pc, #88]	@ (8007140 <xTaskRemoveFromEventList+0xb4>)
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4a13      	ldr	r2, [pc, #76]	@ (8007144 <xTaskRemoveFromEventList+0xb8>)
 80070f8:	441a      	add	r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f7fe fb3c 	bl	800577e <vListInsertEnd>
 8007106:	e005      	b.n	8007114 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3318      	adds	r3, #24
 800710c:	4619      	mov	r1, r3
 800710e:	480e      	ldr	r0, [pc, #56]	@ (8007148 <xTaskRemoveFromEventList+0xbc>)
 8007110:	f7fe fb35 	bl	800577e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007118:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <xTaskRemoveFromEventList+0xc0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	429a      	cmp	r2, r3
 8007120:	d905      	bls.n	800712e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007122:	2301      	movs	r3, #1
 8007124:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007126:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <xTaskRemoveFromEventList+0xc4>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	e001      	b.n	8007132 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007132:	697b      	ldr	r3, [r7, #20]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	2000166c 	.word	0x2000166c
 8007140:	2000164c 	.word	0x2000164c
 8007144:	20001174 	.word	0x20001174
 8007148:	20001604 	.word	0x20001604
 800714c:	20001170 	.word	0x20001170
 8007150:	20001658 	.word	0x20001658

08007154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800715c:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <vTaskInternalSetTimeOutState+0x24>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007164:	4b05      	ldr	r3, [pc, #20]	@ (800717c <vTaskInternalSetTimeOutState+0x28>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	605a      	str	r2, [r3, #4]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	2000165c 	.word	0x2000165c
 800717c:	20001648 	.word	0x20001648

08007180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	613b      	str	r3, [r7, #16]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60fb      	str	r3, [r7, #12]
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071c6:	f000 ff9f 	bl	8008108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007240 <xTaskCheckForTimeOut+0xc0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d102      	bne.n	80071ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	e023      	b.n	8007232 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	4b15      	ldr	r3, [pc, #84]	@ (8007244 <xTaskCheckForTimeOut+0xc4>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d007      	beq.n	8007206 <xTaskCheckForTimeOut+0x86>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d302      	bcc.n	8007206 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007200:	2301      	movs	r3, #1
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	e015      	b.n	8007232 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	429a      	cmp	r2, r3
 800720e:	d20b      	bcs.n	8007228 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff ff99 	bl	8007154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	e004      	b.n	8007232 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007232:	f000 ff9b 	bl	800816c <vPortExitCritical>

	return xReturn;
 8007236:	69fb      	ldr	r3, [r7, #28]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20001648 	.word	0x20001648
 8007244:	2000165c 	.word	0x2000165c

08007248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800724c:	4b03      	ldr	r3, [pc, #12]	@ (800725c <vTaskMissedYield+0x14>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]
}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	20001658 	.word	0x20001658

08007260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007268:	f000 f852 	bl	8007310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <prvIdleTask+0x28>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d9f9      	bls.n	8007268 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007274:	4b05      	ldr	r3, [pc, #20]	@ (800728c <prvIdleTask+0x2c>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007284:	e7f0      	b.n	8007268 <prvIdleTask+0x8>
 8007286:	bf00      	nop
 8007288:	20001174 	.word	0x20001174
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007296:	2300      	movs	r3, #0
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	e00c      	b.n	80072b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a12      	ldr	r2, [pc, #72]	@ (80072f0 <prvInitialiseTaskLists+0x60>)
 80072a8:	4413      	add	r3, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fa3a 	bl	8005724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3301      	adds	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b37      	cmp	r3, #55	@ 0x37
 80072ba:	d9ef      	bls.n	800729c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072bc:	480d      	ldr	r0, [pc, #52]	@ (80072f4 <prvInitialiseTaskLists+0x64>)
 80072be:	f7fe fa31 	bl	8005724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072c2:	480d      	ldr	r0, [pc, #52]	@ (80072f8 <prvInitialiseTaskLists+0x68>)
 80072c4:	f7fe fa2e 	bl	8005724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072c8:	480c      	ldr	r0, [pc, #48]	@ (80072fc <prvInitialiseTaskLists+0x6c>)
 80072ca:	f7fe fa2b 	bl	8005724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072ce:	480c      	ldr	r0, [pc, #48]	@ (8007300 <prvInitialiseTaskLists+0x70>)
 80072d0:	f7fe fa28 	bl	8005724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072d4:	480b      	ldr	r0, [pc, #44]	@ (8007304 <prvInitialiseTaskLists+0x74>)
 80072d6:	f7fe fa25 	bl	8005724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072da:	4b0b      	ldr	r3, [pc, #44]	@ (8007308 <prvInitialiseTaskLists+0x78>)
 80072dc:	4a05      	ldr	r2, [pc, #20]	@ (80072f4 <prvInitialiseTaskLists+0x64>)
 80072de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <prvInitialiseTaskLists+0x7c>)
 80072e2:	4a05      	ldr	r2, [pc, #20]	@ (80072f8 <prvInitialiseTaskLists+0x68>)
 80072e4:	601a      	str	r2, [r3, #0]
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20001174 	.word	0x20001174
 80072f4:	200015d4 	.word	0x200015d4
 80072f8:	200015e8 	.word	0x200015e8
 80072fc:	20001604 	.word	0x20001604
 8007300:	20001618 	.word	0x20001618
 8007304:	20001630 	.word	0x20001630
 8007308:	200015fc 	.word	0x200015fc
 800730c:	20001600 	.word	0x20001600

08007310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007316:	e019      	b.n	800734c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007318:	f000 fef6 	bl	8008108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731c:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <prvCheckTasksWaitingTermination+0x50>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fa85 	bl	8005838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <prvCheckTasksWaitingTermination+0x54>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3b01      	subs	r3, #1
 8007334:	4a0b      	ldr	r2, [pc, #44]	@ (8007364 <prvCheckTasksWaitingTermination+0x54>)
 8007336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007338:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <prvCheckTasksWaitingTermination+0x58>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3b01      	subs	r3, #1
 800733e:	4a0a      	ldr	r2, [pc, #40]	@ (8007368 <prvCheckTasksWaitingTermination+0x58>)
 8007340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007342:	f000 ff13 	bl	800816c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f810 	bl	800736c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <prvCheckTasksWaitingTermination+0x58>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e1      	bne.n	8007318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20001618 	.word	0x20001618
 8007364:	20001644 	.word	0x20001644
 8007368:	2000162c 	.word	0x2000162c

0800736c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800737a:	2b00      	cmp	r3, #0
 800737c:	d108      	bne.n	8007390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007382:	4618      	mov	r0, r3
 8007384:	f001 f8b0 	bl	80084e8 <vPortFree>
				vPortFree( pxTCB );
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f8ad 	bl	80084e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800738e:	e019      	b.n	80073c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007396:	2b01      	cmp	r3, #1
 8007398:	d103      	bne.n	80073a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 f8a4 	bl	80084e8 <vPortFree>
	}
 80073a0:	e010      	b.n	80073c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d00b      	beq.n	80073c4 <prvDeleteTCB+0x58>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60fb      	str	r3, [r7, #12]
}
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
 80073c2:	e7fd      	b.n	80073c0 <prvDeleteTCB+0x54>
	}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007404 <prvResetNextTaskUnblockTime+0x38>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <prvResetNextTaskUnblockTime+0x3c>)
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073e4:	e008      	b.n	80073f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	4b07      	ldr	r3, [pc, #28]	@ (8007404 <prvResetNextTaskUnblockTime+0x38>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4a04      	ldr	r2, [pc, #16]	@ (8007408 <prvResetNextTaskUnblockTime+0x3c>)
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	200015fc 	.word	0x200015fc
 8007408:	20001664 	.word	0x20001664

0800740c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007412:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <xTaskGetCurrentTaskHandle+0x1c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007418:	687b      	ldr	r3, [r7, #4]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20001170 	.word	0x20001170

0800742c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007432:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <xTaskGetSchedulerState+0x34>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800743a:	2301      	movs	r3, #1
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	e008      	b.n	8007452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007440:	4b08      	ldr	r3, [pc, #32]	@ (8007464 <xTaskGetSchedulerState+0x38>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007448:	2302      	movs	r3, #2
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	e001      	b.n	8007452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800744e:	2300      	movs	r3, #0
 8007450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007452:	687b      	ldr	r3, [r7, #4]
	}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20001650 	.word	0x20001650
 8007464:	2000166c 	.word	0x2000166c

08007468 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d051      	beq.n	8007522 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	4b2a      	ldr	r3, [pc, #168]	@ (800752c <xTaskPriorityInherit+0xc4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	429a      	cmp	r2, r3
 800748a:	d241      	bcs.n	8007510 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	db06      	blt.n	80074a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007494:	4b25      	ldr	r3, [pc, #148]	@ (800752c <xTaskPriorityInherit+0xc4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6959      	ldr	r1, [r3, #20]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007530 <xTaskPriorityInherit+0xc8>)
 80074b4:	4413      	add	r3, r2
 80074b6:	4299      	cmp	r1, r3
 80074b8:	d122      	bne.n	8007500 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe f9ba 	bl	8005838 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074c4:	4b19      	ldr	r3, [pc, #100]	@ (800752c <xTaskPriorityInherit+0xc4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d2:	4b18      	ldr	r3, [pc, #96]	@ (8007534 <xTaskPriorityInherit+0xcc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d903      	bls.n	80074e2 <xTaskPriorityInherit+0x7a>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <xTaskPriorityInherit+0xcc>)
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4a10      	ldr	r2, [pc, #64]	@ (8007530 <xTaskPriorityInherit+0xc8>)
 80074f0:	441a      	add	r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7fe f940 	bl	800577e <vListInsertEnd>
 80074fe:	e004      	b.n	800750a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007500:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <xTaskPriorityInherit+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800750a:	2301      	movs	r3, #1
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e008      	b.n	8007522 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007514:	4b05      	ldr	r3, [pc, #20]	@ (800752c <xTaskPriorityInherit+0xc4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	429a      	cmp	r2, r3
 800751c:	d201      	bcs.n	8007522 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007522:	68fb      	ldr	r3, [r7, #12]
	}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20001170 	.word	0x20001170
 8007530:	20001174 	.word	0x20001174
 8007534:	2000164c 	.word	0x2000164c

08007538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d058      	beq.n	8007600 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800754e:	4b2f      	ldr	r3, [pc, #188]	@ (800760c <xTaskPriorityDisinherit+0xd4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d00b      	beq.n	8007570 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	60fb      	str	r3, [r7, #12]
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60bb      	str	r3, [r7, #8]
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	1e5a      	subs	r2, r3, #1
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d02c      	beq.n	8007600 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d128      	bne.n	8007600 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe f940 	bl	8005838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <xTaskPriorityDisinherit+0xd8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <xTaskPriorityDisinherit+0xa8>
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007610 <xTaskPriorityDisinherit+0xd8>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a09      	ldr	r2, [pc, #36]	@ (8007614 <xTaskPriorityDisinherit+0xdc>)
 80075ee:	441a      	add	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7fe f8c1 	bl	800577e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007600:	697b      	ldr	r3, [r7, #20]
	}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20001170 	.word	0x20001170
 8007610:	2000164c 	.word	0x2000164c
 8007614:	20001174 	.word	0x20001174

08007618 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007626:	2301      	movs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d06c      	beq.n	800770a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d902      	bls.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e002      	b.n	8007666 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007664:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	429a      	cmp	r2, r3
 800766e:	d04c      	beq.n	800770a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	429a      	cmp	r2, r3
 8007678:	d147      	bne.n	800770a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800767a:	4b26      	ldr	r3, [pc, #152]	@ (8007714 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	429a      	cmp	r2, r3
 8007682:	d10b      	bne.n	800769c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60bb      	str	r3, [r7, #8]
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	e7fd      	b.n	8007698 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	db04      	blt.n	80076ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	6959      	ldr	r1, [r3, #20]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a13      	ldr	r2, [pc, #76]	@ (8007718 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076ca:	4413      	add	r3, r2
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d11c      	bne.n	800770a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe f8af 	bl	8005838 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	4b0f      	ldr	r3, [pc, #60]	@ (800771c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d903      	bls.n	80076ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	4a0c      	ldr	r2, [pc, #48]	@ (800771c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4a07      	ldr	r2, [pc, #28]	@ (8007718 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076fc:	441a      	add	r2, r3
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f7fe f83a 	bl	800577e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800770a:	bf00      	nop
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20001170 	.word	0x20001170
 8007718:	20001174 	.word	0x20001174
 800771c:	2000164c 	.word	0x2000164c

08007720 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007724:	4b07      	ldr	r3, [pc, #28]	@ (8007744 <pvTaskIncrementMutexHeldCount+0x24>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <pvTaskIncrementMutexHeldCount+0x24>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007732:	3201      	adds	r2, #1
 8007734:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007736:	4b03      	ldr	r3, [pc, #12]	@ (8007744 <pvTaskIncrementMutexHeldCount+0x24>)
 8007738:	681b      	ldr	r3, [r3, #0]
	}
 800773a:	4618      	mov	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20001170 	.word	0x20001170

08007748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007752:	4b21      	ldr	r3, [pc, #132]	@ (80077d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007758:	4b20      	ldr	r3, [pc, #128]	@ (80077dc <prvAddCurrentTaskToDelayedList+0x94>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3304      	adds	r3, #4
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe f86a 	bl	8005838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d10a      	bne.n	8007782 <prvAddCurrentTaskToDelayedList+0x3a>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007772:	4b1a      	ldr	r3, [pc, #104]	@ (80077dc <prvAddCurrentTaskToDelayedList+0x94>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	4819      	ldr	r0, [pc, #100]	@ (80077e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800777c:	f7fd ffff 	bl	800577e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007780:	e026      	b.n	80077d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4413      	add	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800778a:	4b14      	ldr	r3, [pc, #80]	@ (80077dc <prvAddCurrentTaskToDelayedList+0x94>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	429a      	cmp	r2, r3
 8007798:	d209      	bcs.n	80077ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779a:	4b12      	ldr	r3, [pc, #72]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <prvAddCurrentTaskToDelayedList+0x94>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe f80d 	bl	80057c6 <vListInsert>
}
 80077ac:	e010      	b.n	80077d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ae:	4b0e      	ldr	r3, [pc, #56]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <prvAddCurrentTaskToDelayedList+0x94>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe f803 	bl	80057c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077c0:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d202      	bcs.n	80077d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077ca:	4a08      	ldr	r2, [pc, #32]	@ (80077ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6013      	str	r3, [r2, #0]
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20001648 	.word	0x20001648
 80077dc:	20001170 	.word	0x20001170
 80077e0:	20001630 	.word	0x20001630
 80077e4:	20001600 	.word	0x20001600
 80077e8:	200015fc 	.word	0x200015fc
 80077ec:	20001664 	.word	0x20001664

080077f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	@ 0x28
 80077f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077fa:	f000 fb13 	bl	8007e24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007874 <xTimerCreateTimerTask+0x84>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d021      	beq.n	800784a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800780e:	1d3a      	adds	r2, r7, #4
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	f107 030c 	add.w	r3, r7, #12
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd ff69 	bl	80056f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	9202      	str	r2, [sp, #8]
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	2302      	movs	r3, #2
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	2300      	movs	r3, #0
 800782e:	460a      	mov	r2, r1
 8007830:	4911      	ldr	r1, [pc, #68]	@ (8007878 <xTimerCreateTimerTask+0x88>)
 8007832:	4812      	ldr	r0, [pc, #72]	@ (800787c <xTimerCreateTimerTask+0x8c>)
 8007834:	f7fe ff40 	bl	80066b8 <xTaskCreateStatic>
 8007838:	4603      	mov	r3, r0
 800783a:	4a11      	ldr	r2, [pc, #68]	@ (8007880 <xTimerCreateTimerTask+0x90>)
 800783c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800783e:	4b10      	ldr	r3, [pc, #64]	@ (8007880 <xTimerCreateTimerTask+0x90>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007846:	2301      	movs	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007868:	697b      	ldr	r3, [r7, #20]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200016a0 	.word	0x200016a0
 8007878:	0800baac 	.word	0x0800baac
 800787c:	080079bd 	.word	0x080079bd
 8007880:	200016a4 	.word	0x200016a4

08007884 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	@ 0x28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007892:	2300      	movs	r3, #0
 8007894:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	623b      	str	r3, [r7, #32]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078b4:	4b19      	ldr	r3, [pc, #100]	@ (800791c <xTimerGenericCommand+0x98>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d02a      	beq.n	8007912 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	dc18      	bgt.n	8007900 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078ce:	f7ff fdad 	bl	800742c <xTaskGetSchedulerState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d109      	bne.n	80078ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078d8:	4b10      	ldr	r3, [pc, #64]	@ (800791c <xTimerGenericCommand+0x98>)
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	f107 0110 	add.w	r1, r7, #16
 80078e0:	2300      	movs	r3, #0
 80078e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e4:	f7fe f9d0 	bl	8005c88 <xQueueGenericSend>
 80078e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80078ea:	e012      	b.n	8007912 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078ec:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <xTimerGenericCommand+0x98>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	f107 0110 	add.w	r1, r7, #16
 80078f4:	2300      	movs	r3, #0
 80078f6:	2200      	movs	r2, #0
 80078f8:	f7fe f9c6 	bl	8005c88 <xQueueGenericSend>
 80078fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80078fe:	e008      	b.n	8007912 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <xTimerGenericCommand+0x98>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	f107 0110 	add.w	r1, r7, #16
 8007908:	2300      	movs	r3, #0
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	f7fe fabe 	bl	8005e8c <xQueueGenericSendFromISR>
 8007910:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	@ 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200016a0 	.word	0x200016a0

08007920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792a:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <prvProcessExpiredTimer+0x98>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7fd ff7d 	bl	8005838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d023      	beq.n	8007994 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	18d1      	adds	r1, r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	f000 f8d5 	bl	8007b08 <prvInsertTimerInActiveList>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d020      	beq.n	80079a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	2100      	movs	r1, #0
 800796e:	6978      	ldr	r0, [r7, #20]
 8007970:	f7ff ff88 	bl	8007884 <xTimerGenericCommand>
 8007974:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d114      	bne.n	80079a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800799a:	f023 0301 	bic.w	r3, r3, #1
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	6978      	ldr	r0, [r7, #20]
 80079ac:	4798      	blx	r3
}
 80079ae:	bf00      	nop
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20001698 	.word	0x20001698

080079bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079c4:	f107 0308 	add.w	r3, r7, #8
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 f859 	bl	8007a80 <prvGetNextExpireTime>
 80079ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4619      	mov	r1, r3
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f805 	bl	80079e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079da:	f000 f8d7 	bl	8007b8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079de:	bf00      	nop
 80079e0:	e7f0      	b.n	80079c4 <prvTimerTask+0x8>
	...

080079e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079ee:	f7ff f927 	bl	8006c40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f866 	bl	8007ac8 <prvSampleTimeNow>
 80079fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d130      	bne.n	8007a66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <prvProcessTimerOrBlockTask+0x3c>
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d806      	bhi.n	8007a20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a12:	f7ff f923 	bl	8006c5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff ff81 	bl	8007920 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a1e:	e024      	b.n	8007a6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d008      	beq.n	8007a38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a26:	4b13      	ldr	r3, [pc, #76]	@ (8007a74 <prvProcessTimerOrBlockTask+0x90>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <prvProcessTimerOrBlockTask+0x50>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <prvProcessTimerOrBlockTask+0x52>
 8007a34:	2300      	movs	r3, #0
 8007a36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a38:	4b0f      	ldr	r3, [pc, #60]	@ (8007a78 <prvProcessTimerOrBlockTask+0x94>)
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4619      	mov	r1, r3
 8007a46:	f7fe fe03 	bl	8006650 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a4a:	f7ff f907 	bl	8006c5c <xTaskResumeAll>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10a      	bne.n	8007a6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a54:	4b09      	ldr	r3, [pc, #36]	@ (8007a7c <prvProcessTimerOrBlockTask+0x98>)
 8007a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	f3bf 8f6f 	isb	sy
}
 8007a64:	e001      	b.n	8007a6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a66:	f7ff f8f9 	bl	8006c5c <xTaskResumeAll>
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	2000169c 	.word	0x2000169c
 8007a78:	200016a0 	.word	0x200016a0
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac4 <prvGetNextExpireTime+0x44>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <prvGetNextExpireTime+0x16>
 8007a92:	2201      	movs	r2, #1
 8007a94:	e000      	b.n	8007a98 <prvGetNextExpireTime+0x18>
 8007a96:	2200      	movs	r2, #0
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa4:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <prvGetNextExpireTime+0x44>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e001      	b.n	8007ab4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20001698 	.word	0x20001698

08007ac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ad0:	f7ff f962 	bl	8006d98 <xTaskGetTickCount>
 8007ad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b04 <prvSampleTimeNow+0x3c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d205      	bcs.n	8007aec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ae0:	f000 f93a 	bl	8007d58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e002      	b.n	8007af2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007af2:	4a04      	ldr	r2, [pc, #16]	@ (8007b04 <prvSampleTimeNow+0x3c>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007af8:	68fb      	ldr	r3, [r7, #12]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200016a8 	.word	0x200016a8

08007b08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d812      	bhi.n	8007b54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d302      	bcc.n	8007b42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e01b      	b.n	8007b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b42:	4b10      	ldr	r3, [pc, #64]	@ (8007b84 <prvInsertTimerInActiveList+0x7c>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f7fd fe3a 	bl	80057c6 <vListInsert>
 8007b52:	e012      	b.n	8007b7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d206      	bcs.n	8007b6a <prvInsertTimerInActiveList+0x62>
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d302      	bcc.n	8007b6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	e007      	b.n	8007b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b6a:	4b07      	ldr	r3, [pc, #28]	@ (8007b88 <prvInsertTimerInActiveList+0x80>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7fd fe26 	bl	80057c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b7a:	697b      	ldr	r3, [r7, #20]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	2000169c 	.word	0x2000169c
 8007b88:	20001698 	.word	0x20001698

08007b8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08e      	sub	sp, #56	@ 0x38
 8007b90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b92:	e0ce      	b.n	8007d32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da19      	bge.n	8007bce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b9a:	1d3b      	adds	r3, r7, #4
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61fb      	str	r3, [r7, #28]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc4:	6850      	ldr	r0, [r2, #4]
 8007bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc8:	6892      	ldr	r2, [r2, #8]
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f2c0 80ae 	blt.w	8007d32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be4:	3304      	adds	r3, #4
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd fe26 	bl	8005838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bec:	463b      	mov	r3, r7
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff ff6a 	bl	8007ac8 <prvSampleTimeNow>
 8007bf4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b09      	cmp	r3, #9
 8007bfa:	f200 8097 	bhi.w	8007d2c <prvProcessReceivedCommands+0x1a0>
 8007bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <prvProcessReceivedCommands+0x78>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c2d 	.word	0x08007c2d
 8007c08:	08007c2d 	.word	0x08007c2d
 8007c0c:	08007c2d 	.word	0x08007c2d
 8007c10:	08007ca3 	.word	0x08007ca3
 8007c14:	08007cb7 	.word	0x08007cb7
 8007c18:	08007d03 	.word	0x08007d03
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c2d 	.word	0x08007c2d
 8007c24:	08007ca3 	.word	0x08007ca3
 8007c28:	08007cb7 	.word	0x08007cb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	18d1      	adds	r1, r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c4c:	f7ff ff5c 	bl	8007b08 <prvInsertTimerInActiveList>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d06c      	beq.n	8007d30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d061      	beq.n	8007d30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	441a      	add	r2, r3
 8007c74:	2300      	movs	r3, #0
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c7e:	f7ff fe01 	bl	8007884 <xTimerGenericCommand>
 8007c82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d152      	bne.n	8007d30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	61bb      	str	r3, [r7, #24]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cb4:	e03d      	b.n	8007d32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	617b      	str	r3, [r7, #20]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	18d1      	adds	r1, r2, r3
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfc:	f7ff ff04 	bl	8007b08 <prvInsertTimerInActiveList>
					break;
 8007d00:	e017      	b.n	8007d32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d12:	f000 fbe9 	bl	80084e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d16:	e00c      	b.n	8007d32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d2a:	e002      	b.n	8007d32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d2c:	bf00      	nop
 8007d2e:	e000      	b.n	8007d32 <prvProcessReceivedCommands+0x1a6>
					break;
 8007d30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d32:	4b08      	ldr	r3, [pc, #32]	@ (8007d54 <prvProcessReceivedCommands+0x1c8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1d39      	adds	r1, r7, #4
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe f944 	bl	8005fc8 <xQueueReceive>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f47f af26 	bne.w	8007b94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	3730      	adds	r7, #48	@ 0x30
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	200016a0 	.word	0x200016a0

08007d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5e:	e049      	b.n	8007df4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d60:	4b2e      	ldr	r3, [pc, #184]	@ (8007e1c <prvSwitchTimerLists+0xc4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8007e1c <prvSwitchTimerLists+0xc4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fd fd5d 	bl	8005838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d02f      	beq.n	8007df4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90e      	bls.n	8007dc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007db2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e1c <prvSwitchTimerLists+0xc4>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	f7fd fd02 	bl	80057c6 <vListInsert>
 8007dc2:	e017      	b.n	8007df4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	2100      	movs	r1, #0
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f7ff fd58 	bl	8007884 <xTimerGenericCommand>
 8007dd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10b      	bne.n	8007df4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	603b      	str	r3, [r7, #0]
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	e7fd      	b.n	8007df0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007df4:	4b09      	ldr	r3, [pc, #36]	@ (8007e1c <prvSwitchTimerLists+0xc4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1b0      	bne.n	8007d60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dfe:	4b07      	ldr	r3, [pc, #28]	@ (8007e1c <prvSwitchTimerLists+0xc4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <prvSwitchTimerLists+0xc8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a04      	ldr	r2, [pc, #16]	@ (8007e1c <prvSwitchTimerLists+0xc4>)
 8007e0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e0c:	4a04      	ldr	r2, [pc, #16]	@ (8007e20 <prvSwitchTimerLists+0xc8>)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6013      	str	r3, [r2, #0]
}
 8007e12:	bf00      	nop
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20001698 	.word	0x20001698
 8007e20:	2000169c 	.word	0x2000169c

08007e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e2a:	f000 f96d 	bl	8008108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e2e:	4b15      	ldr	r3, [pc, #84]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d120      	bne.n	8007e78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e36:	4814      	ldr	r0, [pc, #80]	@ (8007e88 <prvCheckForValidListAndQueue+0x64>)
 8007e38:	f7fd fc74 	bl	8005724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e3c:	4813      	ldr	r0, [pc, #76]	@ (8007e8c <prvCheckForValidListAndQueue+0x68>)
 8007e3e:	f7fd fc71 	bl	8005724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e42:	4b13      	ldr	r3, [pc, #76]	@ (8007e90 <prvCheckForValidListAndQueue+0x6c>)
 8007e44:	4a10      	ldr	r2, [pc, #64]	@ (8007e88 <prvCheckForValidListAndQueue+0x64>)
 8007e46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e48:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <prvCheckForValidListAndQueue+0x70>)
 8007e4a:	4a10      	ldr	r2, [pc, #64]	@ (8007e8c <prvCheckForValidListAndQueue+0x68>)
 8007e4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4b11      	ldr	r3, [pc, #68]	@ (8007e98 <prvCheckForValidListAndQueue+0x74>)
 8007e54:	4a11      	ldr	r2, [pc, #68]	@ (8007e9c <prvCheckForValidListAndQueue+0x78>)
 8007e56:	2110      	movs	r1, #16
 8007e58:	200a      	movs	r0, #10
 8007e5a:	f7fd fd81 	bl	8005960 <xQueueGenericCreateStatic>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4a08      	ldr	r2, [pc, #32]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e64:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <prvCheckForValidListAndQueue+0x60>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	490b      	ldr	r1, [pc, #44]	@ (8007ea0 <prvCheckForValidListAndQueue+0x7c>)
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fbc2 	bl	80065fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e78:	f000 f978 	bl	800816c <vPortExitCritical>
}
 8007e7c:	bf00      	nop
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	200016a0 	.word	0x200016a0
 8007e88:	20001670 	.word	0x20001670
 8007e8c:	20001684 	.word	0x20001684
 8007e90:	20001698 	.word	0x20001698
 8007e94:	2000169c 	.word	0x2000169c
 8007e98:	2000174c 	.word	0x2000174c
 8007e9c:	200016ac 	.word	0x200016ac
 8007ea0:	0800bab4 	.word	0x0800bab4

08007ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8007f08 <pxPortInitialiseStack+0x64>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b14      	subs	r3, #20
 8007ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f06f 0202 	mvn.w	r2, #2
 8007ef2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3b20      	subs	r3, #32
 8007ef8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	08007f0d 	.word	0x08007f0d

08007f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f16:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <prvTaskExitError+0x58>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d00b      	beq.n	8007f38 <prvTaskExitError+0x2c>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60fb      	str	r3, [r7, #12]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <prvTaskExitError+0x28>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60bb      	str	r3, [r7, #8]
}
 8007f4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f4c:	bf00      	nop
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0fc      	beq.n	8007f4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000014 	.word	0x20000014
	...

08007f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f70:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <pxCurrentTCBConst2>)
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	f380 8809 	msr	PSP, r0
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	4770      	bx	lr
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst2>:
 8007f90:	20001170 	.word	0x20001170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f98:	4808      	ldr	r0, [pc, #32]	@ (8007fbc <prvPortStartFirstTask+0x24>)
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f380 8808 	msr	MSP, r0
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8814 	msr	CONTROL, r0
 8007faa:	b662      	cpsie	i
 8007fac:	b661      	cpsie	f
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	df00      	svc	0
 8007fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fba:	bf00      	nop
 8007fbc:	e000ed08 	.word	0xe000ed08

08007fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fc6:	4b47      	ldr	r3, [pc, #284]	@ (80080e4 <xPortStartScheduler+0x124>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a47      	ldr	r2, [pc, #284]	@ (80080e8 <xPortStartScheduler+0x128>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10b      	bne.n	8007fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80080e4 <xPortStartScheduler+0x124>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3f      	ldr	r2, [pc, #252]	@ (80080ec <xPortStartScheduler+0x12c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10b      	bne.n	800800a <xPortStartScheduler+0x4a>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	613b      	str	r3, [r7, #16]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800800a:	4b39      	ldr	r3, [pc, #228]	@ (80080f0 <xPortStartScheduler+0x130>)
 800800c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	22ff      	movs	r2, #255	@ 0xff
 800801a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800802c:	b2da      	uxtb	r2, r3
 800802e:	4b31      	ldr	r3, [pc, #196]	@ (80080f4 <xPortStartScheduler+0x134>)
 8008030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008032:	4b31      	ldr	r3, [pc, #196]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008034:	2207      	movs	r2, #7
 8008036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008038:	e009      	b.n	800804e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800803a:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <xPortStartScheduler+0x138>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3b01      	subs	r3, #1
 8008040:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008056:	2b80      	cmp	r3, #128	@ 0x80
 8008058:	d0ef      	beq.n	800803a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800805a:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <xPortStartScheduler+0x138>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1c3 0307 	rsb	r3, r3, #7
 8008062:	2b04      	cmp	r3, #4
 8008064:	d00b      	beq.n	800807e <xPortStartScheduler+0xbe>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60bb      	str	r3, [r7, #8]
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	e7fd      	b.n	800807a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800807e:	4b1e      	ldr	r3, [pc, #120]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008088:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <xPortStartScheduler+0x138>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008090:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	b2da      	uxtb	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800809c:	4b17      	ldr	r3, [pc, #92]	@ (80080fc <xPortStartScheduler+0x13c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a16      	ldr	r2, [pc, #88]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080a8:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a13      	ldr	r2, [pc, #76]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080b4:	f000 f8da 	bl	800826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080b8:	4b11      	ldr	r3, [pc, #68]	@ (8008100 <xPortStartScheduler+0x140>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080be:	f000 f8f9 	bl	80082b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <xPortStartScheduler+0x144>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008104 <xPortStartScheduler+0x144>)
 80080c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080ce:	f7ff ff63 	bl	8007f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080d2:	f7fe ff2b 	bl	8006f2c <vTaskSwitchContext>
	prvTaskExitError();
 80080d6:	f7ff ff19 	bl	8007f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	e000ed00 	.word	0xe000ed00
 80080e8:	410fc271 	.word	0x410fc271
 80080ec:	410fc270 	.word	0x410fc270
 80080f0:	e000e400 	.word	0xe000e400
 80080f4:	2000179c 	.word	0x2000179c
 80080f8:	200017a0 	.word	0x200017a0
 80080fc:	e000ed20 	.word	0xe000ed20
 8008100:	20000014 	.word	0x20000014
 8008104:	e000ef34 	.word	0xe000ef34

08008108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <vPortEnterCritical+0x5c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	4a0e      	ldr	r2, [pc, #56]	@ (8008164 <vPortEnterCritical+0x5c>)
 800812a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800812c:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <vPortEnterCritical+0x5c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d110      	bne.n	8008156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <vPortEnterCritical+0x60>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <vPortEnterCritical+0x4e>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	603b      	str	r3, [r7, #0]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <vPortEnterCritical+0x4a>
	}
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000014 	.word	0x20000014
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <vPortExitCritical+0x50>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <vPortExitCritical+0x26>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	607b      	str	r3, [r7, #4]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <vPortExitCritical+0x50>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	4a08      	ldr	r2, [pc, #32]	@ (80081bc <vPortExitCritical+0x50>)
 800819a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800819c:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <vPortExitCritical+0x50>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <vPortExitCritical+0x44>
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
}
 80081ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000014 	.word	0x20000014

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081e4:	f380 8811 	msr	BASEPRI, r0
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f7fe fe9c 	bl	8006f2c <vTaskSwitchContext>
 80081f4:	f04f 0000 	mov.w	r0, #0
 80081f8:	f380 8811 	msr	BASEPRI, r0
 80081fc:	bc09      	pop	{r0, r3}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	f01e 0f10 	tst.w	lr, #16
 800820a:	bf08      	it	eq
 800820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008210:	f380 8809 	msr	PSP, r0
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst>:
 8008220:	20001170 	.word	0x20001170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008242:	f7fe fdb9 	bl	8006db8 <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <xPortSysTickHandler+0x40>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f383 8811 	msr	BASEPRI, r3
}
 800825e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008276:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <vPortSetupTimerInterrupt+0x38>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827c:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <vPortSetupTimerInterrupt+0x3c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	@ (80082ac <vPortSetupTimerInterrupt+0x40>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
 8008288:	4a09      	ldr	r2, [pc, #36]	@ (80082b0 <vPortSetupTimerInterrupt+0x44>)
 800828a:	3b01      	subs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828e:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	e000e010 	.word	0xe000e010
 80082a4:	e000e018 	.word	0xe000e018
 80082a8:	20000008 	.word	0x20000008
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	e000e014 	.word	0xe000e014

080082b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082c4 <vPortEnableVFP+0x10>
 80082b8:	6801      	ldr	r1, [r0, #0]
 80082ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082be:	6001      	str	r1, [r0, #0]
 80082c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e000ed88 	.word	0xe000ed88

080082c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082ce:	f3ef 8305 	mrs	r3, IPSR
 80082d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b0f      	cmp	r3, #15
 80082d8:	d915      	bls.n	8008306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082da:	4a18      	ldr	r2, [pc, #96]	@ (800833c <vPortValidateInterruptPriority+0x74>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082e4:	4b16      	ldr	r3, [pc, #88]	@ (8008340 <vPortValidateInterruptPriority+0x78>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	7afa      	ldrb	r2, [r7, #11]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d20b      	bcs.n	8008306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008306:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <vPortValidateInterruptPriority+0x7c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800830e:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <vPortValidateInterruptPriority+0x80>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d90b      	bls.n	800832e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	603b      	str	r3, [r7, #0]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <vPortValidateInterruptPriority+0x62>
	}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	e000e3f0 	.word	0xe000e3f0
 8008340:	2000179c 	.word	0x2000179c
 8008344:	e000ed0c 	.word	0xe000ed0c
 8008348:	200017a0 	.word	0x200017a0

0800834c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	@ 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008358:	f7fe fc72 	bl	8006c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800835c:	4b5c      	ldr	r3, [pc, #368]	@ (80084d0 <pvPortMalloc+0x184>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008364:	f000 f924 	bl	80085b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008368:	4b5a      	ldr	r3, [pc, #360]	@ (80084d4 <pvPortMalloc+0x188>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4013      	ands	r3, r2
 8008370:	2b00      	cmp	r3, #0
 8008372:	f040 8095 	bne.w	80084a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01e      	beq.n	80083ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800837c:	2208      	movs	r2, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f023 0307 	bic.w	r3, r3, #7
 8008394:	3308      	adds	r3, #8
 8008396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <pvPortMalloc+0x6e>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	617b      	str	r3, [r7, #20]
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	e7fd      	b.n	80083b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d06f      	beq.n	80084a0 <pvPortMalloc+0x154>
 80083c0:	4b45      	ldr	r3, [pc, #276]	@ (80084d8 <pvPortMalloc+0x18c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d86a      	bhi.n	80084a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083ca:	4b44      	ldr	r3, [pc, #272]	@ (80084dc <pvPortMalloc+0x190>)
 80083cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083ce:	4b43      	ldr	r3, [pc, #268]	@ (80084dc <pvPortMalloc+0x190>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083d4:	e004      	b.n	80083e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d903      	bls.n	80083f2 <pvPortMalloc+0xa6>
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f1      	bne.n	80083d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083f2:	4b37      	ldr	r3, [pc, #220]	@ (80084d0 <pvPortMalloc+0x184>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d051      	beq.n	80084a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2208      	movs	r2, #8
 8008402:	4413      	add	r3, r2
 8008404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	1ad2      	subs	r2, r2, r3
 8008416:	2308      	movs	r3, #8
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	429a      	cmp	r2, r3
 800841c:	d920      	bls.n	8008460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800841e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4413      	add	r3, r2
 8008424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00b      	beq.n	8008448 <pvPortMalloc+0xfc>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	613b      	str	r3, [r7, #16]
}
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	e7fd      	b.n	8008444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800845a:	69b8      	ldr	r0, [r7, #24]
 800845c:	f000 f90a 	bl	8008674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008460:	4b1d      	ldr	r3, [pc, #116]	@ (80084d8 <pvPortMalloc+0x18c>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	4a1b      	ldr	r2, [pc, #108]	@ (80084d8 <pvPortMalloc+0x18c>)
 800846c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800846e:	4b1a      	ldr	r3, [pc, #104]	@ (80084d8 <pvPortMalloc+0x18c>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <pvPortMalloc+0x194>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d203      	bcs.n	8008482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800847a:	4b17      	ldr	r3, [pc, #92]	@ (80084d8 <pvPortMalloc+0x18c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a18      	ldr	r2, [pc, #96]	@ (80084e0 <pvPortMalloc+0x194>)
 8008480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4b13      	ldr	r3, [pc, #76]	@ (80084d4 <pvPortMalloc+0x188>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	431a      	orrs	r2, r3
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008496:	4b13      	ldr	r3, [pc, #76]	@ (80084e4 <pvPortMalloc+0x198>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3301      	adds	r3, #1
 800849c:	4a11      	ldr	r2, [pc, #68]	@ (80084e4 <pvPortMalloc+0x198>)
 800849e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084a0:	f7fe fbdc 	bl	8006c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <pvPortMalloc+0x17a>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60fb      	str	r3, [r7, #12]
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <pvPortMalloc+0x176>
	return pvReturn;
 80084c6:	69fb      	ldr	r3, [r7, #28]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3728      	adds	r7, #40	@ 0x28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	200053ac 	.word	0x200053ac
 80084d4:	200053c0 	.word	0x200053c0
 80084d8:	200053b0 	.word	0x200053b0
 80084dc:	200053a4 	.word	0x200053a4
 80084e0:	200053b4 	.word	0x200053b4
 80084e4:	200053b8 	.word	0x200053b8

080084e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d04f      	beq.n	800859a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084fa:	2308      	movs	r3, #8
 80084fc:	425b      	negs	r3, r3
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	4b25      	ldr	r3, [pc, #148]	@ (80085a4 <vPortFree+0xbc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4013      	ands	r3, r2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10b      	bne.n	800852e <vPortFree+0x46>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60fb      	str	r3, [r7, #12]
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	e7fd      	b.n	800852a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <vPortFree+0x66>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4b14      	ldr	r3, [pc, #80]	@ (80085a4 <vPortFree+0xbc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4013      	ands	r3, r2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01e      	beq.n	800859a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11a      	bne.n	800859a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	4b0e      	ldr	r3, [pc, #56]	@ (80085a4 <vPortFree+0xbc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	43db      	mvns	r3, r3
 800856e:	401a      	ands	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008574:	f7fe fb64 	bl	8006c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4b0a      	ldr	r3, [pc, #40]	@ (80085a8 <vPortFree+0xc0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4413      	add	r3, r2
 8008582:	4a09      	ldr	r2, [pc, #36]	@ (80085a8 <vPortFree+0xc0>)
 8008584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f000 f874 	bl	8008674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800858c:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <vPortFree+0xc4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	4a06      	ldr	r2, [pc, #24]	@ (80085ac <vPortFree+0xc4>)
 8008594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008596:	f7fe fb61 	bl	8006c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800859a:	bf00      	nop
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200053c0 	.word	0x200053c0
 80085a8:	200053b0 	.word	0x200053b0
 80085ac:	200053bc 	.word	0x200053bc

080085b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80085ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085bc:	4b27      	ldr	r3, [pc, #156]	@ (800865c <prvHeapInit+0xac>)
 80085be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3307      	adds	r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0307 	bic.w	r3, r3, #7
 80085d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	4a1f      	ldr	r2, [pc, #124]	@ (800865c <prvHeapInit+0xac>)
 80085e0:	4413      	add	r3, r2
 80085e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008660 <prvHeapInit+0xb0>)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <prvHeapInit+0xb0>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4413      	add	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085fc:	2208      	movs	r2, #8
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0307 	bic.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4a15      	ldr	r2, [pc, #84]	@ (8008664 <prvHeapInit+0xb4>)
 8008610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008612:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <prvHeapInit+0xb4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2200      	movs	r2, #0
 8008618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800861a:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <prvHeapInit+0xb4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	1ad2      	subs	r2, r2, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008630:	4b0c      	ldr	r3, [pc, #48]	@ (8008664 <prvHeapInit+0xb4>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	4a0a      	ldr	r2, [pc, #40]	@ (8008668 <prvHeapInit+0xb8>)
 800863e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	4a09      	ldr	r2, [pc, #36]	@ (800866c <prvHeapInit+0xbc>)
 8008646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008648:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <prvHeapInit+0xc0>)
 800864a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800864e:	601a      	str	r2, [r3, #0]
}
 8008650:	bf00      	nop
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	200017a4 	.word	0x200017a4
 8008660:	200053a4 	.word	0x200053a4
 8008664:	200053ac 	.word	0x200053ac
 8008668:	200053b4 	.word	0x200053b4
 800866c:	200053b0 	.word	0x200053b0
 8008670:	200053c0 	.word	0x200053c0

08008674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800867c:	4b28      	ldr	r3, [pc, #160]	@ (8008720 <prvInsertBlockIntoFreeList+0xac>)
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e002      	b.n	8008688 <prvInsertBlockIntoFreeList+0x14>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	429a      	cmp	r2, r3
 8008690:	d8f7      	bhi.n	8008682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d108      	bne.n	80086b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	441a      	add	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d118      	bne.n	80086fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b15      	ldr	r3, [pc, #84]	@ (8008724 <prvInsertBlockIntoFreeList+0xb0>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d00d      	beq.n	80086f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	441a      	add	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e008      	b.n	8008704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008724 <prvInsertBlockIntoFreeList+0xb0>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	e003      	b.n	8008704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	d002      	beq.n	8008712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	200053a4 	.word	0x200053a4
 8008724:	200053ac 	.word	0x200053ac

08008728 <atoi>:
 8008728:	220a      	movs	r2, #10
 800872a:	2100      	movs	r1, #0
 800872c:	f000 b87c 	b.w	8008828 <strtol>

08008730 <_strtol_l.isra.0>:
 8008730:	2b24      	cmp	r3, #36	@ 0x24
 8008732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008736:	4686      	mov	lr, r0
 8008738:	4690      	mov	r8, r2
 800873a:	d801      	bhi.n	8008740 <_strtol_l.isra.0+0x10>
 800873c:	2b01      	cmp	r3, #1
 800873e:	d106      	bne.n	800874e <_strtol_l.isra.0+0x1e>
 8008740:	f001 fa74 	bl	8009c2c <__errno>
 8008744:	2316      	movs	r3, #22
 8008746:	6003      	str	r3, [r0, #0]
 8008748:	2000      	movs	r0, #0
 800874a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874e:	4834      	ldr	r0, [pc, #208]	@ (8008820 <_strtol_l.isra.0+0xf0>)
 8008750:	460d      	mov	r5, r1
 8008752:	462a      	mov	r2, r5
 8008754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008758:	5d06      	ldrb	r6, [r0, r4]
 800875a:	f016 0608 	ands.w	r6, r6, #8
 800875e:	d1f8      	bne.n	8008752 <_strtol_l.isra.0+0x22>
 8008760:	2c2d      	cmp	r4, #45	@ 0x2d
 8008762:	d110      	bne.n	8008786 <_strtol_l.isra.0+0x56>
 8008764:	782c      	ldrb	r4, [r5, #0]
 8008766:	2601      	movs	r6, #1
 8008768:	1c95      	adds	r5, r2, #2
 800876a:	f033 0210 	bics.w	r2, r3, #16
 800876e:	d115      	bne.n	800879c <_strtol_l.isra.0+0x6c>
 8008770:	2c30      	cmp	r4, #48	@ 0x30
 8008772:	d10d      	bne.n	8008790 <_strtol_l.isra.0+0x60>
 8008774:	782a      	ldrb	r2, [r5, #0]
 8008776:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800877a:	2a58      	cmp	r2, #88	@ 0x58
 800877c:	d108      	bne.n	8008790 <_strtol_l.isra.0+0x60>
 800877e:	786c      	ldrb	r4, [r5, #1]
 8008780:	3502      	adds	r5, #2
 8008782:	2310      	movs	r3, #16
 8008784:	e00a      	b.n	800879c <_strtol_l.isra.0+0x6c>
 8008786:	2c2b      	cmp	r4, #43	@ 0x2b
 8008788:	bf04      	itt	eq
 800878a:	782c      	ldrbeq	r4, [r5, #0]
 800878c:	1c95      	addeq	r5, r2, #2
 800878e:	e7ec      	b.n	800876a <_strtol_l.isra.0+0x3a>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1f6      	bne.n	8008782 <_strtol_l.isra.0+0x52>
 8008794:	2c30      	cmp	r4, #48	@ 0x30
 8008796:	bf14      	ite	ne
 8008798:	230a      	movne	r3, #10
 800879a:	2308      	moveq	r3, #8
 800879c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087a4:	2200      	movs	r2, #0
 80087a6:	fbbc f9f3 	udiv	r9, ip, r3
 80087aa:	4610      	mov	r0, r2
 80087ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80087b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80087b4:	2f09      	cmp	r7, #9
 80087b6:	d80f      	bhi.n	80087d8 <_strtol_l.isra.0+0xa8>
 80087b8:	463c      	mov	r4, r7
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	dd1b      	ble.n	80087f6 <_strtol_l.isra.0+0xc6>
 80087be:	1c57      	adds	r7, r2, #1
 80087c0:	d007      	beq.n	80087d2 <_strtol_l.isra.0+0xa2>
 80087c2:	4581      	cmp	r9, r0
 80087c4:	d314      	bcc.n	80087f0 <_strtol_l.isra.0+0xc0>
 80087c6:	d101      	bne.n	80087cc <_strtol_l.isra.0+0x9c>
 80087c8:	45a2      	cmp	sl, r4
 80087ca:	db11      	blt.n	80087f0 <_strtol_l.isra.0+0xc0>
 80087cc:	fb00 4003 	mla	r0, r0, r3, r4
 80087d0:	2201      	movs	r2, #1
 80087d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087d6:	e7eb      	b.n	80087b0 <_strtol_l.isra.0+0x80>
 80087d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80087dc:	2f19      	cmp	r7, #25
 80087de:	d801      	bhi.n	80087e4 <_strtol_l.isra.0+0xb4>
 80087e0:	3c37      	subs	r4, #55	@ 0x37
 80087e2:	e7ea      	b.n	80087ba <_strtol_l.isra.0+0x8a>
 80087e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80087e8:	2f19      	cmp	r7, #25
 80087ea:	d804      	bhi.n	80087f6 <_strtol_l.isra.0+0xc6>
 80087ec:	3c57      	subs	r4, #87	@ 0x57
 80087ee:	e7e4      	b.n	80087ba <_strtol_l.isra.0+0x8a>
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	e7ed      	b.n	80087d2 <_strtol_l.isra.0+0xa2>
 80087f6:	1c53      	adds	r3, r2, #1
 80087f8:	d108      	bne.n	800880c <_strtol_l.isra.0+0xdc>
 80087fa:	2322      	movs	r3, #34	@ 0x22
 80087fc:	f8ce 3000 	str.w	r3, [lr]
 8008800:	4660      	mov	r0, ip
 8008802:	f1b8 0f00 	cmp.w	r8, #0
 8008806:	d0a0      	beq.n	800874a <_strtol_l.isra.0+0x1a>
 8008808:	1e69      	subs	r1, r5, #1
 800880a:	e006      	b.n	800881a <_strtol_l.isra.0+0xea>
 800880c:	b106      	cbz	r6, 8008810 <_strtol_l.isra.0+0xe0>
 800880e:	4240      	negs	r0, r0
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	d099      	beq.n	800874a <_strtol_l.isra.0+0x1a>
 8008816:	2a00      	cmp	r2, #0
 8008818:	d1f6      	bne.n	8008808 <_strtol_l.isra.0+0xd8>
 800881a:	f8c8 1000 	str.w	r1, [r8]
 800881e:	e794      	b.n	800874a <_strtol_l.isra.0+0x1a>
 8008820:	0800bb91 	.word	0x0800bb91

08008824 <_strtol_r>:
 8008824:	f7ff bf84 	b.w	8008730 <_strtol_l.isra.0>

08008828 <strtol>:
 8008828:	4613      	mov	r3, r2
 800882a:	460a      	mov	r2, r1
 800882c:	4601      	mov	r1, r0
 800882e:	4802      	ldr	r0, [pc, #8]	@ (8008838 <strtol+0x10>)
 8008830:	6800      	ldr	r0, [r0, #0]
 8008832:	f7ff bf7d 	b.w	8008730 <_strtol_l.isra.0>
 8008836:	bf00      	nop
 8008838:	2000002c 	.word	0x2000002c

0800883c <std>:
 800883c:	2300      	movs	r3, #0
 800883e:	b510      	push	{r4, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	e9c0 3300 	strd	r3, r3, [r0]
 8008846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800884a:	6083      	str	r3, [r0, #8]
 800884c:	8181      	strh	r1, [r0, #12]
 800884e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008850:	81c2      	strh	r2, [r0, #14]
 8008852:	6183      	str	r3, [r0, #24]
 8008854:	4619      	mov	r1, r3
 8008856:	2208      	movs	r2, #8
 8008858:	305c      	adds	r0, #92	@ 0x5c
 800885a:	f000 fa6b 	bl	8008d34 <memset>
 800885e:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <std+0x58>)
 8008860:	6263      	str	r3, [r4, #36]	@ 0x24
 8008862:	4b0d      	ldr	r3, [pc, #52]	@ (8008898 <std+0x5c>)
 8008864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008866:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <std+0x60>)
 8008868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800886a:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <std+0x64>)
 800886c:	6323      	str	r3, [r4, #48]	@ 0x30
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <std+0x68>)
 8008870:	6224      	str	r4, [r4, #32]
 8008872:	429c      	cmp	r4, r3
 8008874:	d006      	beq.n	8008884 <std+0x48>
 8008876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800887a:	4294      	cmp	r4, r2
 800887c:	d002      	beq.n	8008884 <std+0x48>
 800887e:	33d0      	adds	r3, #208	@ 0xd0
 8008880:	429c      	cmp	r4, r3
 8008882:	d105      	bne.n	8008890 <std+0x54>
 8008884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888c:	f001 b9f8 	b.w	8009c80 <__retarget_lock_init_recursive>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	bf00      	nop
 8008894:	08008b4d 	.word	0x08008b4d
 8008898:	08008b73 	.word	0x08008b73
 800889c:	08008bab 	.word	0x08008bab
 80088a0:	08008bcf 	.word	0x08008bcf
 80088a4:	200053c4 	.word	0x200053c4

080088a8 <stdio_exit_handler>:
 80088a8:	4a02      	ldr	r2, [pc, #8]	@ (80088b4 <stdio_exit_handler+0xc>)
 80088aa:	4903      	ldr	r1, [pc, #12]	@ (80088b8 <stdio_exit_handler+0x10>)
 80088ac:	4803      	ldr	r0, [pc, #12]	@ (80088bc <stdio_exit_handler+0x14>)
 80088ae:	f000 b869 	b.w	8008984 <_fwalk_sglue>
 80088b2:	bf00      	nop
 80088b4:	20000018 	.word	0x20000018
 80088b8:	0800b021 	.word	0x0800b021
 80088bc:	20000030 	.word	0x20000030

080088c0 <cleanup_stdio>:
 80088c0:	6841      	ldr	r1, [r0, #4]
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <cleanup_stdio+0x34>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	b510      	push	{r4, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	d001      	beq.n	80088d0 <cleanup_stdio+0x10>
 80088cc:	f002 fba8 	bl	800b020 <_fflush_r>
 80088d0:	68a1      	ldr	r1, [r4, #8]
 80088d2:	4b09      	ldr	r3, [pc, #36]	@ (80088f8 <cleanup_stdio+0x38>)
 80088d4:	4299      	cmp	r1, r3
 80088d6:	d002      	beq.n	80088de <cleanup_stdio+0x1e>
 80088d8:	4620      	mov	r0, r4
 80088da:	f002 fba1 	bl	800b020 <_fflush_r>
 80088de:	68e1      	ldr	r1, [r4, #12]
 80088e0:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <cleanup_stdio+0x3c>)
 80088e2:	4299      	cmp	r1, r3
 80088e4:	d004      	beq.n	80088f0 <cleanup_stdio+0x30>
 80088e6:	4620      	mov	r0, r4
 80088e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ec:	f002 bb98 	b.w	800b020 <_fflush_r>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	bf00      	nop
 80088f4:	200053c4 	.word	0x200053c4
 80088f8:	2000542c 	.word	0x2000542c
 80088fc:	20005494 	.word	0x20005494

08008900 <global_stdio_init.part.0>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <global_stdio_init.part.0+0x30>)
 8008904:	4c0b      	ldr	r4, [pc, #44]	@ (8008934 <global_stdio_init.part.0+0x34>)
 8008906:	4a0c      	ldr	r2, [pc, #48]	@ (8008938 <global_stdio_init.part.0+0x38>)
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	4620      	mov	r0, r4
 800890c:	2200      	movs	r2, #0
 800890e:	2104      	movs	r1, #4
 8008910:	f7ff ff94 	bl	800883c <std>
 8008914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008918:	2201      	movs	r2, #1
 800891a:	2109      	movs	r1, #9
 800891c:	f7ff ff8e 	bl	800883c <std>
 8008920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008924:	2202      	movs	r2, #2
 8008926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800892a:	2112      	movs	r1, #18
 800892c:	f7ff bf86 	b.w	800883c <std>
 8008930:	200054fc 	.word	0x200054fc
 8008934:	200053c4 	.word	0x200053c4
 8008938:	080088a9 	.word	0x080088a9

0800893c <__sfp_lock_acquire>:
 800893c:	4801      	ldr	r0, [pc, #4]	@ (8008944 <__sfp_lock_acquire+0x8>)
 800893e:	f001 b9a1 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 8008942:	bf00      	nop
 8008944:	2000552b 	.word	0x2000552b

08008948 <__sfp_lock_release>:
 8008948:	4801      	ldr	r0, [pc, #4]	@ (8008950 <__sfp_lock_release+0x8>)
 800894a:	f001 b99d 	b.w	8009c88 <__retarget_lock_release_recursive>
 800894e:	bf00      	nop
 8008950:	2000552b 	.word	0x2000552b

08008954 <__sinit>:
 8008954:	b510      	push	{r4, lr}
 8008956:	4604      	mov	r4, r0
 8008958:	f7ff fff0 	bl	800893c <__sfp_lock_acquire>
 800895c:	6a23      	ldr	r3, [r4, #32]
 800895e:	b11b      	cbz	r3, 8008968 <__sinit+0x14>
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008964:	f7ff bff0 	b.w	8008948 <__sfp_lock_release>
 8008968:	4b04      	ldr	r3, [pc, #16]	@ (800897c <__sinit+0x28>)
 800896a:	6223      	str	r3, [r4, #32]
 800896c:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <__sinit+0x2c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f5      	bne.n	8008960 <__sinit+0xc>
 8008974:	f7ff ffc4 	bl	8008900 <global_stdio_init.part.0>
 8008978:	e7f2      	b.n	8008960 <__sinit+0xc>
 800897a:	bf00      	nop
 800897c:	080088c1 	.word	0x080088c1
 8008980:	200054fc 	.word	0x200054fc

08008984 <_fwalk_sglue>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4607      	mov	r7, r0
 800898a:	4688      	mov	r8, r1
 800898c:	4614      	mov	r4, r2
 800898e:	2600      	movs	r6, #0
 8008990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008994:	f1b9 0901 	subs.w	r9, r9, #1
 8008998:	d505      	bpl.n	80089a6 <_fwalk_sglue+0x22>
 800899a:	6824      	ldr	r4, [r4, #0]
 800899c:	2c00      	cmp	r4, #0
 800899e:	d1f7      	bne.n	8008990 <_fwalk_sglue+0xc>
 80089a0:	4630      	mov	r0, r6
 80089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a6:	89ab      	ldrh	r3, [r5, #12]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d907      	bls.n	80089bc <_fwalk_sglue+0x38>
 80089ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089b0:	3301      	adds	r3, #1
 80089b2:	d003      	beq.n	80089bc <_fwalk_sglue+0x38>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	4306      	orrs	r6, r0
 80089bc:	3568      	adds	r5, #104	@ 0x68
 80089be:	e7e9      	b.n	8008994 <_fwalk_sglue+0x10>

080089c0 <iprintf>:
 80089c0:	b40f      	push	{r0, r1, r2, r3}
 80089c2:	b507      	push	{r0, r1, r2, lr}
 80089c4:	4906      	ldr	r1, [pc, #24]	@ (80089e0 <iprintf+0x20>)
 80089c6:	ab04      	add	r3, sp, #16
 80089c8:	6808      	ldr	r0, [r1, #0]
 80089ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ce:	6881      	ldr	r1, [r0, #8]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	f001 feaf 	bl	800a734 <_vfiprintf_r>
 80089d6:	b003      	add	sp, #12
 80089d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089dc:	b004      	add	sp, #16
 80089de:	4770      	bx	lr
 80089e0:	2000002c 	.word	0x2000002c

080089e4 <putchar>:
 80089e4:	4b02      	ldr	r3, [pc, #8]	@ (80089f0 <putchar+0xc>)
 80089e6:	4601      	mov	r1, r0
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	6882      	ldr	r2, [r0, #8]
 80089ec:	f002 bbb4 	b.w	800b158 <_putc_r>
 80089f0:	2000002c 	.word	0x2000002c

080089f4 <_puts_r>:
 80089f4:	6a03      	ldr	r3, [r0, #32]
 80089f6:	b570      	push	{r4, r5, r6, lr}
 80089f8:	6884      	ldr	r4, [r0, #8]
 80089fa:	4605      	mov	r5, r0
 80089fc:	460e      	mov	r6, r1
 80089fe:	b90b      	cbnz	r3, 8008a04 <_puts_r+0x10>
 8008a00:	f7ff ffa8 	bl	8008954 <__sinit>
 8008a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a06:	07db      	lsls	r3, r3, #31
 8008a08:	d405      	bmi.n	8008a16 <_puts_r+0x22>
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	0598      	lsls	r0, r3, #22
 8008a0e:	d402      	bmi.n	8008a16 <_puts_r+0x22>
 8008a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a12:	f001 f937 	bl	8009c84 <__retarget_lock_acquire_recursive>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	0719      	lsls	r1, r3, #28
 8008a1a:	d502      	bpl.n	8008a22 <_puts_r+0x2e>
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d135      	bne.n	8008a8e <_puts_r+0x9a>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4628      	mov	r0, r5
 8008a26:	f000 f915 	bl	8008c54 <__swsetup_r>
 8008a2a:	b380      	cbz	r0, 8008a8e <_puts_r+0x9a>
 8008a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a32:	07da      	lsls	r2, r3, #31
 8008a34:	d405      	bmi.n	8008a42 <_puts_r+0x4e>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	059b      	lsls	r3, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_puts_r+0x4e>
 8008a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a3e:	f001 f923 	bl	8009c88 <__retarget_lock_release_recursive>
 8008a42:	4628      	mov	r0, r5
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	da04      	bge.n	8008a54 <_puts_r+0x60>
 8008a4a:	69a2      	ldr	r2, [r4, #24]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	dc17      	bgt.n	8008a80 <_puts_r+0x8c>
 8008a50:	290a      	cmp	r1, #10
 8008a52:	d015      	beq.n	8008a80 <_puts_r+0x8c>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	6022      	str	r2, [r4, #0]
 8008a5a:	7019      	strb	r1, [r3, #0]
 8008a5c:	68a3      	ldr	r3, [r4, #8]
 8008a5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a62:	3b01      	subs	r3, #1
 8008a64:	60a3      	str	r3, [r4, #8]
 8008a66:	2900      	cmp	r1, #0
 8008a68:	d1ed      	bne.n	8008a46 <_puts_r+0x52>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da11      	bge.n	8008a92 <_puts_r+0x9e>
 8008a6e:	4622      	mov	r2, r4
 8008a70:	210a      	movs	r1, #10
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f8af 	bl	8008bd6 <__swbuf_r>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d0d7      	beq.n	8008a2c <_puts_r+0x38>
 8008a7c:	250a      	movs	r5, #10
 8008a7e:	e7d7      	b.n	8008a30 <_puts_r+0x3c>
 8008a80:	4622      	mov	r2, r4
 8008a82:	4628      	mov	r0, r5
 8008a84:	f000 f8a7 	bl	8008bd6 <__swbuf_r>
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d1e7      	bne.n	8008a5c <_puts_r+0x68>
 8008a8c:	e7ce      	b.n	8008a2c <_puts_r+0x38>
 8008a8e:	3e01      	subs	r6, #1
 8008a90:	e7e4      	b.n	8008a5c <_puts_r+0x68>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	6022      	str	r2, [r4, #0]
 8008a98:	220a      	movs	r2, #10
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	e7ee      	b.n	8008a7c <_puts_r+0x88>
	...

08008aa0 <puts>:
 8008aa0:	4b02      	ldr	r3, [pc, #8]	@ (8008aac <puts+0xc>)
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	f7ff bfa5 	b.w	80089f4 <_puts_r>
 8008aaa:	bf00      	nop
 8008aac:	2000002c 	.word	0x2000002c

08008ab0 <siprintf>:
 8008ab0:	b40e      	push	{r1, r2, r3}
 8008ab2:	b510      	push	{r4, lr}
 8008ab4:	b09d      	sub	sp, #116	@ 0x74
 8008ab6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ab8:	9002      	str	r0, [sp, #8]
 8008aba:	9006      	str	r0, [sp, #24]
 8008abc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ac0:	480a      	ldr	r0, [pc, #40]	@ (8008aec <siprintf+0x3c>)
 8008ac2:	9107      	str	r1, [sp, #28]
 8008ac4:	9104      	str	r1, [sp, #16]
 8008ac6:	490a      	ldr	r1, [pc, #40]	@ (8008af0 <siprintf+0x40>)
 8008ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008acc:	9105      	str	r1, [sp, #20]
 8008ace:	2400      	movs	r4, #0
 8008ad0:	a902      	add	r1, sp, #8
 8008ad2:	6800      	ldr	r0, [r0, #0]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ad8:	f001 fb36 	bl	800a148 <_svfiprintf_r>
 8008adc:	9b02      	ldr	r3, [sp, #8]
 8008ade:	701c      	strb	r4, [r3, #0]
 8008ae0:	b01d      	add	sp, #116	@ 0x74
 8008ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae6:	b003      	add	sp, #12
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000002c 	.word	0x2000002c
 8008af0:	ffff0208 	.word	0xffff0208

08008af4 <siscanf>:
 8008af4:	b40e      	push	{r1, r2, r3}
 8008af6:	b570      	push	{r4, r5, r6, lr}
 8008af8:	b09d      	sub	sp, #116	@ 0x74
 8008afa:	ac21      	add	r4, sp, #132	@ 0x84
 8008afc:	2500      	movs	r5, #0
 8008afe:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008b02:	f854 6b04 	ldr.w	r6, [r4], #4
 8008b06:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008b0a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008b0c:	9002      	str	r0, [sp, #8]
 8008b0e:	9006      	str	r0, [sp, #24]
 8008b10:	f7f7 fb70 	bl	80001f4 <strlen>
 8008b14:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <siscanf+0x50>)
 8008b16:	9003      	str	r0, [sp, #12]
 8008b18:	9007      	str	r0, [sp, #28]
 8008b1a:	480b      	ldr	r0, [pc, #44]	@ (8008b48 <siscanf+0x54>)
 8008b1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b26:	4632      	mov	r2, r6
 8008b28:	4623      	mov	r3, r4
 8008b2a:	a902      	add	r1, sp, #8
 8008b2c:	6800      	ldr	r0, [r0, #0]
 8008b2e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008b30:	9514      	str	r5, [sp, #80]	@ 0x50
 8008b32:	9401      	str	r4, [sp, #4]
 8008b34:	f001 fc5e 	bl	800a3f4 <__ssvfiscanf_r>
 8008b38:	b01d      	add	sp, #116	@ 0x74
 8008b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b3e:	b003      	add	sp, #12
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	08008b6f 	.word	0x08008b6f
 8008b48:	2000002c 	.word	0x2000002c

08008b4c <__sread>:
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	460c      	mov	r4, r1
 8008b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b54:	f001 f846 	bl	8009be4 <_read_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	bfab      	itete	ge
 8008b5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b60:	181b      	addge	r3, r3, r0
 8008b62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b66:	bfac      	ite	ge
 8008b68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b6a:	81a3      	strhlt	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__seofread>:
 8008b6e:	2000      	movs	r0, #0
 8008b70:	4770      	bx	lr

08008b72 <__swrite>:
 8008b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	461f      	mov	r7, r3
 8008b78:	898b      	ldrh	r3, [r1, #12]
 8008b7a:	05db      	lsls	r3, r3, #23
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	4616      	mov	r6, r2
 8008b82:	d505      	bpl.n	8008b90 <__swrite+0x1e>
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	2302      	movs	r3, #2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f001 f818 	bl	8009bc0 <_lseek_r>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	f001 b82f 	b.w	8009c08 <_write_r>

08008baa <__sseek>:
 8008baa:	b510      	push	{r4, lr}
 8008bac:	460c      	mov	r4, r1
 8008bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb2:	f001 f805 	bl	8009bc0 <_lseek_r>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	bf15      	itete	ne
 8008bbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bc6:	81a3      	strheq	r3, [r4, #12]
 8008bc8:	bf18      	it	ne
 8008bca:	81a3      	strhne	r3, [r4, #12]
 8008bcc:	bd10      	pop	{r4, pc}

08008bce <__sclose>:
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	f000 bfe5 	b.w	8009ba0 <_close_r>

08008bd6 <__swbuf_r>:
 8008bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd8:	460e      	mov	r6, r1
 8008bda:	4614      	mov	r4, r2
 8008bdc:	4605      	mov	r5, r0
 8008bde:	b118      	cbz	r0, 8008be8 <__swbuf_r+0x12>
 8008be0:	6a03      	ldr	r3, [r0, #32]
 8008be2:	b90b      	cbnz	r3, 8008be8 <__swbuf_r+0x12>
 8008be4:	f7ff feb6 	bl	8008954 <__sinit>
 8008be8:	69a3      	ldr	r3, [r4, #24]
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	071a      	lsls	r2, r3, #28
 8008bf0:	d501      	bpl.n	8008bf6 <__swbuf_r+0x20>
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	b943      	cbnz	r3, 8008c08 <__swbuf_r+0x32>
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 f82b 	bl	8008c54 <__swsetup_r>
 8008bfe:	b118      	cbz	r0, 8008c08 <__swbuf_r+0x32>
 8008c00:	f04f 37ff 	mov.w	r7, #4294967295
 8008c04:	4638      	mov	r0, r7
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	6922      	ldr	r2, [r4, #16]
 8008c0c:	1a98      	subs	r0, r3, r2
 8008c0e:	6963      	ldr	r3, [r4, #20]
 8008c10:	b2f6      	uxtb	r6, r6
 8008c12:	4283      	cmp	r3, r0
 8008c14:	4637      	mov	r7, r6
 8008c16:	dc05      	bgt.n	8008c24 <__swbuf_r+0x4e>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f002 fa00 	bl	800b020 <_fflush_r>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d1ed      	bne.n	8008c00 <__swbuf_r+0x2a>
 8008c24:	68a3      	ldr	r3, [r4, #8]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	701e      	strb	r6, [r3, #0]
 8008c32:	6962      	ldr	r2, [r4, #20]
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d004      	beq.n	8008c44 <__swbuf_r+0x6e>
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	07db      	lsls	r3, r3, #31
 8008c3e:	d5e1      	bpl.n	8008c04 <__swbuf_r+0x2e>
 8008c40:	2e0a      	cmp	r6, #10
 8008c42:	d1df      	bne.n	8008c04 <__swbuf_r+0x2e>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f002 f9ea 	bl	800b020 <_fflush_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0d9      	beq.n	8008c04 <__swbuf_r+0x2e>
 8008c50:	e7d6      	b.n	8008c00 <__swbuf_r+0x2a>
	...

08008c54 <__swsetup_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4b29      	ldr	r3, [pc, #164]	@ (8008cfc <__swsetup_r+0xa8>)
 8008c58:	4605      	mov	r5, r0
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	b118      	cbz	r0, 8008c68 <__swsetup_r+0x14>
 8008c60:	6a03      	ldr	r3, [r0, #32]
 8008c62:	b90b      	cbnz	r3, 8008c68 <__swsetup_r+0x14>
 8008c64:	f7ff fe76 	bl	8008954 <__sinit>
 8008c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6c:	0719      	lsls	r1, r3, #28
 8008c6e:	d422      	bmi.n	8008cb6 <__swsetup_r+0x62>
 8008c70:	06da      	lsls	r2, r3, #27
 8008c72:	d407      	bmi.n	8008c84 <__swsetup_r+0x30>
 8008c74:	2209      	movs	r2, #9
 8008c76:	602a      	str	r2, [r5, #0]
 8008c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c82:	e033      	b.n	8008cec <__swsetup_r+0x98>
 8008c84:	0758      	lsls	r0, r3, #29
 8008c86:	d512      	bpl.n	8008cae <__swsetup_r+0x5a>
 8008c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c8a:	b141      	cbz	r1, 8008c9e <__swsetup_r+0x4a>
 8008c8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c90:	4299      	cmp	r1, r3
 8008c92:	d002      	beq.n	8008c9a <__swsetup_r+0x46>
 8008c94:	4628      	mov	r0, r5
 8008c96:	f001 f835 	bl	8009d04 <_free_r>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6063      	str	r3, [r4, #4]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0308 	orr.w	r3, r3, #8
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	b94b      	cbnz	r3, 8008cce <__swsetup_r+0x7a>
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc4:	d003      	beq.n	8008cce <__swsetup_r+0x7a>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f002 fa09 	bl	800b0e0 <__smakebuf_r>
 8008cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd2:	f013 0201 	ands.w	r2, r3, #1
 8008cd6:	d00a      	beq.n	8008cee <__swsetup_r+0x9a>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	60a2      	str	r2, [r4, #8]
 8008cdc:	6962      	ldr	r2, [r4, #20]
 8008cde:	4252      	negs	r2, r2
 8008ce0:	61a2      	str	r2, [r4, #24]
 8008ce2:	6922      	ldr	r2, [r4, #16]
 8008ce4:	b942      	cbnz	r2, 8008cf8 <__swsetup_r+0xa4>
 8008ce6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cea:	d1c5      	bne.n	8008c78 <__swsetup_r+0x24>
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
 8008cee:	0799      	lsls	r1, r3, #30
 8008cf0:	bf58      	it	pl
 8008cf2:	6962      	ldrpl	r2, [r4, #20]
 8008cf4:	60a2      	str	r2, [r4, #8]
 8008cf6:	e7f4      	b.n	8008ce2 <__swsetup_r+0x8e>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e7f7      	b.n	8008cec <__swsetup_r+0x98>
 8008cfc:	2000002c 	.word	0x2000002c

08008d00 <memmove>:
 8008d00:	4288      	cmp	r0, r1
 8008d02:	b510      	push	{r4, lr}
 8008d04:	eb01 0402 	add.w	r4, r1, r2
 8008d08:	d902      	bls.n	8008d10 <memmove+0x10>
 8008d0a:	4284      	cmp	r4, r0
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	d807      	bhi.n	8008d20 <memmove+0x20>
 8008d10:	1e43      	subs	r3, r0, #1
 8008d12:	42a1      	cmp	r1, r4
 8008d14:	d008      	beq.n	8008d28 <memmove+0x28>
 8008d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d1e:	e7f8      	b.n	8008d12 <memmove+0x12>
 8008d20:	4402      	add	r2, r0
 8008d22:	4601      	mov	r1, r0
 8008d24:	428a      	cmp	r2, r1
 8008d26:	d100      	bne.n	8008d2a <memmove+0x2a>
 8008d28:	bd10      	pop	{r4, pc}
 8008d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d32:	e7f7      	b.n	8008d24 <memmove+0x24>

08008d34 <memset>:
 8008d34:	4402      	add	r2, r0
 8008d36:	4603      	mov	r3, r0
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d100      	bne.n	8008d3e <memset+0xa>
 8008d3c:	4770      	bx	lr
 8008d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d42:	e7f9      	b.n	8008d38 <memset+0x4>

08008d44 <strchr>:
 8008d44:	b2c9      	uxtb	r1, r1
 8008d46:	4603      	mov	r3, r0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4e:	b112      	cbz	r2, 8008d56 <strchr+0x12>
 8008d50:	428a      	cmp	r2, r1
 8008d52:	d1f9      	bne.n	8008d48 <strchr+0x4>
 8008d54:	4770      	bx	lr
 8008d56:	2900      	cmp	r1, #0
 8008d58:	bf18      	it	ne
 8008d5a:	2000      	movne	r0, #0
 8008d5c:	4770      	bx	lr

08008d5e <strcspn>:
 8008d5e:	b570      	push	{r4, r5, r6, lr}
 8008d60:	4603      	mov	r3, r0
 8008d62:	461e      	mov	r6, r3
 8008d64:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008d68:	b144      	cbz	r4, 8008d7c <strcspn+0x1e>
 8008d6a:	1e4a      	subs	r2, r1, #1
 8008d6c:	e001      	b.n	8008d72 <strcspn+0x14>
 8008d6e:	42a5      	cmp	r5, r4
 8008d70:	d004      	beq.n	8008d7c <strcspn+0x1e>
 8008d72:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	d1f9      	bne.n	8008d6e <strcspn+0x10>
 8008d7a:	e7f2      	b.n	8008d62 <strcspn+0x4>
 8008d7c:	1a30      	subs	r0, r6, r0
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <strncpy>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	3901      	subs	r1, #1
 8008d84:	4603      	mov	r3, r0
 8008d86:	b132      	cbz	r2, 8008d96 <strncpy+0x16>
 8008d88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d8c:	f803 4b01 	strb.w	r4, [r3], #1
 8008d90:	3a01      	subs	r2, #1
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	d1f7      	bne.n	8008d86 <strncpy+0x6>
 8008d96:	441a      	add	r2, r3
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d100      	bne.n	8008da0 <strncpy+0x20>
 8008d9e:	bd10      	pop	{r4, pc}
 8008da0:	f803 1b01 	strb.w	r1, [r3], #1
 8008da4:	e7f9      	b.n	8008d9a <strncpy+0x1a>
	...

08008da8 <strtok>:
 8008da8:	4b16      	ldr	r3, [pc, #88]	@ (8008e04 <strtok+0x5c>)
 8008daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dae:	681f      	ldr	r7, [r3, #0]
 8008db0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008db2:	4605      	mov	r5, r0
 8008db4:	460e      	mov	r6, r1
 8008db6:	b9ec      	cbnz	r4, 8008df4 <strtok+0x4c>
 8008db8:	2050      	movs	r0, #80	@ 0x50
 8008dba:	f001 f831 	bl	8009e20 <malloc>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008dc2:	b920      	cbnz	r0, 8008dce <strtok+0x26>
 8008dc4:	4b10      	ldr	r3, [pc, #64]	@ (8008e08 <strtok+0x60>)
 8008dc6:	4811      	ldr	r0, [pc, #68]	@ (8008e0c <strtok+0x64>)
 8008dc8:	215b      	movs	r1, #91	@ 0x5b
 8008dca:	f000 ff75 	bl	8009cb8 <__assert_func>
 8008dce:	e9c0 4400 	strd	r4, r4, [r0]
 8008dd2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008dd6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008dda:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008dde:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008de2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008de6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008dea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008dee:	6184      	str	r4, [r0, #24]
 8008df0:	7704      	strb	r4, [r0, #28]
 8008df2:	6244      	str	r4, [r0, #36]	@ 0x24
 8008df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e00:	f000 b806 	b.w	8008e10 <__strtok_r>
 8008e04:	2000002c 	.word	0x2000002c
 8008e08:	0800bc91 	.word	0x0800bc91
 8008e0c:	0800bca8 	.word	0x0800bca8

08008e10 <__strtok_r>:
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	4604      	mov	r4, r0
 8008e14:	b908      	cbnz	r0, 8008e1a <__strtok_r+0xa>
 8008e16:	6814      	ldr	r4, [r2, #0]
 8008e18:	b144      	cbz	r4, 8008e2c <__strtok_r+0x1c>
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e20:	460f      	mov	r7, r1
 8008e22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e26:	b91e      	cbnz	r6, 8008e30 <__strtok_r+0x20>
 8008e28:	b965      	cbnz	r5, 8008e44 <__strtok_r+0x34>
 8008e2a:	6015      	str	r5, [r2, #0]
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e005      	b.n	8008e3c <__strtok_r+0x2c>
 8008e30:	42b5      	cmp	r5, r6
 8008e32:	d1f6      	bne.n	8008e22 <__strtok_r+0x12>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1f0      	bne.n	8008e1a <__strtok_r+0xa>
 8008e38:	6014      	str	r4, [r2, #0]
 8008e3a:	7003      	strb	r3, [r0, #0]
 8008e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e3e:	461c      	mov	r4, r3
 8008e40:	e00c      	b.n	8008e5c <__strtok_r+0x4c>
 8008e42:	b91d      	cbnz	r5, 8008e4c <__strtok_r+0x3c>
 8008e44:	4627      	mov	r7, r4
 8008e46:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e4a:	460e      	mov	r6, r1
 8008e4c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	d1f6      	bne.n	8008e42 <__strtok_r+0x32>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0f2      	beq.n	8008e3e <__strtok_r+0x2e>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	703b      	strb	r3, [r7, #0]
 8008e5c:	6014      	str	r4, [r2, #0]
 8008e5e:	e7ed      	b.n	8008e3c <__strtok_r+0x2c>

08008e60 <strstr>:
 8008e60:	780a      	ldrb	r2, [r1, #0]
 8008e62:	b570      	push	{r4, r5, r6, lr}
 8008e64:	b96a      	cbnz	r2, 8008e82 <strstr+0x22>
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d109      	bne.n	8008e80 <strstr+0x20>
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	4605      	mov	r5, r0
 8008e70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0f6      	beq.n	8008e66 <strstr+0x6>
 8008e78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008e7c:	429e      	cmp	r6, r3
 8008e7e:	d0f7      	beq.n	8008e70 <strstr+0x10>
 8008e80:	3001      	adds	r0, #1
 8008e82:	7803      	ldrb	r3, [r0, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1ef      	bne.n	8008e68 <strstr+0x8>
 8008e88:	4618      	mov	r0, r3
 8008e8a:	e7ec      	b.n	8008e66 <strstr+0x6>

08008e8c <ctime>:
 8008e8c:	b508      	push	{r3, lr}
 8008e8e:	f000 f805 	bl	8008e9c <localtime>
 8008e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e96:	f002 ba19 	b.w	800b2cc <asctime>
	...

08008e9c <localtime>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ecc <localtime+0x30>)
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	b953      	cbnz	r3, 8008ebe <localtime+0x22>
 8008ea8:	2024      	movs	r0, #36	@ 0x24
 8008eaa:	f000 ffb9 	bl	8009e20 <malloc>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	6368      	str	r0, [r5, #52]	@ 0x34
 8008eb2:	b920      	cbnz	r0, 8008ebe <localtime+0x22>
 8008eb4:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <localtime+0x34>)
 8008eb6:	4807      	ldr	r0, [pc, #28]	@ (8008ed4 <localtime+0x38>)
 8008eb8:	2132      	movs	r1, #50	@ 0x32
 8008eba:	f000 fefd 	bl	8009cb8 <__assert_func>
 8008ebe:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ec6:	f000 b807 	b.w	8008ed8 <localtime_r>
 8008eca:	bf00      	nop
 8008ecc:	2000002c 	.word	0x2000002c
 8008ed0:	0800bc91 	.word	0x0800bc91
 8008ed4:	0800bd02 	.word	0x0800bd02

08008ed8 <localtime_r>:
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	460c      	mov	r4, r1
 8008ede:	4607      	mov	r7, r0
 8008ee0:	f002 fa3c 	bl	800b35c <__gettzinfo>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	4638      	mov	r0, r7
 8008eea:	f002 fa3b 	bl	800b364 <gmtime_r>
 8008eee:	6943      	ldr	r3, [r0, #20]
 8008ef0:	0799      	lsls	r1, r3, #30
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 8008ef8:	d106      	bne.n	8008f08 <localtime_r+0x30>
 8008efa:	2264      	movs	r2, #100	@ 0x64
 8008efc:	fb98 f3f2 	sdiv	r3, r8, r2
 8008f00:	fb02 8313 	mls	r3, r2, r3, r8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d171      	bne.n	8008fec <localtime_r+0x114>
 8008f08:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008f0c:	fb98 f3f2 	sdiv	r3, r8, r2
 8008f10:	fb02 8313 	mls	r3, r2, r3, r8
 8008f14:	fab3 f383 	clz	r3, r3
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	425e      	negs	r6, r3
 8008f1c:	4b64      	ldr	r3, [pc, #400]	@ (80090b0 <localtime_r+0x1d8>)
 8008f1e:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 8008f22:	441e      	add	r6, r3
 8008f24:	f000 fc08 	bl	8009738 <__tz_lock>
 8008f28:	f000 fc12 	bl	8009750 <_tzset_unlocked>
 8008f2c:	4b61      	ldr	r3, [pc, #388]	@ (80090b4 <localtime_r+0x1dc>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d06a      	beq.n	800900a <localtime_r+0x132>
 8008f34:	686b      	ldr	r3, [r5, #4]
 8008f36:	4543      	cmp	r3, r8
 8008f38:	d15a      	bne.n	8008ff0 <localtime_r+0x118>
 8008f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f3e:	682f      	ldr	r7, [r5, #0]
 8008f40:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	d15b      	bne.n	8009000 <localtime_r+0x128>
 8008f48:	4282      	cmp	r2, r0
 8008f4a:	eb73 0101 	sbcs.w	r1, r3, r1
 8008f4e:	db5e      	blt.n	800900e <localtime_r+0x136>
 8008f50:	2301      	movs	r3, #1
 8008f52:	6223      	str	r3, [r4, #32]
 8008f54:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008f56:	6861      	ldr	r1, [r4, #4]
 8008f58:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008f5c:	fb93 f0f2 	sdiv	r0, r3, r2
 8008f60:	fb02 3310 	mls	r3, r2, r0, r3
 8008f64:	223c      	movs	r2, #60	@ 0x3c
 8008f66:	fb93 f5f2 	sdiv	r5, r3, r2
 8008f6a:	fb02 3215 	mls	r2, r2, r5, r3
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	1a9b      	subs	r3, r3, r2
 8008f72:	68a2      	ldr	r2, [r4, #8]
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	1b49      	subs	r1, r1, r5
 8008f78:	1a12      	subs	r2, r2, r0
 8008f7a:	2b3b      	cmp	r3, #59	@ 0x3b
 8008f7c:	6061      	str	r1, [r4, #4]
 8008f7e:	60a2      	str	r2, [r4, #8]
 8008f80:	dd51      	ble.n	8009026 <localtime_r+0x14e>
 8008f82:	3101      	adds	r1, #1
 8008f84:	6061      	str	r1, [r4, #4]
 8008f86:	3b3c      	subs	r3, #60	@ 0x3c
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	2b3b      	cmp	r3, #59	@ 0x3b
 8008f8e:	dd50      	ble.n	8009032 <localtime_r+0x15a>
 8008f90:	3201      	adds	r2, #1
 8008f92:	60a2      	str	r2, [r4, #8]
 8008f94:	3b3c      	subs	r3, #60	@ 0x3c
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	2b17      	cmp	r3, #23
 8008f9c:	dd4f      	ble.n	800903e <localtime_r+0x166>
 8008f9e:	69e2      	ldr	r2, [r4, #28]
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	61e2      	str	r2, [r4, #28]
 8008fa4:	69a2      	ldr	r2, [r4, #24]
 8008fa6:	3201      	adds	r2, #1
 8008fa8:	2a07      	cmp	r2, #7
 8008faa:	bfa8      	it	ge
 8008fac:	2200      	movge	r2, #0
 8008fae:	61a2      	str	r2, [r4, #24]
 8008fb0:	68e2      	ldr	r2, [r4, #12]
 8008fb2:	3b18      	subs	r3, #24
 8008fb4:	3201      	adds	r2, #1
 8008fb6:	60a3      	str	r3, [r4, #8]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	60e2      	str	r2, [r4, #12]
 8008fbc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008fc0:	428a      	cmp	r2, r1
 8008fc2:	dd0e      	ble.n	8008fe2 <localtime_r+0x10a>
 8008fc4:	2b0b      	cmp	r3, #11
 8008fc6:	eba2 0201 	sub.w	r2, r2, r1
 8008fca:	60e2      	str	r2, [r4, #12]
 8008fcc:	f103 0201 	add.w	r2, r3, #1
 8008fd0:	bf09      	itett	eq
 8008fd2:	6963      	ldreq	r3, [r4, #20]
 8008fd4:	6122      	strne	r2, [r4, #16]
 8008fd6:	2200      	moveq	r2, #0
 8008fd8:	3301      	addeq	r3, #1
 8008fda:	bf02      	ittt	eq
 8008fdc:	6122      	streq	r2, [r4, #16]
 8008fde:	6163      	streq	r3, [r4, #20]
 8008fe0:	61e2      	streq	r2, [r4, #28]
 8008fe2:	f000 fbaf 	bl	8009744 <__tz_unlock>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fec:	2301      	movs	r3, #1
 8008fee:	e794      	b.n	8008f1a <localtime_r+0x42>
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	f000 faed 	bl	80095d0 <__tzcalc_limits>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d19f      	bne.n	8008f3a <localtime_r+0x62>
 8008ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffe:	e004      	b.n	800900a <localtime_r+0x132>
 8009000:	4282      	cmp	r2, r0
 8009002:	eb73 0101 	sbcs.w	r1, r3, r1
 8009006:	da02      	bge.n	800900e <localtime_r+0x136>
 8009008:	2300      	movs	r3, #0
 800900a:	6223      	str	r3, [r4, #32]
 800900c:	e009      	b.n	8009022 <localtime_r+0x14a>
 800900e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8009012:	4282      	cmp	r2, r0
 8009014:	418b      	sbcs	r3, r1
 8009016:	bfb4      	ite	lt
 8009018:	2301      	movlt	r3, #1
 800901a:	2300      	movge	r3, #0
 800901c:	6223      	str	r3, [r4, #32]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d198      	bne.n	8008f54 <localtime_r+0x7c>
 8009022:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009024:	e797      	b.n	8008f56 <localtime_r+0x7e>
 8009026:	2b00      	cmp	r3, #0
 8009028:	daaf      	bge.n	8008f8a <localtime_r+0xb2>
 800902a:	3901      	subs	r1, #1
 800902c:	6061      	str	r1, [r4, #4]
 800902e:	333c      	adds	r3, #60	@ 0x3c
 8009030:	e7aa      	b.n	8008f88 <localtime_r+0xb0>
 8009032:	2b00      	cmp	r3, #0
 8009034:	dab0      	bge.n	8008f98 <localtime_r+0xc0>
 8009036:	3a01      	subs	r2, #1
 8009038:	60a2      	str	r2, [r4, #8]
 800903a:	333c      	adds	r3, #60	@ 0x3c
 800903c:	e7ab      	b.n	8008f96 <localtime_r+0xbe>
 800903e:	2b00      	cmp	r3, #0
 8009040:	dacf      	bge.n	8008fe2 <localtime_r+0x10a>
 8009042:	69e2      	ldr	r2, [r4, #28]
 8009044:	3a01      	subs	r2, #1
 8009046:	61e2      	str	r2, [r4, #28]
 8009048:	69a2      	ldr	r2, [r4, #24]
 800904a:	3a01      	subs	r2, #1
 800904c:	bf48      	it	mi
 800904e:	2206      	movmi	r2, #6
 8009050:	61a2      	str	r2, [r4, #24]
 8009052:	68e2      	ldr	r2, [r4, #12]
 8009054:	3318      	adds	r3, #24
 8009056:	3a01      	subs	r2, #1
 8009058:	60e2      	str	r2, [r4, #12]
 800905a:	60a3      	str	r3, [r4, #8]
 800905c:	2a00      	cmp	r2, #0
 800905e:	d1c0      	bne.n	8008fe2 <localtime_r+0x10a>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	3b01      	subs	r3, #1
 8009064:	d405      	bmi.n	8009072 <localtime_r+0x19a>
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800906e:	60e3      	str	r3, [r4, #12]
 8009070:	e7b7      	b.n	8008fe2 <localtime_r+0x10a>
 8009072:	230b      	movs	r3, #11
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	6963      	ldr	r3, [r4, #20]
 8009078:	1e5a      	subs	r2, r3, #1
 800907a:	6162      	str	r2, [r4, #20]
 800907c:	0792      	lsls	r2, r2, #30
 800907e:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009082:	d105      	bne.n	8009090 <localtime_r+0x1b8>
 8009084:	2164      	movs	r1, #100	@ 0x64
 8009086:	fb93 f2f1 	sdiv	r2, r3, r1
 800908a:	fb01 3212 	mls	r2, r1, r2, r3
 800908e:	b962      	cbnz	r2, 80090aa <localtime_r+0x1d2>
 8009090:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009094:	fb93 f1f2 	sdiv	r1, r3, r2
 8009098:	fb02 3311 	mls	r3, r2, r1, r3
 800909c:	fab3 f383 	clz	r3, r3
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80090a6:	61e3      	str	r3, [r4, #28]
 80090a8:	e7de      	b.n	8009068 <localtime_r+0x190>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e7f9      	b.n	80090a2 <localtime_r+0x1ca>
 80090ae:	bf00      	nop
 80090b0:	0800bf0c 	.word	0x0800bf0c
 80090b4:	20005520 	.word	0x20005520

080090b8 <validate_structure>:
 80090b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ba:	6801      	ldr	r1, [r0, #0]
 80090bc:	293b      	cmp	r1, #59	@ 0x3b
 80090be:	4604      	mov	r4, r0
 80090c0:	d911      	bls.n	80090e6 <validate_structure+0x2e>
 80090c2:	223c      	movs	r2, #60	@ 0x3c
 80090c4:	4668      	mov	r0, sp
 80090c6:	f000 fe15 	bl	8009cf4 <div>
 80090ca:	9a01      	ldr	r2, [sp, #4]
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	9900      	ldr	r1, [sp, #0]
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	440b      	add	r3, r1
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	bfbb      	ittet	lt
 80090d8:	323c      	addlt	r2, #60	@ 0x3c
 80090da:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80090de:	6022      	strge	r2, [r4, #0]
 80090e0:	6022      	strlt	r2, [r4, #0]
 80090e2:	bfb8      	it	lt
 80090e4:	6063      	strlt	r3, [r4, #4]
 80090e6:	6861      	ldr	r1, [r4, #4]
 80090e8:	293b      	cmp	r1, #59	@ 0x3b
 80090ea:	d911      	bls.n	8009110 <validate_structure+0x58>
 80090ec:	223c      	movs	r2, #60	@ 0x3c
 80090ee:	4668      	mov	r0, sp
 80090f0:	f000 fe00 	bl	8009cf4 <div>
 80090f4:	9a01      	ldr	r2, [sp, #4]
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	9900      	ldr	r1, [sp, #0]
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	440b      	add	r3, r1
 80090fe:	60a3      	str	r3, [r4, #8]
 8009100:	bfbb      	ittet	lt
 8009102:	323c      	addlt	r2, #60	@ 0x3c
 8009104:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009108:	6062      	strge	r2, [r4, #4]
 800910a:	6062      	strlt	r2, [r4, #4]
 800910c:	bfb8      	it	lt
 800910e:	60a3      	strlt	r3, [r4, #8]
 8009110:	68a1      	ldr	r1, [r4, #8]
 8009112:	2917      	cmp	r1, #23
 8009114:	d911      	bls.n	800913a <validate_structure+0x82>
 8009116:	2218      	movs	r2, #24
 8009118:	4668      	mov	r0, sp
 800911a:	f000 fdeb 	bl	8009cf4 <div>
 800911e:	9a01      	ldr	r2, [sp, #4]
 8009120:	68e3      	ldr	r3, [r4, #12]
 8009122:	9900      	ldr	r1, [sp, #0]
 8009124:	2a00      	cmp	r2, #0
 8009126:	440b      	add	r3, r1
 8009128:	60e3      	str	r3, [r4, #12]
 800912a:	bfbb      	ittet	lt
 800912c:	3218      	addlt	r2, #24
 800912e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009132:	60a2      	strge	r2, [r4, #8]
 8009134:	60a2      	strlt	r2, [r4, #8]
 8009136:	bfb8      	it	lt
 8009138:	60e3      	strlt	r3, [r4, #12]
 800913a:	6921      	ldr	r1, [r4, #16]
 800913c:	290b      	cmp	r1, #11
 800913e:	d911      	bls.n	8009164 <validate_structure+0xac>
 8009140:	220c      	movs	r2, #12
 8009142:	4668      	mov	r0, sp
 8009144:	f000 fdd6 	bl	8009cf4 <div>
 8009148:	9a01      	ldr	r2, [sp, #4]
 800914a:	6963      	ldr	r3, [r4, #20]
 800914c:	9900      	ldr	r1, [sp, #0]
 800914e:	2a00      	cmp	r2, #0
 8009150:	440b      	add	r3, r1
 8009152:	6163      	str	r3, [r4, #20]
 8009154:	bfbb      	ittet	lt
 8009156:	320c      	addlt	r2, #12
 8009158:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800915c:	6122      	strge	r2, [r4, #16]
 800915e:	6122      	strlt	r2, [r4, #16]
 8009160:	bfb8      	it	lt
 8009162:	6163      	strlt	r3, [r4, #20]
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	079a      	lsls	r2, r3, #30
 8009168:	d11c      	bne.n	80091a4 <validate_structure+0xec>
 800916a:	2164      	movs	r1, #100	@ 0x64
 800916c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009170:	fb01 3212 	mls	r2, r1, r2, r3
 8009174:	b9c2      	cbnz	r2, 80091a8 <validate_structure+0xf0>
 8009176:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800917a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800917e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009182:	fb02 3311 	mls	r3, r2, r1, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	bf0c      	ite	eq
 800918a:	231d      	moveq	r3, #29
 800918c:	231c      	movne	r3, #28
 800918e:	68e2      	ldr	r2, [r4, #12]
 8009190:	2a00      	cmp	r2, #0
 8009192:	dc0b      	bgt.n	80091ac <validate_structure+0xf4>
 8009194:	4d31      	ldr	r5, [pc, #196]	@ (800925c <validate_structure+0x1a4>)
 8009196:	200b      	movs	r0, #11
 8009198:	2164      	movs	r1, #100	@ 0x64
 800919a:	68e6      	ldr	r6, [r4, #12]
 800919c:	2e00      	cmp	r6, #0
 800919e:	dd30      	ble.n	8009202 <validate_structure+0x14a>
 80091a0:	b003      	add	sp, #12
 80091a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a4:	231c      	movs	r3, #28
 80091a6:	e7f2      	b.n	800918e <validate_structure+0xd6>
 80091a8:	231d      	movs	r3, #29
 80091aa:	e7f0      	b.n	800918e <validate_structure+0xd6>
 80091ac:	4d2b      	ldr	r5, [pc, #172]	@ (800925c <validate_structure+0x1a4>)
 80091ae:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80091b2:	2a01      	cmp	r2, #1
 80091b4:	bf14      	ite	ne
 80091b6:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80091ba:	4618      	moveq	r0, r3
 80091bc:	4281      	cmp	r1, r0
 80091be:	ddef      	ble.n	80091a0 <validate_structure+0xe8>
 80091c0:	3201      	adds	r2, #1
 80091c2:	1a09      	subs	r1, r1, r0
 80091c4:	2a0c      	cmp	r2, #12
 80091c6:	60e1      	str	r1, [r4, #12]
 80091c8:	6122      	str	r2, [r4, #16]
 80091ca:	d1f0      	bne.n	80091ae <validate_structure+0xf6>
 80091cc:	6963      	ldr	r3, [r4, #20]
 80091ce:	2100      	movs	r1, #0
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	6121      	str	r1, [r4, #16]
 80091d4:	0791      	lsls	r1, r2, #30
 80091d6:	6162      	str	r2, [r4, #20]
 80091d8:	d13c      	bne.n	8009254 <validate_structure+0x19c>
 80091da:	2164      	movs	r1, #100	@ 0x64
 80091dc:	fb92 f0f1 	sdiv	r0, r2, r1
 80091e0:	fb01 2210 	mls	r2, r1, r0, r2
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	d137      	bne.n	8009258 <validate_structure+0x1a0>
 80091e8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80091ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80091f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80091f4:	fb02 3311 	mls	r3, r2, r1, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bf0c      	ite	eq
 80091fc:	231d      	moveq	r3, #29
 80091fe:	231c      	movne	r3, #28
 8009200:	e7d5      	b.n	80091ae <validate_structure+0xf6>
 8009202:	6922      	ldr	r2, [r4, #16]
 8009204:	3a01      	subs	r2, #1
 8009206:	6122      	str	r2, [r4, #16]
 8009208:	3201      	adds	r2, #1
 800920a:	d116      	bne.n	800923a <validate_structure+0x182>
 800920c:	6963      	ldr	r3, [r4, #20]
 800920e:	1e5a      	subs	r2, r3, #1
 8009210:	0797      	lsls	r7, r2, #30
 8009212:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8009216:	d119      	bne.n	800924c <validate_structure+0x194>
 8009218:	fb92 f7f1 	sdiv	r7, r2, r1
 800921c:	fb01 2217 	mls	r2, r1, r7, r2
 8009220:	b9b2      	cbnz	r2, 8009250 <validate_structure+0x198>
 8009222:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009226:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800922a:	fb93 f7f2 	sdiv	r7, r3, r2
 800922e:	fb02 3317 	mls	r3, r2, r7, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	bf0c      	ite	eq
 8009236:	231d      	moveq	r3, #29
 8009238:	231c      	movne	r3, #28
 800923a:	6922      	ldr	r2, [r4, #16]
 800923c:	2a01      	cmp	r2, #1
 800923e:	bf14      	ite	ne
 8009240:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8009244:	461a      	moveq	r2, r3
 8009246:	4432      	add	r2, r6
 8009248:	60e2      	str	r2, [r4, #12]
 800924a:	e7a6      	b.n	800919a <validate_structure+0xe2>
 800924c:	231c      	movs	r3, #28
 800924e:	e7f4      	b.n	800923a <validate_structure+0x182>
 8009250:	231d      	movs	r3, #29
 8009252:	e7f2      	b.n	800923a <validate_structure+0x182>
 8009254:	231c      	movs	r3, #28
 8009256:	e7aa      	b.n	80091ae <validate_structure+0xf6>
 8009258:	231d      	movs	r3, #29
 800925a:	e7a8      	b.n	80091ae <validate_structure+0xf6>
 800925c:	0800bedc 	.word	0x0800bedc

08009260 <mktime>:
 8009260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	b085      	sub	sp, #20
 8009266:	4607      	mov	r7, r0
 8009268:	f002 f878 	bl	800b35c <__gettzinfo>
 800926c:	4681      	mov	r9, r0
 800926e:	4638      	mov	r0, r7
 8009270:	f7ff ff22 	bl	80090b8 <validate_structure>
 8009274:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009278:	223c      	movs	r2, #60	@ 0x3c
 800927a:	fb02 4403 	mla	r4, r2, r3, r4
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	697d      	ldr	r5, [r7, #20]
 8009282:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009286:	fb02 4403 	mla	r4, r2, r3, r4
 800928a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800928e:	4ac3      	ldr	r2, [pc, #780]	@ (800959c <mktime+0x33c>)
 8009290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009294:	3e01      	subs	r6, #1
 8009296:	2b01      	cmp	r3, #1
 8009298:	4416      	add	r6, r2
 800929a:	dd11      	ble.n	80092c0 <mktime+0x60>
 800929c:	07a9      	lsls	r1, r5, #30
 800929e:	d10f      	bne.n	80092c0 <mktime+0x60>
 80092a0:	2264      	movs	r2, #100	@ 0x64
 80092a2:	fb95 f3f2 	sdiv	r3, r5, r2
 80092a6:	fb02 5313 	mls	r3, r2, r3, r5
 80092aa:	b943      	cbnz	r3, 80092be <mktime+0x5e>
 80092ac:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80092b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80092b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80092b8:	fb02 3311 	mls	r3, r2, r1, r3
 80092bc:	b903      	cbnz	r3, 80092c0 <mktime+0x60>
 80092be:	3601      	adds	r6, #1
 80092c0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80092c4:	3310      	adds	r3, #16
 80092c6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80092ca:	4293      	cmp	r3, r2
 80092cc:	61fe      	str	r6, [r7, #28]
 80092ce:	f200 8170 	bhi.w	80095b2 <mktime+0x352>
 80092d2:	2d46      	cmp	r5, #70	@ 0x46
 80092d4:	f340 80b6 	ble.w	8009444 <mktime+0x1e4>
 80092d8:	2346      	movs	r3, #70	@ 0x46
 80092da:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80092de:	2164      	movs	r1, #100	@ 0x64
 80092e0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80092e4:	079a      	lsls	r2, r3, #30
 80092e6:	f040 80a7 	bne.w	8009438 <mktime+0x1d8>
 80092ea:	fb93 f2f1 	sdiv	r2, r3, r1
 80092ee:	fb01 3212 	mls	r2, r1, r2, r3
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	f040 80a3 	bne.w	800943e <mktime+0x1de>
 80092f8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80092fc:	fb92 fef0 	sdiv	lr, r2, r0
 8009300:	fb00 221e 	mls	r2, r0, lr, r2
 8009304:	2a00      	cmp	r2, #0
 8009306:	bf0c      	ite	eq
 8009308:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800930c:	4662      	movne	r2, ip
 800930e:	3301      	adds	r3, #1
 8009310:	429d      	cmp	r5, r3
 8009312:	4416      	add	r6, r2
 8009314:	d1e6      	bne.n	80092e4 <mktime+0x84>
 8009316:	4ba2      	ldr	r3, [pc, #648]	@ (80095a0 <mktime+0x340>)
 8009318:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800931c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8009320:	f000 fa0a 	bl	8009738 <__tz_lock>
 8009324:	f000 fa14 	bl	8009750 <_tzset_unlocked>
 8009328:	4b9e      	ldr	r3, [pc, #632]	@ (80095a4 <mktime+0x344>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8147 	beq.w	80095c0 <mktime+0x360>
 8009332:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8009336:	6978      	ldr	r0, [r7, #20]
 8009338:	4653      	mov	r3, sl
 800933a:	2b01      	cmp	r3, #1
 800933c:	bfa8      	it	ge
 800933e:	2301      	movge	r3, #1
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009346:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800934a:	4283      	cmp	r3, r0
 800934c:	f040 80bd 	bne.w	80094ca <mktime+0x26a>
 8009350:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8009354:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8009358:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800935c:	1a13      	subs	r3, r2, r0
 800935e:	9303      	str	r3, [sp, #12]
 8009360:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8009364:	9302      	str	r3, [sp, #8]
 8009366:	9a02      	ldr	r2, [sp, #8]
 8009368:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800936c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8009370:	ebb2 0e03 	subs.w	lr, r2, r3
 8009374:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8009378:	4574      	cmp	r4, lr
 800937a:	eb78 0201 	sbcs.w	r2, r8, r1
 800937e:	f280 80c7 	bge.w	8009510 <mktime+0x2b0>
 8009382:	f8d9 2000 	ldr.w	r2, [r9]
 8009386:	2a00      	cmp	r2, #0
 8009388:	f000 80d0 	beq.w	800952c <mktime+0x2cc>
 800938c:	9a03      	ldr	r2, [sp, #12]
 800938e:	4294      	cmp	r4, r2
 8009390:	eb78 020b 	sbcs.w	r2, r8, fp
 8009394:	f2c0 8111 	blt.w	80095ba <mktime+0x35a>
 8009398:	4574      	cmp	r4, lr
 800939a:	eb78 0101 	sbcs.w	r1, r8, r1
 800939e:	bfb4      	ite	lt
 80093a0:	f04f 0b01 	movlt.w	fp, #1
 80093a4:	f04f 0b00 	movge.w	fp, #0
 80093a8:	f1ba 0f00 	cmp.w	sl, #0
 80093ac:	f2c0 8094 	blt.w	80094d8 <mktime+0x278>
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	ea82 0a0b 	eor.w	sl, r2, fp
 80093b6:	f1ba 0f01 	cmp.w	sl, #1
 80093ba:	f040 808d 	bne.w	80094d8 <mktime+0x278>
 80093be:	f1bb 0f00 	cmp.w	fp, #0
 80093c2:	f000 80c2 	beq.w	800954a <mktime+0x2ea>
 80093c6:	1a1b      	subs	r3, r3, r0
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	441a      	add	r2, r3
 80093cc:	191c      	adds	r4, r3, r4
 80093ce:	603a      	str	r2, [r7, #0]
 80093d0:	4638      	mov	r0, r7
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	9201      	str	r2, [sp, #4]
 80093d6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80093da:	f7ff fe6d 	bl	80090b8 <validate_structure>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	9a01      	ldr	r2, [sp, #4]
 80093e2:	1a9b      	subs	r3, r3, r2
 80093e4:	d078      	beq.n	80094d8 <mktime+0x278>
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	f300 80b1 	bgt.w	800954e <mktime+0x2ee>
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	bfa8      	it	ge
 80093f2:	469a      	movge	sl, r3
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	eb1a 0303 	adds.w	r3, sl, r3
 80093fa:	4456      	add	r6, sl
 80093fc:	f140 80b0 	bpl.w	8009560 <mktime+0x300>
 8009400:	1e6b      	subs	r3, r5, #1
 8009402:	0799      	lsls	r1, r3, #30
 8009404:	f040 80a6 	bne.w	8009554 <mktime+0x2f4>
 8009408:	2264      	movs	r2, #100	@ 0x64
 800940a:	fb93 f1f2 	sdiv	r1, r3, r2
 800940e:	fb02 3311 	mls	r3, r2, r1, r3
 8009412:	2b00      	cmp	r3, #0
 8009414:	f040 80a1 	bne.w	800955a <mktime+0x2fa>
 8009418:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800941c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8009420:	fb95 f2f3 	sdiv	r2, r5, r3
 8009424:	fb03 5512 	mls	r5, r3, r2, r5
 8009428:	2d00      	cmp	r5, #0
 800942a:	f240 136d 	movw	r3, #365	@ 0x16d
 800942e:	bf18      	it	ne
 8009430:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	e04f      	b.n	80094d8 <mktime+0x278>
 8009438:	f240 126d 	movw	r2, #365	@ 0x16d
 800943c:	e767      	b.n	800930e <mktime+0xae>
 800943e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009442:	e764      	b.n	800930e <mktime+0xae>
 8009444:	f43f af67 	beq.w	8009316 <mktime+0xb6>
 8009448:	2345      	movs	r3, #69	@ 0x45
 800944a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800944e:	2164      	movs	r1, #100	@ 0x64
 8009450:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009454:	e012      	b.n	800947c <mktime+0x21c>
 8009456:	bb62      	cbnz	r2, 80094b2 <mktime+0x252>
 8009458:	fb93 f2f1 	sdiv	r2, r3, r1
 800945c:	fb01 3212 	mls	r2, r1, r2, r3
 8009460:	bb52      	cbnz	r2, 80094b8 <mktime+0x258>
 8009462:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009466:	fb92 fef0 	sdiv	lr, r2, r0
 800946a:	fb00 221e 	mls	r2, r0, lr, r2
 800946e:	2a00      	cmp	r2, #0
 8009470:	bf0c      	ite	eq
 8009472:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009476:	4662      	movne	r2, ip
 8009478:	1ab6      	subs	r6, r6, r2
 800947a:	3b01      	subs	r3, #1
 800947c:	429d      	cmp	r5, r3
 800947e:	f003 0203 	and.w	r2, r3, #3
 8009482:	dbe8      	blt.n	8009456 <mktime+0x1f6>
 8009484:	b9da      	cbnz	r2, 80094be <mktime+0x25e>
 8009486:	2264      	movs	r2, #100	@ 0x64
 8009488:	fb95 f3f2 	sdiv	r3, r5, r2
 800948c:	fb02 5313 	mls	r3, r2, r3, r5
 8009490:	b9c3      	cbnz	r3, 80094c4 <mktime+0x264>
 8009492:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009496:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800949a:	fb93 f1f2 	sdiv	r1, r3, r2
 800949e:	fb02 3311 	mls	r3, r2, r1, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f240 136d 	movw	r3, #365	@ 0x16d
 80094a8:	bf08      	it	eq
 80094aa:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 80094ae:	1af6      	subs	r6, r6, r3
 80094b0:	e731      	b.n	8009316 <mktime+0xb6>
 80094b2:	f240 126d 	movw	r2, #365	@ 0x16d
 80094b6:	e7df      	b.n	8009478 <mktime+0x218>
 80094b8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80094bc:	e7dc      	b.n	8009478 <mktime+0x218>
 80094be:	f240 136d 	movw	r3, #365	@ 0x16d
 80094c2:	e7f4      	b.n	80094ae <mktime+0x24e>
 80094c4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80094c8:	e7f1      	b.n	80094ae <mktime+0x24e>
 80094ca:	f000 f881 	bl	80095d0 <__tzcalc_limits>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f47f af3e 	bne.w	8009350 <mktime+0xf0>
 80094d4:	f8dd b004 	ldr.w	fp, [sp, #4]
 80094d8:	f1bb 0f01 	cmp.w	fp, #1
 80094dc:	d172      	bne.n	80095c4 <mktime+0x364>
 80094de:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80094e2:	191c      	adds	r4, r3, r4
 80094e4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80094e8:	f04f 0b01 	mov.w	fp, #1
 80094ec:	f000 f92a 	bl	8009744 <__tz_unlock>
 80094f0:	3604      	adds	r6, #4
 80094f2:	2307      	movs	r3, #7
 80094f4:	fb96 f3f3 	sdiv	r3, r6, r3
 80094f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80094fc:	1af6      	subs	r6, r6, r3
 80094fe:	d456      	bmi.n	80095ae <mktime+0x34e>
 8009500:	f8c7 b020 	str.w	fp, [r7, #32]
 8009504:	61be      	str	r6, [r7, #24]
 8009506:	4620      	mov	r0, r4
 8009508:	4641      	mov	r1, r8
 800950a:	b005      	add	sp, #20
 800950c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	9a02      	ldr	r2, [sp, #8]
 8009512:	1a12      	subs	r2, r2, r0
 8009514:	9202      	str	r2, [sp, #8]
 8009516:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800951a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800951e:	9a02      	ldr	r2, [sp, #8]
 8009520:	4294      	cmp	r4, r2
 8009522:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8009526:	f6bf af2c 	bge.w	8009382 <mktime+0x122>
 800952a:	e7d3      	b.n	80094d4 <mktime+0x274>
 800952c:	9a03      	ldr	r2, [sp, #12]
 800952e:	4294      	cmp	r4, r2
 8009530:	eb78 020b 	sbcs.w	r2, r8, fp
 8009534:	f6ff af30 	blt.w	8009398 <mktime+0x138>
 8009538:	f1ba 0f00 	cmp.w	sl, #0
 800953c:	dbcf      	blt.n	80094de <mktime+0x27e>
 800953e:	f04f 0b01 	mov.w	fp, #1
 8009542:	e735      	b.n	80093b0 <mktime+0x150>
 8009544:	f04f 0b00 	mov.w	fp, #0
 8009548:	e732      	b.n	80093b0 <mktime+0x150>
 800954a:	1ac3      	subs	r3, r0, r3
 800954c:	e73c      	b.n	80093c8 <mktime+0x168>
 800954e:	f04f 3aff 	mov.w	sl, #4294967295
 8009552:	e74f      	b.n	80093f4 <mktime+0x194>
 8009554:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8009558:	e76c      	b.n	8009434 <mktime+0x1d4>
 800955a:	f240 136d 	movw	r3, #365	@ 0x16d
 800955e:	e769      	b.n	8009434 <mktime+0x1d4>
 8009560:	07aa      	lsls	r2, r5, #30
 8009562:	d117      	bne.n	8009594 <mktime+0x334>
 8009564:	2164      	movs	r1, #100	@ 0x64
 8009566:	fb95 f2f1 	sdiv	r2, r5, r1
 800956a:	fb01 5212 	mls	r2, r1, r2, r5
 800956e:	b9da      	cbnz	r2, 80095a8 <mktime+0x348>
 8009570:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009574:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8009578:	fb95 f1f2 	sdiv	r1, r5, r2
 800957c:	fb02 5511 	mls	r5, r2, r1, r5
 8009580:	2d00      	cmp	r5, #0
 8009582:	f240 126d 	movw	r2, #365	@ 0x16d
 8009586:	bf08      	it	eq
 8009588:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800958c:	4293      	cmp	r3, r2
 800958e:	bfa8      	it	ge
 8009590:	1a9b      	subge	r3, r3, r2
 8009592:	e74f      	b.n	8009434 <mktime+0x1d4>
 8009594:	f240 126d 	movw	r2, #365	@ 0x16d
 8009598:	e7f8      	b.n	800958c <mktime+0x32c>
 800959a:	bf00      	nop
 800959c:	0800beac 	.word	0x0800beac
 80095a0:	00015180 	.word	0x00015180
 80095a4:	20005520 	.word	0x20005520
 80095a8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80095ac:	e7ee      	b.n	800958c <mktime+0x32c>
 80095ae:	3607      	adds	r6, #7
 80095b0:	e7a6      	b.n	8009500 <mktime+0x2a0>
 80095b2:	f04f 34ff 	mov.w	r4, #4294967295
 80095b6:	46a0      	mov	r8, r4
 80095b8:	e7a5      	b.n	8009506 <mktime+0x2a6>
 80095ba:	f1ba 0f00 	cmp.w	sl, #0
 80095be:	dac1      	bge.n	8009544 <mktime+0x2e4>
 80095c0:	f04f 0b00 	mov.w	fp, #0
 80095c4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80095c8:	191c      	adds	r4, r3, r4
 80095ca:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80095ce:	e78d      	b.n	80094ec <mktime+0x28c>

080095d0 <__tzcalc_limits>:
 80095d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	f001 fec1 	bl	800b35c <__gettzinfo>
 80095da:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80095de:	429c      	cmp	r4, r3
 80095e0:	f340 80a3 	ble.w	800972a <__tzcalc_limits+0x15a>
 80095e4:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 80095e8:	1865      	adds	r5, r4, r1
 80095ea:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80095ee:	f240 126d 	movw	r2, #365	@ 0x16d
 80095f2:	10ad      	asrs	r5, r5, #2
 80095f4:	fb02 5503 	mla	r5, r2, r3, r5
 80095f8:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 80095fc:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8009600:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8009604:	fb93 f3f2 	sdiv	r3, r3, r2
 8009608:	441d      	add	r5, r3
 800960a:	19a3      	adds	r3, r4, r6
 800960c:	4e48      	ldr	r6, [pc, #288]	@ (8009730 <__tzcalc_limits+0x160>)
 800960e:	6044      	str	r4, [r0, #4]
 8009610:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009614:	4601      	mov	r1, r0
 8009616:	fbb3 f3f2 	udiv	r3, r3, r2
 800961a:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800961e:	441d      	add	r5, r3
 8009620:	7a0b      	ldrb	r3, [r1, #8]
 8009622:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8009626:	2b4a      	cmp	r3, #74	@ 0x4a
 8009628:	d138      	bne.n	800969c <__tzcalc_limits+0xcc>
 800962a:	07a2      	lsls	r2, r4, #30
 800962c:	eb05 030c 	add.w	r3, r5, ip
 8009630:	d106      	bne.n	8009640 <__tzcalc_limits+0x70>
 8009632:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8009636:	fb94 f2fe 	sdiv	r2, r4, lr
 800963a:	fb0e 4212 	mls	r2, lr, r2, r4
 800963e:	b932      	cbnz	r2, 800964e <__tzcalc_limits+0x7e>
 8009640:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8009644:	fb94 f2fe 	sdiv	r2, r4, lr
 8009648:	fb0e 4212 	mls	r2, lr, r2, r4
 800964c:	bb1a      	cbnz	r2, 8009696 <__tzcalc_limits+0xc6>
 800964e:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8009652:	bfd4      	ite	le
 8009654:	f04f 0c00 	movle.w	ip, #0
 8009658:	f04f 0c01 	movgt.w	ip, #1
 800965c:	4463      	add	r3, ip
 800965e:	3b01      	subs	r3, #1
 8009660:	698a      	ldr	r2, [r1, #24]
 8009662:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009666:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800966a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800966c:	18d2      	adds	r2, r2, r3
 800966e:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 8009672:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8009676:	3128      	adds	r1, #40	@ 0x28
 8009678:	428f      	cmp	r7, r1
 800967a:	d1d1      	bne.n	8009620 <__tzcalc_limits+0x50>
 800967c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8009680:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8009684:	428c      	cmp	r4, r1
 8009686:	4193      	sbcs	r3, r2
 8009688:	bfb4      	ite	lt
 800968a:	2301      	movlt	r3, #1
 800968c:	2300      	movge	r3, #0
 800968e:	6003      	str	r3, [r0, #0]
 8009690:	2001      	movs	r0, #1
 8009692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009696:	f04f 0c00 	mov.w	ip, #0
 800969a:	e7df      	b.n	800965c <__tzcalc_limits+0x8c>
 800969c:	2b44      	cmp	r3, #68	@ 0x44
 800969e:	d102      	bne.n	80096a6 <__tzcalc_limits+0xd6>
 80096a0:	eb05 030c 	add.w	r3, r5, ip
 80096a4:	e7dc      	b.n	8009660 <__tzcalc_limits+0x90>
 80096a6:	07a3      	lsls	r3, r4, #30
 80096a8:	d105      	bne.n	80096b6 <__tzcalc_limits+0xe6>
 80096aa:	2264      	movs	r2, #100	@ 0x64
 80096ac:	fb94 f3f2 	sdiv	r3, r4, r2
 80096b0:	fb02 4313 	mls	r3, r2, r3, r4
 80096b4:	bb93      	cbnz	r3, 800971c <__tzcalc_limits+0x14c>
 80096b6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80096ba:	fb94 f3f2 	sdiv	r3, r4, r2
 80096be:	fb02 4313 	mls	r3, r2, r3, r4
 80096c2:	fab3 f383 	clz	r3, r3
 80096c6:	095b      	lsrs	r3, r3, #5
 80096c8:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8009734 <__tzcalc_limits+0x164>
 80096cc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80096d0:	425b      	negs	r3, r3
 80096d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80096d6:	462a      	mov	r2, r5
 80096d8:	f04f 0800 	mov.w	r8, #0
 80096dc:	4473      	add	r3, lr
 80096de:	f108 0801 	add.w	r8, r8, #1
 80096e2:	45c1      	cmp	r9, r8
 80096e4:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 80096e8:	dc1a      	bgt.n	8009720 <__tzcalc_limits+0x150>
 80096ea:	f102 0804 	add.w	r8, r2, #4
 80096ee:	2307      	movs	r3, #7
 80096f0:	fb98 f3f3 	sdiv	r3, r8, r3
 80096f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096f8:	eba8 0303 	sub.w	r3, r8, r3
 80096fc:	ebbc 0c03 	subs.w	ip, ip, r3
 8009700:	690b      	ldr	r3, [r1, #16]
 8009702:	f103 33ff 	add.w	r3, r3, #4294967295
 8009706:	bf48      	it	mi
 8009708:	f10c 0c07 	addmi.w	ip, ip, #7
 800970c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009710:	449c      	add	ip, r3
 8009712:	45f4      	cmp	ip, lr
 8009714:	da06      	bge.n	8009724 <__tzcalc_limits+0x154>
 8009716:	eb02 030c 	add.w	r3, r2, ip
 800971a:	e7a1      	b.n	8009660 <__tzcalc_limits+0x90>
 800971c:	2301      	movs	r3, #1
 800971e:	e7d3      	b.n	80096c8 <__tzcalc_limits+0xf8>
 8009720:	4472      	add	r2, lr
 8009722:	e7dc      	b.n	80096de <__tzcalc_limits+0x10e>
 8009724:	f1ac 0c07 	sub.w	ip, ip, #7
 8009728:	e7f3      	b.n	8009712 <__tzcalc_limits+0x142>
 800972a:	2000      	movs	r0, #0
 800972c:	e7b1      	b.n	8009692 <__tzcalc_limits+0xc2>
 800972e:	bf00      	nop
 8009730:	00015180 	.word	0x00015180
 8009734:	0800bf08 	.word	0x0800bf08

08009738 <__tz_lock>:
 8009738:	4801      	ldr	r0, [pc, #4]	@ (8009740 <__tz_lock+0x8>)
 800973a:	f000 baa2 	b.w	8009c82 <__retarget_lock_acquire>
 800973e:	bf00      	nop
 8009740:	20005528 	.word	0x20005528

08009744 <__tz_unlock>:
 8009744:	4801      	ldr	r0, [pc, #4]	@ (800974c <__tz_unlock+0x8>)
 8009746:	f000 ba9e 	b.w	8009c86 <__retarget_lock_release>
 800974a:	bf00      	nop
 800974c:	20005528 	.word	0x20005528

08009750 <_tzset_unlocked>:
 8009750:	4b01      	ldr	r3, [pc, #4]	@ (8009758 <_tzset_unlocked+0x8>)
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	f000 b802 	b.w	800975c <_tzset_unlocked_r>
 8009758:	2000002c 	.word	0x2000002c

0800975c <_tzset_unlocked_r>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	b08d      	sub	sp, #52	@ 0x34
 8009762:	4607      	mov	r7, r0
 8009764:	f001 fdfa 	bl	800b35c <__gettzinfo>
 8009768:	49bc      	ldr	r1, [pc, #752]	@ (8009a5c <_tzset_unlocked_r+0x300>)
 800976a:	4dbd      	ldr	r5, [pc, #756]	@ (8009a60 <_tzset_unlocked_r+0x304>)
 800976c:	4604      	mov	r4, r0
 800976e:	4638      	mov	r0, r7
 8009770:	f000 fb4e 	bl	8009e10 <_getenv_r>
 8009774:	4606      	mov	r6, r0
 8009776:	bb10      	cbnz	r0, 80097be <_tzset_unlocked_r+0x62>
 8009778:	4bba      	ldr	r3, [pc, #744]	@ (8009a64 <_tzset_unlocked_r+0x308>)
 800977a:	4abb      	ldr	r2, [pc, #748]	@ (8009a68 <_tzset_unlocked_r+0x30c>)
 800977c:	6018      	str	r0, [r3, #0]
 800977e:	4bbb      	ldr	r3, [pc, #748]	@ (8009a6c <_tzset_unlocked_r+0x310>)
 8009780:	62a0      	str	r0, [r4, #40]	@ 0x28
 8009782:	6018      	str	r0, [r3, #0]
 8009784:	4bba      	ldr	r3, [pc, #744]	@ (8009a70 <_tzset_unlocked_r+0x314>)
 8009786:	6520      	str	r0, [r4, #80]	@ 0x50
 8009788:	e9c3 2200 	strd	r2, r2, [r3]
 800978c:	214a      	movs	r1, #74	@ 0x4a
 800978e:	2200      	movs	r2, #0
 8009790:	2300      	movs	r3, #0
 8009792:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8009796:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800979a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800979e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80097a2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80097a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80097aa:	6828      	ldr	r0, [r5, #0]
 80097ac:	7221      	strb	r1, [r4, #8]
 80097ae:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80097b2:	f000 fb3d 	bl	8009e30 <free>
 80097b6:	602e      	str	r6, [r5, #0]
 80097b8:	b00d      	add	sp, #52	@ 0x34
 80097ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097be:	6829      	ldr	r1, [r5, #0]
 80097c0:	2900      	cmp	r1, #0
 80097c2:	f040 808e 	bne.w	80098e2 <_tzset_unlocked_r+0x186>
 80097c6:	6828      	ldr	r0, [r5, #0]
 80097c8:	f000 fb32 	bl	8009e30 <free>
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7f6 fd11 	bl	80001f4 <strlen>
 80097d2:	1c41      	adds	r1, r0, #1
 80097d4:	4638      	mov	r0, r7
 80097d6:	f000 fb55 	bl	8009e84 <_malloc_r>
 80097da:	6028      	str	r0, [r5, #0]
 80097dc:	2800      	cmp	r0, #0
 80097de:	f040 8086 	bne.w	80098ee <_tzset_unlocked_r+0x192>
 80097e2:	4aa2      	ldr	r2, [pc, #648]	@ (8009a6c <_tzset_unlocked_r+0x310>)
 80097e4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8009a70 <_tzset_unlocked_r+0x314>
 80097e8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8009a64 <_tzset_unlocked_r+0x308>
 80097ec:	2300      	movs	r3, #0
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	4aa0      	ldr	r2, [pc, #640]	@ (8009a74 <_tzset_unlocked_r+0x318>)
 80097f2:	f8ca 3000 	str.w	r3, [sl]
 80097f6:	2000      	movs	r0, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	e9c8 2200 	strd	r2, r2, [r8]
 80097fe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8009802:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8009806:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800980a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800980e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8009812:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8009816:	224a      	movs	r2, #74	@ 0x4a
 8009818:	7222      	strb	r2, [r4, #8]
 800981a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800981c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8009820:	6523      	str	r3, [r4, #80]	@ 0x50
 8009822:	7833      	ldrb	r3, [r6, #0]
 8009824:	2b3a      	cmp	r3, #58	@ 0x3a
 8009826:	bf08      	it	eq
 8009828:	3601      	addeq	r6, #1
 800982a:	7833      	ldrb	r3, [r6, #0]
 800982c:	2b3c      	cmp	r3, #60	@ 0x3c
 800982e:	d162      	bne.n	80098f6 <_tzset_unlocked_r+0x19a>
 8009830:	1c75      	adds	r5, r6, #1
 8009832:	4a91      	ldr	r2, [pc, #580]	@ (8009a78 <_tzset_unlocked_r+0x31c>)
 8009834:	4991      	ldr	r1, [pc, #580]	@ (8009a7c <_tzset_unlocked_r+0x320>)
 8009836:	ab0a      	add	r3, sp, #40	@ 0x28
 8009838:	4628      	mov	r0, r5
 800983a:	f7ff f95b 	bl	8008af4 <siscanf>
 800983e:	2800      	cmp	r0, #0
 8009840:	ddba      	ble.n	80097b8 <_tzset_unlocked_r+0x5c>
 8009842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009844:	1eda      	subs	r2, r3, #3
 8009846:	2a07      	cmp	r2, #7
 8009848:	d8b6      	bhi.n	80097b8 <_tzset_unlocked_r+0x5c>
 800984a:	5ceb      	ldrb	r3, [r5, r3]
 800984c:	2b3e      	cmp	r3, #62	@ 0x3e
 800984e:	d1b3      	bne.n	80097b8 <_tzset_unlocked_r+0x5c>
 8009850:	3602      	adds	r6, #2
 8009852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009854:	18f5      	adds	r5, r6, r3
 8009856:	5cf3      	ldrb	r3, [r6, r3]
 8009858:	2b2d      	cmp	r3, #45	@ 0x2d
 800985a:	d15a      	bne.n	8009912 <_tzset_unlocked_r+0x1b6>
 800985c:	3501      	adds	r5, #1
 800985e:	f04f 39ff 	mov.w	r9, #4294967295
 8009862:	2300      	movs	r3, #0
 8009864:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009868:	f8ad 3020 	strh.w	r3, [sp, #32]
 800986c:	af08      	add	r7, sp, #32
 800986e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009870:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8009874:	9303      	str	r3, [sp, #12]
 8009876:	f10d 031e 	add.w	r3, sp, #30
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4980      	ldr	r1, [pc, #512]	@ (8009a80 <_tzset_unlocked_r+0x324>)
 800987e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009880:	aa07      	add	r2, sp, #28
 8009882:	4628      	mov	r0, r5
 8009884:	f7ff f936 	bl	8008af4 <siscanf>
 8009888:	2800      	cmp	r0, #0
 800988a:	dd95      	ble.n	80097b8 <_tzset_unlocked_r+0x5c>
 800988c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009890:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8009894:	223c      	movs	r2, #60	@ 0x3c
 8009896:	fb02 6603 	mla	r6, r2, r3, r6
 800989a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800989e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80098a2:	fb02 6603 	mla	r6, r2, r3, r6
 80098a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098a8:	fb09 f606 	mul.w	r6, r9, r6
 80098ac:	eb05 0903 	add.w	r9, r5, r3
 80098b0:	5ceb      	ldrb	r3, [r5, r3]
 80098b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80098b4:	f040 80ee 	bne.w	8009a94 <_tzset_unlocked_r+0x338>
 80098b8:	f109 0501 	add.w	r5, r9, #1
 80098bc:	4a71      	ldr	r2, [pc, #452]	@ (8009a84 <_tzset_unlocked_r+0x328>)
 80098be:	496f      	ldr	r1, [pc, #444]	@ (8009a7c <_tzset_unlocked_r+0x320>)
 80098c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80098c2:	4628      	mov	r0, r5
 80098c4:	f7ff f916 	bl	8008af4 <siscanf>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	dc28      	bgt.n	800991e <_tzset_unlocked_r+0x1c2>
 80098cc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80098d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80098d2:	d124      	bne.n	800991e <_tzset_unlocked_r+0x1c2>
 80098d4:	4b68      	ldr	r3, [pc, #416]	@ (8009a78 <_tzset_unlocked_r+0x31c>)
 80098d6:	62a6      	str	r6, [r4, #40]	@ 0x28
 80098d8:	e9c8 3300 	strd	r3, r3, [r8]
 80098dc:	f8ca 6000 	str.w	r6, [sl]
 80098e0:	e76a      	b.n	80097b8 <_tzset_unlocked_r+0x5c>
 80098e2:	f7f6 fc7d 	bl	80001e0 <strcmp>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f47f af6d 	bne.w	80097c6 <_tzset_unlocked_r+0x6a>
 80098ec:	e764      	b.n	80097b8 <_tzset_unlocked_r+0x5c>
 80098ee:	4631      	mov	r1, r6
 80098f0:	f000 f9cb 	bl	8009c8a <strcpy>
 80098f4:	e775      	b.n	80097e2 <_tzset_unlocked_r+0x86>
 80098f6:	4a60      	ldr	r2, [pc, #384]	@ (8009a78 <_tzset_unlocked_r+0x31c>)
 80098f8:	4963      	ldr	r1, [pc, #396]	@ (8009a88 <_tzset_unlocked_r+0x32c>)
 80098fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff f8f9 	bl	8008af4 <siscanf>
 8009902:	2800      	cmp	r0, #0
 8009904:	f77f af58 	ble.w	80097b8 <_tzset_unlocked_r+0x5c>
 8009908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990a:	3b03      	subs	r3, #3
 800990c:	2b07      	cmp	r3, #7
 800990e:	d9a0      	bls.n	8009852 <_tzset_unlocked_r+0xf6>
 8009910:	e752      	b.n	80097b8 <_tzset_unlocked_r+0x5c>
 8009912:	2b2b      	cmp	r3, #43	@ 0x2b
 8009914:	bf08      	it	eq
 8009916:	3501      	addeq	r5, #1
 8009918:	f04f 0901 	mov.w	r9, #1
 800991c:	e7a1      	b.n	8009862 <_tzset_unlocked_r+0x106>
 800991e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009920:	1eda      	subs	r2, r3, #3
 8009922:	2a07      	cmp	r2, #7
 8009924:	f63f af48 	bhi.w	80097b8 <_tzset_unlocked_r+0x5c>
 8009928:	5ceb      	ldrb	r3, [r5, r3]
 800992a:	2b3e      	cmp	r3, #62	@ 0x3e
 800992c:	f47f af44 	bne.w	80097b8 <_tzset_unlocked_r+0x5c>
 8009930:	f109 0902 	add.w	r9, r9, #2
 8009934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009936:	eb09 0503 	add.w	r5, r9, r3
 800993a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800993e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009940:	f040 80b7 	bne.w	8009ab2 <_tzset_unlocked_r+0x356>
 8009944:	3501      	adds	r5, #1
 8009946:	f04f 39ff 	mov.w	r9, #4294967295
 800994a:	2300      	movs	r3, #0
 800994c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009950:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009954:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009958:	930a      	str	r3, [sp, #40]	@ 0x28
 800995a:	ab0a      	add	r3, sp, #40	@ 0x28
 800995c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	f10d 031e 	add.w	r3, sp, #30
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4945      	ldr	r1, [pc, #276]	@ (8009a80 <_tzset_unlocked_r+0x324>)
 800996a:	ab0a      	add	r3, sp, #40	@ 0x28
 800996c:	aa07      	add	r2, sp, #28
 800996e:	4628      	mov	r0, r5
 8009970:	f7ff f8c0 	bl	8008af4 <siscanf>
 8009974:	2800      	cmp	r0, #0
 8009976:	f300 80a2 	bgt.w	8009abe <_tzset_unlocked_r+0x362>
 800997a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009982:	4627      	mov	r7, r4
 8009984:	441d      	add	r5, r3
 8009986:	f04f 0b00 	mov.w	fp, #0
 800998a:	782b      	ldrb	r3, [r5, #0]
 800998c:	2b2c      	cmp	r3, #44	@ 0x2c
 800998e:	bf08      	it	eq
 8009990:	3501      	addeq	r5, #1
 8009992:	f895 9000 	ldrb.w	r9, [r5]
 8009996:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800999a:	f040 80a3 	bne.w	8009ae4 <_tzset_unlocked_r+0x388>
 800999e:	ab0a      	add	r3, sp, #40	@ 0x28
 80099a0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80099a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80099a8:	aa09      	add	r2, sp, #36	@ 0x24
 80099aa:	9200      	str	r2, [sp, #0]
 80099ac:	4937      	ldr	r1, [pc, #220]	@ (8009a8c <_tzset_unlocked_r+0x330>)
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80099b4:	4628      	mov	r0, r5
 80099b6:	f7ff f89d 	bl	8008af4 <siscanf>
 80099ba:	2803      	cmp	r0, #3
 80099bc:	f47f aefc 	bne.w	80097b8 <_tzset_unlocked_r+0x5c>
 80099c0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80099c4:	1e4b      	subs	r3, r1, #1
 80099c6:	2b0b      	cmp	r3, #11
 80099c8:	f63f aef6 	bhi.w	80097b8 <_tzset_unlocked_r+0x5c>
 80099cc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 80099d0:	1e53      	subs	r3, r2, #1
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	f63f aef0 	bhi.w	80097b8 <_tzset_unlocked_r+0x5c>
 80099d8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80099dc:	2b06      	cmp	r3, #6
 80099de:	f63f aeeb 	bhi.w	80097b8 <_tzset_unlocked_r+0x5c>
 80099e2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80099e6:	f887 9008 	strb.w	r9, [r7, #8]
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ee:	eb05 0903 	add.w	r9, r5, r3
 80099f2:	2500      	movs	r5, #0
 80099f4:	f04f 0302 	mov.w	r3, #2
 80099f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80099fc:	f8ad 501e 	strh.w	r5, [sp, #30]
 8009a00:	f8ad 5020 	strh.w	r5, [sp, #32]
 8009a04:	950a      	str	r5, [sp, #40]	@ 0x28
 8009a06:	f899 3000 	ldrb.w	r3, [r9]
 8009a0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a0c:	f040 8096 	bne.w	8009b3c <_tzset_unlocked_r+0x3e0>
 8009a10:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a12:	aa08      	add	r2, sp, #32
 8009a14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a18:	f10d 021e 	add.w	r2, sp, #30
 8009a1c:	9200      	str	r2, [sp, #0]
 8009a1e:	491c      	ldr	r1, [pc, #112]	@ (8009a90 <_tzset_unlocked_r+0x334>)
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	aa07      	add	r2, sp, #28
 8009a24:	4648      	mov	r0, r9
 8009a26:	f7ff f865 	bl	8008af4 <siscanf>
 8009a2a:	42a8      	cmp	r0, r5
 8009a2c:	f300 8086 	bgt.w	8009b3c <_tzset_unlocked_r+0x3e0>
 8009a30:	214a      	movs	r1, #74	@ 0x4a
 8009a32:	2200      	movs	r2, #0
 8009a34:	2300      	movs	r3, #0
 8009a36:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8009a3a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a3e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009a42:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8009a46:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8009a4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8009a4e:	7221      	strb	r1, [r4, #8]
 8009a50:	62a5      	str	r5, [r4, #40]	@ 0x28
 8009a52:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009a56:	6525      	str	r5, [r4, #80]	@ 0x50
 8009a58:	e6ae      	b.n	80097b8 <_tzset_unlocked_r+0x5c>
 8009a5a:	bf00      	nop
 8009a5c:	0800bd5b 	.word	0x0800bd5b
 8009a60:	20005500 	.word	0x20005500
 8009a64:	2000551c 	.word	0x2000551c
 8009a68:	0800bd5e 	.word	0x0800bd5e
 8009a6c:	20005520 	.word	0x20005520
 8009a70:	20000024 	.word	0x20000024
 8009a74:	0800beab 	.word	0x0800beab
 8009a78:	20005510 	.word	0x20005510
 8009a7c:	0800bd62 	.word	0x0800bd62
 8009a80:	0800bd97 	.word	0x0800bd97
 8009a84:	20005504 	.word	0x20005504
 8009a88:	0800bd75 	.word	0x0800bd75
 8009a8c:	0800bd83 	.word	0x0800bd83
 8009a90:	0800bd96 	.word	0x0800bd96
 8009a94:	4a3e      	ldr	r2, [pc, #248]	@ (8009b90 <_tzset_unlocked_r+0x434>)
 8009a96:	493f      	ldr	r1, [pc, #252]	@ (8009b94 <_tzset_unlocked_r+0x438>)
 8009a98:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	f7ff f82a 	bl	8008af4 <siscanf>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	f77f af17 	ble.w	80098d4 <_tzset_unlocked_r+0x178>
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aa8:	3b03      	subs	r3, #3
 8009aaa:	2b07      	cmp	r3, #7
 8009aac:	f67f af42 	bls.w	8009934 <_tzset_unlocked_r+0x1d8>
 8009ab0:	e682      	b.n	80097b8 <_tzset_unlocked_r+0x5c>
 8009ab2:	2b2b      	cmp	r3, #43	@ 0x2b
 8009ab4:	bf08      	it	eq
 8009ab6:	3501      	addeq	r5, #1
 8009ab8:	f04f 0901 	mov.w	r9, #1
 8009abc:	e745      	b.n	800994a <_tzset_unlocked_r+0x1ee>
 8009abe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009ac2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009ac6:	213c      	movs	r1, #60	@ 0x3c
 8009ac8:	fb01 3302 	mla	r3, r1, r2, r3
 8009acc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009ad0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009ad4:	fb01 3302 	mla	r3, r1, r2, r3
 8009ad8:	fb09 f303 	mul.w	r3, r9, r3
 8009adc:	e74f      	b.n	800997e <_tzset_unlocked_r+0x222>
 8009ade:	f04f 0b01 	mov.w	fp, #1
 8009ae2:	e752      	b.n	800998a <_tzset_unlocked_r+0x22e>
 8009ae4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8009ae8:	bf06      	itte	eq
 8009aea:	3501      	addeq	r5, #1
 8009aec:	464b      	moveq	r3, r9
 8009aee:	2344      	movne	r3, #68	@ 0x44
 8009af0:	220a      	movs	r2, #10
 8009af2:	a90b      	add	r1, sp, #44	@ 0x2c
 8009af4:	4628      	mov	r0, r5
 8009af6:	9305      	str	r3, [sp, #20]
 8009af8:	f000 fac0 	bl	800a07c <strtoul>
 8009afc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8009b00:	9b05      	ldr	r3, [sp, #20]
 8009b02:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8009b06:	45a9      	cmp	r9, r5
 8009b08:	d114      	bne.n	8009b34 <_tzset_unlocked_r+0x3d8>
 8009b0a:	234d      	movs	r3, #77	@ 0x4d
 8009b0c:	f1bb 0f00 	cmp.w	fp, #0
 8009b10:	d107      	bne.n	8009b22 <_tzset_unlocked_r+0x3c6>
 8009b12:	7223      	strb	r3, [r4, #8]
 8009b14:	2103      	movs	r1, #3
 8009b16:	2302      	movs	r3, #2
 8009b18:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8009b1c:	f8c4 b014 	str.w	fp, [r4, #20]
 8009b20:	e767      	b.n	80099f2 <_tzset_unlocked_r+0x296>
 8009b22:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8009b26:	220b      	movs	r2, #11
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8009b2e:	2300      	movs	r3, #0
 8009b30:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009b32:	e75e      	b.n	80099f2 <_tzset_unlocked_r+0x296>
 8009b34:	b280      	uxth	r0, r0
 8009b36:	723b      	strb	r3, [r7, #8]
 8009b38:	6178      	str	r0, [r7, #20]
 8009b3a:	e75a      	b.n	80099f2 <_tzset_unlocked_r+0x296>
 8009b3c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009b40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009b44:	213c      	movs	r1, #60	@ 0x3c
 8009b46:	fb01 3302 	mla	r3, r1, r2, r3
 8009b4a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009b4e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009b52:	fb01 3302 	mla	r3, r1, r2, r3
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009b5a:	3728      	adds	r7, #40	@ 0x28
 8009b5c:	444d      	add	r5, r9
 8009b5e:	f1bb 0f00 	cmp.w	fp, #0
 8009b62:	d0bc      	beq.n	8009ade <_tzset_unlocked_r+0x382>
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	6523      	str	r3, [r4, #80]	@ 0x50
 8009b68:	4b0b      	ldr	r3, [pc, #44]	@ (8009b98 <_tzset_unlocked_r+0x43c>)
 8009b6a:	f8c8 3000 	str.w	r3, [r8]
 8009b6e:	6860      	ldr	r0, [r4, #4]
 8009b70:	4b07      	ldr	r3, [pc, #28]	@ (8009b90 <_tzset_unlocked_r+0x434>)
 8009b72:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009b74:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b78:	f7ff fd2a 	bl	80095d0 <__tzcalc_limits>
 8009b7c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009b7e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009b80:	f8ca 2000 	str.w	r2, [sl]
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	4a05      	ldr	r2, [pc, #20]	@ (8009b9c <_tzset_unlocked_r+0x440>)
 8009b88:	bf18      	it	ne
 8009b8a:	2301      	movne	r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	e613      	b.n	80097b8 <_tzset_unlocked_r+0x5c>
 8009b90:	20005504 	.word	0x20005504
 8009b94:	0800bd75 	.word	0x0800bd75
 8009b98:	20005510 	.word	0x20005510
 8009b9c:	20005520 	.word	0x20005520

08009ba0 <_close_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d06      	ldr	r5, [pc, #24]	@ (8009bbc <_close_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f8 f8c8 	bl	8001d40 <_close>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_close_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_close_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20005524 	.word	0x20005524

08009bc0 <_lseek_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4d07      	ldr	r5, [pc, #28]	@ (8009be0 <_lseek_r+0x20>)
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4611      	mov	r1, r2
 8009bca:	2200      	movs	r2, #0
 8009bcc:	602a      	str	r2, [r5, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	f7f8 f8dd 	bl	8001d8e <_lseek>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_lseek_r+0x1e>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_lseek_r+0x1e>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	20005524 	.word	0x20005524

08009be4 <_read_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4d07      	ldr	r5, [pc, #28]	@ (8009c04 <_read_r+0x20>)
 8009be8:	4604      	mov	r4, r0
 8009bea:	4608      	mov	r0, r1
 8009bec:	4611      	mov	r1, r2
 8009bee:	2200      	movs	r2, #0
 8009bf0:	602a      	str	r2, [r5, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f7f8 f86b 	bl	8001cce <_read>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_read_r+0x1e>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_read_r+0x1e>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	20005524 	.word	0x20005524

08009c08 <_write_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	@ (8009c28 <_write_r+0x20>)
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4611      	mov	r1, r2
 8009c12:	2200      	movs	r2, #0
 8009c14:	602a      	str	r2, [r5, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f7f8 f876 	bl	8001d08 <_write>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_write_r+0x1e>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_write_r+0x1e>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20005524 	.word	0x20005524

08009c2c <__errno>:
 8009c2c:	4b01      	ldr	r3, [pc, #4]	@ (8009c34 <__errno+0x8>)
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	2000002c 	.word	0x2000002c

08009c38 <__libc_init_array>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c70 <__libc_init_array+0x38>)
 8009c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c74 <__libc_init_array+0x3c>)
 8009c3e:	1b64      	subs	r4, r4, r5
 8009c40:	10a4      	asrs	r4, r4, #2
 8009c42:	2600      	movs	r6, #0
 8009c44:	42a6      	cmp	r6, r4
 8009c46:	d109      	bne.n	8009c5c <__libc_init_array+0x24>
 8009c48:	4d0b      	ldr	r5, [pc, #44]	@ (8009c78 <__libc_init_array+0x40>)
 8009c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c7c <__libc_init_array+0x44>)
 8009c4c:	f001 fcf0 	bl	800b630 <_init>
 8009c50:	1b64      	subs	r4, r4, r5
 8009c52:	10a4      	asrs	r4, r4, #2
 8009c54:	2600      	movs	r6, #0
 8009c56:	42a6      	cmp	r6, r4
 8009c58:	d105      	bne.n	8009c66 <__libc_init_array+0x2e>
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c60:	4798      	blx	r3
 8009c62:	3601      	adds	r6, #1
 8009c64:	e7ee      	b.n	8009c44 <__libc_init_array+0xc>
 8009c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c6a:	4798      	blx	r3
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	e7f2      	b.n	8009c56 <__libc_init_array+0x1e>
 8009c70:	0800bfb0 	.word	0x0800bfb0
 8009c74:	0800bfb0 	.word	0x0800bfb0
 8009c78:	0800bfb0 	.word	0x0800bfb0
 8009c7c:	0800bfb4 	.word	0x0800bfb4

08009c80 <__retarget_lock_init_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <__retarget_lock_acquire>:
 8009c82:	4770      	bx	lr

08009c84 <__retarget_lock_acquire_recursive>:
 8009c84:	4770      	bx	lr

08009c86 <__retarget_lock_release>:
 8009c86:	4770      	bx	lr

08009c88 <__retarget_lock_release_recursive>:
 8009c88:	4770      	bx	lr

08009c8a <strcpy>:
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c90:	f803 2b01 	strb.w	r2, [r3], #1
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	d1f9      	bne.n	8009c8c <strcpy+0x2>
 8009c98:	4770      	bx	lr

08009c9a <memcpy>:
 8009c9a:	440a      	add	r2, r1
 8009c9c:	4291      	cmp	r1, r2
 8009c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ca2:	d100      	bne.n	8009ca6 <memcpy+0xc>
 8009ca4:	4770      	bx	lr
 8009ca6:	b510      	push	{r4, lr}
 8009ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cb0:	4291      	cmp	r1, r2
 8009cb2:	d1f9      	bne.n	8009ca8 <memcpy+0xe>
 8009cb4:	bd10      	pop	{r4, pc}
	...

08009cb8 <__assert_func>:
 8009cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cba:	4614      	mov	r4, r2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b09      	ldr	r3, [pc, #36]	@ (8009ce4 <__assert_func+0x2c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	68d8      	ldr	r0, [r3, #12]
 8009cc6:	b14c      	cbz	r4, 8009cdc <__assert_func+0x24>
 8009cc8:	4b07      	ldr	r3, [pc, #28]	@ (8009ce8 <__assert_func+0x30>)
 8009cca:	9100      	str	r1, [sp, #0]
 8009ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cd0:	4906      	ldr	r1, [pc, #24]	@ (8009cec <__assert_func+0x34>)
 8009cd2:	462b      	mov	r3, r5
 8009cd4:	f001 f9cc 	bl	800b070 <fiprintf>
 8009cd8:	f001 fc1c 	bl	800b514 <abort>
 8009cdc:	4b04      	ldr	r3, [pc, #16]	@ (8009cf0 <__assert_func+0x38>)
 8009cde:	461c      	mov	r4, r3
 8009ce0:	e7f3      	b.n	8009cca <__assert_func+0x12>
 8009ce2:	bf00      	nop
 8009ce4:	2000002c 	.word	0x2000002c
 8009ce8:	0800bda9 	.word	0x0800bda9
 8009cec:	0800bdb6 	.word	0x0800bdb6
 8009cf0:	0800beab 	.word	0x0800beab

08009cf4 <div>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	fb91 f4f2 	sdiv	r4, r1, r2
 8009cfa:	fb02 1114 	mls	r1, r2, r4, r1
 8009cfe:	6004      	str	r4, [r0, #0]
 8009d00:	6041      	str	r1, [r0, #4]
 8009d02:	bd10      	pop	{r4, pc}

08009d04 <_free_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4605      	mov	r5, r0
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	d041      	beq.n	8009d90 <_free_r+0x8c>
 8009d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d10:	1f0c      	subs	r4, r1, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfb8      	it	lt
 8009d16:	18e4      	addlt	r4, r4, r3
 8009d18:	f000 f934 	bl	8009f84 <__malloc_lock>
 8009d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009d94 <_free_r+0x90>)
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	b933      	cbnz	r3, 8009d30 <_free_r+0x2c>
 8009d22:	6063      	str	r3, [r4, #4]
 8009d24:	6014      	str	r4, [r2, #0]
 8009d26:	4628      	mov	r0, r5
 8009d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d2c:	f000 b930 	b.w	8009f90 <__malloc_unlock>
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d908      	bls.n	8009d46 <_free_r+0x42>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	1821      	adds	r1, r4, r0
 8009d38:	428b      	cmp	r3, r1
 8009d3a:	bf01      	itttt	eq
 8009d3c:	6819      	ldreq	r1, [r3, #0]
 8009d3e:	685b      	ldreq	r3, [r3, #4]
 8009d40:	1809      	addeq	r1, r1, r0
 8009d42:	6021      	streq	r1, [r4, #0]
 8009d44:	e7ed      	b.n	8009d22 <_free_r+0x1e>
 8009d46:	461a      	mov	r2, r3
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	b10b      	cbz	r3, 8009d50 <_free_r+0x4c>
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	d9fa      	bls.n	8009d46 <_free_r+0x42>
 8009d50:	6811      	ldr	r1, [r2, #0]
 8009d52:	1850      	adds	r0, r2, r1
 8009d54:	42a0      	cmp	r0, r4
 8009d56:	d10b      	bne.n	8009d70 <_free_r+0x6c>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	4401      	add	r1, r0
 8009d5c:	1850      	adds	r0, r2, r1
 8009d5e:	4283      	cmp	r3, r0
 8009d60:	6011      	str	r1, [r2, #0]
 8009d62:	d1e0      	bne.n	8009d26 <_free_r+0x22>
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	6053      	str	r3, [r2, #4]
 8009d6a:	4408      	add	r0, r1
 8009d6c:	6010      	str	r0, [r2, #0]
 8009d6e:	e7da      	b.n	8009d26 <_free_r+0x22>
 8009d70:	d902      	bls.n	8009d78 <_free_r+0x74>
 8009d72:	230c      	movs	r3, #12
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	e7d6      	b.n	8009d26 <_free_r+0x22>
 8009d78:	6820      	ldr	r0, [r4, #0]
 8009d7a:	1821      	adds	r1, r4, r0
 8009d7c:	428b      	cmp	r3, r1
 8009d7e:	bf04      	itt	eq
 8009d80:	6819      	ldreq	r1, [r3, #0]
 8009d82:	685b      	ldreq	r3, [r3, #4]
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	bf04      	itt	eq
 8009d88:	1809      	addeq	r1, r1, r0
 8009d8a:	6021      	streq	r1, [r4, #0]
 8009d8c:	6054      	str	r4, [r2, #4]
 8009d8e:	e7ca      	b.n	8009d26 <_free_r+0x22>
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	bf00      	nop
 8009d94:	20005530 	.word	0x20005530

08009d98 <_findenv_r>:
 8009d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8009e0c <_findenv_r+0x74>
 8009da0:	4606      	mov	r6, r0
 8009da2:	4689      	mov	r9, r1
 8009da4:	4617      	mov	r7, r2
 8009da6:	f001 fbbd 	bl	800b524 <__env_lock>
 8009daa:	f8da 4000 	ldr.w	r4, [sl]
 8009dae:	b134      	cbz	r4, 8009dbe <_findenv_r+0x26>
 8009db0:	464b      	mov	r3, r9
 8009db2:	4698      	mov	r8, r3
 8009db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db8:	b13a      	cbz	r2, 8009dca <_findenv_r+0x32>
 8009dba:	2a3d      	cmp	r2, #61	@ 0x3d
 8009dbc:	d1f9      	bne.n	8009db2 <_findenv_r+0x1a>
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f001 fbb6 	bl	800b530 <__env_unlock>
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	eba8 0809 	sub.w	r8, r8, r9
 8009dce:	46a3      	mov	fp, r4
 8009dd0:	f854 0b04 	ldr.w	r0, [r4], #4
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d0f2      	beq.n	8009dbe <_findenv_r+0x26>
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f001 fa63 	bl	800b2a6 <strncmp>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1f4      	bne.n	8009dce <_findenv_r+0x36>
 8009de4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009de8:	eb03 0508 	add.w	r5, r3, r8
 8009dec:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009df0:	2b3d      	cmp	r3, #61	@ 0x3d
 8009df2:	d1ec      	bne.n	8009dce <_findenv_r+0x36>
 8009df4:	f8da 3000 	ldr.w	r3, [sl]
 8009df8:	ebab 0303 	sub.w	r3, fp, r3
 8009dfc:	109b      	asrs	r3, r3, #2
 8009dfe:	4630      	mov	r0, r6
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	f001 fb95 	bl	800b530 <__env_unlock>
 8009e06:	1c68      	adds	r0, r5, #1
 8009e08:	e7dd      	b.n	8009dc6 <_findenv_r+0x2e>
 8009e0a:	bf00      	nop
 8009e0c:	20000004 	.word	0x20000004

08009e10 <_getenv_r>:
 8009e10:	b507      	push	{r0, r1, r2, lr}
 8009e12:	aa01      	add	r2, sp, #4
 8009e14:	f7ff ffc0 	bl	8009d98 <_findenv_r>
 8009e18:	b003      	add	sp, #12
 8009e1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009e20 <malloc>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	@ (8009e2c <malloc+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f000 b82d 	b.w	8009e84 <_malloc_r>
 8009e2a:	bf00      	nop
 8009e2c:	2000002c 	.word	0x2000002c

08009e30 <free>:
 8009e30:	4b02      	ldr	r3, [pc, #8]	@ (8009e3c <free+0xc>)
 8009e32:	4601      	mov	r1, r0
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f7ff bf65 	b.w	8009d04 <_free_r>
 8009e3a:	bf00      	nop
 8009e3c:	2000002c 	.word	0x2000002c

08009e40 <sbrk_aligned>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	4e0f      	ldr	r6, [pc, #60]	@ (8009e80 <sbrk_aligned+0x40>)
 8009e44:	460c      	mov	r4, r1
 8009e46:	6831      	ldr	r1, [r6, #0]
 8009e48:	4605      	mov	r5, r0
 8009e4a:	b911      	cbnz	r1, 8009e52 <sbrk_aligned+0x12>
 8009e4c:	f001 fb52 	bl	800b4f4 <_sbrk_r>
 8009e50:	6030      	str	r0, [r6, #0]
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f001 fb4d 	bl	800b4f4 <_sbrk_r>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d103      	bne.n	8009e66 <sbrk_aligned+0x26>
 8009e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8009e62:	4620      	mov	r0, r4
 8009e64:	bd70      	pop	{r4, r5, r6, pc}
 8009e66:	1cc4      	adds	r4, r0, #3
 8009e68:	f024 0403 	bic.w	r4, r4, #3
 8009e6c:	42a0      	cmp	r0, r4
 8009e6e:	d0f8      	beq.n	8009e62 <sbrk_aligned+0x22>
 8009e70:	1a21      	subs	r1, r4, r0
 8009e72:	4628      	mov	r0, r5
 8009e74:	f001 fb3e 	bl	800b4f4 <_sbrk_r>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d1f2      	bne.n	8009e62 <sbrk_aligned+0x22>
 8009e7c:	e7ef      	b.n	8009e5e <sbrk_aligned+0x1e>
 8009e7e:	bf00      	nop
 8009e80:	2000552c 	.word	0x2000552c

08009e84 <_malloc_r>:
 8009e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e88:	1ccd      	adds	r5, r1, #3
 8009e8a:	f025 0503 	bic.w	r5, r5, #3
 8009e8e:	3508      	adds	r5, #8
 8009e90:	2d0c      	cmp	r5, #12
 8009e92:	bf38      	it	cc
 8009e94:	250c      	movcc	r5, #12
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	4606      	mov	r6, r0
 8009e9a:	db01      	blt.n	8009ea0 <_malloc_r+0x1c>
 8009e9c:	42a9      	cmp	r1, r5
 8009e9e:	d904      	bls.n	8009eaa <_malloc_r+0x26>
 8009ea0:	230c      	movs	r3, #12
 8009ea2:	6033      	str	r3, [r6, #0]
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f80 <_malloc_r+0xfc>
 8009eae:	f000 f869 	bl	8009f84 <__malloc_lock>
 8009eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	bb44      	cbnz	r4, 8009f0c <_malloc_r+0x88>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f7ff ffbf 	bl	8009e40 <sbrk_aligned>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	d158      	bne.n	8009f7a <_malloc_r+0xf6>
 8009ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8009ecc:	4627      	mov	r7, r4
 8009ece:	2f00      	cmp	r7, #0
 8009ed0:	d143      	bne.n	8009f5a <_malloc_r+0xd6>
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d04b      	beq.n	8009f6e <_malloc_r+0xea>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	4639      	mov	r1, r7
 8009eda:	4630      	mov	r0, r6
 8009edc:	eb04 0903 	add.w	r9, r4, r3
 8009ee0:	f001 fb08 	bl	800b4f4 <_sbrk_r>
 8009ee4:	4581      	cmp	r9, r0
 8009ee6:	d142      	bne.n	8009f6e <_malloc_r+0xea>
 8009ee8:	6821      	ldr	r1, [r4, #0]
 8009eea:	1a6d      	subs	r5, r5, r1
 8009eec:	4629      	mov	r1, r5
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ffa6 	bl	8009e40 <sbrk_aligned>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d03a      	beq.n	8009f6e <_malloc_r+0xea>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	442b      	add	r3, r5
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	f8d8 3000 	ldr.w	r3, [r8]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	bb62      	cbnz	r2, 8009f60 <_malloc_r+0xdc>
 8009f06:	f8c8 7000 	str.w	r7, [r8]
 8009f0a:	e00f      	b.n	8009f2c <_malloc_r+0xa8>
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	1b52      	subs	r2, r2, r5
 8009f10:	d420      	bmi.n	8009f54 <_malloc_r+0xd0>
 8009f12:	2a0b      	cmp	r2, #11
 8009f14:	d917      	bls.n	8009f46 <_malloc_r+0xc2>
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	6025      	str	r5, [r4, #0]
 8009f1c:	bf18      	it	ne
 8009f1e:	6059      	strne	r1, [r3, #4]
 8009f20:	6863      	ldr	r3, [r4, #4]
 8009f22:	bf08      	it	eq
 8009f24:	f8c8 1000 	streq.w	r1, [r8]
 8009f28:	5162      	str	r2, [r4, r5]
 8009f2a:	604b      	str	r3, [r1, #4]
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f000 f82f 	bl	8009f90 <__malloc_unlock>
 8009f32:	f104 000b 	add.w	r0, r4, #11
 8009f36:	1d23      	adds	r3, r4, #4
 8009f38:	f020 0007 	bic.w	r0, r0, #7
 8009f3c:	1ac2      	subs	r2, r0, r3
 8009f3e:	bf1c      	itt	ne
 8009f40:	1a1b      	subne	r3, r3, r0
 8009f42:	50a3      	strne	r3, [r4, r2]
 8009f44:	e7af      	b.n	8009ea6 <_malloc_r+0x22>
 8009f46:	6862      	ldr	r2, [r4, #4]
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	bf0c      	ite	eq
 8009f4c:	f8c8 2000 	streq.w	r2, [r8]
 8009f50:	605a      	strne	r2, [r3, #4]
 8009f52:	e7eb      	b.n	8009f2c <_malloc_r+0xa8>
 8009f54:	4623      	mov	r3, r4
 8009f56:	6864      	ldr	r4, [r4, #4]
 8009f58:	e7ae      	b.n	8009eb8 <_malloc_r+0x34>
 8009f5a:	463c      	mov	r4, r7
 8009f5c:	687f      	ldr	r7, [r7, #4]
 8009f5e:	e7b6      	b.n	8009ece <_malloc_r+0x4a>
 8009f60:	461a      	mov	r2, r3
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d1fb      	bne.n	8009f60 <_malloc_r+0xdc>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6053      	str	r3, [r2, #4]
 8009f6c:	e7de      	b.n	8009f2c <_malloc_r+0xa8>
 8009f6e:	230c      	movs	r3, #12
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	4630      	mov	r0, r6
 8009f74:	f000 f80c 	bl	8009f90 <__malloc_unlock>
 8009f78:	e794      	b.n	8009ea4 <_malloc_r+0x20>
 8009f7a:	6005      	str	r5, [r0, #0]
 8009f7c:	e7d6      	b.n	8009f2c <_malloc_r+0xa8>
 8009f7e:	bf00      	nop
 8009f80:	20005530 	.word	0x20005530

08009f84 <__malloc_lock>:
 8009f84:	4801      	ldr	r0, [pc, #4]	@ (8009f8c <__malloc_lock+0x8>)
 8009f86:	f7ff be7d 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	2000552a 	.word	0x2000552a

08009f90 <__malloc_unlock>:
 8009f90:	4801      	ldr	r0, [pc, #4]	@ (8009f98 <__malloc_unlock+0x8>)
 8009f92:	f7ff be79 	b.w	8009c88 <__retarget_lock_release_recursive>
 8009f96:	bf00      	nop
 8009f98:	2000552a 	.word	0x2000552a

08009f9c <_strtoul_l.isra.0>:
 8009f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fa0:	4e34      	ldr	r6, [pc, #208]	@ (800a074 <_strtoul_l.isra.0+0xd8>)
 8009fa2:	4686      	mov	lr, r0
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fac:	5d37      	ldrb	r7, [r6, r4]
 8009fae:	f017 0708 	ands.w	r7, r7, #8
 8009fb2:	d1f8      	bne.n	8009fa6 <_strtoul_l.isra.0+0xa>
 8009fb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fb6:	d110      	bne.n	8009fda <_strtoul_l.isra.0+0x3e>
 8009fb8:	782c      	ldrb	r4, [r5, #0]
 8009fba:	2701      	movs	r7, #1
 8009fbc:	1c85      	adds	r5, r0, #2
 8009fbe:	f033 0010 	bics.w	r0, r3, #16
 8009fc2:	d115      	bne.n	8009ff0 <_strtoul_l.isra.0+0x54>
 8009fc4:	2c30      	cmp	r4, #48	@ 0x30
 8009fc6:	d10d      	bne.n	8009fe4 <_strtoul_l.isra.0+0x48>
 8009fc8:	7828      	ldrb	r0, [r5, #0]
 8009fca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009fce:	2858      	cmp	r0, #88	@ 0x58
 8009fd0:	d108      	bne.n	8009fe4 <_strtoul_l.isra.0+0x48>
 8009fd2:	786c      	ldrb	r4, [r5, #1]
 8009fd4:	3502      	adds	r5, #2
 8009fd6:	2310      	movs	r3, #16
 8009fd8:	e00a      	b.n	8009ff0 <_strtoul_l.isra.0+0x54>
 8009fda:	2c2b      	cmp	r4, #43	@ 0x2b
 8009fdc:	bf04      	itt	eq
 8009fde:	782c      	ldrbeq	r4, [r5, #0]
 8009fe0:	1c85      	addeq	r5, r0, #2
 8009fe2:	e7ec      	b.n	8009fbe <_strtoul_l.isra.0+0x22>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1f6      	bne.n	8009fd6 <_strtoul_l.isra.0+0x3a>
 8009fe8:	2c30      	cmp	r4, #48	@ 0x30
 8009fea:	bf14      	ite	ne
 8009fec:	230a      	movne	r3, #10
 8009fee:	2308      	moveq	r3, #8
 8009ff0:	f04f 38ff 	mov.w	r8, #4294967295
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	fbb8 f8f3 	udiv	r8, r8, r3
 8009ffa:	fb03 f908 	mul.w	r9, r3, r8
 8009ffe:	ea6f 0909 	mvn.w	r9, r9
 800a002:	4630      	mov	r0, r6
 800a004:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a008:	f1bc 0f09 	cmp.w	ip, #9
 800a00c:	d810      	bhi.n	800a030 <_strtoul_l.isra.0+0x94>
 800a00e:	4664      	mov	r4, ip
 800a010:	42a3      	cmp	r3, r4
 800a012:	dd1e      	ble.n	800a052 <_strtoul_l.isra.0+0xb6>
 800a014:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a018:	d007      	beq.n	800a02a <_strtoul_l.isra.0+0x8e>
 800a01a:	4580      	cmp	r8, r0
 800a01c:	d316      	bcc.n	800a04c <_strtoul_l.isra.0+0xb0>
 800a01e:	d101      	bne.n	800a024 <_strtoul_l.isra.0+0x88>
 800a020:	45a1      	cmp	r9, r4
 800a022:	db13      	blt.n	800a04c <_strtoul_l.isra.0+0xb0>
 800a024:	fb00 4003 	mla	r0, r0, r3, r4
 800a028:	2601      	movs	r6, #1
 800a02a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a02e:	e7e9      	b.n	800a004 <_strtoul_l.isra.0+0x68>
 800a030:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a034:	f1bc 0f19 	cmp.w	ip, #25
 800a038:	d801      	bhi.n	800a03e <_strtoul_l.isra.0+0xa2>
 800a03a:	3c37      	subs	r4, #55	@ 0x37
 800a03c:	e7e8      	b.n	800a010 <_strtoul_l.isra.0+0x74>
 800a03e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a042:	f1bc 0f19 	cmp.w	ip, #25
 800a046:	d804      	bhi.n	800a052 <_strtoul_l.isra.0+0xb6>
 800a048:	3c57      	subs	r4, #87	@ 0x57
 800a04a:	e7e1      	b.n	800a010 <_strtoul_l.isra.0+0x74>
 800a04c:	f04f 36ff 	mov.w	r6, #4294967295
 800a050:	e7eb      	b.n	800a02a <_strtoul_l.isra.0+0x8e>
 800a052:	1c73      	adds	r3, r6, #1
 800a054:	d106      	bne.n	800a064 <_strtoul_l.isra.0+0xc8>
 800a056:	2322      	movs	r3, #34	@ 0x22
 800a058:	f8ce 3000 	str.w	r3, [lr]
 800a05c:	4630      	mov	r0, r6
 800a05e:	b932      	cbnz	r2, 800a06e <_strtoul_l.isra.0+0xd2>
 800a060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a064:	b107      	cbz	r7, 800a068 <_strtoul_l.isra.0+0xcc>
 800a066:	4240      	negs	r0, r0
 800a068:	2a00      	cmp	r2, #0
 800a06a:	d0f9      	beq.n	800a060 <_strtoul_l.isra.0+0xc4>
 800a06c:	b106      	cbz	r6, 800a070 <_strtoul_l.isra.0+0xd4>
 800a06e:	1e69      	subs	r1, r5, #1
 800a070:	6011      	str	r1, [r2, #0]
 800a072:	e7f5      	b.n	800a060 <_strtoul_l.isra.0+0xc4>
 800a074:	0800bb91 	.word	0x0800bb91

0800a078 <_strtoul_r>:
 800a078:	f7ff bf90 	b.w	8009f9c <_strtoul_l.isra.0>

0800a07c <strtoul>:
 800a07c:	4613      	mov	r3, r2
 800a07e:	460a      	mov	r2, r1
 800a080:	4601      	mov	r1, r0
 800a082:	4802      	ldr	r0, [pc, #8]	@ (800a08c <strtoul+0x10>)
 800a084:	6800      	ldr	r0, [r0, #0]
 800a086:	f7ff bf89 	b.w	8009f9c <_strtoul_l.isra.0>
 800a08a:	bf00      	nop
 800a08c:	2000002c 	.word	0x2000002c

0800a090 <__ssputs_r>:
 800a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	688e      	ldr	r6, [r1, #8]
 800a096:	461f      	mov	r7, r3
 800a098:	42be      	cmp	r6, r7
 800a09a:	680b      	ldr	r3, [r1, #0]
 800a09c:	4682      	mov	sl, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	4690      	mov	r8, r2
 800a0a2:	d82d      	bhi.n	800a100 <__ssputs_r+0x70>
 800a0a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0ac:	d026      	beq.n	800a0fc <__ssputs_r+0x6c>
 800a0ae:	6965      	ldr	r5, [r4, #20]
 800a0b0:	6909      	ldr	r1, [r1, #16]
 800a0b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0b6:	eba3 0901 	sub.w	r9, r3, r1
 800a0ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0be:	1c7b      	adds	r3, r7, #1
 800a0c0:	444b      	add	r3, r9
 800a0c2:	106d      	asrs	r5, r5, #1
 800a0c4:	429d      	cmp	r5, r3
 800a0c6:	bf38      	it	cc
 800a0c8:	461d      	movcc	r5, r3
 800a0ca:	0553      	lsls	r3, r2, #21
 800a0cc:	d527      	bpl.n	800a11e <__ssputs_r+0x8e>
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	f7ff fed8 	bl	8009e84 <_malloc_r>
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	b360      	cbz	r0, 800a132 <__ssputs_r+0xa2>
 800a0d8:	6921      	ldr	r1, [r4, #16]
 800a0da:	464a      	mov	r2, r9
 800a0dc:	f7ff fddd 	bl	8009c9a <memcpy>
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	6126      	str	r6, [r4, #16]
 800a0ee:	6165      	str	r5, [r4, #20]
 800a0f0:	444e      	add	r6, r9
 800a0f2:	eba5 0509 	sub.w	r5, r5, r9
 800a0f6:	6026      	str	r6, [r4, #0]
 800a0f8:	60a5      	str	r5, [r4, #8]
 800a0fa:	463e      	mov	r6, r7
 800a0fc:	42be      	cmp	r6, r7
 800a0fe:	d900      	bls.n	800a102 <__ssputs_r+0x72>
 800a100:	463e      	mov	r6, r7
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	4632      	mov	r2, r6
 800a106:	4641      	mov	r1, r8
 800a108:	f7fe fdfa 	bl	8008d00 <memmove>
 800a10c:	68a3      	ldr	r3, [r4, #8]
 800a10e:	1b9b      	subs	r3, r3, r6
 800a110:	60a3      	str	r3, [r4, #8]
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	4433      	add	r3, r6
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	2000      	movs	r0, #0
 800a11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11e:	462a      	mov	r2, r5
 800a120:	f001 fa0c 	bl	800b53c <_realloc_r>
 800a124:	4606      	mov	r6, r0
 800a126:	2800      	cmp	r0, #0
 800a128:	d1e0      	bne.n	800a0ec <__ssputs_r+0x5c>
 800a12a:	6921      	ldr	r1, [r4, #16]
 800a12c:	4650      	mov	r0, sl
 800a12e:	f7ff fde9 	bl	8009d04 <_free_r>
 800a132:	230c      	movs	r3, #12
 800a134:	f8ca 3000 	str.w	r3, [sl]
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a13e:	81a3      	strh	r3, [r4, #12]
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	e7e9      	b.n	800a11a <__ssputs_r+0x8a>
	...

0800a148 <_svfiprintf_r>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	4698      	mov	r8, r3
 800a14e:	898b      	ldrh	r3, [r1, #12]
 800a150:	061b      	lsls	r3, r3, #24
 800a152:	b09d      	sub	sp, #116	@ 0x74
 800a154:	4607      	mov	r7, r0
 800a156:	460d      	mov	r5, r1
 800a158:	4614      	mov	r4, r2
 800a15a:	d510      	bpl.n	800a17e <_svfiprintf_r+0x36>
 800a15c:	690b      	ldr	r3, [r1, #16]
 800a15e:	b973      	cbnz	r3, 800a17e <_svfiprintf_r+0x36>
 800a160:	2140      	movs	r1, #64	@ 0x40
 800a162:	f7ff fe8f 	bl	8009e84 <_malloc_r>
 800a166:	6028      	str	r0, [r5, #0]
 800a168:	6128      	str	r0, [r5, #16]
 800a16a:	b930      	cbnz	r0, 800a17a <_svfiprintf_r+0x32>
 800a16c:	230c      	movs	r3, #12
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	b01d      	add	sp, #116	@ 0x74
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17a:	2340      	movs	r3, #64	@ 0x40
 800a17c:	616b      	str	r3, [r5, #20]
 800a17e:	2300      	movs	r3, #0
 800a180:	9309      	str	r3, [sp, #36]	@ 0x24
 800a182:	2320      	movs	r3, #32
 800a184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a188:	f8cd 800c 	str.w	r8, [sp, #12]
 800a18c:	2330      	movs	r3, #48	@ 0x30
 800a18e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a32c <_svfiprintf_r+0x1e4>
 800a192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a196:	f04f 0901 	mov.w	r9, #1
 800a19a:	4623      	mov	r3, r4
 800a19c:	469a      	mov	sl, r3
 800a19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a2:	b10a      	cbz	r2, 800a1a8 <_svfiprintf_r+0x60>
 800a1a4:	2a25      	cmp	r2, #37	@ 0x25
 800a1a6:	d1f9      	bne.n	800a19c <_svfiprintf_r+0x54>
 800a1a8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ac:	d00b      	beq.n	800a1c6 <_svfiprintf_r+0x7e>
 800a1ae:	465b      	mov	r3, fp
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff ff6b 	bl	800a090 <__ssputs_r>
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f000 80a7 	beq.w	800a30e <_svfiprintf_r+0x1c6>
 800a1c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1c2:	445a      	add	r2, fp
 800a1c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 809f 	beq.w	800a30e <_svfiprintf_r+0x1c6>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1da:	f10a 0a01 	add.w	sl, sl, #1
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	9307      	str	r3, [sp, #28]
 800a1e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1e8:	4654      	mov	r4, sl
 800a1ea:	2205      	movs	r2, #5
 800a1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f0:	484e      	ldr	r0, [pc, #312]	@ (800a32c <_svfiprintf_r+0x1e4>)
 800a1f2:	f7f6 f80d 	bl	8000210 <memchr>
 800a1f6:	9a04      	ldr	r2, [sp, #16]
 800a1f8:	b9d8      	cbnz	r0, 800a232 <_svfiprintf_r+0xea>
 800a1fa:	06d0      	lsls	r0, r2, #27
 800a1fc:	bf44      	itt	mi
 800a1fe:	2320      	movmi	r3, #32
 800a200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a204:	0711      	lsls	r1, r2, #28
 800a206:	bf44      	itt	mi
 800a208:	232b      	movmi	r3, #43	@ 0x2b
 800a20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a20e:	f89a 3000 	ldrb.w	r3, [sl]
 800a212:	2b2a      	cmp	r3, #42	@ 0x2a
 800a214:	d015      	beq.n	800a242 <_svfiprintf_r+0xfa>
 800a216:	9a07      	ldr	r2, [sp, #28]
 800a218:	4654      	mov	r4, sl
 800a21a:	2000      	movs	r0, #0
 800a21c:	f04f 0c0a 	mov.w	ip, #10
 800a220:	4621      	mov	r1, r4
 800a222:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a226:	3b30      	subs	r3, #48	@ 0x30
 800a228:	2b09      	cmp	r3, #9
 800a22a:	d94b      	bls.n	800a2c4 <_svfiprintf_r+0x17c>
 800a22c:	b1b0      	cbz	r0, 800a25c <_svfiprintf_r+0x114>
 800a22e:	9207      	str	r2, [sp, #28]
 800a230:	e014      	b.n	800a25c <_svfiprintf_r+0x114>
 800a232:	eba0 0308 	sub.w	r3, r0, r8
 800a236:	fa09 f303 	lsl.w	r3, r9, r3
 800a23a:	4313      	orrs	r3, r2
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	46a2      	mov	sl, r4
 800a240:	e7d2      	b.n	800a1e8 <_svfiprintf_r+0xa0>
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	1d19      	adds	r1, r3, #4
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	9103      	str	r1, [sp, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfbb      	ittet	lt
 800a24e:	425b      	neglt	r3, r3
 800a250:	f042 0202 	orrlt.w	r2, r2, #2
 800a254:	9307      	strge	r3, [sp, #28]
 800a256:	9307      	strlt	r3, [sp, #28]
 800a258:	bfb8      	it	lt
 800a25a:	9204      	strlt	r2, [sp, #16]
 800a25c:	7823      	ldrb	r3, [r4, #0]
 800a25e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a260:	d10a      	bne.n	800a278 <_svfiprintf_r+0x130>
 800a262:	7863      	ldrb	r3, [r4, #1]
 800a264:	2b2a      	cmp	r3, #42	@ 0x2a
 800a266:	d132      	bne.n	800a2ce <_svfiprintf_r+0x186>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	1d1a      	adds	r2, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	9203      	str	r2, [sp, #12]
 800a270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a274:	3402      	adds	r4, #2
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a33c <_svfiprintf_r+0x1f4>
 800a27c:	7821      	ldrb	r1, [r4, #0]
 800a27e:	2203      	movs	r2, #3
 800a280:	4650      	mov	r0, sl
 800a282:	f7f5 ffc5 	bl	8000210 <memchr>
 800a286:	b138      	cbz	r0, 800a298 <_svfiprintf_r+0x150>
 800a288:	9b04      	ldr	r3, [sp, #16]
 800a28a:	eba0 000a 	sub.w	r0, r0, sl
 800a28e:	2240      	movs	r2, #64	@ 0x40
 800a290:	4082      	lsls	r2, r0
 800a292:	4313      	orrs	r3, r2
 800a294:	3401      	adds	r4, #1
 800a296:	9304      	str	r3, [sp, #16]
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	4824      	ldr	r0, [pc, #144]	@ (800a330 <_svfiprintf_r+0x1e8>)
 800a29e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2a2:	2206      	movs	r2, #6
 800a2a4:	f7f5 ffb4 	bl	8000210 <memchr>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d036      	beq.n	800a31a <_svfiprintf_r+0x1d2>
 800a2ac:	4b21      	ldr	r3, [pc, #132]	@ (800a334 <_svfiprintf_r+0x1ec>)
 800a2ae:	bb1b      	cbnz	r3, 800a2f8 <_svfiprintf_r+0x1b0>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	3307      	adds	r3, #7
 800a2b4:	f023 0307 	bic.w	r3, r3, #7
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	9303      	str	r3, [sp, #12]
 800a2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2be:	4433      	add	r3, r6
 800a2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c2:	e76a      	b.n	800a19a <_svfiprintf_r+0x52>
 800a2c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	e7a8      	b.n	800a220 <_svfiprintf_r+0xd8>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	3401      	adds	r4, #1
 800a2d2:	9305      	str	r3, [sp, #20]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f04f 0c0a 	mov.w	ip, #10
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e0:	3a30      	subs	r2, #48	@ 0x30
 800a2e2:	2a09      	cmp	r2, #9
 800a2e4:	d903      	bls.n	800a2ee <_svfiprintf_r+0x1a6>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0c6      	beq.n	800a278 <_svfiprintf_r+0x130>
 800a2ea:	9105      	str	r1, [sp, #20]
 800a2ec:	e7c4      	b.n	800a278 <_svfiprintf_r+0x130>
 800a2ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e7f0      	b.n	800a2da <_svfiprintf_r+0x192>
 800a2f8:	ab03      	add	r3, sp, #12
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a338 <_svfiprintf_r+0x1f0>)
 800a300:	a904      	add	r1, sp, #16
 800a302:	4638      	mov	r0, r7
 800a304:	f3af 8000 	nop.w
 800a308:	1c42      	adds	r2, r0, #1
 800a30a:	4606      	mov	r6, r0
 800a30c:	d1d6      	bne.n	800a2bc <_svfiprintf_r+0x174>
 800a30e:	89ab      	ldrh	r3, [r5, #12]
 800a310:	065b      	lsls	r3, r3, #25
 800a312:	f53f af2d 	bmi.w	800a170 <_svfiprintf_r+0x28>
 800a316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a318:	e72c      	b.n	800a174 <_svfiprintf_r+0x2c>
 800a31a:	ab03      	add	r3, sp, #12
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	462a      	mov	r2, r5
 800a320:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <_svfiprintf_r+0x1f0>)
 800a322:	a904      	add	r1, sp, #16
 800a324:	4638      	mov	r0, r7
 800a326:	f000 fb8b 	bl	800aa40 <_printf_i>
 800a32a:	e7ed      	b.n	800a308 <_svfiprintf_r+0x1c0>
 800a32c:	0800bde5 	.word	0x0800bde5
 800a330:	0800bdef 	.word	0x0800bdef
 800a334:	00000000 	.word	0x00000000
 800a338:	0800a091 	.word	0x0800a091
 800a33c:	0800bdeb 	.word	0x0800bdeb

0800a340 <_sungetc_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	1c4b      	adds	r3, r1, #1
 800a344:	4614      	mov	r4, r2
 800a346:	d103      	bne.n	800a350 <_sungetc_r+0x10>
 800a348:	f04f 35ff 	mov.w	r5, #4294967295
 800a34c:	4628      	mov	r0, r5
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	8993      	ldrh	r3, [r2, #12]
 800a352:	f023 0320 	bic.w	r3, r3, #32
 800a356:	8193      	strh	r3, [r2, #12]
 800a358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a35a:	6852      	ldr	r2, [r2, #4]
 800a35c:	b2cd      	uxtb	r5, r1
 800a35e:	b18b      	cbz	r3, 800a384 <_sungetc_r+0x44>
 800a360:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a362:	4293      	cmp	r3, r2
 800a364:	dd08      	ble.n	800a378 <_sungetc_r+0x38>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	1e5a      	subs	r2, r3, #1
 800a36a:	6022      	str	r2, [r4, #0]
 800a36c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	3301      	adds	r3, #1
 800a374:	6063      	str	r3, [r4, #4]
 800a376:	e7e9      	b.n	800a34c <_sungetc_r+0xc>
 800a378:	4621      	mov	r1, r4
 800a37a:	f000 ff5a 	bl	800b232 <__submore>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d0f1      	beq.n	800a366 <_sungetc_r+0x26>
 800a382:	e7e1      	b.n	800a348 <_sungetc_r+0x8>
 800a384:	6921      	ldr	r1, [r4, #16]
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	b151      	cbz	r1, 800a3a0 <_sungetc_r+0x60>
 800a38a:	4299      	cmp	r1, r3
 800a38c:	d208      	bcs.n	800a3a0 <_sungetc_r+0x60>
 800a38e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a392:	42a9      	cmp	r1, r5
 800a394:	d104      	bne.n	800a3a0 <_sungetc_r+0x60>
 800a396:	3b01      	subs	r3, #1
 800a398:	3201      	adds	r2, #1
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	6062      	str	r2, [r4, #4]
 800a39e:	e7d5      	b.n	800a34c <_sungetc_r+0xc>
 800a3a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a3a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a3ae:	4623      	mov	r3, r4
 800a3b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e7dc      	b.n	800a374 <_sungetc_r+0x34>

0800a3ba <__ssrefill_r>:
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	460c      	mov	r4, r1
 800a3be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a3c0:	b169      	cbz	r1, 800a3de <__ssrefill_r+0x24>
 800a3c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3c6:	4299      	cmp	r1, r3
 800a3c8:	d001      	beq.n	800a3ce <__ssrefill_r+0x14>
 800a3ca:	f7ff fc9b 	bl	8009d04 <_free_r>
 800a3ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3d0:	6063      	str	r3, [r4, #4]
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	6360      	str	r0, [r4, #52]	@ 0x34
 800a3d6:	b113      	cbz	r3, 800a3de <__ssrefill_r+0x24>
 800a3d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	6923      	ldr	r3, [r4, #16]
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6063      	str	r3, [r4, #4]
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f043 0320 	orr.w	r3, r3, #32
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f2:	e7f3      	b.n	800a3dc <__ssrefill_r+0x22>

0800a3f4 <__ssvfiscanf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a3fe:	2100      	movs	r1, #0
 800a400:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a404:	49a6      	ldr	r1, [pc, #664]	@ (800a6a0 <__ssvfiscanf_r+0x2ac>)
 800a406:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a408:	f10d 0804 	add.w	r8, sp, #4
 800a40c:	49a5      	ldr	r1, [pc, #660]	@ (800a6a4 <__ssvfiscanf_r+0x2b0>)
 800a40e:	4fa6      	ldr	r7, [pc, #664]	@ (800a6a8 <__ssvfiscanf_r+0x2b4>)
 800a410:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a414:	4606      	mov	r6, r0
 800a416:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	f892 9000 	ldrb.w	r9, [r2]
 800a41e:	f1b9 0f00 	cmp.w	r9, #0
 800a422:	f000 8158 	beq.w	800a6d6 <__ssvfiscanf_r+0x2e2>
 800a426:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a42a:	f013 0308 	ands.w	r3, r3, #8
 800a42e:	f102 0501 	add.w	r5, r2, #1
 800a432:	d019      	beq.n	800a468 <__ssvfiscanf_r+0x74>
 800a434:	6863      	ldr	r3, [r4, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dd0f      	ble.n	800a45a <__ssvfiscanf_r+0x66>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	5cba      	ldrb	r2, [r7, r2]
 800a440:	0712      	lsls	r2, r2, #28
 800a442:	d401      	bmi.n	800a448 <__ssvfiscanf_r+0x54>
 800a444:	462a      	mov	r2, r5
 800a446:	e7e8      	b.n	800a41a <__ssvfiscanf_r+0x26>
 800a448:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a44a:	3201      	adds	r2, #1
 800a44c:	9245      	str	r2, [sp, #276]	@ 0x114
 800a44e:	6862      	ldr	r2, [r4, #4]
 800a450:	3301      	adds	r3, #1
 800a452:	3a01      	subs	r2, #1
 800a454:	6062      	str	r2, [r4, #4]
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	e7ec      	b.n	800a434 <__ssvfiscanf_r+0x40>
 800a45a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a45c:	4621      	mov	r1, r4
 800a45e:	4630      	mov	r0, r6
 800a460:	4798      	blx	r3
 800a462:	2800      	cmp	r0, #0
 800a464:	d0e9      	beq.n	800a43a <__ssvfiscanf_r+0x46>
 800a466:	e7ed      	b.n	800a444 <__ssvfiscanf_r+0x50>
 800a468:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a46c:	f040 8085 	bne.w	800a57a <__ssvfiscanf_r+0x186>
 800a470:	9341      	str	r3, [sp, #260]	@ 0x104
 800a472:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a474:	7853      	ldrb	r3, [r2, #1]
 800a476:	2b2a      	cmp	r3, #42	@ 0x2a
 800a478:	bf02      	ittt	eq
 800a47a:	2310      	moveq	r3, #16
 800a47c:	1c95      	addeq	r5, r2, #2
 800a47e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a480:	220a      	movs	r2, #10
 800a482:	46aa      	mov	sl, r5
 800a484:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a488:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d91e      	bls.n	800a4ce <__ssvfiscanf_r+0xda>
 800a490:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a6ac <__ssvfiscanf_r+0x2b8>
 800a494:	2203      	movs	r2, #3
 800a496:	4658      	mov	r0, fp
 800a498:	f7f5 feba 	bl	8000210 <memchr>
 800a49c:	b138      	cbz	r0, 800a4ae <__ssvfiscanf_r+0xba>
 800a49e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a4a0:	eba0 000b 	sub.w	r0, r0, fp
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	4083      	lsls	r3, r0
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	9341      	str	r3, [sp, #260]	@ 0x104
 800a4ac:	4655      	mov	r5, sl
 800a4ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4b2:	2b78      	cmp	r3, #120	@ 0x78
 800a4b4:	d806      	bhi.n	800a4c4 <__ssvfiscanf_r+0xd0>
 800a4b6:	2b57      	cmp	r3, #87	@ 0x57
 800a4b8:	d810      	bhi.n	800a4dc <__ssvfiscanf_r+0xe8>
 800a4ba:	2b25      	cmp	r3, #37	@ 0x25
 800a4bc:	d05d      	beq.n	800a57a <__ssvfiscanf_r+0x186>
 800a4be:	d857      	bhi.n	800a570 <__ssvfiscanf_r+0x17c>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d075      	beq.n	800a5b0 <__ssvfiscanf_r+0x1bc>
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a4c8:	230a      	movs	r3, #10
 800a4ca:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4cc:	e088      	b.n	800a5e0 <__ssvfiscanf_r+0x1ec>
 800a4ce:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a4d0:	fb02 1103 	mla	r1, r2, r3, r1
 800a4d4:	3930      	subs	r1, #48	@ 0x30
 800a4d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a4d8:	4655      	mov	r5, sl
 800a4da:	e7d2      	b.n	800a482 <__ssvfiscanf_r+0x8e>
 800a4dc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a4e0:	2a20      	cmp	r2, #32
 800a4e2:	d8ef      	bhi.n	800a4c4 <__ssvfiscanf_r+0xd0>
 800a4e4:	a101      	add	r1, pc, #4	@ (adr r1, 800a4ec <__ssvfiscanf_r+0xf8>)
 800a4e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a5bf 	.word	0x0800a5bf
 800a4f0:	0800a4c5 	.word	0x0800a4c5
 800a4f4:	0800a4c5 	.word	0x0800a4c5
 800a4f8:	0800a619 	.word	0x0800a619
 800a4fc:	0800a4c5 	.word	0x0800a4c5
 800a500:	0800a4c5 	.word	0x0800a4c5
 800a504:	0800a4c5 	.word	0x0800a4c5
 800a508:	0800a4c5 	.word	0x0800a4c5
 800a50c:	0800a4c5 	.word	0x0800a4c5
 800a510:	0800a4c5 	.word	0x0800a4c5
 800a514:	0800a4c5 	.word	0x0800a4c5
 800a518:	0800a62f 	.word	0x0800a62f
 800a51c:	0800a615 	.word	0x0800a615
 800a520:	0800a577 	.word	0x0800a577
 800a524:	0800a577 	.word	0x0800a577
 800a528:	0800a577 	.word	0x0800a577
 800a52c:	0800a4c5 	.word	0x0800a4c5
 800a530:	0800a5d1 	.word	0x0800a5d1
 800a534:	0800a4c5 	.word	0x0800a4c5
 800a538:	0800a4c5 	.word	0x0800a4c5
 800a53c:	0800a4c5 	.word	0x0800a4c5
 800a540:	0800a4c5 	.word	0x0800a4c5
 800a544:	0800a63f 	.word	0x0800a63f
 800a548:	0800a5d9 	.word	0x0800a5d9
 800a54c:	0800a5b7 	.word	0x0800a5b7
 800a550:	0800a4c5 	.word	0x0800a4c5
 800a554:	0800a4c5 	.word	0x0800a4c5
 800a558:	0800a63b 	.word	0x0800a63b
 800a55c:	0800a4c5 	.word	0x0800a4c5
 800a560:	0800a615 	.word	0x0800a615
 800a564:	0800a4c5 	.word	0x0800a4c5
 800a568:	0800a4c5 	.word	0x0800a4c5
 800a56c:	0800a5bf 	.word	0x0800a5bf
 800a570:	3b45      	subs	r3, #69	@ 0x45
 800a572:	2b02      	cmp	r3, #2
 800a574:	d8a6      	bhi.n	800a4c4 <__ssvfiscanf_r+0xd0>
 800a576:	2305      	movs	r3, #5
 800a578:	e031      	b.n	800a5de <__ssvfiscanf_r+0x1ea>
 800a57a:	6863      	ldr	r3, [r4, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	dd0d      	ble.n	800a59c <__ssvfiscanf_r+0x1a8>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	454a      	cmp	r2, r9
 800a586:	f040 80a6 	bne.w	800a6d6 <__ssvfiscanf_r+0x2e2>
 800a58a:	3301      	adds	r3, #1
 800a58c:	6862      	ldr	r2, [r4, #4]
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a592:	3a01      	subs	r2, #1
 800a594:	3301      	adds	r3, #1
 800a596:	6062      	str	r2, [r4, #4]
 800a598:	9345      	str	r3, [sp, #276]	@ 0x114
 800a59a:	e753      	b.n	800a444 <__ssvfiscanf_r+0x50>
 800a59c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4798      	blx	r3
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d0eb      	beq.n	800a580 <__ssvfiscanf_r+0x18c>
 800a5a8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f040 808b 	bne.w	800a6c6 <__ssvfiscanf_r+0x2d2>
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e08b      	b.n	800a6ce <__ssvfiscanf_r+0x2da>
 800a5b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a5b8:	f042 0220 	orr.w	r2, r2, #32
 800a5bc:	9241      	str	r2, [sp, #260]	@ 0x104
 800a5be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a5c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5c4:	9241      	str	r2, [sp, #260]	@ 0x104
 800a5c6:	2210      	movs	r2, #16
 800a5c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a5ca:	9242      	str	r2, [sp, #264]	@ 0x108
 800a5cc:	d902      	bls.n	800a5d4 <__ssvfiscanf_r+0x1e0>
 800a5ce:	e005      	b.n	800a5dc <__ssvfiscanf_r+0x1e8>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9342      	str	r3, [sp, #264]	@ 0x108
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e002      	b.n	800a5de <__ssvfiscanf_r+0x1ea>
 800a5d8:	2308      	movs	r3, #8
 800a5da:	9342      	str	r3, [sp, #264]	@ 0x108
 800a5dc:	2304      	movs	r3, #4
 800a5de:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dd39      	ble.n	800a65a <__ssvfiscanf_r+0x266>
 800a5e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a5e8:	0659      	lsls	r1, r3, #25
 800a5ea:	d404      	bmi.n	800a5f6 <__ssvfiscanf_r+0x202>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	781a      	ldrb	r2, [r3, #0]
 800a5f0:	5cba      	ldrb	r2, [r7, r2]
 800a5f2:	0712      	lsls	r2, r2, #28
 800a5f4:	d438      	bmi.n	800a668 <__ssvfiscanf_r+0x274>
 800a5f6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	dc47      	bgt.n	800a68c <__ssvfiscanf_r+0x298>
 800a5fc:	466b      	mov	r3, sp
 800a5fe:	4622      	mov	r2, r4
 800a600:	a941      	add	r1, sp, #260	@ 0x104
 800a602:	4630      	mov	r0, r6
 800a604:	f000 fb3a 	bl	800ac7c <_scanf_chars>
 800a608:	2801      	cmp	r0, #1
 800a60a:	d064      	beq.n	800a6d6 <__ssvfiscanf_r+0x2e2>
 800a60c:	2802      	cmp	r0, #2
 800a60e:	f47f af19 	bne.w	800a444 <__ssvfiscanf_r+0x50>
 800a612:	e7c9      	b.n	800a5a8 <__ssvfiscanf_r+0x1b4>
 800a614:	220a      	movs	r2, #10
 800a616:	e7d7      	b.n	800a5c8 <__ssvfiscanf_r+0x1d4>
 800a618:	4629      	mov	r1, r5
 800a61a:	4640      	mov	r0, r8
 800a61c:	f000 fdd0 	bl	800b1c0 <__sccl>
 800a620:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a626:	9341      	str	r3, [sp, #260]	@ 0x104
 800a628:	4605      	mov	r5, r0
 800a62a:	2301      	movs	r3, #1
 800a62c:	e7d7      	b.n	800a5de <__ssvfiscanf_r+0x1ea>
 800a62e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a634:	9341      	str	r3, [sp, #260]	@ 0x104
 800a636:	2300      	movs	r3, #0
 800a638:	e7d1      	b.n	800a5de <__ssvfiscanf_r+0x1ea>
 800a63a:	2302      	movs	r3, #2
 800a63c:	e7cf      	b.n	800a5de <__ssvfiscanf_r+0x1ea>
 800a63e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a640:	06c3      	lsls	r3, r0, #27
 800a642:	f53f aeff 	bmi.w	800a444 <__ssvfiscanf_r+0x50>
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a64a:	1d19      	adds	r1, r3, #4
 800a64c:	9100      	str	r1, [sp, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	07c0      	lsls	r0, r0, #31
 800a652:	bf4c      	ite	mi
 800a654:	801a      	strhmi	r2, [r3, #0]
 800a656:	601a      	strpl	r2, [r3, #0]
 800a658:	e6f4      	b.n	800a444 <__ssvfiscanf_r+0x50>
 800a65a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a65c:	4621      	mov	r1, r4
 800a65e:	4630      	mov	r0, r6
 800a660:	4798      	blx	r3
 800a662:	2800      	cmp	r0, #0
 800a664:	d0bf      	beq.n	800a5e6 <__ssvfiscanf_r+0x1f2>
 800a666:	e79f      	b.n	800a5a8 <__ssvfiscanf_r+0x1b4>
 800a668:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a66a:	3201      	adds	r2, #1
 800a66c:	9245      	str	r2, [sp, #276]	@ 0x114
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	3a01      	subs	r2, #1
 800a672:	2a00      	cmp	r2, #0
 800a674:	6062      	str	r2, [r4, #4]
 800a676:	dd02      	ble.n	800a67e <__ssvfiscanf_r+0x28a>
 800a678:	3301      	adds	r3, #1
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	e7b6      	b.n	800a5ec <__ssvfiscanf_r+0x1f8>
 800a67e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a680:	4621      	mov	r1, r4
 800a682:	4630      	mov	r0, r6
 800a684:	4798      	blx	r3
 800a686:	2800      	cmp	r0, #0
 800a688:	d0b0      	beq.n	800a5ec <__ssvfiscanf_r+0x1f8>
 800a68a:	e78d      	b.n	800a5a8 <__ssvfiscanf_r+0x1b4>
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	dc0f      	bgt.n	800a6b0 <__ssvfiscanf_r+0x2bc>
 800a690:	466b      	mov	r3, sp
 800a692:	4622      	mov	r2, r4
 800a694:	a941      	add	r1, sp, #260	@ 0x104
 800a696:	4630      	mov	r0, r6
 800a698:	f000 fb4a 	bl	800ad30 <_scanf_i>
 800a69c:	e7b4      	b.n	800a608 <__ssvfiscanf_r+0x214>
 800a69e:	bf00      	nop
 800a6a0:	0800a341 	.word	0x0800a341
 800a6a4:	0800a3bb 	.word	0x0800a3bb
 800a6a8:	0800bb91 	.word	0x0800bb91
 800a6ac:	0800bdeb 	.word	0x0800bdeb
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <__ssvfiscanf_r+0x2e8>)
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f43f aec6 	beq.w	800a444 <__ssvfiscanf_r+0x50>
 800a6b8:	466b      	mov	r3, sp
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	a941      	add	r1, sp, #260	@ 0x104
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f3af 8000 	nop.w
 800a6c4:	e7a0      	b.n	800a608 <__ssvfiscanf_r+0x214>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	065b      	lsls	r3, r3, #25
 800a6ca:	f53f af71 	bmi.w	800a5b0 <__ssvfiscanf_r+0x1bc>
 800a6ce:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a6d8:	e7f9      	b.n	800a6ce <__ssvfiscanf_r+0x2da>
 800a6da:	bf00      	nop
 800a6dc:	00000000 	.word	0x00000000

0800a6e0 <__sfputc_r>:
 800a6e0:	6893      	ldr	r3, [r2, #8]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	b410      	push	{r4}
 800a6e8:	6093      	str	r3, [r2, #8]
 800a6ea:	da08      	bge.n	800a6fe <__sfputc_r+0x1e>
 800a6ec:	6994      	ldr	r4, [r2, #24]
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	db01      	blt.n	800a6f6 <__sfputc_r+0x16>
 800a6f2:	290a      	cmp	r1, #10
 800a6f4:	d103      	bne.n	800a6fe <__sfputc_r+0x1e>
 800a6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fa:	f7fe ba6c 	b.w	8008bd6 <__swbuf_r>
 800a6fe:	6813      	ldr	r3, [r2, #0]
 800a700:	1c58      	adds	r0, r3, #1
 800a702:	6010      	str	r0, [r2, #0]
 800a704:	7019      	strb	r1, [r3, #0]
 800a706:	4608      	mov	r0, r1
 800a708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <__sfputs_r>:
 800a70e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a710:	4606      	mov	r6, r0
 800a712:	460f      	mov	r7, r1
 800a714:	4614      	mov	r4, r2
 800a716:	18d5      	adds	r5, r2, r3
 800a718:	42ac      	cmp	r4, r5
 800a71a:	d101      	bne.n	800a720 <__sfputs_r+0x12>
 800a71c:	2000      	movs	r0, #0
 800a71e:	e007      	b.n	800a730 <__sfputs_r+0x22>
 800a720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a724:	463a      	mov	r2, r7
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff ffda 	bl	800a6e0 <__sfputc_r>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d1f3      	bne.n	800a718 <__sfputs_r+0xa>
 800a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a734 <_vfiprintf_r>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	460d      	mov	r5, r1
 800a73a:	b09d      	sub	sp, #116	@ 0x74
 800a73c:	4614      	mov	r4, r2
 800a73e:	4698      	mov	r8, r3
 800a740:	4606      	mov	r6, r0
 800a742:	b118      	cbz	r0, 800a74c <_vfiprintf_r+0x18>
 800a744:	6a03      	ldr	r3, [r0, #32]
 800a746:	b90b      	cbnz	r3, 800a74c <_vfiprintf_r+0x18>
 800a748:	f7fe f904 	bl	8008954 <__sinit>
 800a74c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a74e:	07d9      	lsls	r1, r3, #31
 800a750:	d405      	bmi.n	800a75e <_vfiprintf_r+0x2a>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	059a      	lsls	r2, r3, #22
 800a756:	d402      	bmi.n	800a75e <_vfiprintf_r+0x2a>
 800a758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a75a:	f7ff fa93 	bl	8009c84 <__retarget_lock_acquire_recursive>
 800a75e:	89ab      	ldrh	r3, [r5, #12]
 800a760:	071b      	lsls	r3, r3, #28
 800a762:	d501      	bpl.n	800a768 <_vfiprintf_r+0x34>
 800a764:	692b      	ldr	r3, [r5, #16]
 800a766:	b99b      	cbnz	r3, 800a790 <_vfiprintf_r+0x5c>
 800a768:	4629      	mov	r1, r5
 800a76a:	4630      	mov	r0, r6
 800a76c:	f7fe fa72 	bl	8008c54 <__swsetup_r>
 800a770:	b170      	cbz	r0, 800a790 <_vfiprintf_r+0x5c>
 800a772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a774:	07dc      	lsls	r4, r3, #31
 800a776:	d504      	bpl.n	800a782 <_vfiprintf_r+0x4e>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	b01d      	add	sp, #116	@ 0x74
 800a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	0598      	lsls	r0, r3, #22
 800a786:	d4f7      	bmi.n	800a778 <_vfiprintf_r+0x44>
 800a788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a78a:	f7ff fa7d 	bl	8009c88 <__retarget_lock_release_recursive>
 800a78e:	e7f3      	b.n	800a778 <_vfiprintf_r+0x44>
 800a790:	2300      	movs	r3, #0
 800a792:	9309      	str	r3, [sp, #36]	@ 0x24
 800a794:	2320      	movs	r3, #32
 800a796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79e:	2330      	movs	r3, #48	@ 0x30
 800a7a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a950 <_vfiprintf_r+0x21c>
 800a7a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7a8:	f04f 0901 	mov.w	r9, #1
 800a7ac:	4623      	mov	r3, r4
 800a7ae:	469a      	mov	sl, r3
 800a7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b4:	b10a      	cbz	r2, 800a7ba <_vfiprintf_r+0x86>
 800a7b6:	2a25      	cmp	r2, #37	@ 0x25
 800a7b8:	d1f9      	bne.n	800a7ae <_vfiprintf_r+0x7a>
 800a7ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a7be:	d00b      	beq.n	800a7d8 <_vfiprintf_r+0xa4>
 800a7c0:	465b      	mov	r3, fp
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7ff ffa1 	bl	800a70e <__sfputs_r>
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	f000 80a7 	beq.w	800a920 <_vfiprintf_r+0x1ec>
 800a7d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d4:	445a      	add	r2, fp
 800a7d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 809f 	beq.w	800a920 <_vfiprintf_r+0x1ec>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ec:	f10a 0a01 	add.w	sl, sl, #1
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	9307      	str	r3, [sp, #28]
 800a7f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7fa:	4654      	mov	r4, sl
 800a7fc:	2205      	movs	r2, #5
 800a7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a802:	4853      	ldr	r0, [pc, #332]	@ (800a950 <_vfiprintf_r+0x21c>)
 800a804:	f7f5 fd04 	bl	8000210 <memchr>
 800a808:	9a04      	ldr	r2, [sp, #16]
 800a80a:	b9d8      	cbnz	r0, 800a844 <_vfiprintf_r+0x110>
 800a80c:	06d1      	lsls	r1, r2, #27
 800a80e:	bf44      	itt	mi
 800a810:	2320      	movmi	r3, #32
 800a812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a816:	0713      	lsls	r3, r2, #28
 800a818:	bf44      	itt	mi
 800a81a:	232b      	movmi	r3, #43	@ 0x2b
 800a81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a820:	f89a 3000 	ldrb.w	r3, [sl]
 800a824:	2b2a      	cmp	r3, #42	@ 0x2a
 800a826:	d015      	beq.n	800a854 <_vfiprintf_r+0x120>
 800a828:	9a07      	ldr	r2, [sp, #28]
 800a82a:	4654      	mov	r4, sl
 800a82c:	2000      	movs	r0, #0
 800a82e:	f04f 0c0a 	mov.w	ip, #10
 800a832:	4621      	mov	r1, r4
 800a834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a838:	3b30      	subs	r3, #48	@ 0x30
 800a83a:	2b09      	cmp	r3, #9
 800a83c:	d94b      	bls.n	800a8d6 <_vfiprintf_r+0x1a2>
 800a83e:	b1b0      	cbz	r0, 800a86e <_vfiprintf_r+0x13a>
 800a840:	9207      	str	r2, [sp, #28]
 800a842:	e014      	b.n	800a86e <_vfiprintf_r+0x13a>
 800a844:	eba0 0308 	sub.w	r3, r0, r8
 800a848:	fa09 f303 	lsl.w	r3, r9, r3
 800a84c:	4313      	orrs	r3, r2
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	46a2      	mov	sl, r4
 800a852:	e7d2      	b.n	800a7fa <_vfiprintf_r+0xc6>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	1d19      	adds	r1, r3, #4
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	9103      	str	r1, [sp, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bfbb      	ittet	lt
 800a860:	425b      	neglt	r3, r3
 800a862:	f042 0202 	orrlt.w	r2, r2, #2
 800a866:	9307      	strge	r3, [sp, #28]
 800a868:	9307      	strlt	r3, [sp, #28]
 800a86a:	bfb8      	it	lt
 800a86c:	9204      	strlt	r2, [sp, #16]
 800a86e:	7823      	ldrb	r3, [r4, #0]
 800a870:	2b2e      	cmp	r3, #46	@ 0x2e
 800a872:	d10a      	bne.n	800a88a <_vfiprintf_r+0x156>
 800a874:	7863      	ldrb	r3, [r4, #1]
 800a876:	2b2a      	cmp	r3, #42	@ 0x2a
 800a878:	d132      	bne.n	800a8e0 <_vfiprintf_r+0x1ac>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	1d1a      	adds	r2, r3, #4
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	9203      	str	r2, [sp, #12]
 800a882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a886:	3402      	adds	r4, #2
 800a888:	9305      	str	r3, [sp, #20]
 800a88a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a960 <_vfiprintf_r+0x22c>
 800a88e:	7821      	ldrb	r1, [r4, #0]
 800a890:	2203      	movs	r2, #3
 800a892:	4650      	mov	r0, sl
 800a894:	f7f5 fcbc 	bl	8000210 <memchr>
 800a898:	b138      	cbz	r0, 800a8aa <_vfiprintf_r+0x176>
 800a89a:	9b04      	ldr	r3, [sp, #16]
 800a89c:	eba0 000a 	sub.w	r0, r0, sl
 800a8a0:	2240      	movs	r2, #64	@ 0x40
 800a8a2:	4082      	lsls	r2, r0
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	3401      	adds	r4, #1
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ae:	4829      	ldr	r0, [pc, #164]	@ (800a954 <_vfiprintf_r+0x220>)
 800a8b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8b4:	2206      	movs	r2, #6
 800a8b6:	f7f5 fcab 	bl	8000210 <memchr>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d03f      	beq.n	800a93e <_vfiprintf_r+0x20a>
 800a8be:	4b26      	ldr	r3, [pc, #152]	@ (800a958 <_vfiprintf_r+0x224>)
 800a8c0:	bb1b      	cbnz	r3, 800a90a <_vfiprintf_r+0x1d6>
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	f023 0307 	bic.w	r3, r3, #7
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d0:	443b      	add	r3, r7
 800a8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d4:	e76a      	b.n	800a7ac <_vfiprintf_r+0x78>
 800a8d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8da:	460c      	mov	r4, r1
 800a8dc:	2001      	movs	r0, #1
 800a8de:	e7a8      	b.n	800a832 <_vfiprintf_r+0xfe>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	3401      	adds	r4, #1
 800a8e4:	9305      	str	r3, [sp, #20]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	f04f 0c0a 	mov.w	ip, #10
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f2:	3a30      	subs	r2, #48	@ 0x30
 800a8f4:	2a09      	cmp	r2, #9
 800a8f6:	d903      	bls.n	800a900 <_vfiprintf_r+0x1cc>
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0c6      	beq.n	800a88a <_vfiprintf_r+0x156>
 800a8fc:	9105      	str	r1, [sp, #20]
 800a8fe:	e7c4      	b.n	800a88a <_vfiprintf_r+0x156>
 800a900:	fb0c 2101 	mla	r1, ip, r1, r2
 800a904:	4604      	mov	r4, r0
 800a906:	2301      	movs	r3, #1
 800a908:	e7f0      	b.n	800a8ec <_vfiprintf_r+0x1b8>
 800a90a:	ab03      	add	r3, sp, #12
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	462a      	mov	r2, r5
 800a910:	4b12      	ldr	r3, [pc, #72]	@ (800a95c <_vfiprintf_r+0x228>)
 800a912:	a904      	add	r1, sp, #16
 800a914:	4630      	mov	r0, r6
 800a916:	f3af 8000 	nop.w
 800a91a:	4607      	mov	r7, r0
 800a91c:	1c78      	adds	r0, r7, #1
 800a91e:	d1d6      	bne.n	800a8ce <_vfiprintf_r+0x19a>
 800a920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a922:	07d9      	lsls	r1, r3, #31
 800a924:	d405      	bmi.n	800a932 <_vfiprintf_r+0x1fe>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	059a      	lsls	r2, r3, #22
 800a92a:	d402      	bmi.n	800a932 <_vfiprintf_r+0x1fe>
 800a92c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a92e:	f7ff f9ab 	bl	8009c88 <__retarget_lock_release_recursive>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	065b      	lsls	r3, r3, #25
 800a936:	f53f af1f 	bmi.w	800a778 <_vfiprintf_r+0x44>
 800a93a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a93c:	e71e      	b.n	800a77c <_vfiprintf_r+0x48>
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	462a      	mov	r2, r5
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <_vfiprintf_r+0x228>)
 800a946:	a904      	add	r1, sp, #16
 800a948:	4630      	mov	r0, r6
 800a94a:	f000 f879 	bl	800aa40 <_printf_i>
 800a94e:	e7e4      	b.n	800a91a <_vfiprintf_r+0x1e6>
 800a950:	0800bde5 	.word	0x0800bde5
 800a954:	0800bdef 	.word	0x0800bdef
 800a958:	00000000 	.word	0x00000000
 800a95c:	0800a70f 	.word	0x0800a70f
 800a960:	0800bdeb 	.word	0x0800bdeb

0800a964 <_printf_common>:
 800a964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a968:	4616      	mov	r6, r2
 800a96a:	4698      	mov	r8, r3
 800a96c:	688a      	ldr	r2, [r1, #8]
 800a96e:	690b      	ldr	r3, [r1, #16]
 800a970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a974:	4293      	cmp	r3, r2
 800a976:	bfb8      	it	lt
 800a978:	4613      	movlt	r3, r2
 800a97a:	6033      	str	r3, [r6, #0]
 800a97c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a980:	4607      	mov	r7, r0
 800a982:	460c      	mov	r4, r1
 800a984:	b10a      	cbz	r2, 800a98a <_printf_common+0x26>
 800a986:	3301      	adds	r3, #1
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	0699      	lsls	r1, r3, #26
 800a98e:	bf42      	ittt	mi
 800a990:	6833      	ldrmi	r3, [r6, #0]
 800a992:	3302      	addmi	r3, #2
 800a994:	6033      	strmi	r3, [r6, #0]
 800a996:	6825      	ldr	r5, [r4, #0]
 800a998:	f015 0506 	ands.w	r5, r5, #6
 800a99c:	d106      	bne.n	800a9ac <_printf_common+0x48>
 800a99e:	f104 0a19 	add.w	sl, r4, #25
 800a9a2:	68e3      	ldr	r3, [r4, #12]
 800a9a4:	6832      	ldr	r2, [r6, #0]
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	42ab      	cmp	r3, r5
 800a9aa:	dc26      	bgt.n	800a9fa <_printf_common+0x96>
 800a9ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	3b00      	subs	r3, #0
 800a9b4:	bf18      	it	ne
 800a9b6:	2301      	movne	r3, #1
 800a9b8:	0692      	lsls	r2, r2, #26
 800a9ba:	d42b      	bmi.n	800aa14 <_printf_common+0xb0>
 800a9bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9c0:	4641      	mov	r1, r8
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	47c8      	blx	r9
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d01e      	beq.n	800aa08 <_printf_common+0xa4>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	f003 0306 	and.w	r3, r3, #6
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	bf02      	ittt	eq
 800a9d6:	68e5      	ldreq	r5, [r4, #12]
 800a9d8:	6833      	ldreq	r3, [r6, #0]
 800a9da:	1aed      	subeq	r5, r5, r3
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	bf0c      	ite	eq
 800a9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9e4:	2500      	movne	r5, #0
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bfc4      	itt	gt
 800a9ea:	1a9b      	subgt	r3, r3, r2
 800a9ec:	18ed      	addgt	r5, r5, r3
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	341a      	adds	r4, #26
 800a9f2:	42b5      	cmp	r5, r6
 800a9f4:	d11a      	bne.n	800aa2c <_printf_common+0xc8>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	e008      	b.n	800aa0c <_printf_common+0xa8>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4652      	mov	r2, sl
 800a9fe:	4641      	mov	r1, r8
 800aa00:	4638      	mov	r0, r7
 800aa02:	47c8      	blx	r9
 800aa04:	3001      	adds	r0, #1
 800aa06:	d103      	bne.n	800aa10 <_printf_common+0xac>
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa10:	3501      	adds	r5, #1
 800aa12:	e7c6      	b.n	800a9a2 <_printf_common+0x3e>
 800aa14:	18e1      	adds	r1, r4, r3
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	2030      	movs	r0, #48	@ 0x30
 800aa1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa1e:	4422      	add	r2, r4
 800aa20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa28:	3302      	adds	r3, #2
 800aa2a:	e7c7      	b.n	800a9bc <_printf_common+0x58>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4622      	mov	r2, r4
 800aa30:	4641      	mov	r1, r8
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c8      	blx	r9
 800aa36:	3001      	adds	r0, #1
 800aa38:	d0e6      	beq.n	800aa08 <_printf_common+0xa4>
 800aa3a:	3601      	adds	r6, #1
 800aa3c:	e7d9      	b.n	800a9f2 <_printf_common+0x8e>
	...

0800aa40 <_printf_i>:
 800aa40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa44:	7e0f      	ldrb	r7, [r1, #24]
 800aa46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa48:	2f78      	cmp	r7, #120	@ 0x78
 800aa4a:	4691      	mov	r9, r2
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	469a      	mov	sl, r3
 800aa52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa56:	d807      	bhi.n	800aa68 <_printf_i+0x28>
 800aa58:	2f62      	cmp	r7, #98	@ 0x62
 800aa5a:	d80a      	bhi.n	800aa72 <_printf_i+0x32>
 800aa5c:	2f00      	cmp	r7, #0
 800aa5e:	f000 80d1 	beq.w	800ac04 <_printf_i+0x1c4>
 800aa62:	2f58      	cmp	r7, #88	@ 0x58
 800aa64:	f000 80b8 	beq.w	800abd8 <_printf_i+0x198>
 800aa68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa70:	e03a      	b.n	800aae8 <_printf_i+0xa8>
 800aa72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa76:	2b15      	cmp	r3, #21
 800aa78:	d8f6      	bhi.n	800aa68 <_printf_i+0x28>
 800aa7a:	a101      	add	r1, pc, #4	@ (adr r1, 800aa80 <_printf_i+0x40>)
 800aa7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa80:	0800aad9 	.word	0x0800aad9
 800aa84:	0800aaed 	.word	0x0800aaed
 800aa88:	0800aa69 	.word	0x0800aa69
 800aa8c:	0800aa69 	.word	0x0800aa69
 800aa90:	0800aa69 	.word	0x0800aa69
 800aa94:	0800aa69 	.word	0x0800aa69
 800aa98:	0800aaed 	.word	0x0800aaed
 800aa9c:	0800aa69 	.word	0x0800aa69
 800aaa0:	0800aa69 	.word	0x0800aa69
 800aaa4:	0800aa69 	.word	0x0800aa69
 800aaa8:	0800aa69 	.word	0x0800aa69
 800aaac:	0800abeb 	.word	0x0800abeb
 800aab0:	0800ab17 	.word	0x0800ab17
 800aab4:	0800aba5 	.word	0x0800aba5
 800aab8:	0800aa69 	.word	0x0800aa69
 800aabc:	0800aa69 	.word	0x0800aa69
 800aac0:	0800ac0d 	.word	0x0800ac0d
 800aac4:	0800aa69 	.word	0x0800aa69
 800aac8:	0800ab17 	.word	0x0800ab17
 800aacc:	0800aa69 	.word	0x0800aa69
 800aad0:	0800aa69 	.word	0x0800aa69
 800aad4:	0800abad 	.word	0x0800abad
 800aad8:	6833      	ldr	r3, [r6, #0]
 800aada:	1d1a      	adds	r2, r3, #4
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6032      	str	r2, [r6, #0]
 800aae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aae8:	2301      	movs	r3, #1
 800aaea:	e09c      	b.n	800ac26 <_printf_i+0x1e6>
 800aaec:	6833      	ldr	r3, [r6, #0]
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	1d19      	adds	r1, r3, #4
 800aaf2:	6031      	str	r1, [r6, #0]
 800aaf4:	0606      	lsls	r6, r0, #24
 800aaf6:	d501      	bpl.n	800aafc <_printf_i+0xbc>
 800aaf8:	681d      	ldr	r5, [r3, #0]
 800aafa:	e003      	b.n	800ab04 <_printf_i+0xc4>
 800aafc:	0645      	lsls	r5, r0, #25
 800aafe:	d5fb      	bpl.n	800aaf8 <_printf_i+0xb8>
 800ab00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab04:	2d00      	cmp	r5, #0
 800ab06:	da03      	bge.n	800ab10 <_printf_i+0xd0>
 800ab08:	232d      	movs	r3, #45	@ 0x2d
 800ab0a:	426d      	negs	r5, r5
 800ab0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab10:	4858      	ldr	r0, [pc, #352]	@ (800ac74 <_printf_i+0x234>)
 800ab12:	230a      	movs	r3, #10
 800ab14:	e011      	b.n	800ab3a <_printf_i+0xfa>
 800ab16:	6821      	ldr	r1, [r4, #0]
 800ab18:	6833      	ldr	r3, [r6, #0]
 800ab1a:	0608      	lsls	r0, r1, #24
 800ab1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab20:	d402      	bmi.n	800ab28 <_printf_i+0xe8>
 800ab22:	0649      	lsls	r1, r1, #25
 800ab24:	bf48      	it	mi
 800ab26:	b2ad      	uxthmi	r5, r5
 800ab28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab2a:	4852      	ldr	r0, [pc, #328]	@ (800ac74 <_printf_i+0x234>)
 800ab2c:	6033      	str	r3, [r6, #0]
 800ab2e:	bf14      	ite	ne
 800ab30:	230a      	movne	r3, #10
 800ab32:	2308      	moveq	r3, #8
 800ab34:	2100      	movs	r1, #0
 800ab36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab3a:	6866      	ldr	r6, [r4, #4]
 800ab3c:	60a6      	str	r6, [r4, #8]
 800ab3e:	2e00      	cmp	r6, #0
 800ab40:	db05      	blt.n	800ab4e <_printf_i+0x10e>
 800ab42:	6821      	ldr	r1, [r4, #0]
 800ab44:	432e      	orrs	r6, r5
 800ab46:	f021 0104 	bic.w	r1, r1, #4
 800ab4a:	6021      	str	r1, [r4, #0]
 800ab4c:	d04b      	beq.n	800abe6 <_printf_i+0x1a6>
 800ab4e:	4616      	mov	r6, r2
 800ab50:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab54:	fb03 5711 	mls	r7, r3, r1, r5
 800ab58:	5dc7      	ldrb	r7, [r0, r7]
 800ab5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab5e:	462f      	mov	r7, r5
 800ab60:	42bb      	cmp	r3, r7
 800ab62:	460d      	mov	r5, r1
 800ab64:	d9f4      	bls.n	800ab50 <_printf_i+0x110>
 800ab66:	2b08      	cmp	r3, #8
 800ab68:	d10b      	bne.n	800ab82 <_printf_i+0x142>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	07df      	lsls	r7, r3, #31
 800ab6e:	d508      	bpl.n	800ab82 <_printf_i+0x142>
 800ab70:	6923      	ldr	r3, [r4, #16]
 800ab72:	6861      	ldr	r1, [r4, #4]
 800ab74:	4299      	cmp	r1, r3
 800ab76:	bfde      	ittt	le
 800ab78:	2330      	movle	r3, #48	@ 0x30
 800ab7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab82:	1b92      	subs	r2, r2, r6
 800ab84:	6122      	str	r2, [r4, #16]
 800ab86:	f8cd a000 	str.w	sl, [sp]
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	aa03      	add	r2, sp, #12
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4640      	mov	r0, r8
 800ab92:	f7ff fee7 	bl	800a964 <_printf_common>
 800ab96:	3001      	adds	r0, #1
 800ab98:	d14a      	bne.n	800ac30 <_printf_i+0x1f0>
 800ab9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9e:	b004      	add	sp, #16
 800aba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	f043 0320 	orr.w	r3, r3, #32
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	4832      	ldr	r0, [pc, #200]	@ (800ac78 <_printf_i+0x238>)
 800abae:	2778      	movs	r7, #120	@ 0x78
 800abb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	6831      	ldr	r1, [r6, #0]
 800abb8:	061f      	lsls	r7, r3, #24
 800abba:	f851 5b04 	ldr.w	r5, [r1], #4
 800abbe:	d402      	bmi.n	800abc6 <_printf_i+0x186>
 800abc0:	065f      	lsls	r7, r3, #25
 800abc2:	bf48      	it	mi
 800abc4:	b2ad      	uxthmi	r5, r5
 800abc6:	6031      	str	r1, [r6, #0]
 800abc8:	07d9      	lsls	r1, r3, #31
 800abca:	bf44      	itt	mi
 800abcc:	f043 0320 	orrmi.w	r3, r3, #32
 800abd0:	6023      	strmi	r3, [r4, #0]
 800abd2:	b11d      	cbz	r5, 800abdc <_printf_i+0x19c>
 800abd4:	2310      	movs	r3, #16
 800abd6:	e7ad      	b.n	800ab34 <_printf_i+0xf4>
 800abd8:	4826      	ldr	r0, [pc, #152]	@ (800ac74 <_printf_i+0x234>)
 800abda:	e7e9      	b.n	800abb0 <_printf_i+0x170>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	f023 0320 	bic.w	r3, r3, #32
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	e7f6      	b.n	800abd4 <_printf_i+0x194>
 800abe6:	4616      	mov	r6, r2
 800abe8:	e7bd      	b.n	800ab66 <_printf_i+0x126>
 800abea:	6833      	ldr	r3, [r6, #0]
 800abec:	6825      	ldr	r5, [r4, #0]
 800abee:	6961      	ldr	r1, [r4, #20]
 800abf0:	1d18      	adds	r0, r3, #4
 800abf2:	6030      	str	r0, [r6, #0]
 800abf4:	062e      	lsls	r6, r5, #24
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	d501      	bpl.n	800abfe <_printf_i+0x1be>
 800abfa:	6019      	str	r1, [r3, #0]
 800abfc:	e002      	b.n	800ac04 <_printf_i+0x1c4>
 800abfe:	0668      	lsls	r0, r5, #25
 800ac00:	d5fb      	bpl.n	800abfa <_printf_i+0x1ba>
 800ac02:	8019      	strh	r1, [r3, #0]
 800ac04:	2300      	movs	r3, #0
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	4616      	mov	r6, r2
 800ac0a:	e7bc      	b.n	800ab86 <_printf_i+0x146>
 800ac0c:	6833      	ldr	r3, [r6, #0]
 800ac0e:	1d1a      	adds	r2, r3, #4
 800ac10:	6032      	str	r2, [r6, #0]
 800ac12:	681e      	ldr	r6, [r3, #0]
 800ac14:	6862      	ldr	r2, [r4, #4]
 800ac16:	2100      	movs	r1, #0
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7f5 faf9 	bl	8000210 <memchr>
 800ac1e:	b108      	cbz	r0, 800ac24 <_printf_i+0x1e4>
 800ac20:	1b80      	subs	r0, r0, r6
 800ac22:	6060      	str	r0, [r4, #4]
 800ac24:	6863      	ldr	r3, [r4, #4]
 800ac26:	6123      	str	r3, [r4, #16]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac2e:	e7aa      	b.n	800ab86 <_printf_i+0x146>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	4632      	mov	r2, r6
 800ac34:	4649      	mov	r1, r9
 800ac36:	4640      	mov	r0, r8
 800ac38:	47d0      	blx	sl
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d0ad      	beq.n	800ab9a <_printf_i+0x15a>
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	079b      	lsls	r3, r3, #30
 800ac42:	d413      	bmi.n	800ac6c <_printf_i+0x22c>
 800ac44:	68e0      	ldr	r0, [r4, #12]
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	4298      	cmp	r0, r3
 800ac4a:	bfb8      	it	lt
 800ac4c:	4618      	movlt	r0, r3
 800ac4e:	e7a6      	b.n	800ab9e <_printf_i+0x15e>
 800ac50:	2301      	movs	r3, #1
 800ac52:	4632      	mov	r2, r6
 800ac54:	4649      	mov	r1, r9
 800ac56:	4640      	mov	r0, r8
 800ac58:	47d0      	blx	sl
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d09d      	beq.n	800ab9a <_printf_i+0x15a>
 800ac5e:	3501      	adds	r5, #1
 800ac60:	68e3      	ldr	r3, [r4, #12]
 800ac62:	9903      	ldr	r1, [sp, #12]
 800ac64:	1a5b      	subs	r3, r3, r1
 800ac66:	42ab      	cmp	r3, r5
 800ac68:	dcf2      	bgt.n	800ac50 <_printf_i+0x210>
 800ac6a:	e7eb      	b.n	800ac44 <_printf_i+0x204>
 800ac6c:	2500      	movs	r5, #0
 800ac6e:	f104 0619 	add.w	r6, r4, #25
 800ac72:	e7f5      	b.n	800ac60 <_printf_i+0x220>
 800ac74:	0800bdf6 	.word	0x0800bdf6
 800ac78:	0800be07 	.word	0x0800be07

0800ac7c <_scanf_chars>:
 800ac7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac80:	4615      	mov	r5, r2
 800ac82:	688a      	ldr	r2, [r1, #8]
 800ac84:	4680      	mov	r8, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	b932      	cbnz	r2, 800ac98 <_scanf_chars+0x1c>
 800ac8a:	698a      	ldr	r2, [r1, #24]
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	bf14      	ite	ne
 800ac90:	f04f 32ff 	movne.w	r2, #4294967295
 800ac94:	2201      	moveq	r2, #1
 800ac96:	608a      	str	r2, [r1, #8]
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ad2c <_scanf_chars+0xb0>
 800ac9e:	06d1      	lsls	r1, r2, #27
 800aca0:	bf5f      	itttt	pl
 800aca2:	681a      	ldrpl	r2, [r3, #0]
 800aca4:	1d11      	addpl	r1, r2, #4
 800aca6:	6019      	strpl	r1, [r3, #0]
 800aca8:	6816      	ldrpl	r6, [r2, #0]
 800acaa:	2700      	movs	r7, #0
 800acac:	69a0      	ldr	r0, [r4, #24]
 800acae:	b188      	cbz	r0, 800acd4 <_scanf_chars+0x58>
 800acb0:	2801      	cmp	r0, #1
 800acb2:	d107      	bne.n	800acc4 <_scanf_chars+0x48>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	781a      	ldrb	r2, [r3, #0]
 800acb8:	6963      	ldr	r3, [r4, #20]
 800acba:	5c9b      	ldrb	r3, [r3, r2]
 800acbc:	b953      	cbnz	r3, 800acd4 <_scanf_chars+0x58>
 800acbe:	2f00      	cmp	r7, #0
 800acc0:	d031      	beq.n	800ad26 <_scanf_chars+0xaa>
 800acc2:	e022      	b.n	800ad0a <_scanf_chars+0x8e>
 800acc4:	2802      	cmp	r0, #2
 800acc6:	d120      	bne.n	800ad0a <_scanf_chars+0x8e>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800acd0:	071b      	lsls	r3, r3, #28
 800acd2:	d41a      	bmi.n	800ad0a <_scanf_chars+0x8e>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	06da      	lsls	r2, r3, #27
 800acd8:	bf5e      	ittt	pl
 800acda:	682b      	ldrpl	r3, [r5, #0]
 800acdc:	781b      	ldrbpl	r3, [r3, #0]
 800acde:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ace2:	682a      	ldr	r2, [r5, #0]
 800ace4:	686b      	ldr	r3, [r5, #4]
 800ace6:	3201      	adds	r2, #1
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	68a2      	ldr	r2, [r4, #8]
 800acec:	3b01      	subs	r3, #1
 800acee:	3a01      	subs	r2, #1
 800acf0:	606b      	str	r3, [r5, #4]
 800acf2:	3701      	adds	r7, #1
 800acf4:	60a2      	str	r2, [r4, #8]
 800acf6:	b142      	cbz	r2, 800ad0a <_scanf_chars+0x8e>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dcd7      	bgt.n	800acac <_scanf_chars+0x30>
 800acfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ad00:	4629      	mov	r1, r5
 800ad02:	4640      	mov	r0, r8
 800ad04:	4798      	blx	r3
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d0d0      	beq.n	800acac <_scanf_chars+0x30>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	f013 0310 	ands.w	r3, r3, #16
 800ad10:	d105      	bne.n	800ad1e <_scanf_chars+0xa2>
 800ad12:	68e2      	ldr	r2, [r4, #12]
 800ad14:	3201      	adds	r2, #1
 800ad16:	60e2      	str	r2, [r4, #12]
 800ad18:	69a2      	ldr	r2, [r4, #24]
 800ad1a:	b102      	cbz	r2, 800ad1e <_scanf_chars+0xa2>
 800ad1c:	7033      	strb	r3, [r6, #0]
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	443b      	add	r3, r7
 800ad22:	6123      	str	r3, [r4, #16]
 800ad24:	2000      	movs	r0, #0
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800bb91 	.word	0x0800bb91

0800ad30 <_scanf_i>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	4698      	mov	r8, r3
 800ad36:	4b74      	ldr	r3, [pc, #464]	@ (800af08 <_scanf_i+0x1d8>)
 800ad38:	460c      	mov	r4, r1
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	4616      	mov	r6, r2
 800ad3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad42:	b087      	sub	sp, #28
 800ad44:	ab03      	add	r3, sp, #12
 800ad46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ad4a:	4b70      	ldr	r3, [pc, #448]	@ (800af0c <_scanf_i+0x1dc>)
 800ad4c:	69a1      	ldr	r1, [r4, #24]
 800ad4e:	4a70      	ldr	r2, [pc, #448]	@ (800af10 <_scanf_i+0x1e0>)
 800ad50:	2903      	cmp	r1, #3
 800ad52:	bf08      	it	eq
 800ad54:	461a      	moveq	r2, r3
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	9201      	str	r2, [sp, #4]
 800ad5a:	1e5a      	subs	r2, r3, #1
 800ad5c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ad60:	bf88      	it	hi
 800ad62:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ad66:	4627      	mov	r7, r4
 800ad68:	bf82      	ittt	hi
 800ad6a:	eb03 0905 	addhi.w	r9, r3, r5
 800ad6e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ad72:	60a3      	strhi	r3, [r4, #8]
 800ad74:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ad78:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ad7c:	bf98      	it	ls
 800ad7e:	f04f 0900 	movls.w	r9, #0
 800ad82:	6023      	str	r3, [r4, #0]
 800ad84:	463d      	mov	r5, r7
 800ad86:	f04f 0b00 	mov.w	fp, #0
 800ad8a:	6831      	ldr	r1, [r6, #0]
 800ad8c:	ab03      	add	r3, sp, #12
 800ad8e:	7809      	ldrb	r1, [r1, #0]
 800ad90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ad94:	2202      	movs	r2, #2
 800ad96:	f7f5 fa3b 	bl	8000210 <memchr>
 800ad9a:	b328      	cbz	r0, 800ade8 <_scanf_i+0xb8>
 800ad9c:	f1bb 0f01 	cmp.w	fp, #1
 800ada0:	d159      	bne.n	800ae56 <_scanf_i+0x126>
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	b92a      	cbnz	r2, 800adb2 <_scanf_i+0x82>
 800ada6:	6822      	ldr	r2, [r4, #0]
 800ada8:	2108      	movs	r1, #8
 800adaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adae:	6061      	str	r1, [r4, #4]
 800adb0:	6022      	str	r2, [r4, #0]
 800adb2:	6822      	ldr	r2, [r4, #0]
 800adb4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800adb8:	6022      	str	r2, [r4, #0]
 800adba:	68a2      	ldr	r2, [r4, #8]
 800adbc:	1e51      	subs	r1, r2, #1
 800adbe:	60a1      	str	r1, [r4, #8]
 800adc0:	b192      	cbz	r2, 800ade8 <_scanf_i+0xb8>
 800adc2:	6832      	ldr	r2, [r6, #0]
 800adc4:	1c51      	adds	r1, r2, #1
 800adc6:	6031      	str	r1, [r6, #0]
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	f805 2b01 	strb.w	r2, [r5], #1
 800adce:	6872      	ldr	r2, [r6, #4]
 800add0:	3a01      	subs	r2, #1
 800add2:	2a00      	cmp	r2, #0
 800add4:	6072      	str	r2, [r6, #4]
 800add6:	dc07      	bgt.n	800ade8 <_scanf_i+0xb8>
 800add8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800addc:	4631      	mov	r1, r6
 800adde:	4650      	mov	r0, sl
 800ade0:	4790      	blx	r2
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f040 8085 	bne.w	800aef2 <_scanf_i+0x1c2>
 800ade8:	f10b 0b01 	add.w	fp, fp, #1
 800adec:	f1bb 0f03 	cmp.w	fp, #3
 800adf0:	d1cb      	bne.n	800ad8a <_scanf_i+0x5a>
 800adf2:	6863      	ldr	r3, [r4, #4]
 800adf4:	b90b      	cbnz	r3, 800adfa <_scanf_i+0xca>
 800adf6:	230a      	movs	r3, #10
 800adf8:	6063      	str	r3, [r4, #4]
 800adfa:	6863      	ldr	r3, [r4, #4]
 800adfc:	4945      	ldr	r1, [pc, #276]	@ (800af14 <_scanf_i+0x1e4>)
 800adfe:	6960      	ldr	r0, [r4, #20]
 800ae00:	1ac9      	subs	r1, r1, r3
 800ae02:	f000 f9dd 	bl	800b1c0 <__sccl>
 800ae06:	f04f 0b00 	mov.w	fp, #0
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d03d      	beq.n	800ae8e <_scanf_i+0x15e>
 800ae12:	6831      	ldr	r1, [r6, #0]
 800ae14:	6960      	ldr	r0, [r4, #20]
 800ae16:	f891 c000 	ldrb.w	ip, [r1]
 800ae1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d035      	beq.n	800ae8e <_scanf_i+0x15e>
 800ae22:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ae26:	d124      	bne.n	800ae72 <_scanf_i+0x142>
 800ae28:	0510      	lsls	r0, r2, #20
 800ae2a:	d522      	bpl.n	800ae72 <_scanf_i+0x142>
 800ae2c:	f10b 0b01 	add.w	fp, fp, #1
 800ae30:	f1b9 0f00 	cmp.w	r9, #0
 800ae34:	d003      	beq.n	800ae3e <_scanf_i+0x10e>
 800ae36:	3301      	adds	r3, #1
 800ae38:	f109 39ff 	add.w	r9, r9, #4294967295
 800ae3c:	60a3      	str	r3, [r4, #8]
 800ae3e:	6873      	ldr	r3, [r6, #4]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	6073      	str	r3, [r6, #4]
 800ae46:	dd1b      	ble.n	800ae80 <_scanf_i+0x150>
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	6033      	str	r3, [r6, #0]
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	e7d9      	b.n	800ae0a <_scanf_i+0xda>
 800ae56:	f1bb 0f02 	cmp.w	fp, #2
 800ae5a:	d1ae      	bne.n	800adba <_scanf_i+0x8a>
 800ae5c:	6822      	ldr	r2, [r4, #0]
 800ae5e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ae62:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ae66:	d1c4      	bne.n	800adf2 <_scanf_i+0xc2>
 800ae68:	2110      	movs	r1, #16
 800ae6a:	6061      	str	r1, [r4, #4]
 800ae6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae70:	e7a2      	b.n	800adb8 <_scanf_i+0x88>
 800ae72:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ae76:	6022      	str	r2, [r4, #0]
 800ae78:	780b      	ldrb	r3, [r1, #0]
 800ae7a:	f805 3b01 	strb.w	r3, [r5], #1
 800ae7e:	e7de      	b.n	800ae3e <_scanf_i+0x10e>
 800ae80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ae84:	4631      	mov	r1, r6
 800ae86:	4650      	mov	r0, sl
 800ae88:	4798      	blx	r3
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d0df      	beq.n	800ae4e <_scanf_i+0x11e>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	05d9      	lsls	r1, r3, #23
 800ae92:	d50d      	bpl.n	800aeb0 <_scanf_i+0x180>
 800ae94:	42bd      	cmp	r5, r7
 800ae96:	d909      	bls.n	800aeac <_scanf_i+0x17c>
 800ae98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ae9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aea0:	4632      	mov	r2, r6
 800aea2:	4650      	mov	r0, sl
 800aea4:	4798      	blx	r3
 800aea6:	f105 39ff 	add.w	r9, r5, #4294967295
 800aeaa:	464d      	mov	r5, r9
 800aeac:	42bd      	cmp	r5, r7
 800aeae:	d028      	beq.n	800af02 <_scanf_i+0x1d2>
 800aeb0:	6822      	ldr	r2, [r4, #0]
 800aeb2:	f012 0210 	ands.w	r2, r2, #16
 800aeb6:	d113      	bne.n	800aee0 <_scanf_i+0x1b0>
 800aeb8:	702a      	strb	r2, [r5, #0]
 800aeba:	6863      	ldr	r3, [r4, #4]
 800aebc:	9e01      	ldr	r6, [sp, #4]
 800aebe:	4639      	mov	r1, r7
 800aec0:	4650      	mov	r0, sl
 800aec2:	47b0      	blx	r6
 800aec4:	f8d8 3000 	ldr.w	r3, [r8]
 800aec8:	6821      	ldr	r1, [r4, #0]
 800aeca:	1d1a      	adds	r2, r3, #4
 800aecc:	f8c8 2000 	str.w	r2, [r8]
 800aed0:	f011 0f20 	tst.w	r1, #32
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	d00f      	beq.n	800aef8 <_scanf_i+0x1c8>
 800aed8:	6018      	str	r0, [r3, #0]
 800aeda:	68e3      	ldr	r3, [r4, #12]
 800aedc:	3301      	adds	r3, #1
 800aede:	60e3      	str	r3, [r4, #12]
 800aee0:	6923      	ldr	r3, [r4, #16]
 800aee2:	1bed      	subs	r5, r5, r7
 800aee4:	445d      	add	r5, fp
 800aee6:	442b      	add	r3, r5
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	2000      	movs	r0, #0
 800aeec:	b007      	add	sp, #28
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	f04f 0b00 	mov.w	fp, #0
 800aef6:	e7ca      	b.n	800ae8e <_scanf_i+0x15e>
 800aef8:	07ca      	lsls	r2, r1, #31
 800aefa:	bf4c      	ite	mi
 800aefc:	8018      	strhmi	r0, [r3, #0]
 800aefe:	6018      	strpl	r0, [r3, #0]
 800af00:	e7eb      	b.n	800aeda <_scanf_i+0x1aa>
 800af02:	2001      	movs	r0, #1
 800af04:	e7f2      	b.n	800aeec <_scanf_i+0x1bc>
 800af06:	bf00      	nop
 800af08:	0800babc 	.word	0x0800babc
 800af0c:	08008825 	.word	0x08008825
 800af10:	0800a079 	.word	0x0800a079
 800af14:	0800be28 	.word	0x0800be28

0800af18 <__sflush_r>:
 800af18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	0716      	lsls	r6, r2, #28
 800af22:	4605      	mov	r5, r0
 800af24:	460c      	mov	r4, r1
 800af26:	d454      	bmi.n	800afd2 <__sflush_r+0xba>
 800af28:	684b      	ldr	r3, [r1, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	dc02      	bgt.n	800af34 <__sflush_r+0x1c>
 800af2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af30:	2b00      	cmp	r3, #0
 800af32:	dd48      	ble.n	800afc6 <__sflush_r+0xae>
 800af34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af36:	2e00      	cmp	r6, #0
 800af38:	d045      	beq.n	800afc6 <__sflush_r+0xae>
 800af3a:	2300      	movs	r3, #0
 800af3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af40:	682f      	ldr	r7, [r5, #0]
 800af42:	6a21      	ldr	r1, [r4, #32]
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	d030      	beq.n	800afaa <__sflush_r+0x92>
 800af48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	0759      	lsls	r1, r3, #29
 800af4e:	d505      	bpl.n	800af5c <__sflush_r+0x44>
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	1ad2      	subs	r2, r2, r3
 800af54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af56:	b10b      	cbz	r3, 800af5c <__sflush_r+0x44>
 800af58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af5a:	1ad2      	subs	r2, r2, r3
 800af5c:	2300      	movs	r3, #0
 800af5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af60:	6a21      	ldr	r1, [r4, #32]
 800af62:	4628      	mov	r0, r5
 800af64:	47b0      	blx	r6
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	d106      	bne.n	800af7a <__sflush_r+0x62>
 800af6c:	6829      	ldr	r1, [r5, #0]
 800af6e:	291d      	cmp	r1, #29
 800af70:	d82b      	bhi.n	800afca <__sflush_r+0xb2>
 800af72:	4a2a      	ldr	r2, [pc, #168]	@ (800b01c <__sflush_r+0x104>)
 800af74:	40ca      	lsrs	r2, r1
 800af76:	07d6      	lsls	r6, r2, #31
 800af78:	d527      	bpl.n	800afca <__sflush_r+0xb2>
 800af7a:	2200      	movs	r2, #0
 800af7c:	6062      	str	r2, [r4, #4]
 800af7e:	04d9      	lsls	r1, r3, #19
 800af80:	6922      	ldr	r2, [r4, #16]
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	d504      	bpl.n	800af90 <__sflush_r+0x78>
 800af86:	1c42      	adds	r2, r0, #1
 800af88:	d101      	bne.n	800af8e <__sflush_r+0x76>
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	b903      	cbnz	r3, 800af90 <__sflush_r+0x78>
 800af8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800af90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af92:	602f      	str	r7, [r5, #0]
 800af94:	b1b9      	cbz	r1, 800afc6 <__sflush_r+0xae>
 800af96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af9a:	4299      	cmp	r1, r3
 800af9c:	d002      	beq.n	800afa4 <__sflush_r+0x8c>
 800af9e:	4628      	mov	r0, r5
 800afa0:	f7fe feb0 	bl	8009d04 <_free_r>
 800afa4:	2300      	movs	r3, #0
 800afa6:	6363      	str	r3, [r4, #52]	@ 0x34
 800afa8:	e00d      	b.n	800afc6 <__sflush_r+0xae>
 800afaa:	2301      	movs	r3, #1
 800afac:	4628      	mov	r0, r5
 800afae:	47b0      	blx	r6
 800afb0:	4602      	mov	r2, r0
 800afb2:	1c50      	adds	r0, r2, #1
 800afb4:	d1c9      	bne.n	800af4a <__sflush_r+0x32>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0c6      	beq.n	800af4a <__sflush_r+0x32>
 800afbc:	2b1d      	cmp	r3, #29
 800afbe:	d001      	beq.n	800afc4 <__sflush_r+0xac>
 800afc0:	2b16      	cmp	r3, #22
 800afc2:	d11e      	bne.n	800b002 <__sflush_r+0xea>
 800afc4:	602f      	str	r7, [r5, #0]
 800afc6:	2000      	movs	r0, #0
 800afc8:	e022      	b.n	800b010 <__sflush_r+0xf8>
 800afca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afce:	b21b      	sxth	r3, r3
 800afd0:	e01b      	b.n	800b00a <__sflush_r+0xf2>
 800afd2:	690f      	ldr	r7, [r1, #16]
 800afd4:	2f00      	cmp	r7, #0
 800afd6:	d0f6      	beq.n	800afc6 <__sflush_r+0xae>
 800afd8:	0793      	lsls	r3, r2, #30
 800afda:	680e      	ldr	r6, [r1, #0]
 800afdc:	bf08      	it	eq
 800afde:	694b      	ldreq	r3, [r1, #20]
 800afe0:	600f      	str	r7, [r1, #0]
 800afe2:	bf18      	it	ne
 800afe4:	2300      	movne	r3, #0
 800afe6:	eba6 0807 	sub.w	r8, r6, r7
 800afea:	608b      	str	r3, [r1, #8]
 800afec:	f1b8 0f00 	cmp.w	r8, #0
 800aff0:	dde9      	ble.n	800afc6 <__sflush_r+0xae>
 800aff2:	6a21      	ldr	r1, [r4, #32]
 800aff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aff6:	4643      	mov	r3, r8
 800aff8:	463a      	mov	r2, r7
 800affa:	4628      	mov	r0, r5
 800affc:	47b0      	blx	r6
 800affe:	2800      	cmp	r0, #0
 800b000:	dc08      	bgt.n	800b014 <__sflush_r+0xfc>
 800b002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	4407      	add	r7, r0
 800b016:	eba8 0800 	sub.w	r8, r8, r0
 800b01a:	e7e7      	b.n	800afec <__sflush_r+0xd4>
 800b01c:	20400001 	.word	0x20400001

0800b020 <_fflush_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	690b      	ldr	r3, [r1, #16]
 800b024:	4605      	mov	r5, r0
 800b026:	460c      	mov	r4, r1
 800b028:	b913      	cbnz	r3, 800b030 <_fflush_r+0x10>
 800b02a:	2500      	movs	r5, #0
 800b02c:	4628      	mov	r0, r5
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	b118      	cbz	r0, 800b03a <_fflush_r+0x1a>
 800b032:	6a03      	ldr	r3, [r0, #32]
 800b034:	b90b      	cbnz	r3, 800b03a <_fflush_r+0x1a>
 800b036:	f7fd fc8d 	bl	8008954 <__sinit>
 800b03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0f3      	beq.n	800b02a <_fflush_r+0xa>
 800b042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b044:	07d0      	lsls	r0, r2, #31
 800b046:	d404      	bmi.n	800b052 <_fflush_r+0x32>
 800b048:	0599      	lsls	r1, r3, #22
 800b04a:	d402      	bmi.n	800b052 <_fflush_r+0x32>
 800b04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b04e:	f7fe fe19 	bl	8009c84 <__retarget_lock_acquire_recursive>
 800b052:	4628      	mov	r0, r5
 800b054:	4621      	mov	r1, r4
 800b056:	f7ff ff5f 	bl	800af18 <__sflush_r>
 800b05a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b05c:	07da      	lsls	r2, r3, #31
 800b05e:	4605      	mov	r5, r0
 800b060:	d4e4      	bmi.n	800b02c <_fflush_r+0xc>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d4e1      	bmi.n	800b02c <_fflush_r+0xc>
 800b068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b06a:	f7fe fe0d 	bl	8009c88 <__retarget_lock_release_recursive>
 800b06e:	e7dd      	b.n	800b02c <_fflush_r+0xc>

0800b070 <fiprintf>:
 800b070:	b40e      	push	{r1, r2, r3}
 800b072:	b503      	push	{r0, r1, lr}
 800b074:	4601      	mov	r1, r0
 800b076:	ab03      	add	r3, sp, #12
 800b078:	4805      	ldr	r0, [pc, #20]	@ (800b090 <fiprintf+0x20>)
 800b07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07e:	6800      	ldr	r0, [r0, #0]
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	f7ff fb57 	bl	800a734 <_vfiprintf_r>
 800b086:	b002      	add	sp, #8
 800b088:	f85d eb04 	ldr.w	lr, [sp], #4
 800b08c:	b003      	add	sp, #12
 800b08e:	4770      	bx	lr
 800b090:	2000002c 	.word	0x2000002c

0800b094 <__swhatbuf_r>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	460c      	mov	r4, r1
 800b098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09c:	2900      	cmp	r1, #0
 800b09e:	b096      	sub	sp, #88	@ 0x58
 800b0a0:	4615      	mov	r5, r2
 800b0a2:	461e      	mov	r6, r3
 800b0a4:	da0d      	bge.n	800b0c2 <__swhatbuf_r+0x2e>
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0ac:	f04f 0100 	mov.w	r1, #0
 800b0b0:	bf14      	ite	ne
 800b0b2:	2340      	movne	r3, #64	@ 0x40
 800b0b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	6031      	str	r1, [r6, #0]
 800b0bc:	602b      	str	r3, [r5, #0]
 800b0be:	b016      	add	sp, #88	@ 0x58
 800b0c0:	bd70      	pop	{r4, r5, r6, pc}
 800b0c2:	466a      	mov	r2, sp
 800b0c4:	f000 f9f4 	bl	800b4b0 <_fstat_r>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	dbec      	blt.n	800b0a6 <__swhatbuf_r+0x12>
 800b0cc:	9901      	ldr	r1, [sp, #4]
 800b0ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0d6:	4259      	negs	r1, r3
 800b0d8:	4159      	adcs	r1, r3
 800b0da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0de:	e7eb      	b.n	800b0b8 <__swhatbuf_r+0x24>

0800b0e0 <__smakebuf_r>:
 800b0e0:	898b      	ldrh	r3, [r1, #12]
 800b0e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0e4:	079d      	lsls	r5, r3, #30
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	d507      	bpl.n	800b0fc <__smakebuf_r+0x1c>
 800b0ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	6123      	str	r3, [r4, #16]
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	6163      	str	r3, [r4, #20]
 800b0f8:	b003      	add	sp, #12
 800b0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0fc:	ab01      	add	r3, sp, #4
 800b0fe:	466a      	mov	r2, sp
 800b100:	f7ff ffc8 	bl	800b094 <__swhatbuf_r>
 800b104:	9f00      	ldr	r7, [sp, #0]
 800b106:	4605      	mov	r5, r0
 800b108:	4639      	mov	r1, r7
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7fe feba 	bl	8009e84 <_malloc_r>
 800b110:	b948      	cbnz	r0, 800b126 <__smakebuf_r+0x46>
 800b112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b116:	059a      	lsls	r2, r3, #22
 800b118:	d4ee      	bmi.n	800b0f8 <__smakebuf_r+0x18>
 800b11a:	f023 0303 	bic.w	r3, r3, #3
 800b11e:	f043 0302 	orr.w	r3, r3, #2
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	e7e2      	b.n	800b0ec <__smakebuf_r+0xc>
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	6020      	str	r0, [r4, #0]
 800b12a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b12e:	81a3      	strh	r3, [r4, #12]
 800b130:	9b01      	ldr	r3, [sp, #4]
 800b132:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b136:	b15b      	cbz	r3, 800b150 <__smakebuf_r+0x70>
 800b138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b13c:	4630      	mov	r0, r6
 800b13e:	f000 f9c9 	bl	800b4d4 <_isatty_r>
 800b142:	b128      	cbz	r0, 800b150 <__smakebuf_r+0x70>
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	f043 0301 	orr.w	r3, r3, #1
 800b14e:	81a3      	strh	r3, [r4, #12]
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	431d      	orrs	r5, r3
 800b154:	81a5      	strh	r5, [r4, #12]
 800b156:	e7cf      	b.n	800b0f8 <__smakebuf_r+0x18>

0800b158 <_putc_r>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	460d      	mov	r5, r1
 800b15c:	4614      	mov	r4, r2
 800b15e:	4606      	mov	r6, r0
 800b160:	b118      	cbz	r0, 800b16a <_putc_r+0x12>
 800b162:	6a03      	ldr	r3, [r0, #32]
 800b164:	b90b      	cbnz	r3, 800b16a <_putc_r+0x12>
 800b166:	f7fd fbf5 	bl	8008954 <__sinit>
 800b16a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b16c:	07d8      	lsls	r0, r3, #31
 800b16e:	d405      	bmi.n	800b17c <_putc_r+0x24>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	0599      	lsls	r1, r3, #22
 800b174:	d402      	bmi.n	800b17c <_putc_r+0x24>
 800b176:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b178:	f7fe fd84 	bl	8009c84 <__retarget_lock_acquire_recursive>
 800b17c:	68a3      	ldr	r3, [r4, #8]
 800b17e:	3b01      	subs	r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	60a3      	str	r3, [r4, #8]
 800b184:	da05      	bge.n	800b192 <_putc_r+0x3a>
 800b186:	69a2      	ldr	r2, [r4, #24]
 800b188:	4293      	cmp	r3, r2
 800b18a:	db12      	blt.n	800b1b2 <_putc_r+0x5a>
 800b18c:	b2eb      	uxtb	r3, r5
 800b18e:	2b0a      	cmp	r3, #10
 800b190:	d00f      	beq.n	800b1b2 <_putc_r+0x5a>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	6022      	str	r2, [r4, #0]
 800b198:	701d      	strb	r5, [r3, #0]
 800b19a:	b2ed      	uxtb	r5, r5
 800b19c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b19e:	07da      	lsls	r2, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_putc_r+0x56>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	059b      	lsls	r3, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_putc_r+0x56>
 800b1a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1aa:	f7fe fd6d 	bl	8009c88 <__retarget_lock_release_recursive>
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4622      	mov	r2, r4
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7fd fd0d 	bl	8008bd6 <__swbuf_r>
 800b1bc:	4605      	mov	r5, r0
 800b1be:	e7ed      	b.n	800b19c <_putc_r+0x44>

0800b1c0 <__sccl>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	780b      	ldrb	r3, [r1, #0]
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	2b5e      	cmp	r3, #94	@ 0x5e
 800b1c8:	bf0b      	itete	eq
 800b1ca:	784b      	ldrbeq	r3, [r1, #1]
 800b1cc:	1c4a      	addne	r2, r1, #1
 800b1ce:	1c8a      	addeq	r2, r1, #2
 800b1d0:	2100      	movne	r1, #0
 800b1d2:	bf08      	it	eq
 800b1d4:	2101      	moveq	r1, #1
 800b1d6:	3801      	subs	r0, #1
 800b1d8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b1dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b1e0:	42a8      	cmp	r0, r5
 800b1e2:	d1fb      	bne.n	800b1dc <__sccl+0x1c>
 800b1e4:	b90b      	cbnz	r3, 800b1ea <__sccl+0x2a>
 800b1e6:	1e50      	subs	r0, r2, #1
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ea:	f081 0101 	eor.w	r1, r1, #1
 800b1ee:	54e1      	strb	r1, [r4, r3]
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b1f8:	2d2d      	cmp	r5, #45	@ 0x2d
 800b1fa:	d005      	beq.n	800b208 <__sccl+0x48>
 800b1fc:	2d5d      	cmp	r5, #93	@ 0x5d
 800b1fe:	d016      	beq.n	800b22e <__sccl+0x6e>
 800b200:	2d00      	cmp	r5, #0
 800b202:	d0f1      	beq.n	800b1e8 <__sccl+0x28>
 800b204:	462b      	mov	r3, r5
 800b206:	e7f2      	b.n	800b1ee <__sccl+0x2e>
 800b208:	7846      	ldrb	r6, [r0, #1]
 800b20a:	2e5d      	cmp	r6, #93	@ 0x5d
 800b20c:	d0fa      	beq.n	800b204 <__sccl+0x44>
 800b20e:	42b3      	cmp	r3, r6
 800b210:	dcf8      	bgt.n	800b204 <__sccl+0x44>
 800b212:	3002      	adds	r0, #2
 800b214:	461a      	mov	r2, r3
 800b216:	3201      	adds	r2, #1
 800b218:	4296      	cmp	r6, r2
 800b21a:	54a1      	strb	r1, [r4, r2]
 800b21c:	dcfb      	bgt.n	800b216 <__sccl+0x56>
 800b21e:	1af2      	subs	r2, r6, r3
 800b220:	3a01      	subs	r2, #1
 800b222:	1c5d      	adds	r5, r3, #1
 800b224:	42b3      	cmp	r3, r6
 800b226:	bfa8      	it	ge
 800b228:	2200      	movge	r2, #0
 800b22a:	18ab      	adds	r3, r5, r2
 800b22c:	e7e1      	b.n	800b1f2 <__sccl+0x32>
 800b22e:	4610      	mov	r0, r2
 800b230:	e7da      	b.n	800b1e8 <__sccl+0x28>

0800b232 <__submore>:
 800b232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	460c      	mov	r4, r1
 800b238:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b23a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b23e:	4299      	cmp	r1, r3
 800b240:	d11d      	bne.n	800b27e <__submore+0x4c>
 800b242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b246:	f7fe fe1d 	bl	8009e84 <_malloc_r>
 800b24a:	b918      	cbnz	r0, 800b254 <__submore+0x22>
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b258:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b25a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b25e:	6360      	str	r0, [r4, #52]	@ 0x34
 800b260:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b264:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b268:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b26c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b270:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b274:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b278:	6020      	str	r0, [r4, #0]
 800b27a:	2000      	movs	r0, #0
 800b27c:	e7e8      	b.n	800b250 <__submore+0x1e>
 800b27e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b280:	0077      	lsls	r7, r6, #1
 800b282:	463a      	mov	r2, r7
 800b284:	f000 f95a 	bl	800b53c <_realloc_r>
 800b288:	4605      	mov	r5, r0
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0de      	beq.n	800b24c <__submore+0x1a>
 800b28e:	eb00 0806 	add.w	r8, r0, r6
 800b292:	4601      	mov	r1, r0
 800b294:	4632      	mov	r2, r6
 800b296:	4640      	mov	r0, r8
 800b298:	f7fe fcff 	bl	8009c9a <memcpy>
 800b29c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b2a0:	f8c4 8000 	str.w	r8, [r4]
 800b2a4:	e7e9      	b.n	800b27a <__submore+0x48>

0800b2a6 <strncmp>:
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	b16a      	cbz	r2, 800b2c6 <strncmp+0x20>
 800b2aa:	3901      	subs	r1, #1
 800b2ac:	1884      	adds	r4, r0, r2
 800b2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d103      	bne.n	800b2c2 <strncmp+0x1c>
 800b2ba:	42a0      	cmp	r0, r4
 800b2bc:	d001      	beq.n	800b2c2 <strncmp+0x1c>
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	d1f5      	bne.n	800b2ae <strncmp+0x8>
 800b2c2:	1ad0      	subs	r0, r2, r3
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	e7fc      	b.n	800b2c4 <strncmp+0x1e>
	...

0800b2cc <asctime>:
 800b2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b304 <asctime+0x38>)
 800b2ce:	b570      	push	{r4, r5, r6, lr}
 800b2d0:	681d      	ldr	r5, [r3, #0]
 800b2d2:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	b976      	cbnz	r6, 800b2f6 <asctime+0x2a>
 800b2d8:	201a      	movs	r0, #26
 800b2da:	f7fe fda1 	bl	8009e20 <malloc>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	63a8      	str	r0, [r5, #56]	@ 0x38
 800b2e2:	b920      	cbnz	r0, 800b2ee <asctime+0x22>
 800b2e4:	4b08      	ldr	r3, [pc, #32]	@ (800b308 <asctime+0x3c>)
 800b2e6:	4809      	ldr	r0, [pc, #36]	@ (800b30c <asctime+0x40>)
 800b2e8:	213b      	movs	r1, #59	@ 0x3b
 800b2ea:	f7fe fce5 	bl	8009cb8 <__assert_func>
 800b2ee:	221a      	movs	r2, #26
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	f7fd fd1f 	bl	8008d34 <memset>
 800b2f6:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2fe:	f000 b807 	b.w	800b310 <asctime_r>
 800b302:	bf00      	nop
 800b304:	2000002c 	.word	0x2000002c
 800b308:	0800bc91 	.word	0x0800bc91
 800b30c:	0800be33 	.word	0x0800be33

0800b310 <asctime_r>:
 800b310:	b510      	push	{r4, lr}
 800b312:	460c      	mov	r4, r1
 800b314:	6941      	ldr	r1, [r0, #20]
 800b316:	6903      	ldr	r3, [r0, #16]
 800b318:	6982      	ldr	r2, [r0, #24]
 800b31a:	b086      	sub	sp, #24
 800b31c:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 800b320:	9104      	str	r1, [sp, #16]
 800b322:	6801      	ldr	r1, [r0, #0]
 800b324:	9103      	str	r1, [sp, #12]
 800b326:	6841      	ldr	r1, [r0, #4]
 800b328:	9102      	str	r1, [sp, #8]
 800b32a:	6881      	ldr	r1, [r0, #8]
 800b32c:	9101      	str	r1, [sp, #4]
 800b32e:	68c1      	ldr	r1, [r0, #12]
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	4907      	ldr	r1, [pc, #28]	@ (800b350 <asctime_r+0x40>)
 800b334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b338:	440b      	add	r3, r1
 800b33a:	4906      	ldr	r1, [pc, #24]	@ (800b354 <asctime_r+0x44>)
 800b33c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b340:	440a      	add	r2, r1
 800b342:	4620      	mov	r0, r4
 800b344:	4904      	ldr	r1, [pc, #16]	@ (800b358 <asctime_r+0x48>)
 800b346:	f7fd fbb3 	bl	8008ab0 <siprintf>
 800b34a:	4620      	mov	r0, r4
 800b34c:	b006      	add	sp, #24
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	0800bf6c 	.word	0x0800bf6c
 800b354:	0800bf90 	.word	0x0800bf90
 800b358:	0800be8c 	.word	0x0800be8c

0800b35c <__gettzinfo>:
 800b35c:	4800      	ldr	r0, [pc, #0]	@ (800b360 <__gettzinfo+0x4>)
 800b35e:	4770      	bx	lr
 800b360:	20000080 	.word	0x20000080

0800b364 <gmtime_r>:
 800b364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b368:	4a4d      	ldr	r2, [pc, #308]	@ (800b4a0 <gmtime_r+0x13c>)
 800b36a:	460c      	mov	r4, r1
 800b36c:	2300      	movs	r3, #0
 800b36e:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b372:	f7f4 ff9d 	bl	80002b0 <__aeabi_ldivmod>
 800b376:	2a00      	cmp	r2, #0
 800b378:	bfbc      	itt	lt
 800b37a:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800b37e:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800b382:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b386:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800b38a:	fbb2 f3f1 	udiv	r3, r2, r1
 800b38e:	fb01 2213 	mls	r2, r1, r3, r2
 800b392:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800b396:	bfac      	ite	ge
 800b398:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800b39c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800b3a0:	60a3      	str	r3, [r4, #8]
 800b3a2:	fbb2 f3f1 	udiv	r3, r2, r1
 800b3a6:	fb01 2213 	mls	r2, r1, r3, r2
 800b3aa:	6063      	str	r3, [r4, #4]
 800b3ac:	6022      	str	r2, [r4, #0]
 800b3ae:	1cc3      	adds	r3, r0, #3
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	fb93 f2f2 	sdiv	r2, r3, r2
 800b3b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b3ba:	1a9b      	subs	r3, r3, r2
 800b3bc:	4939      	ldr	r1, [pc, #228]	@ (800b4a4 <gmtime_r+0x140>)
 800b3be:	d555      	bpl.n	800b46c <gmtime_r+0x108>
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	61a3      	str	r3, [r4, #24]
 800b3c4:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 800b3c8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800b3cc:	fb93 f1f1 	sdiv	r1, r3, r1
 800b3d0:	4b35      	ldr	r3, [pc, #212]	@ (800b4a8 <gmtime_r+0x144>)
 800b3d2:	fb03 0001 	mla	r0, r3, r1, r0
 800b3d6:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800b3da:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3de:	4403      	add	r3, r0
 800b3e0:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800b3e4:	fbb0 f2fc 	udiv	r2, r0, ip
 800b3e8:	1a9b      	subs	r3, r3, r2
 800b3ea:	f240 176d 	movw	r7, #365	@ 0x16d
 800b3ee:	4a2f      	ldr	r2, [pc, #188]	@ (800b4ac <gmtime_r+0x148>)
 800b3f0:	fbb0 f2f2 	udiv	r2, r0, r2
 800b3f4:	2664      	movs	r6, #100	@ 0x64
 800b3f6:	1a9b      	subs	r3, r3, r2
 800b3f8:	fbb3 f2f7 	udiv	r2, r3, r7
 800b3fc:	fbb3 f3fc 	udiv	r3, r3, ip
 800b400:	fbb2 f5f6 	udiv	r5, r2, r6
 800b404:	1aeb      	subs	r3, r5, r3
 800b406:	4403      	add	r3, r0
 800b408:	fb07 3312 	mls	r3, r7, r2, r3
 800b40c:	2099      	movs	r0, #153	@ 0x99
 800b40e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800b412:	3702      	adds	r7, #2
 800b414:	f103 0e01 	add.w	lr, r3, #1
 800b418:	fbb7 fcf0 	udiv	ip, r7, r0
 800b41c:	fb00 f00c 	mul.w	r0, r0, ip
 800b420:	3002      	adds	r0, #2
 800b422:	f04f 0805 	mov.w	r8, #5
 800b426:	fbb0 f0f8 	udiv	r0, r0, r8
 800b42a:	ebae 0000 	sub.w	r0, lr, r0
 800b42e:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800b432:	4577      	cmp	r7, lr
 800b434:	bf8c      	ite	hi
 800b436:	f06f 0709 	mvnhi.w	r7, #9
 800b43a:	2702      	movls	r7, #2
 800b43c:	4467      	add	r7, ip
 800b43e:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800b442:	fb0c 2101 	mla	r1, ip, r1, r2
 800b446:	2f01      	cmp	r7, #1
 800b448:	bf98      	it	ls
 800b44a:	3101      	addls	r1, #1
 800b44c:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800b450:	d312      	bcc.n	800b478 <gmtime_r+0x114>
 800b452:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800b456:	61e3      	str	r3, [r4, #28]
 800b458:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800b45c:	2300      	movs	r3, #0
 800b45e:	60e0      	str	r0, [r4, #12]
 800b460:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800b464:	6223      	str	r3, [r4, #32]
 800b466:	4620      	mov	r0, r4
 800b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46c:	2800      	cmp	r0, #0
 800b46e:	61a3      	str	r3, [r4, #24]
 800b470:	dba8      	blt.n	800b3c4 <gmtime_r+0x60>
 800b472:	fb90 f1f1 	sdiv	r1, r0, r1
 800b476:	e7ab      	b.n	800b3d0 <gmtime_r+0x6c>
 800b478:	f012 0f03 	tst.w	r2, #3
 800b47c:	d102      	bne.n	800b484 <gmtime_r+0x120>
 800b47e:	fb06 2515 	mls	r5, r6, r5, r2
 800b482:	b95d      	cbnz	r5, 800b49c <gmtime_r+0x138>
 800b484:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800b488:	fbb2 f6f5 	udiv	r6, r2, r5
 800b48c:	fb05 2216 	mls	r2, r5, r6, r2
 800b490:	fab2 f282 	clz	r2, r2
 800b494:	0952      	lsrs	r2, r2, #5
 800b496:	333b      	adds	r3, #59	@ 0x3b
 800b498:	4413      	add	r3, r2
 800b49a:	e7dc      	b.n	800b456 <gmtime_r+0xf2>
 800b49c:	2201      	movs	r2, #1
 800b49e:	e7fa      	b.n	800b496 <gmtime_r+0x132>
 800b4a0:	00015180 	.word	0x00015180
 800b4a4:	00023ab1 	.word	0x00023ab1
 800b4a8:	fffdc54f 	.word	0xfffdc54f
 800b4ac:	00023ab0 	.word	0x00023ab0

0800b4b0 <_fstat_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d07      	ldr	r5, [pc, #28]	@ (800b4d0 <_fstat_r+0x20>)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	f7f6 fc4b 	bl	8001d58 <_fstat>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	d102      	bne.n	800b4cc <_fstat_r+0x1c>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	b103      	cbz	r3, 800b4cc <_fstat_r+0x1c>
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20005524 	.word	0x20005524

0800b4d4 <_isatty_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d06      	ldr	r5, [pc, #24]	@ (800b4f0 <_isatty_r+0x1c>)
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4608      	mov	r0, r1
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	f7f6 fc4a 	bl	8001d78 <_isatty>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_isatty_r+0x1a>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_isatty_r+0x1a>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	20005524 	.word	0x20005524

0800b4f4 <_sbrk_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4d06      	ldr	r5, [pc, #24]	@ (800b510 <_sbrk_r+0x1c>)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	f7f6 fc52 	bl	8001da8 <_sbrk>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_sbrk_r+0x1a>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_sbrk_r+0x1a>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	20005524 	.word	0x20005524

0800b514 <abort>:
 800b514:	b508      	push	{r3, lr}
 800b516:	2006      	movs	r0, #6
 800b518:	f000 f866 	bl	800b5e8 <raise>
 800b51c:	2001      	movs	r0, #1
 800b51e:	f7f6 fbcb 	bl	8001cb8 <_exit>
	...

0800b524 <__env_lock>:
 800b524:	4801      	ldr	r0, [pc, #4]	@ (800b52c <__env_lock+0x8>)
 800b526:	f7fe bbad 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 800b52a:	bf00      	nop
 800b52c:	20005529 	.word	0x20005529

0800b530 <__env_unlock>:
 800b530:	4801      	ldr	r0, [pc, #4]	@ (800b538 <__env_unlock+0x8>)
 800b532:	f7fe bba9 	b.w	8009c88 <__retarget_lock_release_recursive>
 800b536:	bf00      	nop
 800b538:	20005529 	.word	0x20005529

0800b53c <_realloc_r>:
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	4607      	mov	r7, r0
 800b542:	4614      	mov	r4, r2
 800b544:	460d      	mov	r5, r1
 800b546:	b921      	cbnz	r1, 800b552 <_realloc_r+0x16>
 800b548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b54c:	4611      	mov	r1, r2
 800b54e:	f7fe bc99 	b.w	8009e84 <_malloc_r>
 800b552:	b92a      	cbnz	r2, 800b560 <_realloc_r+0x24>
 800b554:	f7fe fbd6 	bl	8009d04 <_free_r>
 800b558:	4625      	mov	r5, r4
 800b55a:	4628      	mov	r0, r5
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	f000 f85e 	bl	800b620 <_malloc_usable_size_r>
 800b564:	4284      	cmp	r4, r0
 800b566:	4606      	mov	r6, r0
 800b568:	d802      	bhi.n	800b570 <_realloc_r+0x34>
 800b56a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b56e:	d8f4      	bhi.n	800b55a <_realloc_r+0x1e>
 800b570:	4621      	mov	r1, r4
 800b572:	4638      	mov	r0, r7
 800b574:	f7fe fc86 	bl	8009e84 <_malloc_r>
 800b578:	4680      	mov	r8, r0
 800b57a:	b908      	cbnz	r0, 800b580 <_realloc_r+0x44>
 800b57c:	4645      	mov	r5, r8
 800b57e:	e7ec      	b.n	800b55a <_realloc_r+0x1e>
 800b580:	42b4      	cmp	r4, r6
 800b582:	4622      	mov	r2, r4
 800b584:	4629      	mov	r1, r5
 800b586:	bf28      	it	cs
 800b588:	4632      	movcs	r2, r6
 800b58a:	f7fe fb86 	bl	8009c9a <memcpy>
 800b58e:	4629      	mov	r1, r5
 800b590:	4638      	mov	r0, r7
 800b592:	f7fe fbb7 	bl	8009d04 <_free_r>
 800b596:	e7f1      	b.n	800b57c <_realloc_r+0x40>

0800b598 <_raise_r>:
 800b598:	291f      	cmp	r1, #31
 800b59a:	b538      	push	{r3, r4, r5, lr}
 800b59c:	4605      	mov	r5, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	d904      	bls.n	800b5ac <_raise_r+0x14>
 800b5a2:	2316      	movs	r3, #22
 800b5a4:	6003      	str	r3, [r0, #0]
 800b5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5ae:	b112      	cbz	r2, 800b5b6 <_raise_r+0x1e>
 800b5b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5b4:	b94b      	cbnz	r3, 800b5ca <_raise_r+0x32>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f000 f830 	bl	800b61c <_getpid_r>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4601      	mov	r1, r0
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5c6:	f000 b817 	b.w	800b5f8 <_kill_r>
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d00a      	beq.n	800b5e4 <_raise_r+0x4c>
 800b5ce:	1c59      	adds	r1, r3, #1
 800b5d0:	d103      	bne.n	800b5da <_raise_r+0x42>
 800b5d2:	2316      	movs	r3, #22
 800b5d4:	6003      	str	r3, [r0, #0]
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	e7e7      	b.n	800b5aa <_raise_r+0x12>
 800b5da:	2100      	movs	r1, #0
 800b5dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	4798      	blx	r3
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e7e0      	b.n	800b5aa <_raise_r+0x12>

0800b5e8 <raise>:
 800b5e8:	4b02      	ldr	r3, [pc, #8]	@ (800b5f4 <raise+0xc>)
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	6818      	ldr	r0, [r3, #0]
 800b5ee:	f7ff bfd3 	b.w	800b598 <_raise_r>
 800b5f2:	bf00      	nop
 800b5f4:	2000002c 	.word	0x2000002c

0800b5f8 <_kill_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4d07      	ldr	r5, [pc, #28]	@ (800b618 <_kill_r+0x20>)
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	4604      	mov	r4, r0
 800b600:	4608      	mov	r0, r1
 800b602:	4611      	mov	r1, r2
 800b604:	602b      	str	r3, [r5, #0]
 800b606:	f7f6 fb47 	bl	8001c98 <_kill>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	d102      	bne.n	800b614 <_kill_r+0x1c>
 800b60e:	682b      	ldr	r3, [r5, #0]
 800b610:	b103      	cbz	r3, 800b614 <_kill_r+0x1c>
 800b612:	6023      	str	r3, [r4, #0]
 800b614:	bd38      	pop	{r3, r4, r5, pc}
 800b616:	bf00      	nop
 800b618:	20005524 	.word	0x20005524

0800b61c <_getpid_r>:
 800b61c:	f7f6 bb34 	b.w	8001c88 <_getpid>

0800b620 <_malloc_usable_size_r>:
 800b620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b624:	1f18      	subs	r0, r3, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	bfbc      	itt	lt
 800b62a:	580b      	ldrlt	r3, [r1, r0]
 800b62c:	18c0      	addlt	r0, r0, r3
 800b62e:	4770      	bx	lr

0800b630 <_init>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	bf00      	nop
 800b634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b636:	bc08      	pop	{r3}
 800b638:	469e      	mov	lr, r3
 800b63a:	4770      	bx	lr

0800b63c <_fini>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	bf00      	nop
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr
