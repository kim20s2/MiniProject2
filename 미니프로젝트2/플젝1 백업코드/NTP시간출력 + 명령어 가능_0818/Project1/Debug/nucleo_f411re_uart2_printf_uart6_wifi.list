
nucleo_f411re_uart2_printf_uart6_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b37c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800b51c  0800b51c  0000c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb8  0800beb8  0000d0d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bec0  0800bec0  0000d0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bec0  0800bec0  0000cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bec4  0800bec4  0000cec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0800bec8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054a4  200000d8  0800bfa0  0000d0d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000557c  0800bfa0  0000d57c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b206  00000000  00000000  0000d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd0  00000000  00000000  0002830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130d  00000000  00000000  0002d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6fd  00000000  00000000  0002ec65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aeaf  00000000  00000000  00049362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1451  00000000  00000000  00064211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac4  00000000  00000000  001056a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0010d16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b504 	.word	0x0800b504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0800b504 	.word	0x0800b504

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9d3 	b.w	8000678 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <esp_at_command>:
extern UART_HandleTypeDef huart6;

// NTP 관련 함수 선언

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	807b      	strh	r3, [r7, #2]
	*length = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8000690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000694:	2100      	movs	r1, #0
 8000696:	68b8      	ldr	r0, [r7, #8]
 8000698:	f008 fa3a 	bl	8008b10 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));
 800069c:	f240 4204 	movw	r2, #1028	@ 0x404
 80006a0:	2100      	movs	r1, #0
 80006a2:	4830      	ldr	r0, [pc, #192]	@ (8000764 <esp_at_command+0xe8>)
 80006a4:	f008 fa34 	bl	8008b10 <memset>
	cb_data.length = 0;      // 길이만 리셋
 80006a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <esp_at_command+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f7ff fd9f 	bl	80001f4 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	2364      	movs	r3, #100	@ 0x64
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	482a      	ldr	r0, [pc, #168]	@ (8000768 <esp_at_command+0xec>)
 80006c0:	f003 fd20 	bl	8004104 <HAL_UART_Transmit>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d041      	beq.n	800074e <esp_at_command+0xd2>
		return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e044      	b.n	800075a <esp_at_command+0xde>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER)
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <esp_at_command+0xe8>)
 80006d2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80006d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80006da:	d302      	bcc.n	80006e2 <esp_at_command+0x66>
			return -2;
 80006dc:	f06f 0301 	mvn.w	r3, #1
 80006e0:	e03b      	b.n	800075a <esp_at_command+0xde>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL)
 80006e2:	4922      	ldr	r1, [pc, #136]	@ (800076c <esp_at_command+0xf0>)
 80006e4:	481f      	ldr	r0, [pc, #124]	@ (8000764 <esp_at_command+0xe8>)
 80006e6:	f008 faa9 	bl	8008c3c <strstr>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <esp_at_command+0x7a>
			return -3;
 80006f0:	f06f 0302 	mvn.w	r3, #2
 80006f4:	e031      	b.n	800075a <esp_at_command+0xde>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 80006f6:	491e      	ldr	r1, [pc, #120]	@ (8000770 <esp_at_command+0xf4>)
 80006f8:	481a      	ldr	r0, [pc, #104]	@ (8000764 <esp_at_command+0xe8>)
 80006fa:	f008 fa9f 	bl	8008c3c <strstr>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <esp_at_command+0x98>
		{
			printf("ESP: TCP connection closed.\r\n");
 8000704:	481b      	ldr	r0, [pc, #108]	@ (8000774 <esp_at_command+0xf8>)
 8000706:	f008 f8b9 	bl	800887c <puts>
			esp_client_conn();   // 자동 재연결
 800070a:	f000 f8cd 	bl	80008a8 <esp_client_conn>
			return -5;
 800070e:	f06f 0304 	mvn.w	r3, #4
 8000712:	e022      	b.n	800075a <esp_at_command+0xde>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 8000714:	4918      	ldr	r1, [pc, #96]	@ (8000778 <esp_at_command+0xfc>)
 8000716:	4813      	ldr	r0, [pc, #76]	@ (8000764 <esp_at_command+0xe8>)
 8000718:	f008 fa90 	bl	8008c3c <strstr>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00e      	beq.n	8000740 <esp_at_command+0xc4>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <esp_at_command+0xe8>)
 8000724:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000728:	461a      	mov	r2, r3
 800072a:	490e      	ldr	r1, [pc, #56]	@ (8000764 <esp_at_command+0xe8>)
 800072c:	68b8      	ldr	r0, [r7, #8]
 800072e:	f009 f9a2 	bl	8009a76 <memcpy>
			*length = cb_data.length;
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <esp_at_command+0xe8>)
 8000734:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	801a      	strh	r2, [r3, #0]
			return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e00c      	b.n	800075a <esp_at_command+0xde>
		}

		time_out -= 10;
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	3b0a      	subs	r3, #10
 8000744:	b29b      	uxth	r3, r3
 8000746:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 fb8b 	bl	8001e64 <HAL_Delay>
	while (time_out > 0)
 800074e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000752:	2b00      	cmp	r3, #0
 8000754:	dcbc      	bgt.n	80006d0 <esp_at_command+0x54>
	}
	return -4; // Timeout
 8000756:	f06f 0303 	mvn.w	r3, #3
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000053c 	.word	0x2000053c
 8000768:	200009f4 	.word	0x200009f4
 800076c:	0800b51c 	.word	0x0800b51c
 8000770:	0800b524 	.word	0x0800b524
 8000774:	0800b52c 	.word	0x0800b52c
 8000778:	0800b54c 	.word	0x0800b54c

0800077c <esp_reset>:
    return 0; // 타임아웃
}


static int esp_reset(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000786:	1dba      	adds	r2, r7, #6
 8000788:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078c:	4909      	ldr	r1, [pc, #36]	@ (80007b4 <esp_reset+0x38>)
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <esp_reset+0x3c>)
 8000790:	f7ff ff74 	bl	800067c <esp_at_command>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <esp_reset+0x24>
    {
    	return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e004      	b.n	80007aa <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 80007a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a4:	f001 fb5e 	bl	8001e64 <HAL_Delay>
    return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000104 	.word	0x20000104
 80007b8:	0800b550 	.word	0x0800b550

080007bc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80007ca:	f107 020a 	add.w	r2, r7, #10
 80007ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d2:	492d      	ldr	r1, [pc, #180]	@ (8000888 <request_ip_addr+0xcc>)
 80007d4:	482d      	ldr	r0, [pc, #180]	@ (800088c <request_ip_addr+0xd0>)
 80007d6:	f7ff ff51 	bl	800067c <esp_at_command>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80007e0:	482b      	ldr	r0, [pc, #172]	@ (8000890 <request_ip_addr+0xd4>)
 80007e2:	f008 f84b 	bl	800887c <puts>
 80007e6:	e049      	b.n	800087c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80007e8:	492a      	ldr	r1, [pc, #168]	@ (8000894 <request_ip_addr+0xd8>)
 80007ea:	4827      	ldr	r0, [pc, #156]	@ (8000888 <request_ip_addr+0xcc>)
 80007ec:	f008 f9ca 	bl	8008b84 <strtok>
 80007f0:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d03e      	beq.n	8000876 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	e009      	b.n	8000812 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80007fe:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <request_ip_addr+0xcc>)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f007 ffda 	bl	80087c0 <putchar>
            for(int i = 0 ; i < length ; i++)
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	3301      	adds	r3, #1
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	897b      	ldrh	r3, [r7, #10]
 8000814:	461a      	mov	r2, r3
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	4293      	cmp	r3, r2
 800081a:	dbf0      	blt.n	80007fe <request_ip_addr+0x42>
        }

        while(line != NULL)
 800081c:	e02b      	b.n	8000876 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800081e:	491e      	ldr	r1, [pc, #120]	@ (8000898 <request_ip_addr+0xdc>)
 8000820:	6978      	ldr	r0, [r7, #20]
 8000822:	f008 fa0b 	bl	8008c3c <strstr>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d01f      	beq.n	800086c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800082c:	491b      	ldr	r1, [pc, #108]	@ (800089c <request_ip_addr+0xe0>)
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f008 f9a8 	bl	8008b84 <strtok>
                ip = strtok(NULL, "\"");
 8000834:	4919      	ldr	r1, [pc, #100]	@ (800089c <request_ip_addr+0xe0>)
 8000836:	2000      	movs	r0, #0
 8000838:	f008 f9a4 	bl	8008b84 <strtok>
 800083c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800083e:	4918      	ldr	r1, [pc, #96]	@ (80008a0 <request_ip_addr+0xe4>)
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f7ff fccd 	bl	80001e0 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00f      	beq.n	800086c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800084c:	2210      	movs	r2, #16
 800084e:	2100      	movs	r1, #0
 8000850:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <request_ip_addr+0xe8>)
 8000852:	f008 f95d 	bl	8008b10 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff fccc 	bl	80001f4 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	68f9      	ldr	r1, [r7, #12]
 8000862:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <request_ip_addr+0xe8>)
 8000864:	f009 f907 	bl	8009a76 <memcpy>
                    return 0;
 8000868:	2300      	movs	r3, #0
 800086a:	e009      	b.n	8000880 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800086c:	4909      	ldr	r1, [pc, #36]	@ (8000894 <request_ip_addr+0xd8>)
 800086e:	2000      	movs	r0, #0
 8000870:	f008 f988 	bl	8008b84 <strtok>
 8000874:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1d0      	bne.n	800081e <request_ip_addr+0x62>
        }
    }
    return -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000104 	.word	0x20000104
 800088c:	0800b598 	.word	0x0800b598
 8000890:	0800b5a4 	.word	0x0800b5a4
 8000894:	0800b58c 	.word	0x0800b58c
 8000898:	0800b5c4 	.word	0x0800b5c4
 800089c:	0800b594 	.word	0x0800b594
 80008a0:	0800b55c 	.word	0x0800b55c
 80008a4:	200000f4 	.word	0x200000f4

080008a8 <esp_client_conn>:

int esp_client_conn()
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b092      	sub	sp, #72	@ 0x48
 80008ac:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2240      	movs	r2, #64	@ 0x40
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 f92a 	bl	8008b10 <memset>
  uint16_t length = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80008c0:	f107 0008 	add.w	r0, r7, #8
 80008c4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008c8:	4a09      	ldr	r2, [pc, #36]	@ (80008f0 <esp_client_conn+0x48>)
 80008ca:	490a      	ldr	r1, [pc, #40]	@ (80008f4 <esp_client_conn+0x4c>)
 80008cc:	f007 ffde 	bl	800888c <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80008d0:	1dba      	adds	r2, r7, #6
 80008d2:	f107 0008 	add.w	r0, r7, #8
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	4907      	ldr	r1, [pc, #28]	@ (80008f8 <esp_client_conn+0x50>)
 80008dc:	f7ff fece 	bl	800067c <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <esp_client_conn+0x54>)
 80008e2:	f000 f963 	bl	8000bac <esp_send_data>
	return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3748      	adds	r7, #72	@ 0x48
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	0800b5d0 	.word	0x0800b5d0
 80008f4:	0800b5dc 	.word	0x0800b5dc
 80008f8:	20000104 	.word	0x20000104
 80008fc:	0800b5f8 	.word	0x0800b5f8

08000900 <esp_get_status>:
int esp_get_status()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 800090a:	1dba      	adds	r2, r7, #6
 800090c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000910:	4909      	ldr	r1, [pc, #36]	@ (8000938 <esp_get_status+0x38>)
 8000912:	480a      	ldr	r0, [pc, #40]	@ (800093c <esp_get_status+0x3c>)
 8000914:	f7ff feb2 	bl	800067c <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 8000918:	4909      	ldr	r1, [pc, #36]	@ (8000940 <esp_get_status+0x40>)
 800091a:	4807      	ldr	r0, [pc, #28]	@ (8000938 <esp_get_status+0x38>)
 800091c:	f008 f98e 	bl	8008c3c <strstr>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <esp_get_status+0x2a>
    {
    	return 0;
 8000926:	2300      	movs	r3, #0
 8000928:	e001      	b.n	800092e <esp_get_status+0x2e>
    }
	return -1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000104 	.word	0x20000104
 800093c:	0800b60c 	.word	0x0800b60c
 8000940:	0800b61c 	.word	0x0800b61c

08000944 <drv_esp_init>:
int drv_esp_init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 8000948:	2210      	movs	r2, #16
 800094a:	2100      	movs	r1, #0
 800094c:	4806      	ldr	r0, [pc, #24]	@ (8000968 <drv_esp_init+0x24>)
 800094e:	f008 f8df 	bl	8008b10 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	4905      	ldr	r1, [pc, #20]	@ (800096c <drv_esp_init+0x28>)
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <drv_esp_init+0x2c>)
 8000958:	f003 fc5f 	bl	800421a <HAL_UART_Receive_IT>

    return esp_reset();
 800095c:	f7ff ff0e 	bl	800077c <esp_reset>
 8000960:	4603      	mov	r3, r0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000f4 	.word	0x200000f4
 800096c:	2000053b 	.word	0x2000053b
 8000970:	200009f4 	.word	0x200009f4

08000974 <reset_func>:
void reset_func()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000978:	4808      	ldr	r0, [pc, #32]	@ (800099c <reset_func+0x28>)
 800097a:	f007 ff0f 	bl	800879c <iprintf>
	if(esp_reset() == 0)
 800097e:	f7ff fefd 	bl	800077c <esp_reset>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <reset_func+0x1c>
			printf("OK\r\n");
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <reset_func+0x2c>)
 800098a:	f007 ff77 	bl	800887c <puts>
	else
			printf("fail\r\n");
}
 800098e:	e002      	b.n	8000996 <reset_func+0x22>
			printf("fail\r\n");
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <reset_func+0x30>)
 8000992:	f007 ff73 	bl	800887c <puts>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	0800b628 	.word	0x0800b628
 80009a0:	0800b638 	.word	0x0800b638
 80009a4:	0800b63c 	.word	0x0800b63c

080009a8 <version_func>:

void version_func()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 80009b2:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <version_func+0x58>)
 80009b4:	f007 ff62 	bl	800887c <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80009b8:	1cba      	adds	r2, r7, #2
 80009ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009be:	4911      	ldr	r1, [pc, #68]	@ (8000a04 <version_func+0x5c>)
 80009c0:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <version_func+0x60>)
 80009c2:	f7ff fe5b 	bl	800067c <esp_at_command>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <version_func+0x2c>
      printf("ap scan command fail\r\n");
 80009cc:	480f      	ldr	r0, [pc, #60]	@ (8000a0c <version_func+0x64>)
 80009ce:	f007 ff55 	bl	800887c <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 80009d2:	e011      	b.n	80009f8 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	e009      	b.n	80009ee <version_func+0x46>
          printf("%c", response[i]);
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <version_func+0x5c>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 feec 	bl	80087c0 <putchar>
      for(int i = 0 ; i < length ; i++)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3301      	adds	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dbf0      	blt.n	80009da <version_func+0x32>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	0800b644 	.word	0x0800b644
 8000a04:	20000104 	.word	0x20000104
 8000a08:	0800b65c 	.word	0x0800b65c
 8000a0c:	0800b668 	.word	0x0800b668

08000a10 <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	@ 0x50
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2240      	movs	r2, #64	@ 0x40
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f008 f871 	bl	8008b10 <memset>
  if(ssid == NULL || passwd == NULL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <ap_conn_func+0x2a>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8000a3a:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <ap_conn_func+0x88>)
 8000a3c:	f007 ff1e 	bl	800887c <puts>
 8000a40:	e026      	b.n	8000a90 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 8000a42:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4a:	4914      	ldr	r1, [pc, #80]	@ (8000a9c <ap_conn_func+0x8c>)
 8000a4c:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <ap_conn_func+0x90>)
 8000a4e:	f7ff fe15 	bl	800067c <esp_at_command>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8000a58:	4812      	ldr	r0, [pc, #72]	@ (8000aa4 <ap_conn_func+0x94>)
 8000a5a:	f007 ff0f 	bl	800887c <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8000a5e:	f107 000c 	add.w	r0, r7, #12
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4910      	ldr	r1, [pc, #64]	@ (8000aa8 <ap_conn_func+0x98>)
 8000a68:	f007 ff10 	bl	800888c <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000a6c:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000a70:	f107 000c 	add.w	r0, r7, #12
 8000a74:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000a78:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <ap_conn_func+0x8c>)
 8000a7a:	f7ff fdff 	bl	800067c <esp_at_command>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d005      	beq.n	8000a90 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4808      	ldr	r0, [pc, #32]	@ (8000aac <ap_conn_func+0x9c>)
 8000a8c:	f007 fe86 	bl	800879c <iprintf>
}
 8000a90:	3750      	adds	r7, #80	@ 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800b680 	.word	0x0800b680
 8000a9c:	20000104 	.word	0x20000104
 8000aa0:	0800b6ac 	.word	0x0800b6ac
 8000aa4:	0800b6bc 	.word	0x0800b6bc
 8000aa8:	0800b6d0 	.word	0x0800b6d0
 8000aac:	0800b6e8 	.word	0x0800b6e8

08000ab0 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a27      	ldr	r2, [pc, #156]	@ (8000b5c <HAL_UART_RxCpltCallback+0xac>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d11f      	bne.n	8000b02 <HAL_UART_RxCpltCallback+0x52>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8000ac2:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <HAL_UART_RxCpltCallback+0xb0>)
 8000ac4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000acc:	d214      	bcs.n	8000af8 <HAL_UART_RxCpltCallback+0x48>
        {
            cb_data.buf[cb_data.length++] = data;
 8000ace:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <HAL_UART_RxCpltCallback+0xb0>)
 8000ad0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	4a21      	ldr	r2, [pc, #132]	@ (8000b60 <HAL_UART_RxCpltCallback+0xb0>)
 8000ada:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_UART_RxCpltCallback+0xb4>)
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <HAL_UART_RxCpltCallback+0xb0>)
 8000ae6:	5499      	strb	r1, [r3, r2]
            if(data == '\n')   // 한 프레임 끝 이부분 수정
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <HAL_UART_RxCpltCallback+0xb4>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b0a      	cmp	r3, #10
 8000aee:	d103      	bne.n	8000af8 <HAL_UART_RxCpltCallback+0x48>
            {
                cb_data.new_data = 1; // Task에서 처리하도록 신호
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <HAL_UART_RxCpltCallback+0xb0>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
            }
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	491a      	ldr	r1, [pc, #104]	@ (8000b64 <HAL_UART_RxCpltCallback+0xb4>)
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f003 fb8c 	bl	800421a <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_UART_RxCpltCallback+0xb8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d122      	bne.n	8000b52 <HAL_UART_RxCpltCallback+0xa2>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <HAL_UART_RxCpltCallback+0xbc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_UART_RxCpltCallback+0xc0>)
 8000b12:	7811      	ldrb	r1, [r2, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <HAL_UART_RxCpltCallback+0xc4>)
 8000b16:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_UART_RxCpltCallback+0xbc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <HAL_UART_RxCpltCallback+0xc4>)
 8000b1e:	5cd3      	ldrb	r3, [r2, r3]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b0d      	cmp	r3, #13
 8000b24:	d10b      	bne.n	8000b3e <HAL_UART_RxCpltCallback+0x8e>
        {
            rx2Data[i] = '\0';
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <HAL_UART_RxCpltCallback+0xbc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <HAL_UART_RxCpltCallback+0xc4>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_UART_RxCpltCallback+0xc8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
            i = 0;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <HAL_UART_RxCpltCallback+0xbc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e004      	b.n	8000b48 <HAL_UART_RxCpltCallback+0x98>
        }
        else
        {
            i++;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_UART_RxCpltCallback+0xbc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <HAL_UART_RxCpltCallback+0xbc>)
 8000b46:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4909      	ldr	r1, [pc, #36]	@ (8000b70 <HAL_UART_RxCpltCallback+0xc0>)
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f003 fb64 	bl	800421a <HAL_UART_Receive_IT>
    }
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40011400 	.word	0x40011400
 8000b60:	2000053c 	.word	0x2000053c
 8000b64:	2000053b 	.word	0x2000053b
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	20000940 	.word	0x20000940
 8000b70:	2000053a 	.word	0x2000053a
 8000b74:	20000508 	.word	0x20000508
 8000b78:	20000504 	.word	0x20000504

08000b7c <AiotClient_Init>:



void AiotClient_Init()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	reset_func();
 8000b80:	f7ff fef8 	bl	8000974 <reset_func>
	version_func();
 8000b84:	f7ff ff10 	bl	80009a8 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 8000b88:	4906      	ldr	r1, [pc, #24]	@ (8000ba4 <AiotClient_Init+0x28>)
 8000b8a:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <AiotClient_Init+0x2c>)
 8000b8c:	f7ff ff40 	bl	8000a10 <ap_conn_func>
	request_ip_addr(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fe13 	bl	80007bc <request_ip_addr>
	esp_client_conn();
 8000b96:	f7ff fe87 	bl	80008a8 <esp_client_conn>
	esp_get_status();
 8000b9a:	f7ff feb1 	bl	8000900 <esp_get_status>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	0800b748 	.word	0x0800b748
 8000ba8:	0800b754 	.word	0x0800b754

08000bac <esp_send_data>:


void esp_send_data(char *data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2240      	movs	r2, #64	@ 0x40
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 ffa7 	bl	8008b10 <memset>
	uint16_t length = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fb14 	bl	80001f4 <strlen>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	490e      	ldr	r1, [pc, #56]	@ (8000c0c <esp_send_data+0x60>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f007 fe59 	bl	800888c <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000bda:	f107 020e 	add.w	r2, r7, #14
 8000bde:	f107 0010 	add.w	r0, r7, #16
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	490a      	ldr	r1, [pc, #40]	@ (8000c10 <esp_send_data+0x64>)
 8000be8:	f7ff fd48 	bl	800067c <esp_at_command>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d107      	bne.n	8000c02 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000bf2:	f107 020e 	add.w	r2, r7, #14
 8000bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfa:	4905      	ldr	r1, [pc, #20]	@ (8000c10 <esp_send_data+0x64>)
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fd3d 	bl	800067c <esp_at_command>
	}
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	0800b75c 	.word	0x0800b75c
 8000c10:	20000104 	.word	0x20000104

08000c14 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4903      	ldr	r1, [pc, #12]	@ (8000c28 <drv_uart_init+0x14>)
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <drv_uart_init+0x18>)
 8000c1e:	f003 fafc 	bl	800421a <HAL_UART_Receive_IT>
    return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000053a 	.word	0x2000053a
 8000c2c:	200009ac 	.word	0x200009ac

08000c30 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000c38:	1d39      	adds	r1, r7, #4
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4807      	ldr	r0, [pc, #28]	@ (8000c5c <__io_putchar+0x2c>)
 8000c40:	f003 fa60 	bl	8004104 <HAL_UART_Transmit>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <__io_putchar+0x1e>
        return ch;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <__io_putchar+0x22>
    return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200009ac 	.word	0x200009ac

08000c60 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09a      	sub	sp, #104	@ 0x68
 8000c64:	af06      	add	r7, sp, #24
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 8000c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6e:	2224      	movs	r2, #36	@ 0x24
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 ff4c 	bl	8008b10 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 8000c78:	4969      	ldr	r1, [pc, #420]	@ (8000e20 <parse_cipsntptime_line+0x1c0>)
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f007 ffde 	bl	8008c3c <strstr>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <parse_cipsntptime_line+0x2c>
        return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e0c5      	b.n	8000e18 <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8000c8c:	f107 0120 	add.w	r1, r7, #32
 8000c90:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	9304      	str	r3, [sp, #16]
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	495b      	ldr	r1, [pc, #364]	@ (8000e24 <parse_cipsntptime_line+0x1c4>)
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f007 fe0a 	bl	80088d0 <siscanf>
 8000cbc:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 8000cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	f040 80a7 	bne.w	8000e14 <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	4957      	ldr	r1, [pc, #348]	@ (8000e28 <parse_cipsntptime_line+0x1c8>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fa87 	bl	80001e0 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <parse_cipsntptime_line+0x7e>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cdc:	e082      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4952      	ldr	r1, [pc, #328]	@ (8000e2c <parse_cipsntptime_line+0x1cc>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa7b 	bl	80001e0 <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <parse_cipsntptime_line+0x96>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cf4:	e076      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	494d      	ldr	r1, [pc, #308]	@ (8000e30 <parse_cipsntptime_line+0x1d0>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fa6f 	bl	80001e0 <strcmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <parse_cipsntptime_line+0xae>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d0c:	e06a      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	4948      	ldr	r1, [pc, #288]	@ (8000e34 <parse_cipsntptime_line+0x1d4>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fa63 	bl	80001e0 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <parse_cipsntptime_line+0xc6>
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d24:	e05e      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4943      	ldr	r1, [pc, #268]	@ (8000e38 <parse_cipsntptime_line+0x1d8>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa57 	bl	80001e0 <strcmp>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <parse_cipsntptime_line+0xde>
 8000d38:	2304      	movs	r3, #4
 8000d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d3c:	e052      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	493e      	ldr	r1, [pc, #248]	@ (8000e3c <parse_cipsntptime_line+0x1dc>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fa4b 	bl	80001e0 <strcmp>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <parse_cipsntptime_line+0xf6>
 8000d50:	2305      	movs	r3, #5
 8000d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d54:	e046      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4939      	ldr	r1, [pc, #228]	@ (8000e40 <parse_cipsntptime_line+0x1e0>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa3f 	bl	80001e0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <parse_cipsntptime_line+0x10e>
 8000d68:	2306      	movs	r3, #6
 8000d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d6c:	e03a      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	4934      	ldr	r1, [pc, #208]	@ (8000e44 <parse_cipsntptime_line+0x1e4>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fa33 	bl	80001e0 <strcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <parse_cipsntptime_line+0x126>
 8000d80:	2307      	movs	r3, #7
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d84:	e02e      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	492f      	ldr	r1, [pc, #188]	@ (8000e48 <parse_cipsntptime_line+0x1e8>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fa27 	bl	80001e0 <strcmp>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <parse_cipsntptime_line+0x13e>
 8000d98:	2308      	movs	r3, #8
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d9c:	e022      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 8000d9e:	f107 0320 	add.w	r3, r7, #32
 8000da2:	492a      	ldr	r1, [pc, #168]	@ (8000e4c <parse_cipsntptime_line+0x1ec>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa1b 	bl	80001e0 <strcmp>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <parse_cipsntptime_line+0x156>
 8000db0:	2309      	movs	r3, #9
 8000db2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000db4:	e016      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4925      	ldr	r1, [pc, #148]	@ (8000e50 <parse_cipsntptime_line+0x1f0>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fa0f 	bl	80001e0 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <parse_cipsntptime_line+0x16e>
 8000dc8:	230a      	movs	r3, #10
 8000dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dcc:	e00a      	b.n	8000de4 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	4920      	ldr	r1, [pc, #128]	@ (8000e54 <parse_cipsntptime_line+0x1f4>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa03 	bl	80001e0 <strcmp>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <parse_cipsntptime_line+0x184>
 8000de0:	230b      	movs	r3, #11
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 8000dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e00:	4618      	mov	r0, r3
 8000e02:	f008 f91b 	bl	800903c <mktime>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	e001      	b.n	8000e18 <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3750      	adds	r7, #80	@ 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	0800b76c 	.word	0x0800b76c
 8000e24:	0800b77c 	.word	0x0800b77c
 8000e28:	0800b7a0 	.word	0x0800b7a0
 8000e2c:	0800b7a4 	.word	0x0800b7a4
 8000e30:	0800b7a8 	.word	0x0800b7a8
 8000e34:	0800b7ac 	.word	0x0800b7ac
 8000e38:	0800b7b0 	.word	0x0800b7b0
 8000e3c:	0800b7b4 	.word	0x0800b7b4
 8000e40:	0800b7b8 	.word	0x0800b7b8
 8000e44:	0800b7bc 	.word	0x0800b7bc
 8000e48:	0800b7c0 	.word	0x0800b7c0
 8000e4c:	0800b7c4 	.word	0x0800b7c4
 8000e50:	0800b7c8 	.word	0x0800b7c8
 8000e54:	0800b7cc 	.word	0x0800b7cc

08000e58 <esp_ntp_config>:

int esp_ntp_config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0a0      	sub	sp, #128	@ 0x80
 8000e5c:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <esp_ntp_config+0x48>)
 8000e62:	4910      	ldr	r1, [pc, #64]	@ (8000ea4 <esp_ntp_config+0x4c>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f007 fd11 	bl	800888c <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9c1 	bl	80001f4 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4639      	mov	r1, r7
 8000e78:	2364      	movs	r3, #100	@ 0x64
 8000e7a:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <esp_ntp_config+0x50>)
 8000e7c:	f003 f942 	bl	8004104 <HAL_UART_Transmit>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <esp_ntp_config+0x34>
        return -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	e004      	b.n	8000e96 <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 8000e8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e90:	f005 fdb2 	bl	80069f8 <vTaskDelay>
    return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3780      	adds	r7, #128	@ 0x80
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	0800b7d0 	.word	0x0800b7d0
 8000ea4:	0800b7e4 	.word	0x0800b7e4
 8000ea8:	200009f4 	.word	0x200009f4

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 ff63 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f885 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 fa1d 	bl	80012fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f9c7 	bl	8001254 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ec6:	f000 f9ef 	bl	80012a8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000eca:	f000 f975 	bl	80011b8 <MX_TIM3_Init>
  MX_RTC_Init();
 8000ece:	f000 f8e7 	bl	80010a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Start main() - wifi\r\n");
 8000ed2:	482a      	ldr	r0, [pc, #168]	@ (8000f7c <main+0xd0>)
 8000ed4:	f007 fcd2 	bl	800887c <puts>
  ret |= drv_uart_init();
 8000ed8:	f7ff fe9c 	bl	8000c14 <drv_uart_init>
 8000edc:	4602      	mov	r2, r0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8000ee4:	f7ff fd2e 	bl	8000944 <drv_esp_init>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <main+0x54>
  {
	  printf("Esp response error\r\n");
 8000ef6:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <main+0xd4>)
 8000ef8:	f007 fcc0 	bl	800887c <puts>
	  Error_Handler();
 8000efc:	f000 fcd2 	bl	80018a4 <Error_Handler>
  }


  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000f00:	4820      	ldr	r0, [pc, #128]	@ (8000f84 <main+0xd8>)
 8000f02:	f002 fccb 	bl	800389c <HAL_TIM_Base_Start_IT>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <main+0x64>
  {
	  Error_Handler();
 8000f0c:	f000 fcca 	bl	80018a4 <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f10:	f004 f948 	bl	80051a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 8000f14:	481c      	ldr	r0, [pc, #112]	@ (8000f88 <main+0xdc>)
 8000f16:	f004 fa3c 	bl	8005392 <osMutexNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <main+0xe0>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 8000f20:	481b      	ldr	r0, [pc, #108]	@ (8000f90 <main+0xe4>)
 8000f22:	f004 fa36 	bl	8005392 <osMutexNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a1a      	ldr	r2, [pc, #104]	@ (8000f94 <main+0xe8>)
 8000f2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000f98 <main+0xec>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <main+0xf0>)
 8000f32:	f004 f981 	bl	8005238 <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <main+0xf4>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 8000f3c:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <main+0xf8>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4819      	ldr	r0, [pc, #100]	@ (8000fa8 <main+0xfc>)
 8000f42:	f004 f979 	bl	8005238 <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <main+0x100>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 8000f4c:	4a18      	ldr	r2, [pc, #96]	@ (8000fb0 <main+0x104>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4818      	ldr	r0, [pc, #96]	@ (8000fb4 <main+0x108>)
 8000f52:	f004 f971 	bl	8005238 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a17      	ldr	r2, [pc, #92]	@ (8000fb8 <main+0x10c>)
 8000f5a:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 8000f5c:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <main+0x110>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4817      	ldr	r0, [pc, #92]	@ (8000fc0 <main+0x114>)
 8000f62:	f004 f969 	bl	8005238 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a16      	ldr	r2, [pc, #88]	@ (8000fc4 <main+0x118>)
 8000f6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f6c:	f004 f93e 	bl	80051ec <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8000f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f74:	f004 f9f2 	bl	800535c <osDelay>
 8000f78:	e7fa      	b.n	8000f70 <main+0xc4>
 8000f7a:	bf00      	nop
 8000f7c:	0800b844 	.word	0x0800b844
 8000f80:	0800b85c 	.word	0x0800b85c
 8000f84:	20000964 	.word	0x20000964
 8000f88:	0800ba68 	.word	0x0800ba68
 8000f8c:	20000a4c 	.word	0x20000a4c
 8000f90:	0800ba78 	.word	0x0800ba78
 8000f94:	20000a50 	.word	0x20000a50
 8000f98:	0800b9d8 	.word	0x0800b9d8
 8000f9c:	08001611 	.word	0x08001611
 8000fa0:	20000a3c 	.word	0x20000a3c
 8000fa4:	0800b9fc 	.word	0x0800b9fc
 8000fa8:	08001661 	.word	0x08001661
 8000fac:	20000a40 	.word	0x20000a40
 8000fb0:	0800ba20 	.word	0x0800ba20
 8000fb4:	080017ad 	.word	0x080017ad
 8000fb8:	20000a44 	.word	0x20000a44
 8000fbc:	0800ba44 	.word	0x0800ba44
 8000fc0:	080017b9 	.word	0x080017b9
 8000fc4:	20000a48 	.word	0x20000a48

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	@ 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	@ 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fd9a 	bl	8008b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <SystemClock_Config+0xd0>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a28      	ldr	r2, [pc, #160]	@ (8001098 <SystemClock_Config+0xd0>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <SystemClock_Config+0xd0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <SystemClock_Config+0xd4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a22      	ldr	r2, [pc, #136]	@ (800109c <SystemClock_Config+0xd4>)
 8001012:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <SystemClock_Config+0xd4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001024:	2309      	movs	r3, #9
 8001026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001028:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800102e:	2301      	movs	r3, #1
 8001030:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001036:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800103c:	2308      	movs	r3, #8
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001040:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fa6c 	bl	8002530 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800105e:	f000 fc21 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fcce 	bl	8002a20 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800108a:	f000 fc0b 	bl	80018a4 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	@ 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	@ 0x40
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2228      	movs	r2, #40	@ 0x28
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 fd25 	bl	8008b10 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010c8:	4a3a      	ldr	r2, [pc, #232]	@ (80011b4 <MX_RTC_Init+0x114>)
 80010ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010cc:	4b38      	ldr	r3, [pc, #224]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010d2:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010d4:	227f      	movs	r2, #127	@ 0x7f
 80010d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010da:	22ff      	movs	r2, #255	@ 0xff
 80010dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e4:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f0:	482f      	ldr	r0, [pc, #188]	@ (80011b0 <MX_RTC_Init+0x110>)
 80010f2:	f001 ffa5 	bl	8003040 <HAL_RTC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80010fc:	f000 fbd2 	bl	80018a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800111a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	4823      	ldr	r0, [pc, #140]	@ (80011b0 <MX_RTC_Init+0x110>)
 8001124:	f002 f80d 	bl	8003142 <HAL_RTC_SetTime>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800112e:	f000 fbb9 	bl	80018a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <MX_RTC_Init+0x110>)
 8001154:	f002 f88f 	bl	8003276 <HAL_RTC_SetDate>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800115e:	f000 fba1 	bl	80018a4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001162:	2300      	movs	r3, #0
 8001164:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001166:	2300      	movs	r3, #0
 8001168:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800116a:	2300      	movs	r3, #0
 800116c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2201      	movs	r2, #1
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_RTC_Init+0x110>)
 800119a:	f002 f8f1 	bl	8003380 <HAL_RTC_SetAlarm_IT>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80011a4:	f000 fb7e 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3740      	adds	r7, #64	@ 0x40
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000944 	.word	0x20000944
 80011b4:	40002800 	.word	0x40002800

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <MX_TIM3_Init+0x94>)
 80011d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <MX_TIM3_Init+0x98>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80011da:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_TIM3_Init+0x94>)
 80011dc:	2253      	movs	r2, #83	@ 0x53
 80011de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_TIM3_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <MX_TIM3_Init+0x94>)
 80011e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <MX_TIM3_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <MX_TIM3_Init+0x94>)
 80011f6:	2280      	movs	r2, #128	@ 0x80
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011fa:	4814      	ldr	r0, [pc, #80]	@ (800124c <MX_TIM3_Init+0x94>)
 80011fc:	f002 fafe 	bl	80037fc <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001206:	f000 fb4d 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_TIM3_Init+0x94>)
 8001218:	f002 fc92 	bl	8003b40 <HAL_TIM_ConfigClockSource>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fb3f 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_TIM3_Init+0x94>)
 8001234:	f002 fe94 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 fb31 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000964 	.word	0x20000964
 8001250:	40000400 	.word	0x40000400

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f002 feea 	bl	8004064 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 fb05 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200009ac 	.word	0x200009ac
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_USART6_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012b4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80012b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_USART6_UART_Init+0x4c>)
 80012e0:	f002 fec0 	bl	8004064 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 fadb 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200009f4 	.word	0x200009f4
 80012f8:	40011400 	.word	0x40011400

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a36      	ldr	r2, [pc, #216]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b34      	ldr	r3, [pc, #208]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b30      	ldr	r3, [pc, #192]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a28      	ldr	r2, [pc, #160]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_GPIO_Init+0xf8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	481c      	ldr	r0, [pc, #112]	@ (80013f8 <MX_GPIO_Init+0xfc>)
 8001388:	f001 f8b8 	bl	80024fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	481a      	ldr	r0, [pc, #104]	@ (80013fc <MX_GPIO_Init+0x100>)
 8001392:	f001 f8b3 	bl	80024fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001396:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800139c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4814      	ldr	r0, [pc, #80]	@ (8001400 <MX_GPIO_Init+0x104>)
 80013ae:	f000 ff21 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013b2:	2320      	movs	r3, #32
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <MX_GPIO_Init+0xfc>)
 80013ca:	f000 ff13 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 80013ce:	2310      	movs	r3, #16
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_GPIO_Init+0x100>)
 80013e6:	f000 ff05 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800

08001404 <esp_event>:
{
	HAL_GPIO_WritePin(FAN_GPIO_Port, pin, GPIO_PIN_RESET);
}

void esp_event(const char *recvBuf)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0aa      	sub	sp, #168	@ 0xa8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	227f      	movs	r2, #127	@ 0x7f
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fb9a 	bl	8008b5c <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 8001428:	2300      	movs	r3, #0
 800142a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	210a      	movs	r1, #10
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fb73 	bl	8008b20 <strchr>
 800143a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 800143e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <esp_event+0x4a>
 8001446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	210d      	movs	r1, #13
 8001454:	4618      	mov	r0, r3
 8001456:	f007 fb63 	bl	8008b20 <strchr>
 800145a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 800145e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <esp_event+0x6a>
 8001466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4945      	ldr	r1, [pc, #276]	@ (8001590 <esp_event+0x18c>)
 800147a:	4618      	mov	r0, r3
 800147c:	f007 fb82 	bl	8008b84 <strtok>
 8001480:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 8001484:	e011      	b.n	80014aa <esp_event+0xa6>
    {
        pArray[idx++] = token;
 8001486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	33a8      	adds	r3, #168	@ 0xa8
 8001494:	443b      	add	r3, r7
 8001496:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800149a:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 800149e:	493c      	ldr	r1, [pc, #240]	@ (8001590 <esp_event+0x18c>)
 80014a0:	2000      	movs	r0, #0
 80014a2:	f007 fb6f 	bl	8008b84 <strtok>
 80014a6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 80014aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <esp_event+0xb6>
 80014b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	dde5      	ble.n	8001486 <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05c      	beq.n	800157a <esp_event+0x176>
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d059      	beq.n	800157a <esp_event+0x176>
    {
        if (strcmp(pArray[1], "LED") == 0)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4932      	ldr	r1, [pc, #200]	@ (8001594 <esp_event+0x190>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe fe88 	bl	80001e0 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d121      	bne.n	800151a <esp_event+0x116>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	492f      	ldr	r1, [pc, #188]	@ (8001598 <esp_event+0x194>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe80 	bl	80001e0 <strcmp>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d108      	bne.n	80014f8 <esp_event+0xf4>
                LED_ON();
 80014e6:	2201      	movs	r2, #1
 80014e8:	2120      	movs	r1, #32
 80014ea:	482c      	ldr	r0, [pc, #176]	@ (800159c <esp_event+0x198>)
 80014ec:	f001 f806 	bl	80024fc <HAL_GPIO_WritePin>
                printf("LED turned ON\r\n");
 80014f0:	482b      	ldr	r0, [pc, #172]	@ (80015a0 <esp_event+0x19c>)
 80014f2:	f007 f9c3 	bl	800887c <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80014f6:	e045      	b.n	8001584 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	492a      	ldr	r1, [pc, #168]	@ (80015a4 <esp_event+0x1a0>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe6f 	bl	80001e0 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d13d      	bne.n	8001584 <esp_event+0x180>
                LED_OFF();
 8001508:	2200      	movs	r2, #0
 800150a:	2120      	movs	r1, #32
 800150c:	4823      	ldr	r0, [pc, #140]	@ (800159c <esp_event+0x198>)
 800150e:	f000 fff5 	bl	80024fc <HAL_GPIO_WritePin>
                printf("LED turned OFF\r\n");
 8001512:	4825      	ldr	r0, [pc, #148]	@ (80015a8 <esp_event+0x1a4>)
 8001514:	f007 f9b2 	bl	800887c <puts>
        if (strcmp(pArray[1], "LED") == 0)
 8001518:	e034      	b.n	8001584 <esp_event+0x180>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4923      	ldr	r1, [pc, #140]	@ (80015ac <esp_event+0x1a8>)
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fe5e 	bl	80001e0 <strcmp>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d121      	bne.n	800156e <esp_event+0x16a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	491a      	ldr	r1, [pc, #104]	@ (8001598 <esp_event+0x194>)
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe56 	bl	80001e0 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d108      	bne.n	800154c <esp_event+0x148>
                FAN_ON();
 800153a:	2201      	movs	r2, #1
 800153c:	2110      	movs	r1, #16
 800153e:	481c      	ldr	r0, [pc, #112]	@ (80015b0 <esp_event+0x1ac>)
 8001540:	f000 ffdc 	bl	80024fc <HAL_GPIO_WritePin>
                printf("FAN turned ON\r\n");
 8001544:	481b      	ldr	r0, [pc, #108]	@ (80015b4 <esp_event+0x1b0>)
 8001546:	f007 f999 	bl	800887c <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800154a:	e01b      	b.n	8001584 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	4915      	ldr	r1, [pc, #84]	@ (80015a4 <esp_event+0x1a0>)
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fe45 	bl	80001e0 <strcmp>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d113      	bne.n	8001584 <esp_event+0x180>
                FAN_OFF();
 800155c:	2200      	movs	r2, #0
 800155e:	2110      	movs	r1, #16
 8001560:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <esp_event+0x1ac>)
 8001562:	f000 ffcb 	bl	80024fc <HAL_GPIO_WritePin>
                printf("FAN turned OFF\r\n");
 8001566:	4814      	ldr	r0, [pc, #80]	@ (80015b8 <esp_event+0x1b4>)
 8001568:	f007 f988 	bl	800887c <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800156c:	e00a      	b.n	8001584 <esp_event+0x180>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4619      	mov	r1, r3
 8001572:	4812      	ldr	r0, [pc, #72]	@ (80015bc <esp_event+0x1b8>)
 8001574:	f007 f912 	bl	800879c <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 8001578:	e004      	b.n	8001584 <esp_event+0x180>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <esp_event+0x1bc>)
 800157e:	f007 f90d 	bl	800879c <iprintf>
    }
}
 8001582:	e000      	b.n	8001586 <esp_event+0x182>
        if (strcmp(pArray[1], "LED") == 0)
 8001584:	bf00      	nop
}
 8001586:	bf00      	nop
 8001588:	37a8      	adds	r7, #168	@ 0xa8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800b870 	.word	0x0800b870
 8001594:	0800b878 	.word	0x0800b878
 8001598:	0800b87c 	.word	0x0800b87c
 800159c:	40020000 	.word	0x40020000
 80015a0:	0800b880 	.word	0x0800b880
 80015a4:	0800b890 	.word	0x0800b890
 80015a8:	0800b894 	.word	0x0800b894
 80015ac:	0800b8a4 	.word	0x0800b8a4
 80015b0:	40020400 	.word	0x40020400
 80015b4:	0800b8a8 	.word	0x0800b8a8
 80015b8:	0800b8b8 	.word	0x0800b8b8
 80015bc:	0800b8c8 	.word	0x0800b8c8
 80015c0:	0800b8e0 	.word	0x0800b8e0

080015c4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015d4:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015de:	db0a      	blt.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015ee:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
	}
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000aa0 	.word	0x20000aa0
 8001608:	20000000 	.word	0x20000000
 800160c:	20000a54 	.word	0x20000a54

08001610 <Aiot_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Aiot_Task */
void Aiot_Task(void *argument)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	AiotClient_Init();
 8001618:	f7ff fab0 	bl	8000b7c <AiotClient_Init>
	for(;;)
	{
		if (esp_get_status() != 0)
 800161c:	f7ff f970 	bl	8000900 <esp_get_status>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d013      	beq.n	800164e <Aiot_Task+0x3e>
		{
		   printf("server connecting ...\r\n");
 8001626:	480c      	ldr	r0, [pc, #48]	@ (8001658 <Aiot_Task+0x48>)
 8001628:	f007 f928 	bl	800887c <puts>
		   if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <Aiot_Task+0x4c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	4618      	mov	r0, r3
 8001636:	f003 ff32 	bl	800549e <osMutexAcquire>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d106      	bne.n	800164e <Aiot_Task+0x3e>
			 {
			 	esp_client_conn();  // TCP 연결
 8001640:	f7ff f932 	bl	80008a8 <esp_client_conn>
			 	osMutexRelease(ESP_MutexHandle);
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <Aiot_Task+0x4c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f003 ff73 	bl	8005534 <osMutexRelease>
			 }
		}
		vTaskDelay(pdMS_TO_TICKS(10000)); // 10초
 800164e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001652:	f005 f9d1 	bl	80069f8 <vTaskDelay>
		if (esp_get_status() != 0)
 8001656:	e7e1      	b.n	800161c <Aiot_Task+0xc>
 8001658:	0800b900 	.word	0x0800b900
 800165c:	20000a4c 	.word	0x20000a4c

08001660 <NTP_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NTP_Task */
void NTP_Task(void *argument)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NTP_Task */
  /* Infinite loop */
    static time_t epoch;
    uint16_t length = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	81fb      	strh	r3, [r7, #14]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800166c:	f005 fb0e 	bl	8006c8c <xTaskGetTickCount>
 8001670:	4603      	mov	r3, r0
 8001672:	60bb      	str	r3, [r7, #8]
	const TickType_t xPeriod1 = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 8001674:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001678:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		if(esp_get_status() == 0)  // TCP 연결 확인
 800167a:	f7ff f941 	bl	8000900 <esp_get_status>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d161      	bne.n	8001748 <NTP_Task+0xe8>
		{
			if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)
 8001684:	4b3e      	ldr	r3, [pc, #248]	@ (8001780 <NTP_Task+0x120>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	4618      	mov	r0, r3
 800168e:	f003 ff06 	bl	800549e <osMutexAcquire>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d16b      	bne.n	8001770 <NTP_Task+0x110>
			{
				// UART 버퍼 초기화
				cb_data.length = 0;
 8001698:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <NTP_Task+0x124>)
 800169a:	2200      	movs	r2, #0
 800169c:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
				memset(cb_data.buf, 0, sizeof(cb_data.buf));
 80016a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a4:	2100      	movs	r1, #0
 80016a6:	4837      	ldr	r0, [pc, #220]	@ (8001784 <NTP_Task+0x124>)
 80016a8:	f007 fa32 	bl	8008b10 <memset>

				// NTP 서버 설정 (매 요청 안전)
				if(esp_ntp_config() == 0)
 80016ac:	f7ff fbd4 	bl	8000e58 <esp_ntp_config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d142      	bne.n	800173c <NTP_Task+0xdc>
				{
					if(esp_at_command((uint8_t *)"AT+CIPSNTPTIME?\r\n",
 80016b6:	f107 020e 	add.w	r2, r7, #14
 80016ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016be:	4932      	ldr	r1, [pc, #200]	@ (8001788 <NTP_Task+0x128>)
 80016c0:	4832      	ldr	r0, [pc, #200]	@ (800178c <NTP_Task+0x12c>)
 80016c2:	f7fe ffdb 	bl	800067c <esp_at_command>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d137      	bne.n	800173c <NTP_Task+0xdc>
									  (uint8_t *)response, &length, 5000) == 0)
					{
						char *p = strtok(response, "\r\n");
 80016cc:	4930      	ldr	r1, [pc, #192]	@ (8001790 <NTP_Task+0x130>)
 80016ce:	482e      	ldr	r0, [pc, #184]	@ (8001788 <NTP_Task+0x128>)
 80016d0:	f007 fa58 	bl	8008b84 <strtok>
 80016d4:	6178      	str	r0, [r7, #20]
						while(p != NULL)
 80016d6:	e02c      	b.n	8001732 <NTP_Task+0xd2>
						{
							if(parse_cipsntptime_line(p, &epoch) == 0)
 80016d8:	492e      	ldr	r1, [pc, #184]	@ (8001794 <NTP_Task+0x134>)
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff fac0 	bl	8000c60 <parse_cipsntptime_line>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d120      	bne.n	8001728 <NTP_Task+0xc8>
							{
								printf("NTP request success!\r\n");
 80016e6:	482c      	ldr	r0, [pc, #176]	@ (8001798 <NTP_Task+0x138>)
 80016e8:	f007 f8c8 	bl	800887c <puts>
								printf("NTP Time (KST): %s", ctime(&epoch));
 80016ec:	4829      	ldr	r0, [pc, #164]	@ (8001794 <NTP_Task+0x134>)
 80016ee:	f007 fabb 	bl	8008c68 <ctime>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4829      	ldr	r0, [pc, #164]	@ (800179c <NTP_Task+0x13c>)
 80016f8:	f007 f850 	bl	800879c <iprintf>

					            // Mutex로 전역 변수 갱신
								if(osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK)
 80016fc:	4b28      	ldr	r3, [pc, #160]	@ (80017a0 <NTP_Task+0x140>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	4618      	mov	r0, r3
 8001706:	f003 feca 	bl	800549e <osMutexAcquire>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d114      	bne.n	800173a <NTP_Task+0xda>
								{
									ntp_time = epoch;
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <NTP_Task+0x134>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	4923      	ldr	r1, [pc, #140]	@ (80017a4 <NTP_Task+0x144>)
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
									osMutexRelease(NTP_MutexHandle);
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <NTP_Task+0x140>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f003 ff07 	bl	8005534 <osMutexRelease>
								}

								break;
 8001726:	e008      	b.n	800173a <NTP_Task+0xda>
							}
							p = strtok(NULL, "\r\n");
 8001728:	4919      	ldr	r1, [pc, #100]	@ (8001790 <NTP_Task+0x130>)
 800172a:	2000      	movs	r0, #0
 800172c:	f007 fa2a 	bl	8008b84 <strtok>
 8001730:	6178      	str	r0, [r7, #20]
						while(p != NULL)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1cf      	bne.n	80016d8 <NTP_Task+0x78>
 8001738:	e000      	b.n	800173c <NTP_Task+0xdc>
								break;
 800173a:	bf00      	nop
						}
					}
				}

				osMutexRelease(ESP_MutexHandle);
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <NTP_Task+0x120>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fef7 	bl	8005534 <osMutexRelease>
 8001746:	e013      	b.n	8001770 <NTP_Task+0x110>
			}
		}
		else
		{
			printf("TCP not connected!, reconnecting...\r\n");
 8001748:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <NTP_Task+0x148>)
 800174a:	f007 f897 	bl	800887c <puts>
			if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <NTP_Task+0x120>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f04f 31ff 	mov.w	r1, #4294967295
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fea1 	bl	800549e <osMutexAcquire>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <NTP_Task+0x110>
			{
				esp_client_conn();
 8001762:	f7ff f8a1 	bl	80008a8 <esp_client_conn>
				osMutexRelease(ESP_MutexHandle);
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <NTP_Task+0x120>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fee2 	bl	8005534 <osMutexRelease>
			}
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod1); // 10초마다
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f8be 	bl	80068f8 <vTaskDelayUntil>
		if(esp_get_status() == 0)  // TCP 연결 확인
 800177c:	e77d      	b.n	800167a <NTP_Task+0x1a>
 800177e:	bf00      	nop
 8001780:	20000a4c 	.word	0x20000a4c
 8001784:	2000053c 	.word	0x2000053c
 8001788:	20000104 	.word	0x20000104
 800178c:	0800b918 	.word	0x0800b918
 8001790:	0800b92c 	.word	0x0800b92c
 8001794:	20000aa8 	.word	0x20000aa8
 8001798:	0800b930 	.word	0x0800b930
 800179c:	0800b948 	.word	0x0800b948
 80017a0:	20000a50 	.word	0x20000a50
 80017a4:	20000a98 	.word	0x20000a98
 80017a8:	0800b95c 	.word	0x0800b95c

080017ac <Weather_Task>:
* @retval None
*/
/* USER CODE END Header_Weather_Task */

void Weather_Task(void *argument)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Weather_Task */
  /* Infinite loop */
	for(;;)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <Weather_Task+0x8>

080017b8 <Command_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Command_Task */
void Command_Task(void *argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b090      	sub	sp, #64	@ 0x40
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	for(;;)
	{
		// 라인 단위로 안전하게 긁기
		if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 80017c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <Command_Task+0xc8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fe68 	bl	800549e <osMutexAcquire>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d12d      	bne.n	8001830 <Command_Task+0x78>

			if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 80017d4:	492b      	ldr	r1, [pc, #172]	@ (8001884 <Command_Task+0xcc>)
 80017d6:	482c      	ldr	r0, [pc, #176]	@ (8001888 <Command_Task+0xd0>)
 80017d8:	f007 fa30 	bl	8008c3c <strstr>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d021      	beq.n	8001826 <Command_Task+0x6e>
 80017e2:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <Command_Task+0xd0>)
 80017e4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <Command_Task+0xd0>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	2b0a      	cmp	r3, #10
 80017f0:	d119      	bne.n	8001826 <Command_Task+0x6e>
			{
				//?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
				strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80017f2:	215b      	movs	r1, #91	@ 0x5b
 80017f4:	4824      	ldr	r0, [pc, #144]	@ (8001888 <Command_Task+0xd0>)
 80017f6:	f007 f993 	bl	8008b20 <strchr>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4823      	ldr	r0, [pc, #140]	@ (800188c <Command_Task+0xd4>)
 8001800:	f008 f931 	bl	8009a66 <strcpy>
				memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001808:	2100      	movs	r1, #0
 800180a:	481f      	ldr	r0, [pc, #124]	@ (8001888 <Command_Task+0xd0>)
 800180c:	f007 f980 	bl	8008b10 <memset>
				cb_data.length = 0;
 8001810:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <Command_Task+0xd0>)
 8001812:	2200      	movs	r2, #0
 8001814:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
				esp_event(strBuff);
 8001818:	481c      	ldr	r0, [pc, #112]	@ (800188c <Command_Task+0xd4>)
 800181a:	f7ff fdf3 	bl	8001404 <esp_event>
				printf("Debug cb_data: %s\r\n", cb_data.buf);
 800181e:	491a      	ldr	r1, [pc, #104]	@ (8001888 <Command_Task+0xd0>)
 8001820:	481b      	ldr	r0, [pc, #108]	@ (8001890 <Command_Task+0xd8>)
 8001822:	f006 ffbb 	bl	800879c <iprintf>
			}
			osMutexRelease(ESP_MutexHandle);
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <Command_Task+0xc8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f003 fe82 	bl	8005534 <osMutexRelease>
		}

		// UART2 콘솔 입력
		if(rx2Flag)
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <Command_Task+0xdc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01e      	beq.n	8001878 <Command_Task+0xc0>
		{
		    char tmp[50];
		    strncpy(tmp, (char *)rx2Data, sizeof(tmp)-1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2231      	movs	r2, #49	@ 0x31
 8001840:	4915      	ldr	r1, [pc, #84]	@ (8001898 <Command_Task+0xe0>)
 8001842:	4618      	mov	r0, r3
 8001844:	f007 f98a 	bl	8008b5c <strncpy>
		    tmp[sizeof(tmp)-1] = '\0';
 8001848:	2300      	movs	r3, #0
 800184a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		    tmp[strcspn(tmp, "\r\n")] = '\0'; // 개행 제거
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4912      	ldr	r1, [pc, #72]	@ (800189c <Command_Task+0xe4>)
 8001854:	4618      	mov	r0, r3
 8001856:	f007 f970 	bl	8008b3a <strcspn>
 800185a:	4603      	mov	r3, r0
 800185c:	3340      	adds	r3, #64	@ 0x40
 800185e:	443b      	add	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	f803 2c34 	strb.w	r2, [r3, #-52]
		    printf("UART2 recv: %s\r\n", tmp);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <Command_Task+0xe8>)
 800186e:	f006 ff95 	bl	800879c <iprintf>
		    rx2Flag = 0;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <Command_Task+0xdc>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelay(pdMS_TO_TICKS(20)); // 20ms 틱
 8001878:	2014      	movs	r0, #20
 800187a:	f005 f8bd 	bl	80069f8 <vTaskDelay>
		if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 800187e:	e79f      	b.n	80017c0 <Command_Task+0x8>
 8001880:	20000a4c 	.word	0x20000a4c
 8001884:	0800b984 	.word	0x0800b984
 8001888:	2000053c 	.word	0x2000053c
 800188c:	20000a58 	.word	0x20000a58
 8001890:	0800b98c 	.word	0x0800b98c
 8001894:	20000504 	.word	0x20000504
 8001898:	20000508 	.word	0x20000508
 800189c:	0800b92c 	.word	0x0800b92c
 80018a0:	0800b9a0 	.word	0x0800b9a0

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <Error_Handler+0x8>

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_MspInit+0x54>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <HAL_MspInit+0x54>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <HAL_MspInit+0x54>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_MspInit+0x54>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_MspInit+0x54>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_MspInit+0x54>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	210f      	movs	r1, #15
 80018f2:	f06f 0001 	mvn.w	r0, #1
 80018f6:	f000 fbb4 	bl	8002062 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a10      	ldr	r2, [pc, #64]	@ (8001968 <HAL_RTC_MspInit+0x60>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d119      	bne.n	8001960 <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800192c:	2302      	movs	r3, #2
 800192e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001934:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fa90 	bl	8002e60 <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001946:	f7ff ffad 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_RTC_MspInit+0x64>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2105      	movs	r1, #5
 8001954:	2029      	movs	r0, #41	@ 0x29
 8001956:	f000 fb84 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800195a:	2029      	movs	r0, #41	@ 0x29
 800195c:	f000 fb9d 	bl	800209a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40002800 	.word	0x40002800
 800196c:	42470e3c 	.word	0x42470e3c

08001970 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <HAL_TIM_Base_MspInit+0x48>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d115      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <HAL_TIM_Base_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <HAL_TIM_Base_MspInit+0x4c>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_TIM_Base_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2105      	movs	r1, #5
 80019a2:	201d      	movs	r0, #29
 80019a4:	f000 fb5d 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019a8:	201d      	movs	r0, #29
 80019aa:	f000 fb76 	bl	800209a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ac8 <HAL_UART_MspInit+0x108>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d134      	bne.n	8001a4c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a38      	ldr	r2, [pc, #224]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a31      	ldr	r2, [pc, #196]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4826      	ldr	r0, [pc, #152]	@ (8001ad0 <HAL_UART_MspInit+0x110>)
 8001a36:	f000 fbdd 	bl	80021f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2026      	movs	r0, #38	@ 0x26
 8001a40:	f000 fb0f 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a44:	2026      	movs	r0, #38	@ 0x26
 8001a46:	f000 fb28 	bl	800209a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a4a:	e038      	b.n	8001abe <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a20      	ldr	r2, [pc, #128]	@ (8001ad4 <HAL_UART_MspInit+0x114>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d133      	bne.n	8001abe <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_UART_MspInit+0x10c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8e:	23c0      	movs	r3, #192	@ 0xc0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480b      	ldr	r0, [pc, #44]	@ (8001ad8 <HAL_UART_MspInit+0x118>)
 8001aaa:	f000 fba3 	bl	80021f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	2047      	movs	r0, #71	@ 0x47
 8001ab4:	f000 fad5 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ab8:	2047      	movs	r0, #71	@ 0x47
 8001aba:	f000 faee 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	@ 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40004400 	.word	0x40004400
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40011400 	.word	0x40011400
 8001ad8:	40020800 	.word	0x40020800

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <MemManage_Handler+0x4>

08001af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f985 	bl	8001e24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b1a:	f005 fc01 	bl	8007320 <xTaskGetSchedulerState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d001      	beq.n	8001b28 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b24:	f006 faf8 	bl	8008118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM3_IRQHandler+0x10>)
 8001b32:	f001 ff15 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000964 	.word	0x20000964

08001b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <USART2_IRQHandler+0x10>)
 8001b46:	f002 fb8d 	bl	8004264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200009ac 	.word	0x200009ac

08001b54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <RTC_Alarm_IRQHandler+0x10>)
 8001b5a:	f001 fd55 	bl	8003608 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000944 	.word	0x20000944

08001b68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <USART6_IRQHandler+0x10>)
 8001b6e:	f002 fb79 	bl	8004264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200009f4 	.word	0x200009f4

08001b7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return 1;
 8001b80:	2301      	movs	r3, #1
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_kill>:

int _kill(int pid, int sig)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b96:	f007 ff37 	bl	8009a08 <__errno>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2216      	movs	r2, #22
 8001b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_exit>:

void _exit (int status)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffe7 	bl	8001b8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bbe:	bf00      	nop
 8001bc0:	e7fd      	b.n	8001bbe <_exit+0x12>

08001bc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e00a      	b.n	8001bea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	4601      	mov	r1, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	60ba      	str	r2, [r7, #8]
 8001be0:	b2ca      	uxtb	r2, r1
 8001be2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf0      	blt.n	8001bd4 <_read+0x12>
  }

  return len;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e009      	b.n	8001c22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	60ba      	str	r2, [r7, #8]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f80a 	bl	8000c30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbf1      	blt.n	8001c0e <_write+0x12>
  }
  return len;
 8001c2a:	687b      	ldr	r3, [r7, #4]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_close>:

int _close(int file)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_isatty>:

int _isatty(int file)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f007 fe9c 	bl	8009a08 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20020000 	.word	0x20020000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	20000ab4 	.word	0x20000ab4
 8001d04:	20005580 	.word	0x20005580

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d30:	f7ff ffea 	bl	8001d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	@ (8001d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f007 fe5b 	bl	8009a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff f8a5 	bl	8000eac <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001d70:	0800bec8 	.word	0x0800bec8
  ldr r2, =_sbss
 8001d74:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001d78:	2000557c 	.word	0x2000557c

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f94f 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fd7c 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f967 	bl	80020b6 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f92f 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000010 	.word	0x20000010
 8001e48:	20000ab8 	.word	0x20000ab8

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000ab8 	.word	0x20000ab8

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000010 	.word	0x20000010

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff feb6 	bl	8001e4c <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d008      	beq.n	8002100 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2280      	movs	r2, #128	@ 0x80
 80020f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e052      	b.n	80021a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0216 	bic.w	r2, r2, #22
 800210e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800211e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d103      	bne.n	8002130 <HAL_DMA_Abort+0x62>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0208 	bic.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	e013      	b.n	800217a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002152:	f7ff fe7b 	bl	8001e4c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b05      	cmp	r3, #5
 800215e:	d90c      	bls.n	800217a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e015      	b.n	80021a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e4      	bne.n	8002152 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	223f      	movs	r2, #63	@ 0x3f
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	@ 0x80
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e00c      	b.n	80021e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e159      	b.n	80024c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8148 	bne.w	80024be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a2 	beq.w	80024be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <HAL_GPIO_Init+0x2e8>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	4a56      	ldr	r2, [pc, #344]	@ (80024dc <HAL_GPIO_Init+0x2e8>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002388:	6453      	str	r3, [r2, #68]	@ 0x44
 800238a:	4b54      	ldr	r3, [pc, #336]	@ (80024dc <HAL_GPIO_Init+0x2e8>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a52      	ldr	r2, [pc, #328]	@ (80024e0 <HAL_GPIO_Init+0x2ec>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a49      	ldr	r2, [pc, #292]	@ (80024e4 <HAL_GPIO_Init+0x2f0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x202>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a48      	ldr	r2, [pc, #288]	@ (80024e8 <HAL_GPIO_Init+0x2f4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1fe>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a47      	ldr	r2, [pc, #284]	@ (80024ec <HAL_GPIO_Init+0x2f8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1fa>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <HAL_GPIO_Init+0x2fc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1f6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a45      	ldr	r2, [pc, #276]	@ (80024f4 <HAL_GPIO_Init+0x300>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1f2>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	@ (80024e0 <HAL_GPIO_Init+0x2ec>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a2f      	ldr	r2, [pc, #188]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a24      	ldr	r2, [pc, #144]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a0f      	ldr	r2, [pc, #60]	@ (80024f8 <HAL_GPIO_Init+0x304>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f aea2 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40013c00 	.word	0x40013c00

080024fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
 8002508:	4613      	mov	r3, r2
 800250a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800250c:	787b      	ldrb	r3, [r7, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002518:	e003      	b.n	8002522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	041a      	lsls	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e267      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d075      	beq.n	800263a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800254e:	4b88      	ldr	r3, [pc, #544]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00c      	beq.n	8002574 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b85      	ldr	r3, [pc, #532]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002562:	2b08      	cmp	r3, #8
 8002564:	d112      	bne.n	800258c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b82      	ldr	r3, [pc, #520]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002572:	d10b      	bne.n	800258c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4b7e      	ldr	r3, [pc, #504]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05b      	beq.n	8002638 <HAL_RCC_OscConfig+0x108>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d157      	bne.n	8002638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e242      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x74>
 8002596:	4b76      	ldr	r3, [pc, #472]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0xb0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x98>
 80025ae:	4b70      	ldr	r3, [pc, #448]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6c      	ldr	r2, [pc, #432]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xb0>
 80025c8:	4b69      	ldr	r3, [pc, #420]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a68      	ldr	r2, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b66      	ldr	r3, [pc, #408]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fc30 	bl	8001e4c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff fc2c 	bl	8001e4c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e207      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b5b      	ldr	r3, [pc, #364]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0xc0>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff fc1c 	bl	8001e4c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff fc18 	bl	8001e4c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	@ 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1f3      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	4b51      	ldr	r3, [pc, #324]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0xe8>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002646:	4b4a      	ldr	r3, [pc, #296]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002652:	4b47      	ldr	r3, [pc, #284]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11c      	bne.n	8002698 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b44      	ldr	r3, [pc, #272]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x152>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1c7      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b3b      	ldr	r3, [pc, #236]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4937      	ldr	r1, [pc, #220]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e03a      	b.n	800270e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b34      	ldr	r3, [pc, #208]	@ (8002774 <HAL_RCC_OscConfig+0x244>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff fbd1 	bl	8001e4c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff fbcd 	bl	8001e4c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1a8      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4925      	ldr	r1, [pc, #148]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_RCC_OscConfig+0x244>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff fbb0 	bl	8001e4c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7ff fbac 	bl	8001e4c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e187      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d036      	beq.n	8002788 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_RCC_OscConfig+0x248>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7ff fb90 	bl	8001e4c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002730:	f7ff fb8c 	bl	8001e4c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e167      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_RCC_OscConfig+0x240>)
 8002744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x200>
 800274e:	e01b      	b.n	8002788 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_OscConfig+0x248>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7ff fb79 	bl	8001e4c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	e00e      	b.n	800277c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275e:	f7ff fb75 	bl	8001e4c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d907      	bls.n	800277c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e150      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
 8002770:	40023800 	.word	0x40023800
 8002774:	42470000 	.word	0x42470000
 8002778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ea      	bne.n	800275e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8097 	beq.w	80028c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279a:	4b81      	ldr	r3, [pc, #516]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b7d      	ldr	r3, [pc, #500]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	4a7c      	ldr	r2, [pc, #496]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b6:	4b7a      	ldr	r3, [pc, #488]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b77      	ldr	r3, [pc, #476]	@ (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b74      	ldr	r3, [pc, #464]	@ (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a73      	ldr	r2, [pc, #460]	@ (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7ff fb35 	bl	8001e4c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7ff fb31 	bl	8001e4c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e10c      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_RCC_OscConfig+0x474>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x2ea>
 800280c:	4b64      	ldr	r3, [pc, #400]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a63      	ldr	r2, [pc, #396]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x324>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b05      	cmp	r3, #5
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x30c>
 8002822:	4b5f      	ldr	r3, [pc, #380]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a5e      	ldr	r2, [pc, #376]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	4b5c      	ldr	r3, [pc, #368]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a5b      	ldr	r2, [pc, #364]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0x324>
 800283c:	4b58      	ldr	r3, [pc, #352]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002840:	4a57      	ldr	r2, [pc, #348]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6713      	str	r3, [r2, #112]	@ 0x70
 8002848:	4b55      	ldr	r3, [pc, #340]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	4a54      	ldr	r2, [pc, #336]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7ff faf6 	bl	8001e4c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7ff faf2 	bl	8001e4c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0cb      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287a:	4b49      	ldr	r3, [pc, #292]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0ee      	beq.n	8002864 <HAL_RCC_OscConfig+0x334>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7ff fae0 	bl	8001e4c <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7ff fadc 	bl	8001e4c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0b5      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a6:	4b3e      	ldr	r3, [pc, #248]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ee      	bne.n	8002890 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b8:	4b39      	ldr	r3, [pc, #228]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	4a38      	ldr	r2, [pc, #224]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a1 	beq.w	8002a10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ce:	4b34      	ldr	r3, [pc, #208]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d05c      	beq.n	8002994 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d141      	bne.n	8002966 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <HAL_RCC_OscConfig+0x478>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff fab0 	bl	8001e4c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7ff faac 	bl	8001e4c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e087      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	4b27      	ldr	r3, [pc, #156]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	491b      	ldr	r1, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x478>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7ff fa85 	bl	8001e4c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7ff fa81 	bl	8001e4c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e05c      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x416>
 8002964:	e054      	b.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCC_OscConfig+0x478>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fa6e 	bl	8001e4c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff fa6a 	bl	8001e4c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e045      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_OscConfig+0x470>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x444>
 8002992:	e03d      	b.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e038      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_OscConfig+0x4ec>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d028      	beq.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d121      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d11a      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	3b01      	subs	r3, #1
 80029f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0cc      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b68      	ldr	r3, [pc, #416]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d90c      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b65      	ldr	r3, [pc, #404]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a58      	ldr	r2, [pc, #352]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a52      	ldr	r2, [pc, #328]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d044      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d119      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b3f      	ldr	r3, [pc, #252]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aee:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e067      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afe:	4b37      	ldr	r3, [pc, #220]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f023 0203 	bic.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4934      	ldr	r1, [pc, #208]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b10:	f7ff f99c 	bl	8001e4c <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b18:	f7ff f998 	bl	8001e4c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e04f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 020c 	and.w	r2, r3, #12
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1eb      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b40:	4b25      	ldr	r3, [pc, #148]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d20c      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b22      	ldr	r3, [pc, #136]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f8fc 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	0800ba88 	.word	0x0800ba88
 8002be4:	20000008 	.word	0x20000008
 8002be8:	2000000c 	.word	0x2000000c

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b094      	sub	sp, #80	@ 0x50
 8002bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c04:	4b79      	ldr	r3, [pc, #484]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	f200 80e1 	bhi.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1e:	e0db      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b73      	ldr	r3, [pc, #460]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c24:	e0db      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b73      	ldr	r3, [pc, #460]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c2a:	e0d8      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c36:	4b6d      	ldr	r3, [pc, #436]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b6a      	ldr	r3, [pc, #424]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	0159      	lsls	r1, r3, #5
 8002c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c70:	0150      	lsls	r0, r2, #5
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4621      	mov	r1, r4
 8002c78:	1a51      	subs	r1, r2, r1
 8002c7a:	6139      	str	r1, [r7, #16]
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c90:	4659      	mov	r1, fp
 8002c92:	018b      	lsls	r3, r1, #6
 8002c94:	4651      	mov	r1, sl
 8002c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	018a      	lsls	r2, r1, #6
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cbe:	4690      	mov	r8, r2
 8002cc0:	4699      	mov	r9, r3
 8002cc2:	4623      	mov	r3, r4
 8002cc4:	eb18 0303 	adds.w	r3, r8, r3
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	462b      	mov	r3, r5
 8002ccc:	eb49 0303 	adc.w	r3, r9, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	024b      	lsls	r3, r1, #9
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce8:	4621      	mov	r1, r4
 8002cea:	024a      	lsls	r2, r1, #9
 8002cec:	4610      	mov	r0, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cfc:	f7fd fb28 	bl	8000350 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d08:	e058      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	4611      	mov	r1, r2
 8002d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d24:	4642      	mov	r2, r8
 8002d26:	464b      	mov	r3, r9
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0159      	lsls	r1, r3, #5
 8002d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d36:	0150      	lsls	r0, r2, #5
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d42:	4649      	mov	r1, r9
 8002d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002d60:	eb63 050b 	sbc.w	r5, r3, fp
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	00eb      	lsls	r3, r5, #3
 8002d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d72:	00e2      	lsls	r2, r4, #3
 8002d74:	4614      	mov	r4, r2
 8002d76:	461d      	mov	r5, r3
 8002d78:	4643      	mov	r3, r8
 8002d7a:	18e3      	adds	r3, r4, r3
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb45 0303 	adc.w	r3, r5, r3
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d92:	4629      	mov	r1, r5
 8002d94:	028b      	lsls	r3, r1, #10
 8002d96:	4621      	mov	r1, r4
 8002d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	028a      	lsls	r2, r1, #10
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	61fa      	str	r2, [r7, #28]
 8002dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db0:	f7fd face 	bl	8000350 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3750      	adds	r7, #80	@ 0x50
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	007a1200 	.word	0x007a1200

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20000008 	.word	0x20000008

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e14:	f7ff fff0 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	@ (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	0800ba98 	.word	0x0800ba98

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e3c:	f7ff ffdc 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0b5b      	lsrs	r3, r3, #13
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	@ (8002e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	0800ba98 	.word	0x0800ba98

08002e60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d038      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e88:	4b68      	ldr	r3, [pc, #416]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe ffdd 	bl	8001e4c <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e96:	f7fe ffd9 	bl	8001e4c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0bd      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ea8:	4b61      	ldr	r3, [pc, #388]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	495a      	ldr	r1, [pc, #360]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ece:	4b57      	ldr	r3, [pc, #348]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe ffba 	bl	8001e4c <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002edc:	f7fe ffb6 	bl	8001e4c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e09a      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eee:	4b50      	ldr	r3, [pc, #320]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8083 	beq.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	4b48      	ldr	r3, [pc, #288]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	4a47      	ldr	r2, [pc, #284]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f18:	4b45      	ldr	r3, [pc, #276]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f24:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a42      	ldr	r2, [pc, #264]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe ff8c 	bl	8001e4c <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe ff88 	bl	8001e4c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e06c      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f56:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f5e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02f      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d028      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f74:	4b2e      	ldr	r3, [pc, #184]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f84:	4b2c      	ldr	r3, [pc, #176]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f8a:	4a29      	ldr	r2, [pc, #164]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe ff56 	bl	8001e4c <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe ff52 	bl	8001e4c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e034      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002fd4:	4b16      	ldr	r3, [pc, #88]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe8:	4911      	ldr	r1, [pc, #68]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
 8002fee:	e005      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ffa:	6093      	str	r3, [r2, #8]
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	4909      	ldr	r1, [pc, #36]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7d1a      	ldrb	r2, [r3, #20]
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003020:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	42470068 	.word	0x42470068
 8003030:	40023800 	.word	0x40023800
 8003034:	40007000 	.word	0x40007000
 8003038:	42470e40 	.word	0x42470e40
 800303c:	424711e0 	.word	0x424711e0

08003040 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e073      	b.n	800313a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7f5b      	ldrb	r3, [r3, #29]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe fc50 	bl	8001908 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d055      	beq.n	8003128 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	22ca      	movs	r2, #202	@ 0xca
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2253      	movs	r2, #83	@ 0x53
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb31 	bl	80036f4 <RTC_EnterInitMode>
 8003092:	4603      	mov	r3, r0
 8003094:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d12c      	bne.n	80030f6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80030aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68d2      	ldr	r2, [r2, #12]
 80030d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	041a      	lsls	r2, r3, #16
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb38 	bl	8003762 <RTC_ExitInitMode>
 80030f2:	4603      	mov	r3, r0
 80030f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d110      	bne.n	800311e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	22ff      	movs	r2, #255	@ 0xff
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24
 8003126:	e001      	b.n	800312c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003142:	b590      	push	{r4, r7, lr}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	7f1b      	ldrb	r3, [r3, #28]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_RTC_SetTime+0x1c>
 800315a:	2302      	movs	r3, #2
 800315c:	e087      	b.n	800326e <HAL_RTC_SetTime+0x12c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2202      	movs	r2, #2
 8003168:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d126      	bne.n	80031be <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fb0f 	bl	80037ac <RTC_ByteToBcd2>
 800318e:	4603      	mov	r3, r0
 8003190:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fb08 	bl	80037ac <RTC_ByteToBcd2>
 800319c:	4603      	mov	r3, r0
 800319e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031a0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	789b      	ldrb	r3, [r3, #2]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fb00 	bl	80037ac <RTC_ByteToBcd2>
 80031ac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	78db      	ldrb	r3, [r3, #3]
 80031b6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e018      	b.n	80031f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031de:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80031e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	78db      	ldrb	r3, [r3, #3]
 80031ea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	22ca      	movs	r2, #202	@ 0xca
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2253      	movs	r2, #83	@ 0x53
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa77 	bl	80036f4 <RTC_EnterInitMode>
 8003206:	4603      	mov	r3, r0
 8003208:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800320a:	7cfb      	ldrb	r3, [r7, #19]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d120      	bne.n	8003252 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800321a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800321e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800322e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6899      	ldr	r1, [r3, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	431a      	orrs	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fa8a 	bl	8003762 <RTC_ExitInitMode>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	22ff      	movs	r2, #255	@ 0xff
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]

  return status;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
}
 800326e:	4618      	mov	r0, r3
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}

08003276 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003276:	b590      	push	{r4, r7, lr}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	7f1b      	ldrb	r3, [r3, #28]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_RTC_SetDate+0x1c>
 800328e:	2302      	movs	r3, #2
 8003290:	e071      	b.n	8003376 <HAL_RTC_SetDate+0x100>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2202      	movs	r2, #2
 800329c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10e      	bne.n	80032c2 <HAL_RTC_SetDate+0x4c>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	f023 0310 	bic.w	r3, r3, #16
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	330a      	adds	r3, #10
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11c      	bne.n	8003302 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	78db      	ldrb	r3, [r3, #3]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fa6d 	bl	80037ac <RTC_ByteToBcd2>
 80032d2:	4603      	mov	r3, r0
 80032d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fa66 	bl	80037ac <RTC_ByteToBcd2>
 80032e0:	4603      	mov	r3, r0
 80032e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	789b      	ldrb	r3, [r3, #2]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fa5e 	bl	80037ac <RTC_ByteToBcd2>
 80032f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e00e      	b.n	8003320 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800330e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003314:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	22ca      	movs	r2, #202	@ 0xca
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2253      	movs	r2, #83	@ 0x53
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f9df 	bl	80036f4 <RTC_EnterInitMode>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800334a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800334e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa06 	bl	8003762 <RTC_ExitInitMode>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	22ff      	movs	r2, #255	@ 0xff
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]

  return status;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
}
 8003376:	4618      	mov	r0, r3
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
	...

08003380 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b089      	sub	sp, #36	@ 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800338c:	4b9b      	ldr	r3, [pc, #620]	@ (80035fc <HAL_RTC_SetAlarm_IT+0x27c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a9b      	ldr	r2, [pc, #620]	@ (8003600 <HAL_RTC_SetAlarm_IT+0x280>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0adb      	lsrs	r3, r3, #11
 8003398:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800339c:	fb02 f303 	mul.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	7f1b      	ldrb	r3, [r3, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_RTC_SetAlarm_IT+0x36>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e11e      	b.n	80035f4 <HAL_RTC_SetAlarm_IT+0x274>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d137      	bne.n	8003438 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f9e3 	bl	80037ac <RTC_ByteToBcd2>
 80033e6:	4603      	mov	r3, r0
 80033e8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f9dc 	bl	80037ac <RTC_ByteToBcd2>
 80033f4:	4603      	mov	r3, r0
 80033f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80033f8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	789b      	ldrb	r3, [r3, #2]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f9d4 	bl	80037ac <RTC_ByteToBcd2>
 8003404:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003406:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	78db      	ldrb	r3, [r3, #3]
 800340e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003410:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f9c6 	bl	80037ac <RTC_ByteToBcd2>
 8003420:	4603      	mov	r3, r0
 8003422:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8003424:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800342c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003432:	4313      	orrs	r3, r2
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e023      	b.n	8003480 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003458:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800345e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003466:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8003470:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003476:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800347c:	4313      	orrs	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	22ca      	movs	r2, #202	@ 0xca
 8003492:	625a      	str	r2, [r3, #36]	@ 0x24
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2253      	movs	r2, #83	@ 0x53
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a4:	d142      	bne.n	800352c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034b4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80034c6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	22ff      	movs	r2, #255	@ 0xff
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2203      	movs	r2, #3
 80034e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e083      	b.n	80035f4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0e6      	beq.n	80034c8 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003518:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	e04c      	b.n	80035c6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800353a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800354c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800354e:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2b      	ldr	r2, [pc, #172]	@ (8003600 <HAL_RTC_SetAlarm_IT+0x280>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	0adb      	lsrs	r3, r3, #11
 800355a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3b01      	subs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2203      	movs	r2, #3
 800357c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e035      	b.n	80035f4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0e6      	beq.n	8003564 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b4:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <HAL_RTC_SetAlarm_IT+0x284>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003604 <HAL_RTC_SetAlarm_IT+0x284>)
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <HAL_RTC_SetAlarm_IT+0x284>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <HAL_RTC_SetAlarm_IT+0x284>)
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035dc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	22ff      	movs	r2, #255	@ 0xff
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3724      	adds	r7, #36	@ 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	20000008 	.word	0x20000008
 8003600:	10624dd3 	.word	0x10624dd3
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003610:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003612:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003616:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003644:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f824 	bl	8003694 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003678:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8b4 	bl	80037e8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	775a      	strb	r2, [r3, #29]
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40013c00 	.word	0x40013c00

08003694 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <HAL_RTC_WaitForSynchro+0x48>)
 80036ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036bc:	f7fe fbc6 	bl	8001e4c <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036c2:	e009      	b.n	80036d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036c4:	f7fe fbc2 	bl	8001e4c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036d2:	d901      	bls.n	80036d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e007      	b.n	80036e8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	00013f5f 	.word	0x00013f5f

080036f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d122      	bne.n	8003758 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003720:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003722:	f7fe fb93 	bl	8001e4c <HAL_GetTick>
 8003726:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003728:	e00c      	b.n	8003744 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800372a:	f7fe fb8f 	bl	8001e4c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003738:	d904      	bls.n	8003744 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <RTC_EnterInitMode+0x64>
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d1e8      	bne.n	800372a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800377c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff8b 	bl	80036a8 <HAL_RTC_WaitForSynchro>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2204      	movs	r2, #4
 800379c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80037ba:	e005      	b.n	80037c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3301      	adds	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	3b0a      	subs	r3, #10
 80037c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	2b09      	cmp	r3, #9
 80037cc:	d8f6      	bhi.n	80037bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	4313      	orrs	r3, r2
 80037da:	b2db      	uxtb	r3, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e041      	b.n	8003892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe f8a4 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f000 fa70 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d001      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e044      	b.n	800393e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <HAL_TIM_Base_Start_IT+0xb0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x6c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d013      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x6c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003950 <HAL_TIM_Base_Start_IT+0xb4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x6c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a19      	ldr	r2, [pc, #100]	@ (8003954 <HAL_TIM_Base_Start_IT+0xb8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <HAL_TIM_Base_Start_IT+0xbc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x6c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a16      	ldr	r2, [pc, #88]	@ (800395c <HAL_TIM_Base_Start_IT+0xc0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d111      	bne.n	800392c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b06      	cmp	r3, #6
 8003918:	d010      	beq.n	800393c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	e007      	b.n	800393c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40014000 	.word	0x40014000

08003960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d020      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0202 	mvn.w	r2, #2
 8003994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f999 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f98b 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f99c 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0204 	mvn.w	r2, #4
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f973 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f965 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f976 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d020      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f94d 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f93f 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f950 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0210 	mvn.w	r2, #16
 8003a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f927 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f919 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f92a 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0201 	mvn.w	r2, #1
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fd7c 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fab0 	bl	8004050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8fb 	bl	8003d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0220 	mvn.w	r2, #32
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa82 	bl	800403c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0b4      	b.n	8003cc6 <HAL_TIM_ConfigClockSource+0x186>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b94:	d03e      	beq.n	8003c14 <HAL_TIM_ConfigClockSource+0xd4>
 8003b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9a:	f200 8087 	bhi.w	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba2:	f000 8086 	beq.w	8003cb2 <HAL_TIM_ConfigClockSource+0x172>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	d87f      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b70      	cmp	r3, #112	@ 0x70
 8003bae:	d01a      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xa6>
 8003bb0:	2b70      	cmp	r3, #112	@ 0x70
 8003bb2:	d87b      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b60      	cmp	r3, #96	@ 0x60
 8003bb6:	d050      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x11a>
 8003bb8:	2b60      	cmp	r3, #96	@ 0x60
 8003bba:	d877      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b50      	cmp	r3, #80	@ 0x50
 8003bbe:	d03c      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0xfa>
 8003bc0:	2b50      	cmp	r3, #80	@ 0x50
 8003bc2:	d873      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b40      	cmp	r3, #64	@ 0x40
 8003bc6:	d058      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x13a>
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d86f      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b30      	cmp	r3, #48	@ 0x30
 8003bce:	d064      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003bd0:	2b30      	cmp	r3, #48	@ 0x30
 8003bd2:	d86b      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d060      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d867      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05c      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d05a      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	e062      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bf6:	f000 f993 	bl	8003f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	609a      	str	r2, [r3, #8]
      break;
 8003c12:	e04f      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	f000 f97c 	bl	8003f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c36:	609a      	str	r2, [r3, #8]
      break;
 8003c38:	e03c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	461a      	mov	r2, r3
 8003c48:	f000 f8f0 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2150      	movs	r1, #80	@ 0x50
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f949 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003c58:	e02c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 f90f 	bl	8003e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2160      	movs	r1, #96	@ 0x60
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f939 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003c78:	e01c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 f8d0 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2140      	movs	r1, #64	@ 0x40
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f929 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003c98:	e00c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f000 f920 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003caa:	e003      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a37      	ldr	r2, [pc, #220]	@ (8003e10 <TIM_Base_SetConfig+0xf0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00f      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3e:	d00b      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a34      	ldr	r2, [pc, #208]	@ (8003e14 <TIM_Base_SetConfig+0xf4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d007      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a33      	ldr	r2, [pc, #204]	@ (8003e18 <TIM_Base_SetConfig+0xf8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_Base_SetConfig+0x38>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a32      	ldr	r2, [pc, #200]	@ (8003e1c <TIM_Base_SetConfig+0xfc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d108      	bne.n	8003d6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <TIM_Base_SetConfig+0xf0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01b      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d78:	d017      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	@ (8003e14 <TIM_Base_SetConfig+0xf4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a24      	ldr	r2, [pc, #144]	@ (8003e18 <TIM_Base_SetConfig+0xf8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00f      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	@ (8003e1c <TIM_Base_SetConfig+0xfc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a22      	ldr	r2, [pc, #136]	@ (8003e20 <TIM_Base_SetConfig+0x100>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <TIM_Base_SetConfig+0x104>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0x8a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <TIM_Base_SetConfig+0x108>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8003e10 <TIM_Base_SetConfig+0xf0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d103      	bne.n	8003dea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 030a 	bic.w	r3, r3, #10
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f023 0210 	bic.w	r2, r3, #16
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e050      	b.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc4:	d013      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a18      	ldr	r2, [pc, #96]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	@ (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10c      	bne.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40010000 	.word	0x40010000
 800402c:	40000400 	.word	0x40000400
 8004030:	40000800 	.word	0x40000800
 8004034:	40000c00 	.word	0x40000c00
 8004038:	40014000 	.word	0x40014000

0800403c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e042      	b.n	80040fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd fc98 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fdd3 	bl	8004c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	d175      	bne.n	8004210 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_UART_Transmit+0x2c>
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e06e      	b.n	8004212 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2221      	movs	r2, #33	@ 0x21
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004142:	f7fd fe83 	bl	8001e4c <HAL_GetTick>
 8004146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800415c:	d108      	bne.n	8004170 <HAL_UART_Transmit+0x6c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e003      	b.n	8004178 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004178:	e02e      	b.n	80041d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	2180      	movs	r1, #128	@ 0x80
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fb37 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e03a      	b.n	8004212 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	3302      	adds	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	e007      	b.n	80041ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1cb      	bne.n	800417a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2140      	movs	r1, #64	@ 0x40
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fb03 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e006      	b.n	8004212 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b20      	cmp	r3, #32
 8004232:	d112      	bne.n	800425a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Receive_IT+0x26>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e00b      	b.n	800425c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	461a      	mov	r2, r3
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fb2a 	bl	80048aa <UART_Start_Receive_IT>
 8004256:	4603      	mov	r3, r0
 8004258:	e000      	b.n	800425c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b0ba      	sub	sp, #232	@ 0xe8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_UART_IRQHandler+0x66>
 80042b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fc07 	bl	8004ad6 <UART_Receive_IT>
      return;
 80042c8:	e273      	b.n	80047b2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80de 	beq.w	8004490 <HAL_UART_IRQHandler+0x22c>
 80042d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80d1 	beq.w	8004490 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_UART_IRQHandler+0xae>
 80042fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_UART_IRQHandler+0xd2>
 800431e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f043 0202 	orr.w	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_UART_IRQHandler+0xf6>
 8004342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	f043 0204 	orr.w	r2, r3, #4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d011      	beq.n	800438a <HAL_UART_IRQHandler+0x126>
 8004366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d105      	bne.n	800437e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f043 0208 	orr.w	r2, r3, #8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 820a 	beq.w	80047a8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_UART_IRQHandler+0x14e>
 80043a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb92 	bl	8004ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_UART_IRQHandler+0x17a>
 80043d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d04f      	beq.n	800447e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa9d 	bl	800491e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d141      	bne.n	8004476 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3314      	adds	r3, #20
 80043f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800440c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800441e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800442a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1d9      	bne.n	80043f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d013      	beq.n	800446e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	4a8a      	ldr	r2, [pc, #552]	@ (8004674 <HAL_UART_IRQHandler+0x410>)
 800444c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd feab 	bl	80021ae <HAL_DMA_Abort_IT>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d016      	beq.n	800448c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004468:	4610      	mov	r0, r2
 800446a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	e00e      	b.n	800448c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9ac 	bl	80047cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004474:	e00a      	b.n	800448c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f9a8 	bl	80047cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e006      	b.n	800448c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9a4 	bl	80047cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800448a:	e18d      	b.n	80047a8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	bf00      	nop
    return;
 800448e:	e18b      	b.n	80047a8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	2b01      	cmp	r3, #1
 8004496:	f040 8167 	bne.w	8004768 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8160 	beq.w	8004768 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8159 	beq.w	8004768 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	f040 80ce 	bne.w	8004678 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a9 	beq.w	8004644 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044fa:	429a      	cmp	r2, r3
 80044fc:	f080 80a2 	bcs.w	8004644 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004506:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004512:	f000 8088 	beq.w	8004626 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800452c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800454e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800455a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1d9      	bne.n	8004516 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004572:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004586:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800458a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800458e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e1      	bne.n	8004562 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e3      	bne.n	800459e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045f6:	f023 0310 	bic.w	r3, r3, #16
 80045fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004608:	65ba      	str	r2, [r7, #88]	@ 0x58
 800460a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800460e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e3      	bne.n	80045e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004620:	4618      	mov	r0, r3
 8004622:	f7fd fd54 	bl	80020ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	b29b      	uxth	r3, r3
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8cf 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004642:	e0b3      	b.n	80047ac <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004648:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800464c:	429a      	cmp	r2, r3
 800464e:	f040 80ad 	bne.w	80047ac <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465c:	f040 80a6 	bne.w	80047ac <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8b7 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
      return;
 8004672:	e09b      	b.n	80047ac <HAL_UART_IRQHandler+0x548>
 8004674:	080049e5 	.word	0x080049e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 808e 	beq.w	80047b0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8089 	beq.w	80047b0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80046c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e3      	bne.n	800469e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	623b      	str	r3, [r7, #32]
   return(result);
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80046fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e3      	bne.n	80046d6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	60fb      	str	r3, [r7, #12]
   return(result);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0310 	bic.w	r3, r3, #16
 8004732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004740:	61fa      	str	r2, [r7, #28]
 8004742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	617b      	str	r3, [r7, #20]
   return(result);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e3      	bne.n	800471c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f83d 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004766:	e023      	b.n	80047b0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <HAL_UART_IRQHandler+0x524>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f940 	bl	8004a06 <UART_Transmit_IT>
    return;
 8004786:	e014      	b.n	80047b2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <HAL_UART_IRQHandler+0x54e>
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f980 	bl	8004aa6 <UART_EndTransmit_IT>
    return;
 80047a6:	e004      	b.n	80047b2 <HAL_UART_IRQHandler+0x54e>
    return;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_UART_IRQHandler+0x54e>
      return;
 80047b0:	bf00      	nop
  }
}
 80047b2:	37e8      	adds	r7, #232	@ 0xe8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004808:	e03b      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d037      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fd fb1b 	bl	8001e4c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <UART_WaitOnFlagUntilTimeout+0x30>
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e03a      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d023      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8a>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b80      	cmp	r3, #128	@ 0x80
 800483e:	d020      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b40      	cmp	r3, #64	@ 0x40
 8004844:	d01d      	beq.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d116      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f857 	bl	800491e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2208      	movs	r2, #8
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e00f      	b.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0b4      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	4613      	mov	r3, r2
 80048b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2222      	movs	r2, #34	@ 0x22
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0220 	orr.w	r2, r2, #32
 800490e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800491e:	b480      	push	{r7}
 8004920:	b095      	sub	sp, #84	@ 0x54
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800493c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004946:	643a      	str	r2, [r7, #64]	@ 0x40
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800494c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	61fb      	str	r3, [r7, #28]
   return(result);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3314      	adds	r3, #20
 8004978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800497a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	2b01      	cmp	r3, #1
 8004994:	d119      	bne.n	80049ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b6:	61ba      	str	r2, [r7, #24]
 80049b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6979      	ldr	r1, [r7, #20]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	613b      	str	r3, [r7, #16]
   return(result);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049d8:	bf00      	nop
 80049da:	3754      	adds	r7, #84	@ 0x54
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fee7 	bl	80047cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b21      	cmp	r3, #33	@ 0x21
 8004a18:	d13e      	bne.n	8004a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a22:	d114      	bne.n	8004a4e <UART_Transmit_IT+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	621a      	str	r2, [r3, #32]
 8004a4c:	e008      	b.n	8004a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6211      	str	r1, [r2, #32]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe76 	bl	80047b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b08c      	sub	sp, #48	@ 0x30
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b22      	cmp	r3, #34	@ 0x22
 8004af0:	f040 80aa 	bne.w	8004c48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afc:	d115      	bne.n	8004b2a <UART_Receive_IT+0x54>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d111      	bne.n	8004b2a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	1c9a      	adds	r2, r3, #2
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b28:	e024      	b.n	8004b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b38:	d007      	beq.n	8004b4a <UART_Receive_IT+0x74>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <UART_Receive_IT+0x82>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	e008      	b.n	8004b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4619      	mov	r1, r3
 8004b82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d15d      	bne.n	8004c44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0220 	bic.w	r2, r2, #32
 8004b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d135      	bne.n	8004c3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	613b      	str	r3, [r7, #16]
   return(result);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf4:	623a      	str	r2, [r7, #32]
 8004bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	6a3a      	ldr	r2, [r7, #32]
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e5      	bne.n	8004bd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d10a      	bne.n	8004c2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fdd4 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
 8004c38:	e002      	b.n	8004c40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fb ff38 	bl	8000ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e002      	b.n	8004c4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3730      	adds	r7, #48	@ 0x30
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b0c0      	sub	sp, #256	@ 0x100
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	68d9      	ldr	r1, [r3, #12]
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	ea40 0301 	orr.w	r3, r0, r1
 8004c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cac:	f021 010c 	bic.w	r1, r1, #12
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	6999      	ldr	r1, [r3, #24]
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	ea40 0301 	orr.w	r3, r0, r1
 8004cda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8004f20 <UART_SetConfig+0x2cc>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d005      	beq.n	8004cf4 <UART_SetConfig+0xa0>
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b8d      	ldr	r3, [pc, #564]	@ (8004f24 <UART_SetConfig+0x2d0>)
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d104      	bne.n	8004cfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf4:	f7fe f8a0 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8004cf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cfc:	e003      	b.n	8004d06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cfe:	f7fe f887 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8004d02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d10:	f040 810c 	bne.w	8004f2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	1891      	adds	r1, r2, r2
 8004d2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d36:	4621      	mov	r1, r4
 8004d38:	eb12 0801 	adds.w	r8, r2, r1
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	eb43 0901 	adc.w	r9, r3, r1
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d56:	4690      	mov	r8, r2
 8004d58:	4699      	mov	r9, r3
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	eb18 0303 	adds.w	r3, r8, r3
 8004d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d64:	462b      	mov	r3, r5
 8004d66:	eb49 0303 	adc.w	r3, r9, r3
 8004d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d82:	460b      	mov	r3, r1
 8004d84:	18db      	adds	r3, r3, r3
 8004d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d88:	4613      	mov	r3, r2
 8004d8a:	eb42 0303 	adc.w	r3, r2, r3
 8004d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d98:	f7fb fada 	bl	8000350 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4b61      	ldr	r3, [pc, #388]	@ (8004f28 <UART_SetConfig+0x2d4>)
 8004da2:	fba3 2302 	umull	r2, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	011c      	lsls	r4, r3, #4
 8004daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004db4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004db8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dcc:	4641      	mov	r1, r8
 8004dce:	eb12 0a01 	adds.w	sl, r2, r1
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	eb43 0b01 	adc.w	fp, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004de4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dec:	4692      	mov	sl, r2
 8004dee:	469b      	mov	fp, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	eb1a 0303 	adds.w	r3, sl, r3
 8004df6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8004e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	18db      	adds	r3, r3, r3
 8004e1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e1e:	4613      	mov	r3, r2
 8004e20:	eb42 0303 	adc.w	r3, r2, r3
 8004e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e2e:	f7fb fa8f 	bl	8000350 <__aeabi_uldivmod>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <UART_SetConfig+0x2d4>)
 8004e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2264      	movs	r2, #100	@ 0x64
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	1acb      	subs	r3, r1, r3
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e4e:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <UART_SetConfig+0x2d4>)
 8004e50:	fba3 2302 	umull	r2, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e5c:	441c      	add	r4, r3
 8004e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e70:	4642      	mov	r2, r8
 8004e72:	464b      	mov	r3, r9
 8004e74:	1891      	adds	r1, r2, r2
 8004e76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e78:	415b      	adcs	r3, r3
 8004e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e80:	4641      	mov	r1, r8
 8004e82:	1851      	adds	r1, r2, r1
 8004e84:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e86:	4649      	mov	r1, r9
 8004e88:	414b      	adcs	r3, r1
 8004e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e98:	4659      	mov	r1, fp
 8004e9a:	00cb      	lsls	r3, r1, #3
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	00ca      	lsls	r2, r1, #3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4642      	mov	r2, r8
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	460a      	mov	r2, r1
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ecc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ed0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	18db      	adds	r3, r3, r3
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eda:	4613      	mov	r3, r2
 8004edc:	eb42 0303 	adc.w	r3, r2, r3
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ee6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004eea:	f7fb fa31 	bl	8000350 <__aeabi_uldivmod>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <UART_SetConfig+0x2d4>)
 8004ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	2164      	movs	r1, #100	@ 0x64
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	3332      	adds	r3, #50	@ 0x32
 8004f06:	4a08      	ldr	r2, [pc, #32]	@ (8004f28 <UART_SetConfig+0x2d4>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	f003 0207 	and.w	r2, r3, #7
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4422      	add	r2, r4
 8004f1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f1c:	e106      	b.n	800512c <UART_SetConfig+0x4d8>
 8004f1e:	bf00      	nop
 8004f20:	40011000 	.word	0x40011000
 8004f24:	40011400 	.word	0x40011400
 8004f28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f3e:	4642      	mov	r2, r8
 8004f40:	464b      	mov	r3, r9
 8004f42:	1891      	adds	r1, r2, r2
 8004f44:	6239      	str	r1, [r7, #32]
 8004f46:	415b      	adcs	r3, r3
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f4e:	4641      	mov	r1, r8
 8004f50:	1854      	adds	r4, r2, r1
 8004f52:	4649      	mov	r1, r9
 8004f54:	eb43 0501 	adc.w	r5, r3, r1
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	00eb      	lsls	r3, r5, #3
 8004f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f66:	00e2      	lsls	r2, r4, #3
 8004f68:	4614      	mov	r4, r2
 8004f6a:	461d      	mov	r5, r3
 8004f6c:	4643      	mov	r3, r8
 8004f6e:	18e3      	adds	r3, r4, r3
 8004f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f74:	464b      	mov	r3, r9
 8004f76:	eb45 0303 	adc.w	r3, r5, r3
 8004f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	008b      	lsls	r3, r1, #2
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	008a      	lsls	r2, r1, #2
 8004fa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fac:	f7fb f9d0 	bl	8000350 <__aeabi_uldivmod>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4b60      	ldr	r3, [pc, #384]	@ (8005138 <UART_SetConfig+0x4e4>)
 8004fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	011c      	lsls	r4, r3, #4
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	1891      	adds	r1, r2, r2
 8004fd6:	61b9      	str	r1, [r7, #24]
 8004fd8:	415b      	adcs	r3, r3
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	1851      	adds	r1, r2, r1
 8004fe4:	6139      	str	r1, [r7, #16]
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	414b      	adcs	r3, r1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	00cb      	lsls	r3, r1, #3
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005002:	4651      	mov	r1, sl
 8005004:	00ca      	lsls	r2, r1, #3
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	4603      	mov	r3, r0
 800500c:	4642      	mov	r2, r8
 800500e:	189b      	adds	r3, r3, r2
 8005010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005014:	464b      	mov	r3, r9
 8005016:	460a      	mov	r2, r1
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800502a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005038:	4649      	mov	r1, r9
 800503a:	008b      	lsls	r3, r1, #2
 800503c:	4641      	mov	r1, r8
 800503e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005042:	4641      	mov	r1, r8
 8005044:	008a      	lsls	r2, r1, #2
 8005046:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800504a:	f7fb f981 	bl	8000350 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4611      	mov	r1, r2
 8005054:	4b38      	ldr	r3, [pc, #224]	@ (8005138 <UART_SetConfig+0x4e4>)
 8005056:	fba3 2301 	umull	r2, r3, r3, r1
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2264      	movs	r2, #100	@ 0x64
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	1acb      	subs	r3, r1, r3
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	3332      	adds	r3, #50	@ 0x32
 8005068:	4a33      	ldr	r2, [pc, #204]	@ (8005138 <UART_SetConfig+0x4e4>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005074:	441c      	add	r4, r3
 8005076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507a:	2200      	movs	r2, #0
 800507c:	673b      	str	r3, [r7, #112]	@ 0x70
 800507e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005080:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	1891      	adds	r1, r2, r2
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	415b      	adcs	r3, r3
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005094:	4641      	mov	r1, r8
 8005096:	1851      	adds	r1, r2, r1
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	4649      	mov	r1, r9
 800509c:	414b      	adcs	r3, r1
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050ac:	4659      	mov	r1, fp
 80050ae:	00cb      	lsls	r3, r1, #3
 80050b0:	4651      	mov	r1, sl
 80050b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b6:	4651      	mov	r1, sl
 80050b8:	00ca      	lsls	r2, r1, #3
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	4642      	mov	r2, r8
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050c6:	464b      	mov	r3, r9
 80050c8:	460a      	mov	r2, r1
 80050ca:	eb42 0303 	adc.w	r3, r2, r3
 80050ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050da:	667a      	str	r2, [r7, #100]	@ 0x64
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050e8:	4649      	mov	r1, r9
 80050ea:	008b      	lsls	r3, r1, #2
 80050ec:	4641      	mov	r1, r8
 80050ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f2:	4641      	mov	r1, r8
 80050f4:	008a      	lsls	r2, r1, #2
 80050f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050fa:	f7fb f929 	bl	8000350 <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4b0d      	ldr	r3, [pc, #52]	@ (8005138 <UART_SetConfig+0x4e4>)
 8005104:	fba3 1302 	umull	r1, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2164      	movs	r1, #100	@ 0x64
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	3332      	adds	r3, #50	@ 0x32
 8005116:	4a08      	ldr	r2, [pc, #32]	@ (8005138 <UART_SetConfig+0x4e4>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4422      	add	r2, r4
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	bf00      	nop
 800512e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005132:	46bd      	mov	sp, r7
 8005134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005138:	51eb851f 	.word	0x51eb851f

0800513c <__NVIC_SetPriority>:
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db0a      	blt.n	8005166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	490c      	ldr	r1, [pc, #48]	@ (8005188 <__NVIC_SetPriority+0x4c>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	0112      	lsls	r2, r2, #4
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	440b      	add	r3, r1
 8005160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005164:	e00a      	b.n	800517c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4908      	ldr	r1, [pc, #32]	@ (800518c <__NVIC_SetPriority+0x50>)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	3b04      	subs	r3, #4
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	440b      	add	r3, r1
 800517a:	761a      	strb	r2, [r3, #24]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000e100 	.word	0xe000e100
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005194:	2100      	movs	r1, #0
 8005196:	f06f 0004 	mvn.w	r0, #4
 800519a:	f7ff ffcf 	bl	800513c <__NVIC_SetPriority>
#endif
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051aa:	f3ef 8305 	mrs	r3, IPSR
 80051ae:	603b      	str	r3, [r7, #0]
  return(result);
 80051b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051b6:	f06f 0305 	mvn.w	r3, #5
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	e00c      	b.n	80051d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051be:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <osKernelInitialize+0x44>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d105      	bne.n	80051d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051c6:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <osKernelInitialize+0x44>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e002      	b.n	80051d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051d8:	687b      	ldr	r3, [r7, #4]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000abc 	.word	0x20000abc

080051ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f2:	f3ef 8305 	mrs	r3, IPSR
 80051f6:	603b      	str	r3, [r7, #0]
  return(result);
 80051f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051fe:	f06f 0305 	mvn.w	r3, #5
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e010      	b.n	8005228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <osKernelStart+0x48>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d109      	bne.n	8005222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800520e:	f7ff ffbf 	bl	8005190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005212:	4b08      	ldr	r3, [pc, #32]	@ (8005234 <osKernelStart+0x48>)
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005218:	f001 fc24 	bl	8006a64 <vTaskStartScheduler>
      stat = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e002      	b.n	8005228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000abc 	.word	0x20000abc

08005238 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	@ 0x38
 800523c:	af04      	add	r7, sp, #16
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005248:	f3ef 8305 	mrs	r3, IPSR
 800524c:	617b      	str	r3, [r7, #20]
  return(result);
 800524e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005250:	2b00      	cmp	r3, #0
 8005252:	d17e      	bne.n	8005352 <osThreadNew+0x11a>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d07b      	beq.n	8005352 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800525e:	2318      	movs	r3, #24
 8005260:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005266:	f04f 33ff 	mov.w	r3, #4294967295
 800526a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d045      	beq.n	80052fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <osThreadNew+0x48>
        name = attr->name;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <osThreadNew+0x6e>
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b38      	cmp	r3, #56	@ 0x38
 8005298:	d805      	bhi.n	80052a6 <osThreadNew+0x6e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <osThreadNew+0x72>
        return (NULL);
 80052a6:	2300      	movs	r3, #0
 80052a8:	e054      	b.n	8005354 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <osThreadNew+0xa8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b5b      	cmp	r3, #91	@ 0x5b
 80052c8:	d90a      	bls.n	80052e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osThreadNew+0xa8>
        mem = 1;
 80052da:	2301      	movs	r3, #1
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e010      	b.n	8005302 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <osThreadNew+0xca>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <osThreadNew+0xca>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <osThreadNew+0xca>
          mem = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e001      	b.n	8005302 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d110      	bne.n	800532a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005310:	9202      	str	r2, [sp, #8]
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f001 f944 	bl	80065ac <xTaskCreateStatic>
 8005324:	4603      	mov	r3, r0
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	e013      	b.n	8005352 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	b29a      	uxth	r2, r3
 8005334:	f107 0310 	add.w	r3, r7, #16
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f001 f992 	bl	800666c <xTaskCreate>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <osThreadNew+0x11a>
            hTask = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005352:	693b      	ldr	r3, [r7, #16]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	@ 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005364:	f3ef 8305 	mrs	r3, IPSR
 8005368:	60bb      	str	r3, [r7, #8]
  return(result);
 800536a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <osDelay+0x1c>
    stat = osErrorISR;
 8005370:	f06f 0305 	mvn.w	r3, #5
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e007      	b.n	8005388 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 fb38 	bl	80069f8 <vTaskDelay>
    }
  }

  return (stat);
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005392:	b580      	push	{r7, lr}
 8005394:	b088      	sub	sp, #32
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800539e:	f3ef 8305 	mrs	r3, IPSR
 80053a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80053a4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d174      	bne.n	8005494 <osMutexNew+0x102>
    if (attr != NULL) {
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e001      	b.n	80053bc <osMutexNew+0x2a>
    } else {
      type = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <osMutexNew+0x3a>
      rmtx = 1U;
 80053c6:	2301      	movs	r3, #1
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e001      	b.n	80053d0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d15c      	bne.n	8005494 <osMutexNew+0x102>
      mem = -1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d015      	beq.n	8005412 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <osMutexNew+0x6a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80053f4:	d902      	bls.n	80053fc <osMutexNew+0x6a>
          mem = 1;
 80053f6:	2301      	movs	r3, #1
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e00c      	b.n	8005416 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d108      	bne.n	8005416 <osMutexNew+0x84>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <osMutexNew+0x84>
            mem = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e001      	b.n	8005416 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d112      	bne.n	8005442 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4619      	mov	r1, r3
 8005428:	2004      	movs	r0, #4
 800542a:	f000 fb20 	bl	8005a6e <xQueueCreateMutexStatic>
 800542e:	61f8      	str	r0, [r7, #28]
 8005430:	e016      	b.n	8005460 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	4619      	mov	r1, r3
 8005438:	2001      	movs	r0, #1
 800543a:	f000 fb18 	bl	8005a6e <xQueueCreateMutexStatic>
 800543e:	61f8      	str	r0, [r7, #28]
 8005440:	e00e      	b.n	8005460 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800544e:	2004      	movs	r0, #4
 8005450:	f000 faf5 	bl	8005a3e <xQueueCreateMutex>
 8005454:	61f8      	str	r0, [r7, #28]
 8005456:	e003      	b.n	8005460 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005458:	2001      	movs	r0, #1
 800545a:	f000 faf0 	bl	8005a3e <xQueueCreateMutex>
 800545e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <osMutexNew+0xee>
        if (attr != NULL) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <osMutexNew+0xe2>
          name = attr->name;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e001      	b.n	8005478 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005478:	68f9      	ldr	r1, [r7, #12]
 800547a:	69f8      	ldr	r0, [r7, #28]
 800547c:	f001 f838 	bl	80064f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <osMutexNew+0x102>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005494:	69fb      	ldr	r3, [r7, #28]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054bc:	f3ef 8305 	mrs	r3, IPSR
 80054c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80054c2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80054c8:	f06f 0305 	mvn.w	r3, #5
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e02c      	b.n	800552a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d103      	bne.n	80054de <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80054d6:	f06f 0303 	mvn.w	r3, #3
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e025      	b.n	800552a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d011      	beq.n	8005508 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6938      	ldr	r0, [r7, #16]
 80054e8:	f000 fb11 	bl	8005b0e <xQueueTakeMutexRecursive>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d01b      	beq.n	800552a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80054f8:	f06f 0301 	mvn.w	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e014      	b.n	800552a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005500:	f06f 0302 	mvn.w	r3, #2
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e010      	b.n	800552a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f000 fdb8 	bl	8006080 <xQueueSemaphoreTake>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d009      	beq.n	800552a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800551c:	f06f 0301 	mvn.w	r3, #1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e002      	b.n	800552a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005524:	f06f 0302 	mvn.w	r3, #2
 8005528:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005550:	f3ef 8305 	mrs	r3, IPSR
 8005554:	60bb      	str	r3, [r7, #8]
  return(result);
 8005556:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <osMutexRelease+0x30>
    stat = osErrorISR;
 800555c:	f06f 0305 	mvn.w	r3, #5
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e01f      	b.n	80055a4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800556a:	f06f 0303 	mvn.w	r3, #3
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e018      	b.n	80055a4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005578:	6938      	ldr	r0, [r7, #16]
 800557a:	f000 fa93 	bl	8005aa4 <xQueueGiveMutexRecursive>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d00f      	beq.n	80055a4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005584:	f06f 0302 	mvn.w	r3, #2
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e00b      	b.n	80055a4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800558c:	2300      	movs	r3, #0
 800558e:	2200      	movs	r2, #0
 8005590:	2100      	movs	r1, #0
 8005592:	6938      	ldr	r0, [r7, #16]
 8005594:	f000 faf2 	bl	8005b7c <xQueueGenericSend>
 8005598:	4603      	mov	r3, r0
 800559a:	2b01      	cmp	r3, #1
 800559c:	d002      	beq.n	80055a4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800559e:	f06f 0302 	mvn.w	r3, #2
 80055a2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80055a4:	697b      	ldr	r3, [r7, #20]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a07      	ldr	r2, [pc, #28]	@ (80055dc <vApplicationGetIdleTaskMemory+0x2c>)
 80055c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a06      	ldr	r2, [pc, #24]	@ (80055e0 <vApplicationGetIdleTaskMemory+0x30>)
 80055c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2280      	movs	r2, #128	@ 0x80
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000ac0 	.word	0x20000ac0
 80055e0:	20000b1c 	.word	0x20000b1c

080055e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a07      	ldr	r2, [pc, #28]	@ (8005610 <vApplicationGetTimerTaskMemory+0x2c>)
 80055f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a06      	ldr	r2, [pc, #24]	@ (8005614 <vApplicationGetTimerTaskMemory+0x30>)
 80055fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20000d1c 	.word	0x20000d1c
 8005614:	20000d78 	.word	0x20000d78

08005618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 0208 	add.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f04f 32ff 	mov.w	r2, #4294967295
 8005630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0208 	add.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d103      	bne.n	80056da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e00c      	b.n	80056f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3308      	adds	r3, #8
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e002      	b.n	80056e8 <vListInsert+0x2e>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d2f6      	bcs.n	80056e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6892      	ldr	r2, [r2, #8]
 8005742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6852      	ldr	r2, [r2, #4]
 800574c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d103      	bne.n	8005760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057ac:	f002 fc24 	bl	8007ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	3b01      	subs	r3, #1
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	22ff      	movs	r2, #255	@ 0xff
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	22ff      	movs	r2, #255	@ 0xff
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d114      	bne.n	800582c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01a      	beq.n	8005840 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3310      	adds	r3, #16
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fbb6 	bl	8006f80 <xTaskRemoveFromEventList>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d012      	beq.n	8005840 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <xQueueGenericReset+0xd0>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	e009      	b.n	8005840 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3310      	adds	r3, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fef1 	bl	8005618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3324      	adds	r3, #36	@ 0x24
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff feec 	bl	8005618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005840:	f002 fc0c 	bl	800805c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005844:	2301      	movs	r3, #1
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	@ 0x38
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <xQueueGenericCreateStatic+0x56>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <xQueueGenericCreateStatic+0x5a>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <xQueueGenericCreateStatic+0x5c>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	623b      	str	r3, [r7, #32]
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <xQueueGenericCreateStatic+0x84>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <xQueueGenericCreateStatic+0x88>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <xQueueGenericCreateStatic+0x8a>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	61fb      	str	r3, [r7, #28]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058fa:	2350      	movs	r3, #80	@ 0x50
 80058fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b50      	cmp	r3, #80	@ 0x50
 8005902:	d00b      	beq.n	800591c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	61bb      	str	r3, [r7, #24]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800591c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00d      	beq.n	8005944 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005930:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f840 	bl	80059c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005946:	4618      	mov	r0, r3
 8005948:	3730      	adds	r7, #48	@ 0x30
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800594e:	b580      	push	{r7, lr}
 8005950:	b08a      	sub	sp, #40	@ 0x28
 8005952:	af02      	add	r7, sp, #8
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	4613      	mov	r3, r2
 800595a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10b      	bne.n	800597a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	613b      	str	r3, [r7, #16]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3350      	adds	r3, #80	@ 0x50
 8005988:	4618      	mov	r0, r3
 800598a:	f002 fc57 	bl	800823c <pvPortMalloc>
 800598e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d011      	beq.n	80059ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3350      	adds	r3, #80	@ 0x50
 800599e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059a8:	79fa      	ldrb	r2, [r7, #7]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f805 	bl	80059c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059ba:	69bb      	ldr	r3, [r7, #24]
	}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e002      	b.n	80059e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059f2:	2101      	movs	r1, #1
 80059f4:	69b8      	ldr	r0, [r7, #24]
 80059f6:	f7ff fec3 	bl	8005780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00e      	beq.n	8005a36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f8a3 	bl	8005b7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	4603      	mov	r3, r0
 8005a46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6939      	ldr	r1, [r7, #16]
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	f7ff ff79 	bl	800594e <xQueueGenericCreate>
 8005a5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff ffd3 	bl	8005a0a <prvInitialiseMutex>

		return xNewQueue;
 8005a64:	68fb      	ldr	r3, [r7, #12]
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af02      	add	r7, sp, #8
 8005a74:	4603      	mov	r3, r0
 8005a76:	6039      	str	r1, [r7, #0]
 8005a78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	6939      	ldr	r1, [r7, #16]
 8005a8c:	6978      	ldr	r0, [r7, #20]
 8005a8e:	f7ff fee1 	bl	8005854 <xQueueGenericCreateStatic>
 8005a92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff ffb8 	bl	8005a0a <prvInitialiseMutex>

		return xNewQueue;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
	}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005aa4:	b590      	push	{r4, r7, lr}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60fb      	str	r3, [r7, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	689c      	ldr	r4, [r3, #8]
 8005ad2:	f001 fc15 	bl	8007300 <xTaskGetCurrentTaskHandle>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d111      	bne.n	8005b00 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d105      	bne.n	8005afa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005aee:	2300      	movs	r3, #0
 8005af0:	2200      	movs	r2, #0
 8005af2:	2100      	movs	r1, #0
 8005af4:	6938      	ldr	r0, [r7, #16]
 8005af6:	f000 f841 	bl	8005b7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e001      	b.n	8005b04 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005b04:	697b      	ldr	r3, [r7, #20]
	}
 8005b06:	4618      	mov	r0, r3
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd90      	pop	{r4, r7, pc}

08005b0e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005b0e:	b590      	push	{r4, r7, lr}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60fb      	str	r3, [r7, #12]
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	e7fd      	b.n	8005b36 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	689c      	ldr	r4, [r3, #8]
 8005b3e:	f001 fbdf 	bl	8007300 <xTaskGetCurrentTaskHandle>
 8005b42:	4603      	mov	r3, r0
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d107      	bne.n	8005b58 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	e00c      	b.n	8005b72 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f000 fa90 	bl	8006080 <xQueueSemaphoreTake>
 8005b60:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005b72:	697b      	ldr	r3, [r7, #20]
	}
 8005b74:	4618      	mov	r0, r3
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd90      	pop	{r4, r7, pc}

08005b7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08e      	sub	sp, #56	@ 0x38
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <xQueueGenericSend+0x34>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	e7fd      	b.n	8005bac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <xQueueGenericSend+0x42>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <xQueueGenericSend+0x46>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <xQueueGenericSend+0x48>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10b      	bne.n	8005be0 <xQueueGenericSend+0x64>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	e7fd      	b.n	8005bdc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d103      	bne.n	8005bee <xQueueGenericSend+0x72>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <xQueueGenericSend+0x76>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericSend+0x78>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <xQueueGenericSend+0x94>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	623b      	str	r3, [r7, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c10:	f001 fb86 	bl	8007320 <xTaskGetSchedulerState>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <xQueueGenericSend+0xa4>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <xQueueGenericSend+0xa8>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <xQueueGenericSend+0xaa>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <xQueueGenericSend+0xc6>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	61fb      	str	r3, [r7, #28]
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c42:	f002 f9d9 	bl	8007ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <xQueueGenericSend+0xdc>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d129      	bne.n	8005cac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c5e:	f000 fb37 	bl	80062d0 <prvCopyDataToQueue>
 8005c62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	3324      	adds	r3, #36	@ 0x24
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 f985 	bl	8006f80 <xTaskRemoveFromEventList>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d013      	beq.n	8005ca4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d7c <xQueueGenericSend+0x200>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	e00a      	b.n	8005ca4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c94:	4b39      	ldr	r3, [pc, #228]	@ (8005d7c <xQueueGenericSend+0x200>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ca4:	f002 f9da 	bl	800805c <vPortExitCritical>
				return pdPASS;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e063      	b.n	8005d74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cb2:	f002 f9d3 	bl	800805c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e05c      	b.n	8005d74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cc0:	f107 0314 	add.w	r3, r7, #20
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 f9bf 	bl	8007048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cce:	f002 f9c5 	bl	800805c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cd2:	f000 ff2f 	bl	8006b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cd6:	f002 f98f 	bl	8007ff8 <vPortEnterCritical>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ce0:	b25b      	sxtb	r3, r3
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d103      	bne.n	8005cf0 <xQueueGenericSend+0x174>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d103      	bne.n	8005d06 <xQueueGenericSend+0x18a>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d06:	f002 f9a9 	bl	800805c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d0a:	1d3a      	adds	r2, r7, #4
 8005d0c:	f107 0314 	add.w	r3, r7, #20
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 f9ae 	bl	8007074 <xTaskCheckForTimeOut>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d124      	bne.n	8005d68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d20:	f000 fbce 	bl	80064c0 <prvIsQueueFull>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	3310      	adds	r3, #16
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 f8d2 	bl	8006edc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d3a:	f000 fb59 	bl	80063f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d3e:	f000 ff07 	bl	8006b50 <xTaskResumeAll>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f47f af7c 	bne.w	8005c42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d7c <xQueueGenericSend+0x200>)
 8005d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	e772      	b.n	8005c42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d5e:	f000 fb47 	bl	80063f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d62:	f000 fef5 	bl	8006b50 <xTaskResumeAll>
 8005d66:	e76c      	b.n	8005c42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d6a:	f000 fb41 	bl	80063f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d6e:	f000 feef 	bl	8006b50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3738      	adds	r7, #56	@ 0x38
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b090      	sub	sp, #64	@ 0x40
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueGenericSendFromISR+0x3e>
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <xQueueGenericSendFromISR+0x42>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <xQueueGenericSendFromISR+0x44>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d103      	bne.n	8005dee <xQueueGenericSendFromISR+0x6e>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <xQueueGenericSendFromISR+0x72>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <xQueueGenericSendFromISR+0x74>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	623b      	str	r3, [r7, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e10:	f002 f9d2 	bl	80081b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e14:	f3ef 8211 	mrs	r2, BASEPRI
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	61fa      	str	r2, [r7, #28]
 8005e2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <xQueueGenericSendFromISR+0xc2>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d12f      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e58:	f000 fa3a 	bl	80062d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d112      	bne.n	8005e8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e70:	3324      	adds	r3, #36	@ 0x24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 f884 	bl	8006f80 <xTaskRemoveFromEventList>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e007      	b.n	8005e9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e90:	3301      	adds	r3, #1
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	b25a      	sxtb	r2, r3
 8005e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ea0:	e001      	b.n	8005ea6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3740      	adds	r7, #64	@ 0x40
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08c      	sub	sp, #48	@ 0x30
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <xQueueReceive+0x32>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	623b      	str	r3, [r7, #32]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <xQueueReceive+0x40>
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <xQueueReceive+0x44>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <xQueueReceive+0x46>
 8005f00:	2300      	movs	r3, #0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <xQueueReceive+0x62>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	61fb      	str	r3, [r7, #28]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f1e:	f001 f9ff 	bl	8007320 <xTaskGetSchedulerState>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <xQueueReceive+0x72>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <xQueueReceive+0x76>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueReceive+0x78>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <xQueueReceive+0x94>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61bb      	str	r3, [r7, #24]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f50:	f002 f852 	bl	8007ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01f      	beq.n	8005fa0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f64:	f000 fa1e 	bl	80063a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	1e5a      	subs	r2, r3, #1
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00f      	beq.n	8005f98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 ffff 	bl	8006f80 <xTaskRemoveFromEventList>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f88:	4b3c      	ldr	r3, [pc, #240]	@ (800607c <xQueueReceive+0x1c0>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f98:	f002 f860 	bl	800805c <vPortExitCritical>
				return pdPASS;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e069      	b.n	8006074 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fa6:	f002 f859 	bl	800805c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e062      	b.n	8006074 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fb4:	f107 0310 	add.w	r3, r7, #16
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f845 	bl	8007048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fc2:	f002 f84b 	bl	800805c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fc6:	f000 fdb5 	bl	8006b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fca:	f002 f815 	bl	8007ff8 <vPortEnterCritical>
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d103      	bne.n	8005fe4 <xQueueReceive+0x128>
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fea:	b25b      	sxtb	r3, r3
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d103      	bne.n	8005ffa <xQueueReceive+0x13e>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ffa:	f002 f82f 	bl	800805c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ffe:	1d3a      	adds	r2, r7, #4
 8006000:	f107 0310 	add.w	r3, r7, #16
 8006004:	4611      	mov	r1, r2
 8006006:	4618      	mov	r0, r3
 8006008:	f001 f834 	bl	8007074 <xTaskCheckForTimeOut>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d123      	bne.n	800605a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006014:	f000 fa3e 	bl	8006494 <prvIsQueueEmpty>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d017      	beq.n	800604e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	3324      	adds	r3, #36	@ 0x24
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f000 ff58 	bl	8006edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800602c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800602e:	f000 f9df 	bl	80063f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006032:	f000 fd8d 	bl	8006b50 <xTaskResumeAll>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d189      	bne.n	8005f50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800603c:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <xQueueReceive+0x1c0>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	e780      	b.n	8005f50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800604e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006050:	f000 f9ce 	bl	80063f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006054:	f000 fd7c 	bl	8006b50 <xTaskResumeAll>
 8006058:	e77a      	b.n	8005f50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800605a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800605c:	f000 f9c8 	bl	80063f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006060:	f000 fd76 	bl	8006b50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006066:	f000 fa15 	bl	8006494 <prvIsQueueEmpty>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	f43f af6f 	beq.w	8005f50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006072:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006074:	4618      	mov	r0, r3
 8006076:	3730      	adds	r7, #48	@ 0x30
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	@ 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	623b      	str	r3, [r7, #32]
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	61fb      	str	r3, [r7, #28]
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060d4:	f001 f924 	bl	8007320 <xTaskGetSchedulerState>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <xQueueSemaphoreTake+0x64>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <xQueueSemaphoreTake+0x68>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <xQueueSemaphoreTake+0x6a>
 80060e8:	2300      	movs	r3, #0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61bb      	str	r3, [r7, #24]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006106:	f001 ff77 	bl	8007ff8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d024      	beq.n	8006160 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	1e5a      	subs	r2, r3, #1
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006126:	f001 fa75 	bl	8007614 <pvTaskIncrementMutexHeldCount>
 800612a:	4602      	mov	r2, r0
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00f      	beq.n	8006158 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613a:	3310      	adds	r3, #16
 800613c:	4618      	mov	r0, r3
 800613e:	f000 ff1f 	bl	8006f80 <xTaskRemoveFromEventList>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006148:	4b54      	ldr	r3, [pc, #336]	@ (800629c <xQueueSemaphoreTake+0x21c>)
 800614a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006158:	f001 ff80 	bl	800805c <vPortExitCritical>
				return pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	e098      	b.n	8006292 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d112      	bne.n	800618c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	617b      	str	r3, [r7, #20]
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006184:	f001 ff6a 	bl	800805c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006188:	2300      	movs	r3, #0
 800618a:	e082      	b.n	8006292 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800618c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	4618      	mov	r0, r3
 8006198:	f000 ff56 	bl	8007048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a0:	f001 ff5c 	bl	800805c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061a4:	f000 fcc6 	bl	8006b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061a8:	f001 ff26 	bl	8007ff8 <vPortEnterCritical>
 80061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b2:	b25b      	sxtb	r3, r3
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d103      	bne.n	80061c2 <xQueueSemaphoreTake+0x142>
 80061ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061c8:	b25b      	sxtb	r3, r3
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d103      	bne.n	80061d8 <xQueueSemaphoreTake+0x158>
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061d8:	f001 ff40 	bl	800805c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061dc:	463a      	mov	r2, r7
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4611      	mov	r1, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 ff45 	bl	8007074 <xTaskCheckForTimeOut>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d132      	bne.n	8006256 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061f2:	f000 f94f 	bl	8006494 <prvIsQueueEmpty>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d026      	beq.n	800624a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006204:	f001 fef8 	bl	8007ff8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f001 f8a5 	bl	800735c <xTaskPriorityInherit>
 8006212:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006214:	f001 ff22 	bl	800805c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	3324      	adds	r3, #36	@ 0x24
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fe5b 	bl	8006edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006228:	f000 f8e2 	bl	80063f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800622c:	f000 fc90 	bl	8006b50 <xTaskResumeAll>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f47f af67 	bne.w	8006106 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006238:	4b18      	ldr	r3, [pc, #96]	@ (800629c <xQueueSemaphoreTake+0x21c>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	e75d      	b.n	8006106 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800624a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800624c:	f000 f8d0 	bl	80063f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006250:	f000 fc7e 	bl	8006b50 <xTaskResumeAll>
 8006254:	e757      	b.n	8006106 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006256:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006258:	f000 f8ca 	bl	80063f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800625c:	f000 fc78 	bl	8006b50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006260:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006262:	f000 f917 	bl	8006494 <prvIsQueueEmpty>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	f43f af4c 	beq.w	8006106 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00d      	beq.n	8006290 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006274:	f001 fec0 	bl	8007ff8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006278:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800627a:	f000 f811 	bl	80062a0 <prvGetDisinheritPriorityAfterTimeout>
 800627e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f940 	bl	800750c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800628c:	f001 fee6 	bl	800805c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006292:	4618      	mov	r0, r3
 8006294:	3738      	adds	r7, #56	@ 0x38
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e001      	b.n	80062c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062c2:	68fb      	ldr	r3, [r7, #12]
	}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d14d      	bne.n	8006392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 f896 	bl	800742c <xTaskPriorityDisinherit>
 8006300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	e043      	b.n	8006392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d119      	bne.n	8006344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6858      	ldr	r0, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006318:	461a      	mov	r2, r3
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	f003 fbab 	bl	8009a76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006328:	441a      	add	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	d32b      	bcc.n	8006392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	e026      	b.n	8006392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68d8      	ldr	r0, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634c:	461a      	mov	r2, r3
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	f003 fb91 	bl	8009a76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	425b      	negs	r3, r3
 800635e:	441a      	add	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d207      	bcs.n	8006380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	425b      	negs	r3, r3
 800637a:	441a      	add	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d105      	bne.n	8006392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	3b01      	subs	r3, #1
 8006390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800639a:	697b      	ldr	r3, [r7, #20]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	441a      	add	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d303      	bcc.n	80063d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68d9      	ldr	r1, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	461a      	mov	r2, r3
 80063e2:	6838      	ldr	r0, [r7, #0]
 80063e4:	f003 fb47 	bl	8009a76 <memcpy>
	}
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063f8:	f001 fdfe 	bl	8007ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006402:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006404:	e011      	b.n	800642a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d012      	beq.n	8006434 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3324      	adds	r3, #36	@ 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fdb4 	bl	8006f80 <xTaskRemoveFromEventList>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800641e:	f000 fe8d 	bl	800713c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	3b01      	subs	r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800642a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	dce9      	bgt.n	8006406 <prvUnlockQueue+0x16>
 8006432:	e000      	b.n	8006436 <prvUnlockQueue+0x46>
					break;
 8006434:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	22ff      	movs	r2, #255	@ 0xff
 800643a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800643e:	f001 fe0d 	bl	800805c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006442:	f001 fdd9 	bl	8007ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800644c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800644e:	e011      	b.n	8006474 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d012      	beq.n	800647e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3310      	adds	r3, #16
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fd8f 	bl	8006f80 <xTaskRemoveFromEventList>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006468:	f000 fe68 	bl	800713c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	3b01      	subs	r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006478:	2b00      	cmp	r3, #0
 800647a:	dce9      	bgt.n	8006450 <prvUnlockQueue+0x60>
 800647c:	e000      	b.n	8006480 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800647e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	22ff      	movs	r2, #255	@ 0xff
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006488:	f001 fde8 	bl	800805c <vPortExitCritical>
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800649c:	f001 fdac 	bl	8007ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e001      	b.n	80064b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064b2:	f001 fdd3 	bl	800805c <vPortExitCritical>

	return xReturn;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064c8:	f001 fd96 	bl	8007ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d102      	bne.n	80064de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e001      	b.n	80064e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064e2:	f001 fdbb 	bl	800805c <vPortExitCritical>

	return xReturn;
 80064e6:	68fb      	ldr	r3, [r7, #12]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e014      	b.n	800652a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006500:	4a0f      	ldr	r2, [pc, #60]	@ (8006540 <vQueueAddToRegistry+0x50>)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800650c:	490c      	ldr	r1, [pc, #48]	@ (8006540 <vQueueAddToRegistry+0x50>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006516:	4a0a      	ldr	r2, [pc, #40]	@ (8006540 <vQueueAddToRegistry+0x50>)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4413      	add	r3, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006522:	e006      	b.n	8006532 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b07      	cmp	r3, #7
 800652e:	d9e7      	bls.n	8006500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20001178 	.word	0x20001178

08006544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006554:	f001 fd50 	bl	8007ff8 <vPortEnterCritical>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800655e:	b25b      	sxtb	r3, r3
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d103      	bne.n	800656e <vQueueWaitForMessageRestricted+0x2a>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006574:	b25b      	sxtb	r3, r3
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d103      	bne.n	8006584 <vQueueWaitForMessageRestricted+0x40>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006584:	f001 fd6a 	bl	800805c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	3324      	adds	r3, #36	@ 0x24
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fcc5 	bl	8006f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7ff ff26 	bl	80063f0 <prvUnlockQueue>
	}
 80065a4:	bf00      	nop
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08e      	sub	sp, #56	@ 0x38
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	623b      	str	r3, [r7, #32]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61fb      	str	r3, [r7, #28]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065f6:	235c      	movs	r3, #92	@ 0x5c
 80065f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80065fe:	d00b      	beq.n	8006618 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	61bb      	str	r3, [r7, #24]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006618:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01e      	beq.n	800665e <xTaskCreateStatic+0xb2>
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01b      	beq.n	800665e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800662e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006638:	2300      	movs	r3, #0
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f850 	bl	80066f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006658:	f000 f8de 	bl	8006818 <prvAddNewTaskToReadyList>
 800665c:	e001      	b.n	8006662 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006662:	697b      	ldr	r3, [r7, #20]
	}
 8006664:	4618      	mov	r0, r3
 8006666:	3728      	adds	r7, #40	@ 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	@ 0x30
 8006670:	af04      	add	r7, sp, #16
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fddb 	bl	800823c <pvPortMalloc>
 8006686:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800668e:	205c      	movs	r0, #92	@ 0x5c
 8006690:	f001 fdd4 	bl	800823c <pvPortMalloc>
 8006694:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066a2:	e005      	b.n	80066b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066a4:	6978      	ldr	r0, [r7, #20]
 80066a6:	f001 fe97 	bl	80083d8 <vPortFree>
 80066aa:	e001      	b.n	80066b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d017      	beq.n	80066e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	2300      	movs	r3, #0
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f80e 	bl	80066f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066da:	69f8      	ldr	r0, [r7, #28]
 80066dc:	f000 f89c 	bl	8006818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066e0:	2301      	movs	r3, #1
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e002      	b.n	80066ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066e6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066ec:	69bb      	ldr	r3, [r7, #24]
	}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b088      	sub	sp, #32
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	461a      	mov	r2, r3
 800670e:	21a5      	movs	r1, #165	@ 0xa5
 8006710:	f002 f9fe 	bl	8008b10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800671e:	3b01      	subs	r3, #1
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	617b      	str	r3, [r7, #20]
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	e7fd      	b.n	800674c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01f      	beq.n	8006796 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	e012      	b.n	8006782 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	7819      	ldrb	r1, [r3, #0]
 8006764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	3334      	adds	r3, #52	@ 0x34
 800676c:	460a      	mov	r2, r1
 800676e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d006      	beq.n	800678a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3301      	adds	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d9e9      	bls.n	800675c <prvInitialiseNewTask+0x66>
 8006788:	e000      	b.n	800678c <prvInitialiseNewTask+0x96>
			{
				break;
 800678a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006794:	e003      	b.n	800679e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	2b37      	cmp	r3, #55	@ 0x37
 80067a2:	d901      	bls.n	80067a8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067a4:	2337      	movs	r3, #55	@ 0x37
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067b2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	2200      	movs	r2, #0
 80067b8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe ff4a 	bl	8005658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	3318      	adds	r3, #24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe ff45 	bl	8005658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	2200      	movs	r2, #0
 80067e8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	68f9      	ldr	r1, [r7, #12]
 80067f6:	69b8      	ldr	r0, [r7, #24]
 80067f8:	f001 face 	bl	8007d98 <pxPortInitialiseStack>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800680e:	bf00      	nop
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006820:	f001 fbea 	bl	8007ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006824:	4b2d      	ldr	r3, [pc, #180]	@ (80068dc <prvAddNewTaskToReadyList+0xc4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	4a2c      	ldr	r2, [pc, #176]	@ (80068dc <prvAddNewTaskToReadyList+0xc4>)
 800682c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800682e:	4b2c      	ldr	r3, [pc, #176]	@ (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006836:	4a2a      	ldr	r2, [pc, #168]	@ (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800683c:	4b27      	ldr	r3, [pc, #156]	@ (80068dc <prvAddNewTaskToReadyList+0xc4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d110      	bne.n	8006866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006844:	f000 fc9e 	bl	8007184 <prvInitialiseTaskLists>
 8006848:	e00d      	b.n	8006866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800684a:	4b26      	ldr	r3, [pc, #152]	@ (80068e4 <prvAddNewTaskToReadyList+0xcc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006852:	4b23      	ldr	r3, [pc, #140]	@ (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	429a      	cmp	r2, r3
 800685e:	d802      	bhi.n	8006866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006860:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006866:	4b20      	ldr	r3, [pc, #128]	@ (80068e8 <prvAddNewTaskToReadyList+0xd0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	4a1e      	ldr	r2, [pc, #120]	@ (80068e8 <prvAddNewTaskToReadyList+0xd0>)
 800686e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006870:	4b1d      	ldr	r3, [pc, #116]	@ (80068e8 <prvAddNewTaskToReadyList+0xd0>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687c:	4b1b      	ldr	r3, [pc, #108]	@ (80068ec <prvAddNewTaskToReadyList+0xd4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d903      	bls.n	800688c <prvAddNewTaskToReadyList+0x74>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <prvAddNewTaskToReadyList+0xd4>)
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <prvAddNewTaskToReadyList+0xd8>)
 800689a:	441a      	add	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f7fe fee5 	bl	8005672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068a8:	f001 fbd8 	bl	800805c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ac:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <prvAddNewTaskToReadyList+0xcc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00e      	beq.n	80068d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068b4:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <prvAddNewTaskToReadyList+0xc8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d207      	bcs.n	80068d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068c2:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <prvAddNewTaskToReadyList+0xdc>)
 80068c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	2000168c 	.word	0x2000168c
 80068e0:	200011b8 	.word	0x200011b8
 80068e4:	20001698 	.word	0x20001698
 80068e8:	200016a8 	.word	0x200016a8
 80068ec:	20001694 	.word	0x20001694
 80068f0:	200011bc 	.word	0x200011bc
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	@ 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <vTaskDelayUntil+0x2c>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	617b      	str	r3, [r7, #20]
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <vTaskDelayUntil+0x4a>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	613b      	str	r3, [r7, #16]
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	e7fd      	b.n	800693e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006942:	4b2a      	ldr	r3, [pc, #168]	@ (80069ec <vTaskDelayUntil+0xf4>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <vTaskDelayUntil+0x6a>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	60fb      	str	r3, [r7, #12]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006962:	f000 f8e7 	bl	8006b34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006966:	4b22      	ldr	r3, [pc, #136]	@ (80069f0 <vTaskDelayUntil+0xf8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	4413      	add	r3, r2
 8006974:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a3a      	ldr	r2, [r7, #32]
 800697c:	429a      	cmp	r2, r3
 800697e:	d20b      	bcs.n	8006998 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	429a      	cmp	r2, r3
 8006988:	d211      	bcs.n	80069ae <vTaskDelayUntil+0xb6>
 800698a:	69fa      	ldr	r2, [r7, #28]
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	429a      	cmp	r2, r3
 8006990:	d90d      	bls.n	80069ae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006992:	2301      	movs	r3, #1
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
 8006996:	e00a      	b.n	80069ae <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d303      	bcc.n	80069aa <vTaskDelayUntil+0xb2>
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d901      	bls.n	80069ae <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80069aa:	2301      	movs	r3, #1
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d006      	beq.n	80069c8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2100      	movs	r1, #0
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fe3a 	bl	800763c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80069c8:	f000 f8c2 	bl	8006b50 <xTaskResumeAll>
 80069cc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d107      	bne.n	80069e4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80069d4:	4b07      	ldr	r3, [pc, #28]	@ (80069f4 <vTaskDelayUntil+0xfc>)
 80069d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069e4:	bf00      	nop
 80069e6:	3728      	adds	r7, #40	@ 0x28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	200016b4 	.word	0x200016b4
 80069f0:	20001690 	.word	0x20001690
 80069f4:	e000ed04 	.word	0xe000ed04

080069f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d018      	beq.n	8006a3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a0a:	4b14      	ldr	r3, [pc, #80]	@ (8006a5c <vTaskDelay+0x64>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <vTaskDelay+0x32>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60bb      	str	r3, [r7, #8]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a2a:	f000 f883 	bl	8006b34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fe03 	bl	800763c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a36:	f000 f88b 	bl	8006b50 <xTaskResumeAll>
 8006a3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d107      	bne.n	8006a52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a42:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <vTaskDelay+0x68>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200016b4 	.word	0x200016b4
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	@ 0x28
 8006a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a72:	463a      	mov	r2, r7
 8006a74:	1d39      	adds	r1, r7, #4
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fd98 	bl	80055b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	9202      	str	r2, [sp, #8]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	460a      	mov	r2, r1
 8006a92:	4922      	ldr	r1, [pc, #136]	@ (8006b1c <vTaskStartScheduler+0xb8>)
 8006a94:	4822      	ldr	r0, [pc, #136]	@ (8006b20 <vTaskStartScheduler+0xbc>)
 8006a96:	f7ff fd89 	bl	80065ac <xTaskCreateStatic>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4a21      	ldr	r2, [pc, #132]	@ (8006b24 <vTaskStartScheduler+0xc0>)
 8006a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aa0:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <vTaskStartScheduler+0xc0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e001      	b.n	8006ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ab8:	f000 fe14 	bl	80076e4 <xTimerCreateTimerTask>
 8006abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d116      	bne.n	8006af2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	613b      	str	r3, [r7, #16]
}
 8006ad6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ad8:	4b13      	ldr	r3, [pc, #76]	@ (8006b28 <vTaskStartScheduler+0xc4>)
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ae0:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <vTaskStartScheduler+0xc8>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ae6:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <vTaskStartScheduler+0xcc>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aec:	f001 f9e0 	bl	8007eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006af0:	e00f      	b.n	8006b12 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d10b      	bne.n	8006b12 <vTaskStartScheduler+0xae>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60fb      	str	r3, [r7, #12]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <vTaskStartScheduler+0xaa>
}
 8006b12:	bf00      	nop
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	0800b9b4 	.word	0x0800b9b4
 8006b20:	08007155 	.word	0x08007155
 8006b24:	200016b0 	.word	0x200016b0
 8006b28:	200016ac 	.word	0x200016ac
 8006b2c:	20001698 	.word	0x20001698
 8006b30:	20001690 	.word	0x20001690

08006b34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b38:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <vTaskSuspendAll+0x18>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	4a03      	ldr	r2, [pc, #12]	@ (8006b4c <vTaskSuspendAll+0x18>)
 8006b40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b42:	bf00      	nop
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	200016b4 	.word	0x200016b4

08006b50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b5e:	4b42      	ldr	r3, [pc, #264]	@ (8006c68 <xTaskResumeAll+0x118>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <xTaskResumeAll+0x2e>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	603b      	str	r3, [r7, #0]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b7e:	f001 fa3b 	bl	8007ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b82:	4b39      	ldr	r3, [pc, #228]	@ (8006c68 <xTaskResumeAll+0x118>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	4a37      	ldr	r2, [pc, #220]	@ (8006c68 <xTaskResumeAll+0x118>)
 8006b8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8c:	4b36      	ldr	r3, [pc, #216]	@ (8006c68 <xTaskResumeAll+0x118>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d162      	bne.n	8006c5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b94:	4b35      	ldr	r3, [pc, #212]	@ (8006c6c <xTaskResumeAll+0x11c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05e      	beq.n	8006c5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b9c:	e02f      	b.n	8006bfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9e:	4b34      	ldr	r3, [pc, #208]	@ (8006c70 <xTaskResumeAll+0x120>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3318      	adds	r3, #24
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fdbe 	bl	800572c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fdb9 	bl	800572c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8006c74 <xTaskResumeAll+0x124>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d903      	bls.n	8006bce <xTaskResumeAll+0x7e>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	4a2a      	ldr	r2, [pc, #168]	@ (8006c74 <xTaskResumeAll+0x124>)
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a27      	ldr	r2, [pc, #156]	@ (8006c78 <xTaskResumeAll+0x128>)
 8006bdc:	441a      	add	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fe fd44 	bl	8005672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	4b23      	ldr	r3, [pc, #140]	@ (8006c7c <xTaskResumeAll+0x12c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006bf8:	4b21      	ldr	r3, [pc, #132]	@ (8006c80 <xTaskResumeAll+0x130>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c70 <xTaskResumeAll+0x120>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1cb      	bne.n	8006b9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c0c:	f000 fb58 	bl	80072c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c10:	4b1c      	ldr	r3, [pc, #112]	@ (8006c84 <xTaskResumeAll+0x134>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c1c:	f000 f846 	bl	8006cac <xTaskIncrementTick>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006c26:	4b16      	ldr	r3, [pc, #88]	@ (8006c80 <xTaskResumeAll+0x130>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f1      	bne.n	8006c1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006c38:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <xTaskResumeAll+0x134>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c3e:	4b10      	ldr	r3, [pc, #64]	@ (8006c80 <xTaskResumeAll+0x130>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <xTaskResumeAll+0x138>)
 8006c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c5a:	f001 f9ff 	bl	800805c <vPortExitCritical>

	return xAlreadyYielded;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	200016b4 	.word	0x200016b4
 8006c6c:	2000168c 	.word	0x2000168c
 8006c70:	2000164c 	.word	0x2000164c
 8006c74:	20001694 	.word	0x20001694
 8006c78:	200011bc 	.word	0x200011bc
 8006c7c:	200011b8 	.word	0x200011b8
 8006c80:	200016a0 	.word	0x200016a0
 8006c84:	2000169c 	.word	0x2000169c
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c92:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <xTaskGetTickCount+0x1c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c98:	687b      	ldr	r3, [r7, #4]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20001690 	.word	0x20001690

08006cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8006df4 <xTaskIncrementTick+0x148>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f040 8090 	bne.w	8006de0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8006df8 <xTaskIncrementTick+0x14c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cc8:	4a4b      	ldr	r2, [pc, #300]	@ (8006df8 <xTaskIncrementTick+0x14c>)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d121      	bne.n	8006d18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cd4:	4b49      	ldr	r3, [pc, #292]	@ (8006dfc <xTaskIncrementTick+0x150>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	603b      	str	r3, [r7, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <xTaskIncrementTick+0x46>
 8006cf6:	4b41      	ldr	r3, [pc, #260]	@ (8006dfc <xTaskIncrementTick+0x150>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	4b40      	ldr	r3, [pc, #256]	@ (8006e00 <xTaskIncrementTick+0x154>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3e      	ldr	r2, [pc, #248]	@ (8006dfc <xTaskIncrementTick+0x150>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	4a3e      	ldr	r2, [pc, #248]	@ (8006e00 <xTaskIncrementTick+0x154>)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e04 <xTaskIncrementTick+0x158>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	4a3c      	ldr	r2, [pc, #240]	@ (8006e04 <xTaskIncrementTick+0x158>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	f000 fad4 	bl	80072c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d18:	4b3b      	ldr	r3, [pc, #236]	@ (8006e08 <xTaskIncrementTick+0x15c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d349      	bcc.n	8006db6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d22:	4b36      	ldr	r3, [pc, #216]	@ (8006dfc <xTaskIncrementTick+0x150>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2c:	4b36      	ldr	r3, [pc, #216]	@ (8006e08 <xTaskIncrementTick+0x15c>)
 8006d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d32:	601a      	str	r2, [r3, #0]
					break;
 8006d34:	e03f      	b.n	8006db6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d36:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <xTaskIncrementTick+0x150>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d203      	bcs.n	8006d56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8006e08 <xTaskIncrementTick+0x15c>)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d54:	e02f      	b.n	8006db6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fce6 	bl	800572c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	3318      	adds	r3, #24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fcdd 	bl	800572c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d76:	4b25      	ldr	r3, [pc, #148]	@ (8006e0c <xTaskIncrementTick+0x160>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d903      	bls.n	8006d86 <xTaskIncrementTick+0xda>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	4a22      	ldr	r2, [pc, #136]	@ (8006e0c <xTaskIncrementTick+0x160>)
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4a1f      	ldr	r2, [pc, #124]	@ (8006e10 <xTaskIncrementTick+0x164>)
 8006d94:	441a      	add	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7fe fc68 	bl	8005672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e14 <xTaskIncrementTick+0x168>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3b8      	bcc.n	8006d22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db4:	e7b5      	b.n	8006d22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006db6:	4b17      	ldr	r3, [pc, #92]	@ (8006e14 <xTaskIncrementTick+0x168>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbc:	4914      	ldr	r1, [pc, #80]	@ (8006e10 <xTaskIncrementTick+0x164>)
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d901      	bls.n	8006dd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dd2:	4b11      	ldr	r3, [pc, #68]	@ (8006e18 <xTaskIncrementTick+0x16c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e004      	b.n	8006dea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006de0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e1c <xTaskIncrementTick+0x170>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e1c <xTaskIncrementTick+0x170>)
 8006de8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	200016b4 	.word	0x200016b4
 8006df8:	20001690 	.word	0x20001690
 8006dfc:	20001644 	.word	0x20001644
 8006e00:	20001648 	.word	0x20001648
 8006e04:	200016a4 	.word	0x200016a4
 8006e08:	200016ac 	.word	0x200016ac
 8006e0c:	20001694 	.word	0x20001694
 8006e10:	200011bc 	.word	0x200011bc
 8006e14:	200011b8 	.word	0x200011b8
 8006e18:	200016a0 	.word	0x200016a0
 8006e1c:	2000169c 	.word	0x2000169c

08006e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e26:	4b28      	ldr	r3, [pc, #160]	@ (8006ec8 <vTaskSwitchContext+0xa8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e2e:	4b27      	ldr	r3, [pc, #156]	@ (8006ecc <vTaskSwitchContext+0xac>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e34:	e042      	b.n	8006ebc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006e36:	4b25      	ldr	r3, [pc, #148]	@ (8006ecc <vTaskSwitchContext+0xac>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3c:	4b24      	ldr	r3, [pc, #144]	@ (8006ed0 <vTaskSwitchContext+0xb0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e011      	b.n	8006e68 <vTaskSwitchContext+0x48>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <vTaskSwitchContext+0x42>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	607b      	str	r3, [r7, #4]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <vTaskSwitchContext+0x3e>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	491a      	ldr	r1, [pc, #104]	@ (8006ed4 <vTaskSwitchContext+0xb4>)
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0e3      	beq.n	8006e44 <vTaskSwitchContext+0x24>
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a13      	ldr	r2, [pc, #76]	@ (8006ed4 <vTaskSwitchContext+0xb4>)
 8006e88:	4413      	add	r3, r2
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d104      	bne.n	8006eac <vTaskSwitchContext+0x8c>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	605a      	str	r2, [r3, #4]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	4a09      	ldr	r2, [pc, #36]	@ (8006ed8 <vTaskSwitchContext+0xb8>)
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4a06      	ldr	r2, [pc, #24]	@ (8006ed0 <vTaskSwitchContext+0xb0>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6013      	str	r3, [r2, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	200016b4 	.word	0x200016b4
 8006ecc:	200016a0 	.word	0x200016a0
 8006ed0:	20001694 	.word	0x20001694
 8006ed4:	200011bc 	.word	0x200011bc
 8006ed8:	200011b8 	.word	0x200011b8

08006edc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f04:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <vTaskPlaceOnEventList+0x48>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3318      	adds	r3, #24
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fe fbd4 	bl	80056ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f12:	2101      	movs	r1, #1
 8006f14:	6838      	ldr	r0, [r7, #0]
 8006f16:	f000 fb91 	bl	800763c <prvAddCurrentTaskToDelayedList>
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200011b8 	.word	0x200011b8

08006f28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	617b      	str	r3, [r7, #20]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f52:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3318      	adds	r3, #24
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7fe fb89 	bl	8005672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006f66:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	68b8      	ldr	r0, [r7, #8]
 8006f70:	f000 fb64 	bl	800763c <prvAddCurrentTaskToDelayedList>
	}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200011b8 	.word	0x200011b8

08006f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3318      	adds	r3, #24
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fbba 	bl	800572c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8007030 <xTaskRemoveFromEventList+0xb0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d11d      	bne.n	8006ffc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fbb1 	bl	800572c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fce:	4b19      	ldr	r3, [pc, #100]	@ (8007034 <xTaskRemoveFromEventList+0xb4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d903      	bls.n	8006fde <xTaskRemoveFromEventList+0x5e>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	4a16      	ldr	r2, [pc, #88]	@ (8007034 <xTaskRemoveFromEventList+0xb4>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4a13      	ldr	r2, [pc, #76]	@ (8007038 <xTaskRemoveFromEventList+0xb8>)
 8006fec:	441a      	add	r2, r3
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fe fb3c 	bl	8005672 <vListInsertEnd>
 8006ffa:	e005      	b.n	8007008 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	3318      	adds	r3, #24
 8007000:	4619      	mov	r1, r3
 8007002:	480e      	ldr	r0, [pc, #56]	@ (800703c <xTaskRemoveFromEventList+0xbc>)
 8007004:	f7fe fb35 	bl	8005672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700c:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <xTaskRemoveFromEventList+0xc0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	429a      	cmp	r2, r3
 8007014:	d905      	bls.n	8007022 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007016:	2301      	movs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800701a:	4b0a      	ldr	r3, [pc, #40]	@ (8007044 <xTaskRemoveFromEventList+0xc4>)
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e001      	b.n	8007026 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007026:	697b      	ldr	r3, [r7, #20]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	200016b4 	.word	0x200016b4
 8007034:	20001694 	.word	0x20001694
 8007038:	200011bc 	.word	0x200011bc
 800703c:	2000164c 	.word	0x2000164c
 8007040:	200011b8 	.word	0x200011b8
 8007044:	200016a0 	.word	0x200016a0

08007048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007050:	4b06      	ldr	r3, [pc, #24]	@ (800706c <vTaskInternalSetTimeOutState+0x24>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007058:	4b05      	ldr	r3, [pc, #20]	@ (8007070 <vTaskInternalSetTimeOutState+0x28>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	605a      	str	r2, [r3, #4]
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	200016a4 	.word	0x200016a4
 8007070:	20001690 	.word	0x20001690

08007074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	613b      	str	r3, [r7, #16]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80070ba:	f000 ff9d 	bl	8007ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070be:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <xTaskCheckForTimeOut+0xc0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d102      	bne.n	80070de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070d8:	2300      	movs	r3, #0
 80070da:	61fb      	str	r3, [r7, #28]
 80070dc:	e023      	b.n	8007126 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <xTaskCheckForTimeOut+0xc4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d007      	beq.n	80070fa <xTaskCheckForTimeOut+0x86>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d302      	bcc.n	80070fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	e015      	b.n	8007126 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	429a      	cmp	r2, r3
 8007102:	d20b      	bcs.n	800711c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	1ad2      	subs	r2, r2, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff ff99 	bl	8007048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	e004      	b.n	8007126 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007122:	2301      	movs	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007126:	f000 ff99 	bl	800805c <vPortExitCritical>

	return xReturn;
 800712a:	69fb      	ldr	r3, [r7, #28]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20001690 	.word	0x20001690
 8007138:	200016a4 	.word	0x200016a4

0800713c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007140:	4b03      	ldr	r3, [pc, #12]	@ (8007150 <vTaskMissedYield+0x14>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
}
 8007146:	bf00      	nop
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	200016a0 	.word	0x200016a0

08007154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800715c:	f000 f852 	bl	8007204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007160:	4b06      	ldr	r3, [pc, #24]	@ (800717c <prvIdleTask+0x28>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d9f9      	bls.n	800715c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007168:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <prvIdleTask+0x2c>)
 800716a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007178:	e7f0      	b.n	800715c <prvIdleTask+0x8>
 800717a:	bf00      	nop
 800717c:	200011bc 	.word	0x200011bc
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800718a:	2300      	movs	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	e00c      	b.n	80071aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4a12      	ldr	r2, [pc, #72]	@ (80071e4 <prvInitialiseTaskLists+0x60>)
 800719c:	4413      	add	r3, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fa3a 	bl	8005618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3301      	adds	r3, #1
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b37      	cmp	r3, #55	@ 0x37
 80071ae:	d9ef      	bls.n	8007190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071b0:	480d      	ldr	r0, [pc, #52]	@ (80071e8 <prvInitialiseTaskLists+0x64>)
 80071b2:	f7fe fa31 	bl	8005618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071b6:	480d      	ldr	r0, [pc, #52]	@ (80071ec <prvInitialiseTaskLists+0x68>)
 80071b8:	f7fe fa2e 	bl	8005618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071bc:	480c      	ldr	r0, [pc, #48]	@ (80071f0 <prvInitialiseTaskLists+0x6c>)
 80071be:	f7fe fa2b 	bl	8005618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071c2:	480c      	ldr	r0, [pc, #48]	@ (80071f4 <prvInitialiseTaskLists+0x70>)
 80071c4:	f7fe fa28 	bl	8005618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071c8:	480b      	ldr	r0, [pc, #44]	@ (80071f8 <prvInitialiseTaskLists+0x74>)
 80071ca:	f7fe fa25 	bl	8005618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071ce:	4b0b      	ldr	r3, [pc, #44]	@ (80071fc <prvInitialiseTaskLists+0x78>)
 80071d0:	4a05      	ldr	r2, [pc, #20]	@ (80071e8 <prvInitialiseTaskLists+0x64>)
 80071d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <prvInitialiseTaskLists+0x7c>)
 80071d6:	4a05      	ldr	r2, [pc, #20]	@ (80071ec <prvInitialiseTaskLists+0x68>)
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200011bc 	.word	0x200011bc
 80071e8:	2000161c 	.word	0x2000161c
 80071ec:	20001630 	.word	0x20001630
 80071f0:	2000164c 	.word	0x2000164c
 80071f4:	20001660 	.word	0x20001660
 80071f8:	20001678 	.word	0x20001678
 80071fc:	20001644 	.word	0x20001644
 8007200:	20001648 	.word	0x20001648

08007204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800720a:	e019      	b.n	8007240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800720c:	f000 fef4 	bl	8007ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007210:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <prvCheckTasksWaitingTermination+0x50>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fa85 	bl	800572c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <prvCheckTasksWaitingTermination+0x54>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3b01      	subs	r3, #1
 8007228:	4a0b      	ldr	r2, [pc, #44]	@ (8007258 <prvCheckTasksWaitingTermination+0x54>)
 800722a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800722c:	4b0b      	ldr	r3, [pc, #44]	@ (800725c <prvCheckTasksWaitingTermination+0x58>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3b01      	subs	r3, #1
 8007232:	4a0a      	ldr	r2, [pc, #40]	@ (800725c <prvCheckTasksWaitingTermination+0x58>)
 8007234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007236:	f000 ff11 	bl	800805c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f810 	bl	8007260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007240:	4b06      	ldr	r3, [pc, #24]	@ (800725c <prvCheckTasksWaitingTermination+0x58>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e1      	bne.n	800720c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20001660 	.word	0x20001660
 8007258:	2000168c 	.word	0x2000168c
 800725c:	20001674 	.word	0x20001674

08007260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800726e:	2b00      	cmp	r3, #0
 8007270:	d108      	bne.n	8007284 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007276:	4618      	mov	r0, r3
 8007278:	f001 f8ae 	bl	80083d8 <vPortFree>
				vPortFree( pxTCB );
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f8ab 	bl	80083d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007282:	e019      	b.n	80072b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800728a:	2b01      	cmp	r3, #1
 800728c:	d103      	bne.n	8007296 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 f8a2 	bl	80083d8 <vPortFree>
	}
 8007294:	e010      	b.n	80072b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800729c:	2b02      	cmp	r3, #2
 800729e:	d00b      	beq.n	80072b8 <prvDeleteTCB+0x58>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60fb      	str	r3, [r7, #12]
}
 80072b2:	bf00      	nop
 80072b4:	bf00      	nop
 80072b6:	e7fd      	b.n	80072b4 <prvDeleteTCB+0x54>
	}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c6:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <prvResetNextTaskUnblockTime+0x38>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072d0:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <prvResetNextTaskUnblockTime+0x3c>)
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295
 80072d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072d8:	e008      	b.n	80072ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072da:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <prvResetNextTaskUnblockTime+0x38>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4a04      	ldr	r2, [pc, #16]	@ (80072fc <prvResetNextTaskUnblockTime+0x3c>)
 80072ea:	6013      	str	r3, [r2, #0]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	20001644 	.word	0x20001644
 80072fc:	200016ac 	.word	0x200016ac

08007300 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007306:	4b05      	ldr	r3, [pc, #20]	@ (800731c <xTaskGetCurrentTaskHandle+0x1c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800730c:	687b      	ldr	r3, [r7, #4]
	}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	200011b8 	.word	0x200011b8

08007320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007326:	4b0b      	ldr	r3, [pc, #44]	@ (8007354 <xTaskGetSchedulerState+0x34>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800732e:	2301      	movs	r3, #1
 8007330:	607b      	str	r3, [r7, #4]
 8007332:	e008      	b.n	8007346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007334:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <xTaskGetSchedulerState+0x38>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800733c:	2302      	movs	r3, #2
 800733e:	607b      	str	r3, [r7, #4]
 8007340:	e001      	b.n	8007346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007342:	2300      	movs	r3, #0
 8007344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007346:	687b      	ldr	r3, [r7, #4]
	}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20001698 	.word	0x20001698
 8007358:	200016b4 	.word	0x200016b4

0800735c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d051      	beq.n	8007416 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007376:	4b2a      	ldr	r3, [pc, #168]	@ (8007420 <xTaskPriorityInherit+0xc4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737c:	429a      	cmp	r2, r3
 800737e:	d241      	bcs.n	8007404 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	db06      	blt.n	8007396 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007388:	4b25      	ldr	r3, [pc, #148]	@ (8007420 <xTaskPriorityInherit+0xc4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6959      	ldr	r1, [r3, #20]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007424 <xTaskPriorityInherit+0xc8>)
 80073a8:	4413      	add	r3, r2
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d122      	bne.n	80073f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe f9ba 	bl	800572c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073b8:	4b19      	ldr	r3, [pc, #100]	@ (8007420 <xTaskPriorityInherit+0xc4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	4b18      	ldr	r3, [pc, #96]	@ (8007428 <xTaskPriorityInherit+0xcc>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d903      	bls.n	80073d6 <xTaskPriorityInherit+0x7a>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4a15      	ldr	r2, [pc, #84]	@ (8007428 <xTaskPriorityInherit+0xcc>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4a10      	ldr	r2, [pc, #64]	@ (8007424 <xTaskPriorityInherit+0xc8>)
 80073e4:	441a      	add	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe f940 	bl	8005672 <vListInsertEnd>
 80073f2:	e004      	b.n	80073fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <xTaskPriorityInherit+0xc4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073fe:	2301      	movs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e008      	b.n	8007416 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007408:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <xTaskPriorityInherit+0xc4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	429a      	cmp	r2, r3
 8007410:	d201      	bcs.n	8007416 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007416:	68fb      	ldr	r3, [r7, #12]
	}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	200011b8 	.word	0x200011b8
 8007424:	200011bc 	.word	0x200011bc
 8007428:	20001694 	.word	0x20001694

0800742c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d058      	beq.n	80074f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007442:	4b2f      	ldr	r3, [pc, #188]	@ (8007500 <xTaskPriorityDisinherit+0xd4>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d00b      	beq.n	8007464 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	60bb      	str	r3, [r7, #8]
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	e7fd      	b.n	8007480 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007488:	1e5a      	subs	r2, r3, #1
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007496:	429a      	cmp	r2, r3
 8007498:	d02c      	beq.n	80074f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d128      	bne.n	80074f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe f940 	bl	800572c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <xTaskPriorityDisinherit+0xd8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d903      	bls.n	80074d4 <xTaskPriorityDisinherit+0xa8>
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <xTaskPriorityDisinherit+0xd8>)
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4a09      	ldr	r2, [pc, #36]	@ (8007508 <xTaskPriorityDisinherit+0xdc>)
 80074e2:	441a      	add	r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fe f8c1 	bl	8005672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074f4:	697b      	ldr	r3, [r7, #20]
	}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	200011b8 	.word	0x200011b8
 8007504:	20001694 	.word	0x20001694
 8007508:	200011bc 	.word	0x200011bc

0800750c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800751a:	2301      	movs	r3, #1
 800751c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d06c      	beq.n	80075fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60fb      	str	r3, [r7, #12]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d902      	bls.n	8007554 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	e002      	b.n	800755a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007558:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	429a      	cmp	r2, r3
 8007562:	d04c      	beq.n	80075fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	429a      	cmp	r2, r3
 800756c:	d147      	bne.n	80075fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800756e:	4b26      	ldr	r3, [pc, #152]	@ (8007608 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	429a      	cmp	r2, r3
 8007576:	d10b      	bne.n	8007590 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60bb      	str	r3, [r7, #8]
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	db04      	blt.n	80075ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	6959      	ldr	r1, [r3, #20]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a13      	ldr	r2, [pc, #76]	@ (800760c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075be:	4413      	add	r3, r2
 80075c0:	4299      	cmp	r1, r3
 80075c2:	d11c      	bne.n	80075fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe f8af 	bl	800572c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	4a0c      	ldr	r2, [pc, #48]	@ (8007610 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4a07      	ldr	r2, [pc, #28]	@ (800760c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075f0:	441a      	add	r2, r3
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7fe f83a 	bl	8005672 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075fe:	bf00      	nop
 8007600:	3720      	adds	r7, #32
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200011b8 	.word	0x200011b8
 800760c:	200011bc 	.word	0x200011bc
 8007610:	20001694 	.word	0x20001694

08007614 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007618:	4b07      	ldr	r3, [pc, #28]	@ (8007638 <pvTaskIncrementMutexHeldCount+0x24>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <pvTaskIncrementMutexHeldCount+0x24>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007626:	3201      	adds	r2, #1
 8007628:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800762a:	4b03      	ldr	r3, [pc, #12]	@ (8007638 <pvTaskIncrementMutexHeldCount+0x24>)
 800762c:	681b      	ldr	r3, [r3, #0]
	}
 800762e:	4618      	mov	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	200011b8 	.word	0x200011b8

0800763c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007646:	4b21      	ldr	r3, [pc, #132]	@ (80076cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800764c:	4b20      	ldr	r3, [pc, #128]	@ (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe f86a 	bl	800572c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d10a      	bne.n	8007676 <prvAddCurrentTaskToDelayedList+0x3a>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007666:	4b1a      	ldr	r3, [pc, #104]	@ (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4819      	ldr	r0, [pc, #100]	@ (80076d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007670:	f7fd ffff 	bl	8005672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007674:	e026      	b.n	80076c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4413      	add	r3, r2
 800767c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800767e:	4b14      	ldr	r3, [pc, #80]	@ (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	429a      	cmp	r2, r3
 800768c:	d209      	bcs.n	80076a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800768e:	4b12      	ldr	r3, [pc, #72]	@ (80076d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b0f      	ldr	r3, [pc, #60]	@ (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe f80d 	bl	80056ba <vListInsert>
}
 80076a0:	e010      	b.n	80076c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a2:	4b0e      	ldr	r3, [pc, #56]	@ (80076dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b0a      	ldr	r3, [pc, #40]	@ (80076d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fe f803 	bl	80056ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076b4:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d202      	bcs.n	80076c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076be:	4a08      	ldr	r2, [pc, #32]	@ (80076e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6013      	str	r3, [r2, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20001690 	.word	0x20001690
 80076d0:	200011b8 	.word	0x200011b8
 80076d4:	20001678 	.word	0x20001678
 80076d8:	20001648 	.word	0x20001648
 80076dc:	20001644 	.word	0x20001644
 80076e0:	200016ac 	.word	0x200016ac

080076e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	@ 0x28
 80076e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076ee:	f000 fb13 	bl	8007d18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007768 <xTimerCreateTimerTask+0x84>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d021      	beq.n	800773e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007702:	1d3a      	adds	r2, r7, #4
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	4618      	mov	r0, r3
 800770e:	f7fd ff69 	bl	80055e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	9202      	str	r2, [sp, #8]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	2302      	movs	r3, #2
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	460a      	mov	r2, r1
 8007724:	4911      	ldr	r1, [pc, #68]	@ (800776c <xTimerCreateTimerTask+0x88>)
 8007726:	4812      	ldr	r0, [pc, #72]	@ (8007770 <xTimerCreateTimerTask+0x8c>)
 8007728:	f7fe ff40 	bl	80065ac <xTaskCreateStatic>
 800772c:	4603      	mov	r3, r0
 800772e:	4a11      	ldr	r2, [pc, #68]	@ (8007774 <xTimerCreateTimerTask+0x90>)
 8007730:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007732:	4b10      	ldr	r3, [pc, #64]	@ (8007774 <xTimerCreateTimerTask+0x90>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800773a:	2301      	movs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	613b      	str	r3, [r7, #16]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800775c:	697b      	ldr	r3, [r7, #20]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200016e8 	.word	0x200016e8
 800776c:	0800b9bc 	.word	0x0800b9bc
 8007770:	080078b1 	.word	0x080078b1
 8007774:	200016ec 	.word	0x200016ec

08007778 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	@ 0x28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007786:	2300      	movs	r3, #0
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	623b      	str	r3, [r7, #32]
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	e7fd      	b.n	80077a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077a8:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <xTimerGenericCommand+0x98>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d02a      	beq.n	8007806 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b05      	cmp	r3, #5
 80077c0:	dc18      	bgt.n	80077f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077c2:	f7ff fdad 	bl	8007320 <xTaskGetSchedulerState>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d109      	bne.n	80077e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077cc:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <xTimerGenericCommand+0x98>)
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	f107 0110 	add.w	r1, r7, #16
 80077d4:	2300      	movs	r3, #0
 80077d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d8:	f7fe f9d0 	bl	8005b7c <xQueueGenericSend>
 80077dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80077de:	e012      	b.n	8007806 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <xTimerGenericCommand+0x98>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	f107 0110 	add.w	r1, r7, #16
 80077e8:	2300      	movs	r3, #0
 80077ea:	2200      	movs	r2, #0
 80077ec:	f7fe f9c6 	bl	8005b7c <xQueueGenericSend>
 80077f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80077f2:	e008      	b.n	8007806 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077f4:	4b06      	ldr	r3, [pc, #24]	@ (8007810 <xTimerGenericCommand+0x98>)
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	f107 0110 	add.w	r1, r7, #16
 80077fc:	2300      	movs	r3, #0
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f7fe fabe 	bl	8005d80 <xQueueGenericSendFromISR>
 8007804:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	@ 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200016e8 	.word	0x200016e8

08007814 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af02      	add	r7, sp, #8
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781e:	4b23      	ldr	r3, [pc, #140]	@ (80078ac <prvProcessExpiredTimer+0x98>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	3304      	adds	r3, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f7fd ff7d 	bl	800572c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d023      	beq.n	8007888 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	18d1      	adds	r1, r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	f000 f8d5 	bl	80079fc <prvInsertTimerInActiveList>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d020      	beq.n	800789a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007858:	2300      	movs	r3, #0
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	2300      	movs	r3, #0
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	2100      	movs	r1, #0
 8007862:	6978      	ldr	r0, [r7, #20]
 8007864:	f7ff ff88 	bl	8007778 <xTimerGenericCommand>
 8007868:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d114      	bne.n	800789a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	6978      	ldr	r0, [r7, #20]
 80078a0:	4798      	blx	r3
}
 80078a2:	bf00      	nop
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200016e0 	.word	0x200016e0

080078b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078b8:	f107 0308 	add.w	r3, r7, #8
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f859 	bl	8007974 <prvGetNextExpireTime>
 80078c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f805 	bl	80078d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078ce:	f000 f8d7 	bl	8007a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078d2:	bf00      	nop
 80078d4:	e7f0      	b.n	80078b8 <prvTimerTask+0x8>
	...

080078d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078e2:	f7ff f927 	bl	8006b34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f866 	bl	80079bc <prvSampleTimeNow>
 80078f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d130      	bne.n	800795a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <prvProcessTimerOrBlockTask+0x3c>
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	d806      	bhi.n	8007914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007906:	f7ff f923 	bl	8006b50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800790a:	68f9      	ldr	r1, [r7, #12]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ff81 	bl	8007814 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007912:	e024      	b.n	800795e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800791a:	4b13      	ldr	r3, [pc, #76]	@ (8007968 <prvProcessTimerOrBlockTask+0x90>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <prvProcessTimerOrBlockTask+0x50>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <prvProcessTimerOrBlockTask+0x52>
 8007928:	2300      	movs	r3, #0
 800792a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800792c:	4b0f      	ldr	r3, [pc, #60]	@ (800796c <prvProcessTimerOrBlockTask+0x94>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	4619      	mov	r1, r3
 800793a:	f7fe fe03 	bl	8006544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800793e:	f7ff f907 	bl	8006b50 <xTaskResumeAll>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <prvProcessTimerOrBlockTask+0x98>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
}
 8007958:	e001      	b.n	800795e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800795a:	f7ff f8f9 	bl	8006b50 <xTaskResumeAll>
}
 800795e:	bf00      	nop
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	200016e4 	.word	0x200016e4
 800796c:	200016e8 	.word	0x200016e8
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800797c:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <prvGetNextExpireTime+0x44>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <prvGetNextExpireTime+0x16>
 8007986:	2201      	movs	r2, #1
 8007988:	e000      	b.n	800798c <prvGetNextExpireTime+0x18>
 800798a:	2200      	movs	r2, #0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007998:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <prvGetNextExpireTime+0x44>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e001      	b.n	80079a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079a8:	68fb      	ldr	r3, [r7, #12]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	200016e0 	.word	0x200016e0

080079bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079c4:	f7ff f962 	bl	8006c8c <xTaskGetTickCount>
 80079c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079ca:	4b0b      	ldr	r3, [pc, #44]	@ (80079f8 <prvSampleTimeNow+0x3c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d205      	bcs.n	80079e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079d4:	f000 f93a 	bl	8007c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e002      	b.n	80079e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079e6:	4a04      	ldr	r2, [pc, #16]	@ (80079f8 <prvSampleTimeNow+0x3c>)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200016f0 	.word	0x200016f0

080079fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d812      	bhi.n	8007a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	1ad2      	subs	r2, r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e01b      	b.n	8007a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a36:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <prvInsertTimerInActiveList+0x7c>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7fd fe3a 	bl	80056ba <vListInsert>
 8007a46:	e012      	b.n	8007a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d206      	bcs.n	8007a5e <prvInsertTimerInActiveList+0x62>
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e007      	b.n	8007a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a5e:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <prvInsertTimerInActiveList+0x80>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fd fe26 	bl	80056ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	200016e4 	.word	0x200016e4
 8007a7c:	200016e0 	.word	0x200016e0

08007a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08e      	sub	sp, #56	@ 0x38
 8007a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a86:	e0ce      	b.n	8007c26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da19      	bge.n	8007ac2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a8e:	1d3b      	adds	r3, r7, #4
 8007a90:	3304      	adds	r3, #4
 8007a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	61fb      	str	r3, [r7, #28]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab8:	6850      	ldr	r0, [r2, #4]
 8007aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007abc:	6892      	ldr	r2, [r2, #8]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f2c0 80ae 	blt.w	8007c26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fe26 	bl	800572c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff ff6a 	bl	80079bc <prvSampleTimeNow>
 8007ae8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	f200 8097 	bhi.w	8007c20 <prvProcessReceivedCommands+0x1a0>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <prvProcessReceivedCommands+0x78>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b97 	.word	0x08007b97
 8007b08:	08007bab 	.word	0x08007bab
 8007b0c:	08007bf7 	.word	0x08007bf7
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b21 	.word	0x08007b21
 8007b18:	08007b97 	.word	0x08007b97
 8007b1c:	08007bab 	.word	0x08007bab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b26:	f043 0301 	orr.w	r3, r3, #1
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	18d1      	adds	r1, r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b40:	f7ff ff5c 	bl	80079fc <prvInsertTimerInActiveList>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d06c      	beq.n	8007c24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d061      	beq.n	8007c24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	441a      	add	r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b72:	f7ff fe01 	bl	8007778 <xTimerGenericCommand>
 8007b76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d152      	bne.n	8007c24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	61bb      	str	r3, [r7, #24]
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ba8:	e03d      	b.n	8007c26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	617b      	str	r3, [r7, #20]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	18d1      	adds	r1, r2, r3
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf0:	f7ff ff04 	bl	80079fc <prvInsertTimerInActiveList>
					break;
 8007bf4:	e017      	b.n	8007c26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c06:	f000 fbe7 	bl	80083d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c0a:	e00c      	b.n	8007c26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c1e:	e002      	b.n	8007c26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c20:	bf00      	nop
 8007c22:	e000      	b.n	8007c26 <prvProcessReceivedCommands+0x1a6>
					break;
 8007c24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c26:	4b08      	ldr	r3, [pc, #32]	@ (8007c48 <prvProcessReceivedCommands+0x1c8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	1d39      	adds	r1, r7, #4
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe f944 	bl	8005ebc <xQueueReceive>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f47f af26 	bne.w	8007a88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3730      	adds	r7, #48	@ 0x30
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200016e8 	.word	0x200016e8

08007c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c52:	e049      	b.n	8007ce8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c54:	4b2e      	ldr	r3, [pc, #184]	@ (8007d10 <prvSwitchTimerLists+0xc4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d10 <prvSwitchTimerLists+0xc4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fd fd5d 	bl	800572c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d02f      	beq.n	8007ce8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d90e      	bls.n	8007cb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d10 <prvSwitchTimerLists+0xc4>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7fd fd02 	bl	80056ba <vListInsert>
 8007cb6:	e017      	b.n	8007ce8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff fd58 	bl	8007778 <xTimerGenericCommand>
 8007cc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10b      	bne.n	8007ce8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	603b      	str	r3, [r7, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ce8:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <prvSwitchTimerLists+0xc4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1b0      	bne.n	8007c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	@ (8007d10 <prvSwitchTimerLists+0xc4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cf8:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <prvSwitchTimerLists+0xc8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a04      	ldr	r2, [pc, #16]	@ (8007d10 <prvSwitchTimerLists+0xc4>)
 8007cfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d00:	4a04      	ldr	r2, [pc, #16]	@ (8007d14 <prvSwitchTimerLists+0xc8>)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6013      	str	r3, [r2, #0]
}
 8007d06:	bf00      	nop
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	200016e0 	.word	0x200016e0
 8007d14:	200016e4 	.word	0x200016e4

08007d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d1e:	f000 f96b 	bl	8007ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d22:	4b15      	ldr	r3, [pc, #84]	@ (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d120      	bne.n	8007d6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d2a:	4814      	ldr	r0, [pc, #80]	@ (8007d7c <prvCheckForValidListAndQueue+0x64>)
 8007d2c:	f7fd fc74 	bl	8005618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d30:	4813      	ldr	r0, [pc, #76]	@ (8007d80 <prvCheckForValidListAndQueue+0x68>)
 8007d32:	f7fd fc71 	bl	8005618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d36:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <prvCheckForValidListAndQueue+0x6c>)
 8007d38:	4a10      	ldr	r2, [pc, #64]	@ (8007d7c <prvCheckForValidListAndQueue+0x64>)
 8007d3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d3c:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <prvCheckForValidListAndQueue+0x70>)
 8007d3e:	4a10      	ldr	r2, [pc, #64]	@ (8007d80 <prvCheckForValidListAndQueue+0x68>)
 8007d40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d42:	2300      	movs	r3, #0
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4b11      	ldr	r3, [pc, #68]	@ (8007d8c <prvCheckForValidListAndQueue+0x74>)
 8007d48:	4a11      	ldr	r2, [pc, #68]	@ (8007d90 <prvCheckForValidListAndQueue+0x78>)
 8007d4a:	2110      	movs	r1, #16
 8007d4c:	200a      	movs	r0, #10
 8007d4e:	f7fd fd81 	bl	8005854 <xQueueGenericCreateStatic>
 8007d52:	4603      	mov	r3, r0
 8007d54:	4a08      	ldr	r2, [pc, #32]	@ (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d58:	4b07      	ldr	r3, [pc, #28]	@ (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d60:	4b05      	ldr	r3, [pc, #20]	@ (8007d78 <prvCheckForValidListAndQueue+0x60>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	490b      	ldr	r1, [pc, #44]	@ (8007d94 <prvCheckForValidListAndQueue+0x7c>)
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fbc2 	bl	80064f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d6c:	f000 f976 	bl	800805c <vPortExitCritical>
}
 8007d70:	bf00      	nop
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	200016e8 	.word	0x200016e8
 8007d7c:	200016b8 	.word	0x200016b8
 8007d80:	200016cc 	.word	0x200016cc
 8007d84:	200016e0 	.word	0x200016e0
 8007d88:	200016e4 	.word	0x200016e4
 8007d8c:	20001794 	.word	0x20001794
 8007d90:	200016f4 	.word	0x200016f4
 8007d94:	0800b9c4 	.word	0x0800b9c4

08007d98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b04      	subs	r3, #4
 8007da8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3b04      	subs	r3, #4
 8007db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f023 0201 	bic.w	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <pxPortInitialiseStack+0x64>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b14      	subs	r3, #20
 8007dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f06f 0202 	mvn.w	r2, #2
 8007de6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b20      	subs	r3, #32
 8007dec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	08007e01 	.word	0x08007e01

08007e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e0a:	4b13      	ldr	r3, [pc, #76]	@ (8007e58 <prvTaskExitError+0x58>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d00b      	beq.n	8007e2c <prvTaskExitError+0x2c>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	e7fd      	b.n	8007e28 <prvTaskExitError+0x28>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60bb      	str	r3, [r7, #8]
}
 8007e3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e40:	bf00      	nop
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0fc      	beq.n	8007e42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20000014 	.word	0x20000014
 8007e5c:	00000000 	.word	0x00000000

08007e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e60:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <pxCurrentTCBConst2>)
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	f380 8809 	msr	PSP, r0
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8811 	msr	BASEPRI, r0
 8007e7a:	4770      	bx	lr
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst2>:
 8007e80:	200011b8 	.word	0x200011b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e88:	4808      	ldr	r0, [pc, #32]	@ (8007eac <prvPortStartFirstTask+0x24>)
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f380 8808 	msr	MSP, r0
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8814 	msr	CONTROL, r0
 8007e9a:	b662      	cpsie	i
 8007e9c:	b661      	cpsie	f
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	df00      	svc	0
 8007ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eaa:	bf00      	nop
 8007eac:	e000ed08 	.word	0xe000ed08

08007eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007eb6:	4b47      	ldr	r3, [pc, #284]	@ (8007fd4 <xPortStartScheduler+0x124>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a47      	ldr	r2, [pc, #284]	@ (8007fd8 <xPortStartScheduler+0x128>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d10b      	bne.n	8007ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fd4 <xPortStartScheduler+0x124>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a3f      	ldr	r2, [pc, #252]	@ (8007fdc <xPortStartScheduler+0x12c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d10b      	bne.n	8007efa <xPortStartScheduler+0x4a>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	613b      	str	r3, [r7, #16]
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007efa:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <xPortStartScheduler+0x130>)
 8007efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	22ff      	movs	r2, #255	@ 0xff
 8007f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	4b31      	ldr	r3, [pc, #196]	@ (8007fe4 <xPortStartScheduler+0x134>)
 8007f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f22:	4b31      	ldr	r3, [pc, #196]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f24:	2207      	movs	r2, #7
 8007f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f28:	e009      	b.n	8007f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	4a2d      	ldr	r2, [pc, #180]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d0ef      	beq.n	8007f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f4a:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f1c3 0307 	rsb	r3, r3, #7
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d00b      	beq.n	8007f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60bb      	str	r3, [r7, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	e7fd      	b.n	8007f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f78:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f80:	4a19      	ldr	r2, [pc, #100]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f8c:	4b17      	ldr	r3, [pc, #92]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a16      	ldr	r2, [pc, #88]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f98:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a13      	ldr	r2, [pc, #76]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fa4:	f000 f8da 	bl	800815c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fa8:	4b11      	ldr	r3, [pc, #68]	@ (8007ff0 <xPortStartScheduler+0x140>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fae:	f000 f8f9 	bl	80081a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <xPortStartScheduler+0x144>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ff4 <xPortStartScheduler+0x144>)
 8007fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fbe:	f7ff ff63 	bl	8007e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fc2:	f7fe ff2d 	bl	8006e20 <vTaskSwitchContext>
	prvTaskExitError();
 8007fc6:	f7ff ff1b 	bl	8007e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed00 	.word	0xe000ed00
 8007fd8:	410fc271 	.word	0x410fc271
 8007fdc:	410fc270 	.word	0x410fc270
 8007fe0:	e000e400 	.word	0xe000e400
 8007fe4:	200017e4 	.word	0x200017e4
 8007fe8:	200017e8 	.word	0x200017e8
 8007fec:	e000ed20 	.word	0xe000ed20
 8007ff0:	20000014 	.word	0x20000014
 8007ff4:	e000ef34 	.word	0xe000ef34

08007ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
}
 8008010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008012:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <vPortEnterCritical+0x5c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a0e      	ldr	r2, [pc, #56]	@ (8008054 <vPortEnterCritical+0x5c>)
 800801a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800801c:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <vPortEnterCritical+0x5c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d110      	bne.n	8008046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008024:	4b0c      	ldr	r3, [pc, #48]	@ (8008058 <vPortEnterCritical+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <vPortEnterCritical+0x4e>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	603b      	str	r3, [r7, #0]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <vPortEnterCritical+0x4a>
	}
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000014 	.word	0x20000014
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008062:	4b12      	ldr	r3, [pc, #72]	@ (80080ac <vPortExitCritical+0x50>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <vPortExitCritical+0x26>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	607b      	str	r3, [r7, #4]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008082:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3b01      	subs	r3, #1
 8008088:	4a08      	ldr	r2, [pc, #32]	@ (80080ac <vPortExitCritical+0x50>)
 800808a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800808c:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <vPortExitCritical+0x50>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <vPortExitCritical+0x44>
 8008094:	2300      	movs	r3, #0
 8008096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000014 	.word	0x20000014

080080b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080b0:	f3ef 8009 	mrs	r0, PSP
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <pxCurrentTCBConst>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	f01e 0f10 	tst.w	lr, #16
 80080c0:	bf08      	it	eq
 80080c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	6010      	str	r0, [r2, #0]
 80080cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080d4:	f380 8811 	msr	BASEPRI, r0
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f7fe fe9e 	bl	8006e20 <vTaskSwitchContext>
 80080e4:	f04f 0000 	mov.w	r0, #0
 80080e8:	f380 8811 	msr	BASEPRI, r0
 80080ec:	bc09      	pop	{r0, r3}
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	6808      	ldr	r0, [r1, #0]
 80080f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f6:	f01e 0f10 	tst.w	lr, #16
 80080fa:	bf08      	it	eq
 80080fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008100:	f380 8809 	msr	PSP, r0
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst>:
 8008110:	200011b8 	.word	0x200011b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	607b      	str	r3, [r7, #4]
}
 8008130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008132:	f7fe fdbb 	bl	8006cac <xTaskIncrementTick>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800813c:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <xPortSysTickHandler+0x40>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008160:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008166:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <vPortSetupTimerInterrupt+0x38>)
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <vPortSetupTimerInterrupt+0x3c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <vPortSetupTimerInterrupt+0x40>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	099b      	lsrs	r3, r3, #6
 8008178:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <vPortSetupTimerInterrupt+0x44>)
 800817a:	3b01      	subs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800817e:	4b04      	ldr	r3, [pc, #16]	@ (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e010 	.word	0xe000e010
 8008194:	e000e018 	.word	0xe000e018
 8008198:	20000008 	.word	0x20000008
 800819c:	10624dd3 	.word	0x10624dd3
 80081a0:	e000e014 	.word	0xe000e014

080081a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081b4 <vPortEnableVFP+0x10>
 80081a8:	6801      	ldr	r1, [r0, #0]
 80081aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ae:	6001      	str	r1, [r0, #0]
 80081b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e000ed88 	.word	0xe000ed88

080081b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d915      	bls.n	80081f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ca:	4a18      	ldr	r2, [pc, #96]	@ (800822c <vPortValidateInterruptPriority+0x74>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081d4:	4b16      	ldr	r3, [pc, #88]	@ (8008230 <vPortValidateInterruptPriority+0x78>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20b      	bcs.n	80081f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008234 <vPortValidateInterruptPriority+0x7c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <vPortValidateInterruptPriority+0x80>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d90b      	bls.n	800821e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	603b      	str	r3, [r7, #0]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vPortValidateInterruptPriority+0x62>
	}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	e000e3f0 	.word	0xe000e3f0
 8008230:	200017e4 	.word	0x200017e4
 8008234:	e000ed0c 	.word	0xe000ed0c
 8008238:	200017e8 	.word	0x200017e8

0800823c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008248:	f7fe fc74 	bl	8006b34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800824c:	4b5c      	ldr	r3, [pc, #368]	@ (80083c0 <pvPortMalloc+0x184>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008254:	f000 f924 	bl	80084a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008258:	4b5a      	ldr	r3, [pc, #360]	@ (80083c4 <pvPortMalloc+0x188>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4013      	ands	r3, r2
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 8095 	bne.w	8008390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01e      	beq.n	80082aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800826c:	2208      	movs	r2, #8
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d015      	beq.n	80082aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <pvPortMalloc+0x6e>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	617b      	str	r3, [r7, #20]
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	e7fd      	b.n	80082a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06f      	beq.n	8008390 <pvPortMalloc+0x154>
 80082b0:	4b45      	ldr	r3, [pc, #276]	@ (80083c8 <pvPortMalloc+0x18c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d86a      	bhi.n	8008390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ba:	4b44      	ldr	r3, [pc, #272]	@ (80083cc <pvPortMalloc+0x190>)
 80082bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082be:	4b43      	ldr	r3, [pc, #268]	@ (80083cc <pvPortMalloc+0x190>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082c4:	e004      	b.n	80082d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d903      	bls.n	80082e2 <pvPortMalloc+0xa6>
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f1      	bne.n	80082c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082e2:	4b37      	ldr	r3, [pc, #220]	@ (80083c0 <pvPortMalloc+0x184>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d051      	beq.n	8008390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2208      	movs	r2, #8
 80082f2:	4413      	add	r3, r2
 80082f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	2308      	movs	r3, #8
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	429a      	cmp	r2, r3
 800830c:	d920      	bls.n	8008350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800830e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4413      	add	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <pvPortMalloc+0xfc>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	613b      	str	r3, [r7, #16]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800834a:	69b8      	ldr	r0, [r7, #24]
 800834c:	f000 f90a 	bl	8008564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008350:	4b1d      	ldr	r3, [pc, #116]	@ (80083c8 <pvPortMalloc+0x18c>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <pvPortMalloc+0x18c>)
 800835c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800835e:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <pvPortMalloc+0x18c>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <pvPortMalloc+0x194>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d203      	bcs.n	8008372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800836a:	4b17      	ldr	r3, [pc, #92]	@ (80083c8 <pvPortMalloc+0x18c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a18      	ldr	r2, [pc, #96]	@ (80083d0 <pvPortMalloc+0x194>)
 8008370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <pvPortMalloc+0x188>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	431a      	orrs	r2, r3
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <pvPortMalloc+0x198>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a11      	ldr	r2, [pc, #68]	@ (80083d4 <pvPortMalloc+0x198>)
 800838e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008390:	f7fe fbde 	bl	8006b50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <pvPortMalloc+0x17a>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <pvPortMalloc+0x176>
	return pvReturn;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	@ 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	200053f4 	.word	0x200053f4
 80083c4:	20005408 	.word	0x20005408
 80083c8:	200053f8 	.word	0x200053f8
 80083cc:	200053ec 	.word	0x200053ec
 80083d0:	200053fc 	.word	0x200053fc
 80083d4:	20005400 	.word	0x20005400

080083d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d04f      	beq.n	800848a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083ea:	2308      	movs	r3, #8
 80083ec:	425b      	negs	r3, r3
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4413      	add	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	4b25      	ldr	r3, [pc, #148]	@ (8008494 <vPortFree+0xbc>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4013      	ands	r3, r2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <vPortFree+0x46>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <vPortFree+0x66>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60bb      	str	r3, [r7, #8]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b14      	ldr	r3, [pc, #80]	@ (8008494 <vPortFree+0xbc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11a      	bne.n	800848a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <vPortFree+0xbc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008464:	f7fe fb66 	bl	8006b34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <vPortFree+0xc0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4413      	add	r3, r2
 8008472:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <vPortFree+0xc0>)
 8008474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f000 f874 	bl	8008564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <vPortFree+0xc4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	4a06      	ldr	r2, [pc, #24]	@ (800849c <vPortFree+0xc4>)
 8008484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008486:	f7fe fb63 	bl	8006b50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20005408 	.word	0x20005408
 8008498:	200053f8 	.word	0x200053f8
 800849c:	20005404 	.word	0x20005404

080084a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80084aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084ac:	4b27      	ldr	r3, [pc, #156]	@ (800854c <prvHeapInit+0xac>)
 80084ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00c      	beq.n	80084d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3307      	adds	r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0307 	bic.w	r3, r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	4a1f      	ldr	r2, [pc, #124]	@ (800854c <prvHeapInit+0xac>)
 80084d0:	4413      	add	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008550 <prvHeapInit+0xb0>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084de:	4b1c      	ldr	r3, [pc, #112]	@ (8008550 <prvHeapInit+0xb0>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4413      	add	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084ec:	2208      	movs	r2, #8
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4a15      	ldr	r2, [pc, #84]	@ (8008554 <prvHeapInit+0xb4>)
 8008500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <prvHeapInit+0xb4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <prvHeapInit+0xb4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008520:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <prvHeapInit+0xb4>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4a0a      	ldr	r2, [pc, #40]	@ (8008558 <prvHeapInit+0xb8>)
 800852e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a09      	ldr	r2, [pc, #36]	@ (800855c <prvHeapInit+0xbc>)
 8008536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008538:	4b09      	ldr	r3, [pc, #36]	@ (8008560 <prvHeapInit+0xc0>)
 800853a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800853e:	601a      	str	r2, [r3, #0]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	200017ec 	.word	0x200017ec
 8008550:	200053ec 	.word	0x200053ec
 8008554:	200053f4 	.word	0x200053f4
 8008558:	200053fc 	.word	0x200053fc
 800855c:	200053f8 	.word	0x200053f8
 8008560:	20005408 	.word	0x20005408

08008564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800856c:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <prvInsertBlockIntoFreeList+0xac>)
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e002      	b.n	8008578 <prvInsertBlockIntoFreeList+0x14>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d8f7      	bhi.n	8008572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d108      	bne.n	80085a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	441a      	add	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d118      	bne.n	80085ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b15      	ldr	r3, [pc, #84]	@ (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d00d      	beq.n	80085e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e008      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e003      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d002      	beq.n	8008602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	200053ec 	.word	0x200053ec
 8008614:	200053f4 	.word	0x200053f4

08008618 <std>:
 8008618:	2300      	movs	r3, #0
 800861a:	b510      	push	{r4, lr}
 800861c:	4604      	mov	r4, r0
 800861e:	e9c0 3300 	strd	r3, r3, [r0]
 8008622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008626:	6083      	str	r3, [r0, #8]
 8008628:	8181      	strh	r1, [r0, #12]
 800862a:	6643      	str	r3, [r0, #100]	@ 0x64
 800862c:	81c2      	strh	r2, [r0, #14]
 800862e:	6183      	str	r3, [r0, #24]
 8008630:	4619      	mov	r1, r3
 8008632:	2208      	movs	r2, #8
 8008634:	305c      	adds	r0, #92	@ 0x5c
 8008636:	f000 fa6b 	bl	8008b10 <memset>
 800863a:	4b0d      	ldr	r3, [pc, #52]	@ (8008670 <std+0x58>)
 800863c:	6263      	str	r3, [r4, #36]	@ 0x24
 800863e:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <std+0x5c>)
 8008640:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008642:	4b0d      	ldr	r3, [pc, #52]	@ (8008678 <std+0x60>)
 8008644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008646:	4b0d      	ldr	r3, [pc, #52]	@ (800867c <std+0x64>)
 8008648:	6323      	str	r3, [r4, #48]	@ 0x30
 800864a:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <std+0x68>)
 800864c:	6224      	str	r4, [r4, #32]
 800864e:	429c      	cmp	r4, r3
 8008650:	d006      	beq.n	8008660 <std+0x48>
 8008652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008656:	4294      	cmp	r4, r2
 8008658:	d002      	beq.n	8008660 <std+0x48>
 800865a:	33d0      	adds	r3, #208	@ 0xd0
 800865c:	429c      	cmp	r4, r3
 800865e:	d105      	bne.n	800866c <std+0x54>
 8008660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008668:	f001 b9f8 	b.w	8009a5c <__retarget_lock_init_recursive>
 800866c:	bd10      	pop	{r4, pc}
 800866e:	bf00      	nop
 8008670:	08008929 	.word	0x08008929
 8008674:	0800894f 	.word	0x0800894f
 8008678:	08008987 	.word	0x08008987
 800867c:	080089ab 	.word	0x080089ab
 8008680:	2000540c 	.word	0x2000540c

08008684 <stdio_exit_handler>:
 8008684:	4a02      	ldr	r2, [pc, #8]	@ (8008690 <stdio_exit_handler+0xc>)
 8008686:	4903      	ldr	r1, [pc, #12]	@ (8008694 <stdio_exit_handler+0x10>)
 8008688:	4803      	ldr	r0, [pc, #12]	@ (8008698 <stdio_exit_handler+0x14>)
 800868a:	f000 b869 	b.w	8008760 <_fwalk_sglue>
 800868e:	bf00      	nop
 8008690:	20000018 	.word	0x20000018
 8008694:	0800adfd 	.word	0x0800adfd
 8008698:	20000030 	.word	0x20000030

0800869c <cleanup_stdio>:
 800869c:	6841      	ldr	r1, [r0, #4]
 800869e:	4b0c      	ldr	r3, [pc, #48]	@ (80086d0 <cleanup_stdio+0x34>)
 80086a0:	4299      	cmp	r1, r3
 80086a2:	b510      	push	{r4, lr}
 80086a4:	4604      	mov	r4, r0
 80086a6:	d001      	beq.n	80086ac <cleanup_stdio+0x10>
 80086a8:	f002 fba8 	bl	800adfc <_fflush_r>
 80086ac:	68a1      	ldr	r1, [r4, #8]
 80086ae:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <cleanup_stdio+0x38>)
 80086b0:	4299      	cmp	r1, r3
 80086b2:	d002      	beq.n	80086ba <cleanup_stdio+0x1e>
 80086b4:	4620      	mov	r0, r4
 80086b6:	f002 fba1 	bl	800adfc <_fflush_r>
 80086ba:	68e1      	ldr	r1, [r4, #12]
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <cleanup_stdio+0x3c>)
 80086be:	4299      	cmp	r1, r3
 80086c0:	d004      	beq.n	80086cc <cleanup_stdio+0x30>
 80086c2:	4620      	mov	r0, r4
 80086c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c8:	f002 bb98 	b.w	800adfc <_fflush_r>
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop
 80086d0:	2000540c 	.word	0x2000540c
 80086d4:	20005474 	.word	0x20005474
 80086d8:	200054dc 	.word	0x200054dc

080086dc <global_stdio_init.part.0>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	4b0b      	ldr	r3, [pc, #44]	@ (800870c <global_stdio_init.part.0+0x30>)
 80086e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008710 <global_stdio_init.part.0+0x34>)
 80086e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008714 <global_stdio_init.part.0+0x38>)
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	4620      	mov	r0, r4
 80086e8:	2200      	movs	r2, #0
 80086ea:	2104      	movs	r1, #4
 80086ec:	f7ff ff94 	bl	8008618 <std>
 80086f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086f4:	2201      	movs	r2, #1
 80086f6:	2109      	movs	r1, #9
 80086f8:	f7ff ff8e 	bl	8008618 <std>
 80086fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008700:	2202      	movs	r2, #2
 8008702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008706:	2112      	movs	r1, #18
 8008708:	f7ff bf86 	b.w	8008618 <std>
 800870c:	20005544 	.word	0x20005544
 8008710:	2000540c 	.word	0x2000540c
 8008714:	08008685 	.word	0x08008685

08008718 <__sfp_lock_acquire>:
 8008718:	4801      	ldr	r0, [pc, #4]	@ (8008720 <__sfp_lock_acquire+0x8>)
 800871a:	f001 b9a1 	b.w	8009a60 <__retarget_lock_acquire_recursive>
 800871e:	bf00      	nop
 8008720:	20005573 	.word	0x20005573

08008724 <__sfp_lock_release>:
 8008724:	4801      	ldr	r0, [pc, #4]	@ (800872c <__sfp_lock_release+0x8>)
 8008726:	f001 b99d 	b.w	8009a64 <__retarget_lock_release_recursive>
 800872a:	bf00      	nop
 800872c:	20005573 	.word	0x20005573

08008730 <__sinit>:
 8008730:	b510      	push	{r4, lr}
 8008732:	4604      	mov	r4, r0
 8008734:	f7ff fff0 	bl	8008718 <__sfp_lock_acquire>
 8008738:	6a23      	ldr	r3, [r4, #32]
 800873a:	b11b      	cbz	r3, 8008744 <__sinit+0x14>
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008740:	f7ff bff0 	b.w	8008724 <__sfp_lock_release>
 8008744:	4b04      	ldr	r3, [pc, #16]	@ (8008758 <__sinit+0x28>)
 8008746:	6223      	str	r3, [r4, #32]
 8008748:	4b04      	ldr	r3, [pc, #16]	@ (800875c <__sinit+0x2c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f5      	bne.n	800873c <__sinit+0xc>
 8008750:	f7ff ffc4 	bl	80086dc <global_stdio_init.part.0>
 8008754:	e7f2      	b.n	800873c <__sinit+0xc>
 8008756:	bf00      	nop
 8008758:	0800869d 	.word	0x0800869d
 800875c:	20005544 	.word	0x20005544

08008760 <_fwalk_sglue>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	4607      	mov	r7, r0
 8008766:	4688      	mov	r8, r1
 8008768:	4614      	mov	r4, r2
 800876a:	2600      	movs	r6, #0
 800876c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008770:	f1b9 0901 	subs.w	r9, r9, #1
 8008774:	d505      	bpl.n	8008782 <_fwalk_sglue+0x22>
 8008776:	6824      	ldr	r4, [r4, #0]
 8008778:	2c00      	cmp	r4, #0
 800877a:	d1f7      	bne.n	800876c <_fwalk_sglue+0xc>
 800877c:	4630      	mov	r0, r6
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d907      	bls.n	8008798 <_fwalk_sglue+0x38>
 8008788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800878c:	3301      	adds	r3, #1
 800878e:	d003      	beq.n	8008798 <_fwalk_sglue+0x38>
 8008790:	4629      	mov	r1, r5
 8008792:	4638      	mov	r0, r7
 8008794:	47c0      	blx	r8
 8008796:	4306      	orrs	r6, r0
 8008798:	3568      	adds	r5, #104	@ 0x68
 800879a:	e7e9      	b.n	8008770 <_fwalk_sglue+0x10>

0800879c <iprintf>:
 800879c:	b40f      	push	{r0, r1, r2, r3}
 800879e:	b507      	push	{r0, r1, r2, lr}
 80087a0:	4906      	ldr	r1, [pc, #24]	@ (80087bc <iprintf+0x20>)
 80087a2:	ab04      	add	r3, sp, #16
 80087a4:	6808      	ldr	r0, [r1, #0]
 80087a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087aa:	6881      	ldr	r1, [r0, #8]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	f001 feaf 	bl	800a510 <_vfiprintf_r>
 80087b2:	b003      	add	sp, #12
 80087b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b8:	b004      	add	sp, #16
 80087ba:	4770      	bx	lr
 80087bc:	2000002c 	.word	0x2000002c

080087c0 <putchar>:
 80087c0:	4b02      	ldr	r3, [pc, #8]	@ (80087cc <putchar+0xc>)
 80087c2:	4601      	mov	r1, r0
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	6882      	ldr	r2, [r0, #8]
 80087c8:	f002 bbb4 	b.w	800af34 <_putc_r>
 80087cc:	2000002c 	.word	0x2000002c

080087d0 <_puts_r>:
 80087d0:	6a03      	ldr	r3, [r0, #32]
 80087d2:	b570      	push	{r4, r5, r6, lr}
 80087d4:	6884      	ldr	r4, [r0, #8]
 80087d6:	4605      	mov	r5, r0
 80087d8:	460e      	mov	r6, r1
 80087da:	b90b      	cbnz	r3, 80087e0 <_puts_r+0x10>
 80087dc:	f7ff ffa8 	bl	8008730 <__sinit>
 80087e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087e2:	07db      	lsls	r3, r3, #31
 80087e4:	d405      	bmi.n	80087f2 <_puts_r+0x22>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	0598      	lsls	r0, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <_puts_r+0x22>
 80087ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ee:	f001 f937 	bl	8009a60 <__retarget_lock_acquire_recursive>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	0719      	lsls	r1, r3, #28
 80087f6:	d502      	bpl.n	80087fe <_puts_r+0x2e>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d135      	bne.n	800886a <_puts_r+0x9a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f000 f915 	bl	8008a30 <__swsetup_r>
 8008806:	b380      	cbz	r0, 800886a <_puts_r+0x9a>
 8008808:	f04f 35ff 	mov.w	r5, #4294967295
 800880c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800880e:	07da      	lsls	r2, r3, #31
 8008810:	d405      	bmi.n	800881e <_puts_r+0x4e>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	059b      	lsls	r3, r3, #22
 8008816:	d402      	bmi.n	800881e <_puts_r+0x4e>
 8008818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881a:	f001 f923 	bl	8009a64 <__retarget_lock_release_recursive>
 800881e:	4628      	mov	r0, r5
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	2b00      	cmp	r3, #0
 8008824:	da04      	bge.n	8008830 <_puts_r+0x60>
 8008826:	69a2      	ldr	r2, [r4, #24]
 8008828:	429a      	cmp	r2, r3
 800882a:	dc17      	bgt.n	800885c <_puts_r+0x8c>
 800882c:	290a      	cmp	r1, #10
 800882e:	d015      	beq.n	800885c <_puts_r+0x8c>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	6022      	str	r2, [r4, #0]
 8008836:	7019      	strb	r1, [r3, #0]
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800883e:	3b01      	subs	r3, #1
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	2900      	cmp	r1, #0
 8008844:	d1ed      	bne.n	8008822 <_puts_r+0x52>
 8008846:	2b00      	cmp	r3, #0
 8008848:	da11      	bge.n	800886e <_puts_r+0x9e>
 800884a:	4622      	mov	r2, r4
 800884c:	210a      	movs	r1, #10
 800884e:	4628      	mov	r0, r5
 8008850:	f000 f8af 	bl	80089b2 <__swbuf_r>
 8008854:	3001      	adds	r0, #1
 8008856:	d0d7      	beq.n	8008808 <_puts_r+0x38>
 8008858:	250a      	movs	r5, #10
 800885a:	e7d7      	b.n	800880c <_puts_r+0x3c>
 800885c:	4622      	mov	r2, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f8a7 	bl	80089b2 <__swbuf_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d1e7      	bne.n	8008838 <_puts_r+0x68>
 8008868:	e7ce      	b.n	8008808 <_puts_r+0x38>
 800886a:	3e01      	subs	r6, #1
 800886c:	e7e4      	b.n	8008838 <_puts_r+0x68>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	220a      	movs	r2, #10
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e7ee      	b.n	8008858 <_puts_r+0x88>
	...

0800887c <puts>:
 800887c:	4b02      	ldr	r3, [pc, #8]	@ (8008888 <puts+0xc>)
 800887e:	4601      	mov	r1, r0
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f7ff bfa5 	b.w	80087d0 <_puts_r>
 8008886:	bf00      	nop
 8008888:	2000002c 	.word	0x2000002c

0800888c <siprintf>:
 800888c:	b40e      	push	{r1, r2, r3}
 800888e:	b510      	push	{r4, lr}
 8008890:	b09d      	sub	sp, #116	@ 0x74
 8008892:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008894:	9002      	str	r0, [sp, #8]
 8008896:	9006      	str	r0, [sp, #24]
 8008898:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800889c:	480a      	ldr	r0, [pc, #40]	@ (80088c8 <siprintf+0x3c>)
 800889e:	9107      	str	r1, [sp, #28]
 80088a0:	9104      	str	r1, [sp, #16]
 80088a2:	490a      	ldr	r1, [pc, #40]	@ (80088cc <siprintf+0x40>)
 80088a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a8:	9105      	str	r1, [sp, #20]
 80088aa:	2400      	movs	r4, #0
 80088ac:	a902      	add	r1, sp, #8
 80088ae:	6800      	ldr	r0, [r0, #0]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80088b4:	f001 fb36 	bl	8009f24 <_svfiprintf_r>
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	701c      	strb	r4, [r3, #0]
 80088bc:	b01d      	add	sp, #116	@ 0x74
 80088be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c2:	b003      	add	sp, #12
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	2000002c 	.word	0x2000002c
 80088cc:	ffff0208 	.word	0xffff0208

080088d0 <siscanf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b570      	push	{r4, r5, r6, lr}
 80088d4:	b09d      	sub	sp, #116	@ 0x74
 80088d6:	ac21      	add	r4, sp, #132	@ 0x84
 80088d8:	2500      	movs	r5, #0
 80088da:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80088de:	f854 6b04 	ldr.w	r6, [r4], #4
 80088e2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80088e6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80088e8:	9002      	str	r0, [sp, #8]
 80088ea:	9006      	str	r0, [sp, #24]
 80088ec:	f7f7 fc82 	bl	80001f4 <strlen>
 80088f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <siscanf+0x50>)
 80088f2:	9003      	str	r0, [sp, #12]
 80088f4:	9007      	str	r0, [sp, #28]
 80088f6:	480b      	ldr	r0, [pc, #44]	@ (8008924 <siscanf+0x54>)
 80088f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80088fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008902:	4632      	mov	r2, r6
 8008904:	4623      	mov	r3, r4
 8008906:	a902      	add	r1, sp, #8
 8008908:	6800      	ldr	r0, [r0, #0]
 800890a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800890c:	9514      	str	r5, [sp, #80]	@ 0x50
 800890e:	9401      	str	r4, [sp, #4]
 8008910:	f001 fc5e 	bl	800a1d0 <__ssvfiscanf_r>
 8008914:	b01d      	add	sp, #116	@ 0x74
 8008916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800891a:	b003      	add	sp, #12
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	0800894b 	.word	0x0800894b
 8008924:	2000002c 	.word	0x2000002c

08008928 <__sread>:
 8008928:	b510      	push	{r4, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	f001 f846 	bl	80099c0 <_read_r>
 8008934:	2800      	cmp	r0, #0
 8008936:	bfab      	itete	ge
 8008938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800893a:	89a3      	ldrhlt	r3, [r4, #12]
 800893c:	181b      	addge	r3, r3, r0
 800893e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008942:	bfac      	ite	ge
 8008944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008946:	81a3      	strhlt	r3, [r4, #12]
 8008948:	bd10      	pop	{r4, pc}

0800894a <__seofread>:
 800894a:	2000      	movs	r0, #0
 800894c:	4770      	bx	lr

0800894e <__swrite>:
 800894e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008952:	461f      	mov	r7, r3
 8008954:	898b      	ldrh	r3, [r1, #12]
 8008956:	05db      	lsls	r3, r3, #23
 8008958:	4605      	mov	r5, r0
 800895a:	460c      	mov	r4, r1
 800895c:	4616      	mov	r6, r2
 800895e:	d505      	bpl.n	800896c <__swrite+0x1e>
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	2302      	movs	r3, #2
 8008966:	2200      	movs	r2, #0
 8008968:	f001 f818 	bl	800999c <_lseek_r>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	4628      	mov	r0, r5
 800897e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	f001 b82f 	b.w	80099e4 <_write_r>

08008986 <__sseek>:
 8008986:	b510      	push	{r4, lr}
 8008988:	460c      	mov	r4, r1
 800898a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898e:	f001 f805 	bl	800999c <_lseek_r>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	bf15      	itete	ne
 8008998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800899a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800899e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089a2:	81a3      	strheq	r3, [r4, #12]
 80089a4:	bf18      	it	ne
 80089a6:	81a3      	strhne	r3, [r4, #12]
 80089a8:	bd10      	pop	{r4, pc}

080089aa <__sclose>:
 80089aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ae:	f000 bfe5 	b.w	800997c <_close_r>

080089b2 <__swbuf_r>:
 80089b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b4:	460e      	mov	r6, r1
 80089b6:	4614      	mov	r4, r2
 80089b8:	4605      	mov	r5, r0
 80089ba:	b118      	cbz	r0, 80089c4 <__swbuf_r+0x12>
 80089bc:	6a03      	ldr	r3, [r0, #32]
 80089be:	b90b      	cbnz	r3, 80089c4 <__swbuf_r+0x12>
 80089c0:	f7ff feb6 	bl	8008730 <__sinit>
 80089c4:	69a3      	ldr	r3, [r4, #24]
 80089c6:	60a3      	str	r3, [r4, #8]
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	071a      	lsls	r2, r3, #28
 80089cc:	d501      	bpl.n	80089d2 <__swbuf_r+0x20>
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	b943      	cbnz	r3, 80089e4 <__swbuf_r+0x32>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 f82b 	bl	8008a30 <__swsetup_r>
 80089da:	b118      	cbz	r0, 80089e4 <__swbuf_r+0x32>
 80089dc:	f04f 37ff 	mov.w	r7, #4294967295
 80089e0:	4638      	mov	r0, r7
 80089e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	6922      	ldr	r2, [r4, #16]
 80089e8:	1a98      	subs	r0, r3, r2
 80089ea:	6963      	ldr	r3, [r4, #20]
 80089ec:	b2f6      	uxtb	r6, r6
 80089ee:	4283      	cmp	r3, r0
 80089f0:	4637      	mov	r7, r6
 80089f2:	dc05      	bgt.n	8008a00 <__swbuf_r+0x4e>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f002 fa00 	bl	800adfc <_fflush_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d1ed      	bne.n	80089dc <__swbuf_r+0x2a>
 8008a00:	68a3      	ldr	r3, [r4, #8]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	60a3      	str	r3, [r4, #8]
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	6022      	str	r2, [r4, #0]
 8008a0c:	701e      	strb	r6, [r3, #0]
 8008a0e:	6962      	ldr	r2, [r4, #20]
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d004      	beq.n	8008a20 <__swbuf_r+0x6e>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	07db      	lsls	r3, r3, #31
 8008a1a:	d5e1      	bpl.n	80089e0 <__swbuf_r+0x2e>
 8008a1c:	2e0a      	cmp	r6, #10
 8008a1e:	d1df      	bne.n	80089e0 <__swbuf_r+0x2e>
 8008a20:	4621      	mov	r1, r4
 8008a22:	4628      	mov	r0, r5
 8008a24:	f002 f9ea 	bl	800adfc <_fflush_r>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d0d9      	beq.n	80089e0 <__swbuf_r+0x2e>
 8008a2c:	e7d6      	b.n	80089dc <__swbuf_r+0x2a>
	...

08008a30 <__swsetup_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4b29      	ldr	r3, [pc, #164]	@ (8008ad8 <__swsetup_r+0xa8>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	460c      	mov	r4, r1
 8008a3a:	b118      	cbz	r0, 8008a44 <__swsetup_r+0x14>
 8008a3c:	6a03      	ldr	r3, [r0, #32]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <__swsetup_r+0x14>
 8008a40:	f7ff fe76 	bl	8008730 <__sinit>
 8008a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a48:	0719      	lsls	r1, r3, #28
 8008a4a:	d422      	bmi.n	8008a92 <__swsetup_r+0x62>
 8008a4c:	06da      	lsls	r2, r3, #27
 8008a4e:	d407      	bmi.n	8008a60 <__swsetup_r+0x30>
 8008a50:	2209      	movs	r2, #9
 8008a52:	602a      	str	r2, [r5, #0]
 8008a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5e:	e033      	b.n	8008ac8 <__swsetup_r+0x98>
 8008a60:	0758      	lsls	r0, r3, #29
 8008a62:	d512      	bpl.n	8008a8a <__swsetup_r+0x5a>
 8008a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a66:	b141      	cbz	r1, 8008a7a <__swsetup_r+0x4a>
 8008a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <__swsetup_r+0x46>
 8008a70:	4628      	mov	r0, r5
 8008a72:	f001 f835 	bl	8009ae0 <_free_r>
 8008a76:	2300      	movs	r3, #0
 8008a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	2300      	movs	r3, #0
 8008a84:	6063      	str	r3, [r4, #4]
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f043 0308 	orr.w	r3, r3, #8
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	b94b      	cbnz	r3, 8008aaa <__swsetup_r+0x7a>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa0:	d003      	beq.n	8008aaa <__swsetup_r+0x7a>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f002 fa09 	bl	800aebc <__smakebuf_r>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	f013 0201 	ands.w	r2, r3, #1
 8008ab2:	d00a      	beq.n	8008aca <__swsetup_r+0x9a>
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	60a2      	str	r2, [r4, #8]
 8008ab8:	6962      	ldr	r2, [r4, #20]
 8008aba:	4252      	negs	r2, r2
 8008abc:	61a2      	str	r2, [r4, #24]
 8008abe:	6922      	ldr	r2, [r4, #16]
 8008ac0:	b942      	cbnz	r2, 8008ad4 <__swsetup_r+0xa4>
 8008ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ac6:	d1c5      	bne.n	8008a54 <__swsetup_r+0x24>
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	0799      	lsls	r1, r3, #30
 8008acc:	bf58      	it	pl
 8008ace:	6962      	ldrpl	r2, [r4, #20]
 8008ad0:	60a2      	str	r2, [r4, #8]
 8008ad2:	e7f4      	b.n	8008abe <__swsetup_r+0x8e>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e7f7      	b.n	8008ac8 <__swsetup_r+0x98>
 8008ad8:	2000002c 	.word	0x2000002c

08008adc <memmove>:
 8008adc:	4288      	cmp	r0, r1
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	eb01 0402 	add.w	r4, r1, r2
 8008ae4:	d902      	bls.n	8008aec <memmove+0x10>
 8008ae6:	4284      	cmp	r4, r0
 8008ae8:	4623      	mov	r3, r4
 8008aea:	d807      	bhi.n	8008afc <memmove+0x20>
 8008aec:	1e43      	subs	r3, r0, #1
 8008aee:	42a1      	cmp	r1, r4
 8008af0:	d008      	beq.n	8008b04 <memmove+0x28>
 8008af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008afa:	e7f8      	b.n	8008aee <memmove+0x12>
 8008afc:	4402      	add	r2, r0
 8008afe:	4601      	mov	r1, r0
 8008b00:	428a      	cmp	r2, r1
 8008b02:	d100      	bne.n	8008b06 <memmove+0x2a>
 8008b04:	bd10      	pop	{r4, pc}
 8008b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b0e:	e7f7      	b.n	8008b00 <memmove+0x24>

08008b10 <memset>:
 8008b10:	4402      	add	r2, r0
 8008b12:	4603      	mov	r3, r0
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d100      	bne.n	8008b1a <memset+0xa>
 8008b18:	4770      	bx	lr
 8008b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b1e:	e7f9      	b.n	8008b14 <memset+0x4>

08008b20 <strchr>:
 8008b20:	b2c9      	uxtb	r1, r1
 8008b22:	4603      	mov	r3, r0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2a:	b112      	cbz	r2, 8008b32 <strchr+0x12>
 8008b2c:	428a      	cmp	r2, r1
 8008b2e:	d1f9      	bne.n	8008b24 <strchr+0x4>
 8008b30:	4770      	bx	lr
 8008b32:	2900      	cmp	r1, #0
 8008b34:	bf18      	it	ne
 8008b36:	2000      	movne	r0, #0
 8008b38:	4770      	bx	lr

08008b3a <strcspn>:
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461e      	mov	r6, r3
 8008b40:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008b44:	b144      	cbz	r4, 8008b58 <strcspn+0x1e>
 8008b46:	1e4a      	subs	r2, r1, #1
 8008b48:	e001      	b.n	8008b4e <strcspn+0x14>
 8008b4a:	42a5      	cmp	r5, r4
 8008b4c:	d004      	beq.n	8008b58 <strcspn+0x1e>
 8008b4e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	d1f9      	bne.n	8008b4a <strcspn+0x10>
 8008b56:	e7f2      	b.n	8008b3e <strcspn+0x4>
 8008b58:	1a30      	subs	r0, r6, r0
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}

08008b5c <strncpy>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	3901      	subs	r1, #1
 8008b60:	4603      	mov	r3, r0
 8008b62:	b132      	cbz	r2, 8008b72 <strncpy+0x16>
 8008b64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b68:	f803 4b01 	strb.w	r4, [r3], #1
 8008b6c:	3a01      	subs	r2, #1
 8008b6e:	2c00      	cmp	r4, #0
 8008b70:	d1f7      	bne.n	8008b62 <strncpy+0x6>
 8008b72:	441a      	add	r2, r3
 8008b74:	2100      	movs	r1, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d100      	bne.n	8008b7c <strncpy+0x20>
 8008b7a:	bd10      	pop	{r4, pc}
 8008b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8008b80:	e7f9      	b.n	8008b76 <strncpy+0x1a>
	...

08008b84 <strtok>:
 8008b84:	4b16      	ldr	r3, [pc, #88]	@ (8008be0 <strtok+0x5c>)
 8008b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8a:	681f      	ldr	r7, [r3, #0]
 8008b8c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008b8e:	4605      	mov	r5, r0
 8008b90:	460e      	mov	r6, r1
 8008b92:	b9ec      	cbnz	r4, 8008bd0 <strtok+0x4c>
 8008b94:	2050      	movs	r0, #80	@ 0x50
 8008b96:	f001 f831 	bl	8009bfc <malloc>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6478      	str	r0, [r7, #68]	@ 0x44
 8008b9e:	b920      	cbnz	r0, 8008baa <strtok+0x26>
 8008ba0:	4b10      	ldr	r3, [pc, #64]	@ (8008be4 <strtok+0x60>)
 8008ba2:	4811      	ldr	r0, [pc, #68]	@ (8008be8 <strtok+0x64>)
 8008ba4:	215b      	movs	r1, #91	@ 0x5b
 8008ba6:	f000 ff75 	bl	8009a94 <__assert_func>
 8008baa:	e9c0 4400 	strd	r4, r4, [r0]
 8008bae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008bb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008bb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008bba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008bbe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008bc2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008bc6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008bca:	6184      	str	r4, [r0, #24]
 8008bcc:	7704      	strb	r4, [r0, #28]
 8008bce:	6244      	str	r4, [r0, #36]	@ 0x24
 8008bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	f000 b806 	b.w	8008bec <__strtok_r>
 8008be0:	2000002c 	.word	0x2000002c
 8008be4:	0800baa0 	.word	0x0800baa0
 8008be8:	0800bab7 	.word	0x0800bab7

08008bec <__strtok_r>:
 8008bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bee:	4604      	mov	r4, r0
 8008bf0:	b908      	cbnz	r0, 8008bf6 <__strtok_r+0xa>
 8008bf2:	6814      	ldr	r4, [r2, #0]
 8008bf4:	b144      	cbz	r4, 8008c08 <__strtok_r+0x1c>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008c02:	b91e      	cbnz	r6, 8008c0c <__strtok_r+0x20>
 8008c04:	b965      	cbnz	r5, 8008c20 <__strtok_r+0x34>
 8008c06:	6015      	str	r5, [r2, #0]
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e005      	b.n	8008c18 <__strtok_r+0x2c>
 8008c0c:	42b5      	cmp	r5, r6
 8008c0e:	d1f6      	bne.n	8008bfe <__strtok_r+0x12>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <__strtok_r+0xa>
 8008c14:	6014      	str	r4, [r2, #0]
 8008c16:	7003      	strb	r3, [r0, #0]
 8008c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1a:	461c      	mov	r4, r3
 8008c1c:	e00c      	b.n	8008c38 <__strtok_r+0x4c>
 8008c1e:	b91d      	cbnz	r5, 8008c28 <__strtok_r+0x3c>
 8008c20:	4627      	mov	r7, r4
 8008c22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c26:	460e      	mov	r6, r1
 8008c28:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	d1f6      	bne.n	8008c1e <__strtok_r+0x32>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0f2      	beq.n	8008c1a <__strtok_r+0x2e>
 8008c34:	2300      	movs	r3, #0
 8008c36:	703b      	strb	r3, [r7, #0]
 8008c38:	6014      	str	r4, [r2, #0]
 8008c3a:	e7ed      	b.n	8008c18 <__strtok_r+0x2c>

08008c3c <strstr>:
 8008c3c:	780a      	ldrb	r2, [r1, #0]
 8008c3e:	b570      	push	{r4, r5, r6, lr}
 8008c40:	b96a      	cbnz	r2, 8008c5e <strstr+0x22>
 8008c42:	bd70      	pop	{r4, r5, r6, pc}
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d109      	bne.n	8008c5c <strstr+0x20>
 8008c48:	460c      	mov	r4, r1
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f6      	beq.n	8008c42 <strstr+0x6>
 8008c54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008c58:	429e      	cmp	r6, r3
 8008c5a:	d0f7      	beq.n	8008c4c <strstr+0x10>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	7803      	ldrb	r3, [r0, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1ef      	bne.n	8008c44 <strstr+0x8>
 8008c64:	4618      	mov	r0, r3
 8008c66:	e7ec      	b.n	8008c42 <strstr+0x6>

08008c68 <ctime>:
 8008c68:	b508      	push	{r3, lr}
 8008c6a:	f000 f805 	bl	8008c78 <localtime>
 8008c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c72:	f002 ba19 	b.w	800b0a8 <asctime>
	...

08008c78 <localtime>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca8 <localtime+0x30>)
 8008c7c:	681d      	ldr	r5, [r3, #0]
 8008c7e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008c80:	4604      	mov	r4, r0
 8008c82:	b953      	cbnz	r3, 8008c9a <localtime+0x22>
 8008c84:	2024      	movs	r0, #36	@ 0x24
 8008c86:	f000 ffb9 	bl	8009bfc <malloc>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6368      	str	r0, [r5, #52]	@ 0x34
 8008c8e:	b920      	cbnz	r0, 8008c9a <localtime+0x22>
 8008c90:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <localtime+0x34>)
 8008c92:	4807      	ldr	r0, [pc, #28]	@ (8008cb0 <localtime+0x38>)
 8008c94:	2132      	movs	r1, #50	@ 0x32
 8008c96:	f000 fefd 	bl	8009a94 <__assert_func>
 8008c9a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca2:	f000 b807 	b.w	8008cb4 <localtime_r>
 8008ca6:	bf00      	nop
 8008ca8:	2000002c 	.word	0x2000002c
 8008cac:	0800baa0 	.word	0x0800baa0
 8008cb0:	0800bb11 	.word	0x0800bb11

08008cb4 <localtime_r>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	4607      	mov	r7, r0
 8008cbc:	f002 fa3c 	bl	800b138 <__gettzinfo>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f002 fa3b 	bl	800b140 <gmtime_r>
 8008cca:	6943      	ldr	r3, [r0, #20]
 8008ccc:	0799      	lsls	r1, r3, #30
 8008cce:	4604      	mov	r4, r0
 8008cd0:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 8008cd4:	d106      	bne.n	8008ce4 <localtime_r+0x30>
 8008cd6:	2264      	movs	r2, #100	@ 0x64
 8008cd8:	fb98 f3f2 	sdiv	r3, r8, r2
 8008cdc:	fb02 8313 	mls	r3, r2, r3, r8
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d171      	bne.n	8008dc8 <localtime_r+0x114>
 8008ce4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008ce8:	fb98 f3f2 	sdiv	r3, r8, r2
 8008cec:	fb02 8313 	mls	r3, r2, r3, r8
 8008cf0:	fab3 f383 	clz	r3, r3
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	425e      	negs	r6, r3
 8008cf8:	4b64      	ldr	r3, [pc, #400]	@ (8008e8c <localtime_r+0x1d8>)
 8008cfa:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 8008cfe:	441e      	add	r6, r3
 8008d00:	f000 fc08 	bl	8009514 <__tz_lock>
 8008d04:	f000 fc12 	bl	800952c <_tzset_unlocked>
 8008d08:	4b61      	ldr	r3, [pc, #388]	@ (8008e90 <localtime_r+0x1dc>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d06a      	beq.n	8008de6 <localtime_r+0x132>
 8008d10:	686b      	ldr	r3, [r5, #4]
 8008d12:	4543      	cmp	r3, r8
 8008d14:	d15a      	bne.n	8008dcc <localtime_r+0x118>
 8008d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1a:	682f      	ldr	r7, [r5, #0]
 8008d1c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	d15b      	bne.n	8008ddc <localtime_r+0x128>
 8008d24:	4282      	cmp	r2, r0
 8008d26:	eb73 0101 	sbcs.w	r1, r3, r1
 8008d2a:	db5e      	blt.n	8008dea <localtime_r+0x136>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6223      	str	r3, [r4, #32]
 8008d30:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8008d32:	6861      	ldr	r1, [r4, #4]
 8008d34:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008d38:	fb93 f0f2 	sdiv	r0, r3, r2
 8008d3c:	fb02 3310 	mls	r3, r2, r0, r3
 8008d40:	223c      	movs	r2, #60	@ 0x3c
 8008d42:	fb93 f5f2 	sdiv	r5, r3, r2
 8008d46:	fb02 3215 	mls	r2, r2, r5, r3
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	68a2      	ldr	r2, [r4, #8]
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	1b49      	subs	r1, r1, r5
 8008d54:	1a12      	subs	r2, r2, r0
 8008d56:	2b3b      	cmp	r3, #59	@ 0x3b
 8008d58:	6061      	str	r1, [r4, #4]
 8008d5a:	60a2      	str	r2, [r4, #8]
 8008d5c:	dd51      	ble.n	8008e02 <localtime_r+0x14e>
 8008d5e:	3101      	adds	r1, #1
 8008d60:	6061      	str	r1, [r4, #4]
 8008d62:	3b3c      	subs	r3, #60	@ 0x3c
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	2b3b      	cmp	r3, #59	@ 0x3b
 8008d6a:	dd50      	ble.n	8008e0e <localtime_r+0x15a>
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	60a2      	str	r2, [r4, #8]
 8008d70:	3b3c      	subs	r3, #60	@ 0x3c
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	2b17      	cmp	r3, #23
 8008d78:	dd4f      	ble.n	8008e1a <localtime_r+0x166>
 8008d7a:	69e2      	ldr	r2, [r4, #28]
 8008d7c:	3201      	adds	r2, #1
 8008d7e:	61e2      	str	r2, [r4, #28]
 8008d80:	69a2      	ldr	r2, [r4, #24]
 8008d82:	3201      	adds	r2, #1
 8008d84:	2a07      	cmp	r2, #7
 8008d86:	bfa8      	it	ge
 8008d88:	2200      	movge	r2, #0
 8008d8a:	61a2      	str	r2, [r4, #24]
 8008d8c:	68e2      	ldr	r2, [r4, #12]
 8008d8e:	3b18      	subs	r3, #24
 8008d90:	3201      	adds	r2, #1
 8008d92:	60a3      	str	r3, [r4, #8]
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	60e2      	str	r2, [r4, #12]
 8008d98:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008d9c:	428a      	cmp	r2, r1
 8008d9e:	dd0e      	ble.n	8008dbe <localtime_r+0x10a>
 8008da0:	2b0b      	cmp	r3, #11
 8008da2:	eba2 0201 	sub.w	r2, r2, r1
 8008da6:	60e2      	str	r2, [r4, #12]
 8008da8:	f103 0201 	add.w	r2, r3, #1
 8008dac:	bf09      	itett	eq
 8008dae:	6963      	ldreq	r3, [r4, #20]
 8008db0:	6122      	strne	r2, [r4, #16]
 8008db2:	2200      	moveq	r2, #0
 8008db4:	3301      	addeq	r3, #1
 8008db6:	bf02      	ittt	eq
 8008db8:	6122      	streq	r2, [r4, #16]
 8008dba:	6163      	streq	r3, [r4, #20]
 8008dbc:	61e2      	streq	r2, [r4, #28]
 8008dbe:	f000 fbaf 	bl	8009520 <__tz_unlock>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e794      	b.n	8008cf6 <localtime_r+0x42>
 8008dcc:	4640      	mov	r0, r8
 8008dce:	f000 faed 	bl	80093ac <__tzcalc_limits>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d19f      	bne.n	8008d16 <localtime_r+0x62>
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	e004      	b.n	8008de6 <localtime_r+0x132>
 8008ddc:	4282      	cmp	r2, r0
 8008dde:	eb73 0101 	sbcs.w	r1, r3, r1
 8008de2:	da02      	bge.n	8008dea <localtime_r+0x136>
 8008de4:	2300      	movs	r3, #0
 8008de6:	6223      	str	r3, [r4, #32]
 8008de8:	e009      	b.n	8008dfe <localtime_r+0x14a>
 8008dea:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8008dee:	4282      	cmp	r2, r0
 8008df0:	418b      	sbcs	r3, r1
 8008df2:	bfb4      	ite	lt
 8008df4:	2301      	movlt	r3, #1
 8008df6:	2300      	movge	r3, #0
 8008df8:	6223      	str	r3, [r4, #32]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d198      	bne.n	8008d30 <localtime_r+0x7c>
 8008dfe:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8008e00:	e797      	b.n	8008d32 <localtime_r+0x7e>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	daaf      	bge.n	8008d66 <localtime_r+0xb2>
 8008e06:	3901      	subs	r1, #1
 8008e08:	6061      	str	r1, [r4, #4]
 8008e0a:	333c      	adds	r3, #60	@ 0x3c
 8008e0c:	e7aa      	b.n	8008d64 <localtime_r+0xb0>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dab0      	bge.n	8008d74 <localtime_r+0xc0>
 8008e12:	3a01      	subs	r2, #1
 8008e14:	60a2      	str	r2, [r4, #8]
 8008e16:	333c      	adds	r3, #60	@ 0x3c
 8008e18:	e7ab      	b.n	8008d72 <localtime_r+0xbe>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dacf      	bge.n	8008dbe <localtime_r+0x10a>
 8008e1e:	69e2      	ldr	r2, [r4, #28]
 8008e20:	3a01      	subs	r2, #1
 8008e22:	61e2      	str	r2, [r4, #28]
 8008e24:	69a2      	ldr	r2, [r4, #24]
 8008e26:	3a01      	subs	r2, #1
 8008e28:	bf48      	it	mi
 8008e2a:	2206      	movmi	r2, #6
 8008e2c:	61a2      	str	r2, [r4, #24]
 8008e2e:	68e2      	ldr	r2, [r4, #12]
 8008e30:	3318      	adds	r3, #24
 8008e32:	3a01      	subs	r2, #1
 8008e34:	60e2      	str	r2, [r4, #12]
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	d1c0      	bne.n	8008dbe <localtime_r+0x10a>
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	d405      	bmi.n	8008e4e <localtime_r+0x19a>
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008e4a:	60e3      	str	r3, [r4, #12]
 8008e4c:	e7b7      	b.n	8008dbe <localtime_r+0x10a>
 8008e4e:	230b      	movs	r3, #11
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	6963      	ldr	r3, [r4, #20]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	6162      	str	r2, [r4, #20]
 8008e58:	0792      	lsls	r2, r2, #30
 8008e5a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8008e5e:	d105      	bne.n	8008e6c <localtime_r+0x1b8>
 8008e60:	2164      	movs	r1, #100	@ 0x64
 8008e62:	fb93 f2f1 	sdiv	r2, r3, r1
 8008e66:	fb01 3212 	mls	r2, r1, r2, r3
 8008e6a:	b962      	cbnz	r2, 8008e86 <localtime_r+0x1d2>
 8008e6c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008e70:	fb93 f1f2 	sdiv	r1, r3, r2
 8008e74:	fb02 3311 	mls	r3, r2, r1, r3
 8008e78:	fab3 f383 	clz	r3, r3
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008e82:	61e3      	str	r3, [r4, #28]
 8008e84:	e7de      	b.n	8008e44 <localtime_r+0x190>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e7f9      	b.n	8008e7e <localtime_r+0x1ca>
 8008e8a:	bf00      	nop
 8008e8c:	0800bd1c 	.word	0x0800bd1c
 8008e90:	20005568 	.word	0x20005568

08008e94 <validate_structure>:
 8008e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e96:	6801      	ldr	r1, [r0, #0]
 8008e98:	293b      	cmp	r1, #59	@ 0x3b
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	d911      	bls.n	8008ec2 <validate_structure+0x2e>
 8008e9e:	223c      	movs	r2, #60	@ 0x3c
 8008ea0:	4668      	mov	r0, sp
 8008ea2:	f000 fe15 	bl	8009ad0 <div>
 8008ea6:	9a01      	ldr	r2, [sp, #4]
 8008ea8:	6863      	ldr	r3, [r4, #4]
 8008eaa:	9900      	ldr	r1, [sp, #0]
 8008eac:	2a00      	cmp	r2, #0
 8008eae:	440b      	add	r3, r1
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	bfbb      	ittet	lt
 8008eb4:	323c      	addlt	r2, #60	@ 0x3c
 8008eb6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008eba:	6022      	strge	r2, [r4, #0]
 8008ebc:	6022      	strlt	r2, [r4, #0]
 8008ebe:	bfb8      	it	lt
 8008ec0:	6063      	strlt	r3, [r4, #4]
 8008ec2:	6861      	ldr	r1, [r4, #4]
 8008ec4:	293b      	cmp	r1, #59	@ 0x3b
 8008ec6:	d911      	bls.n	8008eec <validate_structure+0x58>
 8008ec8:	223c      	movs	r2, #60	@ 0x3c
 8008eca:	4668      	mov	r0, sp
 8008ecc:	f000 fe00 	bl	8009ad0 <div>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	9900      	ldr	r1, [sp, #0]
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	440b      	add	r3, r1
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	bfbb      	ittet	lt
 8008ede:	323c      	addlt	r2, #60	@ 0x3c
 8008ee0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008ee4:	6062      	strge	r2, [r4, #4]
 8008ee6:	6062      	strlt	r2, [r4, #4]
 8008ee8:	bfb8      	it	lt
 8008eea:	60a3      	strlt	r3, [r4, #8]
 8008eec:	68a1      	ldr	r1, [r4, #8]
 8008eee:	2917      	cmp	r1, #23
 8008ef0:	d911      	bls.n	8008f16 <validate_structure+0x82>
 8008ef2:	2218      	movs	r2, #24
 8008ef4:	4668      	mov	r0, sp
 8008ef6:	f000 fdeb 	bl	8009ad0 <div>
 8008efa:	9a01      	ldr	r2, [sp, #4]
 8008efc:	68e3      	ldr	r3, [r4, #12]
 8008efe:	9900      	ldr	r1, [sp, #0]
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	440b      	add	r3, r1
 8008f04:	60e3      	str	r3, [r4, #12]
 8008f06:	bfbb      	ittet	lt
 8008f08:	3218      	addlt	r2, #24
 8008f0a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008f0e:	60a2      	strge	r2, [r4, #8]
 8008f10:	60a2      	strlt	r2, [r4, #8]
 8008f12:	bfb8      	it	lt
 8008f14:	60e3      	strlt	r3, [r4, #12]
 8008f16:	6921      	ldr	r1, [r4, #16]
 8008f18:	290b      	cmp	r1, #11
 8008f1a:	d911      	bls.n	8008f40 <validate_structure+0xac>
 8008f1c:	220c      	movs	r2, #12
 8008f1e:	4668      	mov	r0, sp
 8008f20:	f000 fdd6 	bl	8009ad0 <div>
 8008f24:	9a01      	ldr	r2, [sp, #4]
 8008f26:	6963      	ldr	r3, [r4, #20]
 8008f28:	9900      	ldr	r1, [sp, #0]
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	440b      	add	r3, r1
 8008f2e:	6163      	str	r3, [r4, #20]
 8008f30:	bfbb      	ittet	lt
 8008f32:	320c      	addlt	r2, #12
 8008f34:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008f38:	6122      	strge	r2, [r4, #16]
 8008f3a:	6122      	strlt	r2, [r4, #16]
 8008f3c:	bfb8      	it	lt
 8008f3e:	6163      	strlt	r3, [r4, #20]
 8008f40:	6963      	ldr	r3, [r4, #20]
 8008f42:	079a      	lsls	r2, r3, #30
 8008f44:	d11c      	bne.n	8008f80 <validate_structure+0xec>
 8008f46:	2164      	movs	r1, #100	@ 0x64
 8008f48:	fb93 f2f1 	sdiv	r2, r3, r1
 8008f4c:	fb01 3212 	mls	r2, r1, r2, r3
 8008f50:	b9c2      	cbnz	r2, 8008f84 <validate_structure+0xf0>
 8008f52:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8008f56:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008f5a:	fb93 f1f2 	sdiv	r1, r3, r2
 8008f5e:	fb02 3311 	mls	r3, r2, r1, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bf0c      	ite	eq
 8008f66:	231d      	moveq	r3, #29
 8008f68:	231c      	movne	r3, #28
 8008f6a:	68e2      	ldr	r2, [r4, #12]
 8008f6c:	2a00      	cmp	r2, #0
 8008f6e:	dc0b      	bgt.n	8008f88 <validate_structure+0xf4>
 8008f70:	4d31      	ldr	r5, [pc, #196]	@ (8009038 <validate_structure+0x1a4>)
 8008f72:	200b      	movs	r0, #11
 8008f74:	2164      	movs	r1, #100	@ 0x64
 8008f76:	68e6      	ldr	r6, [r4, #12]
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	dd30      	ble.n	8008fde <validate_structure+0x14a>
 8008f7c:	b003      	add	sp, #12
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f80:	231c      	movs	r3, #28
 8008f82:	e7f2      	b.n	8008f6a <validate_structure+0xd6>
 8008f84:	231d      	movs	r3, #29
 8008f86:	e7f0      	b.n	8008f6a <validate_structure+0xd6>
 8008f88:	4d2b      	ldr	r5, [pc, #172]	@ (8009038 <validate_structure+0x1a4>)
 8008f8a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008f8e:	2a01      	cmp	r2, #1
 8008f90:	bf14      	ite	ne
 8008f92:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8008f96:	4618      	moveq	r0, r3
 8008f98:	4281      	cmp	r1, r0
 8008f9a:	ddef      	ble.n	8008f7c <validate_structure+0xe8>
 8008f9c:	3201      	adds	r2, #1
 8008f9e:	1a09      	subs	r1, r1, r0
 8008fa0:	2a0c      	cmp	r2, #12
 8008fa2:	60e1      	str	r1, [r4, #12]
 8008fa4:	6122      	str	r2, [r4, #16]
 8008fa6:	d1f0      	bne.n	8008f8a <validate_structure+0xf6>
 8008fa8:	6963      	ldr	r3, [r4, #20]
 8008faa:	2100      	movs	r1, #0
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	6121      	str	r1, [r4, #16]
 8008fb0:	0791      	lsls	r1, r2, #30
 8008fb2:	6162      	str	r2, [r4, #20]
 8008fb4:	d13c      	bne.n	8009030 <validate_structure+0x19c>
 8008fb6:	2164      	movs	r1, #100	@ 0x64
 8008fb8:	fb92 f0f1 	sdiv	r0, r2, r1
 8008fbc:	fb01 2210 	mls	r2, r1, r0, r2
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d137      	bne.n	8009034 <validate_structure+0x1a0>
 8008fc4:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8008fc8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008fcc:	fb93 f1f2 	sdiv	r1, r3, r2
 8008fd0:	fb02 3311 	mls	r3, r2, r1, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf0c      	ite	eq
 8008fd8:	231d      	moveq	r3, #29
 8008fda:	231c      	movne	r3, #28
 8008fdc:	e7d5      	b.n	8008f8a <validate_structure+0xf6>
 8008fde:	6922      	ldr	r2, [r4, #16]
 8008fe0:	3a01      	subs	r2, #1
 8008fe2:	6122      	str	r2, [r4, #16]
 8008fe4:	3201      	adds	r2, #1
 8008fe6:	d116      	bne.n	8009016 <validate_structure+0x182>
 8008fe8:	6963      	ldr	r3, [r4, #20]
 8008fea:	1e5a      	subs	r2, r3, #1
 8008fec:	0797      	lsls	r7, r2, #30
 8008fee:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8008ff2:	d119      	bne.n	8009028 <validate_structure+0x194>
 8008ff4:	fb92 f7f1 	sdiv	r7, r2, r1
 8008ff8:	fb01 2217 	mls	r2, r1, r7, r2
 8008ffc:	b9b2      	cbnz	r2, 800902c <validate_structure+0x198>
 8008ffe:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8009002:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009006:	fb93 f7f2 	sdiv	r7, r3, r2
 800900a:	fb02 3317 	mls	r3, r2, r7, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	bf0c      	ite	eq
 8009012:	231d      	moveq	r3, #29
 8009014:	231c      	movne	r3, #28
 8009016:	6922      	ldr	r2, [r4, #16]
 8009018:	2a01      	cmp	r2, #1
 800901a:	bf14      	ite	ne
 800901c:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8009020:	461a      	moveq	r2, r3
 8009022:	4432      	add	r2, r6
 8009024:	60e2      	str	r2, [r4, #12]
 8009026:	e7a6      	b.n	8008f76 <validate_structure+0xe2>
 8009028:	231c      	movs	r3, #28
 800902a:	e7f4      	b.n	8009016 <validate_structure+0x182>
 800902c:	231d      	movs	r3, #29
 800902e:	e7f2      	b.n	8009016 <validate_structure+0x182>
 8009030:	231c      	movs	r3, #28
 8009032:	e7aa      	b.n	8008f8a <validate_structure+0xf6>
 8009034:	231d      	movs	r3, #29
 8009036:	e7a8      	b.n	8008f8a <validate_structure+0xf6>
 8009038:	0800bcec 	.word	0x0800bcec

0800903c <mktime>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	b085      	sub	sp, #20
 8009042:	4607      	mov	r7, r0
 8009044:	f002 f878 	bl	800b138 <__gettzinfo>
 8009048:	4681      	mov	r9, r0
 800904a:	4638      	mov	r0, r7
 800904c:	f7ff ff22 	bl	8008e94 <validate_structure>
 8009050:	e9d7 4300 	ldrd	r4, r3, [r7]
 8009054:	223c      	movs	r2, #60	@ 0x3c
 8009056:	fb02 4403 	mla	r4, r2, r3, r4
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	697d      	ldr	r5, [r7, #20]
 800905e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009062:	fb02 4403 	mla	r4, r2, r3, r4
 8009066:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800906a:	4ac3      	ldr	r2, [pc, #780]	@ (8009378 <mktime+0x33c>)
 800906c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009070:	3e01      	subs	r6, #1
 8009072:	2b01      	cmp	r3, #1
 8009074:	4416      	add	r6, r2
 8009076:	dd11      	ble.n	800909c <mktime+0x60>
 8009078:	07a9      	lsls	r1, r5, #30
 800907a:	d10f      	bne.n	800909c <mktime+0x60>
 800907c:	2264      	movs	r2, #100	@ 0x64
 800907e:	fb95 f3f2 	sdiv	r3, r5, r2
 8009082:	fb02 5313 	mls	r3, r2, r3, r5
 8009086:	b943      	cbnz	r3, 800909a <mktime+0x5e>
 8009088:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800908c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009090:	fb93 f1f2 	sdiv	r1, r3, r2
 8009094:	fb02 3311 	mls	r3, r2, r1, r3
 8009098:	b903      	cbnz	r3, 800909c <mktime+0x60>
 800909a:	3601      	adds	r6, #1
 800909c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80090a0:	3310      	adds	r3, #16
 80090a2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80090a6:	4293      	cmp	r3, r2
 80090a8:	61fe      	str	r6, [r7, #28]
 80090aa:	f200 8170 	bhi.w	800938e <mktime+0x352>
 80090ae:	2d46      	cmp	r5, #70	@ 0x46
 80090b0:	f340 80b6 	ble.w	8009220 <mktime+0x1e4>
 80090b4:	2346      	movs	r3, #70	@ 0x46
 80090b6:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80090ba:	2164      	movs	r1, #100	@ 0x64
 80090bc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80090c0:	079a      	lsls	r2, r3, #30
 80090c2:	f040 80a7 	bne.w	8009214 <mktime+0x1d8>
 80090c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80090ca:	fb01 3212 	mls	r2, r1, r2, r3
 80090ce:	2a00      	cmp	r2, #0
 80090d0:	f040 80a3 	bne.w	800921a <mktime+0x1de>
 80090d4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80090d8:	fb92 fef0 	sdiv	lr, r2, r0
 80090dc:	fb00 221e 	mls	r2, r0, lr, r2
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	bf0c      	ite	eq
 80090e4:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80090e8:	4662      	movne	r2, ip
 80090ea:	3301      	adds	r3, #1
 80090ec:	429d      	cmp	r5, r3
 80090ee:	4416      	add	r6, r2
 80090f0:	d1e6      	bne.n	80090c0 <mktime+0x84>
 80090f2:	4ba2      	ldr	r3, [pc, #648]	@ (800937c <mktime+0x340>)
 80090f4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80090f8:	fbc6 4803 	smlal	r4, r8, r6, r3
 80090fc:	f000 fa0a 	bl	8009514 <__tz_lock>
 8009100:	f000 fa14 	bl	800952c <_tzset_unlocked>
 8009104:	4b9e      	ldr	r3, [pc, #632]	@ (8009380 <mktime+0x344>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8147 	beq.w	800939c <mktime+0x360>
 800910e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8009112:	6978      	ldr	r0, [r7, #20]
 8009114:	4653      	mov	r3, sl
 8009116:	2b01      	cmp	r3, #1
 8009118:	bfa8      	it	ge
 800911a:	2301      	movge	r3, #1
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009122:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009126:	4283      	cmp	r3, r0
 8009128:	f040 80bd 	bne.w	80092a6 <mktime+0x26a>
 800912c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8009130:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8009134:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8009138:	1a13      	subs	r3, r2, r0
 800913a:	9303      	str	r3, [sp, #12]
 800913c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	9a02      	ldr	r2, [sp, #8]
 8009144:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8009148:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800914c:	ebb2 0e03 	subs.w	lr, r2, r3
 8009150:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8009154:	4574      	cmp	r4, lr
 8009156:	eb78 0201 	sbcs.w	r2, r8, r1
 800915a:	f280 80c7 	bge.w	80092ec <mktime+0x2b0>
 800915e:	f8d9 2000 	ldr.w	r2, [r9]
 8009162:	2a00      	cmp	r2, #0
 8009164:	f000 80d0 	beq.w	8009308 <mktime+0x2cc>
 8009168:	9a03      	ldr	r2, [sp, #12]
 800916a:	4294      	cmp	r4, r2
 800916c:	eb78 020b 	sbcs.w	r2, r8, fp
 8009170:	f2c0 8111 	blt.w	8009396 <mktime+0x35a>
 8009174:	4574      	cmp	r4, lr
 8009176:	eb78 0101 	sbcs.w	r1, r8, r1
 800917a:	bfb4      	ite	lt
 800917c:	f04f 0b01 	movlt.w	fp, #1
 8009180:	f04f 0b00 	movge.w	fp, #0
 8009184:	f1ba 0f00 	cmp.w	sl, #0
 8009188:	f2c0 8094 	blt.w	80092b4 <mktime+0x278>
 800918c:	9a01      	ldr	r2, [sp, #4]
 800918e:	ea82 0a0b 	eor.w	sl, r2, fp
 8009192:	f1ba 0f01 	cmp.w	sl, #1
 8009196:	f040 808d 	bne.w	80092b4 <mktime+0x278>
 800919a:	f1bb 0f00 	cmp.w	fp, #0
 800919e:	f000 80c2 	beq.w	8009326 <mktime+0x2ea>
 80091a2:	1a1b      	subs	r3, r3, r0
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	441a      	add	r2, r3
 80091a8:	191c      	adds	r4, r3, r4
 80091aa:	603a      	str	r2, [r7, #0]
 80091ac:	4638      	mov	r0, r7
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	9201      	str	r2, [sp, #4]
 80091b2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80091b6:	f7ff fe6d 	bl	8008e94 <validate_structure>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	9a01      	ldr	r2, [sp, #4]
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	d078      	beq.n	80092b4 <mktime+0x278>
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	f300 80b1 	bgt.w	800932a <mktime+0x2ee>
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	bfa8      	it	ge
 80091ce:	469a      	movge	sl, r3
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	eb1a 0303 	adds.w	r3, sl, r3
 80091d6:	4456      	add	r6, sl
 80091d8:	f140 80b0 	bpl.w	800933c <mktime+0x300>
 80091dc:	1e6b      	subs	r3, r5, #1
 80091de:	0799      	lsls	r1, r3, #30
 80091e0:	f040 80a6 	bne.w	8009330 <mktime+0x2f4>
 80091e4:	2264      	movs	r2, #100	@ 0x64
 80091e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80091ea:	fb02 3311 	mls	r3, r2, r1, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f040 80a1 	bne.w	8009336 <mktime+0x2fa>
 80091f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80091f8:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 80091fc:	fb95 f2f3 	sdiv	r2, r5, r3
 8009200:	fb03 5512 	mls	r5, r3, r2, r5
 8009204:	2d00      	cmp	r5, #0
 8009206:	f240 136d 	movw	r3, #365	@ 0x16d
 800920a:	bf18      	it	ne
 800920c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	e04f      	b.n	80092b4 <mktime+0x278>
 8009214:	f240 126d 	movw	r2, #365	@ 0x16d
 8009218:	e767      	b.n	80090ea <mktime+0xae>
 800921a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800921e:	e764      	b.n	80090ea <mktime+0xae>
 8009220:	f43f af67 	beq.w	80090f2 <mktime+0xb6>
 8009224:	2345      	movs	r3, #69	@ 0x45
 8009226:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800922a:	2164      	movs	r1, #100	@ 0x64
 800922c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009230:	e012      	b.n	8009258 <mktime+0x21c>
 8009232:	bb62      	cbnz	r2, 800928e <mktime+0x252>
 8009234:	fb93 f2f1 	sdiv	r2, r3, r1
 8009238:	fb01 3212 	mls	r2, r1, r2, r3
 800923c:	bb52      	cbnz	r2, 8009294 <mktime+0x258>
 800923e:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8009242:	fb92 fef0 	sdiv	lr, r2, r0
 8009246:	fb00 221e 	mls	r2, r0, lr, r2
 800924a:	2a00      	cmp	r2, #0
 800924c:	bf0c      	ite	eq
 800924e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009252:	4662      	movne	r2, ip
 8009254:	1ab6      	subs	r6, r6, r2
 8009256:	3b01      	subs	r3, #1
 8009258:	429d      	cmp	r5, r3
 800925a:	f003 0203 	and.w	r2, r3, #3
 800925e:	dbe8      	blt.n	8009232 <mktime+0x1f6>
 8009260:	b9da      	cbnz	r2, 800929a <mktime+0x25e>
 8009262:	2264      	movs	r2, #100	@ 0x64
 8009264:	fb95 f3f2 	sdiv	r3, r5, r2
 8009268:	fb02 5313 	mls	r3, r2, r3, r5
 800926c:	b9c3      	cbnz	r3, 80092a0 <mktime+0x264>
 800926e:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8009272:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009276:	fb93 f1f2 	sdiv	r1, r3, r2
 800927a:	fb02 3311 	mls	r3, r2, r1, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	f240 136d 	movw	r3, #365	@ 0x16d
 8009284:	bf08      	it	eq
 8009286:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800928a:	1af6      	subs	r6, r6, r3
 800928c:	e731      	b.n	80090f2 <mktime+0xb6>
 800928e:	f240 126d 	movw	r2, #365	@ 0x16d
 8009292:	e7df      	b.n	8009254 <mktime+0x218>
 8009294:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009298:	e7dc      	b.n	8009254 <mktime+0x218>
 800929a:	f240 136d 	movw	r3, #365	@ 0x16d
 800929e:	e7f4      	b.n	800928a <mktime+0x24e>
 80092a0:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80092a4:	e7f1      	b.n	800928a <mktime+0x24e>
 80092a6:	f000 f881 	bl	80093ac <__tzcalc_limits>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f47f af3e 	bne.w	800912c <mktime+0xf0>
 80092b0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80092b4:	f1bb 0f01 	cmp.w	fp, #1
 80092b8:	d172      	bne.n	80093a0 <mktime+0x364>
 80092ba:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80092be:	191c      	adds	r4, r3, r4
 80092c0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80092c4:	f04f 0b01 	mov.w	fp, #1
 80092c8:	f000 f92a 	bl	8009520 <__tz_unlock>
 80092cc:	3604      	adds	r6, #4
 80092ce:	2307      	movs	r3, #7
 80092d0:	fb96 f3f3 	sdiv	r3, r6, r3
 80092d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80092d8:	1af6      	subs	r6, r6, r3
 80092da:	d456      	bmi.n	800938a <mktime+0x34e>
 80092dc:	f8c7 b020 	str.w	fp, [r7, #32]
 80092e0:	61be      	str	r6, [r7, #24]
 80092e2:	4620      	mov	r0, r4
 80092e4:	4641      	mov	r1, r8
 80092e6:	b005      	add	sp, #20
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	9a02      	ldr	r2, [sp, #8]
 80092ee:	1a12      	subs	r2, r2, r0
 80092f0:	9202      	str	r2, [sp, #8]
 80092f2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 80092f6:	eb6c 0c02 	sbc.w	ip, ip, r2
 80092fa:	9a02      	ldr	r2, [sp, #8]
 80092fc:	4294      	cmp	r4, r2
 80092fe:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8009302:	f6bf af2c 	bge.w	800915e <mktime+0x122>
 8009306:	e7d3      	b.n	80092b0 <mktime+0x274>
 8009308:	9a03      	ldr	r2, [sp, #12]
 800930a:	4294      	cmp	r4, r2
 800930c:	eb78 020b 	sbcs.w	r2, r8, fp
 8009310:	f6ff af30 	blt.w	8009174 <mktime+0x138>
 8009314:	f1ba 0f00 	cmp.w	sl, #0
 8009318:	dbcf      	blt.n	80092ba <mktime+0x27e>
 800931a:	f04f 0b01 	mov.w	fp, #1
 800931e:	e735      	b.n	800918c <mktime+0x150>
 8009320:	f04f 0b00 	mov.w	fp, #0
 8009324:	e732      	b.n	800918c <mktime+0x150>
 8009326:	1ac3      	subs	r3, r0, r3
 8009328:	e73c      	b.n	80091a4 <mktime+0x168>
 800932a:	f04f 3aff 	mov.w	sl, #4294967295
 800932e:	e74f      	b.n	80091d0 <mktime+0x194>
 8009330:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8009334:	e76c      	b.n	8009210 <mktime+0x1d4>
 8009336:	f240 136d 	movw	r3, #365	@ 0x16d
 800933a:	e769      	b.n	8009210 <mktime+0x1d4>
 800933c:	07aa      	lsls	r2, r5, #30
 800933e:	d117      	bne.n	8009370 <mktime+0x334>
 8009340:	2164      	movs	r1, #100	@ 0x64
 8009342:	fb95 f2f1 	sdiv	r2, r5, r1
 8009346:	fb01 5212 	mls	r2, r1, r2, r5
 800934a:	b9da      	cbnz	r2, 8009384 <mktime+0x348>
 800934c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009350:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8009354:	fb95 f1f2 	sdiv	r1, r5, r2
 8009358:	fb02 5511 	mls	r5, r2, r1, r5
 800935c:	2d00      	cmp	r5, #0
 800935e:	f240 126d 	movw	r2, #365	@ 0x16d
 8009362:	bf08      	it	eq
 8009364:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8009368:	4293      	cmp	r3, r2
 800936a:	bfa8      	it	ge
 800936c:	1a9b      	subge	r3, r3, r2
 800936e:	e74f      	b.n	8009210 <mktime+0x1d4>
 8009370:	f240 126d 	movw	r2, #365	@ 0x16d
 8009374:	e7f8      	b.n	8009368 <mktime+0x32c>
 8009376:	bf00      	nop
 8009378:	0800bcbc 	.word	0x0800bcbc
 800937c:	00015180 	.word	0x00015180
 8009380:	20005568 	.word	0x20005568
 8009384:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8009388:	e7ee      	b.n	8009368 <mktime+0x32c>
 800938a:	3607      	adds	r6, #7
 800938c:	e7a6      	b.n	80092dc <mktime+0x2a0>
 800938e:	f04f 34ff 	mov.w	r4, #4294967295
 8009392:	46a0      	mov	r8, r4
 8009394:	e7a5      	b.n	80092e2 <mktime+0x2a6>
 8009396:	f1ba 0f00 	cmp.w	sl, #0
 800939a:	dac1      	bge.n	8009320 <mktime+0x2e4>
 800939c:	f04f 0b00 	mov.w	fp, #0
 80093a0:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80093a4:	191c      	adds	r4, r3, r4
 80093a6:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80093aa:	e78d      	b.n	80092c8 <mktime+0x28c>

080093ac <__tzcalc_limits>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	4604      	mov	r4, r0
 80093b2:	f001 fec1 	bl	800b138 <__gettzinfo>
 80093b6:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80093ba:	429c      	cmp	r4, r3
 80093bc:	f340 80a3 	ble.w	8009506 <__tzcalc_limits+0x15a>
 80093c0:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 80093c4:	1865      	adds	r5, r4, r1
 80093c6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80093ca:	f240 126d 	movw	r2, #365	@ 0x16d
 80093ce:	10ad      	asrs	r5, r5, #2
 80093d0:	fb02 5503 	mla	r5, r2, r3, r5
 80093d4:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 80093d8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80093dc:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 80093e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e4:	441d      	add	r5, r3
 80093e6:	19a3      	adds	r3, r4, r6
 80093e8:	4e48      	ldr	r6, [pc, #288]	@ (800950c <__tzcalc_limits+0x160>)
 80093ea:	6044      	str	r4, [r0, #4]
 80093ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80093f0:	4601      	mov	r1, r0
 80093f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f6:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 80093fa:	441d      	add	r5, r3
 80093fc:	7a0b      	ldrb	r3, [r1, #8]
 80093fe:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8009402:	2b4a      	cmp	r3, #74	@ 0x4a
 8009404:	d138      	bne.n	8009478 <__tzcalc_limits+0xcc>
 8009406:	07a2      	lsls	r2, r4, #30
 8009408:	eb05 030c 	add.w	r3, r5, ip
 800940c:	d106      	bne.n	800941c <__tzcalc_limits+0x70>
 800940e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8009412:	fb94 f2fe 	sdiv	r2, r4, lr
 8009416:	fb0e 4212 	mls	r2, lr, r2, r4
 800941a:	b932      	cbnz	r2, 800942a <__tzcalc_limits+0x7e>
 800941c:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8009420:	fb94 f2fe 	sdiv	r2, r4, lr
 8009424:	fb0e 4212 	mls	r2, lr, r2, r4
 8009428:	bb1a      	cbnz	r2, 8009472 <__tzcalc_limits+0xc6>
 800942a:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800942e:	bfd4      	ite	le
 8009430:	f04f 0c00 	movle.w	ip, #0
 8009434:	f04f 0c01 	movgt.w	ip, #1
 8009438:	4463      	add	r3, ip
 800943a:	3b01      	subs	r3, #1
 800943c:	698a      	ldr	r2, [r1, #24]
 800943e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009442:	fbc3 2c06 	smlal	r2, ip, r3, r6
 8009446:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009448:	18d2      	adds	r2, r2, r3
 800944a:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800944e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8009452:	3128      	adds	r1, #40	@ 0x28
 8009454:	428f      	cmp	r7, r1
 8009456:	d1d1      	bne.n	80093fc <__tzcalc_limits+0x50>
 8009458:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800945c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8009460:	428c      	cmp	r4, r1
 8009462:	4193      	sbcs	r3, r2
 8009464:	bfb4      	ite	lt
 8009466:	2301      	movlt	r3, #1
 8009468:	2300      	movge	r3, #0
 800946a:	6003      	str	r3, [r0, #0]
 800946c:	2001      	movs	r0, #1
 800946e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009472:	f04f 0c00 	mov.w	ip, #0
 8009476:	e7df      	b.n	8009438 <__tzcalc_limits+0x8c>
 8009478:	2b44      	cmp	r3, #68	@ 0x44
 800947a:	d102      	bne.n	8009482 <__tzcalc_limits+0xd6>
 800947c:	eb05 030c 	add.w	r3, r5, ip
 8009480:	e7dc      	b.n	800943c <__tzcalc_limits+0x90>
 8009482:	07a3      	lsls	r3, r4, #30
 8009484:	d105      	bne.n	8009492 <__tzcalc_limits+0xe6>
 8009486:	2264      	movs	r2, #100	@ 0x64
 8009488:	fb94 f3f2 	sdiv	r3, r4, r2
 800948c:	fb02 4313 	mls	r3, r2, r3, r4
 8009490:	bb93      	cbnz	r3, 80094f8 <__tzcalc_limits+0x14c>
 8009492:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009496:	fb94 f3f2 	sdiv	r3, r4, r2
 800949a:	fb02 4313 	mls	r3, r2, r3, r4
 800949e:	fab3 f383 	clz	r3, r3
 80094a2:	095b      	lsrs	r3, r3, #5
 80094a4:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8009510 <__tzcalc_limits+0x164>
 80094a8:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80094ac:	425b      	negs	r3, r3
 80094ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094b2:	462a      	mov	r2, r5
 80094b4:	f04f 0800 	mov.w	r8, #0
 80094b8:	4473      	add	r3, lr
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	45c1      	cmp	r9, r8
 80094c0:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 80094c4:	dc1a      	bgt.n	80094fc <__tzcalc_limits+0x150>
 80094c6:	f102 0804 	add.w	r8, r2, #4
 80094ca:	2307      	movs	r3, #7
 80094cc:	fb98 f3f3 	sdiv	r3, r8, r3
 80094d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80094d4:	eba8 0303 	sub.w	r3, r8, r3
 80094d8:	ebbc 0c03 	subs.w	ip, ip, r3
 80094dc:	690b      	ldr	r3, [r1, #16]
 80094de:	f103 33ff 	add.w	r3, r3, #4294967295
 80094e2:	bf48      	it	mi
 80094e4:	f10c 0c07 	addmi.w	ip, ip, #7
 80094e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80094ec:	449c      	add	ip, r3
 80094ee:	45f4      	cmp	ip, lr
 80094f0:	da06      	bge.n	8009500 <__tzcalc_limits+0x154>
 80094f2:	eb02 030c 	add.w	r3, r2, ip
 80094f6:	e7a1      	b.n	800943c <__tzcalc_limits+0x90>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e7d3      	b.n	80094a4 <__tzcalc_limits+0xf8>
 80094fc:	4472      	add	r2, lr
 80094fe:	e7dc      	b.n	80094ba <__tzcalc_limits+0x10e>
 8009500:	f1ac 0c07 	sub.w	ip, ip, #7
 8009504:	e7f3      	b.n	80094ee <__tzcalc_limits+0x142>
 8009506:	2000      	movs	r0, #0
 8009508:	e7b1      	b.n	800946e <__tzcalc_limits+0xc2>
 800950a:	bf00      	nop
 800950c:	00015180 	.word	0x00015180
 8009510:	0800bd18 	.word	0x0800bd18

08009514 <__tz_lock>:
 8009514:	4801      	ldr	r0, [pc, #4]	@ (800951c <__tz_lock+0x8>)
 8009516:	f000 baa2 	b.w	8009a5e <__retarget_lock_acquire>
 800951a:	bf00      	nop
 800951c:	20005570 	.word	0x20005570

08009520 <__tz_unlock>:
 8009520:	4801      	ldr	r0, [pc, #4]	@ (8009528 <__tz_unlock+0x8>)
 8009522:	f000 ba9e 	b.w	8009a62 <__retarget_lock_release>
 8009526:	bf00      	nop
 8009528:	20005570 	.word	0x20005570

0800952c <_tzset_unlocked>:
 800952c:	4b01      	ldr	r3, [pc, #4]	@ (8009534 <_tzset_unlocked+0x8>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	f000 b802 	b.w	8009538 <_tzset_unlocked_r>
 8009534:	2000002c 	.word	0x2000002c

08009538 <_tzset_unlocked_r>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	b08d      	sub	sp, #52	@ 0x34
 800953e:	4607      	mov	r7, r0
 8009540:	f001 fdfa 	bl	800b138 <__gettzinfo>
 8009544:	49bc      	ldr	r1, [pc, #752]	@ (8009838 <_tzset_unlocked_r+0x300>)
 8009546:	4dbd      	ldr	r5, [pc, #756]	@ (800983c <_tzset_unlocked_r+0x304>)
 8009548:	4604      	mov	r4, r0
 800954a:	4638      	mov	r0, r7
 800954c:	f000 fb4e 	bl	8009bec <_getenv_r>
 8009550:	4606      	mov	r6, r0
 8009552:	bb10      	cbnz	r0, 800959a <_tzset_unlocked_r+0x62>
 8009554:	4bba      	ldr	r3, [pc, #744]	@ (8009840 <_tzset_unlocked_r+0x308>)
 8009556:	4abb      	ldr	r2, [pc, #748]	@ (8009844 <_tzset_unlocked_r+0x30c>)
 8009558:	6018      	str	r0, [r3, #0]
 800955a:	4bbb      	ldr	r3, [pc, #748]	@ (8009848 <_tzset_unlocked_r+0x310>)
 800955c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800955e:	6018      	str	r0, [r3, #0]
 8009560:	4bba      	ldr	r3, [pc, #744]	@ (800984c <_tzset_unlocked_r+0x314>)
 8009562:	6520      	str	r0, [r4, #80]	@ 0x50
 8009564:	e9c3 2200 	strd	r2, r2, [r3]
 8009568:	214a      	movs	r1, #74	@ 0x4a
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8009572:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8009576:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800957a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800957e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009582:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8009586:	6828      	ldr	r0, [r5, #0]
 8009588:	7221      	strb	r1, [r4, #8]
 800958a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800958e:	f000 fb3d 	bl	8009c0c <free>
 8009592:	602e      	str	r6, [r5, #0]
 8009594:	b00d      	add	sp, #52	@ 0x34
 8009596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959a:	6829      	ldr	r1, [r5, #0]
 800959c:	2900      	cmp	r1, #0
 800959e:	f040 808e 	bne.w	80096be <_tzset_unlocked_r+0x186>
 80095a2:	6828      	ldr	r0, [r5, #0]
 80095a4:	f000 fb32 	bl	8009c0c <free>
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7f6 fe23 	bl	80001f4 <strlen>
 80095ae:	1c41      	adds	r1, r0, #1
 80095b0:	4638      	mov	r0, r7
 80095b2:	f000 fb55 	bl	8009c60 <_malloc_r>
 80095b6:	6028      	str	r0, [r5, #0]
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f040 8086 	bne.w	80096ca <_tzset_unlocked_r+0x192>
 80095be:	4aa2      	ldr	r2, [pc, #648]	@ (8009848 <_tzset_unlocked_r+0x310>)
 80095c0:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800984c <_tzset_unlocked_r+0x314>
 80095c4:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8009840 <_tzset_unlocked_r+0x308>
 80095c8:	2300      	movs	r3, #0
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	4aa0      	ldr	r2, [pc, #640]	@ (8009850 <_tzset_unlocked_r+0x318>)
 80095ce:	f8ca 3000 	str.w	r3, [sl]
 80095d2:	2000      	movs	r0, #0
 80095d4:	2100      	movs	r1, #0
 80095d6:	e9c8 2200 	strd	r2, r2, [r8]
 80095da:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80095de:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80095e2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80095e6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80095ea:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 80095ee:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 80095f2:	224a      	movs	r2, #74	@ 0x4a
 80095f4:	7222      	strb	r2, [r4, #8]
 80095f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095f8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80095fc:	6523      	str	r3, [r4, #80]	@ 0x50
 80095fe:	7833      	ldrb	r3, [r6, #0]
 8009600:	2b3a      	cmp	r3, #58	@ 0x3a
 8009602:	bf08      	it	eq
 8009604:	3601      	addeq	r6, #1
 8009606:	7833      	ldrb	r3, [r6, #0]
 8009608:	2b3c      	cmp	r3, #60	@ 0x3c
 800960a:	d162      	bne.n	80096d2 <_tzset_unlocked_r+0x19a>
 800960c:	1c75      	adds	r5, r6, #1
 800960e:	4a91      	ldr	r2, [pc, #580]	@ (8009854 <_tzset_unlocked_r+0x31c>)
 8009610:	4991      	ldr	r1, [pc, #580]	@ (8009858 <_tzset_unlocked_r+0x320>)
 8009612:	ab0a      	add	r3, sp, #40	@ 0x28
 8009614:	4628      	mov	r0, r5
 8009616:	f7ff f95b 	bl	80088d0 <siscanf>
 800961a:	2800      	cmp	r0, #0
 800961c:	ddba      	ble.n	8009594 <_tzset_unlocked_r+0x5c>
 800961e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009620:	1eda      	subs	r2, r3, #3
 8009622:	2a07      	cmp	r2, #7
 8009624:	d8b6      	bhi.n	8009594 <_tzset_unlocked_r+0x5c>
 8009626:	5ceb      	ldrb	r3, [r5, r3]
 8009628:	2b3e      	cmp	r3, #62	@ 0x3e
 800962a:	d1b3      	bne.n	8009594 <_tzset_unlocked_r+0x5c>
 800962c:	3602      	adds	r6, #2
 800962e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009630:	18f5      	adds	r5, r6, r3
 8009632:	5cf3      	ldrb	r3, [r6, r3]
 8009634:	2b2d      	cmp	r3, #45	@ 0x2d
 8009636:	d15a      	bne.n	80096ee <_tzset_unlocked_r+0x1b6>
 8009638:	3501      	adds	r5, #1
 800963a:	f04f 39ff 	mov.w	r9, #4294967295
 800963e:	2300      	movs	r3, #0
 8009640:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009644:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009648:	af08      	add	r7, sp, #32
 800964a:	ab0a      	add	r3, sp, #40	@ 0x28
 800964c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	f10d 031e 	add.w	r3, sp, #30
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4980      	ldr	r1, [pc, #512]	@ (800985c <_tzset_unlocked_r+0x324>)
 800965a:	ab0a      	add	r3, sp, #40	@ 0x28
 800965c:	aa07      	add	r2, sp, #28
 800965e:	4628      	mov	r0, r5
 8009660:	f7ff f936 	bl	80088d0 <siscanf>
 8009664:	2800      	cmp	r0, #0
 8009666:	dd95      	ble.n	8009594 <_tzset_unlocked_r+0x5c>
 8009668:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800966c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8009670:	223c      	movs	r2, #60	@ 0x3c
 8009672:	fb02 6603 	mla	r6, r2, r3, r6
 8009676:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800967a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800967e:	fb02 6603 	mla	r6, r2, r3, r6
 8009682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009684:	fb09 f606 	mul.w	r6, r9, r6
 8009688:	eb05 0903 	add.w	r9, r5, r3
 800968c:	5ceb      	ldrb	r3, [r5, r3]
 800968e:	2b3c      	cmp	r3, #60	@ 0x3c
 8009690:	f040 80ee 	bne.w	8009870 <_tzset_unlocked_r+0x338>
 8009694:	f109 0501 	add.w	r5, r9, #1
 8009698:	4a71      	ldr	r2, [pc, #452]	@ (8009860 <_tzset_unlocked_r+0x328>)
 800969a:	496f      	ldr	r1, [pc, #444]	@ (8009858 <_tzset_unlocked_r+0x320>)
 800969c:	ab0a      	add	r3, sp, #40	@ 0x28
 800969e:	4628      	mov	r0, r5
 80096a0:	f7ff f916 	bl	80088d0 <siscanf>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	dc28      	bgt.n	80096fa <_tzset_unlocked_r+0x1c2>
 80096a8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80096ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80096ae:	d124      	bne.n	80096fa <_tzset_unlocked_r+0x1c2>
 80096b0:	4b68      	ldr	r3, [pc, #416]	@ (8009854 <_tzset_unlocked_r+0x31c>)
 80096b2:	62a6      	str	r6, [r4, #40]	@ 0x28
 80096b4:	e9c8 3300 	strd	r3, r3, [r8]
 80096b8:	f8ca 6000 	str.w	r6, [sl]
 80096bc:	e76a      	b.n	8009594 <_tzset_unlocked_r+0x5c>
 80096be:	f7f6 fd8f 	bl	80001e0 <strcmp>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f47f af6d 	bne.w	80095a2 <_tzset_unlocked_r+0x6a>
 80096c8:	e764      	b.n	8009594 <_tzset_unlocked_r+0x5c>
 80096ca:	4631      	mov	r1, r6
 80096cc:	f000 f9cb 	bl	8009a66 <strcpy>
 80096d0:	e775      	b.n	80095be <_tzset_unlocked_r+0x86>
 80096d2:	4a60      	ldr	r2, [pc, #384]	@ (8009854 <_tzset_unlocked_r+0x31c>)
 80096d4:	4963      	ldr	r1, [pc, #396]	@ (8009864 <_tzset_unlocked_r+0x32c>)
 80096d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80096d8:	4630      	mov	r0, r6
 80096da:	f7ff f8f9 	bl	80088d0 <siscanf>
 80096de:	2800      	cmp	r0, #0
 80096e0:	f77f af58 	ble.w	8009594 <_tzset_unlocked_r+0x5c>
 80096e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096e6:	3b03      	subs	r3, #3
 80096e8:	2b07      	cmp	r3, #7
 80096ea:	d9a0      	bls.n	800962e <_tzset_unlocked_r+0xf6>
 80096ec:	e752      	b.n	8009594 <_tzset_unlocked_r+0x5c>
 80096ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80096f0:	bf08      	it	eq
 80096f2:	3501      	addeq	r5, #1
 80096f4:	f04f 0901 	mov.w	r9, #1
 80096f8:	e7a1      	b.n	800963e <_tzset_unlocked_r+0x106>
 80096fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fc:	1eda      	subs	r2, r3, #3
 80096fe:	2a07      	cmp	r2, #7
 8009700:	f63f af48 	bhi.w	8009594 <_tzset_unlocked_r+0x5c>
 8009704:	5ceb      	ldrb	r3, [r5, r3]
 8009706:	2b3e      	cmp	r3, #62	@ 0x3e
 8009708:	f47f af44 	bne.w	8009594 <_tzset_unlocked_r+0x5c>
 800970c:	f109 0902 	add.w	r9, r9, #2
 8009710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009712:	eb09 0503 	add.w	r5, r9, r3
 8009716:	f819 3003 	ldrb.w	r3, [r9, r3]
 800971a:	2b2d      	cmp	r3, #45	@ 0x2d
 800971c:	f040 80b7 	bne.w	800988e <_tzset_unlocked_r+0x356>
 8009720:	3501      	adds	r5, #1
 8009722:	f04f 39ff 	mov.w	r9, #4294967295
 8009726:	2300      	movs	r3, #0
 8009728:	f8ad 301c 	strh.w	r3, [sp, #28]
 800972c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009730:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009734:	930a      	str	r3, [sp, #40]	@ 0x28
 8009736:	ab0a      	add	r3, sp, #40	@ 0x28
 8009738:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	f10d 031e 	add.w	r3, sp, #30
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	4945      	ldr	r1, [pc, #276]	@ (800985c <_tzset_unlocked_r+0x324>)
 8009746:	ab0a      	add	r3, sp, #40	@ 0x28
 8009748:	aa07      	add	r2, sp, #28
 800974a:	4628      	mov	r0, r5
 800974c:	f7ff f8c0 	bl	80088d0 <siscanf>
 8009750:	2800      	cmp	r0, #0
 8009752:	f300 80a2 	bgt.w	800989a <_tzset_unlocked_r+0x362>
 8009756:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800975e:	4627      	mov	r7, r4
 8009760:	441d      	add	r5, r3
 8009762:	f04f 0b00 	mov.w	fp, #0
 8009766:	782b      	ldrb	r3, [r5, #0]
 8009768:	2b2c      	cmp	r3, #44	@ 0x2c
 800976a:	bf08      	it	eq
 800976c:	3501      	addeq	r5, #1
 800976e:	f895 9000 	ldrb.w	r9, [r5]
 8009772:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8009776:	f040 80a3 	bne.w	80098c0 <_tzset_unlocked_r+0x388>
 800977a:	ab0a      	add	r3, sp, #40	@ 0x28
 800977c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8009780:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009784:	aa09      	add	r2, sp, #36	@ 0x24
 8009786:	9200      	str	r2, [sp, #0]
 8009788:	4937      	ldr	r1, [pc, #220]	@ (8009868 <_tzset_unlocked_r+0x330>)
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff f89d 	bl	80088d0 <siscanf>
 8009796:	2803      	cmp	r0, #3
 8009798:	f47f aefc 	bne.w	8009594 <_tzset_unlocked_r+0x5c>
 800979c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80097a0:	1e4b      	subs	r3, r1, #1
 80097a2:	2b0b      	cmp	r3, #11
 80097a4:	f63f aef6 	bhi.w	8009594 <_tzset_unlocked_r+0x5c>
 80097a8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 80097ac:	1e53      	subs	r3, r2, #1
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	f63f aef0 	bhi.w	8009594 <_tzset_unlocked_r+0x5c>
 80097b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80097b8:	2b06      	cmp	r3, #6
 80097ba:	f63f aeeb 	bhi.w	8009594 <_tzset_unlocked_r+0x5c>
 80097be:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80097c2:	f887 9008 	strb.w	r9, [r7, #8]
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ca:	eb05 0903 	add.w	r9, r5, r3
 80097ce:	2500      	movs	r5, #0
 80097d0:	f04f 0302 	mov.w	r3, #2
 80097d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80097d8:	f8ad 501e 	strh.w	r5, [sp, #30]
 80097dc:	f8ad 5020 	strh.w	r5, [sp, #32]
 80097e0:	950a      	str	r5, [sp, #40]	@ 0x28
 80097e2:	f899 3000 	ldrb.w	r3, [r9]
 80097e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80097e8:	f040 8096 	bne.w	8009918 <_tzset_unlocked_r+0x3e0>
 80097ec:	ab0a      	add	r3, sp, #40	@ 0x28
 80097ee:	aa08      	add	r2, sp, #32
 80097f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80097f4:	f10d 021e 	add.w	r2, sp, #30
 80097f8:	9200      	str	r2, [sp, #0]
 80097fa:	491c      	ldr	r1, [pc, #112]	@ (800986c <_tzset_unlocked_r+0x334>)
 80097fc:	9303      	str	r3, [sp, #12]
 80097fe:	aa07      	add	r2, sp, #28
 8009800:	4648      	mov	r0, r9
 8009802:	f7ff f865 	bl	80088d0 <siscanf>
 8009806:	42a8      	cmp	r0, r5
 8009808:	f300 8086 	bgt.w	8009918 <_tzset_unlocked_r+0x3e0>
 800980c:	214a      	movs	r1, #74	@ 0x4a
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8009816:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800981a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800981e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8009822:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8009826:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800982a:	7221      	strb	r1, [r4, #8]
 800982c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800982e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009832:	6525      	str	r5, [r4, #80]	@ 0x50
 8009834:	e6ae      	b.n	8009594 <_tzset_unlocked_r+0x5c>
 8009836:	bf00      	nop
 8009838:	0800bb6a 	.word	0x0800bb6a
 800983c:	20005548 	.word	0x20005548
 8009840:	20005564 	.word	0x20005564
 8009844:	0800bb6d 	.word	0x0800bb6d
 8009848:	20005568 	.word	0x20005568
 800984c:	20000024 	.word	0x20000024
 8009850:	0800bcba 	.word	0x0800bcba
 8009854:	20005558 	.word	0x20005558
 8009858:	0800bb71 	.word	0x0800bb71
 800985c:	0800bba6 	.word	0x0800bba6
 8009860:	2000554c 	.word	0x2000554c
 8009864:	0800bb84 	.word	0x0800bb84
 8009868:	0800bb92 	.word	0x0800bb92
 800986c:	0800bba5 	.word	0x0800bba5
 8009870:	4a3e      	ldr	r2, [pc, #248]	@ (800996c <_tzset_unlocked_r+0x434>)
 8009872:	493f      	ldr	r1, [pc, #252]	@ (8009970 <_tzset_unlocked_r+0x438>)
 8009874:	ab0a      	add	r3, sp, #40	@ 0x28
 8009876:	4648      	mov	r0, r9
 8009878:	f7ff f82a 	bl	80088d0 <siscanf>
 800987c:	2800      	cmp	r0, #0
 800987e:	f77f af17 	ble.w	80096b0 <_tzset_unlocked_r+0x178>
 8009882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009884:	3b03      	subs	r3, #3
 8009886:	2b07      	cmp	r3, #7
 8009888:	f67f af42 	bls.w	8009710 <_tzset_unlocked_r+0x1d8>
 800988c:	e682      	b.n	8009594 <_tzset_unlocked_r+0x5c>
 800988e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009890:	bf08      	it	eq
 8009892:	3501      	addeq	r5, #1
 8009894:	f04f 0901 	mov.w	r9, #1
 8009898:	e745      	b.n	8009726 <_tzset_unlocked_r+0x1ee>
 800989a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800989e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80098a2:	213c      	movs	r1, #60	@ 0x3c
 80098a4:	fb01 3302 	mla	r3, r1, r2, r3
 80098a8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80098ac:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80098b0:	fb01 3302 	mla	r3, r1, r2, r3
 80098b4:	fb09 f303 	mul.w	r3, r9, r3
 80098b8:	e74f      	b.n	800975a <_tzset_unlocked_r+0x222>
 80098ba:	f04f 0b01 	mov.w	fp, #1
 80098be:	e752      	b.n	8009766 <_tzset_unlocked_r+0x22e>
 80098c0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 80098c4:	bf06      	itte	eq
 80098c6:	3501      	addeq	r5, #1
 80098c8:	464b      	moveq	r3, r9
 80098ca:	2344      	movne	r3, #68	@ 0x44
 80098cc:	220a      	movs	r2, #10
 80098ce:	a90b      	add	r1, sp, #44	@ 0x2c
 80098d0:	4628      	mov	r0, r5
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	f000 fac0 	bl	8009e58 <strtoul>
 80098d8:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80098dc:	9b05      	ldr	r3, [sp, #20]
 80098de:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80098e2:	45a9      	cmp	r9, r5
 80098e4:	d114      	bne.n	8009910 <_tzset_unlocked_r+0x3d8>
 80098e6:	234d      	movs	r3, #77	@ 0x4d
 80098e8:	f1bb 0f00 	cmp.w	fp, #0
 80098ec:	d107      	bne.n	80098fe <_tzset_unlocked_r+0x3c6>
 80098ee:	7223      	strb	r3, [r4, #8]
 80098f0:	2103      	movs	r1, #3
 80098f2:	2302      	movs	r3, #2
 80098f4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80098f8:	f8c4 b014 	str.w	fp, [r4, #20]
 80098fc:	e767      	b.n	80097ce <_tzset_unlocked_r+0x296>
 80098fe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8009902:	220b      	movs	r2, #11
 8009904:	2301      	movs	r3, #1
 8009906:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800990a:	2300      	movs	r3, #0
 800990c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800990e:	e75e      	b.n	80097ce <_tzset_unlocked_r+0x296>
 8009910:	b280      	uxth	r0, r0
 8009912:	723b      	strb	r3, [r7, #8]
 8009914:	6178      	str	r0, [r7, #20]
 8009916:	e75a      	b.n	80097ce <_tzset_unlocked_r+0x296>
 8009918:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800991c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009920:	213c      	movs	r1, #60	@ 0x3c
 8009922:	fb01 3302 	mla	r3, r1, r2, r3
 8009926:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800992a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800992e:	fb01 3302 	mla	r3, r1, r2, r3
 8009932:	61bb      	str	r3, [r7, #24]
 8009934:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009936:	3728      	adds	r7, #40	@ 0x28
 8009938:	444d      	add	r5, r9
 800993a:	f1bb 0f00 	cmp.w	fp, #0
 800993e:	d0bc      	beq.n	80098ba <_tzset_unlocked_r+0x382>
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	6523      	str	r3, [r4, #80]	@ 0x50
 8009944:	4b0b      	ldr	r3, [pc, #44]	@ (8009974 <_tzset_unlocked_r+0x43c>)
 8009946:	f8c8 3000 	str.w	r3, [r8]
 800994a:	6860      	ldr	r0, [r4, #4]
 800994c:	4b07      	ldr	r3, [pc, #28]	@ (800996c <_tzset_unlocked_r+0x434>)
 800994e:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009950:	f8c8 3004 	str.w	r3, [r8, #4]
 8009954:	f7ff fd2a 	bl	80093ac <__tzcalc_limits>
 8009958:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800995a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800995c:	f8ca 2000 	str.w	r2, [sl]
 8009960:	1a9b      	subs	r3, r3, r2
 8009962:	4a05      	ldr	r2, [pc, #20]	@ (8009978 <_tzset_unlocked_r+0x440>)
 8009964:	bf18      	it	ne
 8009966:	2301      	movne	r3, #1
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e613      	b.n	8009594 <_tzset_unlocked_r+0x5c>
 800996c:	2000554c 	.word	0x2000554c
 8009970:	0800bb84 	.word	0x0800bb84
 8009974:	20005558 	.word	0x20005558
 8009978:	20005568 	.word	0x20005568

0800997c <_close_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_close_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f8 f954 	bl	8001c34 <_close>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_close_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_close_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	2000556c 	.word	0x2000556c

0800999c <_lseek_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d07      	ldr	r5, [pc, #28]	@ (80099bc <_lseek_r+0x20>)
 80099a0:	4604      	mov	r4, r0
 80099a2:	4608      	mov	r0, r1
 80099a4:	4611      	mov	r1, r2
 80099a6:	2200      	movs	r2, #0
 80099a8:	602a      	str	r2, [r5, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	f7f8 f969 	bl	8001c82 <_lseek>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_lseek_r+0x1e>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_lseek_r+0x1e>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	2000556c 	.word	0x2000556c

080099c0 <_read_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	@ (80099e0 <_read_r+0x20>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7f8 f8f7 	bl	8001bc2 <_read>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_read_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_read_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	2000556c 	.word	0x2000556c

080099e4 <_write_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	@ (8009a04 <_write_r+0x20>)
 80099e8:	4604      	mov	r4, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7f8 f902 	bl	8001bfc <_write>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_write_r+0x1e>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_write_r+0x1e>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	2000556c 	.word	0x2000556c

08009a08 <__errno>:
 8009a08:	4b01      	ldr	r3, [pc, #4]	@ (8009a10 <__errno+0x8>)
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	2000002c 	.word	0x2000002c

08009a14 <__libc_init_array>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	4d0d      	ldr	r5, [pc, #52]	@ (8009a4c <__libc_init_array+0x38>)
 8009a18:	4c0d      	ldr	r4, [pc, #52]	@ (8009a50 <__libc_init_array+0x3c>)
 8009a1a:	1b64      	subs	r4, r4, r5
 8009a1c:	10a4      	asrs	r4, r4, #2
 8009a1e:	2600      	movs	r6, #0
 8009a20:	42a6      	cmp	r6, r4
 8009a22:	d109      	bne.n	8009a38 <__libc_init_array+0x24>
 8009a24:	4d0b      	ldr	r5, [pc, #44]	@ (8009a54 <__libc_init_array+0x40>)
 8009a26:	4c0c      	ldr	r4, [pc, #48]	@ (8009a58 <__libc_init_array+0x44>)
 8009a28:	f001 fd6c 	bl	800b504 <_init>
 8009a2c:	1b64      	subs	r4, r4, r5
 8009a2e:	10a4      	asrs	r4, r4, #2
 8009a30:	2600      	movs	r6, #0
 8009a32:	42a6      	cmp	r6, r4
 8009a34:	d105      	bne.n	8009a42 <__libc_init_array+0x2e>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3c:	4798      	blx	r3
 8009a3e:	3601      	adds	r6, #1
 8009a40:	e7ee      	b.n	8009a20 <__libc_init_array+0xc>
 8009a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a46:	4798      	blx	r3
 8009a48:	3601      	adds	r6, #1
 8009a4a:	e7f2      	b.n	8009a32 <__libc_init_array+0x1e>
 8009a4c:	0800bec0 	.word	0x0800bec0
 8009a50:	0800bec0 	.word	0x0800bec0
 8009a54:	0800bec0 	.word	0x0800bec0
 8009a58:	0800bec4 	.word	0x0800bec4

08009a5c <__retarget_lock_init_recursive>:
 8009a5c:	4770      	bx	lr

08009a5e <__retarget_lock_acquire>:
 8009a5e:	4770      	bx	lr

08009a60 <__retarget_lock_acquire_recursive>:
 8009a60:	4770      	bx	lr

08009a62 <__retarget_lock_release>:
 8009a62:	4770      	bx	lr

08009a64 <__retarget_lock_release_recursive>:
 8009a64:	4770      	bx	lr

08009a66 <strcpy>:
 8009a66:	4603      	mov	r3, r0
 8009a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a6c:	f803 2b01 	strb.w	r2, [r3], #1
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	d1f9      	bne.n	8009a68 <strcpy+0x2>
 8009a74:	4770      	bx	lr

08009a76 <memcpy>:
 8009a76:	440a      	add	r2, r1
 8009a78:	4291      	cmp	r1, r2
 8009a7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a7e:	d100      	bne.n	8009a82 <memcpy+0xc>
 8009a80:	4770      	bx	lr
 8009a82:	b510      	push	{r4, lr}
 8009a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a8c:	4291      	cmp	r1, r2
 8009a8e:	d1f9      	bne.n	8009a84 <memcpy+0xe>
 8009a90:	bd10      	pop	{r4, pc}
	...

08009a94 <__assert_func>:
 8009a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a96:	4614      	mov	r4, r2
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4b09      	ldr	r3, [pc, #36]	@ (8009ac0 <__assert_func+0x2c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	68d8      	ldr	r0, [r3, #12]
 8009aa2:	b14c      	cbz	r4, 8009ab8 <__assert_func+0x24>
 8009aa4:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <__assert_func+0x30>)
 8009aa6:	9100      	str	r1, [sp, #0]
 8009aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009aac:	4906      	ldr	r1, [pc, #24]	@ (8009ac8 <__assert_func+0x34>)
 8009aae:	462b      	mov	r3, r5
 8009ab0:	f001 f9cc 	bl	800ae4c <fiprintf>
 8009ab4:	f001 fc1c 	bl	800b2f0 <abort>
 8009ab8:	4b04      	ldr	r3, [pc, #16]	@ (8009acc <__assert_func+0x38>)
 8009aba:	461c      	mov	r4, r3
 8009abc:	e7f3      	b.n	8009aa6 <__assert_func+0x12>
 8009abe:	bf00      	nop
 8009ac0:	2000002c 	.word	0x2000002c
 8009ac4:	0800bbb8 	.word	0x0800bbb8
 8009ac8:	0800bbc5 	.word	0x0800bbc5
 8009acc:	0800bcba 	.word	0x0800bcba

08009ad0 <div>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	fb91 f4f2 	sdiv	r4, r1, r2
 8009ad6:	fb02 1114 	mls	r1, r2, r4, r1
 8009ada:	6004      	str	r4, [r0, #0]
 8009adc:	6041      	str	r1, [r0, #4]
 8009ade:	bd10      	pop	{r4, pc}

08009ae0 <_free_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d041      	beq.n	8009b6c <_free_r+0x8c>
 8009ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aec:	1f0c      	subs	r4, r1, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	bfb8      	it	lt
 8009af2:	18e4      	addlt	r4, r4, r3
 8009af4:	f000 f934 	bl	8009d60 <__malloc_lock>
 8009af8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b70 <_free_r+0x90>)
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	b933      	cbnz	r3, 8009b0c <_free_r+0x2c>
 8009afe:	6063      	str	r3, [r4, #4]
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	4628      	mov	r0, r5
 8009b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b08:	f000 b930 	b.w	8009d6c <__malloc_unlock>
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d908      	bls.n	8009b22 <_free_r+0x42>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	1821      	adds	r1, r4, r0
 8009b14:	428b      	cmp	r3, r1
 8009b16:	bf01      	itttt	eq
 8009b18:	6819      	ldreq	r1, [r3, #0]
 8009b1a:	685b      	ldreq	r3, [r3, #4]
 8009b1c:	1809      	addeq	r1, r1, r0
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	e7ed      	b.n	8009afe <_free_r+0x1e>
 8009b22:	461a      	mov	r2, r3
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	b10b      	cbz	r3, 8009b2c <_free_r+0x4c>
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	d9fa      	bls.n	8009b22 <_free_r+0x42>
 8009b2c:	6811      	ldr	r1, [r2, #0]
 8009b2e:	1850      	adds	r0, r2, r1
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d10b      	bne.n	8009b4c <_free_r+0x6c>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	4401      	add	r1, r0
 8009b38:	1850      	adds	r0, r2, r1
 8009b3a:	4283      	cmp	r3, r0
 8009b3c:	6011      	str	r1, [r2, #0]
 8009b3e:	d1e0      	bne.n	8009b02 <_free_r+0x22>
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	6053      	str	r3, [r2, #4]
 8009b46:	4408      	add	r0, r1
 8009b48:	6010      	str	r0, [r2, #0]
 8009b4a:	e7da      	b.n	8009b02 <_free_r+0x22>
 8009b4c:	d902      	bls.n	8009b54 <_free_r+0x74>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	e7d6      	b.n	8009b02 <_free_r+0x22>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	1821      	adds	r1, r4, r0
 8009b58:	428b      	cmp	r3, r1
 8009b5a:	bf04      	itt	eq
 8009b5c:	6819      	ldreq	r1, [r3, #0]
 8009b5e:	685b      	ldreq	r3, [r3, #4]
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	bf04      	itt	eq
 8009b64:	1809      	addeq	r1, r1, r0
 8009b66:	6021      	streq	r1, [r4, #0]
 8009b68:	6054      	str	r4, [r2, #4]
 8009b6a:	e7ca      	b.n	8009b02 <_free_r+0x22>
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}
 8009b6e:	bf00      	nop
 8009b70:	20005578 	.word	0x20005578

08009b74 <_findenv_r>:
 8009b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8009be8 <_findenv_r+0x74>
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	4689      	mov	r9, r1
 8009b80:	4617      	mov	r7, r2
 8009b82:	f001 fbbd 	bl	800b300 <__env_lock>
 8009b86:	f8da 4000 	ldr.w	r4, [sl]
 8009b8a:	b134      	cbz	r4, 8009b9a <_findenv_r+0x26>
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	4698      	mov	r8, r3
 8009b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b94:	b13a      	cbz	r2, 8009ba6 <_findenv_r+0x32>
 8009b96:	2a3d      	cmp	r2, #61	@ 0x3d
 8009b98:	d1f9      	bne.n	8009b8e <_findenv_r+0x1a>
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f001 fbb6 	bl	800b30c <__env_unlock>
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	eba8 0809 	sub.w	r8, r8, r9
 8009baa:	46a3      	mov	fp, r4
 8009bac:	f854 0b04 	ldr.w	r0, [r4], #4
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d0f2      	beq.n	8009b9a <_findenv_r+0x26>
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f001 fa63 	bl	800b082 <strncmp>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1f4      	bne.n	8009baa <_findenv_r+0x36>
 8009bc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009bc4:	eb03 0508 	add.w	r5, r3, r8
 8009bc8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009bcc:	2b3d      	cmp	r3, #61	@ 0x3d
 8009bce:	d1ec      	bne.n	8009baa <_findenv_r+0x36>
 8009bd0:	f8da 3000 	ldr.w	r3, [sl]
 8009bd4:	ebab 0303 	sub.w	r3, fp, r3
 8009bd8:	109b      	asrs	r3, r3, #2
 8009bda:	4630      	mov	r0, r6
 8009bdc:	603b      	str	r3, [r7, #0]
 8009bde:	f001 fb95 	bl	800b30c <__env_unlock>
 8009be2:	1c68      	adds	r0, r5, #1
 8009be4:	e7dd      	b.n	8009ba2 <_findenv_r+0x2e>
 8009be6:	bf00      	nop
 8009be8:	20000004 	.word	0x20000004

08009bec <_getenv_r>:
 8009bec:	b507      	push	{r0, r1, r2, lr}
 8009bee:	aa01      	add	r2, sp, #4
 8009bf0:	f7ff ffc0 	bl	8009b74 <_findenv_r>
 8009bf4:	b003      	add	sp, #12
 8009bf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009bfc <malloc>:
 8009bfc:	4b02      	ldr	r3, [pc, #8]	@ (8009c08 <malloc+0xc>)
 8009bfe:	4601      	mov	r1, r0
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	f000 b82d 	b.w	8009c60 <_malloc_r>
 8009c06:	bf00      	nop
 8009c08:	2000002c 	.word	0x2000002c

08009c0c <free>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	@ (8009c18 <free+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f7ff bf65 	b.w	8009ae0 <_free_r>
 8009c16:	bf00      	nop
 8009c18:	2000002c 	.word	0x2000002c

08009c1c <sbrk_aligned>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009c5c <sbrk_aligned+0x40>)
 8009c20:	460c      	mov	r4, r1
 8009c22:	6831      	ldr	r1, [r6, #0]
 8009c24:	4605      	mov	r5, r0
 8009c26:	b911      	cbnz	r1, 8009c2e <sbrk_aligned+0x12>
 8009c28:	f001 fb52 	bl	800b2d0 <_sbrk_r>
 8009c2c:	6030      	str	r0, [r6, #0]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f001 fb4d 	bl	800b2d0 <_sbrk_r>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d103      	bne.n	8009c42 <sbrk_aligned+0x26>
 8009c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c3e:	4620      	mov	r0, r4
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
 8009c42:	1cc4      	adds	r4, r0, #3
 8009c44:	f024 0403 	bic.w	r4, r4, #3
 8009c48:	42a0      	cmp	r0, r4
 8009c4a:	d0f8      	beq.n	8009c3e <sbrk_aligned+0x22>
 8009c4c:	1a21      	subs	r1, r4, r0
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f001 fb3e 	bl	800b2d0 <_sbrk_r>
 8009c54:	3001      	adds	r0, #1
 8009c56:	d1f2      	bne.n	8009c3e <sbrk_aligned+0x22>
 8009c58:	e7ef      	b.n	8009c3a <sbrk_aligned+0x1e>
 8009c5a:	bf00      	nop
 8009c5c:	20005574 	.word	0x20005574

08009c60 <_malloc_r>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	1ccd      	adds	r5, r1, #3
 8009c66:	f025 0503 	bic.w	r5, r5, #3
 8009c6a:	3508      	adds	r5, #8
 8009c6c:	2d0c      	cmp	r5, #12
 8009c6e:	bf38      	it	cc
 8009c70:	250c      	movcc	r5, #12
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	db01      	blt.n	8009c7c <_malloc_r+0x1c>
 8009c78:	42a9      	cmp	r1, r5
 8009c7a:	d904      	bls.n	8009c86 <_malloc_r+0x26>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	2000      	movs	r0, #0
 8009c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d5c <_malloc_r+0xfc>
 8009c8a:	f000 f869 	bl	8009d60 <__malloc_lock>
 8009c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c92:	461c      	mov	r4, r3
 8009c94:	bb44      	cbnz	r4, 8009ce8 <_malloc_r+0x88>
 8009c96:	4629      	mov	r1, r5
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff ffbf 	bl	8009c1c <sbrk_aligned>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	d158      	bne.n	8009d56 <_malloc_r+0xf6>
 8009ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ca8:	4627      	mov	r7, r4
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d143      	bne.n	8009d36 <_malloc_r+0xd6>
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d04b      	beq.n	8009d4a <_malloc_r+0xea>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	eb04 0903 	add.w	r9, r4, r3
 8009cbc:	f001 fb08 	bl	800b2d0 <_sbrk_r>
 8009cc0:	4581      	cmp	r9, r0
 8009cc2:	d142      	bne.n	8009d4a <_malloc_r+0xea>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	1a6d      	subs	r5, r5, r1
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ffa6 	bl	8009c1c <sbrk_aligned>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d03a      	beq.n	8009d4a <_malloc_r+0xea>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	442b      	add	r3, r5
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	f8d8 3000 	ldr.w	r3, [r8]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	bb62      	cbnz	r2, 8009d3c <_malloc_r+0xdc>
 8009ce2:	f8c8 7000 	str.w	r7, [r8]
 8009ce6:	e00f      	b.n	8009d08 <_malloc_r+0xa8>
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	1b52      	subs	r2, r2, r5
 8009cec:	d420      	bmi.n	8009d30 <_malloc_r+0xd0>
 8009cee:	2a0b      	cmp	r2, #11
 8009cf0:	d917      	bls.n	8009d22 <_malloc_r+0xc2>
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	6025      	str	r5, [r4, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	6059      	strne	r1, [r3, #4]
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	bf08      	it	eq
 8009d00:	f8c8 1000 	streq.w	r1, [r8]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f82f 	bl	8009d6c <__malloc_unlock>
 8009d0e:	f104 000b 	add.w	r0, r4, #11
 8009d12:	1d23      	adds	r3, r4, #4
 8009d14:	f020 0007 	bic.w	r0, r0, #7
 8009d18:	1ac2      	subs	r2, r0, r3
 8009d1a:	bf1c      	itt	ne
 8009d1c:	1a1b      	subne	r3, r3, r0
 8009d1e:	50a3      	strne	r3, [r4, r2]
 8009d20:	e7af      	b.n	8009c82 <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	f8c8 2000 	streq.w	r2, [r8]
 8009d2c:	605a      	strne	r2, [r3, #4]
 8009d2e:	e7eb      	b.n	8009d08 <_malloc_r+0xa8>
 8009d30:	4623      	mov	r3, r4
 8009d32:	6864      	ldr	r4, [r4, #4]
 8009d34:	e7ae      	b.n	8009c94 <_malloc_r+0x34>
 8009d36:	463c      	mov	r4, r7
 8009d38:	687f      	ldr	r7, [r7, #4]
 8009d3a:	e7b6      	b.n	8009caa <_malloc_r+0x4a>
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d1fb      	bne.n	8009d3c <_malloc_r+0xdc>
 8009d44:	2300      	movs	r3, #0
 8009d46:	6053      	str	r3, [r2, #4]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa8>
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f80c 	bl	8009d6c <__malloc_unlock>
 8009d54:	e794      	b.n	8009c80 <_malloc_r+0x20>
 8009d56:	6005      	str	r5, [r0, #0]
 8009d58:	e7d6      	b.n	8009d08 <_malloc_r+0xa8>
 8009d5a:	bf00      	nop
 8009d5c:	20005578 	.word	0x20005578

08009d60 <__malloc_lock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	@ (8009d68 <__malloc_lock+0x8>)
 8009d62:	f7ff be7d 	b.w	8009a60 <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	20005572 	.word	0x20005572

08009d6c <__malloc_unlock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	@ (8009d74 <__malloc_unlock+0x8>)
 8009d6e:	f7ff be79 	b.w	8009a64 <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	20005572 	.word	0x20005572

08009d78 <_strtoul_l.isra.0>:
 8009d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	4e34      	ldr	r6, [pc, #208]	@ (8009e50 <_strtoul_l.isra.0+0xd8>)
 8009d7e:	4686      	mov	lr, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	4628      	mov	r0, r5
 8009d84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d88:	5d37      	ldrb	r7, [r6, r4]
 8009d8a:	f017 0708 	ands.w	r7, r7, #8
 8009d8e:	d1f8      	bne.n	8009d82 <_strtoul_l.isra.0+0xa>
 8009d90:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d92:	d110      	bne.n	8009db6 <_strtoul_l.isra.0+0x3e>
 8009d94:	782c      	ldrb	r4, [r5, #0]
 8009d96:	2701      	movs	r7, #1
 8009d98:	1c85      	adds	r5, r0, #2
 8009d9a:	f033 0010 	bics.w	r0, r3, #16
 8009d9e:	d115      	bne.n	8009dcc <_strtoul_l.isra.0+0x54>
 8009da0:	2c30      	cmp	r4, #48	@ 0x30
 8009da2:	d10d      	bne.n	8009dc0 <_strtoul_l.isra.0+0x48>
 8009da4:	7828      	ldrb	r0, [r5, #0]
 8009da6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009daa:	2858      	cmp	r0, #88	@ 0x58
 8009dac:	d108      	bne.n	8009dc0 <_strtoul_l.isra.0+0x48>
 8009dae:	786c      	ldrb	r4, [r5, #1]
 8009db0:	3502      	adds	r5, #2
 8009db2:	2310      	movs	r3, #16
 8009db4:	e00a      	b.n	8009dcc <_strtoul_l.isra.0+0x54>
 8009db6:	2c2b      	cmp	r4, #43	@ 0x2b
 8009db8:	bf04      	itt	eq
 8009dba:	782c      	ldrbeq	r4, [r5, #0]
 8009dbc:	1c85      	addeq	r5, r0, #2
 8009dbe:	e7ec      	b.n	8009d9a <_strtoul_l.isra.0+0x22>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1f6      	bne.n	8009db2 <_strtoul_l.isra.0+0x3a>
 8009dc4:	2c30      	cmp	r4, #48	@ 0x30
 8009dc6:	bf14      	ite	ne
 8009dc8:	230a      	movne	r3, #10
 8009dca:	2308      	moveq	r3, #8
 8009dcc:	f04f 38ff 	mov.w	r8, #4294967295
 8009dd0:	2600      	movs	r6, #0
 8009dd2:	fbb8 f8f3 	udiv	r8, r8, r3
 8009dd6:	fb03 f908 	mul.w	r9, r3, r8
 8009dda:	ea6f 0909 	mvn.w	r9, r9
 8009dde:	4630      	mov	r0, r6
 8009de0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009de4:	f1bc 0f09 	cmp.w	ip, #9
 8009de8:	d810      	bhi.n	8009e0c <_strtoul_l.isra.0+0x94>
 8009dea:	4664      	mov	r4, ip
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	dd1e      	ble.n	8009e2e <_strtoul_l.isra.0+0xb6>
 8009df0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009df4:	d007      	beq.n	8009e06 <_strtoul_l.isra.0+0x8e>
 8009df6:	4580      	cmp	r8, r0
 8009df8:	d316      	bcc.n	8009e28 <_strtoul_l.isra.0+0xb0>
 8009dfa:	d101      	bne.n	8009e00 <_strtoul_l.isra.0+0x88>
 8009dfc:	45a1      	cmp	r9, r4
 8009dfe:	db13      	blt.n	8009e28 <_strtoul_l.isra.0+0xb0>
 8009e00:	fb00 4003 	mla	r0, r0, r3, r4
 8009e04:	2601      	movs	r6, #1
 8009e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e0a:	e7e9      	b.n	8009de0 <_strtoul_l.isra.0+0x68>
 8009e0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009e10:	f1bc 0f19 	cmp.w	ip, #25
 8009e14:	d801      	bhi.n	8009e1a <_strtoul_l.isra.0+0xa2>
 8009e16:	3c37      	subs	r4, #55	@ 0x37
 8009e18:	e7e8      	b.n	8009dec <_strtoul_l.isra.0+0x74>
 8009e1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009e1e:	f1bc 0f19 	cmp.w	ip, #25
 8009e22:	d804      	bhi.n	8009e2e <_strtoul_l.isra.0+0xb6>
 8009e24:	3c57      	subs	r4, #87	@ 0x57
 8009e26:	e7e1      	b.n	8009dec <_strtoul_l.isra.0+0x74>
 8009e28:	f04f 36ff 	mov.w	r6, #4294967295
 8009e2c:	e7eb      	b.n	8009e06 <_strtoul_l.isra.0+0x8e>
 8009e2e:	1c73      	adds	r3, r6, #1
 8009e30:	d106      	bne.n	8009e40 <_strtoul_l.isra.0+0xc8>
 8009e32:	2322      	movs	r3, #34	@ 0x22
 8009e34:	f8ce 3000 	str.w	r3, [lr]
 8009e38:	4630      	mov	r0, r6
 8009e3a:	b932      	cbnz	r2, 8009e4a <_strtoul_l.isra.0+0xd2>
 8009e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e40:	b107      	cbz	r7, 8009e44 <_strtoul_l.isra.0+0xcc>
 8009e42:	4240      	negs	r0, r0
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d0f9      	beq.n	8009e3c <_strtoul_l.isra.0+0xc4>
 8009e48:	b106      	cbz	r6, 8009e4c <_strtoul_l.isra.0+0xd4>
 8009e4a:	1e69      	subs	r1, r5, #1
 8009e4c:	6011      	str	r1, [r2, #0]
 8009e4e:	e7f5      	b.n	8009e3c <_strtoul_l.isra.0+0xc4>
 8009e50:	0800bd7d 	.word	0x0800bd7d

08009e54 <_strtoul_r>:
 8009e54:	f7ff bf90 	b.w	8009d78 <_strtoul_l.isra.0>

08009e58 <strtoul>:
 8009e58:	4613      	mov	r3, r2
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	4802      	ldr	r0, [pc, #8]	@ (8009e68 <strtoul+0x10>)
 8009e60:	6800      	ldr	r0, [r0, #0]
 8009e62:	f7ff bf89 	b.w	8009d78 <_strtoul_l.isra.0>
 8009e66:	bf00      	nop
 8009e68:	2000002c 	.word	0x2000002c

08009e6c <__ssputs_r>:
 8009e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	688e      	ldr	r6, [r1, #8]
 8009e72:	461f      	mov	r7, r3
 8009e74:	42be      	cmp	r6, r7
 8009e76:	680b      	ldr	r3, [r1, #0]
 8009e78:	4682      	mov	sl, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	d82d      	bhi.n	8009edc <__ssputs_r+0x70>
 8009e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e88:	d026      	beq.n	8009ed8 <__ssputs_r+0x6c>
 8009e8a:	6965      	ldr	r5, [r4, #20]
 8009e8c:	6909      	ldr	r1, [r1, #16]
 8009e8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e92:	eba3 0901 	sub.w	r9, r3, r1
 8009e96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e9a:	1c7b      	adds	r3, r7, #1
 8009e9c:	444b      	add	r3, r9
 8009e9e:	106d      	asrs	r5, r5, #1
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	bf38      	it	cc
 8009ea4:	461d      	movcc	r5, r3
 8009ea6:	0553      	lsls	r3, r2, #21
 8009ea8:	d527      	bpl.n	8009efa <__ssputs_r+0x8e>
 8009eaa:	4629      	mov	r1, r5
 8009eac:	f7ff fed8 	bl	8009c60 <_malloc_r>
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	b360      	cbz	r0, 8009f0e <__ssputs_r+0xa2>
 8009eb4:	6921      	ldr	r1, [r4, #16]
 8009eb6:	464a      	mov	r2, r9
 8009eb8:	f7ff fddd 	bl	8009a76 <memcpy>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	6126      	str	r6, [r4, #16]
 8009eca:	6165      	str	r5, [r4, #20]
 8009ecc:	444e      	add	r6, r9
 8009ece:	eba5 0509 	sub.w	r5, r5, r9
 8009ed2:	6026      	str	r6, [r4, #0]
 8009ed4:	60a5      	str	r5, [r4, #8]
 8009ed6:	463e      	mov	r6, r7
 8009ed8:	42be      	cmp	r6, r7
 8009eda:	d900      	bls.n	8009ede <__ssputs_r+0x72>
 8009edc:	463e      	mov	r6, r7
 8009ede:	6820      	ldr	r0, [r4, #0]
 8009ee0:	4632      	mov	r2, r6
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	f7fe fdfa 	bl	8008adc <memmove>
 8009ee8:	68a3      	ldr	r3, [r4, #8]
 8009eea:	1b9b      	subs	r3, r3, r6
 8009eec:	60a3      	str	r3, [r4, #8]
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	4433      	add	r3, r6
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efa:	462a      	mov	r2, r5
 8009efc:	f001 fa0c 	bl	800b318 <_realloc_r>
 8009f00:	4606      	mov	r6, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d1e0      	bne.n	8009ec8 <__ssputs_r+0x5c>
 8009f06:	6921      	ldr	r1, [r4, #16]
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f7ff fde9 	bl	8009ae0 <_free_r>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	f8ca 3000 	str.w	r3, [sl]
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f20:	e7e9      	b.n	8009ef6 <__ssputs_r+0x8a>
	...

08009f24 <_svfiprintf_r>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	4698      	mov	r8, r3
 8009f2a:	898b      	ldrh	r3, [r1, #12]
 8009f2c:	061b      	lsls	r3, r3, #24
 8009f2e:	b09d      	sub	sp, #116	@ 0x74
 8009f30:	4607      	mov	r7, r0
 8009f32:	460d      	mov	r5, r1
 8009f34:	4614      	mov	r4, r2
 8009f36:	d510      	bpl.n	8009f5a <_svfiprintf_r+0x36>
 8009f38:	690b      	ldr	r3, [r1, #16]
 8009f3a:	b973      	cbnz	r3, 8009f5a <_svfiprintf_r+0x36>
 8009f3c:	2140      	movs	r1, #64	@ 0x40
 8009f3e:	f7ff fe8f 	bl	8009c60 <_malloc_r>
 8009f42:	6028      	str	r0, [r5, #0]
 8009f44:	6128      	str	r0, [r5, #16]
 8009f46:	b930      	cbnz	r0, 8009f56 <_svfiprintf_r+0x32>
 8009f48:	230c      	movs	r3, #12
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	b01d      	add	sp, #116	@ 0x74
 8009f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f56:	2340      	movs	r3, #64	@ 0x40
 8009f58:	616b      	str	r3, [r5, #20]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f5e:	2320      	movs	r3, #32
 8009f60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f68:	2330      	movs	r3, #48	@ 0x30
 8009f6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a108 <_svfiprintf_r+0x1e4>
 8009f6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f72:	f04f 0901 	mov.w	r9, #1
 8009f76:	4623      	mov	r3, r4
 8009f78:	469a      	mov	sl, r3
 8009f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7e:	b10a      	cbz	r2, 8009f84 <_svfiprintf_r+0x60>
 8009f80:	2a25      	cmp	r2, #37	@ 0x25
 8009f82:	d1f9      	bne.n	8009f78 <_svfiprintf_r+0x54>
 8009f84:	ebba 0b04 	subs.w	fp, sl, r4
 8009f88:	d00b      	beq.n	8009fa2 <_svfiprintf_r+0x7e>
 8009f8a:	465b      	mov	r3, fp
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4638      	mov	r0, r7
 8009f92:	f7ff ff6b 	bl	8009e6c <__ssputs_r>
 8009f96:	3001      	adds	r0, #1
 8009f98:	f000 80a7 	beq.w	800a0ea <_svfiprintf_r+0x1c6>
 8009f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f9e:	445a      	add	r2, fp
 8009fa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 809f 	beq.w	800a0ea <_svfiprintf_r+0x1c6>
 8009fac:	2300      	movs	r3, #0
 8009fae:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb6:	f10a 0a01 	add.w	sl, sl, #1
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	9307      	str	r3, [sp, #28]
 8009fbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fc4:	4654      	mov	r4, sl
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fcc:	484e      	ldr	r0, [pc, #312]	@ (800a108 <_svfiprintf_r+0x1e4>)
 8009fce:	f7f6 f91f 	bl	8000210 <memchr>
 8009fd2:	9a04      	ldr	r2, [sp, #16]
 8009fd4:	b9d8      	cbnz	r0, 800a00e <_svfiprintf_r+0xea>
 8009fd6:	06d0      	lsls	r0, r2, #27
 8009fd8:	bf44      	itt	mi
 8009fda:	2320      	movmi	r3, #32
 8009fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe0:	0711      	lsls	r1, r2, #28
 8009fe2:	bf44      	itt	mi
 8009fe4:	232b      	movmi	r3, #43	@ 0x2b
 8009fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fea:	f89a 3000 	ldrb.w	r3, [sl]
 8009fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff0:	d015      	beq.n	800a01e <_svfiprintf_r+0xfa>
 8009ff2:	9a07      	ldr	r2, [sp, #28]
 8009ff4:	4654      	mov	r4, sl
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f04f 0c0a 	mov.w	ip, #10
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a002:	3b30      	subs	r3, #48	@ 0x30
 800a004:	2b09      	cmp	r3, #9
 800a006:	d94b      	bls.n	800a0a0 <_svfiprintf_r+0x17c>
 800a008:	b1b0      	cbz	r0, 800a038 <_svfiprintf_r+0x114>
 800a00a:	9207      	str	r2, [sp, #28]
 800a00c:	e014      	b.n	800a038 <_svfiprintf_r+0x114>
 800a00e:	eba0 0308 	sub.w	r3, r0, r8
 800a012:	fa09 f303 	lsl.w	r3, r9, r3
 800a016:	4313      	orrs	r3, r2
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	46a2      	mov	sl, r4
 800a01c:	e7d2      	b.n	8009fc4 <_svfiprintf_r+0xa0>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	1d19      	adds	r1, r3, #4
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	9103      	str	r1, [sp, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	bfbb      	ittet	lt
 800a02a:	425b      	neglt	r3, r3
 800a02c:	f042 0202 	orrlt.w	r2, r2, #2
 800a030:	9307      	strge	r3, [sp, #28]
 800a032:	9307      	strlt	r3, [sp, #28]
 800a034:	bfb8      	it	lt
 800a036:	9204      	strlt	r2, [sp, #16]
 800a038:	7823      	ldrb	r3, [r4, #0]
 800a03a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a03c:	d10a      	bne.n	800a054 <_svfiprintf_r+0x130>
 800a03e:	7863      	ldrb	r3, [r4, #1]
 800a040:	2b2a      	cmp	r3, #42	@ 0x2a
 800a042:	d132      	bne.n	800a0aa <_svfiprintf_r+0x186>
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	1d1a      	adds	r2, r3, #4
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	9203      	str	r2, [sp, #12]
 800a04c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a050:	3402      	adds	r4, #2
 800a052:	9305      	str	r3, [sp, #20]
 800a054:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a118 <_svfiprintf_r+0x1f4>
 800a058:	7821      	ldrb	r1, [r4, #0]
 800a05a:	2203      	movs	r2, #3
 800a05c:	4650      	mov	r0, sl
 800a05e:	f7f6 f8d7 	bl	8000210 <memchr>
 800a062:	b138      	cbz	r0, 800a074 <_svfiprintf_r+0x150>
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	eba0 000a 	sub.w	r0, r0, sl
 800a06a:	2240      	movs	r2, #64	@ 0x40
 800a06c:	4082      	lsls	r2, r0
 800a06e:	4313      	orrs	r3, r2
 800a070:	3401      	adds	r4, #1
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a078:	4824      	ldr	r0, [pc, #144]	@ (800a10c <_svfiprintf_r+0x1e8>)
 800a07a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a07e:	2206      	movs	r2, #6
 800a080:	f7f6 f8c6 	bl	8000210 <memchr>
 800a084:	2800      	cmp	r0, #0
 800a086:	d036      	beq.n	800a0f6 <_svfiprintf_r+0x1d2>
 800a088:	4b21      	ldr	r3, [pc, #132]	@ (800a110 <_svfiprintf_r+0x1ec>)
 800a08a:	bb1b      	cbnz	r3, 800a0d4 <_svfiprintf_r+0x1b0>
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	3307      	adds	r3, #7
 800a090:	f023 0307 	bic.w	r3, r3, #7
 800a094:	3308      	adds	r3, #8
 800a096:	9303      	str	r3, [sp, #12]
 800a098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09a:	4433      	add	r3, r6
 800a09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a09e:	e76a      	b.n	8009f76 <_svfiprintf_r+0x52>
 800a0a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	e7a8      	b.n	8009ffc <_svfiprintf_r+0xd8>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	3401      	adds	r4, #1
 800a0ae:	9305      	str	r3, [sp, #20]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f04f 0c0a 	mov.w	ip, #10
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0bc:	3a30      	subs	r2, #48	@ 0x30
 800a0be:	2a09      	cmp	r2, #9
 800a0c0:	d903      	bls.n	800a0ca <_svfiprintf_r+0x1a6>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0c6      	beq.n	800a054 <_svfiprintf_r+0x130>
 800a0c6:	9105      	str	r1, [sp, #20]
 800a0c8:	e7c4      	b.n	800a054 <_svfiprintf_r+0x130>
 800a0ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e7f0      	b.n	800a0b6 <_svfiprintf_r+0x192>
 800a0d4:	ab03      	add	r3, sp, #12
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	462a      	mov	r2, r5
 800a0da:	4b0e      	ldr	r3, [pc, #56]	@ (800a114 <_svfiprintf_r+0x1f0>)
 800a0dc:	a904      	add	r1, sp, #16
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f3af 8000 	nop.w
 800a0e4:	1c42      	adds	r2, r0, #1
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	d1d6      	bne.n	800a098 <_svfiprintf_r+0x174>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	065b      	lsls	r3, r3, #25
 800a0ee:	f53f af2d 	bmi.w	8009f4c <_svfiprintf_r+0x28>
 800a0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0f4:	e72c      	b.n	8009f50 <_svfiprintf_r+0x2c>
 800a0f6:	ab03      	add	r3, sp, #12
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4b05      	ldr	r3, [pc, #20]	@ (800a114 <_svfiprintf_r+0x1f0>)
 800a0fe:	a904      	add	r1, sp, #16
 800a100:	4638      	mov	r0, r7
 800a102:	f000 fb8b 	bl	800a81c <_printf_i>
 800a106:	e7ed      	b.n	800a0e4 <_svfiprintf_r+0x1c0>
 800a108:	0800bbf4 	.word	0x0800bbf4
 800a10c:	0800bbfe 	.word	0x0800bbfe
 800a110:	00000000 	.word	0x00000000
 800a114:	08009e6d 	.word	0x08009e6d
 800a118:	0800bbfa 	.word	0x0800bbfa

0800a11c <_sungetc_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	1c4b      	adds	r3, r1, #1
 800a120:	4614      	mov	r4, r2
 800a122:	d103      	bne.n	800a12c <_sungetc_r+0x10>
 800a124:	f04f 35ff 	mov.w	r5, #4294967295
 800a128:	4628      	mov	r0, r5
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	8993      	ldrh	r3, [r2, #12]
 800a12e:	f023 0320 	bic.w	r3, r3, #32
 800a132:	8193      	strh	r3, [r2, #12]
 800a134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a136:	6852      	ldr	r2, [r2, #4]
 800a138:	b2cd      	uxtb	r5, r1
 800a13a:	b18b      	cbz	r3, 800a160 <_sungetc_r+0x44>
 800a13c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a13e:	4293      	cmp	r3, r2
 800a140:	dd08      	ble.n	800a154 <_sungetc_r+0x38>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	1e5a      	subs	r2, r3, #1
 800a146:	6022      	str	r2, [r4, #0]
 800a148:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a14c:	6863      	ldr	r3, [r4, #4]
 800a14e:	3301      	adds	r3, #1
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	e7e9      	b.n	800a128 <_sungetc_r+0xc>
 800a154:	4621      	mov	r1, r4
 800a156:	f000 ff5a 	bl	800b00e <__submore>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d0f1      	beq.n	800a142 <_sungetc_r+0x26>
 800a15e:	e7e1      	b.n	800a124 <_sungetc_r+0x8>
 800a160:	6921      	ldr	r1, [r4, #16]
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	b151      	cbz	r1, 800a17c <_sungetc_r+0x60>
 800a166:	4299      	cmp	r1, r3
 800a168:	d208      	bcs.n	800a17c <_sungetc_r+0x60>
 800a16a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a16e:	42a9      	cmp	r1, r5
 800a170:	d104      	bne.n	800a17c <_sungetc_r+0x60>
 800a172:	3b01      	subs	r3, #1
 800a174:	3201      	adds	r2, #1
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	6062      	str	r2, [r4, #4]
 800a17a:	e7d5      	b.n	800a128 <_sungetc_r+0xc>
 800a17c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a184:	6363      	str	r3, [r4, #52]	@ 0x34
 800a186:	2303      	movs	r3, #3
 800a188:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a18a:	4623      	mov	r3, r4
 800a18c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	2301      	movs	r3, #1
 800a194:	e7dc      	b.n	800a150 <_sungetc_r+0x34>

0800a196 <__ssrefill_r>:
 800a196:	b510      	push	{r4, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a19c:	b169      	cbz	r1, 800a1ba <__ssrefill_r+0x24>
 800a19e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	d001      	beq.n	800a1aa <__ssrefill_r+0x14>
 800a1a6:	f7ff fc9b 	bl	8009ae0 <_free_r>
 800a1aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1ac:	6063      	str	r3, [r4, #4]
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	6360      	str	r0, [r4, #52]	@ 0x34
 800a1b2:	b113      	cbz	r3, 800a1ba <__ssrefill_r+0x24>
 800a1b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f043 0320 	orr.w	r3, r3, #32
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ce:	e7f3      	b.n	800a1b8 <__ssrefill_r+0x22>

0800a1d0 <__ssvfiscanf_r>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800a1da:	2100      	movs	r1, #0
 800a1dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a1e0:	49a6      	ldr	r1, [pc, #664]	@ (800a47c <__ssvfiscanf_r+0x2ac>)
 800a1e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a1e4:	f10d 0804 	add.w	r8, sp, #4
 800a1e8:	49a5      	ldr	r1, [pc, #660]	@ (800a480 <__ssvfiscanf_r+0x2b0>)
 800a1ea:	4fa6      	ldr	r7, [pc, #664]	@ (800a484 <__ssvfiscanf_r+0x2b4>)
 800a1ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	f892 9000 	ldrb.w	r9, [r2]
 800a1fa:	f1b9 0f00 	cmp.w	r9, #0
 800a1fe:	f000 8158 	beq.w	800a4b2 <__ssvfiscanf_r+0x2e2>
 800a202:	f817 3009 	ldrb.w	r3, [r7, r9]
 800a206:	f013 0308 	ands.w	r3, r3, #8
 800a20a:	f102 0501 	add.w	r5, r2, #1
 800a20e:	d019      	beq.n	800a244 <__ssvfiscanf_r+0x74>
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	dd0f      	ble.n	800a236 <__ssvfiscanf_r+0x66>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	5cba      	ldrb	r2, [r7, r2]
 800a21c:	0712      	lsls	r2, r2, #28
 800a21e:	d401      	bmi.n	800a224 <__ssvfiscanf_r+0x54>
 800a220:	462a      	mov	r2, r5
 800a222:	e7e8      	b.n	800a1f6 <__ssvfiscanf_r+0x26>
 800a224:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a226:	3201      	adds	r2, #1
 800a228:	9245      	str	r2, [sp, #276]	@ 0x114
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	3301      	adds	r3, #1
 800a22e:	3a01      	subs	r2, #1
 800a230:	6062      	str	r2, [r4, #4]
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	e7ec      	b.n	800a210 <__ssvfiscanf_r+0x40>
 800a236:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a238:	4621      	mov	r1, r4
 800a23a:	4630      	mov	r0, r6
 800a23c:	4798      	blx	r3
 800a23e:	2800      	cmp	r0, #0
 800a240:	d0e9      	beq.n	800a216 <__ssvfiscanf_r+0x46>
 800a242:	e7ed      	b.n	800a220 <__ssvfiscanf_r+0x50>
 800a244:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800a248:	f040 8085 	bne.w	800a356 <__ssvfiscanf_r+0x186>
 800a24c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a24e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800a250:	7853      	ldrb	r3, [r2, #1]
 800a252:	2b2a      	cmp	r3, #42	@ 0x2a
 800a254:	bf02      	ittt	eq
 800a256:	2310      	moveq	r3, #16
 800a258:	1c95      	addeq	r5, r2, #2
 800a25a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a25c:	220a      	movs	r2, #10
 800a25e:	46aa      	mov	sl, r5
 800a260:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a264:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a268:	2b09      	cmp	r3, #9
 800a26a:	d91e      	bls.n	800a2aa <__ssvfiscanf_r+0xda>
 800a26c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800a488 <__ssvfiscanf_r+0x2b8>
 800a270:	2203      	movs	r2, #3
 800a272:	4658      	mov	r0, fp
 800a274:	f7f5 ffcc 	bl	8000210 <memchr>
 800a278:	b138      	cbz	r0, 800a28a <__ssvfiscanf_r+0xba>
 800a27a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a27c:	eba0 000b 	sub.w	r0, r0, fp
 800a280:	2301      	movs	r3, #1
 800a282:	4083      	lsls	r3, r0
 800a284:	4313      	orrs	r3, r2
 800a286:	9341      	str	r3, [sp, #260]	@ 0x104
 800a288:	4655      	mov	r5, sl
 800a28a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a28e:	2b78      	cmp	r3, #120	@ 0x78
 800a290:	d806      	bhi.n	800a2a0 <__ssvfiscanf_r+0xd0>
 800a292:	2b57      	cmp	r3, #87	@ 0x57
 800a294:	d810      	bhi.n	800a2b8 <__ssvfiscanf_r+0xe8>
 800a296:	2b25      	cmp	r3, #37	@ 0x25
 800a298:	d05d      	beq.n	800a356 <__ssvfiscanf_r+0x186>
 800a29a:	d857      	bhi.n	800a34c <__ssvfiscanf_r+0x17c>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d075      	beq.n	800a38c <__ssvfiscanf_r+0x1bc>
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a2a4:	230a      	movs	r3, #10
 800a2a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a2a8:	e088      	b.n	800a3bc <__ssvfiscanf_r+0x1ec>
 800a2aa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a2ac:	fb02 1103 	mla	r1, r2, r3, r1
 800a2b0:	3930      	subs	r1, #48	@ 0x30
 800a2b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a2b4:	4655      	mov	r5, sl
 800a2b6:	e7d2      	b.n	800a25e <__ssvfiscanf_r+0x8e>
 800a2b8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a2bc:	2a20      	cmp	r2, #32
 800a2be:	d8ef      	bhi.n	800a2a0 <__ssvfiscanf_r+0xd0>
 800a2c0:	a101      	add	r1, pc, #4	@ (adr r1, 800a2c8 <__ssvfiscanf_r+0xf8>)
 800a2c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a39b 	.word	0x0800a39b
 800a2cc:	0800a2a1 	.word	0x0800a2a1
 800a2d0:	0800a2a1 	.word	0x0800a2a1
 800a2d4:	0800a3f5 	.word	0x0800a3f5
 800a2d8:	0800a2a1 	.word	0x0800a2a1
 800a2dc:	0800a2a1 	.word	0x0800a2a1
 800a2e0:	0800a2a1 	.word	0x0800a2a1
 800a2e4:	0800a2a1 	.word	0x0800a2a1
 800a2e8:	0800a2a1 	.word	0x0800a2a1
 800a2ec:	0800a2a1 	.word	0x0800a2a1
 800a2f0:	0800a2a1 	.word	0x0800a2a1
 800a2f4:	0800a40b 	.word	0x0800a40b
 800a2f8:	0800a3f1 	.word	0x0800a3f1
 800a2fc:	0800a353 	.word	0x0800a353
 800a300:	0800a353 	.word	0x0800a353
 800a304:	0800a353 	.word	0x0800a353
 800a308:	0800a2a1 	.word	0x0800a2a1
 800a30c:	0800a3ad 	.word	0x0800a3ad
 800a310:	0800a2a1 	.word	0x0800a2a1
 800a314:	0800a2a1 	.word	0x0800a2a1
 800a318:	0800a2a1 	.word	0x0800a2a1
 800a31c:	0800a2a1 	.word	0x0800a2a1
 800a320:	0800a41b 	.word	0x0800a41b
 800a324:	0800a3b5 	.word	0x0800a3b5
 800a328:	0800a393 	.word	0x0800a393
 800a32c:	0800a2a1 	.word	0x0800a2a1
 800a330:	0800a2a1 	.word	0x0800a2a1
 800a334:	0800a417 	.word	0x0800a417
 800a338:	0800a2a1 	.word	0x0800a2a1
 800a33c:	0800a3f1 	.word	0x0800a3f1
 800a340:	0800a2a1 	.word	0x0800a2a1
 800a344:	0800a2a1 	.word	0x0800a2a1
 800a348:	0800a39b 	.word	0x0800a39b
 800a34c:	3b45      	subs	r3, #69	@ 0x45
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d8a6      	bhi.n	800a2a0 <__ssvfiscanf_r+0xd0>
 800a352:	2305      	movs	r3, #5
 800a354:	e031      	b.n	800a3ba <__ssvfiscanf_r+0x1ea>
 800a356:	6863      	ldr	r3, [r4, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	dd0d      	ble.n	800a378 <__ssvfiscanf_r+0x1a8>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	454a      	cmp	r2, r9
 800a362:	f040 80a6 	bne.w	800a4b2 <__ssvfiscanf_r+0x2e2>
 800a366:	3301      	adds	r3, #1
 800a368:	6862      	ldr	r2, [r4, #4]
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a36e:	3a01      	subs	r2, #1
 800a370:	3301      	adds	r3, #1
 800a372:	6062      	str	r2, [r4, #4]
 800a374:	9345      	str	r3, [sp, #276]	@ 0x114
 800a376:	e753      	b.n	800a220 <__ssvfiscanf_r+0x50>
 800a378:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a37a:	4621      	mov	r1, r4
 800a37c:	4630      	mov	r0, r6
 800a37e:	4798      	blx	r3
 800a380:	2800      	cmp	r0, #0
 800a382:	d0eb      	beq.n	800a35c <__ssvfiscanf_r+0x18c>
 800a384:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a386:	2800      	cmp	r0, #0
 800a388:	f040 808b 	bne.w	800a4a2 <__ssvfiscanf_r+0x2d2>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	e08b      	b.n	800a4aa <__ssvfiscanf_r+0x2da>
 800a392:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a394:	f042 0220 	orr.w	r2, r2, #32
 800a398:	9241      	str	r2, [sp, #260]	@ 0x104
 800a39a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a39c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a3a6:	9242      	str	r2, [sp, #264]	@ 0x108
 800a3a8:	d902      	bls.n	800a3b0 <__ssvfiscanf_r+0x1e0>
 800a3aa:	e005      	b.n	800a3b8 <__ssvfiscanf_r+0x1e8>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e002      	b.n	800a3ba <__ssvfiscanf_r+0x1ea>
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a3bc:	6863      	ldr	r3, [r4, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dd39      	ble.n	800a436 <__ssvfiscanf_r+0x266>
 800a3c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a3c4:	0659      	lsls	r1, r3, #25
 800a3c6:	d404      	bmi.n	800a3d2 <__ssvfiscanf_r+0x202>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	781a      	ldrb	r2, [r3, #0]
 800a3cc:	5cba      	ldrb	r2, [r7, r2]
 800a3ce:	0712      	lsls	r2, r2, #28
 800a3d0:	d438      	bmi.n	800a444 <__ssvfiscanf_r+0x274>
 800a3d2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	dc47      	bgt.n	800a468 <__ssvfiscanf_r+0x298>
 800a3d8:	466b      	mov	r3, sp
 800a3da:	4622      	mov	r2, r4
 800a3dc:	a941      	add	r1, sp, #260	@ 0x104
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 fb3a 	bl	800aa58 <_scanf_chars>
 800a3e4:	2801      	cmp	r0, #1
 800a3e6:	d064      	beq.n	800a4b2 <__ssvfiscanf_r+0x2e2>
 800a3e8:	2802      	cmp	r0, #2
 800a3ea:	f47f af19 	bne.w	800a220 <__ssvfiscanf_r+0x50>
 800a3ee:	e7c9      	b.n	800a384 <__ssvfiscanf_r+0x1b4>
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	e7d7      	b.n	800a3a4 <__ssvfiscanf_r+0x1d4>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f000 fdd0 	bl	800af9c <__sccl>
 800a3fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a402:	9341      	str	r3, [sp, #260]	@ 0x104
 800a404:	4605      	mov	r5, r0
 800a406:	2301      	movs	r3, #1
 800a408:	e7d7      	b.n	800a3ba <__ssvfiscanf_r+0x1ea>
 800a40a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a40c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a410:	9341      	str	r3, [sp, #260]	@ 0x104
 800a412:	2300      	movs	r3, #0
 800a414:	e7d1      	b.n	800a3ba <__ssvfiscanf_r+0x1ea>
 800a416:	2302      	movs	r3, #2
 800a418:	e7cf      	b.n	800a3ba <__ssvfiscanf_r+0x1ea>
 800a41a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a41c:	06c3      	lsls	r3, r0, #27
 800a41e:	f53f aeff 	bmi.w	800a220 <__ssvfiscanf_r+0x50>
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a426:	1d19      	adds	r1, r3, #4
 800a428:	9100      	str	r1, [sp, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	07c0      	lsls	r0, r0, #31
 800a42e:	bf4c      	ite	mi
 800a430:	801a      	strhmi	r2, [r3, #0]
 800a432:	601a      	strpl	r2, [r3, #0]
 800a434:	e6f4      	b.n	800a220 <__ssvfiscanf_r+0x50>
 800a436:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a438:	4621      	mov	r1, r4
 800a43a:	4630      	mov	r0, r6
 800a43c:	4798      	blx	r3
 800a43e:	2800      	cmp	r0, #0
 800a440:	d0bf      	beq.n	800a3c2 <__ssvfiscanf_r+0x1f2>
 800a442:	e79f      	b.n	800a384 <__ssvfiscanf_r+0x1b4>
 800a444:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a446:	3201      	adds	r2, #1
 800a448:	9245      	str	r2, [sp, #276]	@ 0x114
 800a44a:	6862      	ldr	r2, [r4, #4]
 800a44c:	3a01      	subs	r2, #1
 800a44e:	2a00      	cmp	r2, #0
 800a450:	6062      	str	r2, [r4, #4]
 800a452:	dd02      	ble.n	800a45a <__ssvfiscanf_r+0x28a>
 800a454:	3301      	adds	r3, #1
 800a456:	6023      	str	r3, [r4, #0]
 800a458:	e7b6      	b.n	800a3c8 <__ssvfiscanf_r+0x1f8>
 800a45a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a45c:	4621      	mov	r1, r4
 800a45e:	4630      	mov	r0, r6
 800a460:	4798      	blx	r3
 800a462:	2800      	cmp	r0, #0
 800a464:	d0b0      	beq.n	800a3c8 <__ssvfiscanf_r+0x1f8>
 800a466:	e78d      	b.n	800a384 <__ssvfiscanf_r+0x1b4>
 800a468:	2b04      	cmp	r3, #4
 800a46a:	dc0f      	bgt.n	800a48c <__ssvfiscanf_r+0x2bc>
 800a46c:	466b      	mov	r3, sp
 800a46e:	4622      	mov	r2, r4
 800a470:	a941      	add	r1, sp, #260	@ 0x104
 800a472:	4630      	mov	r0, r6
 800a474:	f000 fb4a 	bl	800ab0c <_scanf_i>
 800a478:	e7b4      	b.n	800a3e4 <__ssvfiscanf_r+0x214>
 800a47a:	bf00      	nop
 800a47c:	0800a11d 	.word	0x0800a11d
 800a480:	0800a197 	.word	0x0800a197
 800a484:	0800bd7d 	.word	0x0800bd7d
 800a488:	0800bbfa 	.word	0x0800bbfa
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <__ssvfiscanf_r+0x2e8>)
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f43f aec6 	beq.w	800a220 <__ssvfiscanf_r+0x50>
 800a494:	466b      	mov	r3, sp
 800a496:	4622      	mov	r2, r4
 800a498:	a941      	add	r1, sp, #260	@ 0x104
 800a49a:	4630      	mov	r0, r6
 800a49c:	f3af 8000 	nop.w
 800a4a0:	e7a0      	b.n	800a3e4 <__ssvfiscanf_r+0x214>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	065b      	lsls	r3, r3, #25
 800a4a6:	f53f af71 	bmi.w	800a38c <__ssvfiscanf_r+0x1bc>
 800a4aa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a4b4:	e7f9      	b.n	800a4aa <__ssvfiscanf_r+0x2da>
 800a4b6:	bf00      	nop
 800a4b8:	00000000 	.word	0x00000000

0800a4bc <__sfputc_r>:
 800a4bc:	6893      	ldr	r3, [r2, #8]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	b410      	push	{r4}
 800a4c4:	6093      	str	r3, [r2, #8]
 800a4c6:	da08      	bge.n	800a4da <__sfputc_r+0x1e>
 800a4c8:	6994      	ldr	r4, [r2, #24]
 800a4ca:	42a3      	cmp	r3, r4
 800a4cc:	db01      	blt.n	800a4d2 <__sfputc_r+0x16>
 800a4ce:	290a      	cmp	r1, #10
 800a4d0:	d103      	bne.n	800a4da <__sfputc_r+0x1e>
 800a4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d6:	f7fe ba6c 	b.w	80089b2 <__swbuf_r>
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	1c58      	adds	r0, r3, #1
 800a4de:	6010      	str	r0, [r2, #0]
 800a4e0:	7019      	strb	r1, [r3, #0]
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <__sfputs_r>:
 800a4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	18d5      	adds	r5, r2, r3
 800a4f4:	42ac      	cmp	r4, r5
 800a4f6:	d101      	bne.n	800a4fc <__sfputs_r+0x12>
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e007      	b.n	800a50c <__sfputs_r+0x22>
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	463a      	mov	r2, r7
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff ffda 	bl	800a4bc <__sfputc_r>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d1f3      	bne.n	800a4f4 <__sfputs_r+0xa>
 800a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a510 <_vfiprintf_r>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	460d      	mov	r5, r1
 800a516:	b09d      	sub	sp, #116	@ 0x74
 800a518:	4614      	mov	r4, r2
 800a51a:	4698      	mov	r8, r3
 800a51c:	4606      	mov	r6, r0
 800a51e:	b118      	cbz	r0, 800a528 <_vfiprintf_r+0x18>
 800a520:	6a03      	ldr	r3, [r0, #32]
 800a522:	b90b      	cbnz	r3, 800a528 <_vfiprintf_r+0x18>
 800a524:	f7fe f904 	bl	8008730 <__sinit>
 800a528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a52a:	07d9      	lsls	r1, r3, #31
 800a52c:	d405      	bmi.n	800a53a <_vfiprintf_r+0x2a>
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	059a      	lsls	r2, r3, #22
 800a532:	d402      	bmi.n	800a53a <_vfiprintf_r+0x2a>
 800a534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a536:	f7ff fa93 	bl	8009a60 <__retarget_lock_acquire_recursive>
 800a53a:	89ab      	ldrh	r3, [r5, #12]
 800a53c:	071b      	lsls	r3, r3, #28
 800a53e:	d501      	bpl.n	800a544 <_vfiprintf_r+0x34>
 800a540:	692b      	ldr	r3, [r5, #16]
 800a542:	b99b      	cbnz	r3, 800a56c <_vfiprintf_r+0x5c>
 800a544:	4629      	mov	r1, r5
 800a546:	4630      	mov	r0, r6
 800a548:	f7fe fa72 	bl	8008a30 <__swsetup_r>
 800a54c:	b170      	cbz	r0, 800a56c <_vfiprintf_r+0x5c>
 800a54e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a550:	07dc      	lsls	r4, r3, #31
 800a552:	d504      	bpl.n	800a55e <_vfiprintf_r+0x4e>
 800a554:	f04f 30ff 	mov.w	r0, #4294967295
 800a558:	b01d      	add	sp, #116	@ 0x74
 800a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	0598      	lsls	r0, r3, #22
 800a562:	d4f7      	bmi.n	800a554 <_vfiprintf_r+0x44>
 800a564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a566:	f7ff fa7d 	bl	8009a64 <__retarget_lock_release_recursive>
 800a56a:	e7f3      	b.n	800a554 <_vfiprintf_r+0x44>
 800a56c:	2300      	movs	r3, #0
 800a56e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a570:	2320      	movs	r3, #32
 800a572:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a576:	f8cd 800c 	str.w	r8, [sp, #12]
 800a57a:	2330      	movs	r3, #48	@ 0x30
 800a57c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a72c <_vfiprintf_r+0x21c>
 800a580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a584:	f04f 0901 	mov.w	r9, #1
 800a588:	4623      	mov	r3, r4
 800a58a:	469a      	mov	sl, r3
 800a58c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a590:	b10a      	cbz	r2, 800a596 <_vfiprintf_r+0x86>
 800a592:	2a25      	cmp	r2, #37	@ 0x25
 800a594:	d1f9      	bne.n	800a58a <_vfiprintf_r+0x7a>
 800a596:	ebba 0b04 	subs.w	fp, sl, r4
 800a59a:	d00b      	beq.n	800a5b4 <_vfiprintf_r+0xa4>
 800a59c:	465b      	mov	r3, fp
 800a59e:	4622      	mov	r2, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ffa1 	bl	800a4ea <__sfputs_r>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	f000 80a7 	beq.w	800a6fc <_vfiprintf_r+0x1ec>
 800a5ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5b0:	445a      	add	r2, fp
 800a5b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 809f 	beq.w	800a6fc <_vfiprintf_r+0x1ec>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c8:	f10a 0a01 	add.w	sl, sl, #1
 800a5cc:	9304      	str	r3, [sp, #16]
 800a5ce:	9307      	str	r3, [sp, #28]
 800a5d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d6:	4654      	mov	r4, sl
 800a5d8:	2205      	movs	r2, #5
 800a5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5de:	4853      	ldr	r0, [pc, #332]	@ (800a72c <_vfiprintf_r+0x21c>)
 800a5e0:	f7f5 fe16 	bl	8000210 <memchr>
 800a5e4:	9a04      	ldr	r2, [sp, #16]
 800a5e6:	b9d8      	cbnz	r0, 800a620 <_vfiprintf_r+0x110>
 800a5e8:	06d1      	lsls	r1, r2, #27
 800a5ea:	bf44      	itt	mi
 800a5ec:	2320      	movmi	r3, #32
 800a5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f2:	0713      	lsls	r3, r2, #28
 800a5f4:	bf44      	itt	mi
 800a5f6:	232b      	movmi	r3, #43	@ 0x2b
 800a5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a600:	2b2a      	cmp	r3, #42	@ 0x2a
 800a602:	d015      	beq.n	800a630 <_vfiprintf_r+0x120>
 800a604:	9a07      	ldr	r2, [sp, #28]
 800a606:	4654      	mov	r4, sl
 800a608:	2000      	movs	r0, #0
 800a60a:	f04f 0c0a 	mov.w	ip, #10
 800a60e:	4621      	mov	r1, r4
 800a610:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a614:	3b30      	subs	r3, #48	@ 0x30
 800a616:	2b09      	cmp	r3, #9
 800a618:	d94b      	bls.n	800a6b2 <_vfiprintf_r+0x1a2>
 800a61a:	b1b0      	cbz	r0, 800a64a <_vfiprintf_r+0x13a>
 800a61c:	9207      	str	r2, [sp, #28]
 800a61e:	e014      	b.n	800a64a <_vfiprintf_r+0x13a>
 800a620:	eba0 0308 	sub.w	r3, r0, r8
 800a624:	fa09 f303 	lsl.w	r3, r9, r3
 800a628:	4313      	orrs	r3, r2
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	46a2      	mov	sl, r4
 800a62e:	e7d2      	b.n	800a5d6 <_vfiprintf_r+0xc6>
 800a630:	9b03      	ldr	r3, [sp, #12]
 800a632:	1d19      	adds	r1, r3, #4
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	9103      	str	r1, [sp, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	bfbb      	ittet	lt
 800a63c:	425b      	neglt	r3, r3
 800a63e:	f042 0202 	orrlt.w	r2, r2, #2
 800a642:	9307      	strge	r3, [sp, #28]
 800a644:	9307      	strlt	r3, [sp, #28]
 800a646:	bfb8      	it	lt
 800a648:	9204      	strlt	r2, [sp, #16]
 800a64a:	7823      	ldrb	r3, [r4, #0]
 800a64c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64e:	d10a      	bne.n	800a666 <_vfiprintf_r+0x156>
 800a650:	7863      	ldrb	r3, [r4, #1]
 800a652:	2b2a      	cmp	r3, #42	@ 0x2a
 800a654:	d132      	bne.n	800a6bc <_vfiprintf_r+0x1ac>
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	1d1a      	adds	r2, r3, #4
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	9203      	str	r2, [sp, #12]
 800a65e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a662:	3402      	adds	r4, #2
 800a664:	9305      	str	r3, [sp, #20]
 800a666:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a73c <_vfiprintf_r+0x22c>
 800a66a:	7821      	ldrb	r1, [r4, #0]
 800a66c:	2203      	movs	r2, #3
 800a66e:	4650      	mov	r0, sl
 800a670:	f7f5 fdce 	bl	8000210 <memchr>
 800a674:	b138      	cbz	r0, 800a686 <_vfiprintf_r+0x176>
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	eba0 000a 	sub.w	r0, r0, sl
 800a67c:	2240      	movs	r2, #64	@ 0x40
 800a67e:	4082      	lsls	r2, r0
 800a680:	4313      	orrs	r3, r2
 800a682:	3401      	adds	r4, #1
 800a684:	9304      	str	r3, [sp, #16]
 800a686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68a:	4829      	ldr	r0, [pc, #164]	@ (800a730 <_vfiprintf_r+0x220>)
 800a68c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a690:	2206      	movs	r2, #6
 800a692:	f7f5 fdbd 	bl	8000210 <memchr>
 800a696:	2800      	cmp	r0, #0
 800a698:	d03f      	beq.n	800a71a <_vfiprintf_r+0x20a>
 800a69a:	4b26      	ldr	r3, [pc, #152]	@ (800a734 <_vfiprintf_r+0x224>)
 800a69c:	bb1b      	cbnz	r3, 800a6e6 <_vfiprintf_r+0x1d6>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	3307      	adds	r3, #7
 800a6a2:	f023 0307 	bic.w	r3, r3, #7
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	9303      	str	r3, [sp, #12]
 800a6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ac:	443b      	add	r3, r7
 800a6ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6b0:	e76a      	b.n	800a588 <_vfiprintf_r+0x78>
 800a6b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	e7a8      	b.n	800a60e <_vfiprintf_r+0xfe>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	3401      	adds	r4, #1
 800a6c0:	9305      	str	r3, [sp, #20]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f04f 0c0a 	mov.w	ip, #10
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ce:	3a30      	subs	r2, #48	@ 0x30
 800a6d0:	2a09      	cmp	r2, #9
 800a6d2:	d903      	bls.n	800a6dc <_vfiprintf_r+0x1cc>
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0c6      	beq.n	800a666 <_vfiprintf_r+0x156>
 800a6d8:	9105      	str	r1, [sp, #20]
 800a6da:	e7c4      	b.n	800a666 <_vfiprintf_r+0x156>
 800a6dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e7f0      	b.n	800a6c8 <_vfiprintf_r+0x1b8>
 800a6e6:	ab03      	add	r3, sp, #12
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	4b12      	ldr	r3, [pc, #72]	@ (800a738 <_vfiprintf_r+0x228>)
 800a6ee:	a904      	add	r1, sp, #16
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f3af 8000 	nop.w
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	1c78      	adds	r0, r7, #1
 800a6fa:	d1d6      	bne.n	800a6aa <_vfiprintf_r+0x19a>
 800a6fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6fe:	07d9      	lsls	r1, r3, #31
 800a700:	d405      	bmi.n	800a70e <_vfiprintf_r+0x1fe>
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	059a      	lsls	r2, r3, #22
 800a706:	d402      	bmi.n	800a70e <_vfiprintf_r+0x1fe>
 800a708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a70a:	f7ff f9ab 	bl	8009a64 <__retarget_lock_release_recursive>
 800a70e:	89ab      	ldrh	r3, [r5, #12]
 800a710:	065b      	lsls	r3, r3, #25
 800a712:	f53f af1f 	bmi.w	800a554 <_vfiprintf_r+0x44>
 800a716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a718:	e71e      	b.n	800a558 <_vfiprintf_r+0x48>
 800a71a:	ab03      	add	r3, sp, #12
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	462a      	mov	r2, r5
 800a720:	4b05      	ldr	r3, [pc, #20]	@ (800a738 <_vfiprintf_r+0x228>)
 800a722:	a904      	add	r1, sp, #16
 800a724:	4630      	mov	r0, r6
 800a726:	f000 f879 	bl	800a81c <_printf_i>
 800a72a:	e7e4      	b.n	800a6f6 <_vfiprintf_r+0x1e6>
 800a72c:	0800bbf4 	.word	0x0800bbf4
 800a730:	0800bbfe 	.word	0x0800bbfe
 800a734:	00000000 	.word	0x00000000
 800a738:	0800a4eb 	.word	0x0800a4eb
 800a73c:	0800bbfa 	.word	0x0800bbfa

0800a740 <_printf_common>:
 800a740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a744:	4616      	mov	r6, r2
 800a746:	4698      	mov	r8, r3
 800a748:	688a      	ldr	r2, [r1, #8]
 800a74a:	690b      	ldr	r3, [r1, #16]
 800a74c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a750:	4293      	cmp	r3, r2
 800a752:	bfb8      	it	lt
 800a754:	4613      	movlt	r3, r2
 800a756:	6033      	str	r3, [r6, #0]
 800a758:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a75c:	4607      	mov	r7, r0
 800a75e:	460c      	mov	r4, r1
 800a760:	b10a      	cbz	r2, 800a766 <_printf_common+0x26>
 800a762:	3301      	adds	r3, #1
 800a764:	6033      	str	r3, [r6, #0]
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	0699      	lsls	r1, r3, #26
 800a76a:	bf42      	ittt	mi
 800a76c:	6833      	ldrmi	r3, [r6, #0]
 800a76e:	3302      	addmi	r3, #2
 800a770:	6033      	strmi	r3, [r6, #0]
 800a772:	6825      	ldr	r5, [r4, #0]
 800a774:	f015 0506 	ands.w	r5, r5, #6
 800a778:	d106      	bne.n	800a788 <_printf_common+0x48>
 800a77a:	f104 0a19 	add.w	sl, r4, #25
 800a77e:	68e3      	ldr	r3, [r4, #12]
 800a780:	6832      	ldr	r2, [r6, #0]
 800a782:	1a9b      	subs	r3, r3, r2
 800a784:	42ab      	cmp	r3, r5
 800a786:	dc26      	bgt.n	800a7d6 <_printf_common+0x96>
 800a788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a78c:	6822      	ldr	r2, [r4, #0]
 800a78e:	3b00      	subs	r3, #0
 800a790:	bf18      	it	ne
 800a792:	2301      	movne	r3, #1
 800a794:	0692      	lsls	r2, r2, #26
 800a796:	d42b      	bmi.n	800a7f0 <_printf_common+0xb0>
 800a798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a79c:	4641      	mov	r1, r8
 800a79e:	4638      	mov	r0, r7
 800a7a0:	47c8      	blx	r9
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d01e      	beq.n	800a7e4 <_printf_common+0xa4>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	6922      	ldr	r2, [r4, #16]
 800a7aa:	f003 0306 	and.w	r3, r3, #6
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	bf02      	ittt	eq
 800a7b2:	68e5      	ldreq	r5, [r4, #12]
 800a7b4:	6833      	ldreq	r3, [r6, #0]
 800a7b6:	1aed      	subeq	r5, r5, r3
 800a7b8:	68a3      	ldr	r3, [r4, #8]
 800a7ba:	bf0c      	ite	eq
 800a7bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7c0:	2500      	movne	r5, #0
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	bfc4      	itt	gt
 800a7c6:	1a9b      	subgt	r3, r3, r2
 800a7c8:	18ed      	addgt	r5, r5, r3
 800a7ca:	2600      	movs	r6, #0
 800a7cc:	341a      	adds	r4, #26
 800a7ce:	42b5      	cmp	r5, r6
 800a7d0:	d11a      	bne.n	800a808 <_printf_common+0xc8>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	e008      	b.n	800a7e8 <_printf_common+0xa8>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	4652      	mov	r2, sl
 800a7da:	4641      	mov	r1, r8
 800a7dc:	4638      	mov	r0, r7
 800a7de:	47c8      	blx	r9
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d103      	bne.n	800a7ec <_printf_common+0xac>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	e7c6      	b.n	800a77e <_printf_common+0x3e>
 800a7f0:	18e1      	adds	r1, r4, r3
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	2030      	movs	r0, #48	@ 0x30
 800a7f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7fa:	4422      	add	r2, r4
 800a7fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a804:	3302      	adds	r3, #2
 800a806:	e7c7      	b.n	800a798 <_printf_common+0x58>
 800a808:	2301      	movs	r3, #1
 800a80a:	4622      	mov	r2, r4
 800a80c:	4641      	mov	r1, r8
 800a80e:	4638      	mov	r0, r7
 800a810:	47c8      	blx	r9
 800a812:	3001      	adds	r0, #1
 800a814:	d0e6      	beq.n	800a7e4 <_printf_common+0xa4>
 800a816:	3601      	adds	r6, #1
 800a818:	e7d9      	b.n	800a7ce <_printf_common+0x8e>
	...

0800a81c <_printf_i>:
 800a81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	7e0f      	ldrb	r7, [r1, #24]
 800a822:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a824:	2f78      	cmp	r7, #120	@ 0x78
 800a826:	4691      	mov	r9, r2
 800a828:	4680      	mov	r8, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	469a      	mov	sl, r3
 800a82e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a832:	d807      	bhi.n	800a844 <_printf_i+0x28>
 800a834:	2f62      	cmp	r7, #98	@ 0x62
 800a836:	d80a      	bhi.n	800a84e <_printf_i+0x32>
 800a838:	2f00      	cmp	r7, #0
 800a83a:	f000 80d1 	beq.w	800a9e0 <_printf_i+0x1c4>
 800a83e:	2f58      	cmp	r7, #88	@ 0x58
 800a840:	f000 80b8 	beq.w	800a9b4 <_printf_i+0x198>
 800a844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a848:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a84c:	e03a      	b.n	800a8c4 <_printf_i+0xa8>
 800a84e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a852:	2b15      	cmp	r3, #21
 800a854:	d8f6      	bhi.n	800a844 <_printf_i+0x28>
 800a856:	a101      	add	r1, pc, #4	@ (adr r1, 800a85c <_printf_i+0x40>)
 800a858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a85c:	0800a8b5 	.word	0x0800a8b5
 800a860:	0800a8c9 	.word	0x0800a8c9
 800a864:	0800a845 	.word	0x0800a845
 800a868:	0800a845 	.word	0x0800a845
 800a86c:	0800a845 	.word	0x0800a845
 800a870:	0800a845 	.word	0x0800a845
 800a874:	0800a8c9 	.word	0x0800a8c9
 800a878:	0800a845 	.word	0x0800a845
 800a87c:	0800a845 	.word	0x0800a845
 800a880:	0800a845 	.word	0x0800a845
 800a884:	0800a845 	.word	0x0800a845
 800a888:	0800a9c7 	.word	0x0800a9c7
 800a88c:	0800a8f3 	.word	0x0800a8f3
 800a890:	0800a981 	.word	0x0800a981
 800a894:	0800a845 	.word	0x0800a845
 800a898:	0800a845 	.word	0x0800a845
 800a89c:	0800a9e9 	.word	0x0800a9e9
 800a8a0:	0800a845 	.word	0x0800a845
 800a8a4:	0800a8f3 	.word	0x0800a8f3
 800a8a8:	0800a845 	.word	0x0800a845
 800a8ac:	0800a845 	.word	0x0800a845
 800a8b0:	0800a989 	.word	0x0800a989
 800a8b4:	6833      	ldr	r3, [r6, #0]
 800a8b6:	1d1a      	adds	r2, r3, #4
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6032      	str	r2, [r6, #0]
 800a8bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e09c      	b.n	800aa02 <_printf_i+0x1e6>
 800a8c8:	6833      	ldr	r3, [r6, #0]
 800a8ca:	6820      	ldr	r0, [r4, #0]
 800a8cc:	1d19      	adds	r1, r3, #4
 800a8ce:	6031      	str	r1, [r6, #0]
 800a8d0:	0606      	lsls	r6, r0, #24
 800a8d2:	d501      	bpl.n	800a8d8 <_printf_i+0xbc>
 800a8d4:	681d      	ldr	r5, [r3, #0]
 800a8d6:	e003      	b.n	800a8e0 <_printf_i+0xc4>
 800a8d8:	0645      	lsls	r5, r0, #25
 800a8da:	d5fb      	bpl.n	800a8d4 <_printf_i+0xb8>
 800a8dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	da03      	bge.n	800a8ec <_printf_i+0xd0>
 800a8e4:	232d      	movs	r3, #45	@ 0x2d
 800a8e6:	426d      	negs	r5, r5
 800a8e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ec:	4858      	ldr	r0, [pc, #352]	@ (800aa50 <_printf_i+0x234>)
 800a8ee:	230a      	movs	r3, #10
 800a8f0:	e011      	b.n	800a916 <_printf_i+0xfa>
 800a8f2:	6821      	ldr	r1, [r4, #0]
 800a8f4:	6833      	ldr	r3, [r6, #0]
 800a8f6:	0608      	lsls	r0, r1, #24
 800a8f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8fc:	d402      	bmi.n	800a904 <_printf_i+0xe8>
 800a8fe:	0649      	lsls	r1, r1, #25
 800a900:	bf48      	it	mi
 800a902:	b2ad      	uxthmi	r5, r5
 800a904:	2f6f      	cmp	r7, #111	@ 0x6f
 800a906:	4852      	ldr	r0, [pc, #328]	@ (800aa50 <_printf_i+0x234>)
 800a908:	6033      	str	r3, [r6, #0]
 800a90a:	bf14      	ite	ne
 800a90c:	230a      	movne	r3, #10
 800a90e:	2308      	moveq	r3, #8
 800a910:	2100      	movs	r1, #0
 800a912:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a916:	6866      	ldr	r6, [r4, #4]
 800a918:	60a6      	str	r6, [r4, #8]
 800a91a:	2e00      	cmp	r6, #0
 800a91c:	db05      	blt.n	800a92a <_printf_i+0x10e>
 800a91e:	6821      	ldr	r1, [r4, #0]
 800a920:	432e      	orrs	r6, r5
 800a922:	f021 0104 	bic.w	r1, r1, #4
 800a926:	6021      	str	r1, [r4, #0]
 800a928:	d04b      	beq.n	800a9c2 <_printf_i+0x1a6>
 800a92a:	4616      	mov	r6, r2
 800a92c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a930:	fb03 5711 	mls	r7, r3, r1, r5
 800a934:	5dc7      	ldrb	r7, [r0, r7]
 800a936:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a93a:	462f      	mov	r7, r5
 800a93c:	42bb      	cmp	r3, r7
 800a93e:	460d      	mov	r5, r1
 800a940:	d9f4      	bls.n	800a92c <_printf_i+0x110>
 800a942:	2b08      	cmp	r3, #8
 800a944:	d10b      	bne.n	800a95e <_printf_i+0x142>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	07df      	lsls	r7, r3, #31
 800a94a:	d508      	bpl.n	800a95e <_printf_i+0x142>
 800a94c:	6923      	ldr	r3, [r4, #16]
 800a94e:	6861      	ldr	r1, [r4, #4]
 800a950:	4299      	cmp	r1, r3
 800a952:	bfde      	ittt	le
 800a954:	2330      	movle	r3, #48	@ 0x30
 800a956:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a95a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a95e:	1b92      	subs	r2, r2, r6
 800a960:	6122      	str	r2, [r4, #16]
 800a962:	f8cd a000 	str.w	sl, [sp]
 800a966:	464b      	mov	r3, r9
 800a968:	aa03      	add	r2, sp, #12
 800a96a:	4621      	mov	r1, r4
 800a96c:	4640      	mov	r0, r8
 800a96e:	f7ff fee7 	bl	800a740 <_printf_common>
 800a972:	3001      	adds	r0, #1
 800a974:	d14a      	bne.n	800aa0c <_printf_i+0x1f0>
 800a976:	f04f 30ff 	mov.w	r0, #4294967295
 800a97a:	b004      	add	sp, #16
 800a97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	f043 0320 	orr.w	r3, r3, #32
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	4832      	ldr	r0, [pc, #200]	@ (800aa54 <_printf_i+0x238>)
 800a98a:	2778      	movs	r7, #120	@ 0x78
 800a98c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	6831      	ldr	r1, [r6, #0]
 800a994:	061f      	lsls	r7, r3, #24
 800a996:	f851 5b04 	ldr.w	r5, [r1], #4
 800a99a:	d402      	bmi.n	800a9a2 <_printf_i+0x186>
 800a99c:	065f      	lsls	r7, r3, #25
 800a99e:	bf48      	it	mi
 800a9a0:	b2ad      	uxthmi	r5, r5
 800a9a2:	6031      	str	r1, [r6, #0]
 800a9a4:	07d9      	lsls	r1, r3, #31
 800a9a6:	bf44      	itt	mi
 800a9a8:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ac:	6023      	strmi	r3, [r4, #0]
 800a9ae:	b11d      	cbz	r5, 800a9b8 <_printf_i+0x19c>
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	e7ad      	b.n	800a910 <_printf_i+0xf4>
 800a9b4:	4826      	ldr	r0, [pc, #152]	@ (800aa50 <_printf_i+0x234>)
 800a9b6:	e7e9      	b.n	800a98c <_printf_i+0x170>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	f023 0320 	bic.w	r3, r3, #32
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	e7f6      	b.n	800a9b0 <_printf_i+0x194>
 800a9c2:	4616      	mov	r6, r2
 800a9c4:	e7bd      	b.n	800a942 <_printf_i+0x126>
 800a9c6:	6833      	ldr	r3, [r6, #0]
 800a9c8:	6825      	ldr	r5, [r4, #0]
 800a9ca:	6961      	ldr	r1, [r4, #20]
 800a9cc:	1d18      	adds	r0, r3, #4
 800a9ce:	6030      	str	r0, [r6, #0]
 800a9d0:	062e      	lsls	r6, r5, #24
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	d501      	bpl.n	800a9da <_printf_i+0x1be>
 800a9d6:	6019      	str	r1, [r3, #0]
 800a9d8:	e002      	b.n	800a9e0 <_printf_i+0x1c4>
 800a9da:	0668      	lsls	r0, r5, #25
 800a9dc:	d5fb      	bpl.n	800a9d6 <_printf_i+0x1ba>
 800a9de:	8019      	strh	r1, [r3, #0]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	4616      	mov	r6, r2
 800a9e6:	e7bc      	b.n	800a962 <_printf_i+0x146>
 800a9e8:	6833      	ldr	r3, [r6, #0]
 800a9ea:	1d1a      	adds	r2, r3, #4
 800a9ec:	6032      	str	r2, [r6, #0]
 800a9ee:	681e      	ldr	r6, [r3, #0]
 800a9f0:	6862      	ldr	r2, [r4, #4]
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7f5 fc0b 	bl	8000210 <memchr>
 800a9fa:	b108      	cbz	r0, 800aa00 <_printf_i+0x1e4>
 800a9fc:	1b80      	subs	r0, r0, r6
 800a9fe:	6060      	str	r0, [r4, #4]
 800aa00:	6863      	ldr	r3, [r4, #4]
 800aa02:	6123      	str	r3, [r4, #16]
 800aa04:	2300      	movs	r3, #0
 800aa06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa0a:	e7aa      	b.n	800a962 <_printf_i+0x146>
 800aa0c:	6923      	ldr	r3, [r4, #16]
 800aa0e:	4632      	mov	r2, r6
 800aa10:	4649      	mov	r1, r9
 800aa12:	4640      	mov	r0, r8
 800aa14:	47d0      	blx	sl
 800aa16:	3001      	adds	r0, #1
 800aa18:	d0ad      	beq.n	800a976 <_printf_i+0x15a>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	079b      	lsls	r3, r3, #30
 800aa1e:	d413      	bmi.n	800aa48 <_printf_i+0x22c>
 800aa20:	68e0      	ldr	r0, [r4, #12]
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	4298      	cmp	r0, r3
 800aa26:	bfb8      	it	lt
 800aa28:	4618      	movlt	r0, r3
 800aa2a:	e7a6      	b.n	800a97a <_printf_i+0x15e>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4632      	mov	r2, r6
 800aa30:	4649      	mov	r1, r9
 800aa32:	4640      	mov	r0, r8
 800aa34:	47d0      	blx	sl
 800aa36:	3001      	adds	r0, #1
 800aa38:	d09d      	beq.n	800a976 <_printf_i+0x15a>
 800aa3a:	3501      	adds	r5, #1
 800aa3c:	68e3      	ldr	r3, [r4, #12]
 800aa3e:	9903      	ldr	r1, [sp, #12]
 800aa40:	1a5b      	subs	r3, r3, r1
 800aa42:	42ab      	cmp	r3, r5
 800aa44:	dcf2      	bgt.n	800aa2c <_printf_i+0x210>
 800aa46:	e7eb      	b.n	800aa20 <_printf_i+0x204>
 800aa48:	2500      	movs	r5, #0
 800aa4a:	f104 0619 	add.w	r6, r4, #25
 800aa4e:	e7f5      	b.n	800aa3c <_printf_i+0x220>
 800aa50:	0800bc05 	.word	0x0800bc05
 800aa54:	0800bc16 	.word	0x0800bc16

0800aa58 <_scanf_chars>:
 800aa58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	688a      	ldr	r2, [r1, #8]
 800aa60:	4680      	mov	r8, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b932      	cbnz	r2, 800aa74 <_scanf_chars+0x1c>
 800aa66:	698a      	ldr	r2, [r1, #24]
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	bf14      	ite	ne
 800aa6c:	f04f 32ff 	movne.w	r2, #4294967295
 800aa70:	2201      	moveq	r2, #1
 800aa72:	608a      	str	r2, [r1, #8]
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ab08 <_scanf_chars+0xb0>
 800aa7a:	06d1      	lsls	r1, r2, #27
 800aa7c:	bf5f      	itttt	pl
 800aa7e:	681a      	ldrpl	r2, [r3, #0]
 800aa80:	1d11      	addpl	r1, r2, #4
 800aa82:	6019      	strpl	r1, [r3, #0]
 800aa84:	6816      	ldrpl	r6, [r2, #0]
 800aa86:	2700      	movs	r7, #0
 800aa88:	69a0      	ldr	r0, [r4, #24]
 800aa8a:	b188      	cbz	r0, 800aab0 <_scanf_chars+0x58>
 800aa8c:	2801      	cmp	r0, #1
 800aa8e:	d107      	bne.n	800aaa0 <_scanf_chars+0x48>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	781a      	ldrb	r2, [r3, #0]
 800aa94:	6963      	ldr	r3, [r4, #20]
 800aa96:	5c9b      	ldrb	r3, [r3, r2]
 800aa98:	b953      	cbnz	r3, 800aab0 <_scanf_chars+0x58>
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	d031      	beq.n	800ab02 <_scanf_chars+0xaa>
 800aa9e:	e022      	b.n	800aae6 <_scanf_chars+0x8e>
 800aaa0:	2802      	cmp	r0, #2
 800aaa2:	d120      	bne.n	800aae6 <_scanf_chars+0x8e>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aaac:	071b      	lsls	r3, r3, #28
 800aaae:	d41a      	bmi.n	800aae6 <_scanf_chars+0x8e>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	06da      	lsls	r2, r3, #27
 800aab4:	bf5e      	ittt	pl
 800aab6:	682b      	ldrpl	r3, [r5, #0]
 800aab8:	781b      	ldrbpl	r3, [r3, #0]
 800aaba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aabe:	682a      	ldr	r2, [r5, #0]
 800aac0:	686b      	ldr	r3, [r5, #4]
 800aac2:	3201      	adds	r2, #1
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	68a2      	ldr	r2, [r4, #8]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	3a01      	subs	r2, #1
 800aacc:	606b      	str	r3, [r5, #4]
 800aace:	3701      	adds	r7, #1
 800aad0:	60a2      	str	r2, [r4, #8]
 800aad2:	b142      	cbz	r2, 800aae6 <_scanf_chars+0x8e>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dcd7      	bgt.n	800aa88 <_scanf_chars+0x30>
 800aad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aadc:	4629      	mov	r1, r5
 800aade:	4640      	mov	r0, r8
 800aae0:	4798      	blx	r3
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d0d0      	beq.n	800aa88 <_scanf_chars+0x30>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	f013 0310 	ands.w	r3, r3, #16
 800aaec:	d105      	bne.n	800aafa <_scanf_chars+0xa2>
 800aaee:	68e2      	ldr	r2, [r4, #12]
 800aaf0:	3201      	adds	r2, #1
 800aaf2:	60e2      	str	r2, [r4, #12]
 800aaf4:	69a2      	ldr	r2, [r4, #24]
 800aaf6:	b102      	cbz	r2, 800aafa <_scanf_chars+0xa2>
 800aaf8:	7033      	strb	r3, [r6, #0]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	443b      	add	r3, r7
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	2000      	movs	r0, #0
 800ab02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab06:	bf00      	nop
 800ab08:	0800bd7d 	.word	0x0800bd7d

0800ab0c <_scanf_i>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4698      	mov	r8, r3
 800ab12:	4b74      	ldr	r3, [pc, #464]	@ (800ace4 <_scanf_i+0x1d8>)
 800ab14:	460c      	mov	r4, r1
 800ab16:	4682      	mov	sl, r0
 800ab18:	4616      	mov	r6, r2
 800ab1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ab26:	4b70      	ldr	r3, [pc, #448]	@ (800ace8 <_scanf_i+0x1dc>)
 800ab28:	69a1      	ldr	r1, [r4, #24]
 800ab2a:	4a70      	ldr	r2, [pc, #448]	@ (800acec <_scanf_i+0x1e0>)
 800ab2c:	2903      	cmp	r1, #3
 800ab2e:	bf08      	it	eq
 800ab30:	461a      	moveq	r2, r3
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	1e5a      	subs	r2, r3, #1
 800ab38:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ab3c:	bf88      	it	hi
 800ab3e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ab42:	4627      	mov	r7, r4
 800ab44:	bf82      	ittt	hi
 800ab46:	eb03 0905 	addhi.w	r9, r3, r5
 800ab4a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ab4e:	60a3      	strhi	r3, [r4, #8]
 800ab50:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ab54:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ab58:	bf98      	it	ls
 800ab5a:	f04f 0900 	movls.w	r9, #0
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	463d      	mov	r5, r7
 800ab62:	f04f 0b00 	mov.w	fp, #0
 800ab66:	6831      	ldr	r1, [r6, #0]
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	7809      	ldrb	r1, [r1, #0]
 800ab6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ab70:	2202      	movs	r2, #2
 800ab72:	f7f5 fb4d 	bl	8000210 <memchr>
 800ab76:	b328      	cbz	r0, 800abc4 <_scanf_i+0xb8>
 800ab78:	f1bb 0f01 	cmp.w	fp, #1
 800ab7c:	d159      	bne.n	800ac32 <_scanf_i+0x126>
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	b92a      	cbnz	r2, 800ab8e <_scanf_i+0x82>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	2108      	movs	r1, #8
 800ab86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab8a:	6061      	str	r1, [r4, #4]
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	68a2      	ldr	r2, [r4, #8]
 800ab98:	1e51      	subs	r1, r2, #1
 800ab9a:	60a1      	str	r1, [r4, #8]
 800ab9c:	b192      	cbz	r2, 800abc4 <_scanf_i+0xb8>
 800ab9e:	6832      	ldr	r2, [r6, #0]
 800aba0:	1c51      	adds	r1, r2, #1
 800aba2:	6031      	str	r1, [r6, #0]
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	f805 2b01 	strb.w	r2, [r5], #1
 800abaa:	6872      	ldr	r2, [r6, #4]
 800abac:	3a01      	subs	r2, #1
 800abae:	2a00      	cmp	r2, #0
 800abb0:	6072      	str	r2, [r6, #4]
 800abb2:	dc07      	bgt.n	800abc4 <_scanf_i+0xb8>
 800abb4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800abb8:	4631      	mov	r1, r6
 800abba:	4650      	mov	r0, sl
 800abbc:	4790      	blx	r2
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f040 8085 	bne.w	800acce <_scanf_i+0x1c2>
 800abc4:	f10b 0b01 	add.w	fp, fp, #1
 800abc8:	f1bb 0f03 	cmp.w	fp, #3
 800abcc:	d1cb      	bne.n	800ab66 <_scanf_i+0x5a>
 800abce:	6863      	ldr	r3, [r4, #4]
 800abd0:	b90b      	cbnz	r3, 800abd6 <_scanf_i+0xca>
 800abd2:	230a      	movs	r3, #10
 800abd4:	6063      	str	r3, [r4, #4]
 800abd6:	6863      	ldr	r3, [r4, #4]
 800abd8:	4945      	ldr	r1, [pc, #276]	@ (800acf0 <_scanf_i+0x1e4>)
 800abda:	6960      	ldr	r0, [r4, #20]
 800abdc:	1ac9      	subs	r1, r1, r3
 800abde:	f000 f9dd 	bl	800af9c <__sccl>
 800abe2:	f04f 0b00 	mov.w	fp, #0
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d03d      	beq.n	800ac6a <_scanf_i+0x15e>
 800abee:	6831      	ldr	r1, [r6, #0]
 800abf0:	6960      	ldr	r0, [r4, #20]
 800abf2:	f891 c000 	ldrb.w	ip, [r1]
 800abf6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d035      	beq.n	800ac6a <_scanf_i+0x15e>
 800abfe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ac02:	d124      	bne.n	800ac4e <_scanf_i+0x142>
 800ac04:	0510      	lsls	r0, r2, #20
 800ac06:	d522      	bpl.n	800ac4e <_scanf_i+0x142>
 800ac08:	f10b 0b01 	add.w	fp, fp, #1
 800ac0c:	f1b9 0f00 	cmp.w	r9, #0
 800ac10:	d003      	beq.n	800ac1a <_scanf_i+0x10e>
 800ac12:	3301      	adds	r3, #1
 800ac14:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac18:	60a3      	str	r3, [r4, #8]
 800ac1a:	6873      	ldr	r3, [r6, #4]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	6073      	str	r3, [r6, #4]
 800ac22:	dd1b      	ble.n	800ac5c <_scanf_i+0x150>
 800ac24:	6833      	ldr	r3, [r6, #0]
 800ac26:	3301      	adds	r3, #1
 800ac28:	6033      	str	r3, [r6, #0]
 800ac2a:	68a3      	ldr	r3, [r4, #8]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	60a3      	str	r3, [r4, #8]
 800ac30:	e7d9      	b.n	800abe6 <_scanf_i+0xda>
 800ac32:	f1bb 0f02 	cmp.w	fp, #2
 800ac36:	d1ae      	bne.n	800ab96 <_scanf_i+0x8a>
 800ac38:	6822      	ldr	r2, [r4, #0]
 800ac3a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ac3e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ac42:	d1c4      	bne.n	800abce <_scanf_i+0xc2>
 800ac44:	2110      	movs	r1, #16
 800ac46:	6061      	str	r1, [r4, #4]
 800ac48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac4c:	e7a2      	b.n	800ab94 <_scanf_i+0x88>
 800ac4e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ac52:	6022      	str	r2, [r4, #0]
 800ac54:	780b      	ldrb	r3, [r1, #0]
 800ac56:	f805 3b01 	strb.w	r3, [r5], #1
 800ac5a:	e7de      	b.n	800ac1a <_scanf_i+0x10e>
 800ac5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac60:	4631      	mov	r1, r6
 800ac62:	4650      	mov	r0, sl
 800ac64:	4798      	blx	r3
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d0df      	beq.n	800ac2a <_scanf_i+0x11e>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	05d9      	lsls	r1, r3, #23
 800ac6e:	d50d      	bpl.n	800ac8c <_scanf_i+0x180>
 800ac70:	42bd      	cmp	r5, r7
 800ac72:	d909      	bls.n	800ac88 <_scanf_i+0x17c>
 800ac74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	4650      	mov	r0, sl
 800ac80:	4798      	blx	r3
 800ac82:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac86:	464d      	mov	r5, r9
 800ac88:	42bd      	cmp	r5, r7
 800ac8a:	d028      	beq.n	800acde <_scanf_i+0x1d2>
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	f012 0210 	ands.w	r2, r2, #16
 800ac92:	d113      	bne.n	800acbc <_scanf_i+0x1b0>
 800ac94:	702a      	strb	r2, [r5, #0]
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	9e01      	ldr	r6, [sp, #4]
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	4650      	mov	r0, sl
 800ac9e:	47b0      	blx	r6
 800aca0:	f8d8 3000 	ldr.w	r3, [r8]
 800aca4:	6821      	ldr	r1, [r4, #0]
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	f8c8 2000 	str.w	r2, [r8]
 800acac:	f011 0f20 	tst.w	r1, #32
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	d00f      	beq.n	800acd4 <_scanf_i+0x1c8>
 800acb4:	6018      	str	r0, [r3, #0]
 800acb6:	68e3      	ldr	r3, [r4, #12]
 800acb8:	3301      	adds	r3, #1
 800acba:	60e3      	str	r3, [r4, #12]
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	1bed      	subs	r5, r5, r7
 800acc0:	445d      	add	r5, fp
 800acc2:	442b      	add	r3, r5
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	2000      	movs	r0, #0
 800acc8:	b007      	add	sp, #28
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	f04f 0b00 	mov.w	fp, #0
 800acd2:	e7ca      	b.n	800ac6a <_scanf_i+0x15e>
 800acd4:	07ca      	lsls	r2, r1, #31
 800acd6:	bf4c      	ite	mi
 800acd8:	8018      	strhmi	r0, [r3, #0]
 800acda:	6018      	strpl	r0, [r3, #0]
 800acdc:	e7eb      	b.n	800acb6 <_scanf_i+0x1aa>
 800acde:	2001      	movs	r0, #1
 800ace0:	e7f2      	b.n	800acc8 <_scanf_i+0x1bc>
 800ace2:	bf00      	nop
 800ace4:	0800b9cc 	.word	0x0800b9cc
 800ace8:	0800b469 	.word	0x0800b469
 800acec:	08009e55 	.word	0x08009e55
 800acf0:	0800bc37 	.word	0x0800bc37

0800acf4 <__sflush_r>:
 800acf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	0716      	lsls	r6, r2, #28
 800acfe:	4605      	mov	r5, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	d454      	bmi.n	800adae <__sflush_r+0xba>
 800ad04:	684b      	ldr	r3, [r1, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	dc02      	bgt.n	800ad10 <__sflush_r+0x1c>
 800ad0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd48      	ble.n	800ada2 <__sflush_r+0xae>
 800ad10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad12:	2e00      	cmp	r6, #0
 800ad14:	d045      	beq.n	800ada2 <__sflush_r+0xae>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad1c:	682f      	ldr	r7, [r5, #0]
 800ad1e:	6a21      	ldr	r1, [r4, #32]
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	d030      	beq.n	800ad86 <__sflush_r+0x92>
 800ad24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	0759      	lsls	r1, r3, #29
 800ad2a:	d505      	bpl.n	800ad38 <__sflush_r+0x44>
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad32:	b10b      	cbz	r3, 800ad38 <__sflush_r+0x44>
 800ad34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad36:	1ad2      	subs	r2, r2, r3
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad3c:	6a21      	ldr	r1, [r4, #32]
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b0      	blx	r6
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	d106      	bne.n	800ad56 <__sflush_r+0x62>
 800ad48:	6829      	ldr	r1, [r5, #0]
 800ad4a:	291d      	cmp	r1, #29
 800ad4c:	d82b      	bhi.n	800ada6 <__sflush_r+0xb2>
 800ad4e:	4a2a      	ldr	r2, [pc, #168]	@ (800adf8 <__sflush_r+0x104>)
 800ad50:	40ca      	lsrs	r2, r1
 800ad52:	07d6      	lsls	r6, r2, #31
 800ad54:	d527      	bpl.n	800ada6 <__sflush_r+0xb2>
 800ad56:	2200      	movs	r2, #0
 800ad58:	6062      	str	r2, [r4, #4]
 800ad5a:	04d9      	lsls	r1, r3, #19
 800ad5c:	6922      	ldr	r2, [r4, #16]
 800ad5e:	6022      	str	r2, [r4, #0]
 800ad60:	d504      	bpl.n	800ad6c <__sflush_r+0x78>
 800ad62:	1c42      	adds	r2, r0, #1
 800ad64:	d101      	bne.n	800ad6a <__sflush_r+0x76>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	b903      	cbnz	r3, 800ad6c <__sflush_r+0x78>
 800ad6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad6e:	602f      	str	r7, [r5, #0]
 800ad70:	b1b9      	cbz	r1, 800ada2 <__sflush_r+0xae>
 800ad72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad76:	4299      	cmp	r1, r3
 800ad78:	d002      	beq.n	800ad80 <__sflush_r+0x8c>
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f7fe feb0 	bl	8009ae0 <_free_r>
 800ad80:	2300      	movs	r3, #0
 800ad82:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad84:	e00d      	b.n	800ada2 <__sflush_r+0xae>
 800ad86:	2301      	movs	r3, #1
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b0      	blx	r6
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	1c50      	adds	r0, r2, #1
 800ad90:	d1c9      	bne.n	800ad26 <__sflush_r+0x32>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0c6      	beq.n	800ad26 <__sflush_r+0x32>
 800ad98:	2b1d      	cmp	r3, #29
 800ad9a:	d001      	beq.n	800ada0 <__sflush_r+0xac>
 800ad9c:	2b16      	cmp	r3, #22
 800ad9e:	d11e      	bne.n	800adde <__sflush_r+0xea>
 800ada0:	602f      	str	r7, [r5, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	e022      	b.n	800adec <__sflush_r+0xf8>
 800ada6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adaa:	b21b      	sxth	r3, r3
 800adac:	e01b      	b.n	800ade6 <__sflush_r+0xf2>
 800adae:	690f      	ldr	r7, [r1, #16]
 800adb0:	2f00      	cmp	r7, #0
 800adb2:	d0f6      	beq.n	800ada2 <__sflush_r+0xae>
 800adb4:	0793      	lsls	r3, r2, #30
 800adb6:	680e      	ldr	r6, [r1, #0]
 800adb8:	bf08      	it	eq
 800adba:	694b      	ldreq	r3, [r1, #20]
 800adbc:	600f      	str	r7, [r1, #0]
 800adbe:	bf18      	it	ne
 800adc0:	2300      	movne	r3, #0
 800adc2:	eba6 0807 	sub.w	r8, r6, r7
 800adc6:	608b      	str	r3, [r1, #8]
 800adc8:	f1b8 0f00 	cmp.w	r8, #0
 800adcc:	dde9      	ble.n	800ada2 <__sflush_r+0xae>
 800adce:	6a21      	ldr	r1, [r4, #32]
 800add0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800add2:	4643      	mov	r3, r8
 800add4:	463a      	mov	r2, r7
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	2800      	cmp	r0, #0
 800addc:	dc08      	bgt.n	800adf0 <__sflush_r+0xfc>
 800adde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	4407      	add	r7, r0
 800adf2:	eba8 0800 	sub.w	r8, r8, r0
 800adf6:	e7e7      	b.n	800adc8 <__sflush_r+0xd4>
 800adf8:	20400001 	.word	0x20400001

0800adfc <_fflush_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	690b      	ldr	r3, [r1, #16]
 800ae00:	4605      	mov	r5, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	b913      	cbnz	r3, 800ae0c <_fflush_r+0x10>
 800ae06:	2500      	movs	r5, #0
 800ae08:	4628      	mov	r0, r5
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	b118      	cbz	r0, 800ae16 <_fflush_r+0x1a>
 800ae0e:	6a03      	ldr	r3, [r0, #32]
 800ae10:	b90b      	cbnz	r3, 800ae16 <_fflush_r+0x1a>
 800ae12:	f7fd fc8d 	bl	8008730 <__sinit>
 800ae16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0f3      	beq.n	800ae06 <_fflush_r+0xa>
 800ae1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae20:	07d0      	lsls	r0, r2, #31
 800ae22:	d404      	bmi.n	800ae2e <_fflush_r+0x32>
 800ae24:	0599      	lsls	r1, r3, #22
 800ae26:	d402      	bmi.n	800ae2e <_fflush_r+0x32>
 800ae28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2a:	f7fe fe19 	bl	8009a60 <__retarget_lock_acquire_recursive>
 800ae2e:	4628      	mov	r0, r5
 800ae30:	4621      	mov	r1, r4
 800ae32:	f7ff ff5f 	bl	800acf4 <__sflush_r>
 800ae36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae38:	07da      	lsls	r2, r3, #31
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	d4e4      	bmi.n	800ae08 <_fflush_r+0xc>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	059b      	lsls	r3, r3, #22
 800ae42:	d4e1      	bmi.n	800ae08 <_fflush_r+0xc>
 800ae44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae46:	f7fe fe0d 	bl	8009a64 <__retarget_lock_release_recursive>
 800ae4a:	e7dd      	b.n	800ae08 <_fflush_r+0xc>

0800ae4c <fiprintf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b503      	push	{r0, r1, lr}
 800ae50:	4601      	mov	r1, r0
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	4805      	ldr	r0, [pc, #20]	@ (800ae6c <fiprintf+0x20>)
 800ae56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5a:	6800      	ldr	r0, [r0, #0]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f7ff fb57 	bl	800a510 <_vfiprintf_r>
 800ae62:	b002      	add	sp, #8
 800ae64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae68:	b003      	add	sp, #12
 800ae6a:	4770      	bx	lr
 800ae6c:	2000002c 	.word	0x2000002c

0800ae70 <__swhatbuf_r>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	460c      	mov	r4, r1
 800ae74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	b096      	sub	sp, #88	@ 0x58
 800ae7c:	4615      	mov	r5, r2
 800ae7e:	461e      	mov	r6, r3
 800ae80:	da0d      	bge.n	800ae9e <__swhatbuf_r+0x2e>
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae88:	f04f 0100 	mov.w	r1, #0
 800ae8c:	bf14      	ite	ne
 800ae8e:	2340      	movne	r3, #64	@ 0x40
 800ae90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae94:	2000      	movs	r0, #0
 800ae96:	6031      	str	r1, [r6, #0]
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	b016      	add	sp, #88	@ 0x58
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	466a      	mov	r2, sp
 800aea0:	f000 f9f4 	bl	800b28c <_fstat_r>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	dbec      	blt.n	800ae82 <__swhatbuf_r+0x12>
 800aea8:	9901      	ldr	r1, [sp, #4]
 800aeaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aeae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeb2:	4259      	negs	r1, r3
 800aeb4:	4159      	adcs	r1, r3
 800aeb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeba:	e7eb      	b.n	800ae94 <__swhatbuf_r+0x24>

0800aebc <__smakebuf_r>:
 800aebc:	898b      	ldrh	r3, [r1, #12]
 800aebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aec0:	079d      	lsls	r5, r3, #30
 800aec2:	4606      	mov	r6, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	d507      	bpl.n	800aed8 <__smakebuf_r+0x1c>
 800aec8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	2301      	movs	r3, #1
 800aed2:	6163      	str	r3, [r4, #20]
 800aed4:	b003      	add	sp, #12
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed8:	ab01      	add	r3, sp, #4
 800aeda:	466a      	mov	r2, sp
 800aedc:	f7ff ffc8 	bl	800ae70 <__swhatbuf_r>
 800aee0:	9f00      	ldr	r7, [sp, #0]
 800aee2:	4605      	mov	r5, r0
 800aee4:	4639      	mov	r1, r7
 800aee6:	4630      	mov	r0, r6
 800aee8:	f7fe feba 	bl	8009c60 <_malloc_r>
 800aeec:	b948      	cbnz	r0, 800af02 <__smakebuf_r+0x46>
 800aeee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aef2:	059a      	lsls	r2, r3, #22
 800aef4:	d4ee      	bmi.n	800aed4 <__smakebuf_r+0x18>
 800aef6:	f023 0303 	bic.w	r3, r3, #3
 800aefa:	f043 0302 	orr.w	r3, r3, #2
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	e7e2      	b.n	800aec8 <__smakebuf_r+0xc>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	6020      	str	r0, [r4, #0]
 800af06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	9b01      	ldr	r3, [sp, #4]
 800af0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af12:	b15b      	cbz	r3, 800af2c <__smakebuf_r+0x70>
 800af14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af18:	4630      	mov	r0, r6
 800af1a:	f000 f9c9 	bl	800b2b0 <_isatty_r>
 800af1e:	b128      	cbz	r0, 800af2c <__smakebuf_r+0x70>
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f023 0303 	bic.w	r3, r3, #3
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	431d      	orrs	r5, r3
 800af30:	81a5      	strh	r5, [r4, #12]
 800af32:	e7cf      	b.n	800aed4 <__smakebuf_r+0x18>

0800af34 <_putc_r>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	460d      	mov	r5, r1
 800af38:	4614      	mov	r4, r2
 800af3a:	4606      	mov	r6, r0
 800af3c:	b118      	cbz	r0, 800af46 <_putc_r+0x12>
 800af3e:	6a03      	ldr	r3, [r0, #32]
 800af40:	b90b      	cbnz	r3, 800af46 <_putc_r+0x12>
 800af42:	f7fd fbf5 	bl	8008730 <__sinit>
 800af46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af48:	07d8      	lsls	r0, r3, #31
 800af4a:	d405      	bmi.n	800af58 <_putc_r+0x24>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	0599      	lsls	r1, r3, #22
 800af50:	d402      	bmi.n	800af58 <_putc_r+0x24>
 800af52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af54:	f7fe fd84 	bl	8009a60 <__retarget_lock_acquire_recursive>
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	da05      	bge.n	800af6e <_putc_r+0x3a>
 800af62:	69a2      	ldr	r2, [r4, #24]
 800af64:	4293      	cmp	r3, r2
 800af66:	db12      	blt.n	800af8e <_putc_r+0x5a>
 800af68:	b2eb      	uxtb	r3, r5
 800af6a:	2b0a      	cmp	r3, #10
 800af6c:	d00f      	beq.n	800af8e <_putc_r+0x5a>
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	6022      	str	r2, [r4, #0]
 800af74:	701d      	strb	r5, [r3, #0]
 800af76:	b2ed      	uxtb	r5, r5
 800af78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af7a:	07da      	lsls	r2, r3, #31
 800af7c:	d405      	bmi.n	800af8a <_putc_r+0x56>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	059b      	lsls	r3, r3, #22
 800af82:	d402      	bmi.n	800af8a <_putc_r+0x56>
 800af84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af86:	f7fe fd6d 	bl	8009a64 <__retarget_lock_release_recursive>
 800af8a:	4628      	mov	r0, r5
 800af8c:	bd70      	pop	{r4, r5, r6, pc}
 800af8e:	4629      	mov	r1, r5
 800af90:	4622      	mov	r2, r4
 800af92:	4630      	mov	r0, r6
 800af94:	f7fd fd0d 	bl	80089b2 <__swbuf_r>
 800af98:	4605      	mov	r5, r0
 800af9a:	e7ed      	b.n	800af78 <_putc_r+0x44>

0800af9c <__sccl>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	780b      	ldrb	r3, [r1, #0]
 800afa0:	4604      	mov	r4, r0
 800afa2:	2b5e      	cmp	r3, #94	@ 0x5e
 800afa4:	bf0b      	itete	eq
 800afa6:	784b      	ldrbeq	r3, [r1, #1]
 800afa8:	1c4a      	addne	r2, r1, #1
 800afaa:	1c8a      	addeq	r2, r1, #2
 800afac:	2100      	movne	r1, #0
 800afae:	bf08      	it	eq
 800afb0:	2101      	moveq	r1, #1
 800afb2:	3801      	subs	r0, #1
 800afb4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800afb8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800afbc:	42a8      	cmp	r0, r5
 800afbe:	d1fb      	bne.n	800afb8 <__sccl+0x1c>
 800afc0:	b90b      	cbnz	r3, 800afc6 <__sccl+0x2a>
 800afc2:	1e50      	subs	r0, r2, #1
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	f081 0101 	eor.w	r1, r1, #1
 800afca:	54e1      	strb	r1, [r4, r3]
 800afcc:	4610      	mov	r0, r2
 800afce:	4602      	mov	r2, r0
 800afd0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afd4:	2d2d      	cmp	r5, #45	@ 0x2d
 800afd6:	d005      	beq.n	800afe4 <__sccl+0x48>
 800afd8:	2d5d      	cmp	r5, #93	@ 0x5d
 800afda:	d016      	beq.n	800b00a <__sccl+0x6e>
 800afdc:	2d00      	cmp	r5, #0
 800afde:	d0f1      	beq.n	800afc4 <__sccl+0x28>
 800afe0:	462b      	mov	r3, r5
 800afe2:	e7f2      	b.n	800afca <__sccl+0x2e>
 800afe4:	7846      	ldrb	r6, [r0, #1]
 800afe6:	2e5d      	cmp	r6, #93	@ 0x5d
 800afe8:	d0fa      	beq.n	800afe0 <__sccl+0x44>
 800afea:	42b3      	cmp	r3, r6
 800afec:	dcf8      	bgt.n	800afe0 <__sccl+0x44>
 800afee:	3002      	adds	r0, #2
 800aff0:	461a      	mov	r2, r3
 800aff2:	3201      	adds	r2, #1
 800aff4:	4296      	cmp	r6, r2
 800aff6:	54a1      	strb	r1, [r4, r2]
 800aff8:	dcfb      	bgt.n	800aff2 <__sccl+0x56>
 800affa:	1af2      	subs	r2, r6, r3
 800affc:	3a01      	subs	r2, #1
 800affe:	1c5d      	adds	r5, r3, #1
 800b000:	42b3      	cmp	r3, r6
 800b002:	bfa8      	it	ge
 800b004:	2200      	movge	r2, #0
 800b006:	18ab      	adds	r3, r5, r2
 800b008:	e7e1      	b.n	800afce <__sccl+0x32>
 800b00a:	4610      	mov	r0, r2
 800b00c:	e7da      	b.n	800afc4 <__sccl+0x28>

0800b00e <__submore>:
 800b00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b012:	460c      	mov	r4, r1
 800b014:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d11d      	bne.n	800b05a <__submore+0x4c>
 800b01e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b022:	f7fe fe1d 	bl	8009c60 <_malloc_r>
 800b026:	b918      	cbnz	r0, 800b030 <__submore+0x22>
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b034:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b036:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b03a:	6360      	str	r0, [r4, #52]	@ 0x34
 800b03c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b040:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b044:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b048:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b04c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b050:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b054:	6020      	str	r0, [r4, #0]
 800b056:	2000      	movs	r0, #0
 800b058:	e7e8      	b.n	800b02c <__submore+0x1e>
 800b05a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b05c:	0077      	lsls	r7, r6, #1
 800b05e:	463a      	mov	r2, r7
 800b060:	f000 f95a 	bl	800b318 <_realloc_r>
 800b064:	4605      	mov	r5, r0
 800b066:	2800      	cmp	r0, #0
 800b068:	d0de      	beq.n	800b028 <__submore+0x1a>
 800b06a:	eb00 0806 	add.w	r8, r0, r6
 800b06e:	4601      	mov	r1, r0
 800b070:	4632      	mov	r2, r6
 800b072:	4640      	mov	r0, r8
 800b074:	f7fe fcff 	bl	8009a76 <memcpy>
 800b078:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b07c:	f8c4 8000 	str.w	r8, [r4]
 800b080:	e7e9      	b.n	800b056 <__submore+0x48>

0800b082 <strncmp>:
 800b082:	b510      	push	{r4, lr}
 800b084:	b16a      	cbz	r2, 800b0a2 <strncmp+0x20>
 800b086:	3901      	subs	r1, #1
 800b088:	1884      	adds	r4, r0, r2
 800b08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b08e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b092:	429a      	cmp	r2, r3
 800b094:	d103      	bne.n	800b09e <strncmp+0x1c>
 800b096:	42a0      	cmp	r0, r4
 800b098:	d001      	beq.n	800b09e <strncmp+0x1c>
 800b09a:	2a00      	cmp	r2, #0
 800b09c:	d1f5      	bne.n	800b08a <strncmp+0x8>
 800b09e:	1ad0      	subs	r0, r2, r3
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	e7fc      	b.n	800b0a0 <strncmp+0x1e>
	...

0800b0a8 <asctime>:
 800b0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e0 <asctime+0x38>)
 800b0aa:	b570      	push	{r4, r5, r6, lr}
 800b0ac:	681d      	ldr	r5, [r3, #0]
 800b0ae:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	b976      	cbnz	r6, 800b0d2 <asctime+0x2a>
 800b0b4:	201a      	movs	r0, #26
 800b0b6:	f7fe fda1 	bl	8009bfc <malloc>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	63a8      	str	r0, [r5, #56]	@ 0x38
 800b0be:	b920      	cbnz	r0, 800b0ca <asctime+0x22>
 800b0c0:	4b08      	ldr	r3, [pc, #32]	@ (800b0e4 <asctime+0x3c>)
 800b0c2:	4809      	ldr	r0, [pc, #36]	@ (800b0e8 <asctime+0x40>)
 800b0c4:	213b      	movs	r1, #59	@ 0x3b
 800b0c6:	f7fe fce5 	bl	8009a94 <__assert_func>
 800b0ca:	221a      	movs	r2, #26
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	f7fd fd1f 	bl	8008b10 <memset>
 800b0d2:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0da:	f000 b807 	b.w	800b0ec <asctime_r>
 800b0de:	bf00      	nop
 800b0e0:	2000002c 	.word	0x2000002c
 800b0e4:	0800baa0 	.word	0x0800baa0
 800b0e8:	0800bc42 	.word	0x0800bc42

0800b0ec <asctime_r>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	6941      	ldr	r1, [r0, #20]
 800b0f2:	6903      	ldr	r3, [r0, #16]
 800b0f4:	6982      	ldr	r2, [r0, #24]
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 800b0fc:	9104      	str	r1, [sp, #16]
 800b0fe:	6801      	ldr	r1, [r0, #0]
 800b100:	9103      	str	r1, [sp, #12]
 800b102:	6841      	ldr	r1, [r0, #4]
 800b104:	9102      	str	r1, [sp, #8]
 800b106:	6881      	ldr	r1, [r0, #8]
 800b108:	9101      	str	r1, [sp, #4]
 800b10a:	68c1      	ldr	r1, [r0, #12]
 800b10c:	9100      	str	r1, [sp, #0]
 800b10e:	4907      	ldr	r1, [pc, #28]	@ (800b12c <asctime_r+0x40>)
 800b110:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b114:	440b      	add	r3, r1
 800b116:	4906      	ldr	r1, [pc, #24]	@ (800b130 <asctime_r+0x44>)
 800b118:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b11c:	440a      	add	r2, r1
 800b11e:	4620      	mov	r0, r4
 800b120:	4904      	ldr	r1, [pc, #16]	@ (800b134 <asctime_r+0x48>)
 800b122:	f7fd fbb3 	bl	800888c <siprintf>
 800b126:	4620      	mov	r0, r4
 800b128:	b006      	add	sp, #24
 800b12a:	bd10      	pop	{r4, pc}
 800b12c:	0800be7d 	.word	0x0800be7d
 800b130:	0800bea1 	.word	0x0800bea1
 800b134:	0800bc9b 	.word	0x0800bc9b

0800b138 <__gettzinfo>:
 800b138:	4800      	ldr	r0, [pc, #0]	@ (800b13c <__gettzinfo+0x4>)
 800b13a:	4770      	bx	lr
 800b13c:	20000080 	.word	0x20000080

0800b140 <gmtime_r>:
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	4a4d      	ldr	r2, [pc, #308]	@ (800b27c <gmtime_r+0x13c>)
 800b146:	460c      	mov	r4, r1
 800b148:	2300      	movs	r3, #0
 800b14a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b14e:	f7f5 f8af 	bl	80002b0 <__aeabi_ldivmod>
 800b152:	2a00      	cmp	r2, #0
 800b154:	bfbc      	itt	lt
 800b156:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800b15a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800b15e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b162:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 800b166:	fbb2 f3f1 	udiv	r3, r2, r1
 800b16a:	fb01 2213 	mls	r2, r1, r3, r2
 800b16e:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 800b172:	bfac      	ite	ge
 800b174:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 800b178:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	fbb2 f3f1 	udiv	r3, r2, r1
 800b182:	fb01 2213 	mls	r2, r1, r3, r2
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	6022      	str	r2, [r4, #0]
 800b18a:	1cc3      	adds	r3, r0, #3
 800b18c:	2207      	movs	r2, #7
 800b18e:	fb93 f2f2 	sdiv	r2, r3, r2
 800b192:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b196:	1a9b      	subs	r3, r3, r2
 800b198:	4939      	ldr	r1, [pc, #228]	@ (800b280 <gmtime_r+0x140>)
 800b19a:	d555      	bpl.n	800b248 <gmtime_r+0x108>
 800b19c:	3307      	adds	r3, #7
 800b19e:	61a3      	str	r3, [r4, #24]
 800b1a0:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 800b1a4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800b1a8:	fb93 f1f1 	sdiv	r1, r3, r1
 800b1ac:	4b35      	ldr	r3, [pc, #212]	@ (800b284 <gmtime_r+0x144>)
 800b1ae:	fb03 0001 	mla	r0, r3, r1, r0
 800b1b2:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 800b1b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b1ba:	4403      	add	r3, r0
 800b1bc:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 800b1c0:	fbb0 f2fc 	udiv	r2, r0, ip
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	f240 176d 	movw	r7, #365	@ 0x16d
 800b1ca:	4a2f      	ldr	r2, [pc, #188]	@ (800b288 <gmtime_r+0x148>)
 800b1cc:	fbb0 f2f2 	udiv	r2, r0, r2
 800b1d0:	2664      	movs	r6, #100	@ 0x64
 800b1d2:	1a9b      	subs	r3, r3, r2
 800b1d4:	fbb3 f2f7 	udiv	r2, r3, r7
 800b1d8:	fbb3 f3fc 	udiv	r3, r3, ip
 800b1dc:	fbb2 f5f6 	udiv	r5, r2, r6
 800b1e0:	1aeb      	subs	r3, r5, r3
 800b1e2:	4403      	add	r3, r0
 800b1e4:	fb07 3312 	mls	r3, r7, r2, r3
 800b1e8:	2099      	movs	r0, #153	@ 0x99
 800b1ea:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800b1ee:	3702      	adds	r7, #2
 800b1f0:	f103 0e01 	add.w	lr, r3, #1
 800b1f4:	fbb7 fcf0 	udiv	ip, r7, r0
 800b1f8:	fb00 f00c 	mul.w	r0, r0, ip
 800b1fc:	3002      	adds	r0, #2
 800b1fe:	f04f 0805 	mov.w	r8, #5
 800b202:	fbb0 f0f8 	udiv	r0, r0, r8
 800b206:	ebae 0000 	sub.w	r0, lr, r0
 800b20a:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 800b20e:	4577      	cmp	r7, lr
 800b210:	bf8c      	ite	hi
 800b212:	f06f 0709 	mvnhi.w	r7, #9
 800b216:	2702      	movls	r7, #2
 800b218:	4467      	add	r7, ip
 800b21a:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 800b21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b222:	2f01      	cmp	r7, #1
 800b224:	bf98      	it	ls
 800b226:	3101      	addls	r1, #1
 800b228:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 800b22c:	d312      	bcc.n	800b254 <gmtime_r+0x114>
 800b22e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800b232:	61e3      	str	r3, [r4, #28]
 800b234:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 800b238:	2300      	movs	r3, #0
 800b23a:	60e0      	str	r0, [r4, #12]
 800b23c:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800b240:	6223      	str	r3, [r4, #32]
 800b242:	4620      	mov	r0, r4
 800b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b248:	2800      	cmp	r0, #0
 800b24a:	61a3      	str	r3, [r4, #24]
 800b24c:	dba8      	blt.n	800b1a0 <gmtime_r+0x60>
 800b24e:	fb90 f1f1 	sdiv	r1, r0, r1
 800b252:	e7ab      	b.n	800b1ac <gmtime_r+0x6c>
 800b254:	f012 0f03 	tst.w	r2, #3
 800b258:	d102      	bne.n	800b260 <gmtime_r+0x120>
 800b25a:	fb06 2515 	mls	r5, r6, r5, r2
 800b25e:	b95d      	cbnz	r5, 800b278 <gmtime_r+0x138>
 800b260:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800b264:	fbb2 f6f5 	udiv	r6, r2, r5
 800b268:	fb05 2216 	mls	r2, r5, r6, r2
 800b26c:	fab2 f282 	clz	r2, r2
 800b270:	0952      	lsrs	r2, r2, #5
 800b272:	333b      	adds	r3, #59	@ 0x3b
 800b274:	4413      	add	r3, r2
 800b276:	e7dc      	b.n	800b232 <gmtime_r+0xf2>
 800b278:	2201      	movs	r2, #1
 800b27a:	e7fa      	b.n	800b272 <gmtime_r+0x132>
 800b27c:	00015180 	.word	0x00015180
 800b280:	00023ab1 	.word	0x00023ab1
 800b284:	fffdc54f 	.word	0xfffdc54f
 800b288:	00023ab0 	.word	0x00023ab0

0800b28c <_fstat_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4d07      	ldr	r5, [pc, #28]	@ (800b2ac <_fstat_r+0x20>)
 800b290:	2300      	movs	r3, #0
 800b292:	4604      	mov	r4, r0
 800b294:	4608      	mov	r0, r1
 800b296:	4611      	mov	r1, r2
 800b298:	602b      	str	r3, [r5, #0]
 800b29a:	f7f6 fcd7 	bl	8001c4c <_fstat>
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	d102      	bne.n	800b2a8 <_fstat_r+0x1c>
 800b2a2:	682b      	ldr	r3, [r5, #0]
 800b2a4:	b103      	cbz	r3, 800b2a8 <_fstat_r+0x1c>
 800b2a6:	6023      	str	r3, [r4, #0]
 800b2a8:	bd38      	pop	{r3, r4, r5, pc}
 800b2aa:	bf00      	nop
 800b2ac:	2000556c 	.word	0x2000556c

0800b2b0 <_isatty_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d06      	ldr	r5, [pc, #24]	@ (800b2cc <_isatty_r+0x1c>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	602b      	str	r3, [r5, #0]
 800b2bc:	f7f6 fcd6 	bl	8001c6c <_isatty>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	d102      	bne.n	800b2ca <_isatty_r+0x1a>
 800b2c4:	682b      	ldr	r3, [r5, #0]
 800b2c6:	b103      	cbz	r3, 800b2ca <_isatty_r+0x1a>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	2000556c 	.word	0x2000556c

0800b2d0 <_sbrk_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	4d06      	ldr	r5, [pc, #24]	@ (800b2ec <_sbrk_r+0x1c>)
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	602b      	str	r3, [r5, #0]
 800b2dc:	f7f6 fcde 	bl	8001c9c <_sbrk>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_sbrk_r+0x1a>
 800b2e4:	682b      	ldr	r3, [r5, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_sbrk_r+0x1a>
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	2000556c 	.word	0x2000556c

0800b2f0 <abort>:
 800b2f0:	b508      	push	{r3, lr}
 800b2f2:	2006      	movs	r0, #6
 800b2f4:	f000 f8e2 	bl	800b4bc <raise>
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	f7f6 fc57 	bl	8001bac <_exit>
	...

0800b300 <__env_lock>:
 800b300:	4801      	ldr	r0, [pc, #4]	@ (800b308 <__env_lock+0x8>)
 800b302:	f7fe bbad 	b.w	8009a60 <__retarget_lock_acquire_recursive>
 800b306:	bf00      	nop
 800b308:	20005571 	.word	0x20005571

0800b30c <__env_unlock>:
 800b30c:	4801      	ldr	r0, [pc, #4]	@ (800b314 <__env_unlock+0x8>)
 800b30e:	f7fe bba9 	b.w	8009a64 <__retarget_lock_release_recursive>
 800b312:	bf00      	nop
 800b314:	20005571 	.word	0x20005571

0800b318 <_realloc_r>:
 800b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	4607      	mov	r7, r0
 800b31e:	4614      	mov	r4, r2
 800b320:	460d      	mov	r5, r1
 800b322:	b921      	cbnz	r1, 800b32e <_realloc_r+0x16>
 800b324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b328:	4611      	mov	r1, r2
 800b32a:	f7fe bc99 	b.w	8009c60 <_malloc_r>
 800b32e:	b92a      	cbnz	r2, 800b33c <_realloc_r+0x24>
 800b330:	f7fe fbd6 	bl	8009ae0 <_free_r>
 800b334:	4625      	mov	r5, r4
 800b336:	4628      	mov	r0, r5
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	f000 f8da 	bl	800b4f4 <_malloc_usable_size_r>
 800b340:	4284      	cmp	r4, r0
 800b342:	4606      	mov	r6, r0
 800b344:	d802      	bhi.n	800b34c <_realloc_r+0x34>
 800b346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b34a:	d8f4      	bhi.n	800b336 <_realloc_r+0x1e>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4638      	mov	r0, r7
 800b350:	f7fe fc86 	bl	8009c60 <_malloc_r>
 800b354:	4680      	mov	r8, r0
 800b356:	b908      	cbnz	r0, 800b35c <_realloc_r+0x44>
 800b358:	4645      	mov	r5, r8
 800b35a:	e7ec      	b.n	800b336 <_realloc_r+0x1e>
 800b35c:	42b4      	cmp	r4, r6
 800b35e:	4622      	mov	r2, r4
 800b360:	4629      	mov	r1, r5
 800b362:	bf28      	it	cs
 800b364:	4632      	movcs	r2, r6
 800b366:	f7fe fb86 	bl	8009a76 <memcpy>
 800b36a:	4629      	mov	r1, r5
 800b36c:	4638      	mov	r0, r7
 800b36e:	f7fe fbb7 	bl	8009ae0 <_free_r>
 800b372:	e7f1      	b.n	800b358 <_realloc_r+0x40>

0800b374 <_strtol_l.isra.0>:
 800b374:	2b24      	cmp	r3, #36	@ 0x24
 800b376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37a:	4686      	mov	lr, r0
 800b37c:	4690      	mov	r8, r2
 800b37e:	d801      	bhi.n	800b384 <_strtol_l.isra.0+0x10>
 800b380:	2b01      	cmp	r3, #1
 800b382:	d106      	bne.n	800b392 <_strtol_l.isra.0+0x1e>
 800b384:	f7fe fb40 	bl	8009a08 <__errno>
 800b388:	2316      	movs	r3, #22
 800b38a:	6003      	str	r3, [r0, #0]
 800b38c:	2000      	movs	r0, #0
 800b38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b392:	4834      	ldr	r0, [pc, #208]	@ (800b464 <_strtol_l.isra.0+0xf0>)
 800b394:	460d      	mov	r5, r1
 800b396:	462a      	mov	r2, r5
 800b398:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b39c:	5d06      	ldrb	r6, [r0, r4]
 800b39e:	f016 0608 	ands.w	r6, r6, #8
 800b3a2:	d1f8      	bne.n	800b396 <_strtol_l.isra.0+0x22>
 800b3a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b3a6:	d110      	bne.n	800b3ca <_strtol_l.isra.0+0x56>
 800b3a8:	782c      	ldrb	r4, [r5, #0]
 800b3aa:	2601      	movs	r6, #1
 800b3ac:	1c95      	adds	r5, r2, #2
 800b3ae:	f033 0210 	bics.w	r2, r3, #16
 800b3b2:	d115      	bne.n	800b3e0 <_strtol_l.isra.0+0x6c>
 800b3b4:	2c30      	cmp	r4, #48	@ 0x30
 800b3b6:	d10d      	bne.n	800b3d4 <_strtol_l.isra.0+0x60>
 800b3b8:	782a      	ldrb	r2, [r5, #0]
 800b3ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b3be:	2a58      	cmp	r2, #88	@ 0x58
 800b3c0:	d108      	bne.n	800b3d4 <_strtol_l.isra.0+0x60>
 800b3c2:	786c      	ldrb	r4, [r5, #1]
 800b3c4:	3502      	adds	r5, #2
 800b3c6:	2310      	movs	r3, #16
 800b3c8:	e00a      	b.n	800b3e0 <_strtol_l.isra.0+0x6c>
 800b3ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800b3cc:	bf04      	itt	eq
 800b3ce:	782c      	ldrbeq	r4, [r5, #0]
 800b3d0:	1c95      	addeq	r5, r2, #2
 800b3d2:	e7ec      	b.n	800b3ae <_strtol_l.isra.0+0x3a>
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1f6      	bne.n	800b3c6 <_strtol_l.isra.0+0x52>
 800b3d8:	2c30      	cmp	r4, #48	@ 0x30
 800b3da:	bf14      	ite	ne
 800b3dc:	230a      	movne	r3, #10
 800b3de:	2308      	moveq	r3, #8
 800b3e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b3e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	fbbc f9f3 	udiv	r9, ip, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b3f8:	2f09      	cmp	r7, #9
 800b3fa:	d80f      	bhi.n	800b41c <_strtol_l.isra.0+0xa8>
 800b3fc:	463c      	mov	r4, r7
 800b3fe:	42a3      	cmp	r3, r4
 800b400:	dd1b      	ble.n	800b43a <_strtol_l.isra.0+0xc6>
 800b402:	1c57      	adds	r7, r2, #1
 800b404:	d007      	beq.n	800b416 <_strtol_l.isra.0+0xa2>
 800b406:	4581      	cmp	r9, r0
 800b408:	d314      	bcc.n	800b434 <_strtol_l.isra.0+0xc0>
 800b40a:	d101      	bne.n	800b410 <_strtol_l.isra.0+0x9c>
 800b40c:	45a2      	cmp	sl, r4
 800b40e:	db11      	blt.n	800b434 <_strtol_l.isra.0+0xc0>
 800b410:	fb00 4003 	mla	r0, r0, r3, r4
 800b414:	2201      	movs	r2, #1
 800b416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b41a:	e7eb      	b.n	800b3f4 <_strtol_l.isra.0+0x80>
 800b41c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b420:	2f19      	cmp	r7, #25
 800b422:	d801      	bhi.n	800b428 <_strtol_l.isra.0+0xb4>
 800b424:	3c37      	subs	r4, #55	@ 0x37
 800b426:	e7ea      	b.n	800b3fe <_strtol_l.isra.0+0x8a>
 800b428:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b42c:	2f19      	cmp	r7, #25
 800b42e:	d804      	bhi.n	800b43a <_strtol_l.isra.0+0xc6>
 800b430:	3c57      	subs	r4, #87	@ 0x57
 800b432:	e7e4      	b.n	800b3fe <_strtol_l.isra.0+0x8a>
 800b434:	f04f 32ff 	mov.w	r2, #4294967295
 800b438:	e7ed      	b.n	800b416 <_strtol_l.isra.0+0xa2>
 800b43a:	1c53      	adds	r3, r2, #1
 800b43c:	d108      	bne.n	800b450 <_strtol_l.isra.0+0xdc>
 800b43e:	2322      	movs	r3, #34	@ 0x22
 800b440:	f8ce 3000 	str.w	r3, [lr]
 800b444:	4660      	mov	r0, ip
 800b446:	f1b8 0f00 	cmp.w	r8, #0
 800b44a:	d0a0      	beq.n	800b38e <_strtol_l.isra.0+0x1a>
 800b44c:	1e69      	subs	r1, r5, #1
 800b44e:	e006      	b.n	800b45e <_strtol_l.isra.0+0xea>
 800b450:	b106      	cbz	r6, 800b454 <_strtol_l.isra.0+0xe0>
 800b452:	4240      	negs	r0, r0
 800b454:	f1b8 0f00 	cmp.w	r8, #0
 800b458:	d099      	beq.n	800b38e <_strtol_l.isra.0+0x1a>
 800b45a:	2a00      	cmp	r2, #0
 800b45c:	d1f6      	bne.n	800b44c <_strtol_l.isra.0+0xd8>
 800b45e:	f8c8 1000 	str.w	r1, [r8]
 800b462:	e794      	b.n	800b38e <_strtol_l.isra.0+0x1a>
 800b464:	0800bd7d 	.word	0x0800bd7d

0800b468 <_strtol_r>:
 800b468:	f7ff bf84 	b.w	800b374 <_strtol_l.isra.0>

0800b46c <_raise_r>:
 800b46c:	291f      	cmp	r1, #31
 800b46e:	b538      	push	{r3, r4, r5, lr}
 800b470:	4605      	mov	r5, r0
 800b472:	460c      	mov	r4, r1
 800b474:	d904      	bls.n	800b480 <_raise_r+0x14>
 800b476:	2316      	movs	r3, #22
 800b478:	6003      	str	r3, [r0, #0]
 800b47a:	f04f 30ff 	mov.w	r0, #4294967295
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b482:	b112      	cbz	r2, 800b48a <_raise_r+0x1e>
 800b484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b488:	b94b      	cbnz	r3, 800b49e <_raise_r+0x32>
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f830 	bl	800b4f0 <_getpid_r>
 800b490:	4622      	mov	r2, r4
 800b492:	4601      	mov	r1, r0
 800b494:	4628      	mov	r0, r5
 800b496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b49a:	f000 b817 	b.w	800b4cc <_kill_r>
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d00a      	beq.n	800b4b8 <_raise_r+0x4c>
 800b4a2:	1c59      	adds	r1, r3, #1
 800b4a4:	d103      	bne.n	800b4ae <_raise_r+0x42>
 800b4a6:	2316      	movs	r3, #22
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7e7      	b.n	800b47e <_raise_r+0x12>
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4798      	blx	r3
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e7e0      	b.n	800b47e <_raise_r+0x12>

0800b4bc <raise>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <raise+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f7ff bfd3 	b.w	800b46c <_raise_r>
 800b4c6:	bf00      	nop
 800b4c8:	2000002c 	.word	0x2000002c

0800b4cc <_kill_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4d07      	ldr	r5, [pc, #28]	@ (800b4ec <_kill_r+0x20>)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f6 fb57 	bl	8001b8c <_kill>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_kill_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_kill_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	2000556c 	.word	0x2000556c

0800b4f0 <_getpid_r>:
 800b4f0:	f7f6 bb44 	b.w	8001b7c <_getpid>

0800b4f4 <_malloc_usable_size_r>:
 800b4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f8:	1f18      	subs	r0, r3, #4
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bfbc      	itt	lt
 800b4fe:	580b      	ldrlt	r3, [r1, r0]
 800b500:	18c0      	addlt	r0, r0, r3
 800b502:	4770      	bx	lr

0800b504 <_init>:
 800b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b506:	bf00      	nop
 800b508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b50a:	bc08      	pop	{r3}
 800b50c:	469e      	mov	lr, r3
 800b50e:	4770      	bx	lr

0800b510 <_fini>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	bf00      	nop
 800b514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b516:	bc08      	pop	{r3}
 800b518:	469e      	mov	lr, r3
 800b51a:	4770      	bx	lr
