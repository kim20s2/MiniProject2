<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<item key="hasShownOverlayPopupBefore" value="true"/>
	<item key="replaceBarOpen" value="false"/>
	<list key="searchhistory">
		<item value="cb_data.pos"/>
		<item value="cb_data.len"/>
		<item value="response"/>
		<item value="esp_read_line"/>
		<item value="led_ON"/>
		<item value="esp_event"/>
		<item value="NTPTIME_TASK_PERIOD_MS"/>
		<item value="ntp_task"/>
		<item value="esp_at_command"/>
		<item value="esp_client_conn"/>
		<item value="memset(resp, 0x00, MAX_UART_RX_BUFFER);"/>
		<item value="ESP_EVENT"/>
		<item value="esp_send_data"/>
		<item value="esp_send_data_id"/>
		<item value="at_cmd"/>
	</list>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item key="selection" value="&#x0D;&#x0A;void Weather_Task(void *argument)&#x0D;&#x0A;{&#x0D;&#x0A;&#x09;/* USER CODE BEGIN Weather_Task */&#x0D;&#x0A;&#x09;/* Infinite loop */&#x0D;&#x0A;&#x09;char request[MAX_HTTP_BUF];&#x0D;&#x0A;&#x09;char get_data[MAX_HTTP_BUF];&#x0D;&#x0A;&#x09;char base_date[9], base_time[5];&#x0D;&#x0A;&#x09;TickType_t xLastWakeTime = xTaskGetTickCount();&#x0D;&#x0A;&#x09;const TickType_t xPeriod = pdMS_TO_TICKS(WEATHER_TASK_PERIOD_MS);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;for(;;)&#x0D;&#x0A;&#x09;{&#x0D;&#x0A;&#x09;&#x09;time_t current_time;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;// NTP 시간 읽기&#x0D;&#x0A;&#x09;&#x09;if(osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;current_time = ntp_time;&#x0D;&#x0A;&#x09;&#x09;&#x09;osMutexRelease(NTP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;else&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;vTaskDelay(pdMS_TO_TICKS(1000));&#x0D;&#x0A;&#x09;&#x09;&#x09;continue;&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;// base_date, base_time 계산&#x0D;&#x0A;&#x09;&#x09;get_base_datetime(current_time, base_date, base_time);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;if(esp_get_status() == 0)&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;cb_data.length = 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memset(cb_data.buf, 0, sizeof(cb_data.buf));&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memset(response, 0, sizeof(response));&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(request, &quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;apihub.kma.go.kr\&quot;,80\r\n&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)request, strlen(request), 100);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_Delay(100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(get_data,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;GET /1360000/VilageFcstInfoService/getVilageFcst?&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;serviceKey=%s&amp;numOfRows=10&amp;pageNo=1&amp;base_date=%s&amp;&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;base_time=%s&amp;nx=%s&amp;ny=%s&amp;_type=json HTTP/1.1\r\n&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;Host: apihub.kma.go.kr\r\n\r\n&quot;,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;API_KEY, base_date, base_time, NX, NY);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(request, &quot;AT+CIPSEND=%d\r\n&quot;, strlen(get_data));&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)request, strlen(request), 100);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_Delay(100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)get_data, strlen(get_data), 100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;int timeout = 5000;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;while(timeout &gt; 0 &amp;&amp; cb_data.length == 0)&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;HAL_Delay(10);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;timeout -= 10;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memcpy(response, cb_data.buf, cb_data.length);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;int temp = 0, humid = 0, rain = 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;char *p = strstr(response, &quot;\&quot;TMP\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p) sscanf(p, &quot;\&quot;TMP\&quot;:%d&quot;, &amp;temp);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;p = strstr(response, &quot;\&quot;REH\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p) sscanf(p, &quot;\&quot;REH\&quot;:%d&quot;, &amp;humid);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;p = strstr(response, &quot;\&quot;PTY\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p)&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;int pty;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;sscanf(p, &quot;\&quot;PTY\&quot;:%d&quot;, &amp;pty);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;rain = (pty != 0) ? 1 : 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;printf(&quot;Weather Info - Temp: %d, Humidity: %d%%, Rain: %s\r\n&quot;,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;temp, humid, rain ? &quot;Yes&quot; : &quot;No&quot;);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;osMutexRelease(ESP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;else&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;printf(&quot;TCP not connected, reconnecting...\r\n&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;esp_client_conn();&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;osMutexRelease(ESP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;vTaskDelayUntil(&amp;xLastWakeTime, xPeriod);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x09;/* USER CODE END Weather_Task */&#x0D;&#x0A;}"/>
		<list key="findhistory">
			<item value="&#x0D;&#x0A;void Weather_Task(void *argument)&#x0D;&#x0A;{&#x0D;&#x0A;&#x09;/* USER CODE BEGIN Weather_Task */&#x0D;&#x0A;&#x09;/* Infinite loop */&#x0D;&#x0A;&#x09;char request[MAX_HTTP_BUF];&#x0D;&#x0A;&#x09;char get_data[MAX_HTTP_BUF];&#x0D;&#x0A;&#x09;char base_date[9], base_time[5];&#x0D;&#x0A;&#x09;TickType_t xLastWakeTime = xTaskGetTickCount();&#x0D;&#x0A;&#x09;const TickType_t xPeriod = pdMS_TO_TICKS(WEATHER_TASK_PERIOD_MS);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;for(;;)&#x0D;&#x0A;&#x09;{&#x0D;&#x0A;&#x09;&#x09;time_t current_time;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;// NTP 시간 읽기&#x0D;&#x0A;&#x09;&#x09;if(osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;current_time = ntp_time;&#x0D;&#x0A;&#x09;&#x09;&#x09;osMutexRelease(NTP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;else&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;vTaskDelay(pdMS_TO_TICKS(1000));&#x0D;&#x0A;&#x09;&#x09;&#x09;continue;&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;// base_date, base_time 계산&#x0D;&#x0A;&#x09;&#x09;get_base_datetime(current_time, base_date, base_time);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;if(esp_get_status() == 0)&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;cb_data.length = 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memset(cb_data.buf, 0, sizeof(cb_data.buf));&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memset(response, 0, sizeof(response));&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(request, &quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;apihub.kma.go.kr\&quot;,80\r\n&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)request, strlen(request), 100);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_Delay(100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(get_data,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;GET /1360000/VilageFcstInfoService/getVilageFcst?&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;serviceKey=%s&amp;numOfRows=10&amp;pageNo=1&amp;base_date=%s&amp;&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;base_time=%s&amp;nx=%s&amp;ny=%s&amp;_type=json HTTP/1.1\r\n&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;Host: apihub.kma.go.kr\r\n\r\n&quot;,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;API_KEY, base_date, base_time, NX, NY);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(request, &quot;AT+CIPSEND=%d\r\n&quot;, strlen(get_data));&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)request, strlen(request), 100);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_Delay(100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)get_data, strlen(get_data), 100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;int timeout = 5000;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;while(timeout &gt; 0 &amp;&amp; cb_data.length == 0)&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;HAL_Delay(10);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;timeout -= 10;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memcpy(response, cb_data.buf, cb_data.length);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;int temp = 0, humid = 0, rain = 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;char *p = strstr(response, &quot;\&quot;TMP\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p) sscanf(p, &quot;\&quot;TMP\&quot;:%d&quot;, &amp;temp);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;p = strstr(response, &quot;\&quot;REH\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p) sscanf(p, &quot;\&quot;REH\&quot;:%d&quot;, &amp;humid);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;p = strstr(response, &quot;\&quot;PTY\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p)&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;int pty;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;sscanf(p, &quot;\&quot;PTY\&quot;:%d&quot;, &amp;pty);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;rain = (pty != 0) ? 1 : 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;printf(&quot;Weather Info - Temp: %d, Humidity: %d%%, Rain: %s\r\n&quot;,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;temp, humid, rain ? &quot;Yes&quot; : &quot;No&quot;);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;osMutexRelease(ESP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;else&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;printf(&quot;TCP not connected, reconnecting...\r\n&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;esp_client_conn();&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;osMutexRelease(ESP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;vTaskDelayUntil(&amp;xLastWakeTime, xPeriod);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x09;/* USER CODE END Weather_Task */&#x0D;&#x0A;}"/>
			<item value="&#x0D;&#x0A;void Weather_Task(void *argument)&#x0D;&#x0A;{&#x0D;&#x0A;  /* USER CODE BEGIN Weather_Task */&#x0D;&#x0A;  /* Infinite loop */&#x0D;&#x0A;&#x09;char request[MAX_HTTP_BUF];&#x0D;&#x0A;&#x09;char get_data[MAX_HTTP_BUF];&#x0D;&#x0A;&#x09;char base_date[9], base_time[5];&#x0D;&#x0A;&#x09;TickType_t xLastWakeTime = xTaskGetTickCount();&#x0D;&#x0A;&#x09;const TickType_t xPeriod = pdMS_TO_TICKS(WEATHER_TASK_PERIOD_MS);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;for(;;)&#x0D;&#x0A;&#x09;{&#x0D;&#x0A;&#x09;&#x09;time_t current_time;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;// NTP 시간 읽기&#x0D;&#x0A;&#x09;&#x09;if(osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;current_time = ntp_time;&#x0D;&#x0A;&#x09;&#x09;&#x09;osMutexRelease(NTP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;else&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;vTaskDelay(pdMS_TO_TICKS(1000));&#x0D;&#x0A;&#x09;&#x09;&#x09;continue;&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;// base_date, base_time 계산&#x0D;&#x0A;&#x09;&#x09;get_base_datetime(current_time, base_date, base_time);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;if(esp_get_status() == 0)&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;cb_data.length = 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memset(cb_data.buf, 0, sizeof(cb_data.buf));&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memset(response, 0, sizeof(response));&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(request, &quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;apihub.kma.go.kr\&quot;,80\r\n&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)request, strlen(request), 100);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_Delay(100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(get_data,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;GET /1360000/VilageFcstInfoService/getVilageFcst?&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;serviceKey=%s&amp;numOfRows=10&amp;pageNo=1&amp;base_date=%s&amp;&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;base_time=%s&amp;nx=%s&amp;ny=%s&amp;_type=json HTTP/1.1\r\n&quot;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;&quot;Host: apihub.kma.go.kr\r\n\r\n&quot;,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;&#x09;API_KEY, base_date, base_time, NX, NY);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;sprintf(request, &quot;AT+CIPSEND=%d\r\n&quot;, strlen(get_data));&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)request, strlen(request), 100);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_Delay(100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;HAL_UART_Transmit(&amp;huart6, (uint8_t *)get_data, strlen(get_data), 100);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;int timeout = 5000;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;while(timeout &gt; 0 &amp;&amp; cb_data.length == 0)&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;HAL_Delay(10);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;timeout -= 10;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;memcpy(response, cb_data.buf, cb_data.length);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;int temp = 0, humid = 0, rain = 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;char *p = strstr(response, &quot;\&quot;TMP\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p) sscanf(p, &quot;\&quot;TMP\&quot;:%d&quot;, &amp;temp);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;p = strstr(response, &quot;\&quot;REH\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p) sscanf(p, &quot;\&quot;REH\&quot;:%d&quot;, &amp;humid);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;p = strstr(response, &quot;\&quot;PTY\&quot;:&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;if(p)&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;int pty;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;sscanf(p, &quot;\&quot;PTY\&quot;:%d&quot;, &amp;pty);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;rain = (pty != 0) ? 1 : 0;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;printf(&quot;Weather Info - Temp: %d, Humidity: %d%%, Rain: %s\r\n&quot;,&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;&#x09;   temp, humid, rain ? &quot;Yes&quot; : &quot;No&quot;);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;osMutexRelease(ESP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;else&#x0D;&#x0A;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;printf(&quot;TCP not connected, reconnecting...\r\n&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;if(osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK)&#x0D;&#x0A;&#x09;&#x09;&#x09;{&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;esp_client_conn();&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;osMutexRelease(ESP_MutexHandle);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;vTaskDelayUntil(&amp;xLastWakeTime, xPeriod);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;  /* USER CODE END Weather_Task */&#x0D;&#x0A;}"/>
		</list>
	</section>
</section>
