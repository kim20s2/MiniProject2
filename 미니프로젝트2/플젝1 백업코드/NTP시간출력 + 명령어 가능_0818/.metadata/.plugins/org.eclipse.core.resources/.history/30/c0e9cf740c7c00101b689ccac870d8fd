//서울기술교육센터 AIOT & Embedded System
//2024-04-16 By KSH

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "esp.h"
#include <time.h>
#include "FreeRTOS.h"   // 추가
#include "task.h"       // 추가

static char ip_addr[16];
char response[MAX_ESP_RX_BUFFER];

#define NTP_SERVER "time.kriss.re.kr"
#define NTP_PORT   123
#define NTP_PACKET_SIZE 48

//==================uart2=========================
extern UART_HandleTypeDef huart2;
volatile unsigned char rx2Flag = 0;
volatile char rx2Data[50];
uint8_t cdata;

//==================uart6=========================
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;

// NTP 관련 함수 선언

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
	// 수정
	*length = 0;
	memset(resp, 0x00, MAX_ESP_RX_BUFFER);
	// ⚠️ cb_data는 지우지 말 것: +IPD(링크0) 명령 프레임이 여기에 쌓임


	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
		return -1;

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER)
			return -2;
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL)
			return -3;
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
		{
			printf("ESP: TCP connection closed.\r\n");
			//esp_client_conn();   // 호출 재진입 위험 줄이기
			return -5;
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
		{
			memcpy(resp, cb_data.buf, cb_data.length);
			*length = cb_data.length;
			return 0;
		}

		time_out -= 10;
		HAL_Delay(10);
	}
	return -4; // Timeout
}

// 한 줄씩 ESP 응답 읽기

int esp_read_line(char *buf, int buf_size, int timeout_ms)
{
    int i = 0;
    int elapsed = 0;

    memset(buf, 0, buf_size);

    while (elapsed < timeout_ms)
    {
        if (cb_data.length > 0)
        {
            char c = cb_data.buf[0];

            // 버퍼 앞으로 이동
            memmove(cb_data.buf, cb_data.buf + 1, cb_data.length - 1);
            cb_data.length--;

            if (c == '\n' || c == '\r')
            {
                if (i == 0) // 빈 줄 무시
                    continue;
                buf[i] = 0;
                return i; // 읽은 길이 반환
            }

            if (i < buf_size - 1)
                buf[i++] = c;
        }
        else
        {
            HAL_Delay(1);
            elapsed += 1;
        }
    }
    return 0; // 타임아웃
}


static int esp_reset(void)
{
    uint16_t length = 0;
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
    {
    	return -1;
    }
    else
    	HAL_Delay(500);	//reboot
    return 0;
}

static int esp_get_ip_addr(uint8_t is_debug)
{
    if(strlen(ip_addr) != 0)
    {
        if(strcmp(ip_addr, "0.0.0.0") == 0)
            return -1;
    }
    else
    {
        uint16_t length;
        if(esp_at_command((uint8_t *)"AT+CIPSTA?\r\n", (uint8_t *)response, &length, 1000) != 0)
            printf("ip_state command fail\r\n");
        else
        {
            char *line = strtok(response, "\r\n");

            if(is_debug)
            {
                for(int i = 0 ; i < length ; i++)
                    printf("%c", response[i]);
            }

            while(line != NULL)
            {
                if(strstr(line, "ip:") != NULL)
                {
                    char *ip;

                    strtok(line, "\"");
                    ip = strtok(NULL, "\"");
                    if(strcmp(ip, "0.0.0.0") != 0)
                    {
                        memset(ip_addr, 0x00, sizeof(ip_addr));
                        memcpy(ip_addr, ip, strlen(ip));
                        return 0;
                    }
                }
                line = strtok(NULL, "\r\n");
            }
        }

        return -1;
    }

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
    uint16_t length = 0;

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
        printf("request ip_addr command fail\r\n");
    else
    {
        char *line = strtok(response, "\r\n");

        if(is_debug)
        {
            for(int i = 0 ; i < length ; i++)
                printf("%c", response[i]);
        }

        while(line != NULL)
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
            {
                char *ip;

                strtok(line, "\"");
                ip = strtok(NULL, "\"");
                if(strcmp(ip, "0.0.0.0") != 0)
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
                    memcpy(ip_addr, ip, strlen(ip));
                    return 0;
                }
            }
            line = strtok(NULL, "\r\n");
        }
    }
    return -1;
}

int esp_client_conn()
{
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
	uint16_t length = 0;
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT

	esp_send_data("["LOGID":"PASSWD"]");
	return 0;
}
int esp_get_status()
{
	uint16_t length = 0;
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
    {
    	return 0;
    }
	return -1;
}
int drv_esp_init(void)
{
    memset(ip_addr, 0x00, sizeof(ip_addr));
    HAL_UART_Receive_IT(&huart6, &data, 1);

    return esp_reset();
}
void reset_func()
{
	printf("esp reset... ");
	if(esp_reset() == 0)
			printf("OK\r\n");
	else
			printf("fail\r\n");
}

void version_func()
{
  uint16_t length = 0;
  printf("esp firmware version\r\n");
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
      printf("ap scan command fail\r\n");
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
  uint16_t length = 0;
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
  if(ssid == NULL || passwd == NULL)
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
      return;
  }
  // 수정
  if (esp_at_command((uint8_t*)"AT+CWMODE=1\r\n", (uint8_t*)response, &length, 3000) != 0) {
      if (strstr((char*)response, "no change") == NULL) {
          printf("Station mode fail\r\n");
      }
  }

  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
      printf("ap scan command fail : %s\r\n",at_cmd);
}

void ip_state_func()
{
  uint16_t length = 0;
  if(esp_at_command((uint8_t *)"AT+CWJAP?\r\n", (uint8_t *)response, &length, 1000) != 0)
      printf("ap connected info command fail\r\n");
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
  printf("\r\n");

  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART6)  // ESP
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
        {
            cb_data.buf[cb_data.length++] = data;
            if(data == '\n')   // 한 프레임 끝 이부분 수정
            {
                cb_data.new_data = 1; // Task에서 처리하도록 신호
            }
        }
        HAL_UART_Receive_IT(huart, &data, 1);
    }

    if(huart->Instance == USART2)  // 콘솔
    {
        static int i = 0;
        rx2Data[i] = cdata;
        if(rx2Data[i] == '\r')
        {
            rx2Data[i] = '\0';
            rx2Flag = 1;
            i = 0;
        }
        else
        {
            i++;
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
    }
}



void AiotClient_Init()
{
	reset_func();
	version_func();
	//ip_state_func();
	ap_conn_func(SSID,PASS);
	request_ip_addr(1);
	esp_client_conn();
	esp_get_status();
}

// 링크ID 지정 전송
/*
int esp_send_data_id(int link_id, const char *data)
{
    char at_cmd[64];
    uint16_t length = 0;
    int len = strlen(data);
    char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };

	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
    if (esp_at_command((uint8_t*)at_cmd, (uint8_t*)response, &length, 2000) != 0)
        return -1;

    if (HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 2000) != HAL_OK)
        return -2;

    return 0;
}

void esp_send_data(char *data)   // 기존 함수는 link 0로 고정
{
    (void)esp_send_data_id(0, data);
}
*/
void esp_send_data(char *data)
{
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
	uint16_t length = 0;
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
	}
}

//==================uart2=========================
int drv_uart_init(void)
{
    HAL_UART_Receive_IT(&huart2, &cdata,1);
    return 0;
}

int drv_uart_tx_buffer(uint8_t *buf, uint16_t size)
{
    if(HAL_UART_Transmit(&huart2, buf, size, 100) != HAL_OK)
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
        return ch;
    return -1;
}

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
        return -1;

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;

        tm_info.tm_mday = day;
        tm_info.tm_hour = hour;
        tm_info.tm_min  = min;
        tm_info.tm_sec  = sec;
        tm_info.tm_year = year - 1900;

        *epoch_out = mktime(&tm_info);
        return 0;
    }
    return -1;
}

int esp_ntp_config(void)
{
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
        return -1;

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
    return 0;
}

// esp.c
// esp.c

// 발표시각: 정시(00). “매시각 10분 이후 호출” 규칙
void get_base_datetime_hour(char *base_date_str, size_t date_len,
                            char *base_time_str, size_t time_len)
{
    time_t now = time(NULL);
    struct tm *tm_info = localtime(&now);
    int hour = tm_info ? tm_info->tm_hour : 0;
    int min  = tm_info ? tm_info->tm_min  : 0;

    if (min < 10) {                  // 10분 이전이면 이전 시각 00
        hour -= 1;
        if (hour < 0) {
            hour = 23;
            if (tm_info) { tm_info->tm_mday -= 1; mktime(tm_info); }
        }
    }
    if (tm_info) strftime(base_date_str, date_len, "%Y%m%d", tm_info);
    else snprintf(base_date_str, date_len, "19700101");

    snprintf(base_time_str, time_len, "%02d00", hour);
}

// XML에서 T1H/REH/PTY만 추출
void parse_weather_info(const char *xml)
{
    if (!xml) { printf("weather: empty\r\n"); return; }
    char *p; char v[16];

    p = strstr(xml, "<category>T1H</category>");
    if (p && (p = strstr(p, "<obsrValue>")) && sscanf(p, "<obsrValue>%15[^<]", v)==1)
        printf("🌡 온도: %s ℃\r\n", v);

    p = strstr(xml, "<category>REH</category>");
    if (p && (p = strstr(p, "<obsrValue>")) && sscanf(p, "<obsrValue>%15[^<]", v)==1)
        printf("💧 습도: %s %%\r\n", v);

    p = strstr(xml, "<category>PTY</category>");
    if (p && (p = strstr(p, "<obsrValue>")) && sscanf(p, "<obsrValue>%15[^<]", v)==1) {
        int code = atoi(v);
        const char *rain =
            (code==0)?"강수 없음":
            (code==1)?"비":
            (code==2)?"비/눈":
            (code==3)?"눈":
            (code==5)?"빗방울":
            (code==6)?"빗방울/눈날림":
            (code==7)?"눈날림":"기타";
        printf("☔ 강수: %s (코드:%d)\r\n", rain, code);
    }
}

// 링크ID=1 로 HTTPS 호출 (link 0 = 서버 연결 유지)
// esp.c - 교체용: 링크1 패시브 수신(CIPRECVDATA) 기반
int esp_weather_ultra_request(const char *apiKey, int nx, int ny, char *outBuf, size_t outSize)
{
    uint16_t length = 0;
    char cmd[96], req[700], d[16], t[16];
    size_t used = 0;

    // SSL 설정 (실패 무시)
    (void)esp_at_command((uint8_t*)"AT+CIPSSLSIZE=4096\r\n", (uint8_t*)response, &length, 1000);
    (void)esp_at_command((uint8_t*)"AT+CIPSSLCCONF=0\r\n",   (uint8_t*)response, &length, 1000);

    // 링크1 SSL 접속
    if (esp_at_command((uint8_t*)"AT+CIPSTART=1,\"SSL\",\"apihub.kma.go.kr\",443\r\n",
                       (uint8_t*)response, &length, 15000) != 0) {
        printf("CIPSTART(1) SSL fail\r\n");
        return -1;
    }

    // base_date/base_time(정시, 10분 규칙) 생성
    get_base_datetime_hour(d, sizeof(d), t, sizeof(t));

    // HTTP 요청 만들기
    snprintf(req, sizeof(req),
        "GET /api/typ02/openApi/VilageFcstInfoService_2.0/getUltraSrtNcst"
        "?pageNo=1&numOfRows=1000&dataType=XML"
        "&base_date=%s&base_time=%s&nx=%d&ny=%d&authKey=%s HTTP/1.1\r\n"
        "Host: apihub.kma.go.kr\r\n"
        "Connection: close\r\n\r\n",
        d, t, nx, ny, apiKey);

    // 링크1로 전송 길이 알림 + 페이로드 송신
    snprintf(cmd, sizeof(cmd), "AT+CIPSEND=1,%d\r\n", (int)strlen(req));
    if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) != 0) {
        printf("CIPSEND(1) fail\r\n");
        (void)esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
        return -2;
    }
    // 실제 payload 전송 (HAL_UART_Transmit 직접 사용 OK)
    if (HAL_UART_Transmit(&huart6, (uint8_t*)req, strlen(req), 5000) != HAL_OK) {
        printf("payload(1) tx fail\r\n");
        (void)esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
        return -3;
    }

    // 링크1 수신버퍼에서만 뽑기 (공용 +IPD 라인 소비 안함)
    memset(outBuf, 0, outSize);
    int idle = 40; // 타임아웃 약 8초
    while (idle-- > 0) {
        // 1) 얼마나 쌓였는지?
        if (esp_at_command((uint8_t*)"AT+CIPRECVDATA?\r\n", (uint8_t*)response, &length, 500) == 0) {
            // 예: +CIPRECVDATA:1,512
            int link = -1, avail = 0;
            if (sscanf((char*)response, "%*[^:]:%d,%d", &link, &avail) == 2 && link == 1 && avail > 0) {
                // 2) 그만큼 읽어오기 (쪼개서)
                while (avail > 0) {
                    int chunk = (avail > 256) ? 256 : avail;
                    char getcmd[32];
                    snprintf(getcmd, sizeof(getcmd), "AT+CIPRECVDATA=1,%d\r\n", chunk);
                    if (esp_at_command((uint8_t*)getcmd, (uint8_t*)response, &length, 1000) != 0)
                        break;

                    // 응답 안의 페이로드 부분만 outBuf에 축적
                    // 간단히 전체 응답에서 마지막 "OK" 앞쪽 데이터 덩어리만 긁어도 동작함
                    // (모듈 펌웨어별 포맷 차이가 있으니 여유있게 처리)
                    char *payload = strstr((char*)response, "\r\n"); // 첫 CRLF 뒤부터가 데이터일 때가 많음
                    if (!payload) payload = (char*)response;
                    else payload += 2;

                    size_t paylen = strlen(payload);
                    if (used + paylen + 1 < outSize) {
                        memcpy(outBuf + used, payload, paylen);
                        used += paylen;
                        outBuf[used] = 0;
                    }
                    avail -= chunk;
                    idle = 40; // 받은 게 있으면 타임아웃 연장
                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(200));
    }

    (void)esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);

    // 상태코드 확인(있으면)
    if (strstr(outBuf, "HTTP/1.1 200") == NULL) {
        printf("weather http status not 200\r\n");
        return -4;
    }
    return 0;
}


